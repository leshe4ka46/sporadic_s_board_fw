
sporadic_s_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800acf0  0800acf0  0001acf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b24c  0800b24c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b24c  0800b24c  0001b24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b254  0800b254  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001e8  0800b440  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800b440  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110fb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289a  00000000  00000000  0003130f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00033bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00034940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e66  00000000  00000000  000355d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012830  00000000  00000000  0004e436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca3f  00000000  00000000  00060c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed6a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b64  00000000  00000000  000ed6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acd8 	.word	0x0800acd8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800acd8 	.word	0x0800acd8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADXL_init>:
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_adxl_i2c;
readings *_adxl_data;
uint16_t scale=0;
void ADXL_init(I2C_HandleTypeDef *i2c,readings *data){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	_adxl_i2c=i2c;
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <ADXL_init+0x54>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
	_adxl_data=data;
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <ADXL_init+0x58>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6013      	str	r3, [r2, #0]
	log_s_wnl("ADXL345 started---");
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADXL_init+0x5c>)
 8000f74:	f002 f86e 	bl	8003054 <log_s_wnl>
	if(ADXL_ReadReg(ADXL345_DEVID)==229){
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f841 	bl	8001000 <ADXL_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2be5      	cmp	r3, #229	; 0xe5
 8000f82:	d103      	bne.n	8000f8c <ADXL_init+0x30>
		log_s("ok");
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <ADXL_init+0x60>)
 8000f86:	f002 f843 	bl	8003010 <log_s>
 8000f8a:	e002      	b.n	8000f92 <ADXL_init+0x36>
	}
	else{
		log_s("ERROR");
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <ADXL_init+0x64>)
 8000f8e:	f002 f83f 	bl	8003010 <log_s>
	}
	_adxl_data->adxl345.scale=2*(1<<(7-ADXL_get_range()));
 8000f92:	f000 f873 	bl	800107c <ADXL_get_range>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f1c3 0307 	rsb	r3, r3, #7
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <ADXL_init+0x58>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	81da      	strh	r2, [r3, #14]
	//log_s_int("dev id=",ADXL_ReadReg(ADXL345_DEVID));
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000204 	.word	0x20000204
 8000fb4:	20000208 	.word	0x20000208
 8000fb8:	0800acf0 	.word	0x0800acf0
 8000fbc:	0800ad04 	.word	0x0800ad04
 8000fc0:	0800ad08 	.word	0x0800ad08

08000fc4 <ADXL_WriteReg>:




void ADXL_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, arr, 2, 1000);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <ADXL_WriteReg+0x38>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	21a6      	movs	r1, #166	; 0xa6
 8000fee:	f003 feb5 	bl	8004d5c <HAL_I2C_Master_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000204 	.word	0x20000204

08001000 <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, &reg, 1, 1000);
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <ADXL_ReadReg+0x40>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	21a6      	movs	r1, #166	; 0xa6
 800101a:	f003 fe9f 	bl	8004d5c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_adxl_i2c, ADXL_ADDR<<1, &result, 1, 1000);
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <ADXL_ReadReg+0x40>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 020f 	add.w	r2, r7, #15
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	21a6      	movs	r1, #166	; 0xa6
 8001030:	f003 ff92 	bl	8004f58 <HAL_I2C_Master_Receive>
	return result;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
	/*uint8_t result;
	HAL_I2C_Mem_Read (_adxl_i2c, ADXL_ADDR<<1, reg, 1, (uint8_t *)result, 1, 100);
	return result;*/
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000204 	.word	0x20000204

08001044 <ADXL_set_range>:
void ADXL_set_range(ADXLRANGE rng){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0x3)| rng);
 800104e:	2031      	movs	r0, #49	; 0x31
 8001050:	f7ff ffd6 	bl	8001000 <ADXL_ReadReg>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4619      	mov	r1, r3
 8001058:	2031      	movs	r0, #49	; 0x31
 800105a:	f7ff ffb3 	bl	8000fc4 <ADXL_WriteReg>
	_adxl_data->adxl345.scale=2*(1<<(7-rng));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f1c3 0307 	rsb	r3, r3, #7
 8001064:	2202      	movs	r2, #2
 8001066:	409a      	lsls	r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <ADXL_set_range+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	81da      	strh	r2, [r3, #14]
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000208 	.word	0x20000208

0800107c <ADXL_get_range>:

uint8_t ADXL_get_range(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)%4;
 8001080:	2031      	movs	r0, #49	; 0x31
 8001082:	f7ff ffbd 	bl	8001000 <ADXL_ReadReg>
 8001086:	4603      	mov	r3, r0
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}

08001092 <ADXL_set_rate>:

void ADXL_set_rate(ADXLBITRATE rate){
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_BW_RATE,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0b111)| rate);
 800109c:	2031      	movs	r0, #49	; 0x31
 800109e:	f7ff ffaf 	bl	8001000 <ADXL_ReadReg>
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	202c      	movs	r0, #44	; 0x2c
 80010a8:	f7ff ff8c 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ADXL_power>:
		case HZ3200:
			return 3200;
	}
}

void ADXL_power(uint8_t pw){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	if(pw==1){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10b      	bne.n	80010dc <ADXL_power+0x28>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL)| ADXL345_BIT_PWR_REG_MEASURE);
 80010c4:	202d      	movs	r0, #45	; 0x2d
 80010c6:	f7ff ff9b 	bl	8001000 <ADXL_ReadReg>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	202d      	movs	r0, #45	; 0x2d
 80010d6:	f7ff ff75 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
	}
}
 80010da:	e006      	b.n	80010ea <ADXL_power+0x36>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
 80010dc:	202d      	movs	r0, #45	; 0x2d
 80010de:	f7ff ff8f 	bl	8001000 <ADXL_ReadReg>
 80010e2:	2100      	movs	r1, #0
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff ff6d 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <ADXL_full_res>:
void ADXL_full_res(uint8_t res){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
	if(res==1){
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <ADXL_full_res+0x22>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)| ADXL345_BIT_FULL_RES_SET);
 8001102:	2031      	movs	r0, #49	; 0x31
 8001104:	f7ff ff7c 	bl	8001000 <ADXL_ReadReg>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	2031      	movs	r0, #49	; 0x31
 800110e:	f7ff ff59 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
	}
}
 8001112:	e00a      	b.n	800112a <ADXL_full_res+0x38>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
 8001114:	2031      	movs	r0, #49	; 0x31
 8001116:	f7ff ff73 	bl	8001000 <ADXL_ReadReg>
 800111a:	4603      	mov	r3, r0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	2031      	movs	r0, #49	; 0x31
 8001126:	f7ff ff4d 	bl	8000fc4 <ADXL_WriteReg>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MadgwickAHRSupdate>:
#define betaDef    0.5f    // 2 * proportional gain //0.3

volatile float beta = betaDef; // 2 * proportional gain (Kp)
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;  // quaternion of sensor frame relative to auxiliary frame

void MadgwickAHRSupdate(float tdelta, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001138:	b0b4      	sub	sp, #208	; 0xd0
 800113a:	af00      	add	r7, sp, #0
 800113c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8001140:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001144:	ed87 1a0b 	vstr	s2, [r7, #44]	; 0x2c
 8001148:	edc7 1a0a 	vstr	s3, [r7, #40]	; 0x28
 800114c:	ed87 2a09 	vstr	s4, [r7, #36]	; 0x24
 8001150:	edc7 2a08 	vstr	s5, [r7, #32]
 8001154:	ed87 3a07 	vstr	s6, [r7, #28]
 8001158:	edc7 3a06 	vstr	s7, [r7, #24]
 800115c:	ed87 4a05 	vstr	s8, [r7, #20]
 8001160:	edc7 4a04 	vstr	s9, [r7, #16]
  float hx, hy;
  float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
  float _8bx, _8bz;

  // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
  if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001164:	edd7 7a06 	vldr	s15, [r7, #24]
 8001168:	eef5 7a40 	vcmp.f32	s15, #0.0
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d11f      	bne.n	80011b2 <MadgwickAHRSupdate+0x7e>
 8001172:	edd7 7a05 	vldr	s15, [r7, #20]
 8001176:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d118      	bne.n	80011b2 <MadgwickAHRSupdate+0x7e>
 8001180:	edd7 7a04 	vldr	s15, [r7, #16]
 8001184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d111      	bne.n	80011b2 <MadgwickAHRSupdate+0x7e>
    MadgwickAHRSupdateIMU(tdelta, gx, gy, gz, ax, ay, az);
 800118e:	ed97 3a07 	vldr	s6, [r7, #28]
 8001192:	edd7 2a08 	vldr	s5, [r7, #32]
 8001196:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 800119a:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 800119e:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80011a2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80011a6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80011aa:	f001 f975 	bl	8002498 <MadgwickAHRSupdateIMU>
    return;
 80011ae:	f001 b963 	b.w	8002478 <MadgwickAHRSupdate+0x1344>
  }

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80011b2:	4be4      	ldr	r3, [pc, #912]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eeb1 7a67 	vneg.f32	s14, s15
 80011bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c4:	4be0      	ldr	r3, [pc, #896]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80011c6:	edd3 6a00 	vldr	s13, [r3]
 80011ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d6:	4bdd      	ldr	r3, [pc, #884]	; (800154c <MadgwickAHRSupdate+0x418>)
 80011d8:	edd3 6a00 	vldr	s13, [r3]
 80011dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80011f4:	4bd6      	ldr	r3, [pc, #856]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80011f6:	ed93 7a00 	vldr	s14, [r3]
 80011fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001202:	4bd1      	ldr	r3, [pc, #836]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001204:	edd3 6a00 	vldr	s13, [r3]
 8001208:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001214:	4bcd      	ldr	r3, [pc, #820]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001216:	edd3 6a00 	vldr	s13, [r3]
 800121a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800121e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001232:	4bc7      	ldr	r3, [pc, #796]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800123c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001240:	4bc0      	ldr	r3, [pc, #768]	; (8001544 <MadgwickAHRSupdate+0x410>)
 8001242:	edd3 6a00 	vldr	s13, [r3]
 8001246:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001252:	4bbe      	ldr	r3, [pc, #760]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001254:	edd3 6a00 	vldr	s13, [r3]
 8001258:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800125c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001270:	4bb7      	ldr	r3, [pc, #732]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	4bb1      	ldr	r3, [pc, #708]	; (8001544 <MadgwickAHRSupdate+0x410>)
 8001280:	edd3 6a00 	vldr	s13, [r3]
 8001284:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001290:	4bad      	ldr	r3, [pc, #692]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001292:	edd3 6a00 	vldr	s13, [r3]
 8001296:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800129a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80012ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d10e      	bne.n	80012da <MadgwickAHRSupdate+0x1a6>
 80012bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80012c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d107      	bne.n	80012da <MadgwickAHRSupdate+0x1a6>
 80012ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	f001 8043 	beq.w	8002360 <MadgwickAHRSupdate+0x122c>

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80012da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	f001 fbef 	bl	8002ae0 <invSqrt>
 8001302:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
    ax *= recipNorm;
 8001306:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800130a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= recipNorm;
 8001316:	ed97 7a08 	vldr	s14, [r7, #32]
 800131a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= recipNorm;
 8001326:	ed97 7a07 	vldr	s14, [r7, #28]
 800132a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001336:	edd7 7a06 	vldr	s15, [r7, #24]
 800133a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800133e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001342:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134a:	edd7 7a04 	vldr	s15, [r7, #16]
 800134e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f001 fbc1 	bl	8002ae0 <invSqrt>
 800135e:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
    mx *= recipNorm;
 8001362:	ed97 7a06 	vldr	s14, [r7, #24]
 8001366:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	edc7 7a06 	vstr	s15, [r7, #24]
    my *= recipNorm;
 8001372:	ed97 7a05 	vldr	s14, [r7, #20]
 8001376:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	edc7 7a05 	vstr	s15, [r7, #20]
    mz *= recipNorm;
 8001382:	ed97 7a04 	vldr	s14, [r7, #16]
 8001386:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0mx = 2.0f * q0 * mx;
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800139c:	ed97 7a06 	vldr	s14, [r7, #24]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    _2q0my = 2.0f * q0 * my;
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    _2q0mz = 2.0f * q0 * mz;
 80013be:	4b64      	ldr	r3, [pc, #400]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    _2q1mx = 2.0f * q1 * mx;
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013de:	ed97 7a06 	vldr	s14, [r7, #24]
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    _2q0 = 2.0f * q0;
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    _2q1 = 2.0f * q1;
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001402:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    _2q2 = 2.0f * q2;
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001410:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    _2q3 = 2.0f * q3;
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    _2q0q2 = 2.0f * q0 * q2;
 8001422:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <MadgwickAHRSupdate+0x414>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001436:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    _2q2q3 = 2.0f * q2 * q3;
 800143a:	4b43      	ldr	r3, [pc, #268]	; (8001548 <MadgwickAHRSupdate+0x414>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    q0q0 = q0 * q0;
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    q0q1 = q0 * q1;
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MadgwickAHRSupdate+0x410>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001476:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    q0q2 = q0 * q2;
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    q0q3 = q0 * q3;
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q1q1 = q1 * q1;
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q1q2 = q1 * q2;
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q1q3 = q1 * q3;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MadgwickAHRSupdate+0x418>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014da:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    q2q2 = q2 * q2;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q2q3 = q2 * q3;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014f4:	ed93 7a00 	vldr	s14, [r3]
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MadgwickAHRSupdate+0x418>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001502:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    q3q3 = q3 * q3;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MadgwickAHRSupdate+0x418>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

    // Reference direction of Earth's magnetic field
    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800151a:	ed97 7a06 	vldr	s14, [r7, #24]
 800151e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001528:	edd3 6a00 	vldr	s13, [r3]
 800152c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <MadgwickAHRSupdate+0x414>)
 800153a:	edd3 6a00 	vldr	s13, [r3]
 800153e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001542:	e007      	b.n	8001554 <MadgwickAHRSupdate+0x420>
 8001544:	2000020c 	.word	0x2000020c
 8001548:	20000210 	.word	0x20000210
 800154c:	20000214 	.word	0x20000214
 8001550:	20000004 	.word	0x20000004
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001560:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001578:	4bef      	ldr	r3, [pc, #956]	; (8001938 <MadgwickAHRSupdate+0x804>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001582:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001586:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800158a:	edd7 7a04 	vldr	s15, [r7, #16]
 800158e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001592:	4bea      	ldr	r3, [pc, #936]	; (800193c <MadgwickAHRSupdate+0x808>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80015b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80015c4:	4bdd      	ldr	r3, [pc, #884]	; (800193c <MadgwickAHRSupdate+0x808>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80015ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d2:	edd7 6a05 	vldr	s13, [r7, #20]
 80015d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80015da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e2:	4bd7      	ldr	r3, [pc, #860]	; (8001940 <MadgwickAHRSupdate+0x80c>)
 80015e4:	edd3 6a00 	vldr	s13, [r3]
 80015e8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80015ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f4:	4bd0      	ldr	r3, [pc, #832]	; (8001938 <MadgwickAHRSupdate+0x804>)
 80015f6:	edd3 6a00 	vldr	s13, [r3]
 80015fa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001606:	edd7 6a05 	vldr	s13, [r7, #20]
 800160a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800160e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001616:	edd7 6a05 	vldr	s13, [r7, #20]
 800161a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800161e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001626:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800162a:	edd7 7a04 	vldr	s15, [r7, #16]
 800162e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001632:	4bc2      	ldr	r3, [pc, #776]	; (800193c <MadgwickAHRSupdate+0x808>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	edd7 6a05 	vldr	s13, [r7, #20]
 8001644:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    _2bx = sqrt(hx * hx + hy * hy);
 8001654:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001658:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800165c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001660:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	ee17 0a90 	vmov	r0, s15
 800166c:	f7fe ff74 	bl	8000558 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b10 	vmov	d0, r2, r3
 8001678:	f008 ffb6 	bl	800a5e8 <sqrt>
 800167c:	ec53 2b10 	vmov	r2, r3, d0
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa98 	bl	8000bb8 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800168c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001690:	eeb1 7a67 	vneg.f32	s14, s15
 8001694:	4ba8      	ldr	r3, [pc, #672]	; (8001938 <MadgwickAHRSupdate+0x804>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169e:	4ba8      	ldr	r3, [pc, #672]	; (8001940 <MadgwickAHRSupdate+0x80c>)
 80016a0:	edd3 6a00 	vldr	s13, [r3]
 80016a4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80016b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c0:	4b9e      	ldr	r3, [pc, #632]	; (800193c <MadgwickAHRSupdate+0x808>)
 80016c2:	edd3 6a00 	vldr	s13, [r3]
 80016c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80016d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e2:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80016e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ee:	4b93      	ldr	r3, [pc, #588]	; (800193c <MadgwickAHRSupdate+0x808>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001700:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001710:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _4bx = 2.0f * _2bx;
 8001720:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001724:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001728:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    _4bz = 2.0f * _2bz;
 800172c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001734:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _8bx = 2.0f * _4bx;
 8001738:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800173c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001740:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _8bz = 2.0f * _4bz;
 8001744:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s0 = -_2q2 * (2.0f * (q1q3 - q0q2) - ax) + _2q1 * (2.0f * (q0q1 + q2q3) - ay) - _4bz * q2 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (-_4bx * q3 + _4bz * q1) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + _4bx * q2 * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 8001750:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001754:	eeb1 7a67 	vneg.f32	s14, s15
 8001758:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800175c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001760:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001764:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001768:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800176c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001778:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800177c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001780:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001784:	edd7 7a08 	vldr	s15, [r7, #32]
 8001788:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800178c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	4604      	mov	r4, r0
 80017a2:	460d      	mov	r5, r1
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <MadgwickAHRSupdate+0x804>)
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b2:	ee17 0a90 	vmov	r0, s15
 80017b6:	f7fe fecf 	bl	8000558 <__aeabi_f2d>
 80017ba:	4680      	mov	r8, r0
 80017bc:	4689      	mov	r9, r1
 80017be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017c0:	f7fe feca 	bl	8000558 <__aeabi_f2d>
 80017c4:	4682      	mov	sl, r0
 80017c6:	468b      	mov	fp, r1
 80017c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017ca:	f7fe fec5 	bl	8000558 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	495b      	ldr	r1, [pc, #364]	; (8001944 <MadgwickAHRSupdate+0x810>)
 80017d8:	f7fe fd5e 	bl	8000298 <__aeabi_dsub>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80017e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80017e6:	f7fe feb7 	bl	8000558 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f2:	f7fe fd51 	bl	8000298 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4650      	mov	r0, sl
 80017fc:	4659      	mov	r1, fp
 80017fe:	f7fe ff03 	bl	8000608 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4692      	mov	sl, r2
 8001808:	469b      	mov	fp, r3
 800180a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800180e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001812:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001816:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800181a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe fe99 	bl	8000558 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4650      	mov	r0, sl
 800182c:	4659      	mov	r1, fp
 800182e:	f7fe fd35 	bl	800029c <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4692      	mov	sl, r2
 8001838:	469b      	mov	fp, r3
 800183a:	69b8      	ldr	r0, [r7, #24]
 800183c:	f7fe fe8c 	bl	8000558 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4650      	mov	r0, sl
 8001846:	4659      	mov	r1, fp
 8001848:	f7fe fd26 	bl	8000298 <__aeabi_dsub>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4640      	mov	r0, r8
 8001852:	4649      	mov	r1, r9
 8001854:	f7fe fed8 	bl	8000608 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fd1a 	bl	8000298 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4614      	mov	r4, r2
 800186a:	461d      	mov	r5, r3
 800186c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001870:	eeb1 7a67 	vneg.f32	s14, s15
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <MadgwickAHRSupdate+0x808>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MadgwickAHRSupdate+0x80c>)
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001894:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001898:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800189c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a4:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80018a8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	ee17 0a90 	vmov	r0, s15
 80018cc:	f7fe fe44 	bl	8000558 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fce0 	bl	800029c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MadgwickAHRSupdate+0x804>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fe2f 	bl	8000558 <__aeabi_f2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
 80018fe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001902:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	ee17 0a90 	vmov	r0, s15
 8001916:	f7fe fe1f 	bl	8000558 <__aeabi_f2d>
 800191a:	4682      	mov	sl, r0
 800191c:	468b      	mov	fp, r1
 800191e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	e9c7 0100 	strd	r0, r1, [r7]
 8001928:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800192c:	f7fe fe14 	bl	8000558 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e008      	b.n	8001948 <MadgwickAHRSupdate+0x814>
 8001936:	bf00      	nop
 8001938:	20000210 	.word	0x20000210
 800193c:	20000214 	.word	0x20000214
 8001940:	2000020c 	.word	0x2000020c
 8001944:	3fe00000 	.word	0x3fe00000
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	49e9      	ldr	r1, [pc, #932]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 800194e:	f7fe fca3 	bl	8000298 <__aeabi_dsub>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4614      	mov	r4, r2
 8001958:	461d      	mov	r5, r3
 800195a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800195c:	f7fe fdfc 	bl	8000558 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fc96 	bl	8000298 <__aeabi_dsub>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001974:	f7fe fe48 	bl	8000608 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4650      	mov	r0, sl
 800197e:	4659      	mov	r1, fp
 8001980:	f7fe fc8c 	bl	800029c <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	6938      	ldr	r0, [r7, #16]
 800198e:	f7fe fde3 	bl	8000558 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fc7d 	bl	8000298 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4640      	mov	r0, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	f7fe fe2f 	bl	8000608 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b2:	f7fe fc73 	bl	800029c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8fb 	bl	8000bb8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
    s1 = _2q3 * (2.0f * (q1q3 - q0q2) - ax) + _2q0 * (2.0f * (q0q1 + q2q3) - ay) - 4.0f * q1 * (2.0f * (0.5 - q1q1 - q2q2) - az) + _4bz * q3 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (_4bx * q2 + _4bz * q0) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q3 - _8bz * q1) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 80019c6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80019ca:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80019e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80019ea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f7fe fda3 	bl	8000558 <__aeabi_f2d>
 8001a12:	4604      	mov	r4, r0
 8001a14:	460d      	mov	r5, r1
 8001a16:	4bb8      	ldr	r3, [pc, #736]	; (8001cf8 <MadgwickAHRSupdate+0xbc4>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	ee17 0a90 	vmov	r0, s15
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	4680      	mov	r8, r0
 8001a2e:	4689      	mov	r9, r1
 8001a30:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a34:	f7fe fd90 	bl	8000558 <__aeabi_f2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	49ac      	ldr	r1, [pc, #688]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 8001a42:	f7fe fc29 	bl	8000298 <__aeabi_dsub>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4692      	mov	sl, r2
 8001a4c:	469b      	mov	fp, r3
 8001a4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4650      	mov	r0, sl
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	f7fe fc1c 	bl	8000298 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f7fe fc16 	bl	800029c <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4692      	mov	sl, r2
 8001a76:	469b      	mov	fp, r3
 8001a78:	69f8      	ldr	r0, [r7, #28]
 8001a7a:	f7fe fd6d 	bl	8000558 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4650      	mov	r0, sl
 8001a84:	4659      	mov	r1, fp
 8001a86:	f7fe fc07 	bl	8000298 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f7fe fdb9 	bl	8000608 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fbfb 	bl	8000298 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4692      	mov	sl, r2
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <MadgwickAHRSupdate+0xbc8>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd4c 	bl	8000558 <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ac6:	f7fe fd47 	bl	8000558 <__aeabi_f2d>
 8001aca:	4680      	mov	r8, r0
 8001acc:	4689      	mov	r9, r1
 8001ace:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	f04f 0000 	mov.w	r0, #0
 8001adc:	4985      	ldr	r1, [pc, #532]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 8001ade:	f7fe fbdb 	bl	8000298 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001aea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af8:	f7fe fbce 	bl	8000298 <__aeabi_dsub>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4640      	mov	r0, r8
 8001b02:	4649      	mov	r1, r9
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4690      	mov	r8, r2
 8001b0e:	4699      	mov	r9, r3
 8001b10:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b14:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fd16 	bl	8000558 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4640      	mov	r0, r8
 8001b32:	4649      	mov	r1, r9
 8001b34:	f7fe fbb2 	bl	800029c <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4699      	mov	r9, r3
 8001b40:	69b8      	ldr	r0, [r7, #24]
 8001b42:	f7fe fd09 	bl	8000558 <__aeabi_f2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f7fe fba3 	bl	8000298 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fd55 	bl	8000608 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4650      	mov	r0, sl
 8001b64:	4659      	mov	r1, fp
 8001b66:	f7fe fb99 	bl	800029c <__adddf3>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <MadgwickAHRSupdate+0xbcc>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b80:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <MadgwickAHRSupdate+0xbd0>)
 8001b82:	edd3 6a00 	vldr	s13, [r3]
 8001b86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b92:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001b96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b9e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ba2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba6:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001baa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bb2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	ee17 0a90 	vmov	r0, s15
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	f7fe fb5f 	bl	800029c <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MadgwickAHRSupdate+0xbc8>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <MadgwickAHRSupdate+0xbc4>)
 8001bf6:	edd3 6a00 	vldr	s13, [r3]
 8001bfa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	ee17 0a90 	vmov	r0, s15
 8001c0a:	f7fe fca5 	bl	8000558 <__aeabi_f2d>
 8001c0e:	4680      	mov	r8, r0
 8001c10:	4689      	mov	r9, r1
 8001c12:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001c16:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	ee17 0a90 	vmov	r0, s15
 8001c2a:	f7fe fc95 	bl	8000558 <__aeabi_f2d>
 8001c2e:	4682      	mov	sl, r0
 8001c30:	468b      	mov	fp, r1
 8001c32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c34:	f7fe fc90 	bl	8000558 <__aeabi_f2d>
 8001c38:	e9c7 0100 	strd	r0, r1, [r7]
 8001c3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c40:	f7fe fc8a 	bl	8000558 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 8001c4e:	f7fe fb23 	bl	8000298 <__aeabi_dsub>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c5c:	f7fe fc7c 	bl	8000558 <__aeabi_f2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb16 	bl	8000298 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c74:	f7fe fcc8 	bl	8000608 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4650      	mov	r0, sl
 8001c7e:	4659      	mov	r1, fp
 8001c80:	f7fe fb0c 	bl	800029c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	6938      	ldr	r0, [r7, #16]
 8001c8e:	f7fe fc63 	bl	8000558 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fafd 	bl	8000298 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb2:	f7fe faf3 	bl	800029c <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff7b 	bl	8000bb8 <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
    s2 = -_2q0 * (2.0f * (q1q3 - q0q2) - ax) + _2q3 * (2.0f * (q0q1 + q2q3) - ay) + (-4.0f * q2) * (2.0f * (0.5 - q1q1 - q2q2) - az) + (-_8bx * q2 - _4bz * q0) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (_4bx * q1 + _4bz * q3) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q0 - _8bz * q2) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 8001cc6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001cca:	eeb1 7a67 	vneg.f32	s14, s15
 8001cce:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001cd2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001cd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cda:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cde:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ce2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001cee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001cf2:	e009      	b.n	8001d08 <MadgwickAHRSupdate+0xbd4>
 8001cf4:	3fe00000 	.word	0x3fe00000
 8001cf8:	2000020c 	.word	0x2000020c
 8001cfc:	20000214 	.word	0x20000214
 8001d00:	20000210 	.word	0x20000210
 8001d04:	20000004 	.word	0x20000004
 8001d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d0c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d10:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d18:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	ee17 0a90 	vmov	r0, s15
 8001d28:	f7fe fc16 	bl	8000558 <__aeabi_f2d>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
 8001d30:	4be8      	ldr	r3, [pc, #928]	; (80020d4 <MadgwickAHRSupdate+0xfa0>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	ee17 0a90 	vmov	r0, s15
 8001d42:	f7fe fc09 	bl	8000558 <__aeabi_f2d>
 8001d46:	4680      	mov	r8, r0
 8001d48:	4689      	mov	r9, r1
 8001d4a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d4e:	f7fe fc03 	bl	8000558 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	49df      	ldr	r1, [pc, #892]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8001d5c:	f7fe fa9c 	bl	8000298 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4692      	mov	sl, r2
 8001d66:	469b      	mov	fp, r3
 8001d68:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d6a:	f7fe fbf5 	bl	8000558 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4650      	mov	r0, sl
 8001d74:	4659      	mov	r1, fp
 8001d76:	f7fe fa8f 	bl	8000298 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	f7fe fa89 	bl	800029c <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4692      	mov	sl, r2
 8001d90:	469b      	mov	fp, r3
 8001d92:	69f8      	ldr	r0, [r7, #28]
 8001d94:	f7fe fbe0 	bl	8000558 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4650      	mov	r0, sl
 8001d9e:	4659      	mov	r1, fp
 8001da0:	f7fe fa7a 	bl	8000298 <__aeabi_dsub>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4640      	mov	r0, r8
 8001daa:	4649      	mov	r1, r9
 8001dac:	f7fe fc2c 	bl	8000608 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fa70 	bl	800029c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4692      	mov	sl, r2
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001dc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001dcc:	4bc1      	ldr	r3, [pc, #772]	; (80020d4 <MadgwickAHRSupdate+0xfa0>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd6:	4bc1      	ldr	r3, [pc, #772]	; (80020dc <MadgwickAHRSupdate+0xfa8>)
 8001dd8:	edd3 6a00 	vldr	s13, [r3]
 8001ddc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	ee17 0a90 	vmov	r0, s15
 8001dec:	f7fe fbb4 	bl	8000558 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001df6:	f7fe fbaf 	bl	8000558 <__aeabi_f2d>
 8001dfa:	4680      	mov	r8, r0
 8001dfc:	4689      	mov	r9, r1
 8001dfe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e00:	f7fe fbaa 	bl	8000558 <__aeabi_f2d>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	49b2      	ldr	r1, [pc, #712]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8001e0e:	f7fe fa43 	bl	8000298 <__aeabi_dsub>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e1c:	f7fe fb9c 	bl	8000558 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e28:	f7fe fa36 	bl	8000298 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4640      	mov	r0, r8
 8001e32:	4649      	mov	r1, r9
 8001e34:	f7fe fbe8 	bl	8000608 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4690      	mov	r8, r2
 8001e3e:	4699      	mov	r9, r3
 8001e40:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001e44:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb7e 	bl	8000558 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4640      	mov	r0, r8
 8001e62:	4649      	mov	r1, r9
 8001e64:	f7fe fa1a 	bl	800029c <__adddf3>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4690      	mov	r8, r2
 8001e6e:	4699      	mov	r9, r3
 8001e70:	69b8      	ldr	r0, [r7, #24]
 8001e72:	f7fe fb71 	bl	8000558 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	f7fe fa0b 	bl	8000298 <__aeabi_dsub>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f7fe fbbd 	bl	8000608 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4650      	mov	r0, sl
 8001e94:	4659      	mov	r1, fp
 8001e96:	f7fe fa01 	bl	800029c <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	4b8f      	ldr	r3, [pc, #572]	; (80020e0 <MadgwickAHRSupdate+0xfac>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <MadgwickAHRSupdate+0xfb0>)
 8001eb2:	edd3 6a00 	vldr	s13, [r3]
 8001eb6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec2:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001ec6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001eca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ece:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed6:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001eda:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ede:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ee2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ee6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	ee17 0a90 	vmov	r0, s15
 8001efe:	f7fe fb2b 	bl	8000558 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7fe f9c7 	bl	800029c <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <MadgwickAHRSupdate+0xfa8>)
 8001f18:	ed93 7a00 	vldr	s14, [r3]
 8001f1c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <MadgwickAHRSupdate+0xfa0>)
 8001f26:	edd3 6a00 	vldr	s13, [r3]
 8001f2a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	4680      	mov	r8, r0
 8001f40:	4689      	mov	r9, r1
 8001f42:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001f46:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	ee17 0a90 	vmov	r0, s15
 8001f5a:	f7fe fafd 	bl	8000558 <__aeabi_f2d>
 8001f5e:	4682      	mov	sl, r0
 8001f60:	468b      	mov	fp, r1
 8001f62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001f64:	f7fe faf8 	bl	8000558 <__aeabi_f2d>
 8001f68:	e9c7 0100 	strd	r0, r1, [r7]
 8001f6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f70:	f7fe faf2 	bl	8000558 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	f04f 0000 	mov.w	r0, #0
 8001f7c:	4956      	ldr	r1, [pc, #344]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8001f7e:	f7fe f98b 	bl	8000298 <__aeabi_dsub>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4614      	mov	r4, r2
 8001f88:	461d      	mov	r5, r3
 8001f8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f8c:	f7fe fae4 	bl	8000558 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe f97e 	bl	8000298 <__aeabi_dsub>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa4:	f7fe fb30 	bl	8000608 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4650      	mov	r0, sl
 8001fae:	4659      	mov	r1, fp
 8001fb0:	f7fe f974 	bl	800029c <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	461d      	mov	r5, r3
 8001fbc:	6938      	ldr	r0, [r7, #16]
 8001fbe:	f7fe facb 	bl	8000558 <__aeabi_f2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe f965 	bl	8000298 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe fb17 	bl	8000608 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe2:	f7fe f95b 	bl	800029c <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fde3 	bl	8000bb8 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
    s3 = _2q1 * (2.0f * (q1q3 - q0q2) - ax) + _2q2 * (2.0f * (q0q1 + q2q3) - ay) + (-_8bx * q3 + _4bz * q1) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (-_4bx * q0 + _4bz * q2) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q1) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 8001ff6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ffa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002002:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002006:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800200a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800200e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002016:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800201a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800201e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002022:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002026:	edd7 7a08 	vldr	s15, [r7, #32]
 800202a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800202e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	ee17 0a90 	vmov	r0, s15
 800203e:	f7fe fa8b 	bl	8000558 <__aeabi_f2d>
 8002042:	4604      	mov	r4, r0
 8002044:	460d      	mov	r5, r1
 8002046:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800204a:	eeb1 7a67 	vneg.f32	s14, s15
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MadgwickAHRSupdate+0xfb0>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <MadgwickAHRSupdate+0xfac>)
 800205a:	edd3 6a00 	vldr	s13, [r3]
 800205e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206a:	ee17 0a90 	vmov	r0, s15
 800206e:	f7fe fa73 	bl	8000558 <__aeabi_f2d>
 8002072:	4680      	mov	r8, r0
 8002074:	4689      	mov	r9, r1
 8002076:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002078:	f7fe fa6e 	bl	8000558 <__aeabi_f2d>
 800207c:	4682      	mov	sl, r0
 800207e:	468b      	mov	fp, r1
 8002080:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002082:	f7fe fa69 	bl	8000558 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	f04f 0000 	mov.w	r0, #0
 800208e:	4912      	ldr	r1, [pc, #72]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8002090:	f7fe f902 	bl	8000298 <__aeabi_dsub>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800209c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800209e:	f7fe fa5b 	bl	8000558 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020aa:	f7fe f8f5 	bl	8000298 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4650      	mov	r0, sl
 80020b4:	4659      	mov	r1, fp
 80020b6:	f7fe faa7 	bl	8000608 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4692      	mov	sl, r2
 80020c0:	469b      	mov	fp, r3
 80020c2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020c6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020d2:	e009      	b.n	80020e8 <MadgwickAHRSupdate+0xfb4>
 80020d4:	20000210 	.word	0x20000210
 80020d8:	3fe00000 	.word	0x3fe00000
 80020dc:	20000004 	.word	0x20000004
 80020e0:	2000020c 	.word	0x2000020c
 80020e4:	20000214 	.word	0x20000214
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa32 	bl	8000558 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4650      	mov	r0, sl
 80020fa:	4659      	mov	r1, fp
 80020fc:	f7fe f8ce 	bl	800029c <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4692      	mov	sl, r2
 8002106:	469b      	mov	fp, r3
 8002108:	69b8      	ldr	r0, [r7, #24]
 800210a:	f7fe fa25 	bl	8000558 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4650      	mov	r0, sl
 8002114:	4659      	mov	r1, fp
 8002116:	f7fe f8bf 	bl	8000298 <__aeabi_dsub>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4640      	mov	r0, r8
 8002120:	4649      	mov	r1, r9
 8002122:	f7fe fa71 	bl	8000608 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4620      	mov	r0, r4
 800212c:	4629      	mov	r1, r5
 800212e:	f7fe f8b5 	bl	800029c <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	461d      	mov	r5, r3
 800213a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800213e:	eeb1 7a67 	vneg.f32	s14, s15
 8002142:	4bcf      	ldr	r3, [pc, #828]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214c:	4bcd      	ldr	r3, [pc, #820]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 800214e:	edd3 6a00 	vldr	s13, [r3]
 8002152:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002162:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002166:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800216a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800216e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002172:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002176:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800217a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800217e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002182:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002186:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800218a:	edd7 7a05 	vldr	s15, [r7, #20]
 800218e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	ee17 0a90 	vmov	r0, s15
 800219a:	f7fe f9dd 	bl	8000558 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe f879 	bl	800029c <__adddf3>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80021b2:	4bb5      	ldr	r3, [pc, #724]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c0:	ee17 0a90 	vmov	r0, s15
 80021c4:	f7fe f9c8 	bl	8000558 <__aeabi_f2d>
 80021c8:	4680      	mov	r8, r0
 80021ca:	4689      	mov	r9, r1
 80021cc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80021d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80021d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	ee17 0a90 	vmov	r0, s15
 80021e4:	f7fe f9b8 	bl	8000558 <__aeabi_f2d>
 80021e8:	4682      	mov	sl, r0
 80021ea:	468b      	mov	fp, r1
 80021ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80021ee:	f7fe f9b3 	bl	8000558 <__aeabi_f2d>
 80021f2:	e9c7 0100 	strd	r0, r1, [r7]
 80021f6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80021fa:	f7fe f9ad 	bl	8000558 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	49a1      	ldr	r1, [pc, #644]	; (800248c <MadgwickAHRSupdate+0x1358>)
 8002208:	f7fe f846 	bl	8000298 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002216:	f7fe f99f 	bl	8000558 <__aeabi_f2d>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4620      	mov	r0, r4
 8002220:	4629      	mov	r1, r5
 8002222:	f7fe f839 	bl	8000298 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800222e:	f7fe f9eb 	bl	8000608 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4650      	mov	r0, sl
 8002238:	4659      	mov	r1, fp
 800223a:	f7fe f82f 	bl	800029c <__adddf3>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	6938      	ldr	r0, [r7, #16]
 8002248:	f7fe f986 	bl	8000558 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fe f820 	bl	8000298 <__aeabi_dsub>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4640      	mov	r0, r8
 800225e:	4649      	mov	r1, r9
 8002260:	f7fe f9d2 	bl	8000608 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800226c:	f7fe f816 	bl	800029c <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc9e 	bl	8000bb8 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8002280:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002284:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002288:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800228c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800229c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	f000 fc16 	bl	8002ae0 <invSqrt>
 80022b4:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc

    // normalise step magnitude
    s0 *= recipNorm;
 80022b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80022bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s1 *= recipNorm;
 80022c8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80022cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s2 *= recipNorm;
 80022d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80022dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s3 *= recipNorm;
 80022e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80022ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Apply feedback step
    qDot1 -= beta * s0;
 80022f8:	4b65      	ldr	r3, [pc, #404]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800230a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
    qDot2 -= beta * s1;
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 8002314:	ed93 7a00 	vldr	s14, [r3]
 8002318:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800231c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002320:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002328:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
    qDot3 -= beta * s2;
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 800232e:	ed93 7a00 	vldr	s14, [r3]
 8002332:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    qDot4 -= beta * s3;
 8002346:	4b52      	ldr	r3, [pc, #328]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002354:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * tdelta;
 8002360:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8002364:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * tdelta;
 800237c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002380:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002388:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 8002394:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * tdelta;
 8002398:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800239c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023b0:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * tdelta;
 80023b4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80023b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ca:	4b32      	ldr	r3, [pc, #200]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 80023cc:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 80023d2:	ed93 7a00 	vldr	s14, [r3]
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 80023e2:	edd3 6a00 	vldr	s13, [r3]
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023f6:	edd3 6a00 	vldr	s13, [r3]
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 800240a:	edd3 6a00 	vldr	s13, [r3]
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	f000 fb5e 	bl	8002ae0 <invSqrt>
 8002424:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
  q0 *= recipNorm;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 8002438:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 800244c:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 8002460:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 8002474:	edc3 7a00 	vstr	s15, [r3]
}
 8002478:	37d0      	adds	r7, #208	; 0xd0
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002480:	20000004 	.word	0x20000004
 8002484:	20000210 	.word	0x20000210
 8002488:	2000020c 	.word	0x2000020c
 800248c:	3fe00000 	.word	0x3fe00000
 8002490:	20000000 	.word	0x20000000
 8002494:	20000214 	.word	0x20000214

08002498 <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float tdelta, float gx, float gy, float gz, float ax, float ay, float az) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b09e      	sub	sp, #120	; 0x78
 800249c:	af00      	add	r7, sp, #0
 800249e:	ed87 0a07 	vstr	s0, [r7, #28]
 80024a2:	edc7 0a06 	vstr	s1, [r7, #24]
 80024a6:	ed87 1a05 	vstr	s2, [r7, #20]
 80024aa:	edc7 1a04 	vstr	s3, [r7, #16]
 80024ae:	ed87 2a03 	vstr	s4, [r7, #12]
 80024b2:	edc7 2a02 	vstr	s5, [r7, #8]
 80024b6:	ed87 3a01 	vstr	s6, [r7, #4]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 , _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80024ba:	4bec      	ldr	r3, [pc, #944]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eeb1 7a67 	vneg.f32	s14, s15
 80024c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024cc:	4be8      	ldr	r3, [pc, #928]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024de:	4be5      	ldr	r3, [pc, #916]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 80024e0:	edd3 6a00 	vldr	s13, [r3]
 80024e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80024fc:	4bde      	ldr	r3, [pc, #888]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 80024fe:	ed93 7a00 	vldr	s14, [r3]
 8002502:	edd7 7a06 	vldr	s15, [r7, #24]
 8002506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250a:	4bd9      	ldr	r3, [pc, #868]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800250c:	edd3 6a00 	vldr	s13, [r3]
 8002510:	edd7 7a04 	vldr	s15, [r7, #16]
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251c:	4bd5      	ldr	r3, [pc, #852]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	edd7 7a05 	vldr	s15, [r7, #20]
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002536:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800253a:	4bcf      	ldr	r3, [pc, #828]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	edd7 7a05 	vldr	s15, [r7, #20]
 8002544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002548:	4bc8      	ldr	r3, [pc, #800]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800254a:	edd3 6a00 	vldr	s13, [r3]
 800254e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002556:	ee37 7a67 	vsub.f32	s14, s14, s15
 800255a:	4bc6      	ldr	r3, [pc, #792]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	edd7 7a06 	vldr	s15, [r7, #24]
 8002564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002574:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002578:	4bbf      	ldr	r3, [pc, #764]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002586:	4bb9      	ldr	r3, [pc, #740]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 8002588:	edd3 6a00 	vldr	s13, [r3]
 800258c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002598:	4bb5      	ldr	r3, [pc, #724]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800259a:	edd3 6a00 	vldr	s13, [r3]
 800259e:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80025b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d10e      	bne.n	80025e2 <MadgwickAHRSupdateIMU+0x14a>
 80025c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d107      	bne.n	80025e2 <MadgwickAHRSupdateIMU+0x14a>
 80025d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	f000 81e5 	beq.w	80029ac <MadgwickAHRSupdateIMU+0x514>
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80025e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	eeb0 0a67 	vmov.f32	s0, s15
 8002606:	f000 fa6b 	bl	8002ae0 <invSqrt>
 800260a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ax *= recipNorm;
 800260e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002612:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNorm;
 800261e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002622:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNorm;
 800262e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002632:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	edc7 7a01 	vstr	s15, [r7, #4]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0 = 2.0f * q0;
 800263e:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002648:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    _2q1 = 2.0f * q1;
 800264c:	4b87      	ldr	r3, [pc, #540]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002656:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2q2 = 2.0f * q2;
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002664:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    _2q3 = 2.0f * q3;
 8002668:	4b82      	ldr	r3, [pc, #520]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002672:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4q0 = 4.0f * q0;
 8002676:	4b80      	ldr	r3, [pc, #512]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4q1 = 4.0f * q1;
 8002688:	4b78      	ldr	r3, [pc, #480]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002696:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    _4q2 = 4.0f * q2;
 800269a:	4b75      	ldr	r3, [pc, #468]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    _8q1 = 8.0f * q1;
 80026ac:	4b6f      	ldr	r3, [pc, #444]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    _8q2 = 8.0f * q2;
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    q0q0 = q0 * q0;
 80026d0:	4b69      	ldr	r3, [pc, #420]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4b68      	ldr	r3, [pc, #416]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q1q1 = q1 * q1;
 80026e4:	4b61      	ldr	r3, [pc, #388]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	4b60      	ldr	r3, [pc, #384]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q2q2 = q2 * q2;
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002708:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    q3q3 = q3 * q3;
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800270e:	ed93 7a00 	vldr	s14, [r3]
 8002712:	4b58      	ldr	r3, [pc, #352]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Gradient decent algorithm corrective step
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002720:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002724:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002730:	edd7 7a03 	vldr	s15, [r7, #12]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800273c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002740:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002750:	edd7 7a02 	vldr	s15, [r7, #8]
 8002754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002760:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002764:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002770:	edd7 7a03 	vldr	s15, [r7, #12]
 8002774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800277c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002780:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002784:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002788:	4b38      	ldr	r3, [pc, #224]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002796:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800279a:	edd7 7a02 	vldr	s15, [r7, #8]
 800279e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80027aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ae:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80027b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80027c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80027d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80027e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80027ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80027fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002808:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800280c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002818:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800281c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002828:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800282c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002830:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002834:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002844:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002850:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002854:	edd7 7a01 	vldr	s15, [r7, #4]
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002860:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002864:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002868:	e008      	b.n	800287c <MadgwickAHRSupdateIMU+0x3e4>
 800286a:	bf00      	nop
 800286c:	2000020c 	.word	0x2000020c
 8002870:	20000210 	.word	0x20000210
 8002874:	20000214 	.word	0x20000214
 8002878:	20000004 	.word	0x20000004
 800287c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002884:	4b91      	ldr	r3, [pc, #580]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002892:	edd7 7a03 	vldr	s15, [r7, #12]
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028a2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80028a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80028bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c8:	edc7 7a08 	vstr	s15, [r7, #32]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80028cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80028f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	f000 f8f0 	bl	8002ae0 <invSqrt>
 8002900:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    s0 *= recipNorm;
 8002904:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002908:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800290c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002910:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    s1 *= recipNorm;
 8002914:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002918:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    s2 *= recipNorm;
 8002924:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002928:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    s3 *= recipNorm;
 8002934:	ed97 7a08 	vldr	s14, [r7, #32]
 8002938:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800293c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002940:	edc7 7a08 	vstr	s15, [r7, #32]
    // Apply feedback step
    qDot1 -= beta * s0;
 8002944:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    qDot2 -= beta * s1;
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    qDot3 -= beta * s2;
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002986:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800298a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    qDot4 -= beta * s3;
 8002992:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 8002994:	ed93 7a00 	vldr	s14, [r3]
 8002998:	edd7 7a08 	vldr	s15, [r7, #32]
 800299c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * tdelta;
 80029ac:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80029b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * tdelta;
 80029c8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80029cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * tdelta;
 80029e4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80029e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * tdelta;
 8002a00:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a2e:	edd3 6a00 	vldr	s13, [r3]
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002a42:	edd3 6a00 	vldr	s13, [r3]
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a56:	edd3 6a00 	vldr	s13, [r3]
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a68:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6c:	f000 f838 	bl	8002ae0 <invSqrt>
 8002a70:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  q0 *= recipNorm;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a84:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a8a:	ed93 7a00 	vldr	s14, [r3]
 8002a8e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002a9e:	ed93 7a00 	vldr	s14, [r3]
 8002aa2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002ab2:	ed93 7a00 	vldr	s14, [r3]
 8002ab6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	4b03      	ldr	r3, [pc, #12]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
}
 8002ac4:	bf00      	nop
 8002ac6:	3778      	adds	r7, #120	; 0x78
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000214 	.word	0x20000214
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	2000020c 	.word	0x2000020c
 8002adc:	20000210 	.word	0x20000210

08002ae0 <invSqrt>:

float invSqrt(float x) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 8002aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af6:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	105a      	asrs	r2, r3, #1
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <invSqrt+0x9c>)
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8002b18:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	edc7 7a04 	vstr	s15, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8002b40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b54:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b64:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	ee07 3a90 	vmov	s15, r3
}
 8002b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	5f3759df 	.word	0x5f3759df

08002b80 <quat2Euler>:
float old_e[3];
#define absf(x) (x<0)?x:-1*x
void quat2Euler( float q[4], float e[3] ) {
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	ed2d 8b02 	vpush	{d8}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  double sqx = q[1] * q[1];
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fcd7 	bl	8000558 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double sqy = q[2] * q[2];
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc6:	ee17 0a90 	vmov	r0, s15
 8002bca:	f7fd fcc5 	bl	8000558 <__aeabi_f2d>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double sqz = q[3] * q[3];
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	330c      	adds	r3, #12
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	ee17 0a90 	vmov	r0, s15
 8002bee:	f7fd fcb3 	bl	8000558 <__aeabi_f2d>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  e[0] = atan2f(2.f * (q[2] * q[3] + q[1] * q[0]), 1 - 2.f * (sqx + sqy)); // -sqx - sqy + sqz + sqw);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	330c      	adds	r3, #12
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	edd3 6a00 	vldr	s13, [r3]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8002c28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c30:	f7fd fb34 	bl	800029c <__adddf3>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	f7fd fb2c 	bl	800029c <__adddf3>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	493e      	ldr	r1, [pc, #248]	; (8002d48 <quat2Euler+0x1c8>)
 8002c4e:	f7fd fb23 	bl	8000298 <__aeabi_dsub>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7fd ffad 	bl	8000bb8 <__aeabi_d2f>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	ee00 3a90 	vmov	s1, r3
 8002c64:	eeb0 0a48 	vmov.f32	s0, s16
 8002c68:	f007 fd16 	bl	800a698 <atan2f>
 8002c6c:	eef0 7a40 	vmov.f32	s15, s0
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	edc3 7a00 	vstr	s15, [r3]
  e[1] = asinf(-2.f * (q[1] * q[3] - q[2] * q[0]));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	ed93 7a00 	vldr	s14, [r3]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	330c      	adds	r3, #12
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	edd3 6a00 	vldr	s13, [r3]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	1d1c      	adds	r4, r3, #4
 8002cac:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb0:	f007 fcc6 	bl	800a640 <asinf>
 8002cb4:	eef0 7a40 	vmov.f32	s15, s0
 8002cb8:	edc4 7a00 	vstr	s15, [r4]
  e[2] = atan2f(2.f * (q[1] * q[2] + q[3] * q[0]), 1 - 2.f * (sqy + sqz)); //sqx - sqy - sqz + sqw);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	ed93 7a00 	vldr	s14, [r3]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	edd3 6a00 	vldr	s13, [r3]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8002cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cf2:	f7fd fad3 	bl	800029c <__adddf3>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	f7fd facb 	bl	800029c <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	490e      	ldr	r1, [pc, #56]	; (8002d48 <quat2Euler+0x1c8>)
 8002d10:	f7fd fac2 	bl	8000298 <__aeabi_dsub>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff4c 	bl	8000bb8 <__aeabi_d2f>
 8002d20:	4602      	mov	r2, r0
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f103 0408 	add.w	r4, r3, #8
 8002d28:	ee00 2a90 	vmov	s1, r2
 8002d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d30:	f007 fcb2 	bl	800a698 <atan2f>
 8002d34:	eef0 7a40 	vmov.f32	s15, s0
 8002d38:	edc4 7a00 	vstr	s15, [r4]
	  }
	  else{
		  e[ii]=old_e[ii];
	  }
  }*/
}
 8002d3c:	bf00      	nop
 8002d3e:	3724      	adds	r7, #36	; 0x24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	ecbd 8b02 	vpop	{d8}
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	3ff00000 	.word	0x3ff00000

08002d4c <BMP180_init>:
const uint8_t BMP180_EEPROM_ADDR_LSB[11] = { 0xab, 0xad, 0xaf, 0xb1, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

BMP180_SETTINGS _calib_data;
BMP180_REGS _regs;

void BMP180_init(I2C_HandleTypeDef *i2c,readings *data){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	_bmp_i2c=i2c;
 8002d56:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <BMP180_init+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6013      	str	r3, [r2, #0]
	_bmp_data=data;
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <BMP180_init+0x44>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6013      	str	r3, [r2, #0]
	log_s_wnl("BMP180 started---");
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <BMP180_init+0x48>)
 8002d64:	f000 f976 	bl	8003054 <log_s_wnl>
	if (BMP180_ReadReg(BMP180_GET_ID_REG)==BMP180_CHIP_ID){
 8002d68:	20d0      	movs	r0, #208	; 0xd0
 8002d6a:	f000 f819 	bl	8002da0 <BMP180_ReadReg>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b55      	cmp	r3, #85	; 0x55
 8002d72:	d103      	bne.n	8002d7c <BMP180_init+0x30>
		log_s("ok");
 8002d74:	4808      	ldr	r0, [pc, #32]	; (8002d98 <BMP180_init+0x4c>)
 8002d76:	f000 f94b 	bl	8003010 <log_s>
	}
	else{
		log_s("ERROR");
	}
}
 8002d7a:	e002      	b.n	8002d82 <BMP180_init+0x36>
		log_s("ERROR");
 8002d7c:	4807      	ldr	r0, [pc, #28]	; (8002d9c <BMP180_init+0x50>)
 8002d7e:	f000 f947 	bl	8003010 <log_s>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000218 	.word	0x20000218
 8002d90:	2000021c 	.word	0x2000021c
 8002d94:	0800ad10 	.word	0x0800ad10
 8002d98:	0800ad24 	.word	0x0800ad24
 8002d9c:	0800ad28 	.word	0x0800ad28

08002da0 <BMP180_ReadReg>:
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
	uint8_t arr[2] = { reg, cmd };
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, arr, 2, 1000);
}

uint8_t BMP180_ReadReg(uint8_t reg) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, &reg, 1, 1000);
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <BMP180_ReadReg+0x40>)
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	1dfa      	adds	r2, r7, #7
 8002db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2301      	movs	r3, #1
 8002db8:	21ee      	movs	r1, #238	; 0xee
 8002dba:	f001 ffcf 	bl	8004d5c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp_i2c, BMP180_ADDR << 1, &result, 1, 1000);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <BMP180_ReadReg+0x40>)
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f107 020f 	add.w	r2, r7, #15
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	21ee      	movs	r1, #238	; 0xee
 8002dd0:	f002 f8c2 	bl	8004f58 <HAL_I2C_Master_Receive>
	return result;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000218 	.word	0x20000218

08002de4 <BMP180_set_oss>:

int16_t _raw_t;
uint32_t _raw_p;

uint8_t _oss=0;
void BMP180_set_oss(uint8_t oss){
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
	_oss=oss;
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <BMP180_set_oss+0x1c>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	7013      	strb	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	20000236 	.word	0x20000236

08002e04 <BMP180_get_calibration_coefficients>:
		HAL_Delay (26);
	}
}

void BMP180_get_calibration_coefficients()
{
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 8002e0a:	af0a      	add	r7, sp, #40	; 0x28
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8) | BMP180_ReadReg(BMP180_AC1_LSB);
 8002e0c:	20aa      	movs	r0, #170	; 0xaa
 8002e0e:	f7ff ffc7 	bl	8002da0 <BMP180_ReadReg>
 8002e12:	4603      	mov	r3, r0
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	b21c      	sxth	r4, r3
 8002e18:	20ab      	movs	r0, #171	; 0xab
 8002e1a:	f7ff ffc1 	bl	8002da0 <BMP180_ReadReg>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4323      	orrs	r3, r4
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e28:	801a      	strh	r2, [r3, #0]
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8) | BMP180_ReadReg(BMP180_AC2_LSB);
 8002e2a:	20ac      	movs	r0, #172	; 0xac
 8002e2c:	f7ff ffb8 	bl	8002da0 <BMP180_ReadReg>
 8002e30:	4603      	mov	r3, r0
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	b21c      	sxth	r4, r3
 8002e36:	20ad      	movs	r0, #173	; 0xad
 8002e38:	f7ff ffb2 	bl	8002da0 <BMP180_ReadReg>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	4323      	orrs	r3, r4
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e46:	805a      	strh	r2, [r3, #2]
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8) | BMP180_ReadReg(BMP180_AC3_LSB);
 8002e48:	20ae      	movs	r0, #174	; 0xae
 8002e4a:	f7ff ffa9 	bl	8002da0 <BMP180_ReadReg>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b21c      	sxth	r4, r3
 8002e54:	20af      	movs	r0, #175	; 0xaf
 8002e56:	f7ff ffa3 	bl	8002da0 <BMP180_ReadReg>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e64:	809a      	strh	r2, [r3, #4]
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8) | BMP180_ReadReg(BMP180_AC4_LSB);
 8002e66:	20b0      	movs	r0, #176	; 0xb0
 8002e68:	f7ff ff9a 	bl	8002da0 <BMP180_ReadReg>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	b21c      	sxth	r4, r3
 8002e72:	20b1      	movs	r0, #177	; 0xb1
 8002e74:	f7ff ff94 	bl	8002da0 <BMP180_ReadReg>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	4323      	orrs	r3, r4
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e84:	80da      	strh	r2, [r3, #6]
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8) | BMP180_ReadReg(BMP180_AC5_LSB);
 8002e86:	20b2      	movs	r0, #178	; 0xb2
 8002e88:	f7ff ff8a 	bl	8002da0 <BMP180_ReadReg>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b21c      	sxth	r4, r3
 8002e92:	20b3      	movs	r0, #179	; 0xb3
 8002e94:	f7ff ff84 	bl	8002da0 <BMP180_ReadReg>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4323      	orrs	r3, r4
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002ea4:	811a      	strh	r2, [r3, #8]
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8) | BMP180_ReadReg(BMP180_AC6_LSB);
 8002ea6:	20b4      	movs	r0, #180	; 0xb4
 8002ea8:	f7ff ff7a 	bl	8002da0 <BMP180_ReadReg>
 8002eac:	4603      	mov	r3, r0
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	b21c      	sxth	r4, r3
 8002eb2:	20b5      	movs	r0, #181	; 0xb5
 8002eb4:	f7ff ff74 	bl	8002da0 <BMP180_ReadReg>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4323      	orrs	r3, r4
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002ec4:	815a      	strh	r2, [r3, #10]
	_calib_data.B1 =  (BMP180_ReadReg(BMP180_B1_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 8002ec6:	20b6      	movs	r0, #182	; 0xb6
 8002ec8:	f7ff ff6a 	bl	8002da0 <BMP180_ReadReg>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b21c      	sxth	r4, r3
 8002ed2:	20b7      	movs	r0, #183	; 0xb7
 8002ed4:	f7ff ff64 	bl	8002da0 <BMP180_ReadReg>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	4323      	orrs	r3, r4
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002ee2:	819a      	strh	r2, [r3, #12]
	_calib_data.B2 =  (BMP180_ReadReg(BMP180_B2_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 8002ee4:	20b8      	movs	r0, #184	; 0xb8
 8002ee6:	f7ff ff5b 	bl	8002da0 <BMP180_ReadReg>
 8002eea:	4603      	mov	r3, r0
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	b21c      	sxth	r4, r3
 8002ef0:	20b7      	movs	r0, #183	; 0xb7
 8002ef2:	f7ff ff55 	bl	8002da0 <BMP180_ReadReg>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	4323      	orrs	r3, r4
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f00:	81da      	strh	r2, [r3, #14]
	_calib_data.MB =  (BMP180_ReadReg(BMP180_MB_MSB) << 8)  | BMP180_ReadReg(BMP180_MB_LSB);
 8002f02:	20ba      	movs	r0, #186	; 0xba
 8002f04:	f7ff ff4c 	bl	8002da0 <BMP180_ReadReg>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	b21c      	sxth	r4, r3
 8002f0e:	20bb      	movs	r0, #187	; 0xbb
 8002f10:	f7ff ff46 	bl	8002da0 <BMP180_ReadReg>
 8002f14:	4603      	mov	r3, r0
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	4323      	orrs	r3, r4
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f1e:	821a      	strh	r2, [r3, #16]
	_calib_data.MC =  (BMP180_ReadReg(BMP180_MC_MSB) << 8)  | BMP180_ReadReg(BMP180_MC_LSB);
 8002f20:	20bc      	movs	r0, #188	; 0xbc
 8002f22:	f7ff ff3d 	bl	8002da0 <BMP180_ReadReg>
 8002f26:	4603      	mov	r3, r0
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21c      	sxth	r4, r3
 8002f2c:	20bd      	movs	r0, #189	; 0xbd
 8002f2e:	f7ff ff37 	bl	8002da0 <BMP180_ReadReg>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	4323      	orrs	r3, r4
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f3c:	825a      	strh	r2, [r3, #18]
	_calib_data.MD =  (BMP180_ReadReg(BMP180_MD_MSB) << 8)  | BMP180_ReadReg(BMP180_MD_LSB);
 8002f3e:	20be      	movs	r0, #190	; 0xbe
 8002f40:	f7ff ff2e 	bl	8002da0 <BMP180_ReadReg>
 8002f44:	4603      	mov	r3, r0
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	b21c      	sxth	r4, r3
 8002f4a:	20bf      	movs	r0, #191	; 0xbf
 8002f4c:	f7ff ff28 	bl	8002da0 <BMP180_ReadReg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b21b      	sxth	r3, r3
 8002f54:	4323      	orrs	r3, r4
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f5a:	829a      	strh	r2, [r3, #20]
	char* test[200];
	sprintf((char*)test,"Calib coef:%d %d %d %d %d %d %d %d %d %d %d",_calib_data.AC1,_calib_data.AC2,_calib_data.AC3,_calib_data.AC4,_calib_data.AC5,_calib_data.AC6,_calib_data.B1,_calib_data.B1,_calib_data.MB,_calib_data.MC,_calib_data.MD);
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	469c      	mov	ip, r3
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f6a:	469e      	mov	lr, r3
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f76:	88db      	ldrh	r3, [r3, #6]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f7c:	891b      	ldrh	r3, [r3, #8]
 8002f7e:	461c      	mov	r4, r3
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f82:	895b      	ldrh	r3, [r3, #10]
 8002f84:	461d      	mov	r5, r3
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f8c:	461e      	mov	r6, r3
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f90:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f98:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002fa0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002fa8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fac:	f107 0010 	add.w	r0, r7, #16
 8002fb0:	9308      	str	r3, [sp, #32]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	9307      	str	r3, [sp, #28]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	9306      	str	r3, [sp, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	9305      	str	r3, [sp, #20]
 8002fbe:	9604      	str	r6, [sp, #16]
 8002fc0:	9503      	str	r5, [sp, #12]
 8002fc2:	9402      	str	r4, [sp, #8]
 8002fc4:	9101      	str	r1, [sp, #4]
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	4673      	mov	r3, lr
 8002fca:	4662      	mov	r2, ip
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <BMP180_get_calibration_coefficients+0x1e8>)
 8002fce:	f005 f893 	bl	80080f8 <siprintf>
	log_s(test);
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f81a 	bl	8003010 <log_s>
}
 8002fdc:	bf00      	nop
 8002fde:	f507 774d 	add.w	r7, r7, #820	; 0x334
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000220 	.word	0x20000220
 8002fec:	0800ad30 	.word	0x0800ad30

08002ff0 <debug_init>:
#include "debug.h"
#include <stdio.h>
UART_HandleTypeDef *_dbg_uart;

void debug_init(UART_HandleTypeDef *uart){
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	_dbg_uart=uart;
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <debug_init+0x1c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000238 	.word	0x20000238

08003010 <log_s>:



void log_s(const char *str){
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <log_s+0x3c>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd f8df 	bl	80001e0 <strlen>
 8003022:	4603      	mov	r3, r0
 8003024:	b29a      	uxth	r2, r3
 8003026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4620      	mov	r0, r4
 800302e:	f004 f81f 	bl	8007070 <HAL_UART_Transmit>
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)"\r\n",2,1000);
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <log_s+0x3c>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303a:	2202      	movs	r2, #2
 800303c:	4904      	ldr	r1, [pc, #16]	; (8003050 <log_s+0x40>)
 800303e:	f004 f817 	bl	8007070 <HAL_UART_Transmit>
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	20000238 	.word	0x20000238
 8003050:	0800ad5c 	.word	0x0800ad5c

08003054 <log_s_wnl>:

void log_s_wnl(const char *str){
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <log_s_wnl+0x2c>)
 800305e:	681c      	ldr	r4, [r3, #0]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fd f8bd 	bl	80001e0 <strlen>
 8003066:	4603      	mov	r3, r0
 8003068:	b29a      	uxth	r2, r3
 800306a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4620      	mov	r0, r4
 8003072:	f003 fffd 	bl	8007070 <HAL_UART_Transmit>
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	20000238 	.word	0x20000238

08003084 <log_s_int>:
char* char_log[50];
void log_s_int(const char *str,int32_t i){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
	sprintf((char*)char_log,"%s %ld\r\n",str,i);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4905      	ldr	r1, [pc, #20]	; (80030a8 <log_s_int+0x24>)
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <log_s_int+0x28>)
 8003096:	f005 f82f 	bl	80080f8 <siprintf>
	log_s_wnl((const char*)char_log);
 800309a:	4804      	ldr	r0, [pc, #16]	; (80030ac <log_s_int+0x28>)
 800309c:	f7ff ffda 	bl	8003054 <log_s_wnl>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	0800ad60 	.word	0x0800ad60
 80030ac:	2000023c 	.word	0x2000023c

080030b0 <log_p>:
void log_p(int16_t *data_p){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	sprintf((char*)char_log,"%p\r\n",data_p);
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	4905      	ldr	r1, [pc, #20]	; (80030d0 <log_p+0x20>)
 80030bc:	4805      	ldr	r0, [pc, #20]	; (80030d4 <log_p+0x24>)
 80030be:	f005 f81b 	bl	80080f8 <siprintf>
	log_s_wnl((const char*)char_log);
 80030c2:	4804      	ldr	r0, [pc, #16]	; (80030d4 <log_p+0x24>)
 80030c4:	f7ff ffc6 	bl	8003054 <log_s_wnl>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0800ad6c 	.word	0x0800ad6c
 80030d4:	2000023c 	.word	0x2000023c

080030d8 <log_p_imu>:
void log_p_imu(float *data_p){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af02      	add	r7, sp, #8
 80030de:	6078      	str	r0, [r7, #4]
	sprintf((char*)char_log,"%p %p %p\r\n",data_p,data_p+1,data_p+2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	1d1a      	adds	r2, r3, #4
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3308      	adds	r3, #8
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4905      	ldr	r1, [pc, #20]	; (8003104 <log_p_imu+0x2c>)
 80030f0:	4805      	ldr	r0, [pc, #20]	; (8003108 <log_p_imu+0x30>)
 80030f2:	f005 f801 	bl	80080f8 <siprintf>
	log_s_wnl((const char*)char_log);
 80030f6:	4804      	ldr	r0, [pc, #16]	; (8003108 <log_p_imu+0x30>)
 80030f8:	f7ff ffac 	bl	8003054 <log_s_wnl>
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0800ad74 	.word	0x0800ad74
 8003108:	2000023c 	.word	0x2000023c

0800310c <GY801_init>:
#include "gy801.h"
#include <stdio.h>
#include <math.h>
readings *_data_gy;
void GY801_init(I2C_HandleTypeDef *i2c,readings *data){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	//_i2c=i2c;
	_data_gy=data;
 8003116:	4a15      	ldr	r2, [pc, #84]	; (800316c <GY801_init+0x60>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6013      	str	r3, [r2, #0]
	ADXL_init(i2c,data);
 800311c:	6839      	ldr	r1, [r7, #0]
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd ff1c 	bl	8000f5c <ADXL_init>
	ADXL_set_range(RANGE_2G);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fd ff8d 	bl	8001044 <ADXL_set_range>
	ADXL_full_res(1);
 800312a:	2001      	movs	r0, #1
 800312c:	f7fd ffe1 	bl	80010f2 <ADXL_full_res>
	ADXL_set_rate(HZ100);
 8003130:	200a      	movs	r0, #10
 8003132:	f7fd ffae 	bl	8001092 <ADXL_set_rate>
	ADXL_power(1);
 8003136:	2001      	movs	r0, #1
 8003138:	f7fd ffbc 	bl	80010b4 <ADXL_power>
	BMP180_init(i2c,data);
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff fe04 	bl	8002d4c <BMP180_init>
	BMP180_set_oss(1);
 8003144:	2001      	movs	r0, #1
 8003146:	f7ff fe4d 	bl	8002de4 <BMP180_set_oss>
	BMP180_get_calibration_coefficients();
 800314a:	f7ff fe5b 	bl	8002e04 <BMP180_get_calibration_coefficients>
	GYRO_init(i2c,data);
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f817 	bl	8003184 <GYRO_init>
	GYRO_power(1);
 8003156:	2001      	movs	r0, #1
 8003158:	f000 f88a 	bl	8003270 <GYRO_power>
	mag_init(i2c,data);
 800315c:	6839      	ldr	r1, [r7, #0]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f8d0 	bl	8003304 <mag_init>


}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000304 	.word	0x20000304

08003170 <GY801_update_data>:

void GY801_update_data(){
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
	/*BMP180_get_data();
	BMP180_upd_data();
	ADXL_get_data();*/
	GYRO_get_data();
 8003174:	f000 f890 	bl	8003298 <GYRO_get_data>
	//mag_get_data();
	lsm303dlhc_get_acc();
 8003178:	f000 f95e 	bl	8003438 <lsm303dlhc_get_acc>
	lsm303dlhc_get_mag();
 800317c:	f000 f998 	bl	80034b0 <lsm303dlhc_get_mag>
	//sprintf((char*)gy_data,"X:%06d Y:%06d Z:%06d",_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	//sprintf((char*)gy_data,"%ld;%ld;%ld.%ld;%d;%d;%d;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),_data_gy->bmp180.pressure,_data_gy->bmp180.temp/10,_data_gy->bmp180.temp%10,_data_gy->adxl345.ax,_data_gy->adxl345.ay,_data_gy->adxl345.az,(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	sprintf((char*)gy_data,"%ld;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx*0.1388,_data_gy->lsm303dlhc_mag.my*0.1388,_data_gy->lsm303dlhc_mag.mz*0.1388);
	log_s((char*)gy_data);*/

}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <GYRO_init>:
#include "math.h"
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_gyro_i2c;
readings *_gyro_data;
void GYRO_init(I2C_HandleTypeDef *i2c,readings *data){
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
	_gyro_i2c=i2c;
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <GYRO_init+0x58>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6013      	str	r3, [r2, #0]
	_gyro_data=data;
 8003194:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <GYRO_init+0x5c>)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6013      	str	r3, [r2, #0]
	log_s_wnl("L3G4200D started---");
 800319a:	4812      	ldr	r0, [pc, #72]	; (80031e4 <GYRO_init+0x60>)
 800319c:	f7ff ff5a 	bl	8003054 <log_s_wnl>
	if(GYRO_ReadReg(GYRO_REG_DEVID)==211){
 80031a0:	200f      	movs	r0, #15
 80031a2:	f000 f843 	bl	800322c <GYRO_ReadReg>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2bd3      	cmp	r3, #211	; 0xd3
 80031aa:	d103      	bne.n	80031b4 <GYRO_init+0x30>
		log_s("ok");
 80031ac:	480e      	ldr	r0, [pc, #56]	; (80031e8 <GYRO_init+0x64>)
 80031ae:	f7ff ff2f 	bl	8003010 <log_s>
 80031b2:	e002      	b.n	80031ba <GYRO_init+0x36>
	}
	else{
		log_s("ERROR");
 80031b4:	480d      	ldr	r0, [pc, #52]	; (80031ec <GYRO_init+0x68>)
 80031b6:	f7ff ff2b 	bl	8003010 <log_s>
	}
	//GYRO_WriteReg(GYRO_REG_CTRL_REG1,0b00001111);
	//GYRO_WriteReg(GYRO_REG_CTRL_REG2,0b00101001);
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,0b00001111);
 80031ba:	210f      	movs	r1, #15
 80031bc:	2020      	movs	r0, #32
 80031be:	f000 f817 	bl	80031f0 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG2,0b00000000);
 80031c2:	2100      	movs	r1, #0
 80031c4:	2021      	movs	r0, #33	; 0x21
 80031c6:	f000 f813 	bl	80031f0 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG4,0b00110000);
 80031ca:	2130      	movs	r1, #48	; 0x30
 80031cc:	2023      	movs	r0, #35	; 0x23
 80031ce:	f000 f80f 	bl	80031f0 <GYRO_WriteReg>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000308 	.word	0x20000308
 80031e0:	2000030c 	.word	0x2000030c
 80031e4:	0800ad98 	.word	0x0800ad98
 80031e8:	0800adac 	.word	0x0800adac
 80031ec:	0800adb0 	.word	0x0800adb0

080031f0 <GYRO_WriteReg>:

void GYRO_WriteReg(uint8_t reg, uint8_t cmd) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	4603      	mov	r3, r0
 80031f8:	460a      	mov	r2, r1
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	4613      	mov	r3, r2
 80031fe:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	733b      	strb	r3, [r7, #12]
 8003204:	79bb      	ldrb	r3, [r7, #6]
 8003206:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, arr, 2, 1000);
 8003208:	4b07      	ldr	r3, [pc, #28]	; (8003228 <GYRO_WriteReg+0x38>)
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	f107 020c 	add.w	r2, r7, #12
 8003210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	2302      	movs	r3, #2
 8003218:	21d2      	movs	r1, #210	; 0xd2
 800321a:	f001 fd9f 	bl	8004d5c <HAL_I2C_Master_Transmit>
}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000308 	.word	0x20000308

0800322c <GYRO_ReadReg>:

uint8_t GYRO_ReadReg(uint8_t reg) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, &reg, 1, 1000);
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <GYRO_ReadReg+0x40>)
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	1dfa      	adds	r2, r7, #7
 800323c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	2301      	movs	r3, #1
 8003244:	21d2      	movs	r1, #210	; 0xd2
 8003246:	f001 fd89 	bl	8004d5c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_gyro_i2c, GYRO_ADDR<<1, &result, 1, 1000);
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <GYRO_ReadReg+0x40>)
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f107 020f 	add.w	r2, r7, #15
 8003252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2301      	movs	r3, #1
 800325a:	21d2      	movs	r1, #210	; 0xd2
 800325c:	f001 fe7c 	bl	8004f58 <HAL_I2C_Master_Receive>
	return result;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000308 	.word	0x20000308

08003270 <GYRO_power>:

void GYRO_power(uint8_t pwr){
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,pwr?0x0F:0x00);
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <GYRO_power+0x14>
 8003280:	230f      	movs	r3, #15
 8003282:	e000      	b.n	8003286 <GYRO_power+0x16>
 8003284:	2300      	movs	r3, #0
 8003286:	4619      	mov	r1, r3
 8003288:	2020      	movs	r0, #32
 800328a:	f7ff ffb1 	bl	80031f0 <GYRO_WriteReg>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <GYRO_get_data>:

void GYRO_get_data(){
 8003298:	b598      	push	{r3, r4, r7, lr}
 800329a:	af00      	add	r7, sp, #0
	_gyro_data->l3g4200d.gx=((GYRO_ReadReg(0x29)<<8)|GYRO_ReadReg(0x28));
 800329c:	2029      	movs	r0, #41	; 0x29
 800329e:	f7ff ffc5 	bl	800322c <GYRO_ReadReg>
 80032a2:	4603      	mov	r3, r0
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	b21c      	sxth	r4, r3
 80032a8:	2028      	movs	r0, #40	; 0x28
 80032aa:	f7ff ffbf 	bl	800322c <GYRO_ReadReg>
 80032ae:	4603      	mov	r3, r0
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <GYRO_get_data+0x68>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4322      	orrs	r2, r4
 80032b8:	b212      	sxth	r2, r2
 80032ba:	831a      	strh	r2, [r3, #24]
	_gyro_data->l3g4200d.gy=((GYRO_ReadReg(0x2B)<<8)|GYRO_ReadReg(0x2A));
 80032bc:	202b      	movs	r0, #43	; 0x2b
 80032be:	f7ff ffb5 	bl	800322c <GYRO_ReadReg>
 80032c2:	4603      	mov	r3, r0
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	b21c      	sxth	r4, r3
 80032c8:	202a      	movs	r0, #42	; 0x2a
 80032ca:	f7ff ffaf 	bl	800322c <GYRO_ReadReg>
 80032ce:	4603      	mov	r3, r0
 80032d0:	b21a      	sxth	r2, r3
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <GYRO_get_data+0x68>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4322      	orrs	r2, r4
 80032d8:	b212      	sxth	r2, r2
 80032da:	835a      	strh	r2, [r3, #26]
	_gyro_data->l3g4200d.gz=((GYRO_ReadReg(0x2D)<<8)|GYRO_ReadReg(0x2C));
 80032dc:	202d      	movs	r0, #45	; 0x2d
 80032de:	f7ff ffa5 	bl	800322c <GYRO_ReadReg>
 80032e2:	4603      	mov	r3, r0
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	b21c      	sxth	r4, r3
 80032e8:	202c      	movs	r0, #44	; 0x2c
 80032ea:	f7ff ff9f 	bl	800322c <GYRO_ReadReg>
 80032ee:	4603      	mov	r3, r0
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	4b03      	ldr	r3, [pc, #12]	; (8003300 <GYRO_get_data+0x68>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4322      	orrs	r2, r4
 80032f8:	b212      	sxth	r2, r2
 80032fa:	839a      	strh	r2, [r3, #28]
}
 80032fc:	bf00      	nop
 80032fe:	bd98      	pop	{r3, r4, r7, pc}
 8003300:	2000030c 	.word	0x2000030c

08003304 <mag_init>:
#include "lsm303dlhc.h"
I2C_HandleTypeDef *_mag_i2c;
readings *_mag_data;
void mag_init(I2C_HandleTypeDef *i2c,readings *data){
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	_mag_i2c=i2c;
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <mag_init+0x7c>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6013      	str	r3, [r2, #0]
	_mag_data=data;
 8003314:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <mag_init+0x80>)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6013      	str	r3, [r2, #0]
	log_s_wnl("LSM303DLHC started---");
 800331a:	481b      	ldr	r0, [pc, #108]	; (8003388 <mag_init+0x84>)
 800331c:	f7ff fe9a 	bl	8003054 <log_s_wnl>
	if(mag_read_data(1,LSM303DLHC_REG_WHOAMI)==0x33){
 8003320:	210f      	movs	r1, #15
 8003322:	2001      	movs	r0, #1
 8003324:	f000 f836 	bl	8003394 <mag_read_data>
 8003328:	4603      	mov	r3, r0
 800332a:	2b33      	cmp	r3, #51	; 0x33
 800332c:	d121      	bne.n	8003372 <mag_init+0x6e>
		log_s("ok");
 800332e:	4817      	ldr	r0, [pc, #92]	; (800338c <mag_init+0x88>)
 8003330:	f7ff fe6e 	bl	8003010 <log_s>
	else{
		log_s("ERROR");
		return;
	}
	/* accel config */
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG1_A,0b01110111);
 8003334:	2277      	movs	r2, #119	; 0x77
 8003336:	2120      	movs	r1, #32
 8003338:	2001      	movs	r0, #1
 800333a:	f000 f859 	bl	80033f0 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG2_A,0b10010000);
 800333e:	2290      	movs	r2, #144	; 0x90
 8003340:	2121      	movs	r1, #33	; 0x21
 8003342:	2001      	movs	r0, #1
 8003344:	f000 f854 	bl	80033f0 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG4_A,0b00111000);
 8003348:	2238      	movs	r2, #56	; 0x38
 800334a:	2123      	movs	r1, #35	; 0x23
 800334c:	2001      	movs	r0, #1
 800334e:	f000 f84f 	bl	80033f0 <mag_write_data>
	/* mag config */
	mag_write_data(0,LSM303DLHC_REG_CRA_REG_M,0b00011100);
 8003352:	221c      	movs	r2, #28
 8003354:	2100      	movs	r1, #0
 8003356:	2000      	movs	r0, #0
 8003358:	f000 f84a 	bl	80033f0 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_CRB_REG_M,0b10000000);
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	2101      	movs	r1, #1
 8003360:	2000      	movs	r0, #0
 8003362:	f000 f845 	bl	80033f0 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_MR_REG_M,0b00000000);
 8003366:	2200      	movs	r2, #0
 8003368:	2102      	movs	r1, #2
 800336a:	2000      	movs	r0, #0
 800336c:	f000 f840 	bl	80033f0 <mag_write_data>
 8003370:	e003      	b.n	800337a <mag_init+0x76>
		log_s("ERROR");
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <mag_init+0x8c>)
 8003374:	f7ff fe4c 	bl	8003010 <log_s>
		return;
 8003378:	bf00      	nop
}
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000310 	.word	0x20000310
 8003384:	20000314 	.word	0x20000314
 8003388:	0800adb8 	.word	0x0800adb8
 800338c:	0800add0 	.word	0x0800add0
 8003390:	0800add4 	.word	0x0800add4

08003394 <mag_read_data>:


uint8_t mag_read_data(uint8_t type,uint8_t reg){
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af04      	add	r7, sp, #16
 800339a:	4603      	mov	r3, r0
 800339c:	460a      	mov	r2, r1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71bb      	strb	r3, [r7, #6]
	//log_s_int("addr",((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1);
	uint8_t result;
	HAL_I2C_Mem_Read(_mag_i2c, (((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1)+!type, reg, I2C_MEMADD_SIZE_8BIT, &result, 1, 1000);
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <mag_read_data+0x58>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <mag_read_data+0x1e>
 80033ae:	2232      	movs	r2, #50	; 0x32
 80033b0:	e000      	b.n	80033b4 <mag_read_data+0x20>
 80033b2:	223c      	movs	r2, #60	; 0x3c
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	b299      	uxth	r1, r3
 80033c6:	79bb      	ldrb	r3, [r7, #6]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ce:	9302      	str	r3, [sp, #8]
 80033d0:	2301      	movs	r3, #1
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	f107 030f 	add.w	r3, r7, #15
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2301      	movs	r3, #1
 80033dc:	f002 f8dc 	bl	8005598 <HAL_I2C_Mem_Read>
	return result;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000310 	.word	0x20000310

080033f0 <mag_write_data>:
void mag_write_data(uint8_t type,uint8_t reg, uint8_t cmd){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af04      	add	r7, sp, #16
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	460b      	mov	r3, r1
 80033fc:	71bb      	strb	r3, [r7, #6]
 80033fe:	4613      	mov	r3, r2
 8003400:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(_mag_i2c, ((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 1000);
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <mag_write_data+0x44>)
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <mag_write_data+0x20>
 800340c:	2132      	movs	r1, #50	; 0x32
 800340e:	e000      	b.n	8003412 <mag_write_data+0x22>
 8003410:	213c      	movs	r1, #60	; 0x3c
 8003412:	79bb      	ldrb	r3, [r7, #6]
 8003414:	b29a      	uxth	r2, r3
 8003416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800341a:	9302      	str	r3, [sp, #8]
 800341c:	2301      	movs	r3, #1
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	1d7b      	adds	r3, r7, #5
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2301      	movs	r3, #1
 8003426:	f001 ffbd 	bl	80053a4 <HAL_I2C_Mem_Write>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000310 	.word	0x20000310

08003438 <lsm303dlhc_get_acc>:

void lsm303dlhc_get_acc(){
 8003438:	b598      	push	{r3, r4, r7, lr}
 800343a:	af00      	add	r7, sp, #0
	//uint32_t tm=HAL_GetTick();
	_mag_data->lsm303dlhc.ax=((mag_read_data(1,LSM303DLHC_REG_OUT_X_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_X_L_A));
 800343c:	2129      	movs	r1, #41	; 0x29
 800343e:	2001      	movs	r0, #1
 8003440:	f7ff ffa8 	bl	8003394 <mag_read_data>
 8003444:	4603      	mov	r3, r0
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b21c      	sxth	r4, r3
 800344a:	2128      	movs	r1, #40	; 0x28
 800344c:	2001      	movs	r0, #1
 800344e:	f7ff ffa1 	bl	8003394 <mag_read_data>
 8003452:	4603      	mov	r3, r0
 8003454:	b21a      	sxth	r2, r3
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <lsm303dlhc_get_acc+0x74>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4322      	orrs	r2, r4
 800345c:	b212      	sxth	r2, r2
 800345e:	821a      	strh	r2, [r3, #16]
	_mag_data->lsm303dlhc.ay=((mag_read_data(1,LSM303DLHC_REG_OUT_Y_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Y_L_A));
 8003460:	212b      	movs	r1, #43	; 0x2b
 8003462:	2001      	movs	r0, #1
 8003464:	f7ff ff96 	bl	8003394 <mag_read_data>
 8003468:	4603      	mov	r3, r0
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	b21c      	sxth	r4, r3
 800346e:	212a      	movs	r1, #42	; 0x2a
 8003470:	2001      	movs	r0, #1
 8003472:	f7ff ff8f 	bl	8003394 <mag_read_data>
 8003476:	4603      	mov	r3, r0
 8003478:	b21a      	sxth	r2, r3
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <lsm303dlhc_get_acc+0x74>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4322      	orrs	r2, r4
 8003480:	b212      	sxth	r2, r2
 8003482:	825a      	strh	r2, [r3, #18]
	_mag_data->lsm303dlhc.az=((mag_read_data(1,LSM303DLHC_REG_OUT_Z_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Z_L_A));
 8003484:	212d      	movs	r1, #45	; 0x2d
 8003486:	2001      	movs	r0, #1
 8003488:	f7ff ff84 	bl	8003394 <mag_read_data>
 800348c:	4603      	mov	r3, r0
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	b21c      	sxth	r4, r3
 8003492:	212c      	movs	r1, #44	; 0x2c
 8003494:	2001      	movs	r0, #1
 8003496:	f7ff ff7d 	bl	8003394 <mag_read_data>
 800349a:	4603      	mov	r3, r0
 800349c:	b21a      	sxth	r2, r3
 800349e:	4b03      	ldr	r3, [pc, #12]	; (80034ac <lsm303dlhc_get_acc+0x74>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4322      	orrs	r2, r4
 80034a4:	b212      	sxth	r2, r2
 80034a6:	829a      	strh	r2, [r3, #20]
	//log_s_int("ACCEL",HAL_GetTick()-tm);
}
 80034a8:	bf00      	nop
 80034aa:	bd98      	pop	{r3, r4, r7, pc}
 80034ac:	20000314 	.word	0x20000314

080034b0 <lsm303dlhc_get_mag>:
void lsm303dlhc_get_mag(){
 80034b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b4:	af00      	add	r7, sp, #0
		for(i=0;i<3;i++)
		{
			log_s_int("v",((uint16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]));
		}*/
	//uint32_t tb=HAL_GetTick();
	_mag_data->lsm303dlhc_mag.mx_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_X_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_X_L_M));
 80034b6:	2103      	movs	r1, #3
 80034b8:	2000      	movs	r0, #0
 80034ba:	f7ff ff6b 	bl	8003394 <mag_read_data>
 80034be:	4603      	mov	r3, r0
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	b29c      	uxth	r4, r3
 80034c6:	2104      	movs	r1, #4
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7ff ff63 	bl	8003394 <mag_read_data>
 80034ce:	4603      	mov	r3, r0
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	4323      	orrs	r3, r4
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	4bb2      	ldr	r3, [pc, #712]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b212      	sxth	r2, r2
 80034dc:	841a      	strh	r2, [r3, #32]
	_mag_data->lsm303dlhc_mag.my_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Y_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Y_L_M));
 80034de:	2107      	movs	r1, #7
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7ff ff57 	bl	8003394 <mag_read_data>
 80034e6:	4603      	mov	r3, r0
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	b29c      	uxth	r4, r3
 80034ee:	2108      	movs	r1, #8
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7ff ff4f 	bl	8003394 <mag_read_data>
 80034f6:	4603      	mov	r3, r0
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	4323      	orrs	r3, r4
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4ba8      	ldr	r3, [pc, #672]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	b212      	sxth	r2, r2
 8003504:	845a      	strh	r2, [r3, #34]	; 0x22
	_mag_data->lsm303dlhc_mag.mz_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Z_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Z_L_M));
 8003506:	2105      	movs	r1, #5
 8003508:	2000      	movs	r0, #0
 800350a:	f7ff ff43 	bl	8003394 <mag_read_data>
 800350e:	4603      	mov	r3, r0
 8003510:	b29b      	uxth	r3, r3
 8003512:	021b      	lsls	r3, r3, #8
 8003514:	b29c      	uxth	r4, r3
 8003516:	2106      	movs	r1, #6
 8003518:	2000      	movs	r0, #0
 800351a:	f7ff ff3b 	bl	8003394 <mag_read_data>
 800351e:	4603      	mov	r3, r0
 8003520:	b29b      	uxth	r3, r3
 8003522:	4323      	orrs	r3, r4
 8003524:	b29a      	uxth	r2, r3
 8003526:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	b212      	sxth	r2, r2
 800352c:	849a      	strh	r2, [r3, #36]	; 0x24
	_mag_data->lsm303dlhc_mag.mx=4.383713*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.021545*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+-0.077899*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 800352e:	4b9c      	ldr	r3, [pc, #624]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003536:	4618      	mov	r0, r3
 8003538:	f7fc fffc 	bl	8000534 <__aeabi_i2d>
 800353c:	a384      	add	r3, pc, #528	; (adr r3, 8003750 <lsm303dlhc_get_mag+0x2a0>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f7fc feab 	bl	800029c <__adddf3>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	a382      	add	r3, pc, #520	; (adr r3, 8003758 <lsm303dlhc_get_mag+0x2a8>)
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	f7fd f858 	bl	8000608 <__aeabi_dmul>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4614      	mov	r4, r2
 800355e:	461d      	mov	r5, r3
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ffe3 	bl	8000534 <__aeabi_i2d>
 800356e:	a37c      	add	r3, pc, #496	; (adr r3, 8003760 <lsm303dlhc_get_mag+0x2b0>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f7fc fe90 	bl	8000298 <__aeabi_dsub>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4610      	mov	r0, r2
 800357e:	4619      	mov	r1, r3
 8003580:	a379      	add	r3, pc, #484	; (adr r3, 8003768 <lsm303dlhc_get_mag+0x2b8>)
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f7fd f83f 	bl	8000608 <__aeabi_dmul>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4620      	mov	r0, r4
 8003590:	4629      	mov	r1, r5
 8003592:	f7fc fe83 	bl	800029c <__adddf3>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4690      	mov	r8, r2
 800359c:	4699      	mov	r9, r3
 800359e:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc ffc4 	bl	8000534 <__aeabi_i2d>
 80035ac:	a370      	add	r3, pc, #448	; (adr r3, 8003770 <lsm303dlhc_get_mag+0x2c0>)
 80035ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b2:	f7fc fe71 	bl	8000298 <__aeabi_dsub>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	a36e      	add	r3, pc, #440	; (adr r3, 8003778 <lsm303dlhc_get_mag+0x2c8>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fd f820 	bl	8000608 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4974      	ldr	r1, [pc, #464]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 80035ce:	680c      	ldr	r4, [r1, #0]
 80035d0:	4640      	mov	r0, r8
 80035d2:	4649      	mov	r1, r9
 80035d4:	f7fc fe62 	bl	800029c <__adddf3>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	_mag_data->lsm303dlhc_mag.my=0.021545*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+4.431516*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+0.225705*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 80035e0:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffa3 	bl	8000534 <__aeabi_i2d>
 80035ee:	a358      	add	r3, pc, #352	; (adr r3, 8003750 <lsm303dlhc_get_mag+0x2a0>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fc fe52 	bl	800029c <__adddf3>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	a359      	add	r3, pc, #356	; (adr r3, 8003768 <lsm303dlhc_get_mag+0x2b8>)
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f7fc ffff 	bl	8000608 <__aeabi_dmul>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4614      	mov	r4, r2
 8003610:	461d      	mov	r5, r3
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800361a:	4618      	mov	r0, r3
 800361c:	f7fc ff8a 	bl	8000534 <__aeabi_i2d>
 8003620:	a34f      	add	r3, pc, #316	; (adr r3, 8003760 <lsm303dlhc_get_mag+0x2b0>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f7fc fe37 	bl	8000298 <__aeabi_dsub>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	a353      	add	r3, pc, #332	; (adr r3, 8003780 <lsm303dlhc_get_mag+0x2d0>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fc ffe6 	bl	8000608 <__aeabi_dmul>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4620      	mov	r0, r4
 8003642:	4629      	mov	r1, r5
 8003644:	f7fc fe2a 	bl	800029c <__adddf3>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4690      	mov	r8, r2
 800364e:	4699      	mov	r9, r3
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003658:	4618      	mov	r0, r3
 800365a:	f7fc ff6b 	bl	8000534 <__aeabi_i2d>
 800365e:	a344      	add	r3, pc, #272	; (adr r3, 8003770 <lsm303dlhc_get_mag+0x2c0>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	f7fc fe18 	bl	8000298 <__aeabi_dsub>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	a345      	add	r3, pc, #276	; (adr r3, 8003788 <lsm303dlhc_get_mag+0x2d8>)
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f7fc ffc7 	bl	8000608 <__aeabi_dmul>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4948      	ldr	r1, [pc, #288]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003680:	680c      	ldr	r4, [r1, #0]
 8003682:	4640      	mov	r0, r8
 8003684:	4649      	mov	r1, r9
 8003686:	f7fc fe09 	bl	800029c <__adddf3>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	_mag_data->lsm303dlhc_mag.mz=-0.077899*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.066753*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+5.335236*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8003692:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fc ff4a 	bl	8000534 <__aeabi_i2d>
 80036a0:	a32b      	add	r3, pc, #172	; (adr r3, 8003750 <lsm303dlhc_get_mag+0x2a0>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f7fc fdf9 	bl	800029c <__adddf3>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	a331      	add	r3, pc, #196	; (adr r3, 8003778 <lsm303dlhc_get_mag+0x2c8>)
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f7fc ffa6 	bl	8000608 <__aeabi_dmul>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc ff31 	bl	8000534 <__aeabi_i2d>
 80036d2:	a323      	add	r3, pc, #140	; (adr r3, 8003760 <lsm303dlhc_get_mag+0x2b0>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fc fdde 	bl	8000298 <__aeabi_dsub>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	a32a      	add	r3, pc, #168	; (adr r3, 8003790 <lsm303dlhc_get_mag+0x2e0>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc ff8d 	bl	8000608 <__aeabi_dmul>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4620      	mov	r0, r4
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc fdd1 	bl	800029c <__adddf3>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4690      	mov	r8, r2
 8003700:	4699      	mov	r9, r3
 8003702:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800370a:	4618      	mov	r0, r3
 800370c:	f7fc ff12 	bl	8000534 <__aeabi_i2d>
 8003710:	a317      	add	r3, pc, #92	; (adr r3, 8003770 <lsm303dlhc_get_mag+0x2c0>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f7fc fdbf 	bl	8000298 <__aeabi_dsub>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	a31d      	add	r3, pc, #116	; (adr r3, 8003798 <lsm303dlhc_get_mag+0x2e8>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f7fc ff6e 	bl	8000608 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	491b      	ldr	r1, [pc, #108]	; (80037a0 <lsm303dlhc_get_mag+0x2f0>)
 8003732:	680c      	ldr	r4, [r1, #0]
 8003734:	4640      	mov	r0, r8
 8003736:	4649      	mov	r1, r9
 8003738:	f7fc fdb0 	bl	800029c <__adddf3>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	//log_s_int("MAG",HAL_GetTick()-tb);
}
 8003744:	bf00      	nop
 8003746:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800374a:	bf00      	nop
 800374c:	f3af 8000 	nop.w
 8003750:	6fe2e6eb 	.word	0x6fe2e6eb
 8003754:	40459a7b 	.word	0x40459a7b
 8003758:	0f883340 	.word	0x0f883340
 800375c:	401188ec 	.word	0x401188ec
 8003760:	0ad46f58 	.word	0x0ad46f58
 8003764:	4039a7d3 	.word	0x4039a7d3
 8003768:	7991bc56 	.word	0x7991bc56
 800376c:	3f960fe4 	.word	0x3f960fe4
 8003770:	fbce4218 	.word	0xfbce4218
 8003774:	3fe238ff 	.word	0x3fe238ff
 8003778:	59641f64 	.word	0x59641f64
 800377c:	bfb3f130 	.word	0xbfb3f130
 8003780:	548ecd8e 	.word	0x548ecd8e
 8003784:	4011b9df 	.word	0x4011b9df
 8003788:	c4c5974e 	.word	0xc4c5974e
 800378c:	3fcce3e6 	.word	0x3fcce3e6
 8003790:	7fe8ee6c 	.word	0x7fe8ee6c
 8003794:	3fb116b9 	.word	0x3fb116b9
 8003798:	1b21c476 	.word	0x1b21c476
 800379c:	40155748 	.word	0x40155748
 80037a0:	20000314 	.word	0x20000314

080037a4 <I2C_Scan>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void I2C_Scan ()
{
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b098      	sub	sp, #96	; 0x60
 80037a8:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res;
	char info[] = "Scanning I2C bus...\r\n";
 80037aa:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <I2C_Scan+0xc0>)
 80037ac:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80037b0:	461d      	mov	r5, r3
 80037b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037ba:	6020      	str	r0, [r4, #0]
 80037bc:	3404      	adds	r4, #4
 80037be:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80037c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fc fd0b 	bl	80001e0 <strlen>
 80037ca:	4603      	mov	r3, r0
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d6:	4824      	ldr	r0, [pc, #144]	; (8003868 <I2C_Scan+0xc4>)
 80037d8:	f003 fc4a 	bl	8007070 <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++)
 80037dc:	2300      	movs	r3, #0
 80037de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80037e2:	e02f      	b.n	8003844 <I2C_Scan+0xa0>
	{
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, HAL_MAX_DELAY);
 80037e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	b299      	uxth	r1, r3
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037f0:	2201      	movs	r2, #1
 80037f2:	481e      	ldr	r0, [pc, #120]	; (800386c <I2C_Scan+0xc8>)
 80037f4:	f002 f8f6 	bl	80059e4 <HAL_I2C_IsDeviceReady>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK){
 80037fe:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003802:	2b00      	cmp	r3, #0
 8003804:	d119      	bne.n	800383a <I2C_Scan+0x96>
	    	char msg[64];
	    	snprintf(msg, sizeof(msg), "0x%02X", i);
 8003806:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800380a:	1d38      	adds	r0, r7, #4
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <I2C_Scan+0xcc>)
 800380e:	2140      	movs	r1, #64	; 0x40
 8003810:	f004 fc3e 	bl	8008090 <sniprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fce2 	bl	80001e0 <strlen>
 800381c:	4603      	mov	r3, r0
 800381e:	b29a      	uxth	r2, r3
 8003820:	1d39      	adds	r1, r7, #4
 8003822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003826:	4810      	ldr	r0, [pc, #64]	; (8003868 <I2C_Scan+0xc4>)
 8003828:	f003 fc22 	bl	8007070 <HAL_UART_Transmit>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 800382c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003830:	2202      	movs	r2, #2
 8003832:	4910      	ldr	r1, [pc, #64]	; (8003874 <I2C_Scan+0xd0>)
 8003834:	480c      	ldr	r0, [pc, #48]	; (8003868 <I2C_Scan+0xc4>)
 8003836:	f003 fc1b 	bl	8007070 <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++)
 800383a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800383e:	3301      	adds	r3, #1
 8003840:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003844:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003848:	2b7f      	cmp	r3, #127	; 0x7f
 800384a:	d9cb      	bls.n	80037e4 <I2C_Scan+0x40>
	    }
	    //else HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nend\r\n", 7, HAL_MAX_DELAY);
 800384c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003850:	2207      	movs	r2, #7
 8003852:	4909      	ldr	r1, [pc, #36]	; (8003878 <I2C_Scan+0xd4>)
 8003854:	4804      	ldr	r0, [pc, #16]	; (8003868 <I2C_Scan+0xc4>)
 8003856:	f003 fc0b 	bl	8007070 <HAL_UART_Transmit>
}
 800385a:	bf00      	nop
 800385c:	3760      	adds	r7, #96	; 0x60
 800385e:	46bd      	mov	sp, r7
 8003860:	bdb0      	pop	{r4, r5, r7, pc}
 8003862:	bf00      	nop
 8003864:	0800adf0 	.word	0x0800adf0
 8003868:	200003c4 	.word	0x200003c4
 800386c:	20000318 	.word	0x20000318
 8003870:	0800addc 	.word	0x0800addc
 8003874:	0800ade4 	.word	0x0800ade4
 8003878:	0800ade8 	.word	0x0800ade8
 800387c:	00000000 	.word	0x00000000

08003880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003884:	ed2d 8b04 	vpush	{d8-d9}
 8003888:	b0f4      	sub	sp, #464	; 0x1d0
 800388a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800388c:	f000 fdee 	bl	800446c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003890:	f000 fa2e 	bl	8003cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003894:	f000 fb24 	bl	8003ee0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003898:	f000 fa94 	bl	8003dc4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800389c:	f000 faf6 	bl	8003e8c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80038a0:	f000 fabe 	bl	8003e20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  blink_stmled();
 80038a4:	f000 fb9e 	bl	8003fe4 <blink_stmled>
  I2C_Scan();
 80038a8:	f7ff ff7c 	bl	80037a4 <I2C_Scan>
  debug_init(&huart1);
 80038ac:	48da      	ldr	r0, [pc, #872]	; (8003c18 <main+0x398>)
 80038ae:	f7ff fb9f 	bl	8002ff0 <debug_init>
  log_s("Start");
 80038b2:	48da      	ldr	r0, [pc, #872]	; (8003c1c <main+0x39c>)
 80038b4:	f7ff fbac 	bl	8003010 <log_s>
  GY801_init(&hi2c1,&data);
 80038b8:	49d9      	ldr	r1, [pc, #868]	; (8003c20 <main+0x3a0>)
 80038ba:	48da      	ldr	r0, [pc, #872]	; (8003c24 <main+0x3a4>)
 80038bc:	f7ff fc26 	bl	800310c <GY801_init>
  //NRF_init(&hspi1,&data);
  uint8_t cc=0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3

  HAL_Delay(500);
 80038c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038ca:	f000 fe41 	bl	8004550 <HAL_Delay>
  uint32_t last_t, time_t;

  // madgwick
  uint32_t ahrs_t;
  float imu[3];
  log_p_imu(&imu[0]);
 80038ce:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fc00 	bl	80030d8 <log_p_imu>
  log_p(&data.lsm303dlhc.ax);
 80038d8:	48d3      	ldr	r0, [pc, #844]	; (8003c28 <main+0x3a8>)
 80038da:	f7ff fbe9 	bl	80030b0 <log_p>
  log_p(&data.lsm303dlhc.ay);
 80038de:	48d3      	ldr	r0, [pc, #844]	; (8003c2c <main+0x3ac>)
 80038e0:	f7ff fbe6 	bl	80030b0 <log_p>
  log_p(&data.lsm303dlhc.az);
 80038e4:	48d2      	ldr	r0, [pc, #840]	; (8003c30 <main+0x3b0>)
 80038e6:	f7ff fbe3 	bl	80030b0 <log_p>
  log_p(&data.l3g4200d.gx);
 80038ea:	48d2      	ldr	r0, [pc, #840]	; (8003c34 <main+0x3b4>)
 80038ec:	f7ff fbe0 	bl	80030b0 <log_p>
  log_p(&data.l3g4200d.gy);
 80038f0:	48d1      	ldr	r0, [pc, #836]	; (8003c38 <main+0x3b8>)
 80038f2:	f7ff fbdd 	bl	80030b0 <log_p>
  log_p(&data.l3g4200d.gz);
 80038f6:	48d1      	ldr	r0, [pc, #836]	; (8003c3c <main+0x3bc>)
 80038f8:	f7ff fbda 	bl	80030b0 <log_p>
  log_p(&data.lsm303dlhc_mag.mx);
 80038fc:	48d0      	ldr	r0, [pc, #832]	; (8003c40 <main+0x3c0>)
 80038fe:	f7ff fbd7 	bl	80030b0 <log_p>
  log_p(&data.lsm303dlhc_mag.my);
 8003902:	48d0      	ldr	r0, [pc, #832]	; (8003c44 <main+0x3c4>)
 8003904:	f7ff fbd4 	bl	80030b0 <log_p>
  log_p(&data.lsm303dlhc_mag.mz);
 8003908:	48cf      	ldr	r0, [pc, #828]	; (8003c48 <main+0x3c8>)
 800390a:	f7ff fbd1 	bl	80030b0 <log_p>
  float quat[4];
  ahrs_t=HAL_GetTick();
 800390e:	f000 fe13 	bl	8004538 <HAL_GetTick>
 8003912:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
  uint16_t hz;
  uint32_t hz_t=HAL_GetTick();
 8003916:	f000 fe0f 	bl	8004538 <HAL_GetTick>
 800391a:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
  log_p(&hz);
 800391e:	f507 73c9 	add.w	r3, r7, #402	; 0x192
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fbc4 	bl	80030b0 <log_p>
	  //nrf_send_data[0]=cc;
	  //nrf24l01p_write_tx_fifo(&nrf_send_data);
	  //cc+=1;


		  GY801_update_data();
 8003928:	f7ff fc22 	bl	8003170 <GY801_update_data>
		  //log_s_int("AHRS",HAL_GetTick()-ahrs_t);
		  hz+=1;
 800392c:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8003930:	3301      	adds	r3, #1
 8003932:	b29b      	uxth	r3, r3
 8003934:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
		  MadgwickAHRSupdate((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625,(float)data.lsm303dlhc_mag.mx*0.1388,(float)data.lsm303dlhc_mag.my*0.1388,(float)data.lsm303dlhc_mag.mz*0.1388);
 8003938:	f000 fdfe 	bl	8004538 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394c:	ee17 0a90 	vmov	r0, s15
 8003950:	f7fc fe02 	bl	8000558 <__aeabi_f2d>
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	4bbc      	ldr	r3, [pc, #752]	; (8003c4c <main+0x3cc>)
 800395a:	f7fc ff7f 	bl	800085c <__aeabi_ddiv>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	f7fd f927 	bl	8000bb8 <__aeabi_d2f>
 800396a:	4604      	mov	r4, r0
 800396c:	4bac      	ldr	r3, [pc, #688]	; (8003c20 <main+0x3a0>)
 800396e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800397a:	ee17 0a90 	vmov	r0, s15
 800397e:	f7fc fdeb 	bl	8000558 <__aeabi_f2d>
 8003982:	a39f      	add	r3, pc, #636	; (adr r3, 8003c00 <main+0x380>)
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f7fc fe3e 	bl	8000608 <__aeabi_dmul>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4bad      	ldr	r3, [pc, #692]	; (8003c50 <main+0x3d0>)
 800399a:	f7fc ff5f 	bl	800085c <__aeabi_ddiv>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	a398      	add	r3, pc, #608	; (adr r3, 8003c08 <main+0x388>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc ff56 	bl	800085c <__aeabi_ddiv>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7fd f8fe 	bl	8000bb8 <__aeabi_d2f>
 80039bc:	4605      	mov	r5, r0
 80039be:	4b98      	ldr	r3, [pc, #608]	; (8003c20 <main+0x3a0>)
 80039c0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80039c4:	ee07 3a90 	vmov	s15, r3
 80039c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039cc:	ee17 0a90 	vmov	r0, s15
 80039d0:	f7fc fdc2 	bl	8000558 <__aeabi_f2d>
 80039d4:	a38a      	add	r3, pc, #552	; (adr r3, 8003c00 <main+0x380>)
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f7fc fe15 	bl	8000608 <__aeabi_dmul>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	4b99      	ldr	r3, [pc, #612]	; (8003c50 <main+0x3d0>)
 80039ec:	f7fc ff36 	bl	800085c <__aeabi_ddiv>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4610      	mov	r0, r2
 80039f6:	4619      	mov	r1, r3
 80039f8:	a383      	add	r3, pc, #524	; (adr r3, 8003c08 <main+0x388>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f7fc ff2d 	bl	800085c <__aeabi_ddiv>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f7fd f8d5 	bl	8000bb8 <__aeabi_d2f>
 8003a0e:	4606      	mov	r6, r0
 8003a10:	4b83      	ldr	r3, [pc, #524]	; (8003c20 <main+0x3a0>)
 8003a12:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a1e:	ee17 0a90 	vmov	r0, s15
 8003a22:	f7fc fd99 	bl	8000558 <__aeabi_f2d>
 8003a26:	a376      	add	r3, pc, #472	; (adr r3, 8003c00 <main+0x380>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fdec 	bl	8000608 <__aeabi_dmul>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	4b84      	ldr	r3, [pc, #528]	; (8003c50 <main+0x3d0>)
 8003a3e:	f7fc ff0d 	bl	800085c <__aeabi_ddiv>
 8003a42:	4602      	mov	r2, r0
 8003a44:	460b      	mov	r3, r1
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	a36f      	add	r3, pc, #444	; (adr r3, 8003c08 <main+0x388>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc ff04 	bl	800085c <__aeabi_ddiv>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f8ac 	bl	8000bb8 <__aeabi_d2f>
 8003a60:	4680      	mov	r8, r0
 8003a62:	4b6f      	ldr	r3, [pc, #444]	; (8003c20 <main+0x3a0>)
 8003a64:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8003c54 <main+0x3d4>
 8003a74:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003a78:	4b69      	ldr	r3, [pc, #420]	; (8003c20 <main+0x3a0>)
 8003a7a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a86:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003c54 <main+0x3d4>
 8003a8a:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003a8e:	4b64      	ldr	r3, [pc, #400]	; (8003c20 <main+0x3a0>)
 8003a90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a9c:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8003c54 <main+0x3d4>
 8003aa0:	ee27 9a87 	vmul.f32	s18, s15, s14
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <main+0x3a0>)
 8003aa6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003aaa:	4610      	mov	r0, r2
 8003aac:	4619      	mov	r1, r3
 8003aae:	f7fd f883 	bl	8000bb8 <__aeabi_d2f>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fd4f 	bl	8000558 <__aeabi_f2d>
 8003aba:	a355      	add	r3, pc, #340	; (adr r3, 8003c10 <main+0x390>)
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f7fc fda2 	bl	8000608 <__aeabi_dmul>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fd f874 	bl	8000bb8 <__aeabi_d2f>
 8003ad0:	4681      	mov	r9, r0
 8003ad2:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <main+0x3a0>)
 8003ad4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003ad8:	4610      	mov	r0, r2
 8003ada:	4619      	mov	r1, r3
 8003adc:	f7fd f86c 	bl	8000bb8 <__aeabi_d2f>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fd38 	bl	8000558 <__aeabi_f2d>
 8003ae8:	a349      	add	r3, pc, #292	; (adr r3, 8003c10 <main+0x390>)
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f7fc fd8b 	bl	8000608 <__aeabi_dmul>
 8003af2:	4602      	mov	r2, r0
 8003af4:	460b      	mov	r3, r1
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	f7fd f85d 	bl	8000bb8 <__aeabi_d2f>
 8003afe:	4682      	mov	sl, r0
 8003b00:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <main+0x3a0>)
 8003b02:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f7fd f855 	bl	8000bb8 <__aeabi_d2f>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fc fd21 	bl	8000558 <__aeabi_f2d>
 8003b16:	a33e      	add	r3, pc, #248	; (adr r3, 8003c10 <main+0x390>)
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f7fc fd74 	bl	8000608 <__aeabi_dmul>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4610      	mov	r0, r2
 8003b26:	4619      	mov	r1, r3
 8003b28:	f7fd f846 	bl	8000bb8 <__aeabi_d2f>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	ee04 3a90 	vmov	s9, r3
 8003b32:	ee04 aa10 	vmov	s8, sl
 8003b36:	ee03 9a90 	vmov	s7, r9
 8003b3a:	eeb0 3a49 	vmov.f32	s6, s18
 8003b3e:	eef0 2a68 	vmov.f32	s5, s17
 8003b42:	eeb0 2a48 	vmov.f32	s4, s16
 8003b46:	ee01 8a90 	vmov	s3, r8
 8003b4a:	ee01 6a10 	vmov	s2, r6
 8003b4e:	ee00 5a90 	vmov	s1, r5
 8003b52:	ee00 4a10 	vmov	s0, r4
 8003b56:	f7fd faed 	bl	8001134 <MadgwickAHRSupdate>
		  //MadgwickAHRSupdateIMU((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625);
		  //MadgwickAHRSupdateIMU(0.02,-0.01,-0.02,-0.01,3200,8900,17600);
		  ahrs_t=HAL_GetTick();
 8003b5a:	f000 fced 	bl	8004538 <HAL_GetTick>
 8003b5e:	f8c7 01b8 	str.w	r0, [r7, #440]	; 0x1b8
		  quat[0] = q0; quat[1] = q1; quat[2] = q2; quat[3] = q3;
 8003b62:	4b3d      	ldr	r3, [pc, #244]	; (8003c58 <main+0x3d8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003b6a:	4b3c      	ldr	r3, [pc, #240]	; (8003c5c <main+0x3dc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8003b72:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <main+0x3e0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003b7a:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <main+0x3e4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		  quat2Euler(&quat[0], &imu[0]);
 8003b82:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8003b86:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe fff7 	bl	8002b80 <quat2Euler>
		  /*for(uint8_t i=0;i<3;i++){
			  imu[i]/=0.01745329252;
		  }*/
		  if (HAL_GetTick()-hz_t>1000){
 8003b92:	f000 fcd1 	bl	8004538 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ba2:	d90c      	bls.n	8003bbe <main+0x33e>
			  hz_t=HAL_GetTick();
 8003ba4:	f000 fcc8 	bl	8004538 <HAL_GetTick>
 8003ba8:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
			  log_s_int("HZ",hz);
 8003bac:	f8b7 3192 	ldrh.w	r3, [r7, #402]	; 0x192
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	482d      	ldr	r0, [pc, #180]	; (8003c68 <main+0x3e8>)
 8003bb4:	f7ff fa66 	bl	8003084 <log_s_int>
			  hz=0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8a7 3192 	strh.w	r3, [r7, #402]	; 0x192
		  }


	  if(HAL_GetTick()-last_t>=1000){
 8003bbe:	f000 fcbb 	bl	8004538 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bce:	f4ff aeab 	bcc.w	8003928 <main+0xa8>
		  char* mg_data[100];
		  sprintf((char*)mg_data,"%f\t%f\t%f",imu[0]*180/M_PI,imu[1]*180/M_PI,imu[2]*180/M_PI);
 8003bd2:	edd7 7a69 	vldr	s15, [r7, #420]	; 0x1a4
 8003bd6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c6c <main+0x3ec>
 8003bda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bde:	ee17 0a90 	vmov	r0, s15
 8003be2:	f7fc fcb9 	bl	8000558 <__aeabi_f2d>
 8003be6:	a306      	add	r3, pc, #24	; (adr r3, 8003c00 <main+0x380>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fe36 	bl	800085c <__aeabi_ddiv>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4690      	mov	r8, r2
 8003bf6:	4699      	mov	r9, r3
 8003bf8:	edd7 7a6a 	vldr	s15, [r7, #424]	; 0x1a8
 8003bfc:	e038      	b.n	8003c70 <main+0x3f0>
 8003bfe:	bf00      	nop
 8003c00:	54442d18 	.word	0x54442d18
 8003c04:	400921fb 	.word	0x400921fb
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	40606000 	.word	0x40606000
 8003c10:	ca57a787 	.word	0xca57a787
 8003c14:	3fc1c432 	.word	0x3fc1c432
 8003c18:	200003c4 	.word	0x200003c4
 8003c1c:	0800ae08 	.word	0x0800ae08
 8003c20:	20000408 	.word	0x20000408
 8003c24:	20000318 	.word	0x20000318
 8003c28:	20000418 	.word	0x20000418
 8003c2c:	2000041a 	.word	0x2000041a
 8003c30:	2000041c 	.word	0x2000041c
 8003c34:	20000420 	.word	0x20000420
 8003c38:	20000422 	.word	0x20000422
 8003c3c:	20000424 	.word	0x20000424
 8003c40:	20000430 	.word	0x20000430
 8003c44:	20000438 	.word	0x20000438
 8003c48:	20000440 	.word	0x20000440
 8003c4c:	408f4000 	.word	0x408f4000
 8003c50:	40668000 	.word	0x40668000
 8003c54:	41ac8000 	.word	0x41ac8000
 8003c58:	20000004 	.word	0x20000004
 8003c5c:	2000020c 	.word	0x2000020c
 8003c60:	20000210 	.word	0x20000210
 8003c64:	20000214 	.word	0x20000214
 8003c68:	0800ae10 	.word	0x0800ae10
 8003c6c:	43340000 	.word	0x43340000
 8003c70:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8003c6c <main+0x3ec>
 8003c74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c78:	ee17 0a90 	vmov	r0, s15
 8003c7c:	f7fc fc6c 	bl	8000558 <__aeabi_f2d>
 8003c80:	a317      	add	r3, pc, #92	; (adr r3, 8003ce0 <main+0x460>)
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f7fc fde9 	bl	800085c <__aeabi_ddiv>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4614      	mov	r4, r2
 8003c90:	461d      	mov	r5, r3
 8003c92:	edd7 7a6b 	vldr	s15, [r7, #428]	; 0x1ac
 8003c96:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ce8 <main+0x468>
 8003c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c9e:	ee17 0a90 	vmov	r0, s15
 8003ca2:	f7fc fc59 	bl	8000558 <__aeabi_f2d>
 8003ca6:	a30e      	add	r3, pc, #56	; (adr r3, 8003ce0 <main+0x460>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f7fc fdd6 	bl	800085c <__aeabi_ddiv>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cba:	e9cd 4500 	strd	r4, r5, [sp]
 8003cbe:	4642      	mov	r2, r8
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	490a      	ldr	r1, [pc, #40]	; (8003cec <main+0x46c>)
 8003cc4:	f004 fa18 	bl	80080f8 <siprintf>
		  log_s((char*)mg_data);
 8003cc8:	463b      	mov	r3, r7
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff f9a0 	bl	8003010 <log_s>
		  /*log_s_int("X",imu[0]*180/M_PI);
		  log_s_int("Y",imu[1]*180/M_PI);
		  log_s_int("Z",imu[2]*180/M_PI);*/
		  //blink_stmled();
		  last_t=HAL_GetTick();
 8003cd0:	f000 fc32 	bl	8004538 <HAL_GetTick>
 8003cd4:	f8c7 01bc 	str.w	r0, [r7, #444]	; 0x1bc
		  GY801_update_data();
 8003cd8:	e626      	b.n	8003928 <main+0xa8>
 8003cda:	bf00      	nop
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	54442d18 	.word	0x54442d18
 8003ce4:	400921fb 	.word	0x400921fb
 8003ce8:	43340000 	.word	0x43340000
 8003cec:	0800ae14 	.word	0x0800ae14

08003cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b094      	sub	sp, #80	; 0x50
 8003cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cf6:	f107 0320 	add.w	r3, r7, #32
 8003cfa:	2230      	movs	r2, #48	; 0x30
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f003 fd54 	bl	80077ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d04:	f107 030c 	add.w	r3, r7, #12
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	60da      	str	r2, [r3, #12]
 8003d12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d14:	2300      	movs	r3, #0
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <SystemClock_Config+0xcc>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	4a27      	ldr	r2, [pc, #156]	; (8003dbc <SystemClock_Config+0xcc>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6413      	str	r3, [r2, #64]	; 0x40
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <SystemClock_Config+0xcc>)
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d30:	2300      	movs	r3, #0
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	4b22      	ldr	r3, [pc, #136]	; (8003dc0 <SystemClock_Config+0xd0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <SystemClock_Config+0xd0>)
 8003d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <SystemClock_Config+0xd0>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d50:	2302      	movs	r3, #2
 8003d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d54:	2301      	movs	r3, #1
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d58:	2310      	movs	r3, #16
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d60:	2300      	movs	r3, #0
 8003d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d64:	2308      	movs	r3, #8
 8003d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003d68:	2354      	movs	r3, #84	; 0x54
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d70:	2304      	movs	r3, #4
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d74:	f107 0320 	add.w	r3, r7, #32
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f002 fc0d 	bl	8006598 <HAL_RCC_OscConfig>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003d84:	f000 f940 	bl	8004008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d88:	230f      	movs	r3, #15
 8003d8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	2102      	movs	r1, #2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 fe6f 	bl	8006a88 <HAL_RCC_ClockConfig>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003db0:	f000 f92a 	bl	8004008 <Error_Handler>
  }
}
 8003db4:	bf00      	nop
 8003db6:	3750      	adds	r7, #80	; 0x50
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40007000 	.word	0x40007000

08003dc4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <MX_I2C1_Init+0x54>)
 8003dcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <MX_I2C1_Init+0x58>)
 8003dd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dda:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003de6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003dee:	4b09      	ldr	r3, [pc, #36]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003df4:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003dfa:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e00:	4804      	ldr	r0, [pc, #16]	; (8003e14 <MX_I2C1_Init+0x50>)
 8003e02:	f000 fe67 	bl	8004ad4 <HAL_I2C_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e0c:	f000 f8fc 	bl	8004008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000318 	.word	0x20000318
 8003e18:	40005400 	.word	0x40005400
 8003e1c:	00061a80 	.word	0x00061a80

08003e20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003e24:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e26:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <MX_SPI1_Init+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e2a:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e6c:	220a      	movs	r2, #10
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e70:	4804      	ldr	r0, [pc, #16]	; (8003e84 <MX_SPI1_Init+0x64>)
 8003e72:	f003 f827 	bl	8006ec4 <HAL_SPI_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e7c:	f000 f8c4 	bl	8004008 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000036c 	.word	0x2000036c
 8003e88:	40013000 	.word	0x40013000

08003e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <MX_USART1_UART_Init+0x50>)
 8003e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ec2:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <MX_USART1_UART_Init+0x4c>)
 8003ec4:	f003 f887 	bl	8006fd6 <HAL_UART_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ece:	f000 f89b 	bl	8004008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200003c4 	.word	0x200003c4
 8003edc:	40011000 	.word	0x40011000

08003ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee6:	f107 0314 	add.w	r3, r7, #20
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	4b36      	ldr	r3, [pc, #216]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a35      	ldr	r2, [pc, #212]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b33      	ldr	r3, [pc, #204]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	4b2f      	ldr	r3, [pc, #188]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a2e      	ldr	r2, [pc, #184]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f20:	6313      	str	r3, [r2, #48]	; 0x30
 8003f22:	4b2c      	ldr	r3, [pc, #176]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f36:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f38:	f043 0301 	orr.w	r3, r3, #1
 8003f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3e:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a20      	ldr	r2, [pc, #128]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <MX_GPIO_Init+0xf4>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8003f66:	2200      	movs	r2, #0
 8003f68:	2111      	movs	r1, #17
 8003f6a:	481b      	ldr	r0, [pc, #108]	; (8003fd8 <MX_GPIO_Init+0xf8>)
 8003f6c:	f000 fd7e 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2110      	movs	r1, #16
 8003f74:	4819      	ldr	r0, [pc, #100]	; (8003fdc <MX_GPIO_Init+0xfc>)
 8003f76:	f000 fd79 	bl	8004a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003f7a:	2311      	movs	r3, #17
 8003f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f86:	2300      	movs	r3, #0
 8003f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4811      	ldr	r0, [pc, #68]	; (8003fd8 <MX_GPIO_Init+0xf8>)
 8003f92:	f000 fbe7 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f96:	2310      	movs	r3, #16
 8003f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	4619      	mov	r1, r3
 8003fac:	480b      	ldr	r0, [pc, #44]	; (8003fdc <MX_GPIO_Init+0xfc>)
 8003fae:	f000 fbd9 	bl	8004764 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4806      	ldr	r0, [pc, #24]	; (8003fe0 <MX_GPIO_Init+0x100>)
 8003fc8:	f000 fbcc 	bl	8004764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003fcc:	bf00      	nop
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020800 	.word	0x40020800
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40020400 	.word	0x40020400

08003fe4 <blink_stmled>:

/* USER CODE BEGIN 4 */
void blink_stmled(){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4806      	ldr	r0, [pc, #24]	; (8004004 <blink_stmled+0x20>)
 8003fec:	f000 fd57 	bl	8004a9e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003ff0:	2064      	movs	r0, #100	; 0x64
 8003ff2:	f000 faad 	bl	8004550 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	4802      	ldr	r0, [pc, #8]	; (8004004 <blink_stmled+0x20>)
 8003ffa:	f000 fd50 	bl	8004a9e <HAL_GPIO_TogglePin>
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40020800 	.word	0x40020800

08004008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800400c:	b672      	cpsid	i
}
 800400e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004010:	e7fe      	b.n	8004010 <Error_Handler+0x8>
	...

08004014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	4b10      	ldr	r3, [pc, #64]	; (8004060 <HAL_MspInit+0x4c>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004022:	4a0f      	ldr	r2, [pc, #60]	; (8004060 <HAL_MspInit+0x4c>)
 8004024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004028:	6453      	str	r3, [r2, #68]	; 0x44
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <HAL_MspInit+0x4c>)
 800402c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004032:	607b      	str	r3, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_MspInit+0x4c>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a08      	ldr	r2, [pc, #32]	; (8004060 <HAL_MspInit+0x4c>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <HAL_MspInit+0x4c>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	603b      	str	r3, [r7, #0]
 8004050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	; 0x28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406c:	f107 0314 	add.w	r3, r7, #20
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	609a      	str	r2, [r3, #8]
 8004078:	60da      	str	r2, [r3, #12]
 800407a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_I2C_MspInit+0x84>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d12b      	bne.n	80040de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	4b18      	ldr	r3, [pc, #96]	; (80040ec <HAL_I2C_MspInit+0x88>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_I2C_MspInit+0x88>)
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <HAL_I2C_MspInit+0x88>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040a2:	23c0      	movs	r3, #192	; 0xc0
 80040a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040a6:	2312      	movs	r3, #18
 80040a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040b2:	2304      	movs	r3, #4
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040b6:	f107 0314 	add.w	r3, r7, #20
 80040ba:	4619      	mov	r1, r3
 80040bc:	480c      	ldr	r0, [pc, #48]	; (80040f0 <HAL_I2C_MspInit+0x8c>)
 80040be:	f000 fb51 	bl	8004764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_I2C_MspInit+0x88>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a08      	ldr	r2, [pc, #32]	; (80040ec <HAL_I2C_MspInit+0x88>)
 80040cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_I2C_MspInit+0x88>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040de:	bf00      	nop
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40005400 	.word	0x40005400
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020400 	.word	0x40020400

080040f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	; 0x28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	; (8004178 <HAL_SPI_MspInit+0x84>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12b      	bne.n	800416e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <HAL_SPI_MspInit+0x88>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_SPI_MspInit+0x88>)
 8004120:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004124:	6453      	str	r3, [r2, #68]	; 0x44
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_SPI_MspInit+0x88>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <HAL_SPI_MspInit+0x88>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	4a10      	ldr	r2, [pc, #64]	; (800417c <HAL_SPI_MspInit+0x88>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6313      	str	r3, [r2, #48]	; 0x30
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_SPI_MspInit+0x88>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800414e:	23e0      	movs	r3, #224	; 0xe0
 8004150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004152:	2302      	movs	r3, #2
 8004154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415a:	2303      	movs	r3, #3
 800415c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800415e:	2305      	movs	r3, #5
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004162:	f107 0314 	add.w	r3, r7, #20
 8004166:	4619      	mov	r1, r3
 8004168:	4805      	ldr	r0, [pc, #20]	; (8004180 <HAL_SPI_MspInit+0x8c>)
 800416a:	f000 fafb 	bl	8004764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800416e:	bf00      	nop
 8004170:	3728      	adds	r7, #40	; 0x28
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40013000 	.word	0x40013000
 800417c:	40023800 	.word	0x40023800
 8004180:	40020000 	.word	0x40020000

08004184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_UART_MspInit+0x84>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d12c      	bne.n	8004200 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	4b18      	ldr	r3, [pc, #96]	; (800420c <HAL_UART_MspInit+0x88>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	4a17      	ldr	r2, [pc, #92]	; (800420c <HAL_UART_MspInit+0x88>)
 80041b0:	f043 0310 	orr.w	r3, r3, #16
 80041b4:	6453      	str	r3, [r2, #68]	; 0x44
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <HAL_UART_MspInit+0x88>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	4b11      	ldr	r3, [pc, #68]	; (800420c <HAL_UART_MspInit+0x88>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4a10      	ldr	r2, [pc, #64]	; (800420c <HAL_UART_MspInit+0x88>)
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	6313      	str	r3, [r2, #48]	; 0x30
 80041d2:	4b0e      	ldr	r3, [pc, #56]	; (800420c <HAL_UART_MspInit+0x88>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80041e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ec:	2303      	movs	r3, #3
 80041ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041f0:	2307      	movs	r3, #7
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4619      	mov	r1, r3
 80041fa:	4805      	ldr	r0, [pc, #20]	; (8004210 <HAL_UART_MspInit+0x8c>)
 80041fc:	f000 fab2 	bl	8004764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004200:	bf00      	nop
 8004202:	3728      	adds	r7, #40	; 0x28
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40011000 	.word	0x40011000
 800420c:	40023800 	.word	0x40023800
 8004210:	40020000 	.word	0x40020000

08004214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004218:	e7fe      	b.n	8004218 <NMI_Handler+0x4>

0800421a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800421e:	e7fe      	b.n	800421e <HardFault_Handler+0x4>

08004220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004224:	e7fe      	b.n	8004224 <MemManage_Handler+0x4>

08004226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004226:	b480      	push	{r7}
 8004228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800422a:	e7fe      	b.n	800422a <BusFault_Handler+0x4>

0800422c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004230:	e7fe      	b.n	8004230 <UsageFault_Handler+0x4>

08004232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004232:	b480      	push	{r7}
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004260:	f000 f956 	bl	8004510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}

08004268 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
	return 1;
 800426c:	2301      	movs	r3, #1
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_kill>:

int _kill(int pid, int sig)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004282:	f003 fa69 	bl	8007758 <__errno>
 8004286:	4603      	mov	r3, r0
 8004288:	2216      	movs	r2, #22
 800428a:	601a      	str	r2, [r3, #0]
	return -1;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <_exit>:

void _exit (int status)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff ffe7 	bl	8004278 <_kill>
	while (1) {}		/* Make sure we hang here */
 80042aa:	e7fe      	b.n	80042aa <_exit+0x12>

080042ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e00a      	b.n	80042d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042be:	f3af 8000 	nop.w
 80042c2:	4601      	mov	r1, r0
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	60ba      	str	r2, [r7, #8]
 80042ca:	b2ca      	uxtb	r2, r1
 80042cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3301      	adds	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	dbf0      	blt.n	80042be <_read+0x12>
	}

return len;
 80042dc:	687b      	ldr	r3, [r7, #4]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e009      	b.n	800430c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	60ba      	str	r2, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	3301      	adds	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	dbf1      	blt.n	80042f8 <_write+0x12>
	}
	return len;
 8004314:	687b      	ldr	r3, [r7, #4]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <_close>:

int _close(int file)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
	return -1;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004346:	605a      	str	r2, [r3, #4]
	return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <_isatty>:

int _isatty(int file)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
	return 1;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
	return 0;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004390:	4a14      	ldr	r2, [pc, #80]	; (80043e4 <_sbrk+0x5c>)
 8004392:	4b15      	ldr	r3, [pc, #84]	; (80043e8 <_sbrk+0x60>)
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <_sbrk+0x64>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a4:	4b11      	ldr	r3, [pc, #68]	; (80043ec <_sbrk+0x64>)
 80043a6:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <_sbrk+0x68>)
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <_sbrk+0x64>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4413      	add	r3, r2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d207      	bcs.n	80043c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043b8:	f003 f9ce 	bl	8007758 <__errno>
 80043bc:	4603      	mov	r3, r0
 80043be:	220c      	movs	r2, #12
 80043c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c6:	e009      	b.n	80043dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <_sbrk+0x64>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ce:	4b07      	ldr	r3, [pc, #28]	; (80043ec <_sbrk+0x64>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	4a05      	ldr	r2, [pc, #20]	; (80043ec <_sbrk+0x64>)
 80043d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3718      	adds	r7, #24
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20018000 	.word	0x20018000
 80043e8:	00000400 	.word	0x00000400
 80043ec:	20000448 	.word	0x20000448
 80043f0:	20000460 	.word	0x20000460

080043f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <SystemInit+0x20>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	4a05      	ldr	r2, [pc, #20]	; (8004414 <SystemInit+0x20>)
 8004400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	e000ed00 	.word	0xe000ed00

08004418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004450 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800441c:	480d      	ldr	r0, [pc, #52]	; (8004454 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800441e:	490e      	ldr	r1, [pc, #56]	; (8004458 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004420:	4a0e      	ldr	r2, [pc, #56]	; (800445c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004424:	e002      	b.n	800442c <LoopCopyDataInit>

08004426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800442a:	3304      	adds	r3, #4

0800442c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800442c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800442e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004430:	d3f9      	bcc.n	8004426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004432:	4a0b      	ldr	r2, [pc, #44]	; (8004460 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004434:	4c0b      	ldr	r4, [pc, #44]	; (8004464 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004438:	e001      	b.n	800443e <LoopFillZerobss>

0800443a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800443a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800443c:	3204      	adds	r2, #4

0800443e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800443e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004440:	d3fb      	bcc.n	800443a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004442:	f7ff ffd7 	bl	80043f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004446:	f003 f98d 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800444a:	f7ff fa19 	bl	8003880 <main>
  bx  lr    
 800444e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004450:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004458:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800445c:	0800b25c 	.word	0x0800b25c
  ldr r2, =_sbss
 8004460:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004464:	20000460 	.word	0x20000460

08004468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004468:	e7fe      	b.n	8004468 <ADC_IRQHandler>
	...

0800446c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_Init+0x40>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <HAL_Init+0x40>)
 8004476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800447a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_Init+0x40>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <HAL_Init+0x40>)
 8004482:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004488:	4b08      	ldr	r3, [pc, #32]	; (80044ac <HAL_Init+0x40>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a07      	ldr	r2, [pc, #28]	; (80044ac <HAL_Init+0x40>)
 800448e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004494:	2003      	movs	r0, #3
 8004496:	f000 f931 	bl	80046fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800449a:	200f      	movs	r0, #15
 800449c:	f000 f808 	bl	80044b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044a0:	f7ff fdb8 	bl	8004014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00

080044b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_InitTick+0x54>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <HAL_InitTick+0x58>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f93b 	bl	800474a <HAL_SYSTICK_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e00e      	b.n	80044fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d80a      	bhi.n	80044fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e4:	2200      	movs	r2, #0
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044ec:	f000 f911 	bl	8004712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044f0:	4a06      	ldr	r2, [pc, #24]	; (800450c <HAL_InitTick+0x5c>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e000      	b.n	80044fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20000008 	.word	0x20000008
 8004508:	20000010 	.word	0x20000010
 800450c:	2000000c 	.word	0x2000000c

08004510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_IncTick+0x20>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_IncTick+0x24>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4413      	add	r3, r2
 8004520:	4a04      	ldr	r2, [pc, #16]	; (8004534 <HAL_IncTick+0x24>)
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000010 	.word	0x20000010
 8004534:	2000044c 	.word	0x2000044c

08004538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return uwTick;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_GetTick+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000044c 	.word	0x2000044c

08004550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004558:	f7ff ffee 	bl	8004538 <HAL_GetTick>
 800455c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004568:	d005      	beq.n	8004576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800456a:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <HAL_Delay+0x44>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	461a      	mov	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004576:	bf00      	nop
 8004578:	f7ff ffde 	bl	8004538 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	429a      	cmp	r2, r3
 8004586:	d8f7      	bhi.n	8004578 <HAL_Delay+0x28>
  {
  }
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000010 	.word	0x20000010

08004598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b4:	4013      	ands	r3, r2
 80045b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045ca:	4a04      	ldr	r2, [pc, #16]	; (80045dc <__NVIC_SetPriorityGrouping+0x44>)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	60d3      	str	r3, [r2, #12]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e4:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <__NVIC_GetPriorityGrouping+0x18>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	0a1b      	lsrs	r3, r3, #8
 80045ea:	f003 0307 	and.w	r3, r3, #7
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db0a      	blt.n	8004626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	; (8004648 <__NVIC_SetPriority+0x4c>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	440b      	add	r3, r1
 8004620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004624:	e00a      	b.n	800463c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4908      	ldr	r1, [pc, #32]	; (800464c <__NVIC_SetPriority+0x50>)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	3b04      	subs	r3, #4
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	440b      	add	r3, r1
 800463a:	761a      	strb	r2, [r3, #24]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000e100 	.word	0xe000e100
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f1c3 0307 	rsb	r3, r3, #7
 800466a:	2b04      	cmp	r3, #4
 800466c:	bf28      	it	cs
 800466e:	2304      	movcs	r3, #4
 8004670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3304      	adds	r3, #4
 8004676:	2b06      	cmp	r3, #6
 8004678:	d902      	bls.n	8004680 <NVIC_EncodePriority+0x30>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3b03      	subs	r3, #3
 800467e:	e000      	b.n	8004682 <NVIC_EncodePriority+0x32>
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	401a      	ands	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004698:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43d9      	mvns	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	4313      	orrs	r3, r2
         );
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	; 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c8:	d301      	bcc.n	80046ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00f      	b.n	80046ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ce:	4a0a      	ldr	r2, [pc, #40]	; (80046f8 <SysTick_Config+0x40>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046d6:	210f      	movs	r1, #15
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046dc:	f7ff ff8e 	bl	80045fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <SysTick_Config+0x40>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046e6:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <SysTick_Config+0x40>)
 80046e8:	2207      	movs	r2, #7
 80046ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000e010 	.word	0xe000e010

080046fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff47 	bl	8004598 <__NVIC_SetPriorityGrouping>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004724:	f7ff ff5c 	bl	80045e0 <__NVIC_GetPriorityGrouping>
 8004728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	6978      	ldr	r0, [r7, #20]
 8004730:	f7ff ff8e 	bl	8004650 <NVIC_EncodePriority>
 8004734:	4602      	mov	r2, r0
 8004736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff5d 	bl	80045fc <__NVIC_SetPriority>
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff ffb0 	bl	80046b8 <SysTick_Config>
 8004758:	4603      	mov	r3, r0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004772:	2300      	movs	r3, #0
 8004774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
 800477e:	e159      	b.n	8004a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004780:	2201      	movs	r2, #1
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	4013      	ands	r3, r2
 8004792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	429a      	cmp	r2, r3
 800479a:	f040 8148 	bne.w	8004a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d005      	beq.n	80047b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d130      	bne.n	8004818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	2203      	movs	r2, #3
 80047c2:	fa02 f303 	lsl.w	r3, r2, r3
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047ec:	2201      	movs	r2, #1
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43db      	mvns	r3, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4013      	ands	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 0201 	and.w	r2, r3, #1
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b03      	cmp	r3, #3
 8004822:	d017      	beq.n	8004854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4313      	orrs	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0303 	and.w	r3, r3, #3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d123      	bne.n	80048a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	08da      	lsrs	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3208      	adds	r2, #8
 8004868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800486c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	220f      	movs	r2, #15
 8004878:	fa02 f303 	lsl.w	r3, r2, r3
 800487c:	43db      	mvns	r3, r3
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	4013      	ands	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f003 0307 	and.w	r3, r3, #7
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	08da      	lsrs	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3208      	adds	r2, #8
 80048a2:	69b9      	ldr	r1, [r7, #24]
 80048a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	4013      	ands	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0203 	and.w	r2, r3, #3
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a2 	beq.w	8004a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b57      	ldr	r3, [pc, #348]	; (8004a4c <HAL_GPIO_Init+0x2e8>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	4a56      	ldr	r2, [pc, #344]	; (8004a4c <HAL_GPIO_Init+0x2e8>)
 80048f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	4b54      	ldr	r3, [pc, #336]	; (8004a4c <HAL_GPIO_Init+0x2e8>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004906:	4a52      	ldr	r2, [pc, #328]	; (8004a50 <HAL_GPIO_Init+0x2ec>)
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	3302      	adds	r3, #2
 800490e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a49      	ldr	r2, [pc, #292]	; (8004a54 <HAL_GPIO_Init+0x2f0>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d019      	beq.n	8004966 <HAL_GPIO_Init+0x202>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a48      	ldr	r2, [pc, #288]	; (8004a58 <HAL_GPIO_Init+0x2f4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d013      	beq.n	8004962 <HAL_GPIO_Init+0x1fe>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a47      	ldr	r2, [pc, #284]	; (8004a5c <HAL_GPIO_Init+0x2f8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00d      	beq.n	800495e <HAL_GPIO_Init+0x1fa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a46      	ldr	r2, [pc, #280]	; (8004a60 <HAL_GPIO_Init+0x2fc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <HAL_GPIO_Init+0x1f6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a45      	ldr	r2, [pc, #276]	; (8004a64 <HAL_GPIO_Init+0x300>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d101      	bne.n	8004956 <HAL_GPIO_Init+0x1f2>
 8004952:	2304      	movs	r3, #4
 8004954:	e008      	b.n	8004968 <HAL_GPIO_Init+0x204>
 8004956:	2307      	movs	r3, #7
 8004958:	e006      	b.n	8004968 <HAL_GPIO_Init+0x204>
 800495a:	2303      	movs	r3, #3
 800495c:	e004      	b.n	8004968 <HAL_GPIO_Init+0x204>
 800495e:	2302      	movs	r3, #2
 8004960:	e002      	b.n	8004968 <HAL_GPIO_Init+0x204>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <HAL_GPIO_Init+0x204>
 8004966:	2300      	movs	r3, #0
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	f002 0203 	and.w	r2, r2, #3
 800496e:	0092      	lsls	r2, r2, #2
 8004970:	4093      	lsls	r3, r2
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004978:	4935      	ldr	r1, [pc, #212]	; (8004a50 <HAL_GPIO_Init+0x2ec>)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3302      	adds	r3, #2
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004986:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <HAL_GPIO_Init+0x304>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049aa:	4a2f      	ldr	r2, [pc, #188]	; (8004a68 <HAL_GPIO_Init+0x304>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b0:	4b2d      	ldr	r3, [pc, #180]	; (8004a68 <HAL_GPIO_Init+0x304>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <HAL_GPIO_Init+0x304>)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <HAL_GPIO_Init+0x304>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049fe:	4a1a      	ldr	r2, [pc, #104]	; (8004a68 <HAL_GPIO_Init+0x304>)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a04:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <HAL_GPIO_Init+0x304>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a28:	4a0f      	ldr	r2, [pc, #60]	; (8004a68 <HAL_GPIO_Init+0x304>)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	f67f aea2 	bls.w	8004780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3724      	adds	r7, #36	; 0x24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	40013800 	.word	0x40013800
 8004a54:	40020000 	.word	0x40020000
 8004a58:	40020400 	.word	0x40020400
 8004a5c:	40020800 	.word	0x40020800
 8004a60:	40020c00 	.word	0x40020c00
 8004a64:	40021000 	.word	0x40021000
 8004a68:	40013c00 	.word	0x40013c00

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a88:	e003      	b.n	8004a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a8a:	887b      	ldrh	r3, [r7, #2]
 8004a8c:	041a      	lsls	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	619a      	str	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	041a      	lsls	r2, r3, #16
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	887b      	ldrh	r3, [r7, #2]
 8004abe:	400b      	ands	r3, r1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e12b      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fab2 	bl	8004064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2224      	movs	r2, #36	; 0x24
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b38:	f002 f99c 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 8004b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d807      	bhi.n	8004b58 <HAL_I2C_Init+0x84>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4a80      	ldr	r2, [pc, #512]	; (8004d4c <HAL_I2C_Init+0x278>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	bf94      	ite	ls
 8004b50:	2301      	movls	r3, #1
 8004b52:	2300      	movhi	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e006      	b.n	8004b66 <HAL_I2C_Init+0x92>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4a7d      	ldr	r2, [pc, #500]	; (8004d50 <HAL_I2C_Init+0x27c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	bf94      	ite	ls
 8004b60:	2301      	movls	r3, #1
 8004b62:	2300      	movhi	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e0e7      	b.n	8004d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a78      	ldr	r2, [pc, #480]	; (8004d54 <HAL_I2C_Init+0x280>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0c9b      	lsrs	r3, r3, #18
 8004b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a6a      	ldr	r2, [pc, #424]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d802      	bhi.n	8004ba8 <HAL_I2C_Init+0xd4>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	e009      	b.n	8004bbc <HAL_I2C_Init+0xe8>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	4a69      	ldr	r2, [pc, #420]	; (8004d58 <HAL_I2C_Init+0x284>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	099b      	lsrs	r3, r3, #6
 8004bba:	3301      	adds	r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6812      	ldr	r2, [r2, #0]
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	495c      	ldr	r1, [pc, #368]	; (8004d48 <HAL_I2C_Init+0x274>)
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	d819      	bhi.n	8004c10 <HAL_I2C_Init+0x13c>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	1e59      	subs	r1, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bea:	1c59      	adds	r1, r3, #1
 8004bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bf0:	400b      	ands	r3, r1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_I2C_Init+0x138>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1e59      	subs	r1, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	e051      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c0c:	2304      	movs	r3, #4
 8004c0e:	e04f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <HAL_I2C_Init+0x168>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	440b      	add	r3, r1
 8004c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e012      	b.n	8004c62 <HAL_I2C_Init+0x18e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1e58      	subs	r0, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	0099      	lsls	r1, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c52:	3301      	adds	r3, #1
 8004c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Init+0x196>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e022      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <HAL_I2C_Init+0x1bc>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1e58      	subs	r0, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6859      	ldr	r1, [r3, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	440b      	add	r3, r1
 8004c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c84:	3301      	adds	r3, #1
 8004c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8e:	e00f      	b.n	8004cb0 <HAL_I2C_Init+0x1dc>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1e58      	subs	r0, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6859      	ldr	r1, [r3, #4]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	0099      	lsls	r1, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004cb0:	6879      	ldr	r1, [r7, #4]
 8004cb2:	6809      	ldr	r1, [r1, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6911      	ldr	r1, [r2, #16]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68d2      	ldr	r2, [r2, #12]
 8004cea:	4311      	orrs	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0201 	orr.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	000186a0 	.word	0x000186a0
 8004d4c:	001e847f 	.word	0x001e847f
 8004d50:	003d08ff 	.word	0x003d08ff
 8004d54:	431bde83 	.word	0x431bde83
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	461a      	mov	r2, r3
 8004d68:	460b      	mov	r3, r1
 8004d6a:	817b      	strh	r3, [r7, #10]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d70:	f7ff fbe2 	bl	8004538 <HAL_GetTick>
 8004d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	f040 80e0 	bne.w	8004f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	2319      	movs	r3, #25
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	4970      	ldr	r1, [pc, #448]	; (8004f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f001 fa24 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e0d3      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_I2C_Master_Transmit+0x50>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e0cc      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d007      	beq.n	8004dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2221      	movs	r2, #33	; 0x21
 8004de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2210      	movs	r2, #16
 8004dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	893a      	ldrh	r2, [r7, #8]
 8004e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	4a50      	ldr	r2, [pc, #320]	; (8004f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	6a3a      	ldr	r2, [r7, #32]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 ff10 	bl	8005c40 <I2C_MasterRequestWrite>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e08d      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e40:	e066      	b.n	8004f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	6a39      	ldr	r1, [r7, #32]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f001 fa9e 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d107      	bne.n	8004e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06b      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	781a      	ldrb	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e96:	3b01      	subs	r3, #1
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_I2C_Master_Transmit+0x188>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d017      	beq.n	8004ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	6a39      	ldr	r1, [r7, #32]
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f001 fa8e 	bl	800640a <I2C_WaitOnBTFFlagUntilTimeout>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d107      	bne.n	8004f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e01a      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d194      	bne.n	8004e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	00100002 	.word	0x00100002
 8004f54:	ffff0000 	.word	0xffff0000

08004f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08c      	sub	sp, #48	; 0x30
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	461a      	mov	r2, r3
 8004f64:	460b      	mov	r3, r1
 8004f66:	817b      	strh	r3, [r7, #10]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f6c:	f7ff fae4 	bl	8004538 <HAL_GetTick>
 8004f70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	f040 820b 	bne.w	8005396 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	2319      	movs	r3, #25
 8004f86:	2201      	movs	r2, #1
 8004f88:	497c      	ldr	r1, [pc, #496]	; (800517c <HAL_I2C_Master_Receive+0x224>)
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f001 f926 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	e1fe      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_I2C_Master_Receive+0x50>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e1f7      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d007      	beq.n	8004fce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f042 0201 	orr.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fdc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2222      	movs	r2, #34	; 0x22
 8004fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2210      	movs	r2, #16
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	893a      	ldrh	r2, [r7, #8]
 8004ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29a      	uxth	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a5c      	ldr	r2, [pc, #368]	; (8005180 <HAL_I2C_Master_Receive+0x228>)
 800500e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005010:	8979      	ldrh	r1, [r7, #10]
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 fe94 	bl	8005d44 <I2C_MasterRequestRead>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e1b8      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d113      	bne.n	8005056 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	623b      	str	r3, [r7, #32]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005052:	601a      	str	r2, [r3, #0]
 8005054:	e18c      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	2b01      	cmp	r3, #1
 800505c:	d11b      	bne.n	8005096 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	61fb      	str	r3, [r7, #28]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e16c      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800509a:	2b02      	cmp	r3, #2
 800509c:	d11b      	bne.n	80050d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	61bb      	str	r3, [r7, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	e14c      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050fc:	e138      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b03      	cmp	r3, #3
 8005104:	f200 80f1 	bhi.w	80052ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510c:	2b01      	cmp	r3, #1
 800510e:	d123      	bne.n	8005158 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f001 f9b9 	bl	800648c <I2C_WaitOnRXNEFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e139      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691a      	ldr	r2, [r3, #16]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005140:	3b01      	subs	r3, #1
 8005142:	b29a      	uxth	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005156:	e10b      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515c:	2b02      	cmp	r3, #2
 800515e:	d14e      	bne.n	80051fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	2200      	movs	r2, #0
 8005168:	4906      	ldr	r1, [pc, #24]	; (8005184 <HAL_I2C_Master_Receive+0x22c>)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f001 f836 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d008      	beq.n	8005188 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e10e      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
 800517a:	bf00      	nop
 800517c:	00100002 	.word	0x00100002
 8005180:	ffff0000 	.word	0xffff0000
 8005184:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	3b01      	subs	r3, #1
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051fc:	e0b8      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	2200      	movs	r2, #0
 8005206:	4966      	ldr	r1, [pc, #408]	; (80053a0 <HAL_I2C_Master_Receive+0x448>)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 ffe7 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e0bf      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691a      	ldr	r2, [r3, #16]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	1c5a      	adds	r2, r3, #1
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	9300      	str	r3, [sp, #0]
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	494f      	ldr	r1, [pc, #316]	; (80053a0 <HAL_I2C_Master_Receive+0x448>)
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 ffb9 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e091      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005282:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052e8:	e042      	b.n	8005370 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f001 f8cc 	bl	800648c <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e04c      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0304 	and.w	r3, r3, #4
 800533a:	2b04      	cmp	r3, #4
 800533c:	d118      	bne.n	8005370 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	f47f aec2 	bne.w	80050fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2220      	movs	r2, #32
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005396:	2302      	movs	r3, #2
  }
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	00010004 	.word	0x00010004

080053a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	461a      	mov	r2, r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	817b      	strh	r3, [r7, #10]
 80053b6:	460b      	mov	r3, r1
 80053b8:	813b      	strh	r3, [r7, #8]
 80053ba:	4613      	mov	r3, r2
 80053bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053be:	f7ff f8bb 	bl	8004538 <HAL_GetTick>
 80053c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	f040 80d9 	bne.w	8005584 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	2319      	movs	r3, #25
 80053d8:	2201      	movs	r2, #1
 80053da:	496d      	ldr	r1, [pc, #436]	; (8005590 <HAL_I2C_Mem_Write+0x1ec>)
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fefd 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053e8:	2302      	movs	r3, #2
 80053ea:	e0cc      	b.n	8005586 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d101      	bne.n	80053fa <HAL_I2C_Mem_Write+0x56>
 80053f6:	2302      	movs	r3, #2
 80053f8:	e0c5      	b.n	8005586 <HAL_I2C_Mem_Write+0x1e2>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b01      	cmp	r3, #1
 800540e:	d007      	beq.n	8005420 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0201 	orr.w	r2, r2, #1
 800541e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800542e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2221      	movs	r2, #33	; 0x21
 8005434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a3a      	ldr	r2, [r7, #32]
 800544a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4a4d      	ldr	r2, [pc, #308]	; (8005594 <HAL_I2C_Mem_Write+0x1f0>)
 8005460:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005462:	88f8      	ldrh	r0, [r7, #6]
 8005464:	893a      	ldrh	r2, [r7, #8]
 8005466:	8979      	ldrh	r1, [r7, #10]
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	4603      	mov	r3, r0
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 fd34 	bl	8005ee0 <I2C_RequestMemoryWrite>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d052      	beq.n	8005524 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e081      	b.n	8005586 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 ff7e 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00d      	beq.n	80054ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	2b04      	cmp	r3, #4
 8005498:	d107      	bne.n	80054aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e06b      	b.n	8005586 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	781a      	ldrb	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	d11b      	bne.n	8005524 <HAL_I2C_Mem_Write+0x180>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d017      	beq.n	8005524 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550e:	3b01      	subs	r3, #1
 8005510:	b29a      	uxth	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1aa      	bne.n	8005482 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f000 ff6a 	bl	800640a <I2C_WaitOnBTFFlagUntilTimeout>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	2b04      	cmp	r3, #4
 8005542:	d107      	bne.n	8005554 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005552:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e016      	b.n	8005586 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005566:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005580:	2300      	movs	r3, #0
 8005582:	e000      	b.n	8005586 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005584:	2302      	movs	r3, #2
  }
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	00100002 	.word	0x00100002
 8005594:	ffff0000 	.word	0xffff0000

08005598 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08c      	sub	sp, #48	; 0x30
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	4608      	mov	r0, r1
 80055a2:	4611      	mov	r1, r2
 80055a4:	461a      	mov	r2, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	817b      	strh	r3, [r7, #10]
 80055aa:	460b      	mov	r3, r1
 80055ac:	813b      	strh	r3, [r7, #8]
 80055ae:	4613      	mov	r3, r2
 80055b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055b2:	f7fe ffc1 	bl	8004538 <HAL_GetTick>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	f040 8208 	bne.w	80059d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	2319      	movs	r3, #25
 80055cc:	2201      	movs	r2, #1
 80055ce:	497b      	ldr	r1, [pc, #492]	; (80057bc <HAL_I2C_Mem_Read+0x224>)
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fe03 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055dc:	2302      	movs	r3, #2
 80055de:	e1fb      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Mem_Read+0x56>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e1f4      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d007      	beq.n	8005614 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2222      	movs	r2, #34	; 0x22
 8005628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2240      	movs	r2, #64	; 0x40
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a5b      	ldr	r2, [pc, #364]	; (80057c0 <HAL_I2C_Mem_Read+0x228>)
 8005654:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005656:	88f8      	ldrh	r0, [r7, #6]
 8005658:	893a      	ldrh	r2, [r7, #8]
 800565a:	8979      	ldrh	r1, [r7, #10]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	9301      	str	r3, [sp, #4]
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	4603      	mov	r3, r0
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fcd0 	bl	800600c <I2C_RequestMemoryRead>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e1b0      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800567a:	2b00      	cmp	r3, #0
 800567c:	d113      	bne.n	80056a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567e:	2300      	movs	r3, #0
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	623b      	str	r3, [r7, #32]
 8005692:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e184      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d11b      	bne.n	80056e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	e164      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d11b      	bne.n	8005726 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800570c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	61bb      	str	r3, [r7, #24]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	e144      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	617b      	str	r3, [r7, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	617b      	str	r3, [r7, #20]
 800573a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800573c:	e138      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005742:	2b03      	cmp	r3, #3
 8005744:	f200 80f1 	bhi.w	800592a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	2b01      	cmp	r3, #1
 800574e:	d123      	bne.n	8005798 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 fe99 	bl	800648c <I2C_WaitOnRXNEFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e139      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005796:	e10b      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579c:	2b02      	cmp	r3, #2
 800579e:	d14e      	bne.n	800583e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	2200      	movs	r2, #0
 80057a8:	4906      	ldr	r1, [pc, #24]	; (80057c4 <HAL_I2C_Mem_Read+0x22c>)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fd16 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e10e      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
 80057ba:	bf00      	nop
 80057bc:	00100002 	.word	0x00100002
 80057c0:	ffff0000 	.word	0xffff0000
 80057c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800583c:	e0b8      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005844:	2200      	movs	r2, #0
 8005846:	4966      	ldr	r1, [pc, #408]	; (80059e0 <HAL_I2C_Mem_Read+0x448>)
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fcc7 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e0bf      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	1c5a      	adds	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	3b01      	subs	r3, #1
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a0:	2200      	movs	r2, #0
 80058a2:	494f      	ldr	r1, [pc, #316]	; (80059e0 <HAL_I2C_Mem_Read+0x448>)
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fc99 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e091      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	b2d2      	uxtb	r2, r2
 8005902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005928:	e042      	b.n	80059b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 fdac 	bl	800648c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e04c      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0304 	and.w	r3, r3, #4
 800597a:	2b04      	cmp	r3, #4
 800597c:	d118      	bne.n	80059b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	691a      	ldr	r2, [r3, #16]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	b2d2      	uxtb	r2, r2
 800598a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f47f aec2 	bne.w	800573e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	00010004 	.word	0x00010004

080059e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	607a      	str	r2, [r7, #4]
 80059ee:	603b      	str	r3, [r7, #0]
 80059f0:	460b      	mov	r3, r1
 80059f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80059f4:	f7fe fda0 	bl	8004538 <HAL_GetTick>
 80059f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	f040 8111 	bne.w	8005c2e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	2319      	movs	r3, #25
 8005a12:	2201      	movs	r2, #1
 8005a14:	4988      	ldr	r1, [pc, #544]	; (8005c38 <HAL_I2C_IsDeviceReady+0x254>)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 fbe0 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005a22:	2302      	movs	r3, #2
 8005a24:	e104      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_I2C_IsDeviceReady+0x50>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e0fd      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d007      	beq.n	8005a5a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f042 0201 	orr.w	r2, r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2224      	movs	r2, #36	; 0x24
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a70      	ldr	r2, [pc, #448]	; (8005c3c <HAL_I2C_IsDeviceReady+0x258>)
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fb9e 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00d      	beq.n	8005ac2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab4:	d103      	bne.n	8005abe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005abc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e0b6      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ac2:	897b      	ldrh	r3, [r7, #10]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ad0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005ad2:	f7fe fd31 	bl	8004538 <HAL_GetTick>
 8005ad6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	bf0c      	ite	eq
 8005ae6:	2301      	moveq	r3, #1
 8005ae8:	2300      	movne	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005afc:	bf0c      	ite	eq
 8005afe:	2301      	moveq	r3, #1
 8005b00:	2300      	movne	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b06:	e025      	b.n	8005b54 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b08:	f7fe fd16 	bl	8004538 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d302      	bcc.n	8005b1e <HAL_I2C_IsDeviceReady+0x13a>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	22a0      	movs	r2, #160	; 0xa0
 8005b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2ba0      	cmp	r3, #160	; 0xa0
 8005b5e:	d005      	beq.n	8005b6c <HAL_I2C_IsDeviceReady+0x188>
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <HAL_I2C_IsDeviceReady+0x188>
 8005b66:	7dbb      	ldrb	r3, [r7, #22]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0cd      	beq.n	8005b08 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d129      	bne.n	8005bd6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b92:	2300      	movs	r3, #0
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	613b      	str	r3, [r7, #16]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	613b      	str	r3, [r7, #16]
 8005ba6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2319      	movs	r3, #25
 8005bae:	2201      	movs	r2, #1
 8005bb0:	4921      	ldr	r1, [pc, #132]	; (8005c38 <HAL_I2C_IsDeviceReady+0x254>)
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fb12 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e036      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	e02c      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	2319      	movs	r3, #25
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	490f      	ldr	r1, [pc, #60]	; (8005c38 <HAL_I2C_IsDeviceReady+0x254>)
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 faee 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e012      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	f4ff af32 	bcc.w	8005a7e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e000      	b.n	8005c30 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005c2e:	2302      	movs	r3, #2
  }
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	00100002 	.word	0x00100002
 8005c3c:	ffff0000 	.word	0xffff0000

08005c40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	d006      	beq.n	8005c6a <I2C_MasterRequestWrite+0x2a>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d003      	beq.n	8005c6a <I2C_MasterRequestWrite+0x2a>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c68:	d108      	bne.n	8005c7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e00b      	b.n	8005c94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	2b12      	cmp	r3, #18
 8005c82:	d107      	bne.n	8005c94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fa9b 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00d      	beq.n	8005cc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cba:	d103      	bne.n	8005cc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e035      	b.n	8005d34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd0:	d108      	bne.n	8005ce4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cd2:	897b      	ldrh	r3, [r7, #10]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ce0:	611a      	str	r2, [r3, #16]
 8005ce2:	e01b      	b.n	8005d1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ce4:	897b      	ldrh	r3, [r7, #10]
 8005ce6:	11db      	asrs	r3, r3, #7
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0306 	and.w	r3, r3, #6
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f063 030f 	orn	r3, r3, #15
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	490e      	ldr	r1, [pc, #56]	; (8005d3c <I2C_MasterRequestWrite+0xfc>)
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 fac1 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e010      	b.n	8005d34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d12:	897b      	ldrh	r3, [r7, #10]
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4907      	ldr	r1, [pc, #28]	; (8005d40 <I2C_MasterRequestWrite+0x100>)
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fab1 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	00010008 	.word	0x00010008
 8005d40:	00010002 	.word	0x00010002

08005d44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	460b      	mov	r3, r1
 8005d52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	d006      	beq.n	8005d7e <I2C_MasterRequestRead+0x3a>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d003      	beq.n	8005d7e <I2C_MasterRequestRead+0x3a>
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d7c:	d108      	bne.n	8005d90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e00b      	b.n	8005da8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2b11      	cmp	r3, #17
 8005d96:	d107      	bne.n	8005da8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fa11 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00d      	beq.n	8005ddc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dce:	d103      	bne.n	8005dd8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e079      	b.n	8005ed0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de4:	d108      	bne.n	8005df8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005de6:	897b      	ldrh	r3, [r7, #10]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	611a      	str	r2, [r3, #16]
 8005df6:	e05f      	b.n	8005eb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005df8:	897b      	ldrh	r3, [r7, #10]
 8005dfa:	11db      	asrs	r3, r3, #7
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0306 	and.w	r3, r3, #6
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f063 030f 	orn	r3, r3, #15
 8005e08:	b2da      	uxtb	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	4930      	ldr	r1, [pc, #192]	; (8005ed8 <I2C_MasterRequestRead+0x194>)
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fa37 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e054      	b.n	8005ed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4929      	ldr	r1, [pc, #164]	; (8005edc <I2C_MasterRequestRead+0x198>)
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 fa27 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e044      	b.n	8005ed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f9af 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00d      	beq.n	8005ea0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e92:	d103      	bne.n	8005e9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e017      	b.n	8005ed0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005ea0:	897b      	ldrh	r3, [r7, #10]
 8005ea2:	11db      	asrs	r3, r3, #7
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	f003 0306 	and.w	r3, r3, #6
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f063 030e 	orn	r3, r3, #14
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	4907      	ldr	r1, [pc, #28]	; (8005edc <I2C_MasterRequestRead+0x198>)
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f000 f9e3 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e000      	b.n	8005ed0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	00010008 	.word	0x00010008
 8005edc:	00010002 	.word	0x00010002

08005ee0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	4608      	mov	r0, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	461a      	mov	r2, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	817b      	strh	r3, [r7, #10]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	813b      	strh	r3, [r7, #8]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f960 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00d      	beq.n	8005f3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f30:	d103      	bne.n	8005f3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e05f      	b.n	8005ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f3e:	897b      	ldrh	r3, [r7, #10]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	6a3a      	ldr	r2, [r7, #32]
 8005f52:	492d      	ldr	r1, [pc, #180]	; (8006008 <I2C_RequestMemoryWrite+0x128>)
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 f998 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e04c      	b.n	8005ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7c:	6a39      	ldr	r1, [r7, #32]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fa02 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00d      	beq.n	8005fa6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	d107      	bne.n	8005fa2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e02b      	b.n	8005ffe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d105      	bne.n	8005fb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fac:	893b      	ldrh	r3, [r7, #8]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	611a      	str	r2, [r3, #16]
 8005fb6:	e021      	b.n	8005ffc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fb8:	893b      	ldrh	r3, [r7, #8]
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f000 f9dc 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00d      	beq.n	8005ff2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d107      	bne.n	8005fee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e005      	b.n	8005ffe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff2:	893b      	ldrh	r3, [r7, #8]
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	00010002 	.word	0x00010002

0800600c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	817b      	strh	r3, [r7, #10]
 800601e:	460b      	mov	r3, r1
 8006020:	813b      	strh	r3, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006034:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006044:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	2200      	movs	r2, #0
 800604e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 f8c2 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00d      	beq.n	800607a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800606c:	d103      	bne.n	8006076 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006074:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e0aa      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800607a:	897b      	ldrh	r3, [r7, #10]
 800607c:	b2db      	uxtb	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006088:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	6a3a      	ldr	r2, [r7, #32]
 800608e:	4952      	ldr	r1, [pc, #328]	; (80061d8 <I2C_RequestMemoryRead+0x1cc>)
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f8fa 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e097      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b8:	6a39      	ldr	r1, [r7, #32]
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f964 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d107      	bne.n	80060de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e076      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d105      	bne.n	80060f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060e8:	893b      	ldrh	r3, [r7, #8]
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	e021      	b.n	8006138 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060f4:	893b      	ldrh	r3, [r7, #8]
 80060f6:	0a1b      	lsrs	r3, r3, #8
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	b2da      	uxtb	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006104:	6a39      	ldr	r1, [r7, #32]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 f93e 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	2b04      	cmp	r3, #4
 8006118:	d107      	bne.n	800612a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006128:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e050      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800612e:	893b      	ldrh	r3, [r7, #8]
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613a:	6a39      	ldr	r1, [r7, #32]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f923 	bl	8006388 <I2C_WaitOnTXEFlagUntilTimeout>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00d      	beq.n	8006164 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614c:	2b04      	cmp	r3, #4
 800614e:	d107      	bne.n	8006160 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800615e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e035      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006172:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	2200      	movs	r2, #0
 800617c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f82b 	bl	80061dc <I2C_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d103      	bne.n	80061a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e013      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80061a8:	897b      	ldrh	r3, [r7, #10]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f043 0301 	orr.w	r3, r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	4906      	ldr	r1, [pc, #24]	; (80061d8 <I2C_RequestMemoryRead+0x1cc>)
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 f863 	bl	800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	00010002 	.word	0x00010002

080061dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ec:	e025      	b.n	800623a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f4:	d021      	beq.n	800623a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061f6:	f7fe f99f 	bl	8004538 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d302      	bcc.n	800620c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d116      	bne.n	800623a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2220      	movs	r2, #32
 8006216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f043 0220 	orr.w	r2, r3, #32
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e023      	b.n	8006282 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10d      	bne.n	8006260 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	e00c      	b.n	800627a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	43da      	mvns	r2, r3
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4013      	ands	r3, r2
 800626c:	b29b      	uxth	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	bf0c      	ite	eq
 8006272:	2301      	moveq	r3, #1
 8006274:	2300      	movne	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	79fb      	ldrb	r3, [r7, #7]
 800627c:	429a      	cmp	r2, r3
 800627e:	d0b6      	beq.n	80061ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006298:	e051      	b.n	800633e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a8:	d123      	bne.n	80062f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	f043 0204 	orr.w	r2, r3, #4
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e046      	b.n	8006380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f8:	d021      	beq.n	800633e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fa:	f7fe f91d 	bl	8004538 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	429a      	cmp	r2, r3
 8006308:	d302      	bcc.n	8006310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d116      	bne.n	800633e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e020      	b.n	8006380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10c      	bne.n	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	43da      	mvns	r2, r3
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4013      	ands	r3, r2
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	bf14      	ite	ne
 800635a:	2301      	movne	r3, #1
 800635c:	2300      	moveq	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	e00b      	b.n	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	43da      	mvns	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4013      	ands	r3, r2
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	bf14      	ite	ne
 8006374:	2301      	movne	r3, #1
 8006376:	2300      	moveq	r3, #0
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d18d      	bne.n	800629a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006394:	e02d      	b.n	80063f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 f8ce 	bl	8006538 <I2C_IsAcknowledgeFailed>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e02d      	b.n	8006402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ac:	d021      	beq.n	80063f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ae:	f7fe f8c3 	bl	8004538 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d116      	bne.n	80063f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e007      	b.n	8006402 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d1ca      	bne.n	8006396 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	60f8      	str	r0, [r7, #12]
 8006412:	60b9      	str	r1, [r7, #8]
 8006414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006416:	e02d      	b.n	8006474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 f88d 	bl	8006538 <I2C_IsAcknowledgeFailed>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e02d      	b.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800642e:	d021      	beq.n	8006474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006430:	f7fe f882 	bl	8004538 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	429a      	cmp	r2, r3
 800643e:	d302      	bcc.n	8006446 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d116      	bne.n	8006474 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e007      	b.n	8006484 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b04      	cmp	r3, #4
 8006480:	d1ca      	bne.n	8006418 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006498:	e042      	b.n	8006520 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b10      	cmp	r3, #16
 80064a6:	d119      	bne.n	80064dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0210 	mvn.w	r2, #16
 80064b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e029      	b.n	8006530 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064dc:	f7fe f82c 	bl	8004538 <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d116      	bne.n	8006520 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650c:	f043 0220 	orr.w	r2, r3, #32
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e007      	b.n	8006530 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d1b5      	bne.n	800649a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800654a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654e:	d11b      	bne.n	8006588 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006558:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	f043 0204 	orr.w	r2, r3, #4
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
	...

08006598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e267      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d075      	beq.n	80066a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065b6:	4b88      	ldr	r3, [pc, #544]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 030c 	and.w	r3, r3, #12
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d00c      	beq.n	80065dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065c2:	4b85      	ldr	r3, [pc, #532]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065ca:	2b08      	cmp	r3, #8
 80065cc:	d112      	bne.n	80065f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ce:	4b82      	ldr	r3, [pc, #520]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065da:	d10b      	bne.n	80065f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065dc:	4b7e      	ldr	r3, [pc, #504]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d05b      	beq.n	80066a0 <HAL_RCC_OscConfig+0x108>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d157      	bne.n	80066a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e242      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d106      	bne.n	800660c <HAL_RCC_OscConfig+0x74>
 80065fe:	4b76      	ldr	r3, [pc, #472]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a75      	ldr	r2, [pc, #468]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e01d      	b.n	8006648 <HAL_RCC_OscConfig+0xb0>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006614:	d10c      	bne.n	8006630 <HAL_RCC_OscConfig+0x98>
 8006616:	4b70      	ldr	r3, [pc, #448]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a6f      	ldr	r2, [pc, #444]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 800661c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b6d      	ldr	r3, [pc, #436]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a6c      	ldr	r2, [pc, #432]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e00b      	b.n	8006648 <HAL_RCC_OscConfig+0xb0>
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a68      	ldr	r2, [pc, #416]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663a:	6013      	str	r3, [r2, #0]
 800663c:	4b66      	ldr	r3, [pc, #408]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a65      	ldr	r2, [pc, #404]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d013      	beq.n	8006678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006650:	f7fd ff72 	bl	8004538 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006658:	f7fd ff6e 	bl	8004538 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b64      	cmp	r3, #100	; 0x64
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e207      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0xc0>
 8006676:	e014      	b.n	80066a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006678:	f7fd ff5e 	bl	8004538 <HAL_GetTick>
 800667c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667e:	e008      	b.n	8006692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006680:	f7fd ff5a 	bl	8004538 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b64      	cmp	r3, #100	; 0x64
 800668c:	d901      	bls.n	8006692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e1f3      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006692:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1f0      	bne.n	8006680 <HAL_RCC_OscConfig+0xe8>
 800669e:	e000      	b.n	80066a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d063      	beq.n	8006776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ae:	4b4a      	ldr	r3, [pc, #296]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f003 030c 	and.w	r3, r3, #12
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066ba:	4b47      	ldr	r3, [pc, #284]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d11c      	bne.n	8006700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066c6:	4b44      	ldr	r3, [pc, #272]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d116      	bne.n	8006700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d2:	4b41      	ldr	r3, [pc, #260]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_RCC_OscConfig+0x152>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d001      	beq.n	80066ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e1c7      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ea:	4b3b      	ldr	r3, [pc, #236]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	4937      	ldr	r1, [pc, #220]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066fe:	e03a      	b.n	8006776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d020      	beq.n	800674a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006708:	4b34      	ldr	r3, [pc, #208]	; (80067dc <HAL_RCC_OscConfig+0x244>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fd ff13 	bl	8004538 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006716:	f7fd ff0f 	bl	8004538 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e1a8      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006728:	4b2b      	ldr	r3, [pc, #172]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006734:	4b28      	ldr	r3, [pc, #160]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	00db      	lsls	r3, r3, #3
 8006742:	4925      	ldr	r1, [pc, #148]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 8006744:	4313      	orrs	r3, r2
 8006746:	600b      	str	r3, [r1, #0]
 8006748:	e015      	b.n	8006776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674a:	4b24      	ldr	r3, [pc, #144]	; (80067dc <HAL_RCC_OscConfig+0x244>)
 800674c:	2200      	movs	r2, #0
 800674e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fd fef2 	bl	8004538 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006758:	f7fd feee 	bl	8004538 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e187      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d036      	beq.n	80067f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d016      	beq.n	80067b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800678a:	4b15      	ldr	r3, [pc, #84]	; (80067e0 <HAL_RCC_OscConfig+0x248>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006790:	f7fd fed2 	bl	8004538 <HAL_GetTick>
 8006794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	e008      	b.n	80067aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006798:	f7fd fece 	bl	8004538 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d901      	bls.n	80067aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e167      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067aa:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <HAL_RCC_OscConfig+0x240>)
 80067ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0f0      	beq.n	8006798 <HAL_RCC_OscConfig+0x200>
 80067b6:	e01b      	b.n	80067f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <HAL_RCC_OscConfig+0x248>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067be:	f7fd febb 	bl	8004538 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c4:	e00e      	b.n	80067e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067c6:	f7fd feb7 	bl	8004538 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d907      	bls.n	80067e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e150      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
 80067d8:	40023800 	.word	0x40023800
 80067dc:	42470000 	.word	0x42470000
 80067e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e4:	4b88      	ldr	r3, [pc, #544]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80067e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1ea      	bne.n	80067c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0304 	and.w	r3, r3, #4
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 8097 	beq.w	800692c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006802:	4b81      	ldr	r3, [pc, #516]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10f      	bne.n	800682e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800680e:	2300      	movs	r3, #0
 8006810:	60bb      	str	r3, [r7, #8]
 8006812:	4b7d      	ldr	r3, [pc, #500]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	4a7c      	ldr	r2, [pc, #496]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681c:	6413      	str	r3, [r2, #64]	; 0x40
 800681e:	4b7a      	ldr	r3, [pc, #488]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	60bb      	str	r3, [r7, #8]
 8006828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800682e:	4b77      	ldr	r3, [pc, #476]	; (8006a0c <HAL_RCC_OscConfig+0x474>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006836:	2b00      	cmp	r3, #0
 8006838:	d118      	bne.n	800686c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800683a:	4b74      	ldr	r3, [pc, #464]	; (8006a0c <HAL_RCC_OscConfig+0x474>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a73      	ldr	r2, [pc, #460]	; (8006a0c <HAL_RCC_OscConfig+0x474>)
 8006840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006846:	f7fd fe77 	bl	8004538 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800684e:	f7fd fe73 	bl	8004538 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e10c      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006860:	4b6a      	ldr	r3, [pc, #424]	; (8006a0c <HAL_RCC_OscConfig+0x474>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0f0      	beq.n	800684e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d106      	bne.n	8006882 <HAL_RCC_OscConfig+0x2ea>
 8006874:	4b64      	ldr	r3, [pc, #400]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006878:	4a63      	ldr	r2, [pc, #396]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	6713      	str	r3, [r2, #112]	; 0x70
 8006880:	e01c      	b.n	80068bc <HAL_RCC_OscConfig+0x324>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b05      	cmp	r3, #5
 8006888:	d10c      	bne.n	80068a4 <HAL_RCC_OscConfig+0x30c>
 800688a:	4b5f      	ldr	r3, [pc, #380]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	4a5e      	ldr	r2, [pc, #376]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006890:	f043 0304 	orr.w	r3, r3, #4
 8006894:	6713      	str	r3, [r2, #112]	; 0x70
 8006896:	4b5c      	ldr	r3, [pc, #368]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689a:	4a5b      	ldr	r2, [pc, #364]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 800689c:	f043 0301 	orr.w	r3, r3, #1
 80068a0:	6713      	str	r3, [r2, #112]	; 0x70
 80068a2:	e00b      	b.n	80068bc <HAL_RCC_OscConfig+0x324>
 80068a4:	4b58      	ldr	r3, [pc, #352]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80068a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a8:	4a57      	ldr	r2, [pc, #348]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80068aa:	f023 0301 	bic.w	r3, r3, #1
 80068ae:	6713      	str	r3, [r2, #112]	; 0x70
 80068b0:	4b55      	ldr	r3, [pc, #340]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	4a54      	ldr	r2, [pc, #336]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80068b6:	f023 0304 	bic.w	r3, r3, #4
 80068ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d015      	beq.n	80068f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fd fe38 	bl	8004538 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fd fe34 	bl	8004538 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0cb      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e2:	4b49      	ldr	r3, [pc, #292]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0ee      	beq.n	80068cc <HAL_RCC_OscConfig+0x334>
 80068ee:	e014      	b.n	800691a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068f0:	f7fd fe22 	bl	8004538 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f6:	e00a      	b.n	800690e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068f8:	f7fd fe1e 	bl	8004538 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	f241 3288 	movw	r2, #5000	; 0x1388
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e0b5      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690e:	4b3e      	ldr	r3, [pc, #248]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1ee      	bne.n	80068f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d105      	bne.n	800692c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006920:	4b39      	ldr	r3, [pc, #228]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	4a38      	ldr	r2, [pc, #224]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800692a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80a1 	beq.w	8006a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006936:	4b34      	ldr	r3, [pc, #208]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f003 030c 	and.w	r3, r3, #12
 800693e:	2b08      	cmp	r3, #8
 8006940:	d05c      	beq.n	80069fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d141      	bne.n	80069ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694a:	4b31      	ldr	r3, [pc, #196]	; (8006a10 <HAL_RCC_OscConfig+0x478>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006950:	f7fd fdf2 	bl	8004538 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006958:	f7fd fdee 	bl	8004538 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e087      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696a:	4b27      	ldr	r3, [pc, #156]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69da      	ldr	r2, [r3, #28]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	019b      	lsls	r3, r3, #6
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698c:	085b      	lsrs	r3, r3, #1
 800698e:	3b01      	subs	r3, #1
 8006990:	041b      	lsls	r3, r3, #16
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	061b      	lsls	r3, r3, #24
 800699a:	491b      	ldr	r1, [pc, #108]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 800699c:	4313      	orrs	r3, r2
 800699e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069a0:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <HAL_RCC_OscConfig+0x478>)
 80069a2:	2201      	movs	r2, #1
 80069a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a6:	f7fd fdc7 	bl	8004538 <HAL_GetTick>
 80069aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ac:	e008      	b.n	80069c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ae:	f7fd fdc3 	bl	8004538 <HAL_GetTick>
 80069b2:	4602      	mov	r2, r0
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e05c      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c0:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d0f0      	beq.n	80069ae <HAL_RCC_OscConfig+0x416>
 80069cc:	e054      	b.n	8006a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ce:	4b10      	ldr	r3, [pc, #64]	; (8006a10 <HAL_RCC_OscConfig+0x478>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d4:	f7fd fdb0 	bl	8004538 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fd fdac 	bl	8004538 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e045      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <HAL_RCC_OscConfig+0x470>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x444>
 80069fa:	e03d      	b.n	8006a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d107      	bne.n	8006a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e038      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
 8006a08:	40023800 	.word	0x40023800
 8006a0c:	40007000 	.word	0x40007000
 8006a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a14:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <HAL_RCC_OscConfig+0x4ec>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d028      	beq.n	8006a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d121      	bne.n	8006a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d11a      	bne.n	8006a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a44:	4013      	ands	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d111      	bne.n	8006a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d107      	bne.n	8006a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d001      	beq.n	8006a78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023800 	.word	0x40023800

08006a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0cc      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a9c:	4b68      	ldr	r3, [pc, #416]	; (8006c40 <HAL_RCC_ClockConfig+0x1b8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0307 	and.w	r3, r3, #7
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d90c      	bls.n	8006ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aaa:	4b65      	ldr	r3, [pc, #404]	; (8006c40 <HAL_RCC_ClockConfig+0x1b8>)
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab2:	4b63      	ldr	r3, [pc, #396]	; (8006c40 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0b8      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d020      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d005      	beq.n	8006ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006adc:	4b59      	ldr	r3, [pc, #356]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	4a58      	ldr	r2, [pc, #352]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0308 	and.w	r3, r3, #8
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006af4:	4b53      	ldr	r3, [pc, #332]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4a52      	ldr	r2, [pc, #328]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b00:	4b50      	ldr	r3, [pc, #320]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	494d      	ldr	r1, [pc, #308]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d044      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d107      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	4b47      	ldr	r3, [pc, #284]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d119      	bne.n	8006b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e07f      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d003      	beq.n	8006b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d107      	bne.n	8006b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b46:	4b3f      	ldr	r3, [pc, #252]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e06f      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b56:	4b3b      	ldr	r3, [pc, #236]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e067      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b66:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f023 0203 	bic.w	r2, r3, #3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4934      	ldr	r1, [pc, #208]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b78:	f7fd fcde 	bl	8004538 <HAL_GetTick>
 8006b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b80:	f7fd fcda 	bl	8004538 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e04f      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	4b2b      	ldr	r3, [pc, #172]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 020c 	and.w	r2, r3, #12
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d1eb      	bne.n	8006b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <HAL_RCC_ClockConfig+0x1b8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d20c      	bcs.n	8006bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_RCC_ClockConfig+0x1b8>)
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bbe:	4b20      	ldr	r3, [pc, #128]	; (8006c40 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e032      	b.n	8006c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d008      	beq.n	8006bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bdc:	4b19      	ldr	r3, [pc, #100]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4916      	ldr	r1, [pc, #88]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d009      	beq.n	8006c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bfa:	4b12      	ldr	r3, [pc, #72]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	490e      	ldr	r1, [pc, #56]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c0e:	f000 f821 	bl	8006c54 <HAL_RCC_GetSysClockFreq>
 8006c12:	4602      	mov	r2, r0
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_RCC_ClockConfig+0x1bc>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	091b      	lsrs	r3, r3, #4
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	490a      	ldr	r1, [pc, #40]	; (8006c48 <HAL_RCC_ClockConfig+0x1c0>)
 8006c20:	5ccb      	ldrb	r3, [r1, r3]
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	4a09      	ldr	r2, [pc, #36]	; (8006c4c <HAL_RCC_ClockConfig+0x1c4>)
 8006c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c2a:	4b09      	ldr	r3, [pc, #36]	; (8006c50 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd fc3e 	bl	80044b0 <HAL_InitTick>

  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023c00 	.word	0x40023c00
 8006c44:	40023800 	.word	0x40023800
 8006c48:	0800ae20 	.word	0x0800ae20
 8006c4c:	20000008 	.word	0x20000008
 8006c50:	2000000c 	.word	0x2000000c

08006c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c58:	b094      	sub	sp, #80	; 0x50
 8006c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c60:	2300      	movs	r3, #0
 8006c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c64:	2300      	movs	r3, #0
 8006c66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c6c:	4b79      	ldr	r3, [pc, #484]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 030c 	and.w	r3, r3, #12
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d00d      	beq.n	8006c94 <HAL_RCC_GetSysClockFreq+0x40>
 8006c78:	2b08      	cmp	r3, #8
 8006c7a:	f200 80e1 	bhi.w	8006e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_RCC_GetSysClockFreq+0x34>
 8006c82:	2b04      	cmp	r3, #4
 8006c84:	d003      	beq.n	8006c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c86:	e0db      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c88:	4b73      	ldr	r3, [pc, #460]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c8c:	e0db      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c8e:	4b72      	ldr	r3, [pc, #456]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c92:	e0d8      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c94:	4b6f      	ldr	r3, [pc, #444]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c9e:	4b6d      	ldr	r3, [pc, #436]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d063      	beq.n	8006d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006caa:	4b6a      	ldr	r3, [pc, #424]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	099b      	lsrs	r3, r3, #6
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	462b      	mov	r3, r5
 8006cca:	f04f 0000 	mov.w	r0, #0
 8006cce:	f04f 0100 	mov.w	r1, #0
 8006cd2:	0159      	lsls	r1, r3, #5
 8006cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cd8:	0150      	lsls	r0, r2, #5
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	4621      	mov	r1, r4
 8006ce0:	1a51      	subs	r1, r2, r1
 8006ce2:	6139      	str	r1, [r7, #16]
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	018b      	lsls	r3, r1, #6
 8006cfc:	4651      	mov	r1, sl
 8006cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d02:	4651      	mov	r1, sl
 8006d04:	018a      	lsls	r2, r1, #6
 8006d06:	4651      	mov	r1, sl
 8006d08:	ebb2 0801 	subs.w	r8, r2, r1
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8006d12:	f04f 0200 	mov.w	r2, #0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d26:	4690      	mov	r8, r2
 8006d28:	4699      	mov	r9, r3
 8006d2a:	4623      	mov	r3, r4
 8006d2c:	eb18 0303 	adds.w	r3, r8, r3
 8006d30:	60bb      	str	r3, [r7, #8]
 8006d32:	462b      	mov	r3, r5
 8006d34:	eb49 0303 	adc.w	r3, r9, r3
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	f04f 0200 	mov.w	r2, #0
 8006d3e:	f04f 0300 	mov.w	r3, #0
 8006d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d46:	4629      	mov	r1, r5
 8006d48:	028b      	lsls	r3, r1, #10
 8006d4a:	4621      	mov	r1, r4
 8006d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d50:	4621      	mov	r1, r4
 8006d52:	028a      	lsls	r2, r1, #10
 8006d54:	4610      	mov	r0, r2
 8006d56:	4619      	mov	r1, r3
 8006d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d64:	f7f9 ff78 	bl	8000c58 <__aeabi_uldivmod>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	e058      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d72:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	099b      	lsrs	r3, r3, #6
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d82:	623b      	str	r3, [r7, #32]
 8006d84:	2300      	movs	r3, #0
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
 8006d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	f04f 0000 	mov.w	r0, #0
 8006d94:	f04f 0100 	mov.w	r1, #0
 8006d98:	0159      	lsls	r1, r3, #5
 8006d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d9e:	0150      	lsls	r0, r2, #5
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4641      	mov	r1, r8
 8006da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006daa:	4649      	mov	r1, r9
 8006dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8006dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	00eb      	lsls	r3, r5, #3
 8006dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dda:	00e2      	lsls	r2, r4, #3
 8006ddc:	4614      	mov	r4, r2
 8006dde:	461d      	mov	r5, r3
 8006de0:	4643      	mov	r3, r8
 8006de2:	18e3      	adds	r3, r4, r3
 8006de4:	603b      	str	r3, [r7, #0]
 8006de6:	464b      	mov	r3, r9
 8006de8:	eb45 0303 	adc.w	r3, r5, r3
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	028b      	lsls	r3, r1, #10
 8006dfe:	4621      	mov	r1, r4
 8006e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e04:	4621      	mov	r1, r4
 8006e06:	028a      	lsls	r2, r1, #10
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e0e:	2200      	movs	r2, #0
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	61fa      	str	r2, [r7, #28]
 8006e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e18:	f7f9 ff1e 	bl	8000c58 <__aeabi_uldivmod>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4613      	mov	r3, r2
 8006e22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	3301      	adds	r3, #1
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e3e:	e002      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3750      	adds	r7, #80	; 0x50
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e52:	bf00      	nop
 8006e54:	40023800 	.word	0x40023800
 8006e58:	00f42400 	.word	0x00f42400

08006e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e60:	4b03      	ldr	r3, [pc, #12]	; (8006e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e62:	681b      	ldr	r3, [r3, #0]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	20000008 	.word	0x20000008

08006e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e78:	f7ff fff0 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0a9b      	lsrs	r3, r3, #10
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4903      	ldr	r1, [pc, #12]	; (8006e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40023800 	.word	0x40023800
 8006e98:	0800ae30 	.word	0x0800ae30

08006e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ea0:	f7ff ffdc 	bl	8006e5c <HAL_RCC_GetHCLKFreq>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	0b5b      	lsrs	r3, r3, #13
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	4903      	ldr	r1, [pc, #12]	; (8006ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eb2:	5ccb      	ldrb	r3, [r1, r3]
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	0800ae30 	.word	0x0800ae30

08006ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e07b      	b.n	8006fce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d108      	bne.n	8006ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ee6:	d009      	beq.n	8006efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	61da      	str	r2, [r3, #28]
 8006eee:	e005      	b.n	8006efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fd f8ec 	bl	80040f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691b      	ldr	r3, [r3, #16]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	431a      	orrs	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f80:	ea42 0103 	orr.w	r1, r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	f003 0104 	and.w	r1, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	f003 0210 	and.w	r2, r3, #16
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e03f      	b.n	8007068 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7fd f8c1 	bl	8004184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2224      	movs	r2, #36	; 0x24
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007018:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f928 	bl	8007270 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800702e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800703e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800704e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b08a      	sub	sp, #40	; 0x28
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	4613      	mov	r3, r2
 800707e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b20      	cmp	r3, #32
 800708e:	d17c      	bne.n	800718a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_UART_Transmit+0x2c>
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e075      	b.n	800718c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <HAL_UART_Transmit+0x3e>
 80070aa:	2302      	movs	r3, #2
 80070ac:	e06e      	b.n	800718c <HAL_UART_Transmit+0x11c>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2221      	movs	r2, #33	; 0x21
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070c4:	f7fd fa38 	bl	8004538 <HAL_GetTick>
 80070c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	88fa      	ldrh	r2, [r7, #6]
 80070ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	88fa      	ldrh	r2, [r7, #6]
 80070d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d108      	bne.n	80070f2 <HAL_UART_Transmit+0x82>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d104      	bne.n	80070f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	e003      	b.n	80070fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007102:	e02a      	b.n	800715a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	2200      	movs	r2, #0
 800710c:	2180      	movs	r1, #128	; 0x80
 800710e:	68f8      	ldr	r0, [r7, #12]
 8007110:	f000 f840 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e036      	b.n	800718c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10b      	bne.n	800713c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007132:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	3302      	adds	r3, #2
 8007138:	61bb      	str	r3, [r7, #24]
 800713a:	e007      	b.n	800714c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	781a      	ldrb	r2, [r3, #0]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	3301      	adds	r3, #1
 800714a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1cf      	bne.n	8007104 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2200      	movs	r2, #0
 800716c:	2140      	movs	r1, #64	; 0x40
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f810 	bl	8007194 <UART_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e006      	b.n	800718c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	e000      	b.n	800718c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800718a:	2302      	movs	r3, #2
  }
}
 800718c:	4618      	mov	r0, r3
 800718e:	3720      	adds	r7, #32
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b090      	sub	sp, #64	; 0x40
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071a4:	e050      	b.n	8007248 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ac:	d04c      	beq.n	8007248 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d007      	beq.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071b4:	f7fd f9c0 	bl	8004538 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d241      	bcs.n	8007248 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330c      	adds	r3, #12
 80071e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071e4:	637a      	str	r2, [r7, #52]	; 0x34
 80071e6:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e5      	bne.n	80071c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	613b      	str	r3, [r7, #16]
   return(result);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3314      	adds	r3, #20
 8007216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007218:	623a      	str	r2, [r7, #32]
 800721a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	69f9      	ldr	r1, [r7, #28]
 800721e:	6a3a      	ldr	r2, [r7, #32]
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	61bb      	str	r3, [r7, #24]
   return(result);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e5      	bne.n	80071f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e00f      	b.n	8007268 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4013      	ands	r3, r2
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	429a      	cmp	r2, r3
 8007256:	bf0c      	ite	eq
 8007258:	2301      	moveq	r3, #1
 800725a:	2300      	movne	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	461a      	mov	r2, r3
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	429a      	cmp	r2, r3
 8007264:	d09f      	beq.n	80071a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3740      	adds	r7, #64	; 0x40
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007274:	b0c0      	sub	sp, #256	; 0x100
 8007276:	af00      	add	r7, sp, #0
 8007278:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800728c:	68d9      	ldr	r1, [r3, #12]
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	ea40 0301 	orr.w	r3, r0, r1
 8007298:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800729a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	431a      	orrs	r2, r3
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	431a      	orrs	r2, r3
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072c8:	f021 010c 	bic.w	r1, r1, #12
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072d6:	430b      	orrs	r3, r1
 80072d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695b      	ldr	r3, [r3, #20]
 80072e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	6999      	ldr	r1, [r3, #24]
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	ea40 0301 	orr.w	r3, r0, r1
 80072f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b8f      	ldr	r3, [pc, #572]	; (800753c <UART_SetConfig+0x2cc>)
 8007300:	429a      	cmp	r2, r3
 8007302:	d005      	beq.n	8007310 <UART_SetConfig+0xa0>
 8007304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b8d      	ldr	r3, [pc, #564]	; (8007540 <UART_SetConfig+0x2d0>)
 800730c:	429a      	cmp	r2, r3
 800730e:	d104      	bne.n	800731a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007310:	f7ff fdc4 	bl	8006e9c <HAL_RCC_GetPCLK2Freq>
 8007314:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007318:	e003      	b.n	8007322 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800731a:	f7ff fdab 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 800731e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800732c:	f040 810c 	bne.w	8007548 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007334:	2200      	movs	r2, #0
 8007336:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800733a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800733e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007342:	4622      	mov	r2, r4
 8007344:	462b      	mov	r3, r5
 8007346:	1891      	adds	r1, r2, r2
 8007348:	65b9      	str	r1, [r7, #88]	; 0x58
 800734a:	415b      	adcs	r3, r3
 800734c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800734e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007352:	4621      	mov	r1, r4
 8007354:	eb12 0801 	adds.w	r8, r2, r1
 8007358:	4629      	mov	r1, r5
 800735a:	eb43 0901 	adc.w	r9, r3, r1
 800735e:	f04f 0200 	mov.w	r2, #0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800736a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800736e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007372:	4690      	mov	r8, r2
 8007374:	4699      	mov	r9, r3
 8007376:	4623      	mov	r3, r4
 8007378:	eb18 0303 	adds.w	r3, r8, r3
 800737c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007380:	462b      	mov	r3, r5
 8007382:	eb49 0303 	adc.w	r3, r9, r3
 8007386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007396:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800739a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800739e:	460b      	mov	r3, r1
 80073a0:	18db      	adds	r3, r3, r3
 80073a2:	653b      	str	r3, [r7, #80]	; 0x50
 80073a4:	4613      	mov	r3, r2
 80073a6:	eb42 0303 	adc.w	r3, r2, r3
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
 80073ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073b4:	f7f9 fc50 	bl	8000c58 <__aeabi_uldivmod>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	4b61      	ldr	r3, [pc, #388]	; (8007544 <UART_SetConfig+0x2d4>)
 80073be:	fba3 2302 	umull	r2, r3, r3, r2
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	011c      	lsls	r4, r3, #4
 80073c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ca:	2200      	movs	r2, #0
 80073cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073d8:	4642      	mov	r2, r8
 80073da:	464b      	mov	r3, r9
 80073dc:	1891      	adds	r1, r2, r2
 80073de:	64b9      	str	r1, [r7, #72]	; 0x48
 80073e0:	415b      	adcs	r3, r3
 80073e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073e8:	4641      	mov	r1, r8
 80073ea:	eb12 0a01 	adds.w	sl, r2, r1
 80073ee:	4649      	mov	r1, r9
 80073f0:	eb43 0b01 	adc.w	fp, r3, r1
 80073f4:	f04f 0200 	mov.w	r2, #0
 80073f8:	f04f 0300 	mov.w	r3, #0
 80073fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007400:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007404:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007408:	4692      	mov	sl, r2
 800740a:	469b      	mov	fp, r3
 800740c:	4643      	mov	r3, r8
 800740e:	eb1a 0303 	adds.w	r3, sl, r3
 8007412:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007416:	464b      	mov	r3, r9
 8007418:	eb4b 0303 	adc.w	r3, fp, r3
 800741c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800742c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007430:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007434:	460b      	mov	r3, r1
 8007436:	18db      	adds	r3, r3, r3
 8007438:	643b      	str	r3, [r7, #64]	; 0x40
 800743a:	4613      	mov	r3, r2
 800743c:	eb42 0303 	adc.w	r3, r2, r3
 8007440:	647b      	str	r3, [r7, #68]	; 0x44
 8007442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007446:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800744a:	f7f9 fc05 	bl	8000c58 <__aeabi_uldivmod>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4611      	mov	r1, r2
 8007454:	4b3b      	ldr	r3, [pc, #236]	; (8007544 <UART_SetConfig+0x2d4>)
 8007456:	fba3 2301 	umull	r2, r3, r3, r1
 800745a:	095b      	lsrs	r3, r3, #5
 800745c:	2264      	movs	r2, #100	; 0x64
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	1acb      	subs	r3, r1, r3
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800746a:	4b36      	ldr	r3, [pc, #216]	; (8007544 <UART_SetConfig+0x2d4>)
 800746c:	fba3 2302 	umull	r2, r3, r3, r2
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007478:	441c      	add	r4, r3
 800747a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800747e:	2200      	movs	r2, #0
 8007480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007484:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007488:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800748c:	4642      	mov	r2, r8
 800748e:	464b      	mov	r3, r9
 8007490:	1891      	adds	r1, r2, r2
 8007492:	63b9      	str	r1, [r7, #56]	; 0x38
 8007494:	415b      	adcs	r3, r3
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007498:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800749c:	4641      	mov	r1, r8
 800749e:	1851      	adds	r1, r2, r1
 80074a0:	6339      	str	r1, [r7, #48]	; 0x30
 80074a2:	4649      	mov	r1, r9
 80074a4:	414b      	adcs	r3, r1
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
 80074a8:	f04f 0200 	mov.w	r2, #0
 80074ac:	f04f 0300 	mov.w	r3, #0
 80074b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074b4:	4659      	mov	r1, fp
 80074b6:	00cb      	lsls	r3, r1, #3
 80074b8:	4651      	mov	r1, sl
 80074ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074be:	4651      	mov	r1, sl
 80074c0:	00ca      	lsls	r2, r1, #3
 80074c2:	4610      	mov	r0, r2
 80074c4:	4619      	mov	r1, r3
 80074c6:	4603      	mov	r3, r0
 80074c8:	4642      	mov	r2, r8
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074d0:	464b      	mov	r3, r9
 80074d2:	460a      	mov	r2, r1
 80074d4:	eb42 0303 	adc.w	r3, r2, r3
 80074d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074f0:	460b      	mov	r3, r1
 80074f2:	18db      	adds	r3, r3, r3
 80074f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f6:	4613      	mov	r3, r2
 80074f8:	eb42 0303 	adc.w	r3, r2, r3
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007502:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007506:	f7f9 fba7 	bl	8000c58 <__aeabi_uldivmod>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4b0d      	ldr	r3, [pc, #52]	; (8007544 <UART_SetConfig+0x2d4>)
 8007510:	fba3 1302 	umull	r1, r3, r3, r2
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	2164      	movs	r1, #100	; 0x64
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	00db      	lsls	r3, r3, #3
 8007520:	3332      	adds	r3, #50	; 0x32
 8007522:	4a08      	ldr	r2, [pc, #32]	; (8007544 <UART_SetConfig+0x2d4>)
 8007524:	fba2 2303 	umull	r2, r3, r2, r3
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	f003 0207 	and.w	r2, r3, #7
 800752e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4422      	add	r2, r4
 8007536:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007538:	e105      	b.n	8007746 <UART_SetConfig+0x4d6>
 800753a:	bf00      	nop
 800753c:	40011000 	.word	0x40011000
 8007540:	40011400 	.word	0x40011400
 8007544:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800754c:	2200      	movs	r2, #0
 800754e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007552:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007556:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800755a:	4642      	mov	r2, r8
 800755c:	464b      	mov	r3, r9
 800755e:	1891      	adds	r1, r2, r2
 8007560:	6239      	str	r1, [r7, #32]
 8007562:	415b      	adcs	r3, r3
 8007564:	627b      	str	r3, [r7, #36]	; 0x24
 8007566:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800756a:	4641      	mov	r1, r8
 800756c:	1854      	adds	r4, r2, r1
 800756e:	4649      	mov	r1, r9
 8007570:	eb43 0501 	adc.w	r5, r3, r1
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	00eb      	lsls	r3, r5, #3
 800757e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007582:	00e2      	lsls	r2, r4, #3
 8007584:	4614      	mov	r4, r2
 8007586:	461d      	mov	r5, r3
 8007588:	4643      	mov	r3, r8
 800758a:	18e3      	adds	r3, r4, r3
 800758c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007590:	464b      	mov	r3, r9
 8007592:	eb45 0303 	adc.w	r3, r5, r3
 8007596:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800759a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075b6:	4629      	mov	r1, r5
 80075b8:	008b      	lsls	r3, r1, #2
 80075ba:	4621      	mov	r1, r4
 80075bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c0:	4621      	mov	r1, r4
 80075c2:	008a      	lsls	r2, r1, #2
 80075c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075c8:	f7f9 fb46 	bl	8000c58 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4b60      	ldr	r3, [pc, #384]	; (8007754 <UART_SetConfig+0x4e4>)
 80075d2:	fba3 2302 	umull	r2, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	011c      	lsls	r4, r3, #4
 80075da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075de:	2200      	movs	r2, #0
 80075e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	1891      	adds	r1, r2, r2
 80075f2:	61b9      	str	r1, [r7, #24]
 80075f4:	415b      	adcs	r3, r3
 80075f6:	61fb      	str	r3, [r7, #28]
 80075f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075fc:	4641      	mov	r1, r8
 80075fe:	1851      	adds	r1, r2, r1
 8007600:	6139      	str	r1, [r7, #16]
 8007602:	4649      	mov	r1, r9
 8007604:	414b      	adcs	r3, r1
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	f04f 0200 	mov.w	r2, #0
 800760c:	f04f 0300 	mov.w	r3, #0
 8007610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007614:	4659      	mov	r1, fp
 8007616:	00cb      	lsls	r3, r1, #3
 8007618:	4651      	mov	r1, sl
 800761a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800761e:	4651      	mov	r1, sl
 8007620:	00ca      	lsls	r2, r1, #3
 8007622:	4610      	mov	r0, r2
 8007624:	4619      	mov	r1, r3
 8007626:	4603      	mov	r3, r0
 8007628:	4642      	mov	r2, r8
 800762a:	189b      	adds	r3, r3, r2
 800762c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007630:	464b      	mov	r3, r9
 8007632:	460a      	mov	r2, r1
 8007634:	eb42 0303 	adc.w	r3, r2, r3
 8007638:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	67bb      	str	r3, [r7, #120]	; 0x78
 8007646:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007654:	4649      	mov	r1, r9
 8007656:	008b      	lsls	r3, r1, #2
 8007658:	4641      	mov	r1, r8
 800765a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765e:	4641      	mov	r1, r8
 8007660:	008a      	lsls	r2, r1, #2
 8007662:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007666:	f7f9 faf7 	bl	8000c58 <__aeabi_uldivmod>
 800766a:	4602      	mov	r2, r0
 800766c:	460b      	mov	r3, r1
 800766e:	4b39      	ldr	r3, [pc, #228]	; (8007754 <UART_SetConfig+0x4e4>)
 8007670:	fba3 1302 	umull	r1, r3, r3, r2
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	2164      	movs	r1, #100	; 0x64
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	3332      	adds	r3, #50	; 0x32
 8007682:	4a34      	ldr	r2, [pc, #208]	; (8007754 <UART_SetConfig+0x4e4>)
 8007684:	fba2 2303 	umull	r2, r3, r2, r3
 8007688:	095b      	lsrs	r3, r3, #5
 800768a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800768e:	441c      	add	r4, r3
 8007690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007694:	2200      	movs	r2, #0
 8007696:	673b      	str	r3, [r7, #112]	; 0x70
 8007698:	677a      	str	r2, [r7, #116]	; 0x74
 800769a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800769e:	4642      	mov	r2, r8
 80076a0:	464b      	mov	r3, r9
 80076a2:	1891      	adds	r1, r2, r2
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	415b      	adcs	r3, r3
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ae:	4641      	mov	r1, r8
 80076b0:	1851      	adds	r1, r2, r1
 80076b2:	6039      	str	r1, [r7, #0]
 80076b4:	4649      	mov	r1, r9
 80076b6:	414b      	adcs	r3, r1
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	f04f 0300 	mov.w	r3, #0
 80076c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076c6:	4659      	mov	r1, fp
 80076c8:	00cb      	lsls	r3, r1, #3
 80076ca:	4651      	mov	r1, sl
 80076cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076d0:	4651      	mov	r1, sl
 80076d2:	00ca      	lsls	r2, r1, #3
 80076d4:	4610      	mov	r0, r2
 80076d6:	4619      	mov	r1, r3
 80076d8:	4603      	mov	r3, r0
 80076da:	4642      	mov	r2, r8
 80076dc:	189b      	adds	r3, r3, r2
 80076de:	66bb      	str	r3, [r7, #104]	; 0x68
 80076e0:	464b      	mov	r3, r9
 80076e2:	460a      	mov	r2, r1
 80076e4:	eb42 0303 	adc.w	r3, r2, r3
 80076e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	663b      	str	r3, [r7, #96]	; 0x60
 80076f4:	667a      	str	r2, [r7, #100]	; 0x64
 80076f6:	f04f 0200 	mov.w	r2, #0
 80076fa:	f04f 0300 	mov.w	r3, #0
 80076fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007702:	4649      	mov	r1, r9
 8007704:	008b      	lsls	r3, r1, #2
 8007706:	4641      	mov	r1, r8
 8007708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800770c:	4641      	mov	r1, r8
 800770e:	008a      	lsls	r2, r1, #2
 8007710:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007714:	f7f9 faa0 	bl	8000c58 <__aeabi_uldivmod>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <UART_SetConfig+0x4e4>)
 800771e:	fba3 1302 	umull	r1, r3, r3, r2
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2164      	movs	r1, #100	; 0x64
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	011b      	lsls	r3, r3, #4
 800772e:	3332      	adds	r3, #50	; 0x32
 8007730:	4a08      	ldr	r2, [pc, #32]	; (8007754 <UART_SetConfig+0x4e4>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	095b      	lsrs	r3, r3, #5
 8007738:	f003 020f 	and.w	r2, r3, #15
 800773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4422      	add	r2, r4
 8007744:	609a      	str	r2, [r3, #8]
}
 8007746:	bf00      	nop
 8007748:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800774c:	46bd      	mov	sp, r7
 800774e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007752:	bf00      	nop
 8007754:	51eb851f 	.word	0x51eb851f

08007758 <__errno>:
 8007758:	4b01      	ldr	r3, [pc, #4]	; (8007760 <__errno+0x8>)
 800775a:	6818      	ldr	r0, [r3, #0]
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	20000014 	.word	0x20000014

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4d0d      	ldr	r5, [pc, #52]	; (800779c <__libc_init_array+0x38>)
 8007768:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776a:	1b64      	subs	r4, r4, r5
 800776c:	10a4      	asrs	r4, r4, #2
 800776e:	2600      	movs	r6, #0
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	4d0b      	ldr	r5, [pc, #44]	; (80077a4 <__libc_init_array+0x40>)
 8007776:	4c0c      	ldr	r4, [pc, #48]	; (80077a8 <__libc_init_array+0x44>)
 8007778:	f003 faae 	bl	800acd8 <_init>
 800777c:	1b64      	subs	r4, r4, r5
 800777e:	10a4      	asrs	r4, r4, #2
 8007780:	2600      	movs	r6, #0
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	0800b254 	.word	0x0800b254
 80077a0:	0800b254 	.word	0x0800b254
 80077a4:	0800b254 	.word	0x0800b254
 80077a8:	0800b258 	.word	0x0800b258

080077ac <memset>:
 80077ac:	4402      	add	r2, r0
 80077ae:	4603      	mov	r3, r0
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d100      	bne.n	80077b6 <memset+0xa>
 80077b4:	4770      	bx	lr
 80077b6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ba:	e7f9      	b.n	80077b0 <memset+0x4>

080077bc <__cvt>:
 80077bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c0:	ec55 4b10 	vmov	r4, r5, d0
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	460e      	mov	r6, r1
 80077c8:	4619      	mov	r1, r3
 80077ca:	462b      	mov	r3, r5
 80077cc:	bfbb      	ittet	lt
 80077ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80077d2:	461d      	movlt	r5, r3
 80077d4:	2300      	movge	r3, #0
 80077d6:	232d      	movlt	r3, #45	; 0x2d
 80077d8:	700b      	strb	r3, [r1, #0]
 80077da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80077e0:	4691      	mov	r9, r2
 80077e2:	f023 0820 	bic.w	r8, r3, #32
 80077e6:	bfbc      	itt	lt
 80077e8:	4622      	movlt	r2, r4
 80077ea:	4614      	movlt	r4, r2
 80077ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077f0:	d005      	beq.n	80077fe <__cvt+0x42>
 80077f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80077f6:	d100      	bne.n	80077fa <__cvt+0x3e>
 80077f8:	3601      	adds	r6, #1
 80077fa:	2102      	movs	r1, #2
 80077fc:	e000      	b.n	8007800 <__cvt+0x44>
 80077fe:	2103      	movs	r1, #3
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9301      	str	r3, [sp, #4]
 8007804:	ab02      	add	r3, sp, #8
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	ec45 4b10 	vmov	d0, r4, r5
 800780c:	4653      	mov	r3, sl
 800780e:	4632      	mov	r2, r6
 8007810:	f000 fd1e 	bl	8008250 <_dtoa_r>
 8007814:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007818:	4607      	mov	r7, r0
 800781a:	d102      	bne.n	8007822 <__cvt+0x66>
 800781c:	f019 0f01 	tst.w	r9, #1
 8007820:	d022      	beq.n	8007868 <__cvt+0xac>
 8007822:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007826:	eb07 0906 	add.w	r9, r7, r6
 800782a:	d110      	bne.n	800784e <__cvt+0x92>
 800782c:	783b      	ldrb	r3, [r7, #0]
 800782e:	2b30      	cmp	r3, #48	; 0x30
 8007830:	d10a      	bne.n	8007848 <__cvt+0x8c>
 8007832:	2200      	movs	r2, #0
 8007834:	2300      	movs	r3, #0
 8007836:	4620      	mov	r0, r4
 8007838:	4629      	mov	r1, r5
 800783a:	f7f9 f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800783e:	b918      	cbnz	r0, 8007848 <__cvt+0x8c>
 8007840:	f1c6 0601 	rsb	r6, r6, #1
 8007844:	f8ca 6000 	str.w	r6, [sl]
 8007848:	f8da 3000 	ldr.w	r3, [sl]
 800784c:	4499      	add	r9, r3
 800784e:	2200      	movs	r2, #0
 8007850:	2300      	movs	r3, #0
 8007852:	4620      	mov	r0, r4
 8007854:	4629      	mov	r1, r5
 8007856:	f7f9 f93f 	bl	8000ad8 <__aeabi_dcmpeq>
 800785a:	b108      	cbz	r0, 8007860 <__cvt+0xa4>
 800785c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007860:	2230      	movs	r2, #48	; 0x30
 8007862:	9b03      	ldr	r3, [sp, #12]
 8007864:	454b      	cmp	r3, r9
 8007866:	d307      	bcc.n	8007878 <__cvt+0xbc>
 8007868:	9b03      	ldr	r3, [sp, #12]
 800786a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800786c:	1bdb      	subs	r3, r3, r7
 800786e:	4638      	mov	r0, r7
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	b004      	add	sp, #16
 8007874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007878:	1c59      	adds	r1, r3, #1
 800787a:	9103      	str	r1, [sp, #12]
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e7f0      	b.n	8007862 <__cvt+0xa6>

08007880 <__exponent>:
 8007880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007882:	4603      	mov	r3, r0
 8007884:	2900      	cmp	r1, #0
 8007886:	bfb8      	it	lt
 8007888:	4249      	neglt	r1, r1
 800788a:	f803 2b02 	strb.w	r2, [r3], #2
 800788e:	bfb4      	ite	lt
 8007890:	222d      	movlt	r2, #45	; 0x2d
 8007892:	222b      	movge	r2, #43	; 0x2b
 8007894:	2909      	cmp	r1, #9
 8007896:	7042      	strb	r2, [r0, #1]
 8007898:	dd2a      	ble.n	80078f0 <__exponent+0x70>
 800789a:	f10d 0407 	add.w	r4, sp, #7
 800789e:	46a4      	mov	ip, r4
 80078a0:	270a      	movs	r7, #10
 80078a2:	46a6      	mov	lr, r4
 80078a4:	460a      	mov	r2, r1
 80078a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80078aa:	fb07 1516 	mls	r5, r7, r6, r1
 80078ae:	3530      	adds	r5, #48	; 0x30
 80078b0:	2a63      	cmp	r2, #99	; 0x63
 80078b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80078b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80078ba:	4631      	mov	r1, r6
 80078bc:	dcf1      	bgt.n	80078a2 <__exponent+0x22>
 80078be:	3130      	adds	r1, #48	; 0x30
 80078c0:	f1ae 0502 	sub.w	r5, lr, #2
 80078c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80078c8:	1c44      	adds	r4, r0, #1
 80078ca:	4629      	mov	r1, r5
 80078cc:	4561      	cmp	r1, ip
 80078ce:	d30a      	bcc.n	80078e6 <__exponent+0x66>
 80078d0:	f10d 0209 	add.w	r2, sp, #9
 80078d4:	eba2 020e 	sub.w	r2, r2, lr
 80078d8:	4565      	cmp	r5, ip
 80078da:	bf88      	it	hi
 80078dc:	2200      	movhi	r2, #0
 80078de:	4413      	add	r3, r2
 80078e0:	1a18      	subs	r0, r3, r0
 80078e2:	b003      	add	sp, #12
 80078e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80078ee:	e7ed      	b.n	80078cc <__exponent+0x4c>
 80078f0:	2330      	movs	r3, #48	; 0x30
 80078f2:	3130      	adds	r1, #48	; 0x30
 80078f4:	7083      	strb	r3, [r0, #2]
 80078f6:	70c1      	strb	r1, [r0, #3]
 80078f8:	1d03      	adds	r3, r0, #4
 80078fa:	e7f1      	b.n	80078e0 <__exponent+0x60>

080078fc <_printf_float>:
 80078fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007900:	ed2d 8b02 	vpush	{d8}
 8007904:	b08d      	sub	sp, #52	; 0x34
 8007906:	460c      	mov	r4, r1
 8007908:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800790c:	4616      	mov	r6, r2
 800790e:	461f      	mov	r7, r3
 8007910:	4605      	mov	r5, r0
 8007912:	f001 fa8b 	bl	8008e2c <_localeconv_r>
 8007916:	f8d0 a000 	ldr.w	sl, [r0]
 800791a:	4650      	mov	r0, sl
 800791c:	f7f8 fc60 	bl	80001e0 <strlen>
 8007920:	2300      	movs	r3, #0
 8007922:	930a      	str	r3, [sp, #40]	; 0x28
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	f8d8 3000 	ldr.w	r3, [r8]
 800792c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007930:	3307      	adds	r3, #7
 8007932:	f023 0307 	bic.w	r3, r3, #7
 8007936:	f103 0208 	add.w	r2, r3, #8
 800793a:	f8c8 2000 	str.w	r2, [r8]
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007946:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800794a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800794e:	9307      	str	r3, [sp, #28]
 8007950:	f8cd 8018 	str.w	r8, [sp, #24]
 8007954:	ee08 0a10 	vmov	s16, r0
 8007958:	4b9f      	ldr	r3, [pc, #636]	; (8007bd8 <_printf_float+0x2dc>)
 800795a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800795e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007962:	f7f9 f8eb 	bl	8000b3c <__aeabi_dcmpun>
 8007966:	bb88      	cbnz	r0, 80079cc <_printf_float+0xd0>
 8007968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800796c:	4b9a      	ldr	r3, [pc, #616]	; (8007bd8 <_printf_float+0x2dc>)
 800796e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007972:	f7f9 f8c5 	bl	8000b00 <__aeabi_dcmple>
 8007976:	bb48      	cbnz	r0, 80079cc <_printf_float+0xd0>
 8007978:	2200      	movs	r2, #0
 800797a:	2300      	movs	r3, #0
 800797c:	4640      	mov	r0, r8
 800797e:	4649      	mov	r1, r9
 8007980:	f7f9 f8b4 	bl	8000aec <__aeabi_dcmplt>
 8007984:	b110      	cbz	r0, 800798c <_printf_float+0x90>
 8007986:	232d      	movs	r3, #45	; 0x2d
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800798c:	4b93      	ldr	r3, [pc, #588]	; (8007bdc <_printf_float+0x2e0>)
 800798e:	4894      	ldr	r0, [pc, #592]	; (8007be0 <_printf_float+0x2e4>)
 8007990:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007994:	bf94      	ite	ls
 8007996:	4698      	movls	r8, r3
 8007998:	4680      	movhi	r8, r0
 800799a:	2303      	movs	r3, #3
 800799c:	6123      	str	r3, [r4, #16]
 800799e:	9b05      	ldr	r3, [sp, #20]
 80079a0:	f023 0204 	bic.w	r2, r3, #4
 80079a4:	6022      	str	r2, [r4, #0]
 80079a6:	f04f 0900 	mov.w	r9, #0
 80079aa:	9700      	str	r7, [sp, #0]
 80079ac:	4633      	mov	r3, r6
 80079ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80079b0:	4621      	mov	r1, r4
 80079b2:	4628      	mov	r0, r5
 80079b4:	f000 f9d8 	bl	8007d68 <_printf_common>
 80079b8:	3001      	adds	r0, #1
 80079ba:	f040 8090 	bne.w	8007ade <_printf_float+0x1e2>
 80079be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c2:	b00d      	add	sp, #52	; 0x34
 80079c4:	ecbd 8b02 	vpop	{d8}
 80079c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079cc:	4642      	mov	r2, r8
 80079ce:	464b      	mov	r3, r9
 80079d0:	4640      	mov	r0, r8
 80079d2:	4649      	mov	r1, r9
 80079d4:	f7f9 f8b2 	bl	8000b3c <__aeabi_dcmpun>
 80079d8:	b140      	cbz	r0, 80079ec <_printf_float+0xf0>
 80079da:	464b      	mov	r3, r9
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bfbc      	itt	lt
 80079e0:	232d      	movlt	r3, #45	; 0x2d
 80079e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80079e6:	487f      	ldr	r0, [pc, #508]	; (8007be4 <_printf_float+0x2e8>)
 80079e8:	4b7f      	ldr	r3, [pc, #508]	; (8007be8 <_printf_float+0x2ec>)
 80079ea:	e7d1      	b.n	8007990 <_printf_float+0x94>
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80079f2:	9206      	str	r2, [sp, #24]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	d13f      	bne.n	8007a78 <_printf_float+0x17c>
 80079f8:	2306      	movs	r3, #6
 80079fa:	6063      	str	r3, [r4, #4]
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	6861      	ldr	r1, [r4, #4]
 8007a00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a04:	2300      	movs	r3, #0
 8007a06:	9303      	str	r3, [sp, #12]
 8007a08:	ab0a      	add	r3, sp, #40	; 0x28
 8007a0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a0e:	ab09      	add	r3, sp, #36	; 0x24
 8007a10:	ec49 8b10 	vmov	d0, r8, r9
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f7ff fecd 	bl	80077bc <__cvt>
 8007a22:	9b06      	ldr	r3, [sp, #24]
 8007a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a26:	2b47      	cmp	r3, #71	; 0x47
 8007a28:	4680      	mov	r8, r0
 8007a2a:	d108      	bne.n	8007a3e <_printf_float+0x142>
 8007a2c:	1cc8      	adds	r0, r1, #3
 8007a2e:	db02      	blt.n	8007a36 <_printf_float+0x13a>
 8007a30:	6863      	ldr	r3, [r4, #4]
 8007a32:	4299      	cmp	r1, r3
 8007a34:	dd41      	ble.n	8007aba <_printf_float+0x1be>
 8007a36:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a3a:	fa5f fb8b 	uxtb.w	fp, fp
 8007a3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a42:	d820      	bhi.n	8007a86 <_printf_float+0x18a>
 8007a44:	3901      	subs	r1, #1
 8007a46:	465a      	mov	r2, fp
 8007a48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007a4c:	9109      	str	r1, [sp, #36]	; 0x24
 8007a4e:	f7ff ff17 	bl	8007880 <__exponent>
 8007a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a54:	1813      	adds	r3, r2, r0
 8007a56:	2a01      	cmp	r2, #1
 8007a58:	4681      	mov	r9, r0
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	dc02      	bgt.n	8007a64 <_printf_float+0x168>
 8007a5e:	6822      	ldr	r2, [r4, #0]
 8007a60:	07d2      	lsls	r2, r2, #31
 8007a62:	d501      	bpl.n	8007a68 <_printf_float+0x16c>
 8007a64:	3301      	adds	r3, #1
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d09c      	beq.n	80079aa <_printf_float+0xae>
 8007a70:	232d      	movs	r3, #45	; 0x2d
 8007a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a76:	e798      	b.n	80079aa <_printf_float+0xae>
 8007a78:	9a06      	ldr	r2, [sp, #24]
 8007a7a:	2a47      	cmp	r2, #71	; 0x47
 8007a7c:	d1be      	bne.n	80079fc <_printf_float+0x100>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1bc      	bne.n	80079fc <_printf_float+0x100>
 8007a82:	2301      	movs	r3, #1
 8007a84:	e7b9      	b.n	80079fa <_printf_float+0xfe>
 8007a86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a8a:	d118      	bne.n	8007abe <_printf_float+0x1c2>
 8007a8c:	2900      	cmp	r1, #0
 8007a8e:	6863      	ldr	r3, [r4, #4]
 8007a90:	dd0b      	ble.n	8007aaa <_printf_float+0x1ae>
 8007a92:	6121      	str	r1, [r4, #16]
 8007a94:	b913      	cbnz	r3, 8007a9c <_printf_float+0x1a0>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	07d0      	lsls	r0, r2, #31
 8007a9a:	d502      	bpl.n	8007aa2 <_printf_float+0x1a6>
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	440b      	add	r3, r1
 8007aa0:	6123      	str	r3, [r4, #16]
 8007aa2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007aa4:	f04f 0900 	mov.w	r9, #0
 8007aa8:	e7de      	b.n	8007a68 <_printf_float+0x16c>
 8007aaa:	b913      	cbnz	r3, 8007ab2 <_printf_float+0x1b6>
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	07d2      	lsls	r2, r2, #31
 8007ab0:	d501      	bpl.n	8007ab6 <_printf_float+0x1ba>
 8007ab2:	3302      	adds	r3, #2
 8007ab4:	e7f4      	b.n	8007aa0 <_printf_float+0x1a4>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e7f2      	b.n	8007aa0 <_printf_float+0x1a4>
 8007aba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	db05      	blt.n	8007ad0 <_printf_float+0x1d4>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	6121      	str	r1, [r4, #16]
 8007ac8:	07d8      	lsls	r0, r3, #31
 8007aca:	d5ea      	bpl.n	8007aa2 <_printf_float+0x1a6>
 8007acc:	1c4b      	adds	r3, r1, #1
 8007ace:	e7e7      	b.n	8007aa0 <_printf_float+0x1a4>
 8007ad0:	2900      	cmp	r1, #0
 8007ad2:	bfd4      	ite	le
 8007ad4:	f1c1 0202 	rsble	r2, r1, #2
 8007ad8:	2201      	movgt	r2, #1
 8007ada:	4413      	add	r3, r2
 8007adc:	e7e0      	b.n	8007aa0 <_printf_float+0x1a4>
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	055a      	lsls	r2, r3, #21
 8007ae2:	d407      	bmi.n	8007af4 <_printf_float+0x1f8>
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	d12c      	bne.n	8007b4c <_printf_float+0x250>
 8007af2:	e764      	b.n	80079be <_printf_float+0xc2>
 8007af4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007af8:	f240 80e0 	bls.w	8007cbc <_printf_float+0x3c0>
 8007afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b00:	2200      	movs	r2, #0
 8007b02:	2300      	movs	r3, #0
 8007b04:	f7f8 ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d034      	beq.n	8007b76 <_printf_float+0x27a>
 8007b0c:	4a37      	ldr	r2, [pc, #220]	; (8007bec <_printf_float+0x2f0>)
 8007b0e:	2301      	movs	r3, #1
 8007b10:	4631      	mov	r1, r6
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b8      	blx	r7
 8007b16:	3001      	adds	r0, #1
 8007b18:	f43f af51 	beq.w	80079be <_printf_float+0xc2>
 8007b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b20:	429a      	cmp	r2, r3
 8007b22:	db02      	blt.n	8007b2a <_printf_float+0x22e>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	07d8      	lsls	r0, r3, #31
 8007b28:	d510      	bpl.n	8007b4c <_printf_float+0x250>
 8007b2a:	ee18 3a10 	vmov	r3, s16
 8007b2e:	4652      	mov	r2, sl
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f af41 	beq.w	80079be <_printf_float+0xc2>
 8007b3c:	f04f 0800 	mov.w	r8, #0
 8007b40:	f104 091a 	add.w	r9, r4, #26
 8007b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b46:	3b01      	subs	r3, #1
 8007b48:	4543      	cmp	r3, r8
 8007b4a:	dc09      	bgt.n	8007b60 <_printf_float+0x264>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	079b      	lsls	r3, r3, #30
 8007b50:	f100 8105 	bmi.w	8007d5e <_printf_float+0x462>
 8007b54:	68e0      	ldr	r0, [r4, #12]
 8007b56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b58:	4298      	cmp	r0, r3
 8007b5a:	bfb8      	it	lt
 8007b5c:	4618      	movlt	r0, r3
 8007b5e:	e730      	b.n	80079c2 <_printf_float+0xc6>
 8007b60:	2301      	movs	r3, #1
 8007b62:	464a      	mov	r2, r9
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af27 	beq.w	80079be <_printf_float+0xc2>
 8007b70:	f108 0801 	add.w	r8, r8, #1
 8007b74:	e7e6      	b.n	8007b44 <_printf_float+0x248>
 8007b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	dc39      	bgt.n	8007bf0 <_printf_float+0x2f4>
 8007b7c:	4a1b      	ldr	r2, [pc, #108]	; (8007bec <_printf_float+0x2f0>)
 8007b7e:	2301      	movs	r3, #1
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	47b8      	blx	r7
 8007b86:	3001      	adds	r0, #1
 8007b88:	f43f af19 	beq.w	80079be <_printf_float+0xc2>
 8007b8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b90:	4313      	orrs	r3, r2
 8007b92:	d102      	bne.n	8007b9a <_printf_float+0x29e>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	07d9      	lsls	r1, r3, #31
 8007b98:	d5d8      	bpl.n	8007b4c <_printf_float+0x250>
 8007b9a:	ee18 3a10 	vmov	r3, s16
 8007b9e:	4652      	mov	r2, sl
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f af09 	beq.w	80079be <_printf_float+0xc2>
 8007bac:	f04f 0900 	mov.w	r9, #0
 8007bb0:	f104 0a1a 	add.w	sl, r4, #26
 8007bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb6:	425b      	negs	r3, r3
 8007bb8:	454b      	cmp	r3, r9
 8007bba:	dc01      	bgt.n	8007bc0 <_printf_float+0x2c4>
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbe:	e792      	b.n	8007ae6 <_printf_float+0x1ea>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	4652      	mov	r2, sl
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	47b8      	blx	r7
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f43f aef7 	beq.w	80079be <_printf_float+0xc2>
 8007bd0:	f109 0901 	add.w	r9, r9, #1
 8007bd4:	e7ee      	b.n	8007bb4 <_printf_float+0x2b8>
 8007bd6:	bf00      	nop
 8007bd8:	7fefffff 	.word	0x7fefffff
 8007bdc:	0800ae3c 	.word	0x0800ae3c
 8007be0:	0800ae40 	.word	0x0800ae40
 8007be4:	0800ae48 	.word	0x0800ae48
 8007be8:	0800ae44 	.word	0x0800ae44
 8007bec:	0800ae4c 	.word	0x0800ae4c
 8007bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	bfa8      	it	ge
 8007bf8:	461a      	movge	r2, r3
 8007bfa:	2a00      	cmp	r2, #0
 8007bfc:	4691      	mov	r9, r2
 8007bfe:	dc37      	bgt.n	8007c70 <_printf_float+0x374>
 8007c00:	f04f 0b00 	mov.w	fp, #0
 8007c04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c08:	f104 021a 	add.w	r2, r4, #26
 8007c0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c0e:	9305      	str	r3, [sp, #20]
 8007c10:	eba3 0309 	sub.w	r3, r3, r9
 8007c14:	455b      	cmp	r3, fp
 8007c16:	dc33      	bgt.n	8007c80 <_printf_float+0x384>
 8007c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	db3b      	blt.n	8007c98 <_printf_float+0x39c>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	07da      	lsls	r2, r3, #31
 8007c24:	d438      	bmi.n	8007c98 <_printf_float+0x39c>
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	9a05      	ldr	r2, [sp, #20]
 8007c2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c2c:	1a9a      	subs	r2, r3, r2
 8007c2e:	eba3 0901 	sub.w	r9, r3, r1
 8007c32:	4591      	cmp	r9, r2
 8007c34:	bfa8      	it	ge
 8007c36:	4691      	movge	r9, r2
 8007c38:	f1b9 0f00 	cmp.w	r9, #0
 8007c3c:	dc35      	bgt.n	8007caa <_printf_float+0x3ae>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c46:	f104 0a1a 	add.w	sl, r4, #26
 8007c4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c4e:	1a9b      	subs	r3, r3, r2
 8007c50:	eba3 0309 	sub.w	r3, r3, r9
 8007c54:	4543      	cmp	r3, r8
 8007c56:	f77f af79 	ble.w	8007b4c <_printf_float+0x250>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4652      	mov	r2, sl
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	f43f aeaa 	beq.w	80079be <_printf_float+0xc2>
 8007c6a:	f108 0801 	add.w	r8, r8, #1
 8007c6e:	e7ec      	b.n	8007c4a <_printf_float+0x34e>
 8007c70:	4613      	mov	r3, r2
 8007c72:	4631      	mov	r1, r6
 8007c74:	4642      	mov	r2, r8
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d1c0      	bne.n	8007c00 <_printf_float+0x304>
 8007c7e:	e69e      	b.n	80079be <_printf_float+0xc2>
 8007c80:	2301      	movs	r3, #1
 8007c82:	4631      	mov	r1, r6
 8007c84:	4628      	mov	r0, r5
 8007c86:	9205      	str	r2, [sp, #20]
 8007c88:	47b8      	blx	r7
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f43f ae97 	beq.w	80079be <_printf_float+0xc2>
 8007c90:	9a05      	ldr	r2, [sp, #20]
 8007c92:	f10b 0b01 	add.w	fp, fp, #1
 8007c96:	e7b9      	b.n	8007c0c <_printf_float+0x310>
 8007c98:	ee18 3a10 	vmov	r3, s16
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d1be      	bne.n	8007c26 <_printf_float+0x32a>
 8007ca8:	e689      	b.n	80079be <_printf_float+0xc2>
 8007caa:	9a05      	ldr	r2, [sp, #20]
 8007cac:	464b      	mov	r3, r9
 8007cae:	4442      	add	r2, r8
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	d1c1      	bne.n	8007c3e <_printf_float+0x342>
 8007cba:	e680      	b.n	80079be <_printf_float+0xc2>
 8007cbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cbe:	2a01      	cmp	r2, #1
 8007cc0:	dc01      	bgt.n	8007cc6 <_printf_float+0x3ca>
 8007cc2:	07db      	lsls	r3, r3, #31
 8007cc4:	d538      	bpl.n	8007d38 <_printf_float+0x43c>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4642      	mov	r2, r8
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	f43f ae74 	beq.w	80079be <_printf_float+0xc2>
 8007cd6:	ee18 3a10 	vmov	r3, s16
 8007cda:	4652      	mov	r2, sl
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f43f ae6b 	beq.w	80079be <_printf_float+0xc2>
 8007ce8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cec:	2200      	movs	r2, #0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f7f8 fef2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cf4:	b9d8      	cbnz	r0, 8007d2e <_printf_float+0x432>
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	f108 0201 	add.w	r2, r8, #1
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	d10e      	bne.n	8007d26 <_printf_float+0x42a>
 8007d08:	e659      	b.n	80079be <_printf_float+0xc2>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	f43f ae52 	beq.w	80079be <_printf_float+0xc2>
 8007d1a:	f108 0801 	add.w	r8, r8, #1
 8007d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d20:	3b01      	subs	r3, #1
 8007d22:	4543      	cmp	r3, r8
 8007d24:	dcf1      	bgt.n	8007d0a <_printf_float+0x40e>
 8007d26:	464b      	mov	r3, r9
 8007d28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d2c:	e6dc      	b.n	8007ae8 <_printf_float+0x1ec>
 8007d2e:	f04f 0800 	mov.w	r8, #0
 8007d32:	f104 0a1a 	add.w	sl, r4, #26
 8007d36:	e7f2      	b.n	8007d1e <_printf_float+0x422>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4642      	mov	r2, r8
 8007d3c:	e7df      	b.n	8007cfe <_printf_float+0x402>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	464a      	mov	r2, r9
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f43f ae38 	beq.w	80079be <_printf_float+0xc2>
 8007d4e:	f108 0801 	add.w	r8, r8, #1
 8007d52:	68e3      	ldr	r3, [r4, #12]
 8007d54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d56:	1a5b      	subs	r3, r3, r1
 8007d58:	4543      	cmp	r3, r8
 8007d5a:	dcf0      	bgt.n	8007d3e <_printf_float+0x442>
 8007d5c:	e6fa      	b.n	8007b54 <_printf_float+0x258>
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	f104 0919 	add.w	r9, r4, #25
 8007d66:	e7f4      	b.n	8007d52 <_printf_float+0x456>

08007d68 <_printf_common>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	4699      	mov	r9, r3
 8007d70:	688a      	ldr	r2, [r1, #8]
 8007d72:	690b      	ldr	r3, [r1, #16]
 8007d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bfb8      	it	lt
 8007d7c:	4613      	movlt	r3, r2
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d84:	4607      	mov	r7, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	b10a      	cbz	r2, 8007d8e <_printf_common+0x26>
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	6033      	str	r3, [r6, #0]
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	0699      	lsls	r1, r3, #26
 8007d92:	bf42      	ittt	mi
 8007d94:	6833      	ldrmi	r3, [r6, #0]
 8007d96:	3302      	addmi	r3, #2
 8007d98:	6033      	strmi	r3, [r6, #0]
 8007d9a:	6825      	ldr	r5, [r4, #0]
 8007d9c:	f015 0506 	ands.w	r5, r5, #6
 8007da0:	d106      	bne.n	8007db0 <_printf_common+0x48>
 8007da2:	f104 0a19 	add.w	sl, r4, #25
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	6832      	ldr	r2, [r6, #0]
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	dc26      	bgt.n	8007dfe <_printf_common+0x96>
 8007db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007db4:	1e13      	subs	r3, r2, #0
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	bf18      	it	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	0692      	lsls	r2, r2, #26
 8007dbe:	d42b      	bmi.n	8007e18 <_printf_common+0xb0>
 8007dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	47c0      	blx	r8
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d01e      	beq.n	8007e0c <_printf_common+0xa4>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	68e5      	ldr	r5, [r4, #12]
 8007dd2:	6832      	ldr	r2, [r6, #0]
 8007dd4:	f003 0306 	and.w	r3, r3, #6
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	bf08      	it	eq
 8007ddc:	1aad      	subeq	r5, r5, r2
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	bf0c      	ite	eq
 8007de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de8:	2500      	movne	r5, #0
 8007dea:	4293      	cmp	r3, r2
 8007dec:	bfc4      	itt	gt
 8007dee:	1a9b      	subgt	r3, r3, r2
 8007df0:	18ed      	addgt	r5, r5, r3
 8007df2:	2600      	movs	r6, #0
 8007df4:	341a      	adds	r4, #26
 8007df6:	42b5      	cmp	r5, r6
 8007df8:	d11a      	bne.n	8007e30 <_printf_common+0xc8>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e008      	b.n	8007e10 <_printf_common+0xa8>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4652      	mov	r2, sl
 8007e02:	4649      	mov	r1, r9
 8007e04:	4638      	mov	r0, r7
 8007e06:	47c0      	blx	r8
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d103      	bne.n	8007e14 <_printf_common+0xac>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	3501      	adds	r5, #1
 8007e16:	e7c6      	b.n	8007da6 <_printf_common+0x3e>
 8007e18:	18e1      	adds	r1, r4, r3
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	2030      	movs	r0, #48	; 0x30
 8007e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e22:	4422      	add	r2, r4
 8007e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	e7c7      	b.n	8007dc0 <_printf_common+0x58>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4622      	mov	r2, r4
 8007e34:	4649      	mov	r1, r9
 8007e36:	4638      	mov	r0, r7
 8007e38:	47c0      	blx	r8
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	d0e6      	beq.n	8007e0c <_printf_common+0xa4>
 8007e3e:	3601      	adds	r6, #1
 8007e40:	e7d9      	b.n	8007df6 <_printf_common+0x8e>
	...

08007e44 <_printf_i>:
 8007e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	7e0f      	ldrb	r7, [r1, #24]
 8007e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e4c:	2f78      	cmp	r7, #120	; 0x78
 8007e4e:	4691      	mov	r9, r2
 8007e50:	4680      	mov	r8, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	469a      	mov	sl, r3
 8007e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e5a:	d807      	bhi.n	8007e6c <_printf_i+0x28>
 8007e5c:	2f62      	cmp	r7, #98	; 0x62
 8007e5e:	d80a      	bhi.n	8007e76 <_printf_i+0x32>
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	f000 80d8 	beq.w	8008016 <_printf_i+0x1d2>
 8007e66:	2f58      	cmp	r7, #88	; 0x58
 8007e68:	f000 80a3 	beq.w	8007fb2 <_printf_i+0x16e>
 8007e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e74:	e03a      	b.n	8007eec <_printf_i+0xa8>
 8007e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e7a:	2b15      	cmp	r3, #21
 8007e7c:	d8f6      	bhi.n	8007e6c <_printf_i+0x28>
 8007e7e:	a101      	add	r1, pc, #4	; (adr r1, 8007e84 <_printf_i+0x40>)
 8007e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007e6d 	.word	0x08007e6d
 8007e90:	08007e6d 	.word	0x08007e6d
 8007e94:	08007e6d 	.word	0x08007e6d
 8007e98:	08007e6d 	.word	0x08007e6d
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007e6d 	.word	0x08007e6d
 8007ea4:	08007e6d 	.word	0x08007e6d
 8007ea8:	08007e6d 	.word	0x08007e6d
 8007eac:	08007e6d 	.word	0x08007e6d
 8007eb0:	08007ffd 	.word	0x08007ffd
 8007eb4:	08007f21 	.word	0x08007f21
 8007eb8:	08007fdf 	.word	0x08007fdf
 8007ebc:	08007e6d 	.word	0x08007e6d
 8007ec0:	08007e6d 	.word	0x08007e6d
 8007ec4:	0800801f 	.word	0x0800801f
 8007ec8:	08007e6d 	.word	0x08007e6d
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007e6d 	.word	0x08007e6d
 8007ed4:	08007e6d 	.word	0x08007e6d
 8007ed8:	08007fe7 	.word	0x08007fe7
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	602a      	str	r2, [r5, #0]
 8007ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0a3      	b.n	8008038 <_printf_i+0x1f4>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	6829      	ldr	r1, [r5, #0]
 8007ef4:	0606      	lsls	r6, r0, #24
 8007ef6:	f101 0304 	add.w	r3, r1, #4
 8007efa:	d50a      	bpl.n	8007f12 <_printf_i+0xce>
 8007efc:	680e      	ldr	r6, [r1, #0]
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	da03      	bge.n	8007f0c <_printf_i+0xc8>
 8007f04:	232d      	movs	r3, #45	; 0x2d
 8007f06:	4276      	negs	r6, r6
 8007f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f0c:	485e      	ldr	r0, [pc, #376]	; (8008088 <_printf_i+0x244>)
 8007f0e:	230a      	movs	r3, #10
 8007f10:	e019      	b.n	8007f46 <_printf_i+0x102>
 8007f12:	680e      	ldr	r6, [r1, #0]
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f1a:	bf18      	it	ne
 8007f1c:	b236      	sxthne	r6, r6
 8007f1e:	e7ef      	b.n	8007f00 <_printf_i+0xbc>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	6029      	str	r1, [r5, #0]
 8007f28:	0601      	lsls	r1, r0, #24
 8007f2a:	d501      	bpl.n	8007f30 <_printf_i+0xec>
 8007f2c:	681e      	ldr	r6, [r3, #0]
 8007f2e:	e002      	b.n	8007f36 <_printf_i+0xf2>
 8007f30:	0646      	lsls	r6, r0, #25
 8007f32:	d5fb      	bpl.n	8007f2c <_printf_i+0xe8>
 8007f34:	881e      	ldrh	r6, [r3, #0]
 8007f36:	4854      	ldr	r0, [pc, #336]	; (8008088 <_printf_i+0x244>)
 8007f38:	2f6f      	cmp	r7, #111	; 0x6f
 8007f3a:	bf0c      	ite	eq
 8007f3c:	2308      	moveq	r3, #8
 8007f3e:	230a      	movne	r3, #10
 8007f40:	2100      	movs	r1, #0
 8007f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f46:	6865      	ldr	r5, [r4, #4]
 8007f48:	60a5      	str	r5, [r4, #8]
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	bfa2      	ittt	ge
 8007f4e:	6821      	ldrge	r1, [r4, #0]
 8007f50:	f021 0104 	bicge.w	r1, r1, #4
 8007f54:	6021      	strge	r1, [r4, #0]
 8007f56:	b90e      	cbnz	r6, 8007f5c <_printf_i+0x118>
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	d04d      	beq.n	8007ff8 <_printf_i+0x1b4>
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f62:	fb03 6711 	mls	r7, r3, r1, r6
 8007f66:	5dc7      	ldrb	r7, [r0, r7]
 8007f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f6c:	4637      	mov	r7, r6
 8007f6e:	42bb      	cmp	r3, r7
 8007f70:	460e      	mov	r6, r1
 8007f72:	d9f4      	bls.n	8007f5e <_printf_i+0x11a>
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d10b      	bne.n	8007f90 <_printf_i+0x14c>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	07de      	lsls	r6, r3, #31
 8007f7c:	d508      	bpl.n	8007f90 <_printf_i+0x14c>
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	6861      	ldr	r1, [r4, #4]
 8007f82:	4299      	cmp	r1, r3
 8007f84:	bfde      	ittt	le
 8007f86:	2330      	movle	r3, #48	; 0x30
 8007f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f90:	1b52      	subs	r2, r2, r5
 8007f92:	6122      	str	r2, [r4, #16]
 8007f94:	f8cd a000 	str.w	sl, [sp]
 8007f98:	464b      	mov	r3, r9
 8007f9a:	aa03      	add	r2, sp, #12
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	f7ff fee2 	bl	8007d68 <_printf_common>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d14c      	bne.n	8008042 <_printf_i+0x1fe>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fac:	b004      	add	sp, #16
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	4835      	ldr	r0, [pc, #212]	; (8008088 <_printf_i+0x244>)
 8007fb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fb8:	6829      	ldr	r1, [r5, #0]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fc0:	6029      	str	r1, [r5, #0]
 8007fc2:	061d      	lsls	r5, r3, #24
 8007fc4:	d514      	bpl.n	8007ff0 <_printf_i+0x1ac>
 8007fc6:	07df      	lsls	r7, r3, #31
 8007fc8:	bf44      	itt	mi
 8007fca:	f043 0320 	orrmi.w	r3, r3, #32
 8007fce:	6023      	strmi	r3, [r4, #0]
 8007fd0:	b91e      	cbnz	r6, 8007fda <_printf_i+0x196>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f023 0320 	bic.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	2310      	movs	r3, #16
 8007fdc:	e7b0      	b.n	8007f40 <_printf_i+0xfc>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	f043 0320 	orr.w	r3, r3, #32
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	2378      	movs	r3, #120	; 0x78
 8007fe8:	4828      	ldr	r0, [pc, #160]	; (800808c <_printf_i+0x248>)
 8007fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fee:	e7e3      	b.n	8007fb8 <_printf_i+0x174>
 8007ff0:	0659      	lsls	r1, r3, #25
 8007ff2:	bf48      	it	mi
 8007ff4:	b2b6      	uxthmi	r6, r6
 8007ff6:	e7e6      	b.n	8007fc6 <_printf_i+0x182>
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	e7bb      	b.n	8007f74 <_printf_i+0x130>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	6826      	ldr	r6, [r4, #0]
 8008000:	6961      	ldr	r1, [r4, #20]
 8008002:	1d18      	adds	r0, r3, #4
 8008004:	6028      	str	r0, [r5, #0]
 8008006:	0635      	lsls	r5, r6, #24
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	d501      	bpl.n	8008010 <_printf_i+0x1cc>
 800800c:	6019      	str	r1, [r3, #0]
 800800e:	e002      	b.n	8008016 <_printf_i+0x1d2>
 8008010:	0670      	lsls	r0, r6, #25
 8008012:	d5fb      	bpl.n	800800c <_printf_i+0x1c8>
 8008014:	8019      	strh	r1, [r3, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	6123      	str	r3, [r4, #16]
 800801a:	4615      	mov	r5, r2
 800801c:	e7ba      	b.n	8007f94 <_printf_i+0x150>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	1d1a      	adds	r2, r3, #4
 8008022:	602a      	str	r2, [r5, #0]
 8008024:	681d      	ldr	r5, [r3, #0]
 8008026:	6862      	ldr	r2, [r4, #4]
 8008028:	2100      	movs	r1, #0
 800802a:	4628      	mov	r0, r5
 800802c:	f7f8 f8e0 	bl	80001f0 <memchr>
 8008030:	b108      	cbz	r0, 8008036 <_printf_i+0x1f2>
 8008032:	1b40      	subs	r0, r0, r5
 8008034:	6060      	str	r0, [r4, #4]
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	6123      	str	r3, [r4, #16]
 800803a:	2300      	movs	r3, #0
 800803c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008040:	e7a8      	b.n	8007f94 <_printf_i+0x150>
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	462a      	mov	r2, r5
 8008046:	4649      	mov	r1, r9
 8008048:	4640      	mov	r0, r8
 800804a:	47d0      	blx	sl
 800804c:	3001      	adds	r0, #1
 800804e:	d0ab      	beq.n	8007fa8 <_printf_i+0x164>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	079b      	lsls	r3, r3, #30
 8008054:	d413      	bmi.n	800807e <_printf_i+0x23a>
 8008056:	68e0      	ldr	r0, [r4, #12]
 8008058:	9b03      	ldr	r3, [sp, #12]
 800805a:	4298      	cmp	r0, r3
 800805c:	bfb8      	it	lt
 800805e:	4618      	movlt	r0, r3
 8008060:	e7a4      	b.n	8007fac <_printf_i+0x168>
 8008062:	2301      	movs	r3, #1
 8008064:	4632      	mov	r2, r6
 8008066:	4649      	mov	r1, r9
 8008068:	4640      	mov	r0, r8
 800806a:	47d0      	blx	sl
 800806c:	3001      	adds	r0, #1
 800806e:	d09b      	beq.n	8007fa8 <_printf_i+0x164>
 8008070:	3501      	adds	r5, #1
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	9903      	ldr	r1, [sp, #12]
 8008076:	1a5b      	subs	r3, r3, r1
 8008078:	42ab      	cmp	r3, r5
 800807a:	dcf2      	bgt.n	8008062 <_printf_i+0x21e>
 800807c:	e7eb      	b.n	8008056 <_printf_i+0x212>
 800807e:	2500      	movs	r5, #0
 8008080:	f104 0619 	add.w	r6, r4, #25
 8008084:	e7f5      	b.n	8008072 <_printf_i+0x22e>
 8008086:	bf00      	nop
 8008088:	0800ae4e 	.word	0x0800ae4e
 800808c:	0800ae5f 	.word	0x0800ae5f

08008090 <sniprintf>:
 8008090:	b40c      	push	{r2, r3}
 8008092:	b530      	push	{r4, r5, lr}
 8008094:	4b17      	ldr	r3, [pc, #92]	; (80080f4 <sniprintf+0x64>)
 8008096:	1e0c      	subs	r4, r1, #0
 8008098:	681d      	ldr	r5, [r3, #0]
 800809a:	b09d      	sub	sp, #116	; 0x74
 800809c:	da08      	bge.n	80080b0 <sniprintf+0x20>
 800809e:	238b      	movs	r3, #139	; 0x8b
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080a6:	b01d      	add	sp, #116	; 0x74
 80080a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080ac:	b002      	add	sp, #8
 80080ae:	4770      	bx	lr
 80080b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080b8:	bf14      	ite	ne
 80080ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80080be:	4623      	moveq	r3, r4
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	9307      	str	r3, [sp, #28]
 80080c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080c8:	9002      	str	r0, [sp, #8]
 80080ca:	9006      	str	r0, [sp, #24]
 80080cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080d2:	ab21      	add	r3, sp, #132	; 0x84
 80080d4:	a902      	add	r1, sp, #8
 80080d6:	4628      	mov	r0, r5
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	f001 fb97 	bl	800980c <_svfiprintf_r>
 80080de:	1c43      	adds	r3, r0, #1
 80080e0:	bfbc      	itt	lt
 80080e2:	238b      	movlt	r3, #139	; 0x8b
 80080e4:	602b      	strlt	r3, [r5, #0]
 80080e6:	2c00      	cmp	r4, #0
 80080e8:	d0dd      	beq.n	80080a6 <sniprintf+0x16>
 80080ea:	9b02      	ldr	r3, [sp, #8]
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e7d9      	b.n	80080a6 <sniprintf+0x16>
 80080f2:	bf00      	nop
 80080f4:	20000014 	.word	0x20000014

080080f8 <siprintf>:
 80080f8:	b40e      	push	{r1, r2, r3}
 80080fa:	b500      	push	{lr}
 80080fc:	b09c      	sub	sp, #112	; 0x70
 80080fe:	ab1d      	add	r3, sp, #116	; 0x74
 8008100:	9002      	str	r0, [sp, #8]
 8008102:	9006      	str	r0, [sp, #24]
 8008104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008108:	4809      	ldr	r0, [pc, #36]	; (8008130 <siprintf+0x38>)
 800810a:	9107      	str	r1, [sp, #28]
 800810c:	9104      	str	r1, [sp, #16]
 800810e:	4909      	ldr	r1, [pc, #36]	; (8008134 <siprintf+0x3c>)
 8008110:	f853 2b04 	ldr.w	r2, [r3], #4
 8008114:	9105      	str	r1, [sp, #20]
 8008116:	6800      	ldr	r0, [r0, #0]
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	a902      	add	r1, sp, #8
 800811c:	f001 fb76 	bl	800980c <_svfiprintf_r>
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
 8008126:	b01c      	add	sp, #112	; 0x70
 8008128:	f85d eb04 	ldr.w	lr, [sp], #4
 800812c:	b003      	add	sp, #12
 800812e:	4770      	bx	lr
 8008130:	20000014 	.word	0x20000014
 8008134:	ffff0208 	.word	0xffff0208

08008138 <quorem>:
 8008138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	6903      	ldr	r3, [r0, #16]
 800813e:	690c      	ldr	r4, [r1, #16]
 8008140:	42a3      	cmp	r3, r4
 8008142:	4607      	mov	r7, r0
 8008144:	f2c0 8081 	blt.w	800824a <quorem+0x112>
 8008148:	3c01      	subs	r4, #1
 800814a:	f101 0814 	add.w	r8, r1, #20
 800814e:	f100 0514 	add.w	r5, r0, #20
 8008152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800815c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008160:	3301      	adds	r3, #1
 8008162:	429a      	cmp	r2, r3
 8008164:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008168:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800816c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008170:	d331      	bcc.n	80081d6 <quorem+0x9e>
 8008172:	f04f 0e00 	mov.w	lr, #0
 8008176:	4640      	mov	r0, r8
 8008178:	46ac      	mov	ip, r5
 800817a:	46f2      	mov	sl, lr
 800817c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008180:	b293      	uxth	r3, r2
 8008182:	fb06 e303 	mla	r3, r6, r3, lr
 8008186:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800818a:	b29b      	uxth	r3, r3
 800818c:	ebaa 0303 	sub.w	r3, sl, r3
 8008190:	f8dc a000 	ldr.w	sl, [ip]
 8008194:	0c12      	lsrs	r2, r2, #16
 8008196:	fa13 f38a 	uxtah	r3, r3, sl
 800819a:	fb06 e202 	mla	r2, r6, r2, lr
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	9b00      	ldr	r3, [sp, #0]
 80081a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081a6:	b292      	uxth	r2, r2
 80081a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80081b4:	4581      	cmp	r9, r0
 80081b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081ba:	f84c 3b04 	str.w	r3, [ip], #4
 80081be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081c2:	d2db      	bcs.n	800817c <quorem+0x44>
 80081c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80081c8:	b92b      	cbnz	r3, 80081d6 <quorem+0x9e>
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	429d      	cmp	r5, r3
 80081d0:	461a      	mov	r2, r3
 80081d2:	d32e      	bcc.n	8008232 <quorem+0xfa>
 80081d4:	613c      	str	r4, [r7, #16]
 80081d6:	4638      	mov	r0, r7
 80081d8:	f001 f8c4 	bl	8009364 <__mcmp>
 80081dc:	2800      	cmp	r0, #0
 80081de:	db24      	blt.n	800822a <quorem+0xf2>
 80081e0:	3601      	adds	r6, #1
 80081e2:	4628      	mov	r0, r5
 80081e4:	f04f 0c00 	mov.w	ip, #0
 80081e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80081ec:	f8d0 e000 	ldr.w	lr, [r0]
 80081f0:	b293      	uxth	r3, r2
 80081f2:	ebac 0303 	sub.w	r3, ip, r3
 80081f6:	0c12      	lsrs	r2, r2, #16
 80081f8:	fa13 f38e 	uxtah	r3, r3, lr
 80081fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008204:	b29b      	uxth	r3, r3
 8008206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800820a:	45c1      	cmp	r9, r8
 800820c:	f840 3b04 	str.w	r3, [r0], #4
 8008210:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008214:	d2e8      	bcs.n	80081e8 <quorem+0xb0>
 8008216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800821a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800821e:	b922      	cbnz	r2, 800822a <quorem+0xf2>
 8008220:	3b04      	subs	r3, #4
 8008222:	429d      	cmp	r5, r3
 8008224:	461a      	mov	r2, r3
 8008226:	d30a      	bcc.n	800823e <quorem+0x106>
 8008228:	613c      	str	r4, [r7, #16]
 800822a:	4630      	mov	r0, r6
 800822c:	b003      	add	sp, #12
 800822e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	3b04      	subs	r3, #4
 8008236:	2a00      	cmp	r2, #0
 8008238:	d1cc      	bne.n	80081d4 <quorem+0x9c>
 800823a:	3c01      	subs	r4, #1
 800823c:	e7c7      	b.n	80081ce <quorem+0x96>
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	3b04      	subs	r3, #4
 8008242:	2a00      	cmp	r2, #0
 8008244:	d1f0      	bne.n	8008228 <quorem+0xf0>
 8008246:	3c01      	subs	r4, #1
 8008248:	e7eb      	b.n	8008222 <quorem+0xea>
 800824a:	2000      	movs	r0, #0
 800824c:	e7ee      	b.n	800822c <quorem+0xf4>
	...

08008250 <_dtoa_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	ed2d 8b04 	vpush	{d8-d9}
 8008258:	ec57 6b10 	vmov	r6, r7, d0
 800825c:	b093      	sub	sp, #76	; 0x4c
 800825e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008264:	9106      	str	r1, [sp, #24]
 8008266:	ee10 aa10 	vmov	sl, s0
 800826a:	4604      	mov	r4, r0
 800826c:	9209      	str	r2, [sp, #36]	; 0x24
 800826e:	930c      	str	r3, [sp, #48]	; 0x30
 8008270:	46bb      	mov	fp, r7
 8008272:	b975      	cbnz	r5, 8008292 <_dtoa_r+0x42>
 8008274:	2010      	movs	r0, #16
 8008276:	f000 fddd 	bl	8008e34 <malloc>
 800827a:	4602      	mov	r2, r0
 800827c:	6260      	str	r0, [r4, #36]	; 0x24
 800827e:	b920      	cbnz	r0, 800828a <_dtoa_r+0x3a>
 8008280:	4ba7      	ldr	r3, [pc, #668]	; (8008520 <_dtoa_r+0x2d0>)
 8008282:	21ea      	movs	r1, #234	; 0xea
 8008284:	48a7      	ldr	r0, [pc, #668]	; (8008524 <_dtoa_r+0x2d4>)
 8008286:	f001 fbd1 	bl	8009a2c <__assert_func>
 800828a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800828e:	6005      	str	r5, [r0, #0]
 8008290:	60c5      	str	r5, [r0, #12]
 8008292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	b151      	cbz	r1, 80082ae <_dtoa_r+0x5e>
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	604a      	str	r2, [r1, #4]
 800829c:	2301      	movs	r3, #1
 800829e:	4093      	lsls	r3, r2
 80082a0:	608b      	str	r3, [r1, #8]
 80082a2:	4620      	mov	r0, r4
 80082a4:	f000 fe1c 	bl	8008ee0 <_Bfree>
 80082a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082aa:	2200      	movs	r2, #0
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	1e3b      	subs	r3, r7, #0
 80082b0:	bfaa      	itet	ge
 80082b2:	2300      	movge	r3, #0
 80082b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082b8:	f8c8 3000 	strge.w	r3, [r8]
 80082bc:	4b9a      	ldr	r3, [pc, #616]	; (8008528 <_dtoa_r+0x2d8>)
 80082be:	bfbc      	itt	lt
 80082c0:	2201      	movlt	r2, #1
 80082c2:	f8c8 2000 	strlt.w	r2, [r8]
 80082c6:	ea33 030b 	bics.w	r3, r3, fp
 80082ca:	d11b      	bne.n	8008304 <_dtoa_r+0xb4>
 80082cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082d8:	4333      	orrs	r3, r6
 80082da:	f000 8592 	beq.w	8008e02 <_dtoa_r+0xbb2>
 80082de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e0:	b963      	cbnz	r3, 80082fc <_dtoa_r+0xac>
 80082e2:	4b92      	ldr	r3, [pc, #584]	; (800852c <_dtoa_r+0x2dc>)
 80082e4:	e022      	b.n	800832c <_dtoa_r+0xdc>
 80082e6:	4b92      	ldr	r3, [pc, #584]	; (8008530 <_dtoa_r+0x2e0>)
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	3308      	adds	r3, #8
 80082ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	9801      	ldr	r0, [sp, #4]
 80082f2:	b013      	add	sp, #76	; 0x4c
 80082f4:	ecbd 8b04 	vpop	{d8-d9}
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4b8b      	ldr	r3, [pc, #556]	; (800852c <_dtoa_r+0x2dc>)
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	3303      	adds	r3, #3
 8008302:	e7f3      	b.n	80082ec <_dtoa_r+0x9c>
 8008304:	2200      	movs	r2, #0
 8008306:	2300      	movs	r3, #0
 8008308:	4650      	mov	r0, sl
 800830a:	4659      	mov	r1, fp
 800830c:	f7f8 fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008310:	ec4b ab19 	vmov	d9, sl, fp
 8008314:	4680      	mov	r8, r0
 8008316:	b158      	cbz	r0, 8008330 <_dtoa_r+0xe0>
 8008318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800831a:	2301      	movs	r3, #1
 800831c:	6013      	str	r3, [r2, #0]
 800831e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 856b 	beq.w	8008dfc <_dtoa_r+0xbac>
 8008326:	4883      	ldr	r0, [pc, #524]	; (8008534 <_dtoa_r+0x2e4>)
 8008328:	6018      	str	r0, [r3, #0]
 800832a:	1e43      	subs	r3, r0, #1
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	e7df      	b.n	80082f0 <_dtoa_r+0xa0>
 8008330:	ec4b ab10 	vmov	d0, sl, fp
 8008334:	aa10      	add	r2, sp, #64	; 0x40
 8008336:	a911      	add	r1, sp, #68	; 0x44
 8008338:	4620      	mov	r0, r4
 800833a:	f001 f8b9 	bl	80094b0 <__d2b>
 800833e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008342:	ee08 0a10 	vmov	s16, r0
 8008346:	2d00      	cmp	r5, #0
 8008348:	f000 8084 	beq.w	8008454 <_dtoa_r+0x204>
 800834c:	ee19 3a90 	vmov	r3, s19
 8008350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008354:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008358:	4656      	mov	r6, sl
 800835a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800835e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008362:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008366:	4b74      	ldr	r3, [pc, #464]	; (8008538 <_dtoa_r+0x2e8>)
 8008368:	2200      	movs	r2, #0
 800836a:	4630      	mov	r0, r6
 800836c:	4639      	mov	r1, r7
 800836e:	f7f7 ff93 	bl	8000298 <__aeabi_dsub>
 8008372:	a365      	add	r3, pc, #404	; (adr r3, 8008508 <_dtoa_r+0x2b8>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	f7f8 f946 	bl	8000608 <__aeabi_dmul>
 800837c:	a364      	add	r3, pc, #400	; (adr r3, 8008510 <_dtoa_r+0x2c0>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f7 ff8b 	bl	800029c <__adddf3>
 8008386:	4606      	mov	r6, r0
 8008388:	4628      	mov	r0, r5
 800838a:	460f      	mov	r7, r1
 800838c:	f7f8 f8d2 	bl	8000534 <__aeabi_i2d>
 8008390:	a361      	add	r3, pc, #388	; (adr r3, 8008518 <_dtoa_r+0x2c8>)
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f7f8 f937 	bl	8000608 <__aeabi_dmul>
 800839a:	4602      	mov	r2, r0
 800839c:	460b      	mov	r3, r1
 800839e:	4630      	mov	r0, r6
 80083a0:	4639      	mov	r1, r7
 80083a2:	f7f7 ff7b 	bl	800029c <__adddf3>
 80083a6:	4606      	mov	r6, r0
 80083a8:	460f      	mov	r7, r1
 80083aa:	f7f8 fbdd 	bl	8000b68 <__aeabi_d2iz>
 80083ae:	2200      	movs	r2, #0
 80083b0:	9000      	str	r0, [sp, #0]
 80083b2:	2300      	movs	r3, #0
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f8 fb98 	bl	8000aec <__aeabi_dcmplt>
 80083bc:	b150      	cbz	r0, 80083d4 <_dtoa_r+0x184>
 80083be:	9800      	ldr	r0, [sp, #0]
 80083c0:	f7f8 f8b8 	bl	8000534 <__aeabi_i2d>
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	f7f8 fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 80083cc:	b910      	cbnz	r0, 80083d4 <_dtoa_r+0x184>
 80083ce:	9b00      	ldr	r3, [sp, #0]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	9b00      	ldr	r3, [sp, #0]
 80083d6:	2b16      	cmp	r3, #22
 80083d8:	d85a      	bhi.n	8008490 <_dtoa_r+0x240>
 80083da:	9a00      	ldr	r2, [sp, #0]
 80083dc:	4b57      	ldr	r3, [pc, #348]	; (800853c <_dtoa_r+0x2ec>)
 80083de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	ec51 0b19 	vmov	r0, r1, d9
 80083ea:	f7f8 fb7f 	bl	8000aec <__aeabi_dcmplt>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	d050      	beq.n	8008494 <_dtoa_r+0x244>
 80083f2:	9b00      	ldr	r3, [sp, #0]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80083fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083fe:	1b5d      	subs	r5, r3, r5
 8008400:	1e6b      	subs	r3, r5, #1
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	bf45      	ittet	mi
 8008406:	f1c5 0301 	rsbmi	r3, r5, #1
 800840a:	9304      	strmi	r3, [sp, #16]
 800840c:	2300      	movpl	r3, #0
 800840e:	2300      	movmi	r3, #0
 8008410:	bf4c      	ite	mi
 8008412:	9305      	strmi	r3, [sp, #20]
 8008414:	9304      	strpl	r3, [sp, #16]
 8008416:	9b00      	ldr	r3, [sp, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	db3d      	blt.n	8008498 <_dtoa_r+0x248>
 800841c:	9b05      	ldr	r3, [sp, #20]
 800841e:	9a00      	ldr	r2, [sp, #0]
 8008420:	920a      	str	r2, [sp, #40]	; 0x28
 8008422:	4413      	add	r3, r2
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	2300      	movs	r3, #0
 8008428:	9307      	str	r3, [sp, #28]
 800842a:	9b06      	ldr	r3, [sp, #24]
 800842c:	2b09      	cmp	r3, #9
 800842e:	f200 8089 	bhi.w	8008544 <_dtoa_r+0x2f4>
 8008432:	2b05      	cmp	r3, #5
 8008434:	bfc4      	itt	gt
 8008436:	3b04      	subgt	r3, #4
 8008438:	9306      	strgt	r3, [sp, #24]
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	f1a3 0302 	sub.w	r3, r3, #2
 8008440:	bfcc      	ite	gt
 8008442:	2500      	movgt	r5, #0
 8008444:	2501      	movle	r5, #1
 8008446:	2b03      	cmp	r3, #3
 8008448:	f200 8087 	bhi.w	800855a <_dtoa_r+0x30a>
 800844c:	e8df f003 	tbb	[pc, r3]
 8008450:	59383a2d 	.word	0x59383a2d
 8008454:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008458:	441d      	add	r5, r3
 800845a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800845e:	2b20      	cmp	r3, #32
 8008460:	bfc1      	itttt	gt
 8008462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008466:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800846a:	fa0b f303 	lslgt.w	r3, fp, r3
 800846e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008472:	bfda      	itte	le
 8008474:	f1c3 0320 	rsble	r3, r3, #32
 8008478:	fa06 f003 	lslle.w	r0, r6, r3
 800847c:	4318      	orrgt	r0, r3
 800847e:	f7f8 f849 	bl	8000514 <__aeabi_ui2d>
 8008482:	2301      	movs	r3, #1
 8008484:	4606      	mov	r6, r0
 8008486:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800848a:	3d01      	subs	r5, #1
 800848c:	930e      	str	r3, [sp, #56]	; 0x38
 800848e:	e76a      	b.n	8008366 <_dtoa_r+0x116>
 8008490:	2301      	movs	r3, #1
 8008492:	e7b2      	b.n	80083fa <_dtoa_r+0x1aa>
 8008494:	900b      	str	r0, [sp, #44]	; 0x2c
 8008496:	e7b1      	b.n	80083fc <_dtoa_r+0x1ac>
 8008498:	9b04      	ldr	r3, [sp, #16]
 800849a:	9a00      	ldr	r2, [sp, #0]
 800849c:	1a9b      	subs	r3, r3, r2
 800849e:	9304      	str	r3, [sp, #16]
 80084a0:	4253      	negs	r3, r2
 80084a2:	9307      	str	r3, [sp, #28]
 80084a4:	2300      	movs	r3, #0
 80084a6:	930a      	str	r3, [sp, #40]	; 0x28
 80084a8:	e7bf      	b.n	800842a <_dtoa_r+0x1da>
 80084aa:	2300      	movs	r3, #0
 80084ac:	9308      	str	r3, [sp, #32]
 80084ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dc55      	bgt.n	8008560 <_dtoa_r+0x310>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084ba:	461a      	mov	r2, r3
 80084bc:	9209      	str	r2, [sp, #36]	; 0x24
 80084be:	e00c      	b.n	80084da <_dtoa_r+0x28a>
 80084c0:	2301      	movs	r3, #1
 80084c2:	e7f3      	b.n	80084ac <_dtoa_r+0x25c>
 80084c4:	2300      	movs	r3, #0
 80084c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c8:	9308      	str	r3, [sp, #32]
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	4413      	add	r3, r2
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	3301      	adds	r3, #1
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	9303      	str	r3, [sp, #12]
 80084d6:	bfb8      	it	lt
 80084d8:	2301      	movlt	r3, #1
 80084da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084dc:	2200      	movs	r2, #0
 80084de:	6042      	str	r2, [r0, #4]
 80084e0:	2204      	movs	r2, #4
 80084e2:	f102 0614 	add.w	r6, r2, #20
 80084e6:	429e      	cmp	r6, r3
 80084e8:	6841      	ldr	r1, [r0, #4]
 80084ea:	d93d      	bls.n	8008568 <_dtoa_r+0x318>
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fcb7 	bl	8008e60 <_Balloc>
 80084f2:	9001      	str	r0, [sp, #4]
 80084f4:	2800      	cmp	r0, #0
 80084f6:	d13b      	bne.n	8008570 <_dtoa_r+0x320>
 80084f8:	4b11      	ldr	r3, [pc, #68]	; (8008540 <_dtoa_r+0x2f0>)
 80084fa:	4602      	mov	r2, r0
 80084fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008500:	e6c0      	b.n	8008284 <_dtoa_r+0x34>
 8008502:	2301      	movs	r3, #1
 8008504:	e7df      	b.n	80084c6 <_dtoa_r+0x276>
 8008506:	bf00      	nop
 8008508:	636f4361 	.word	0x636f4361
 800850c:	3fd287a7 	.word	0x3fd287a7
 8008510:	8b60c8b3 	.word	0x8b60c8b3
 8008514:	3fc68a28 	.word	0x3fc68a28
 8008518:	509f79fb 	.word	0x509f79fb
 800851c:	3fd34413 	.word	0x3fd34413
 8008520:	0800ae7d 	.word	0x0800ae7d
 8008524:	0800ae94 	.word	0x0800ae94
 8008528:	7ff00000 	.word	0x7ff00000
 800852c:	0800ae79 	.word	0x0800ae79
 8008530:	0800ae70 	.word	0x0800ae70
 8008534:	0800ae4d 	.word	0x0800ae4d
 8008538:	3ff80000 	.word	0x3ff80000
 800853c:	0800af88 	.word	0x0800af88
 8008540:	0800aeef 	.word	0x0800aeef
 8008544:	2501      	movs	r5, #1
 8008546:	2300      	movs	r3, #0
 8008548:	9306      	str	r3, [sp, #24]
 800854a:	9508      	str	r5, [sp, #32]
 800854c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008550:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008554:	2200      	movs	r2, #0
 8008556:	2312      	movs	r3, #18
 8008558:	e7b0      	b.n	80084bc <_dtoa_r+0x26c>
 800855a:	2301      	movs	r3, #1
 800855c:	9308      	str	r3, [sp, #32]
 800855e:	e7f5      	b.n	800854c <_dtoa_r+0x2fc>
 8008560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008562:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008566:	e7b8      	b.n	80084da <_dtoa_r+0x28a>
 8008568:	3101      	adds	r1, #1
 800856a:	6041      	str	r1, [r0, #4]
 800856c:	0052      	lsls	r2, r2, #1
 800856e:	e7b8      	b.n	80084e2 <_dtoa_r+0x292>
 8008570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008572:	9a01      	ldr	r2, [sp, #4]
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	9b03      	ldr	r3, [sp, #12]
 8008578:	2b0e      	cmp	r3, #14
 800857a:	f200 809d 	bhi.w	80086b8 <_dtoa_r+0x468>
 800857e:	2d00      	cmp	r5, #0
 8008580:	f000 809a 	beq.w	80086b8 <_dtoa_r+0x468>
 8008584:	9b00      	ldr	r3, [sp, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dd32      	ble.n	80085f0 <_dtoa_r+0x3a0>
 800858a:	4ab7      	ldr	r2, [pc, #732]	; (8008868 <_dtoa_r+0x618>)
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008594:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008598:	9b00      	ldr	r3, [sp, #0]
 800859a:	05d8      	lsls	r0, r3, #23
 800859c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80085a0:	d516      	bpl.n	80085d0 <_dtoa_r+0x380>
 80085a2:	4bb2      	ldr	r3, [pc, #712]	; (800886c <_dtoa_r+0x61c>)
 80085a4:	ec51 0b19 	vmov	r0, r1, d9
 80085a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085ac:	f7f8 f956 	bl	800085c <__aeabi_ddiv>
 80085b0:	f007 070f 	and.w	r7, r7, #15
 80085b4:	4682      	mov	sl, r0
 80085b6:	468b      	mov	fp, r1
 80085b8:	2503      	movs	r5, #3
 80085ba:	4eac      	ldr	r6, [pc, #688]	; (800886c <_dtoa_r+0x61c>)
 80085bc:	b957      	cbnz	r7, 80085d4 <_dtoa_r+0x384>
 80085be:	4642      	mov	r2, r8
 80085c0:	464b      	mov	r3, r9
 80085c2:	4650      	mov	r0, sl
 80085c4:	4659      	mov	r1, fp
 80085c6:	f7f8 f949 	bl	800085c <__aeabi_ddiv>
 80085ca:	4682      	mov	sl, r0
 80085cc:	468b      	mov	fp, r1
 80085ce:	e028      	b.n	8008622 <_dtoa_r+0x3d2>
 80085d0:	2502      	movs	r5, #2
 80085d2:	e7f2      	b.n	80085ba <_dtoa_r+0x36a>
 80085d4:	07f9      	lsls	r1, r7, #31
 80085d6:	d508      	bpl.n	80085ea <_dtoa_r+0x39a>
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085e0:	f7f8 f812 	bl	8000608 <__aeabi_dmul>
 80085e4:	3501      	adds	r5, #1
 80085e6:	4680      	mov	r8, r0
 80085e8:	4689      	mov	r9, r1
 80085ea:	107f      	asrs	r7, r7, #1
 80085ec:	3608      	adds	r6, #8
 80085ee:	e7e5      	b.n	80085bc <_dtoa_r+0x36c>
 80085f0:	f000 809b 	beq.w	800872a <_dtoa_r+0x4da>
 80085f4:	9b00      	ldr	r3, [sp, #0]
 80085f6:	4f9d      	ldr	r7, [pc, #628]	; (800886c <_dtoa_r+0x61c>)
 80085f8:	425e      	negs	r6, r3
 80085fa:	4b9b      	ldr	r3, [pc, #620]	; (8008868 <_dtoa_r+0x618>)
 80085fc:	f006 020f 	and.w	r2, r6, #15
 8008600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	ec51 0b19 	vmov	r0, r1, d9
 800860c:	f7f7 fffc 	bl	8000608 <__aeabi_dmul>
 8008610:	1136      	asrs	r6, r6, #4
 8008612:	4682      	mov	sl, r0
 8008614:	468b      	mov	fp, r1
 8008616:	2300      	movs	r3, #0
 8008618:	2502      	movs	r5, #2
 800861a:	2e00      	cmp	r6, #0
 800861c:	d17a      	bne.n	8008714 <_dtoa_r+0x4c4>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1d3      	bne.n	80085ca <_dtoa_r+0x37a>
 8008622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 8082 	beq.w	800872e <_dtoa_r+0x4de>
 800862a:	4b91      	ldr	r3, [pc, #580]	; (8008870 <_dtoa_r+0x620>)
 800862c:	2200      	movs	r2, #0
 800862e:	4650      	mov	r0, sl
 8008630:	4659      	mov	r1, fp
 8008632:	f7f8 fa5b 	bl	8000aec <__aeabi_dcmplt>
 8008636:	2800      	cmp	r0, #0
 8008638:	d079      	beq.n	800872e <_dtoa_r+0x4de>
 800863a:	9b03      	ldr	r3, [sp, #12]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d076      	beq.n	800872e <_dtoa_r+0x4de>
 8008640:	9b02      	ldr	r3, [sp, #8]
 8008642:	2b00      	cmp	r3, #0
 8008644:	dd36      	ble.n	80086b4 <_dtoa_r+0x464>
 8008646:	9b00      	ldr	r3, [sp, #0]
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	1e5f      	subs	r7, r3, #1
 800864e:	2200      	movs	r2, #0
 8008650:	4b88      	ldr	r3, [pc, #544]	; (8008874 <_dtoa_r+0x624>)
 8008652:	f7f7 ffd9 	bl	8000608 <__aeabi_dmul>
 8008656:	9e02      	ldr	r6, [sp, #8]
 8008658:	4682      	mov	sl, r0
 800865a:	468b      	mov	fp, r1
 800865c:	3501      	adds	r5, #1
 800865e:	4628      	mov	r0, r5
 8008660:	f7f7 ff68 	bl	8000534 <__aeabi_i2d>
 8008664:	4652      	mov	r2, sl
 8008666:	465b      	mov	r3, fp
 8008668:	f7f7 ffce 	bl	8000608 <__aeabi_dmul>
 800866c:	4b82      	ldr	r3, [pc, #520]	; (8008878 <_dtoa_r+0x628>)
 800866e:	2200      	movs	r2, #0
 8008670:	f7f7 fe14 	bl	800029c <__adddf3>
 8008674:	46d0      	mov	r8, sl
 8008676:	46d9      	mov	r9, fp
 8008678:	4682      	mov	sl, r0
 800867a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800867e:	2e00      	cmp	r6, #0
 8008680:	d158      	bne.n	8008734 <_dtoa_r+0x4e4>
 8008682:	4b7e      	ldr	r3, [pc, #504]	; (800887c <_dtoa_r+0x62c>)
 8008684:	2200      	movs	r2, #0
 8008686:	4640      	mov	r0, r8
 8008688:	4649      	mov	r1, r9
 800868a:	f7f7 fe05 	bl	8000298 <__aeabi_dsub>
 800868e:	4652      	mov	r2, sl
 8008690:	465b      	mov	r3, fp
 8008692:	4680      	mov	r8, r0
 8008694:	4689      	mov	r9, r1
 8008696:	f7f8 fa47 	bl	8000b28 <__aeabi_dcmpgt>
 800869a:	2800      	cmp	r0, #0
 800869c:	f040 8295 	bne.w	8008bca <_dtoa_r+0x97a>
 80086a0:	4652      	mov	r2, sl
 80086a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f8 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	f040 8289 	bne.w	8008bc6 <_dtoa_r+0x976>
 80086b4:	ec5b ab19 	vmov	sl, fp, d9
 80086b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f2c0 8148 	blt.w	8008950 <_dtoa_r+0x700>
 80086c0:	9a00      	ldr	r2, [sp, #0]
 80086c2:	2a0e      	cmp	r2, #14
 80086c4:	f300 8144 	bgt.w	8008950 <_dtoa_r+0x700>
 80086c8:	4b67      	ldr	r3, [pc, #412]	; (8008868 <_dtoa_r+0x618>)
 80086ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f280 80d5 	bge.w	8008884 <_dtoa_r+0x634>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f300 80d1 	bgt.w	8008884 <_dtoa_r+0x634>
 80086e2:	f040 826f 	bne.w	8008bc4 <_dtoa_r+0x974>
 80086e6:	4b65      	ldr	r3, [pc, #404]	; (800887c <_dtoa_r+0x62c>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	4640      	mov	r0, r8
 80086ec:	4649      	mov	r1, r9
 80086ee:	f7f7 ff8b 	bl	8000608 <__aeabi_dmul>
 80086f2:	4652      	mov	r2, sl
 80086f4:	465b      	mov	r3, fp
 80086f6:	f7f8 fa0d 	bl	8000b14 <__aeabi_dcmpge>
 80086fa:	9e03      	ldr	r6, [sp, #12]
 80086fc:	4637      	mov	r7, r6
 80086fe:	2800      	cmp	r0, #0
 8008700:	f040 8245 	bne.w	8008b8e <_dtoa_r+0x93e>
 8008704:	9d01      	ldr	r5, [sp, #4]
 8008706:	2331      	movs	r3, #49	; 0x31
 8008708:	f805 3b01 	strb.w	r3, [r5], #1
 800870c:	9b00      	ldr	r3, [sp, #0]
 800870e:	3301      	adds	r3, #1
 8008710:	9300      	str	r3, [sp, #0]
 8008712:	e240      	b.n	8008b96 <_dtoa_r+0x946>
 8008714:	07f2      	lsls	r2, r6, #31
 8008716:	d505      	bpl.n	8008724 <_dtoa_r+0x4d4>
 8008718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800871c:	f7f7 ff74 	bl	8000608 <__aeabi_dmul>
 8008720:	3501      	adds	r5, #1
 8008722:	2301      	movs	r3, #1
 8008724:	1076      	asrs	r6, r6, #1
 8008726:	3708      	adds	r7, #8
 8008728:	e777      	b.n	800861a <_dtoa_r+0x3ca>
 800872a:	2502      	movs	r5, #2
 800872c:	e779      	b.n	8008622 <_dtoa_r+0x3d2>
 800872e:	9f00      	ldr	r7, [sp, #0]
 8008730:	9e03      	ldr	r6, [sp, #12]
 8008732:	e794      	b.n	800865e <_dtoa_r+0x40e>
 8008734:	9901      	ldr	r1, [sp, #4]
 8008736:	4b4c      	ldr	r3, [pc, #304]	; (8008868 <_dtoa_r+0x618>)
 8008738:	4431      	add	r1, r6
 800873a:	910d      	str	r1, [sp, #52]	; 0x34
 800873c:	9908      	ldr	r1, [sp, #32]
 800873e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008746:	2900      	cmp	r1, #0
 8008748:	d043      	beq.n	80087d2 <_dtoa_r+0x582>
 800874a:	494d      	ldr	r1, [pc, #308]	; (8008880 <_dtoa_r+0x630>)
 800874c:	2000      	movs	r0, #0
 800874e:	f7f8 f885 	bl	800085c <__aeabi_ddiv>
 8008752:	4652      	mov	r2, sl
 8008754:	465b      	mov	r3, fp
 8008756:	f7f7 fd9f 	bl	8000298 <__aeabi_dsub>
 800875a:	9d01      	ldr	r5, [sp, #4]
 800875c:	4682      	mov	sl, r0
 800875e:	468b      	mov	fp, r1
 8008760:	4649      	mov	r1, r9
 8008762:	4640      	mov	r0, r8
 8008764:	f7f8 fa00 	bl	8000b68 <__aeabi_d2iz>
 8008768:	4606      	mov	r6, r0
 800876a:	f7f7 fee3 	bl	8000534 <__aeabi_i2d>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f7 fd8f 	bl	8000298 <__aeabi_dsub>
 800877a:	3630      	adds	r6, #48	; 0x30
 800877c:	f805 6b01 	strb.w	r6, [r5], #1
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	4680      	mov	r8, r0
 8008786:	4689      	mov	r9, r1
 8008788:	f7f8 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800878c:	2800      	cmp	r0, #0
 800878e:	d163      	bne.n	8008858 <_dtoa_r+0x608>
 8008790:	4642      	mov	r2, r8
 8008792:	464b      	mov	r3, r9
 8008794:	4936      	ldr	r1, [pc, #216]	; (8008870 <_dtoa_r+0x620>)
 8008796:	2000      	movs	r0, #0
 8008798:	f7f7 fd7e 	bl	8000298 <__aeabi_dsub>
 800879c:	4652      	mov	r2, sl
 800879e:	465b      	mov	r3, fp
 80087a0:	f7f8 f9a4 	bl	8000aec <__aeabi_dcmplt>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	f040 80b5 	bne.w	8008914 <_dtoa_r+0x6c4>
 80087aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087ac:	429d      	cmp	r5, r3
 80087ae:	d081      	beq.n	80086b4 <_dtoa_r+0x464>
 80087b0:	4b30      	ldr	r3, [pc, #192]	; (8008874 <_dtoa_r+0x624>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	4650      	mov	r0, sl
 80087b6:	4659      	mov	r1, fp
 80087b8:	f7f7 ff26 	bl	8000608 <__aeabi_dmul>
 80087bc:	4b2d      	ldr	r3, [pc, #180]	; (8008874 <_dtoa_r+0x624>)
 80087be:	4682      	mov	sl, r0
 80087c0:	468b      	mov	fp, r1
 80087c2:	4640      	mov	r0, r8
 80087c4:	4649      	mov	r1, r9
 80087c6:	2200      	movs	r2, #0
 80087c8:	f7f7 ff1e 	bl	8000608 <__aeabi_dmul>
 80087cc:	4680      	mov	r8, r0
 80087ce:	4689      	mov	r9, r1
 80087d0:	e7c6      	b.n	8008760 <_dtoa_r+0x510>
 80087d2:	4650      	mov	r0, sl
 80087d4:	4659      	mov	r1, fp
 80087d6:	f7f7 ff17 	bl	8000608 <__aeabi_dmul>
 80087da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087dc:	9d01      	ldr	r5, [sp, #4]
 80087de:	930f      	str	r3, [sp, #60]	; 0x3c
 80087e0:	4682      	mov	sl, r0
 80087e2:	468b      	mov	fp, r1
 80087e4:	4649      	mov	r1, r9
 80087e6:	4640      	mov	r0, r8
 80087e8:	f7f8 f9be 	bl	8000b68 <__aeabi_d2iz>
 80087ec:	4606      	mov	r6, r0
 80087ee:	f7f7 fea1 	bl	8000534 <__aeabi_i2d>
 80087f2:	3630      	adds	r6, #48	; 0x30
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4640      	mov	r0, r8
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f7 fd4c 	bl	8000298 <__aeabi_dsub>
 8008800:	f805 6b01 	strb.w	r6, [r5], #1
 8008804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008806:	429d      	cmp	r5, r3
 8008808:	4680      	mov	r8, r0
 800880a:	4689      	mov	r9, r1
 800880c:	f04f 0200 	mov.w	r2, #0
 8008810:	d124      	bne.n	800885c <_dtoa_r+0x60c>
 8008812:	4b1b      	ldr	r3, [pc, #108]	; (8008880 <_dtoa_r+0x630>)
 8008814:	4650      	mov	r0, sl
 8008816:	4659      	mov	r1, fp
 8008818:	f7f7 fd40 	bl	800029c <__adddf3>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4640      	mov	r0, r8
 8008822:	4649      	mov	r1, r9
 8008824:	f7f8 f980 	bl	8000b28 <__aeabi_dcmpgt>
 8008828:	2800      	cmp	r0, #0
 800882a:	d173      	bne.n	8008914 <_dtoa_r+0x6c4>
 800882c:	4652      	mov	r2, sl
 800882e:	465b      	mov	r3, fp
 8008830:	4913      	ldr	r1, [pc, #76]	; (8008880 <_dtoa_r+0x630>)
 8008832:	2000      	movs	r0, #0
 8008834:	f7f7 fd30 	bl	8000298 <__aeabi_dsub>
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	4640      	mov	r0, r8
 800883e:	4649      	mov	r1, r9
 8008840:	f7f8 f954 	bl	8000aec <__aeabi_dcmplt>
 8008844:	2800      	cmp	r0, #0
 8008846:	f43f af35 	beq.w	80086b4 <_dtoa_r+0x464>
 800884a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800884c:	1e6b      	subs	r3, r5, #1
 800884e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008850:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008854:	2b30      	cmp	r3, #48	; 0x30
 8008856:	d0f8      	beq.n	800884a <_dtoa_r+0x5fa>
 8008858:	9700      	str	r7, [sp, #0]
 800885a:	e049      	b.n	80088f0 <_dtoa_r+0x6a0>
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <_dtoa_r+0x624>)
 800885e:	f7f7 fed3 	bl	8000608 <__aeabi_dmul>
 8008862:	4680      	mov	r8, r0
 8008864:	4689      	mov	r9, r1
 8008866:	e7bd      	b.n	80087e4 <_dtoa_r+0x594>
 8008868:	0800af88 	.word	0x0800af88
 800886c:	0800af60 	.word	0x0800af60
 8008870:	3ff00000 	.word	0x3ff00000
 8008874:	40240000 	.word	0x40240000
 8008878:	401c0000 	.word	0x401c0000
 800887c:	40140000 	.word	0x40140000
 8008880:	3fe00000 	.word	0x3fe00000
 8008884:	9d01      	ldr	r5, [sp, #4]
 8008886:	4656      	mov	r6, sl
 8008888:	465f      	mov	r7, fp
 800888a:	4642      	mov	r2, r8
 800888c:	464b      	mov	r3, r9
 800888e:	4630      	mov	r0, r6
 8008890:	4639      	mov	r1, r7
 8008892:	f7f7 ffe3 	bl	800085c <__aeabi_ddiv>
 8008896:	f7f8 f967 	bl	8000b68 <__aeabi_d2iz>
 800889a:	4682      	mov	sl, r0
 800889c:	f7f7 fe4a 	bl	8000534 <__aeabi_i2d>
 80088a0:	4642      	mov	r2, r8
 80088a2:	464b      	mov	r3, r9
 80088a4:	f7f7 feb0 	bl	8000608 <__aeabi_dmul>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4630      	mov	r0, r6
 80088ae:	4639      	mov	r1, r7
 80088b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088b4:	f7f7 fcf0 	bl	8000298 <__aeabi_dsub>
 80088b8:	f805 6b01 	strb.w	r6, [r5], #1
 80088bc:	9e01      	ldr	r6, [sp, #4]
 80088be:	9f03      	ldr	r7, [sp, #12]
 80088c0:	1bae      	subs	r6, r5, r6
 80088c2:	42b7      	cmp	r7, r6
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	d135      	bne.n	8008936 <_dtoa_r+0x6e6>
 80088ca:	f7f7 fce7 	bl	800029c <__adddf3>
 80088ce:	4642      	mov	r2, r8
 80088d0:	464b      	mov	r3, r9
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	f7f8 f927 	bl	8000b28 <__aeabi_dcmpgt>
 80088da:	b9d0      	cbnz	r0, 8008912 <_dtoa_r+0x6c2>
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	4630      	mov	r0, r6
 80088e2:	4639      	mov	r1, r7
 80088e4:	f7f8 f8f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80088e8:	b110      	cbz	r0, 80088f0 <_dtoa_r+0x6a0>
 80088ea:	f01a 0f01 	tst.w	sl, #1
 80088ee:	d110      	bne.n	8008912 <_dtoa_r+0x6c2>
 80088f0:	4620      	mov	r0, r4
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	f000 faf3 	bl	8008ee0 <_Bfree>
 80088fa:	2300      	movs	r3, #0
 80088fc:	9800      	ldr	r0, [sp, #0]
 80088fe:	702b      	strb	r3, [r5, #0]
 8008900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008902:	3001      	adds	r0, #1
 8008904:	6018      	str	r0, [r3, #0]
 8008906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008908:	2b00      	cmp	r3, #0
 800890a:	f43f acf1 	beq.w	80082f0 <_dtoa_r+0xa0>
 800890e:	601d      	str	r5, [r3, #0]
 8008910:	e4ee      	b.n	80082f0 <_dtoa_r+0xa0>
 8008912:	9f00      	ldr	r7, [sp, #0]
 8008914:	462b      	mov	r3, r5
 8008916:	461d      	mov	r5, r3
 8008918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800891c:	2a39      	cmp	r2, #57	; 0x39
 800891e:	d106      	bne.n	800892e <_dtoa_r+0x6de>
 8008920:	9a01      	ldr	r2, [sp, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d1f7      	bne.n	8008916 <_dtoa_r+0x6c6>
 8008926:	9901      	ldr	r1, [sp, #4]
 8008928:	2230      	movs	r2, #48	; 0x30
 800892a:	3701      	adds	r7, #1
 800892c:	700a      	strb	r2, [r1, #0]
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	3201      	adds	r2, #1
 8008932:	701a      	strb	r2, [r3, #0]
 8008934:	e790      	b.n	8008858 <_dtoa_r+0x608>
 8008936:	4ba6      	ldr	r3, [pc, #664]	; (8008bd0 <_dtoa_r+0x980>)
 8008938:	2200      	movs	r2, #0
 800893a:	f7f7 fe65 	bl	8000608 <__aeabi_dmul>
 800893e:	2200      	movs	r2, #0
 8008940:	2300      	movs	r3, #0
 8008942:	4606      	mov	r6, r0
 8008944:	460f      	mov	r7, r1
 8008946:	f7f8 f8c7 	bl	8000ad8 <__aeabi_dcmpeq>
 800894a:	2800      	cmp	r0, #0
 800894c:	d09d      	beq.n	800888a <_dtoa_r+0x63a>
 800894e:	e7cf      	b.n	80088f0 <_dtoa_r+0x6a0>
 8008950:	9a08      	ldr	r2, [sp, #32]
 8008952:	2a00      	cmp	r2, #0
 8008954:	f000 80d7 	beq.w	8008b06 <_dtoa_r+0x8b6>
 8008958:	9a06      	ldr	r2, [sp, #24]
 800895a:	2a01      	cmp	r2, #1
 800895c:	f300 80ba 	bgt.w	8008ad4 <_dtoa_r+0x884>
 8008960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008962:	2a00      	cmp	r2, #0
 8008964:	f000 80b2 	beq.w	8008acc <_dtoa_r+0x87c>
 8008968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800896c:	9e07      	ldr	r6, [sp, #28]
 800896e:	9d04      	ldr	r5, [sp, #16]
 8008970:	9a04      	ldr	r2, [sp, #16]
 8008972:	441a      	add	r2, r3
 8008974:	9204      	str	r2, [sp, #16]
 8008976:	9a05      	ldr	r2, [sp, #20]
 8008978:	2101      	movs	r1, #1
 800897a:	441a      	add	r2, r3
 800897c:	4620      	mov	r0, r4
 800897e:	9205      	str	r2, [sp, #20]
 8008980:	f000 fb66 	bl	8009050 <__i2b>
 8008984:	4607      	mov	r7, r0
 8008986:	2d00      	cmp	r5, #0
 8008988:	dd0c      	ble.n	80089a4 <_dtoa_r+0x754>
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	2b00      	cmp	r3, #0
 800898e:	dd09      	ble.n	80089a4 <_dtoa_r+0x754>
 8008990:	42ab      	cmp	r3, r5
 8008992:	9a04      	ldr	r2, [sp, #16]
 8008994:	bfa8      	it	ge
 8008996:	462b      	movge	r3, r5
 8008998:	1ad2      	subs	r2, r2, r3
 800899a:	9204      	str	r2, [sp, #16]
 800899c:	9a05      	ldr	r2, [sp, #20]
 800899e:	1aed      	subs	r5, r5, r3
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	9305      	str	r3, [sp, #20]
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	b31b      	cbz	r3, 80089f0 <_dtoa_r+0x7a0>
 80089a8:	9b08      	ldr	r3, [sp, #32]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80af 	beq.w	8008b0e <_dtoa_r+0x8be>
 80089b0:	2e00      	cmp	r6, #0
 80089b2:	dd13      	ble.n	80089dc <_dtoa_r+0x78c>
 80089b4:	4639      	mov	r1, r7
 80089b6:	4632      	mov	r2, r6
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fc09 	bl	80091d0 <__pow5mult>
 80089be:	ee18 2a10 	vmov	r2, s16
 80089c2:	4601      	mov	r1, r0
 80089c4:	4607      	mov	r7, r0
 80089c6:	4620      	mov	r0, r4
 80089c8:	f000 fb58 	bl	800907c <__multiply>
 80089cc:	ee18 1a10 	vmov	r1, s16
 80089d0:	4680      	mov	r8, r0
 80089d2:	4620      	mov	r0, r4
 80089d4:	f000 fa84 	bl	8008ee0 <_Bfree>
 80089d8:	ee08 8a10 	vmov	s16, r8
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	1b9a      	subs	r2, r3, r6
 80089e0:	d006      	beq.n	80089f0 <_dtoa_r+0x7a0>
 80089e2:	ee18 1a10 	vmov	r1, s16
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fbf2 	bl	80091d0 <__pow5mult>
 80089ec:	ee08 0a10 	vmov	s16, r0
 80089f0:	2101      	movs	r1, #1
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 fb2c 	bl	8009050 <__i2b>
 80089f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	4606      	mov	r6, r0
 80089fe:	f340 8088 	ble.w	8008b12 <_dtoa_r+0x8c2>
 8008a02:	461a      	mov	r2, r3
 8008a04:	4601      	mov	r1, r0
 8008a06:	4620      	mov	r0, r4
 8008a08:	f000 fbe2 	bl	80091d0 <__pow5mult>
 8008a0c:	9b06      	ldr	r3, [sp, #24]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	4606      	mov	r6, r0
 8008a12:	f340 8081 	ble.w	8008b18 <_dtoa_r+0x8c8>
 8008a16:	f04f 0800 	mov.w	r8, #0
 8008a1a:	6933      	ldr	r3, [r6, #16]
 8008a1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a20:	6918      	ldr	r0, [r3, #16]
 8008a22:	f000 fac5 	bl	8008fb0 <__hi0bits>
 8008a26:	f1c0 0020 	rsb	r0, r0, #32
 8008a2a:	9b05      	ldr	r3, [sp, #20]
 8008a2c:	4418      	add	r0, r3
 8008a2e:	f010 001f 	ands.w	r0, r0, #31
 8008a32:	f000 8092 	beq.w	8008b5a <_dtoa_r+0x90a>
 8008a36:	f1c0 0320 	rsb	r3, r0, #32
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	f340 808a 	ble.w	8008b54 <_dtoa_r+0x904>
 8008a40:	f1c0 001c 	rsb	r0, r0, #28
 8008a44:	9b04      	ldr	r3, [sp, #16]
 8008a46:	4403      	add	r3, r0
 8008a48:	9304      	str	r3, [sp, #16]
 8008a4a:	9b05      	ldr	r3, [sp, #20]
 8008a4c:	4403      	add	r3, r0
 8008a4e:	4405      	add	r5, r0
 8008a50:	9305      	str	r3, [sp, #20]
 8008a52:	9b04      	ldr	r3, [sp, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dd07      	ble.n	8008a68 <_dtoa_r+0x818>
 8008a58:	ee18 1a10 	vmov	r1, s16
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4620      	mov	r0, r4
 8008a60:	f000 fc10 	bl	8009284 <__lshift>
 8008a64:	ee08 0a10 	vmov	s16, r0
 8008a68:	9b05      	ldr	r3, [sp, #20]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dd05      	ble.n	8008a7a <_dtoa_r+0x82a>
 8008a6e:	4631      	mov	r1, r6
 8008a70:	461a      	mov	r2, r3
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 fc06 	bl	8009284 <__lshift>
 8008a78:	4606      	mov	r6, r0
 8008a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d06e      	beq.n	8008b5e <_dtoa_r+0x90e>
 8008a80:	ee18 0a10 	vmov	r0, s16
 8008a84:	4631      	mov	r1, r6
 8008a86:	f000 fc6d 	bl	8009364 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	da67      	bge.n	8008b5e <_dtoa_r+0x90e>
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	ee18 1a10 	vmov	r1, s16
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	220a      	movs	r2, #10
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 fa41 	bl	8008f24 <__multadd>
 8008aa2:	9b08      	ldr	r3, [sp, #32]
 8008aa4:	ee08 0a10 	vmov	s16, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 81b1 	beq.w	8008e10 <_dtoa_r+0xbc0>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 fa35 	bl	8008f24 <__multadd>
 8008aba:	9b02      	ldr	r3, [sp, #8]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	4607      	mov	r7, r0
 8008ac0:	f300 808e 	bgt.w	8008be0 <_dtoa_r+0x990>
 8008ac4:	9b06      	ldr	r3, [sp, #24]
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	dc51      	bgt.n	8008b6e <_dtoa_r+0x91e>
 8008aca:	e089      	b.n	8008be0 <_dtoa_r+0x990>
 8008acc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ad2:	e74b      	b.n	800896c <_dtoa_r+0x71c>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	1e5e      	subs	r6, r3, #1
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	42b3      	cmp	r3, r6
 8008adc:	bfbf      	itttt	lt
 8008ade:	9b07      	ldrlt	r3, [sp, #28]
 8008ae0:	9607      	strlt	r6, [sp, #28]
 8008ae2:	1af2      	sublt	r2, r6, r3
 8008ae4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ae6:	bfb6      	itet	lt
 8008ae8:	189b      	addlt	r3, r3, r2
 8008aea:	1b9e      	subge	r6, r3, r6
 8008aec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	bfb8      	it	lt
 8008af2:	2600      	movlt	r6, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bfb7      	itett	lt
 8008af8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008afc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b00:	1a9d      	sublt	r5, r3, r2
 8008b02:	2300      	movlt	r3, #0
 8008b04:	e734      	b.n	8008970 <_dtoa_r+0x720>
 8008b06:	9e07      	ldr	r6, [sp, #28]
 8008b08:	9d04      	ldr	r5, [sp, #16]
 8008b0a:	9f08      	ldr	r7, [sp, #32]
 8008b0c:	e73b      	b.n	8008986 <_dtoa_r+0x736>
 8008b0e:	9a07      	ldr	r2, [sp, #28]
 8008b10:	e767      	b.n	80089e2 <_dtoa_r+0x792>
 8008b12:	9b06      	ldr	r3, [sp, #24]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	dc18      	bgt.n	8008b4a <_dtoa_r+0x8fa>
 8008b18:	f1ba 0f00 	cmp.w	sl, #0
 8008b1c:	d115      	bne.n	8008b4a <_dtoa_r+0x8fa>
 8008b1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b22:	b993      	cbnz	r3, 8008b4a <_dtoa_r+0x8fa>
 8008b24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b28:	0d1b      	lsrs	r3, r3, #20
 8008b2a:	051b      	lsls	r3, r3, #20
 8008b2c:	b183      	cbz	r3, 8008b50 <_dtoa_r+0x900>
 8008b2e:	9b04      	ldr	r3, [sp, #16]
 8008b30:	3301      	adds	r3, #1
 8008b32:	9304      	str	r3, [sp, #16]
 8008b34:	9b05      	ldr	r3, [sp, #20]
 8008b36:	3301      	adds	r3, #1
 8008b38:	9305      	str	r3, [sp, #20]
 8008b3a:	f04f 0801 	mov.w	r8, #1
 8008b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f47f af6a 	bne.w	8008a1a <_dtoa_r+0x7ca>
 8008b46:	2001      	movs	r0, #1
 8008b48:	e76f      	b.n	8008a2a <_dtoa_r+0x7da>
 8008b4a:	f04f 0800 	mov.w	r8, #0
 8008b4e:	e7f6      	b.n	8008b3e <_dtoa_r+0x8ee>
 8008b50:	4698      	mov	r8, r3
 8008b52:	e7f4      	b.n	8008b3e <_dtoa_r+0x8ee>
 8008b54:	f43f af7d 	beq.w	8008a52 <_dtoa_r+0x802>
 8008b58:	4618      	mov	r0, r3
 8008b5a:	301c      	adds	r0, #28
 8008b5c:	e772      	b.n	8008a44 <_dtoa_r+0x7f4>
 8008b5e:	9b03      	ldr	r3, [sp, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dc37      	bgt.n	8008bd4 <_dtoa_r+0x984>
 8008b64:	9b06      	ldr	r3, [sp, #24]
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	dd34      	ble.n	8008bd4 <_dtoa_r+0x984>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	b96b      	cbnz	r3, 8008b8e <_dtoa_r+0x93e>
 8008b72:	4631      	mov	r1, r6
 8008b74:	2205      	movs	r2, #5
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 f9d4 	bl	8008f24 <__multadd>
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	4606      	mov	r6, r0
 8008b80:	ee18 0a10 	vmov	r0, s16
 8008b84:	f000 fbee 	bl	8009364 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f73f adbb 	bgt.w	8008704 <_dtoa_r+0x4b4>
 8008b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b90:	9d01      	ldr	r5, [sp, #4]
 8008b92:	43db      	mvns	r3, r3
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	f000 f99f 	bl	8008ee0 <_Bfree>
 8008ba2:	2f00      	cmp	r7, #0
 8008ba4:	f43f aea4 	beq.w	80088f0 <_dtoa_r+0x6a0>
 8008ba8:	f1b8 0f00 	cmp.w	r8, #0
 8008bac:	d005      	beq.n	8008bba <_dtoa_r+0x96a>
 8008bae:	45b8      	cmp	r8, r7
 8008bb0:	d003      	beq.n	8008bba <_dtoa_r+0x96a>
 8008bb2:	4641      	mov	r1, r8
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f000 f993 	bl	8008ee0 <_Bfree>
 8008bba:	4639      	mov	r1, r7
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f000 f98f 	bl	8008ee0 <_Bfree>
 8008bc2:	e695      	b.n	80088f0 <_dtoa_r+0x6a0>
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	4637      	mov	r7, r6
 8008bc8:	e7e1      	b.n	8008b8e <_dtoa_r+0x93e>
 8008bca:	9700      	str	r7, [sp, #0]
 8008bcc:	4637      	mov	r7, r6
 8008bce:	e599      	b.n	8008704 <_dtoa_r+0x4b4>
 8008bd0:	40240000 	.word	0x40240000
 8008bd4:	9b08      	ldr	r3, [sp, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 80ca 	beq.w	8008d70 <_dtoa_r+0xb20>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	9302      	str	r3, [sp, #8]
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	dd05      	ble.n	8008bf0 <_dtoa_r+0x9a0>
 8008be4:	4639      	mov	r1, r7
 8008be6:	462a      	mov	r2, r5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 fb4b 	bl	8009284 <__lshift>
 8008bee:	4607      	mov	r7, r0
 8008bf0:	f1b8 0f00 	cmp.w	r8, #0
 8008bf4:	d05b      	beq.n	8008cae <_dtoa_r+0xa5e>
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f000 f931 	bl	8008e60 <_Balloc>
 8008bfe:	4605      	mov	r5, r0
 8008c00:	b928      	cbnz	r0, 8008c0e <_dtoa_r+0x9be>
 8008c02:	4b87      	ldr	r3, [pc, #540]	; (8008e20 <_dtoa_r+0xbd0>)
 8008c04:	4602      	mov	r2, r0
 8008c06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c0a:	f7ff bb3b 	b.w	8008284 <_dtoa_r+0x34>
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	3202      	adds	r2, #2
 8008c12:	0092      	lsls	r2, r2, #2
 8008c14:	f107 010c 	add.w	r1, r7, #12
 8008c18:	300c      	adds	r0, #12
 8008c1a:	f000 f913 	bl	8008e44 <memcpy>
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4629      	mov	r1, r5
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 fb2e 	bl	8009284 <__lshift>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	f103 0901 	add.w	r9, r3, #1
 8008c2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	f00a 0301 	and.w	r3, sl, #1
 8008c3a:	46b8      	mov	r8, r7
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	4607      	mov	r7, r0
 8008c40:	4631      	mov	r1, r6
 8008c42:	ee18 0a10 	vmov	r0, s16
 8008c46:	f7ff fa77 	bl	8008138 <quorem>
 8008c4a:	4641      	mov	r1, r8
 8008c4c:	9002      	str	r0, [sp, #8]
 8008c4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c52:	ee18 0a10 	vmov	r0, s16
 8008c56:	f000 fb85 	bl	8009364 <__mcmp>
 8008c5a:	463a      	mov	r2, r7
 8008c5c:	9003      	str	r0, [sp, #12]
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fb9b 	bl	800939c <__mdiff>
 8008c66:	68c2      	ldr	r2, [r0, #12]
 8008c68:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	bb02      	cbnz	r2, 8008cb2 <_dtoa_r+0xa62>
 8008c70:	4601      	mov	r1, r0
 8008c72:	ee18 0a10 	vmov	r0, s16
 8008c76:	f000 fb75 	bl	8009364 <__mcmp>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4620      	mov	r0, r4
 8008c80:	9207      	str	r2, [sp, #28]
 8008c82:	f000 f92d 	bl	8008ee0 <_Bfree>
 8008c86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c8a:	ea43 0102 	orr.w	r1, r3, r2
 8008c8e:	9b04      	ldr	r3, [sp, #16]
 8008c90:	430b      	orrs	r3, r1
 8008c92:	464d      	mov	r5, r9
 8008c94:	d10f      	bne.n	8008cb6 <_dtoa_r+0xa66>
 8008c96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c9a:	d02a      	beq.n	8008cf2 <_dtoa_r+0xaa2>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	dd02      	ble.n	8008ca8 <_dtoa_r+0xa58>
 8008ca2:	9b02      	ldr	r3, [sp, #8]
 8008ca4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ca8:	f88b a000 	strb.w	sl, [fp]
 8008cac:	e775      	b.n	8008b9a <_dtoa_r+0x94a>
 8008cae:	4638      	mov	r0, r7
 8008cb0:	e7ba      	b.n	8008c28 <_dtoa_r+0x9d8>
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	e7e2      	b.n	8008c7c <_dtoa_r+0xa2c>
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	db04      	blt.n	8008cc6 <_dtoa_r+0xa76>
 8008cbc:	9906      	ldr	r1, [sp, #24]
 8008cbe:	430b      	orrs	r3, r1
 8008cc0:	9904      	ldr	r1, [sp, #16]
 8008cc2:	430b      	orrs	r3, r1
 8008cc4:	d122      	bne.n	8008d0c <_dtoa_r+0xabc>
 8008cc6:	2a00      	cmp	r2, #0
 8008cc8:	ddee      	ble.n	8008ca8 <_dtoa_r+0xa58>
 8008cca:	ee18 1a10 	vmov	r1, s16
 8008cce:	2201      	movs	r2, #1
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 fad7 	bl	8009284 <__lshift>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	ee08 0a10 	vmov	s16, r0
 8008cdc:	f000 fb42 	bl	8009364 <__mcmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	dc03      	bgt.n	8008cec <_dtoa_r+0xa9c>
 8008ce4:	d1e0      	bne.n	8008ca8 <_dtoa_r+0xa58>
 8008ce6:	f01a 0f01 	tst.w	sl, #1
 8008cea:	d0dd      	beq.n	8008ca8 <_dtoa_r+0xa58>
 8008cec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cf0:	d1d7      	bne.n	8008ca2 <_dtoa_r+0xa52>
 8008cf2:	2339      	movs	r3, #57	; 0x39
 8008cf4:	f88b 3000 	strb.w	r3, [fp]
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	461d      	mov	r5, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d02:	2a39      	cmp	r2, #57	; 0x39
 8008d04:	d071      	beq.n	8008dea <_dtoa_r+0xb9a>
 8008d06:	3201      	adds	r2, #1
 8008d08:	701a      	strb	r2, [r3, #0]
 8008d0a:	e746      	b.n	8008b9a <_dtoa_r+0x94a>
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	dd07      	ble.n	8008d20 <_dtoa_r+0xad0>
 8008d10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d14:	d0ed      	beq.n	8008cf2 <_dtoa_r+0xaa2>
 8008d16:	f10a 0301 	add.w	r3, sl, #1
 8008d1a:	f88b 3000 	strb.w	r3, [fp]
 8008d1e:	e73c      	b.n	8008b9a <_dtoa_r+0x94a>
 8008d20:	9b05      	ldr	r3, [sp, #20]
 8008d22:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d26:	4599      	cmp	r9, r3
 8008d28:	d047      	beq.n	8008dba <_dtoa_r+0xb6a>
 8008d2a:	ee18 1a10 	vmov	r1, s16
 8008d2e:	2300      	movs	r3, #0
 8008d30:	220a      	movs	r2, #10
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 f8f6 	bl	8008f24 <__multadd>
 8008d38:	45b8      	cmp	r8, r7
 8008d3a:	ee08 0a10 	vmov	s16, r0
 8008d3e:	f04f 0300 	mov.w	r3, #0
 8008d42:	f04f 020a 	mov.w	r2, #10
 8008d46:	4641      	mov	r1, r8
 8008d48:	4620      	mov	r0, r4
 8008d4a:	d106      	bne.n	8008d5a <_dtoa_r+0xb0a>
 8008d4c:	f000 f8ea 	bl	8008f24 <__multadd>
 8008d50:	4680      	mov	r8, r0
 8008d52:	4607      	mov	r7, r0
 8008d54:	f109 0901 	add.w	r9, r9, #1
 8008d58:	e772      	b.n	8008c40 <_dtoa_r+0x9f0>
 8008d5a:	f000 f8e3 	bl	8008f24 <__multadd>
 8008d5e:	4639      	mov	r1, r7
 8008d60:	4680      	mov	r8, r0
 8008d62:	2300      	movs	r3, #0
 8008d64:	220a      	movs	r2, #10
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 f8dc 	bl	8008f24 <__multadd>
 8008d6c:	4607      	mov	r7, r0
 8008d6e:	e7f1      	b.n	8008d54 <_dtoa_r+0xb04>
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	9302      	str	r3, [sp, #8]
 8008d74:	9d01      	ldr	r5, [sp, #4]
 8008d76:	ee18 0a10 	vmov	r0, s16
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	f7ff f9dc 	bl	8008138 <quorem>
 8008d80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d84:	9b01      	ldr	r3, [sp, #4]
 8008d86:	f805 ab01 	strb.w	sl, [r5], #1
 8008d8a:	1aea      	subs	r2, r5, r3
 8008d8c:	9b02      	ldr	r3, [sp, #8]
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	dd09      	ble.n	8008da6 <_dtoa_r+0xb56>
 8008d92:	ee18 1a10 	vmov	r1, s16
 8008d96:	2300      	movs	r3, #0
 8008d98:	220a      	movs	r2, #10
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f8c2 	bl	8008f24 <__multadd>
 8008da0:	ee08 0a10 	vmov	s16, r0
 8008da4:	e7e7      	b.n	8008d76 <_dtoa_r+0xb26>
 8008da6:	9b02      	ldr	r3, [sp, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfc8      	it	gt
 8008dac:	461d      	movgt	r5, r3
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	bfd8      	it	le
 8008db2:	2501      	movle	r5, #1
 8008db4:	441d      	add	r5, r3
 8008db6:	f04f 0800 	mov.w	r8, #0
 8008dba:	ee18 1a10 	vmov	r1, s16
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f000 fa5f 	bl	8009284 <__lshift>
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	ee08 0a10 	vmov	s16, r0
 8008dcc:	f000 faca 	bl	8009364 <__mcmp>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	dc91      	bgt.n	8008cf8 <_dtoa_r+0xaa8>
 8008dd4:	d102      	bne.n	8008ddc <_dtoa_r+0xb8c>
 8008dd6:	f01a 0f01 	tst.w	sl, #1
 8008dda:	d18d      	bne.n	8008cf8 <_dtoa_r+0xaa8>
 8008ddc:	462b      	mov	r3, r5
 8008dde:	461d      	mov	r5, r3
 8008de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008de4:	2a30      	cmp	r2, #48	; 0x30
 8008de6:	d0fa      	beq.n	8008dde <_dtoa_r+0xb8e>
 8008de8:	e6d7      	b.n	8008b9a <_dtoa_r+0x94a>
 8008dea:	9a01      	ldr	r2, [sp, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d184      	bne.n	8008cfa <_dtoa_r+0xaaa>
 8008df0:	9b00      	ldr	r3, [sp, #0]
 8008df2:	3301      	adds	r3, #1
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	2331      	movs	r3, #49	; 0x31
 8008df8:	7013      	strb	r3, [r2, #0]
 8008dfa:	e6ce      	b.n	8008b9a <_dtoa_r+0x94a>
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <_dtoa_r+0xbd4>)
 8008dfe:	f7ff ba95 	b.w	800832c <_dtoa_r+0xdc>
 8008e02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f47f aa6e 	bne.w	80082e6 <_dtoa_r+0x96>
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <_dtoa_r+0xbd8>)
 8008e0c:	f7ff ba8e 	b.w	800832c <_dtoa_r+0xdc>
 8008e10:	9b02      	ldr	r3, [sp, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dcae      	bgt.n	8008d74 <_dtoa_r+0xb24>
 8008e16:	9b06      	ldr	r3, [sp, #24]
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	f73f aea8 	bgt.w	8008b6e <_dtoa_r+0x91e>
 8008e1e:	e7a9      	b.n	8008d74 <_dtoa_r+0xb24>
 8008e20:	0800aeef 	.word	0x0800aeef
 8008e24:	0800ae4c 	.word	0x0800ae4c
 8008e28:	0800ae70 	.word	0x0800ae70

08008e2c <_localeconv_r>:
 8008e2c:	4800      	ldr	r0, [pc, #0]	; (8008e30 <_localeconv_r+0x4>)
 8008e2e:	4770      	bx	lr
 8008e30:	20000168 	.word	0x20000168

08008e34 <malloc>:
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <malloc+0xc>)
 8008e36:	4601      	mov	r1, r0
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	f000 bc17 	b.w	800966c <_malloc_r>
 8008e3e:	bf00      	nop
 8008e40:	20000014 	.word	0x20000014

08008e44 <memcpy>:
 8008e44:	440a      	add	r2, r1
 8008e46:	4291      	cmp	r1, r2
 8008e48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e4c:	d100      	bne.n	8008e50 <memcpy+0xc>
 8008e4e:	4770      	bx	lr
 8008e50:	b510      	push	{r4, lr}
 8008e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e5a:	4291      	cmp	r1, r2
 8008e5c:	d1f9      	bne.n	8008e52 <memcpy+0xe>
 8008e5e:	bd10      	pop	{r4, pc}

08008e60 <_Balloc>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e64:	4604      	mov	r4, r0
 8008e66:	460d      	mov	r5, r1
 8008e68:	b976      	cbnz	r6, 8008e88 <_Balloc+0x28>
 8008e6a:	2010      	movs	r0, #16
 8008e6c:	f7ff ffe2 	bl	8008e34 <malloc>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6260      	str	r0, [r4, #36]	; 0x24
 8008e74:	b920      	cbnz	r0, 8008e80 <_Balloc+0x20>
 8008e76:	4b18      	ldr	r3, [pc, #96]	; (8008ed8 <_Balloc+0x78>)
 8008e78:	4818      	ldr	r0, [pc, #96]	; (8008edc <_Balloc+0x7c>)
 8008e7a:	2166      	movs	r1, #102	; 0x66
 8008e7c:	f000 fdd6 	bl	8009a2c <__assert_func>
 8008e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e84:	6006      	str	r6, [r0, #0]
 8008e86:	60c6      	str	r6, [r0, #12]
 8008e88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e8a:	68f3      	ldr	r3, [r6, #12]
 8008e8c:	b183      	cbz	r3, 8008eb0 <_Balloc+0x50>
 8008e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e96:	b9b8      	cbnz	r0, 8008ec8 <_Balloc+0x68>
 8008e98:	2101      	movs	r1, #1
 8008e9a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e9e:	1d72      	adds	r2, r6, #5
 8008ea0:	0092      	lsls	r2, r2, #2
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 fb60 	bl	8009568 <_calloc_r>
 8008ea8:	b160      	cbz	r0, 8008ec4 <_Balloc+0x64>
 8008eaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008eae:	e00e      	b.n	8008ece <_Balloc+0x6e>
 8008eb0:	2221      	movs	r2, #33	; 0x21
 8008eb2:	2104      	movs	r1, #4
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 fb57 	bl	8009568 <_calloc_r>
 8008eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ebc:	60f0      	str	r0, [r6, #12]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e4      	bne.n	8008e8e <_Balloc+0x2e>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	bd70      	pop	{r4, r5, r6, pc}
 8008ec8:	6802      	ldr	r2, [r0, #0]
 8008eca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ed4:	e7f7      	b.n	8008ec6 <_Balloc+0x66>
 8008ed6:	bf00      	nop
 8008ed8:	0800ae7d 	.word	0x0800ae7d
 8008edc:	0800af00 	.word	0x0800af00

08008ee0 <_Bfree>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	b976      	cbnz	r6, 8008f08 <_Bfree+0x28>
 8008eea:	2010      	movs	r0, #16
 8008eec:	f7ff ffa2 	bl	8008e34 <malloc>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6268      	str	r0, [r5, #36]	; 0x24
 8008ef4:	b920      	cbnz	r0, 8008f00 <_Bfree+0x20>
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <_Bfree+0x3c>)
 8008ef8:	4809      	ldr	r0, [pc, #36]	; (8008f20 <_Bfree+0x40>)
 8008efa:	218a      	movs	r1, #138	; 0x8a
 8008efc:	f000 fd96 	bl	8009a2c <__assert_func>
 8008f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f04:	6006      	str	r6, [r0, #0]
 8008f06:	60c6      	str	r6, [r0, #12]
 8008f08:	b13c      	cbz	r4, 8008f1a <_Bfree+0x3a>
 8008f0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f0c:	6862      	ldr	r2, [r4, #4]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f14:	6021      	str	r1, [r4, #0]
 8008f16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f1a:	bd70      	pop	{r4, r5, r6, pc}
 8008f1c:	0800ae7d 	.word	0x0800ae7d
 8008f20:	0800af00 	.word	0x0800af00

08008f24 <__multadd>:
 8008f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f28:	690d      	ldr	r5, [r1, #16]
 8008f2a:	4607      	mov	r7, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	461e      	mov	r6, r3
 8008f30:	f101 0c14 	add.w	ip, r1, #20
 8008f34:	2000      	movs	r0, #0
 8008f36:	f8dc 3000 	ldr.w	r3, [ip]
 8008f3a:	b299      	uxth	r1, r3
 8008f3c:	fb02 6101 	mla	r1, r2, r1, r6
 8008f40:	0c1e      	lsrs	r6, r3, #16
 8008f42:	0c0b      	lsrs	r3, r1, #16
 8008f44:	fb02 3306 	mla	r3, r2, r6, r3
 8008f48:	b289      	uxth	r1, r1
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f50:	4285      	cmp	r5, r0
 8008f52:	f84c 1b04 	str.w	r1, [ip], #4
 8008f56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f5a:	dcec      	bgt.n	8008f36 <__multadd+0x12>
 8008f5c:	b30e      	cbz	r6, 8008fa2 <__multadd+0x7e>
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	42ab      	cmp	r3, r5
 8008f62:	dc19      	bgt.n	8008f98 <__multadd+0x74>
 8008f64:	6861      	ldr	r1, [r4, #4]
 8008f66:	4638      	mov	r0, r7
 8008f68:	3101      	adds	r1, #1
 8008f6a:	f7ff ff79 	bl	8008e60 <_Balloc>
 8008f6e:	4680      	mov	r8, r0
 8008f70:	b928      	cbnz	r0, 8008f7e <__multadd+0x5a>
 8008f72:	4602      	mov	r2, r0
 8008f74:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <__multadd+0x84>)
 8008f76:	480d      	ldr	r0, [pc, #52]	; (8008fac <__multadd+0x88>)
 8008f78:	21b5      	movs	r1, #181	; 0xb5
 8008f7a:	f000 fd57 	bl	8009a2c <__assert_func>
 8008f7e:	6922      	ldr	r2, [r4, #16]
 8008f80:	3202      	adds	r2, #2
 8008f82:	f104 010c 	add.w	r1, r4, #12
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	300c      	adds	r0, #12
 8008f8a:	f7ff ff5b 	bl	8008e44 <memcpy>
 8008f8e:	4621      	mov	r1, r4
 8008f90:	4638      	mov	r0, r7
 8008f92:	f7ff ffa5 	bl	8008ee0 <_Bfree>
 8008f96:	4644      	mov	r4, r8
 8008f98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	615e      	str	r6, [r3, #20]
 8008fa0:	6125      	str	r5, [r4, #16]
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	0800aeef 	.word	0x0800aeef
 8008fac:	0800af00 	.word	0x0800af00

08008fb0 <__hi0bits>:
 8008fb0:	0c03      	lsrs	r3, r0, #16
 8008fb2:	041b      	lsls	r3, r3, #16
 8008fb4:	b9d3      	cbnz	r3, 8008fec <__hi0bits+0x3c>
 8008fb6:	0400      	lsls	r0, r0, #16
 8008fb8:	2310      	movs	r3, #16
 8008fba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fbe:	bf04      	itt	eq
 8008fc0:	0200      	lsleq	r0, r0, #8
 8008fc2:	3308      	addeq	r3, #8
 8008fc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fc8:	bf04      	itt	eq
 8008fca:	0100      	lsleq	r0, r0, #4
 8008fcc:	3304      	addeq	r3, #4
 8008fce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fd2:	bf04      	itt	eq
 8008fd4:	0080      	lsleq	r0, r0, #2
 8008fd6:	3302      	addeq	r3, #2
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	db05      	blt.n	8008fe8 <__hi0bits+0x38>
 8008fdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fe0:	f103 0301 	add.w	r3, r3, #1
 8008fe4:	bf08      	it	eq
 8008fe6:	2320      	moveq	r3, #32
 8008fe8:	4618      	mov	r0, r3
 8008fea:	4770      	bx	lr
 8008fec:	2300      	movs	r3, #0
 8008fee:	e7e4      	b.n	8008fba <__hi0bits+0xa>

08008ff0 <__lo0bits>:
 8008ff0:	6803      	ldr	r3, [r0, #0]
 8008ff2:	f013 0207 	ands.w	r2, r3, #7
 8008ff6:	4601      	mov	r1, r0
 8008ff8:	d00b      	beq.n	8009012 <__lo0bits+0x22>
 8008ffa:	07da      	lsls	r2, r3, #31
 8008ffc:	d423      	bmi.n	8009046 <__lo0bits+0x56>
 8008ffe:	0798      	lsls	r0, r3, #30
 8009000:	bf49      	itett	mi
 8009002:	085b      	lsrmi	r3, r3, #1
 8009004:	089b      	lsrpl	r3, r3, #2
 8009006:	2001      	movmi	r0, #1
 8009008:	600b      	strmi	r3, [r1, #0]
 800900a:	bf5c      	itt	pl
 800900c:	600b      	strpl	r3, [r1, #0]
 800900e:	2002      	movpl	r0, #2
 8009010:	4770      	bx	lr
 8009012:	b298      	uxth	r0, r3
 8009014:	b9a8      	cbnz	r0, 8009042 <__lo0bits+0x52>
 8009016:	0c1b      	lsrs	r3, r3, #16
 8009018:	2010      	movs	r0, #16
 800901a:	b2da      	uxtb	r2, r3
 800901c:	b90a      	cbnz	r2, 8009022 <__lo0bits+0x32>
 800901e:	3008      	adds	r0, #8
 8009020:	0a1b      	lsrs	r3, r3, #8
 8009022:	071a      	lsls	r2, r3, #28
 8009024:	bf04      	itt	eq
 8009026:	091b      	lsreq	r3, r3, #4
 8009028:	3004      	addeq	r0, #4
 800902a:	079a      	lsls	r2, r3, #30
 800902c:	bf04      	itt	eq
 800902e:	089b      	lsreq	r3, r3, #2
 8009030:	3002      	addeq	r0, #2
 8009032:	07da      	lsls	r2, r3, #31
 8009034:	d403      	bmi.n	800903e <__lo0bits+0x4e>
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	f100 0001 	add.w	r0, r0, #1
 800903c:	d005      	beq.n	800904a <__lo0bits+0x5a>
 800903e:	600b      	str	r3, [r1, #0]
 8009040:	4770      	bx	lr
 8009042:	4610      	mov	r0, r2
 8009044:	e7e9      	b.n	800901a <__lo0bits+0x2a>
 8009046:	2000      	movs	r0, #0
 8009048:	4770      	bx	lr
 800904a:	2020      	movs	r0, #32
 800904c:	4770      	bx	lr
	...

08009050 <__i2b>:
 8009050:	b510      	push	{r4, lr}
 8009052:	460c      	mov	r4, r1
 8009054:	2101      	movs	r1, #1
 8009056:	f7ff ff03 	bl	8008e60 <_Balloc>
 800905a:	4602      	mov	r2, r0
 800905c:	b928      	cbnz	r0, 800906a <__i2b+0x1a>
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <__i2b+0x24>)
 8009060:	4805      	ldr	r0, [pc, #20]	; (8009078 <__i2b+0x28>)
 8009062:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009066:	f000 fce1 	bl	8009a2c <__assert_func>
 800906a:	2301      	movs	r3, #1
 800906c:	6144      	str	r4, [r0, #20]
 800906e:	6103      	str	r3, [r0, #16]
 8009070:	bd10      	pop	{r4, pc}
 8009072:	bf00      	nop
 8009074:	0800aeef 	.word	0x0800aeef
 8009078:	0800af00 	.word	0x0800af00

0800907c <__multiply>:
 800907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009080:	4691      	mov	r9, r2
 8009082:	690a      	ldr	r2, [r1, #16]
 8009084:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009088:	429a      	cmp	r2, r3
 800908a:	bfb8      	it	lt
 800908c:	460b      	movlt	r3, r1
 800908e:	460c      	mov	r4, r1
 8009090:	bfbc      	itt	lt
 8009092:	464c      	movlt	r4, r9
 8009094:	4699      	movlt	r9, r3
 8009096:	6927      	ldr	r7, [r4, #16]
 8009098:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800909c:	68a3      	ldr	r3, [r4, #8]
 800909e:	6861      	ldr	r1, [r4, #4]
 80090a0:	eb07 060a 	add.w	r6, r7, sl
 80090a4:	42b3      	cmp	r3, r6
 80090a6:	b085      	sub	sp, #20
 80090a8:	bfb8      	it	lt
 80090aa:	3101      	addlt	r1, #1
 80090ac:	f7ff fed8 	bl	8008e60 <_Balloc>
 80090b0:	b930      	cbnz	r0, 80090c0 <__multiply+0x44>
 80090b2:	4602      	mov	r2, r0
 80090b4:	4b44      	ldr	r3, [pc, #272]	; (80091c8 <__multiply+0x14c>)
 80090b6:	4845      	ldr	r0, [pc, #276]	; (80091cc <__multiply+0x150>)
 80090b8:	f240 115d 	movw	r1, #349	; 0x15d
 80090bc:	f000 fcb6 	bl	8009a2c <__assert_func>
 80090c0:	f100 0514 	add.w	r5, r0, #20
 80090c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090c8:	462b      	mov	r3, r5
 80090ca:	2200      	movs	r2, #0
 80090cc:	4543      	cmp	r3, r8
 80090ce:	d321      	bcc.n	8009114 <__multiply+0x98>
 80090d0:	f104 0314 	add.w	r3, r4, #20
 80090d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090d8:	f109 0314 	add.w	r3, r9, #20
 80090dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090e0:	9202      	str	r2, [sp, #8]
 80090e2:	1b3a      	subs	r2, r7, r4
 80090e4:	3a15      	subs	r2, #21
 80090e6:	f022 0203 	bic.w	r2, r2, #3
 80090ea:	3204      	adds	r2, #4
 80090ec:	f104 0115 	add.w	r1, r4, #21
 80090f0:	428f      	cmp	r7, r1
 80090f2:	bf38      	it	cc
 80090f4:	2204      	movcc	r2, #4
 80090f6:	9201      	str	r2, [sp, #4]
 80090f8:	9a02      	ldr	r2, [sp, #8]
 80090fa:	9303      	str	r3, [sp, #12]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d80c      	bhi.n	800911a <__multiply+0x9e>
 8009100:	2e00      	cmp	r6, #0
 8009102:	dd03      	ble.n	800910c <__multiply+0x90>
 8009104:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009108:	2b00      	cmp	r3, #0
 800910a:	d05a      	beq.n	80091c2 <__multiply+0x146>
 800910c:	6106      	str	r6, [r0, #16]
 800910e:	b005      	add	sp, #20
 8009110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009114:	f843 2b04 	str.w	r2, [r3], #4
 8009118:	e7d8      	b.n	80090cc <__multiply+0x50>
 800911a:	f8b3 a000 	ldrh.w	sl, [r3]
 800911e:	f1ba 0f00 	cmp.w	sl, #0
 8009122:	d024      	beq.n	800916e <__multiply+0xf2>
 8009124:	f104 0e14 	add.w	lr, r4, #20
 8009128:	46a9      	mov	r9, r5
 800912a:	f04f 0c00 	mov.w	ip, #0
 800912e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009132:	f8d9 1000 	ldr.w	r1, [r9]
 8009136:	fa1f fb82 	uxth.w	fp, r2
 800913a:	b289      	uxth	r1, r1
 800913c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009140:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009144:	f8d9 2000 	ldr.w	r2, [r9]
 8009148:	4461      	add	r1, ip
 800914a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800914e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009152:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009156:	b289      	uxth	r1, r1
 8009158:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800915c:	4577      	cmp	r7, lr
 800915e:	f849 1b04 	str.w	r1, [r9], #4
 8009162:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009166:	d8e2      	bhi.n	800912e <__multiply+0xb2>
 8009168:	9a01      	ldr	r2, [sp, #4]
 800916a:	f845 c002 	str.w	ip, [r5, r2]
 800916e:	9a03      	ldr	r2, [sp, #12]
 8009170:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009174:	3304      	adds	r3, #4
 8009176:	f1b9 0f00 	cmp.w	r9, #0
 800917a:	d020      	beq.n	80091be <__multiply+0x142>
 800917c:	6829      	ldr	r1, [r5, #0]
 800917e:	f104 0c14 	add.w	ip, r4, #20
 8009182:	46ae      	mov	lr, r5
 8009184:	f04f 0a00 	mov.w	sl, #0
 8009188:	f8bc b000 	ldrh.w	fp, [ip]
 800918c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009190:	fb09 220b 	mla	r2, r9, fp, r2
 8009194:	4492      	add	sl, r2
 8009196:	b289      	uxth	r1, r1
 8009198:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800919c:	f84e 1b04 	str.w	r1, [lr], #4
 80091a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80091a4:	f8be 1000 	ldrh.w	r1, [lr]
 80091a8:	0c12      	lsrs	r2, r2, #16
 80091aa:	fb09 1102 	mla	r1, r9, r2, r1
 80091ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091b2:	4567      	cmp	r7, ip
 80091b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091b8:	d8e6      	bhi.n	8009188 <__multiply+0x10c>
 80091ba:	9a01      	ldr	r2, [sp, #4]
 80091bc:	50a9      	str	r1, [r5, r2]
 80091be:	3504      	adds	r5, #4
 80091c0:	e79a      	b.n	80090f8 <__multiply+0x7c>
 80091c2:	3e01      	subs	r6, #1
 80091c4:	e79c      	b.n	8009100 <__multiply+0x84>
 80091c6:	bf00      	nop
 80091c8:	0800aeef 	.word	0x0800aeef
 80091cc:	0800af00 	.word	0x0800af00

080091d0 <__pow5mult>:
 80091d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d4:	4615      	mov	r5, r2
 80091d6:	f012 0203 	ands.w	r2, r2, #3
 80091da:	4606      	mov	r6, r0
 80091dc:	460f      	mov	r7, r1
 80091de:	d007      	beq.n	80091f0 <__pow5mult+0x20>
 80091e0:	4c25      	ldr	r4, [pc, #148]	; (8009278 <__pow5mult+0xa8>)
 80091e2:	3a01      	subs	r2, #1
 80091e4:	2300      	movs	r3, #0
 80091e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ea:	f7ff fe9b 	bl	8008f24 <__multadd>
 80091ee:	4607      	mov	r7, r0
 80091f0:	10ad      	asrs	r5, r5, #2
 80091f2:	d03d      	beq.n	8009270 <__pow5mult+0xa0>
 80091f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091f6:	b97c      	cbnz	r4, 8009218 <__pow5mult+0x48>
 80091f8:	2010      	movs	r0, #16
 80091fa:	f7ff fe1b 	bl	8008e34 <malloc>
 80091fe:	4602      	mov	r2, r0
 8009200:	6270      	str	r0, [r6, #36]	; 0x24
 8009202:	b928      	cbnz	r0, 8009210 <__pow5mult+0x40>
 8009204:	4b1d      	ldr	r3, [pc, #116]	; (800927c <__pow5mult+0xac>)
 8009206:	481e      	ldr	r0, [pc, #120]	; (8009280 <__pow5mult+0xb0>)
 8009208:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800920c:	f000 fc0e 	bl	8009a2c <__assert_func>
 8009210:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009214:	6004      	str	r4, [r0, #0]
 8009216:	60c4      	str	r4, [r0, #12]
 8009218:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800921c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009220:	b94c      	cbnz	r4, 8009236 <__pow5mult+0x66>
 8009222:	f240 2171 	movw	r1, #625	; 0x271
 8009226:	4630      	mov	r0, r6
 8009228:	f7ff ff12 	bl	8009050 <__i2b>
 800922c:	2300      	movs	r3, #0
 800922e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009232:	4604      	mov	r4, r0
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	f04f 0900 	mov.w	r9, #0
 800923a:	07eb      	lsls	r3, r5, #31
 800923c:	d50a      	bpl.n	8009254 <__pow5mult+0x84>
 800923e:	4639      	mov	r1, r7
 8009240:	4622      	mov	r2, r4
 8009242:	4630      	mov	r0, r6
 8009244:	f7ff ff1a 	bl	800907c <__multiply>
 8009248:	4639      	mov	r1, r7
 800924a:	4680      	mov	r8, r0
 800924c:	4630      	mov	r0, r6
 800924e:	f7ff fe47 	bl	8008ee0 <_Bfree>
 8009252:	4647      	mov	r7, r8
 8009254:	106d      	asrs	r5, r5, #1
 8009256:	d00b      	beq.n	8009270 <__pow5mult+0xa0>
 8009258:	6820      	ldr	r0, [r4, #0]
 800925a:	b938      	cbnz	r0, 800926c <__pow5mult+0x9c>
 800925c:	4622      	mov	r2, r4
 800925e:	4621      	mov	r1, r4
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff ff0b 	bl	800907c <__multiply>
 8009266:	6020      	str	r0, [r4, #0]
 8009268:	f8c0 9000 	str.w	r9, [r0]
 800926c:	4604      	mov	r4, r0
 800926e:	e7e4      	b.n	800923a <__pow5mult+0x6a>
 8009270:	4638      	mov	r0, r7
 8009272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009276:	bf00      	nop
 8009278:	0800b050 	.word	0x0800b050
 800927c:	0800ae7d 	.word	0x0800ae7d
 8009280:	0800af00 	.word	0x0800af00

08009284 <__lshift>:
 8009284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009288:	460c      	mov	r4, r1
 800928a:	6849      	ldr	r1, [r1, #4]
 800928c:	6923      	ldr	r3, [r4, #16]
 800928e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009292:	68a3      	ldr	r3, [r4, #8]
 8009294:	4607      	mov	r7, r0
 8009296:	4691      	mov	r9, r2
 8009298:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800929c:	f108 0601 	add.w	r6, r8, #1
 80092a0:	42b3      	cmp	r3, r6
 80092a2:	db0b      	blt.n	80092bc <__lshift+0x38>
 80092a4:	4638      	mov	r0, r7
 80092a6:	f7ff fddb 	bl	8008e60 <_Balloc>
 80092aa:	4605      	mov	r5, r0
 80092ac:	b948      	cbnz	r0, 80092c2 <__lshift+0x3e>
 80092ae:	4602      	mov	r2, r0
 80092b0:	4b2a      	ldr	r3, [pc, #168]	; (800935c <__lshift+0xd8>)
 80092b2:	482b      	ldr	r0, [pc, #172]	; (8009360 <__lshift+0xdc>)
 80092b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092b8:	f000 fbb8 	bl	8009a2c <__assert_func>
 80092bc:	3101      	adds	r1, #1
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	e7ee      	b.n	80092a0 <__lshift+0x1c>
 80092c2:	2300      	movs	r3, #0
 80092c4:	f100 0114 	add.w	r1, r0, #20
 80092c8:	f100 0210 	add.w	r2, r0, #16
 80092cc:	4618      	mov	r0, r3
 80092ce:	4553      	cmp	r3, sl
 80092d0:	db37      	blt.n	8009342 <__lshift+0xbe>
 80092d2:	6920      	ldr	r0, [r4, #16]
 80092d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092d8:	f104 0314 	add.w	r3, r4, #20
 80092dc:	f019 091f 	ands.w	r9, r9, #31
 80092e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092e8:	d02f      	beq.n	800934a <__lshift+0xc6>
 80092ea:	f1c9 0e20 	rsb	lr, r9, #32
 80092ee:	468a      	mov	sl, r1
 80092f0:	f04f 0c00 	mov.w	ip, #0
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	fa02 f209 	lsl.w	r2, r2, r9
 80092fa:	ea42 020c 	orr.w	r2, r2, ip
 80092fe:	f84a 2b04 	str.w	r2, [sl], #4
 8009302:	f853 2b04 	ldr.w	r2, [r3], #4
 8009306:	4298      	cmp	r0, r3
 8009308:	fa22 fc0e 	lsr.w	ip, r2, lr
 800930c:	d8f2      	bhi.n	80092f4 <__lshift+0x70>
 800930e:	1b03      	subs	r3, r0, r4
 8009310:	3b15      	subs	r3, #21
 8009312:	f023 0303 	bic.w	r3, r3, #3
 8009316:	3304      	adds	r3, #4
 8009318:	f104 0215 	add.w	r2, r4, #21
 800931c:	4290      	cmp	r0, r2
 800931e:	bf38      	it	cc
 8009320:	2304      	movcc	r3, #4
 8009322:	f841 c003 	str.w	ip, [r1, r3]
 8009326:	f1bc 0f00 	cmp.w	ip, #0
 800932a:	d001      	beq.n	8009330 <__lshift+0xac>
 800932c:	f108 0602 	add.w	r6, r8, #2
 8009330:	3e01      	subs	r6, #1
 8009332:	4638      	mov	r0, r7
 8009334:	612e      	str	r6, [r5, #16]
 8009336:	4621      	mov	r1, r4
 8009338:	f7ff fdd2 	bl	8008ee0 <_Bfree>
 800933c:	4628      	mov	r0, r5
 800933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009342:	f842 0f04 	str.w	r0, [r2, #4]!
 8009346:	3301      	adds	r3, #1
 8009348:	e7c1      	b.n	80092ce <__lshift+0x4a>
 800934a:	3904      	subs	r1, #4
 800934c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009350:	f841 2f04 	str.w	r2, [r1, #4]!
 8009354:	4298      	cmp	r0, r3
 8009356:	d8f9      	bhi.n	800934c <__lshift+0xc8>
 8009358:	e7ea      	b.n	8009330 <__lshift+0xac>
 800935a:	bf00      	nop
 800935c:	0800aeef 	.word	0x0800aeef
 8009360:	0800af00 	.word	0x0800af00

08009364 <__mcmp>:
 8009364:	b530      	push	{r4, r5, lr}
 8009366:	6902      	ldr	r2, [r0, #16]
 8009368:	690c      	ldr	r4, [r1, #16]
 800936a:	1b12      	subs	r2, r2, r4
 800936c:	d10e      	bne.n	800938c <__mcmp+0x28>
 800936e:	f100 0314 	add.w	r3, r0, #20
 8009372:	3114      	adds	r1, #20
 8009374:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009378:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800937c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009380:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009384:	42a5      	cmp	r5, r4
 8009386:	d003      	beq.n	8009390 <__mcmp+0x2c>
 8009388:	d305      	bcc.n	8009396 <__mcmp+0x32>
 800938a:	2201      	movs	r2, #1
 800938c:	4610      	mov	r0, r2
 800938e:	bd30      	pop	{r4, r5, pc}
 8009390:	4283      	cmp	r3, r0
 8009392:	d3f3      	bcc.n	800937c <__mcmp+0x18>
 8009394:	e7fa      	b.n	800938c <__mcmp+0x28>
 8009396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800939a:	e7f7      	b.n	800938c <__mcmp+0x28>

0800939c <__mdiff>:
 800939c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	460c      	mov	r4, r1
 80093a2:	4606      	mov	r6, r0
 80093a4:	4611      	mov	r1, r2
 80093a6:	4620      	mov	r0, r4
 80093a8:	4690      	mov	r8, r2
 80093aa:	f7ff ffdb 	bl	8009364 <__mcmp>
 80093ae:	1e05      	subs	r5, r0, #0
 80093b0:	d110      	bne.n	80093d4 <__mdiff+0x38>
 80093b2:	4629      	mov	r1, r5
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff fd53 	bl	8008e60 <_Balloc>
 80093ba:	b930      	cbnz	r0, 80093ca <__mdiff+0x2e>
 80093bc:	4b3a      	ldr	r3, [pc, #232]	; (80094a8 <__mdiff+0x10c>)
 80093be:	4602      	mov	r2, r0
 80093c0:	f240 2132 	movw	r1, #562	; 0x232
 80093c4:	4839      	ldr	r0, [pc, #228]	; (80094ac <__mdiff+0x110>)
 80093c6:	f000 fb31 	bl	8009a2c <__assert_func>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093d4:	bfa4      	itt	ge
 80093d6:	4643      	movge	r3, r8
 80093d8:	46a0      	movge	r8, r4
 80093da:	4630      	mov	r0, r6
 80093dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093e0:	bfa6      	itte	ge
 80093e2:	461c      	movge	r4, r3
 80093e4:	2500      	movge	r5, #0
 80093e6:	2501      	movlt	r5, #1
 80093e8:	f7ff fd3a 	bl	8008e60 <_Balloc>
 80093ec:	b920      	cbnz	r0, 80093f8 <__mdiff+0x5c>
 80093ee:	4b2e      	ldr	r3, [pc, #184]	; (80094a8 <__mdiff+0x10c>)
 80093f0:	4602      	mov	r2, r0
 80093f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093f6:	e7e5      	b.n	80093c4 <__mdiff+0x28>
 80093f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093fc:	6926      	ldr	r6, [r4, #16]
 80093fe:	60c5      	str	r5, [r0, #12]
 8009400:	f104 0914 	add.w	r9, r4, #20
 8009404:	f108 0514 	add.w	r5, r8, #20
 8009408:	f100 0e14 	add.w	lr, r0, #20
 800940c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009410:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009414:	f108 0210 	add.w	r2, r8, #16
 8009418:	46f2      	mov	sl, lr
 800941a:	2100      	movs	r1, #0
 800941c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009420:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009424:	fa1f f883 	uxth.w	r8, r3
 8009428:	fa11 f18b 	uxtah	r1, r1, fp
 800942c:	0c1b      	lsrs	r3, r3, #16
 800942e:	eba1 0808 	sub.w	r8, r1, r8
 8009432:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009436:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800943a:	fa1f f888 	uxth.w	r8, r8
 800943e:	1419      	asrs	r1, r3, #16
 8009440:	454e      	cmp	r6, r9
 8009442:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009446:	f84a 3b04 	str.w	r3, [sl], #4
 800944a:	d8e7      	bhi.n	800941c <__mdiff+0x80>
 800944c:	1b33      	subs	r3, r6, r4
 800944e:	3b15      	subs	r3, #21
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3304      	adds	r3, #4
 8009456:	3415      	adds	r4, #21
 8009458:	42a6      	cmp	r6, r4
 800945a:	bf38      	it	cc
 800945c:	2304      	movcc	r3, #4
 800945e:	441d      	add	r5, r3
 8009460:	4473      	add	r3, lr
 8009462:	469e      	mov	lr, r3
 8009464:	462e      	mov	r6, r5
 8009466:	4566      	cmp	r6, ip
 8009468:	d30e      	bcc.n	8009488 <__mdiff+0xec>
 800946a:	f10c 0203 	add.w	r2, ip, #3
 800946e:	1b52      	subs	r2, r2, r5
 8009470:	f022 0203 	bic.w	r2, r2, #3
 8009474:	3d03      	subs	r5, #3
 8009476:	45ac      	cmp	ip, r5
 8009478:	bf38      	it	cc
 800947a:	2200      	movcc	r2, #0
 800947c:	441a      	add	r2, r3
 800947e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009482:	b17b      	cbz	r3, 80094a4 <__mdiff+0x108>
 8009484:	6107      	str	r7, [r0, #16]
 8009486:	e7a3      	b.n	80093d0 <__mdiff+0x34>
 8009488:	f856 8b04 	ldr.w	r8, [r6], #4
 800948c:	fa11 f288 	uxtah	r2, r1, r8
 8009490:	1414      	asrs	r4, r2, #16
 8009492:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009496:	b292      	uxth	r2, r2
 8009498:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800949c:	f84e 2b04 	str.w	r2, [lr], #4
 80094a0:	1421      	asrs	r1, r4, #16
 80094a2:	e7e0      	b.n	8009466 <__mdiff+0xca>
 80094a4:	3f01      	subs	r7, #1
 80094a6:	e7ea      	b.n	800947e <__mdiff+0xe2>
 80094a8:	0800aeef 	.word	0x0800aeef
 80094ac:	0800af00 	.word	0x0800af00

080094b0 <__d2b>:
 80094b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	4689      	mov	r9, r1
 80094b6:	2101      	movs	r1, #1
 80094b8:	ec57 6b10 	vmov	r6, r7, d0
 80094bc:	4690      	mov	r8, r2
 80094be:	f7ff fccf 	bl	8008e60 <_Balloc>
 80094c2:	4604      	mov	r4, r0
 80094c4:	b930      	cbnz	r0, 80094d4 <__d2b+0x24>
 80094c6:	4602      	mov	r2, r0
 80094c8:	4b25      	ldr	r3, [pc, #148]	; (8009560 <__d2b+0xb0>)
 80094ca:	4826      	ldr	r0, [pc, #152]	; (8009564 <__d2b+0xb4>)
 80094cc:	f240 310a 	movw	r1, #778	; 0x30a
 80094d0:	f000 faac 	bl	8009a2c <__assert_func>
 80094d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80094d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094dc:	bb35      	cbnz	r5, 800952c <__d2b+0x7c>
 80094de:	2e00      	cmp	r6, #0
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	d028      	beq.n	8009536 <__d2b+0x86>
 80094e4:	4668      	mov	r0, sp
 80094e6:	9600      	str	r6, [sp, #0]
 80094e8:	f7ff fd82 	bl	8008ff0 <__lo0bits>
 80094ec:	9900      	ldr	r1, [sp, #0]
 80094ee:	b300      	cbz	r0, 8009532 <__d2b+0x82>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	f1c0 0320 	rsb	r3, r0, #32
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	430b      	orrs	r3, r1
 80094fc:	40c2      	lsrs	r2, r0
 80094fe:	6163      	str	r3, [r4, #20]
 8009500:	9201      	str	r2, [sp, #4]
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	61a3      	str	r3, [r4, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	bf14      	ite	ne
 800950a:	2202      	movne	r2, #2
 800950c:	2201      	moveq	r2, #1
 800950e:	6122      	str	r2, [r4, #16]
 8009510:	b1d5      	cbz	r5, 8009548 <__d2b+0x98>
 8009512:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009516:	4405      	add	r5, r0
 8009518:	f8c9 5000 	str.w	r5, [r9]
 800951c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009520:	f8c8 0000 	str.w	r0, [r8]
 8009524:	4620      	mov	r0, r4
 8009526:	b003      	add	sp, #12
 8009528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800952c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009530:	e7d5      	b.n	80094de <__d2b+0x2e>
 8009532:	6161      	str	r1, [r4, #20]
 8009534:	e7e5      	b.n	8009502 <__d2b+0x52>
 8009536:	a801      	add	r0, sp, #4
 8009538:	f7ff fd5a 	bl	8008ff0 <__lo0bits>
 800953c:	9b01      	ldr	r3, [sp, #4]
 800953e:	6163      	str	r3, [r4, #20]
 8009540:	2201      	movs	r2, #1
 8009542:	6122      	str	r2, [r4, #16]
 8009544:	3020      	adds	r0, #32
 8009546:	e7e3      	b.n	8009510 <__d2b+0x60>
 8009548:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800954c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009550:	f8c9 0000 	str.w	r0, [r9]
 8009554:	6918      	ldr	r0, [r3, #16]
 8009556:	f7ff fd2b 	bl	8008fb0 <__hi0bits>
 800955a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800955e:	e7df      	b.n	8009520 <__d2b+0x70>
 8009560:	0800aeef 	.word	0x0800aeef
 8009564:	0800af00 	.word	0x0800af00

08009568 <_calloc_r>:
 8009568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800956a:	fba1 2402 	umull	r2, r4, r1, r2
 800956e:	b94c      	cbnz	r4, 8009584 <_calloc_r+0x1c>
 8009570:	4611      	mov	r1, r2
 8009572:	9201      	str	r2, [sp, #4]
 8009574:	f000 f87a 	bl	800966c <_malloc_r>
 8009578:	9a01      	ldr	r2, [sp, #4]
 800957a:	4605      	mov	r5, r0
 800957c:	b930      	cbnz	r0, 800958c <_calloc_r+0x24>
 800957e:	4628      	mov	r0, r5
 8009580:	b003      	add	sp, #12
 8009582:	bd30      	pop	{r4, r5, pc}
 8009584:	220c      	movs	r2, #12
 8009586:	6002      	str	r2, [r0, #0]
 8009588:	2500      	movs	r5, #0
 800958a:	e7f8      	b.n	800957e <_calloc_r+0x16>
 800958c:	4621      	mov	r1, r4
 800958e:	f7fe f90d 	bl	80077ac <memset>
 8009592:	e7f4      	b.n	800957e <_calloc_r+0x16>

08009594 <_free_r>:
 8009594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009596:	2900      	cmp	r1, #0
 8009598:	d044      	beq.n	8009624 <_free_r+0x90>
 800959a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800959e:	9001      	str	r0, [sp, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f1a1 0404 	sub.w	r4, r1, #4
 80095a6:	bfb8      	it	lt
 80095a8:	18e4      	addlt	r4, r4, r3
 80095aa:	f000 fa9b 	bl	8009ae4 <__malloc_lock>
 80095ae:	4a1e      	ldr	r2, [pc, #120]	; (8009628 <_free_r+0x94>)
 80095b0:	9801      	ldr	r0, [sp, #4]
 80095b2:	6813      	ldr	r3, [r2, #0]
 80095b4:	b933      	cbnz	r3, 80095c4 <_free_r+0x30>
 80095b6:	6063      	str	r3, [r4, #4]
 80095b8:	6014      	str	r4, [r2, #0]
 80095ba:	b003      	add	sp, #12
 80095bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095c0:	f000 ba96 	b.w	8009af0 <__malloc_unlock>
 80095c4:	42a3      	cmp	r3, r4
 80095c6:	d908      	bls.n	80095da <_free_r+0x46>
 80095c8:	6825      	ldr	r5, [r4, #0]
 80095ca:	1961      	adds	r1, r4, r5
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf01      	itttt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	1949      	addeq	r1, r1, r5
 80095d6:	6021      	streq	r1, [r4, #0]
 80095d8:	e7ed      	b.n	80095b6 <_free_r+0x22>
 80095da:	461a      	mov	r2, r3
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b10b      	cbz	r3, 80095e4 <_free_r+0x50>
 80095e0:	42a3      	cmp	r3, r4
 80095e2:	d9fa      	bls.n	80095da <_free_r+0x46>
 80095e4:	6811      	ldr	r1, [r2, #0]
 80095e6:	1855      	adds	r5, r2, r1
 80095e8:	42a5      	cmp	r5, r4
 80095ea:	d10b      	bne.n	8009604 <_free_r+0x70>
 80095ec:	6824      	ldr	r4, [r4, #0]
 80095ee:	4421      	add	r1, r4
 80095f0:	1854      	adds	r4, r2, r1
 80095f2:	42a3      	cmp	r3, r4
 80095f4:	6011      	str	r1, [r2, #0]
 80095f6:	d1e0      	bne.n	80095ba <_free_r+0x26>
 80095f8:	681c      	ldr	r4, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	6053      	str	r3, [r2, #4]
 80095fe:	4421      	add	r1, r4
 8009600:	6011      	str	r1, [r2, #0]
 8009602:	e7da      	b.n	80095ba <_free_r+0x26>
 8009604:	d902      	bls.n	800960c <_free_r+0x78>
 8009606:	230c      	movs	r3, #12
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	e7d6      	b.n	80095ba <_free_r+0x26>
 800960c:	6825      	ldr	r5, [r4, #0]
 800960e:	1961      	adds	r1, r4, r5
 8009610:	428b      	cmp	r3, r1
 8009612:	bf04      	itt	eq
 8009614:	6819      	ldreq	r1, [r3, #0]
 8009616:	685b      	ldreq	r3, [r3, #4]
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	bf04      	itt	eq
 800961c:	1949      	addeq	r1, r1, r5
 800961e:	6021      	streq	r1, [r4, #0]
 8009620:	6054      	str	r4, [r2, #4]
 8009622:	e7ca      	b.n	80095ba <_free_r+0x26>
 8009624:	b003      	add	sp, #12
 8009626:	bd30      	pop	{r4, r5, pc}
 8009628:	20000450 	.word	0x20000450

0800962c <sbrk_aligned>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	4e0e      	ldr	r6, [pc, #56]	; (8009668 <sbrk_aligned+0x3c>)
 8009630:	460c      	mov	r4, r1
 8009632:	6831      	ldr	r1, [r6, #0]
 8009634:	4605      	mov	r5, r0
 8009636:	b911      	cbnz	r1, 800963e <sbrk_aligned+0x12>
 8009638:	f000 f9e8 	bl	8009a0c <_sbrk_r>
 800963c:	6030      	str	r0, [r6, #0]
 800963e:	4621      	mov	r1, r4
 8009640:	4628      	mov	r0, r5
 8009642:	f000 f9e3 	bl	8009a0c <_sbrk_r>
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	d00a      	beq.n	8009660 <sbrk_aligned+0x34>
 800964a:	1cc4      	adds	r4, r0, #3
 800964c:	f024 0403 	bic.w	r4, r4, #3
 8009650:	42a0      	cmp	r0, r4
 8009652:	d007      	beq.n	8009664 <sbrk_aligned+0x38>
 8009654:	1a21      	subs	r1, r4, r0
 8009656:	4628      	mov	r0, r5
 8009658:	f000 f9d8 	bl	8009a0c <_sbrk_r>
 800965c:	3001      	adds	r0, #1
 800965e:	d101      	bne.n	8009664 <sbrk_aligned+0x38>
 8009660:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009664:	4620      	mov	r0, r4
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	20000454 	.word	0x20000454

0800966c <_malloc_r>:
 800966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009670:	1ccd      	adds	r5, r1, #3
 8009672:	f025 0503 	bic.w	r5, r5, #3
 8009676:	3508      	adds	r5, #8
 8009678:	2d0c      	cmp	r5, #12
 800967a:	bf38      	it	cc
 800967c:	250c      	movcc	r5, #12
 800967e:	2d00      	cmp	r5, #0
 8009680:	4607      	mov	r7, r0
 8009682:	db01      	blt.n	8009688 <_malloc_r+0x1c>
 8009684:	42a9      	cmp	r1, r5
 8009686:	d905      	bls.n	8009694 <_malloc_r+0x28>
 8009688:	230c      	movs	r3, #12
 800968a:	603b      	str	r3, [r7, #0]
 800968c:	2600      	movs	r6, #0
 800968e:	4630      	mov	r0, r6
 8009690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009694:	4e2e      	ldr	r6, [pc, #184]	; (8009750 <_malloc_r+0xe4>)
 8009696:	f000 fa25 	bl	8009ae4 <__malloc_lock>
 800969a:	6833      	ldr	r3, [r6, #0]
 800969c:	461c      	mov	r4, r3
 800969e:	bb34      	cbnz	r4, 80096ee <_malloc_r+0x82>
 80096a0:	4629      	mov	r1, r5
 80096a2:	4638      	mov	r0, r7
 80096a4:	f7ff ffc2 	bl	800962c <sbrk_aligned>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	4604      	mov	r4, r0
 80096ac:	d14d      	bne.n	800974a <_malloc_r+0xde>
 80096ae:	6834      	ldr	r4, [r6, #0]
 80096b0:	4626      	mov	r6, r4
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	d140      	bne.n	8009738 <_malloc_r+0xcc>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4631      	mov	r1, r6
 80096ba:	4638      	mov	r0, r7
 80096bc:	eb04 0803 	add.w	r8, r4, r3
 80096c0:	f000 f9a4 	bl	8009a0c <_sbrk_r>
 80096c4:	4580      	cmp	r8, r0
 80096c6:	d13a      	bne.n	800973e <_malloc_r+0xd2>
 80096c8:	6821      	ldr	r1, [r4, #0]
 80096ca:	3503      	adds	r5, #3
 80096cc:	1a6d      	subs	r5, r5, r1
 80096ce:	f025 0503 	bic.w	r5, r5, #3
 80096d2:	3508      	adds	r5, #8
 80096d4:	2d0c      	cmp	r5, #12
 80096d6:	bf38      	it	cc
 80096d8:	250c      	movcc	r5, #12
 80096da:	4629      	mov	r1, r5
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff ffa5 	bl	800962c <sbrk_aligned>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d02b      	beq.n	800973e <_malloc_r+0xd2>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	442b      	add	r3, r5
 80096ea:	6023      	str	r3, [r4, #0]
 80096ec:	e00e      	b.n	800970c <_malloc_r+0xa0>
 80096ee:	6822      	ldr	r2, [r4, #0]
 80096f0:	1b52      	subs	r2, r2, r5
 80096f2:	d41e      	bmi.n	8009732 <_malloc_r+0xc6>
 80096f4:	2a0b      	cmp	r2, #11
 80096f6:	d916      	bls.n	8009726 <_malloc_r+0xba>
 80096f8:	1961      	adds	r1, r4, r5
 80096fa:	42a3      	cmp	r3, r4
 80096fc:	6025      	str	r5, [r4, #0]
 80096fe:	bf18      	it	ne
 8009700:	6059      	strne	r1, [r3, #4]
 8009702:	6863      	ldr	r3, [r4, #4]
 8009704:	bf08      	it	eq
 8009706:	6031      	streq	r1, [r6, #0]
 8009708:	5162      	str	r2, [r4, r5]
 800970a:	604b      	str	r3, [r1, #4]
 800970c:	4638      	mov	r0, r7
 800970e:	f104 060b 	add.w	r6, r4, #11
 8009712:	f000 f9ed 	bl	8009af0 <__malloc_unlock>
 8009716:	f026 0607 	bic.w	r6, r6, #7
 800971a:	1d23      	adds	r3, r4, #4
 800971c:	1af2      	subs	r2, r6, r3
 800971e:	d0b6      	beq.n	800968e <_malloc_r+0x22>
 8009720:	1b9b      	subs	r3, r3, r6
 8009722:	50a3      	str	r3, [r4, r2]
 8009724:	e7b3      	b.n	800968e <_malloc_r+0x22>
 8009726:	6862      	ldr	r2, [r4, #4]
 8009728:	42a3      	cmp	r3, r4
 800972a:	bf0c      	ite	eq
 800972c:	6032      	streq	r2, [r6, #0]
 800972e:	605a      	strne	r2, [r3, #4]
 8009730:	e7ec      	b.n	800970c <_malloc_r+0xa0>
 8009732:	4623      	mov	r3, r4
 8009734:	6864      	ldr	r4, [r4, #4]
 8009736:	e7b2      	b.n	800969e <_malloc_r+0x32>
 8009738:	4634      	mov	r4, r6
 800973a:	6876      	ldr	r6, [r6, #4]
 800973c:	e7b9      	b.n	80096b2 <_malloc_r+0x46>
 800973e:	230c      	movs	r3, #12
 8009740:	603b      	str	r3, [r7, #0]
 8009742:	4638      	mov	r0, r7
 8009744:	f000 f9d4 	bl	8009af0 <__malloc_unlock>
 8009748:	e7a1      	b.n	800968e <_malloc_r+0x22>
 800974a:	6025      	str	r5, [r4, #0]
 800974c:	e7de      	b.n	800970c <_malloc_r+0xa0>
 800974e:	bf00      	nop
 8009750:	20000450 	.word	0x20000450

08009754 <__ssputs_r>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	688e      	ldr	r6, [r1, #8]
 800975a:	429e      	cmp	r6, r3
 800975c:	4682      	mov	sl, r0
 800975e:	460c      	mov	r4, r1
 8009760:	4690      	mov	r8, r2
 8009762:	461f      	mov	r7, r3
 8009764:	d838      	bhi.n	80097d8 <__ssputs_r+0x84>
 8009766:	898a      	ldrh	r2, [r1, #12]
 8009768:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800976c:	d032      	beq.n	80097d4 <__ssputs_r+0x80>
 800976e:	6825      	ldr	r5, [r4, #0]
 8009770:	6909      	ldr	r1, [r1, #16]
 8009772:	eba5 0901 	sub.w	r9, r5, r1
 8009776:	6965      	ldr	r5, [r4, #20]
 8009778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800977c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009780:	3301      	adds	r3, #1
 8009782:	444b      	add	r3, r9
 8009784:	106d      	asrs	r5, r5, #1
 8009786:	429d      	cmp	r5, r3
 8009788:	bf38      	it	cc
 800978a:	461d      	movcc	r5, r3
 800978c:	0553      	lsls	r3, r2, #21
 800978e:	d531      	bpl.n	80097f4 <__ssputs_r+0xa0>
 8009790:	4629      	mov	r1, r5
 8009792:	f7ff ff6b 	bl	800966c <_malloc_r>
 8009796:	4606      	mov	r6, r0
 8009798:	b950      	cbnz	r0, 80097b0 <__ssputs_r+0x5c>
 800979a:	230c      	movs	r3, #12
 800979c:	f8ca 3000 	str.w	r3, [sl]
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b0:	6921      	ldr	r1, [r4, #16]
 80097b2:	464a      	mov	r2, r9
 80097b4:	f7ff fb46 	bl	8008e44 <memcpy>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80097be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	6126      	str	r6, [r4, #16]
 80097c6:	6165      	str	r5, [r4, #20]
 80097c8:	444e      	add	r6, r9
 80097ca:	eba5 0509 	sub.w	r5, r5, r9
 80097ce:	6026      	str	r6, [r4, #0]
 80097d0:	60a5      	str	r5, [r4, #8]
 80097d2:	463e      	mov	r6, r7
 80097d4:	42be      	cmp	r6, r7
 80097d6:	d900      	bls.n	80097da <__ssputs_r+0x86>
 80097d8:	463e      	mov	r6, r7
 80097da:	6820      	ldr	r0, [r4, #0]
 80097dc:	4632      	mov	r2, r6
 80097de:	4641      	mov	r1, r8
 80097e0:	f000 f966 	bl	8009ab0 <memmove>
 80097e4:	68a3      	ldr	r3, [r4, #8]
 80097e6:	1b9b      	subs	r3, r3, r6
 80097e8:	60a3      	str	r3, [r4, #8]
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	4433      	add	r3, r6
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	2000      	movs	r0, #0
 80097f2:	e7db      	b.n	80097ac <__ssputs_r+0x58>
 80097f4:	462a      	mov	r2, r5
 80097f6:	f000 f981 	bl	8009afc <_realloc_r>
 80097fa:	4606      	mov	r6, r0
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d1e1      	bne.n	80097c4 <__ssputs_r+0x70>
 8009800:	6921      	ldr	r1, [r4, #16]
 8009802:	4650      	mov	r0, sl
 8009804:	f7ff fec6 	bl	8009594 <_free_r>
 8009808:	e7c7      	b.n	800979a <__ssputs_r+0x46>
	...

0800980c <_svfiprintf_r>:
 800980c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009810:	4698      	mov	r8, r3
 8009812:	898b      	ldrh	r3, [r1, #12]
 8009814:	061b      	lsls	r3, r3, #24
 8009816:	b09d      	sub	sp, #116	; 0x74
 8009818:	4607      	mov	r7, r0
 800981a:	460d      	mov	r5, r1
 800981c:	4614      	mov	r4, r2
 800981e:	d50e      	bpl.n	800983e <_svfiprintf_r+0x32>
 8009820:	690b      	ldr	r3, [r1, #16]
 8009822:	b963      	cbnz	r3, 800983e <_svfiprintf_r+0x32>
 8009824:	2140      	movs	r1, #64	; 0x40
 8009826:	f7ff ff21 	bl	800966c <_malloc_r>
 800982a:	6028      	str	r0, [r5, #0]
 800982c:	6128      	str	r0, [r5, #16]
 800982e:	b920      	cbnz	r0, 800983a <_svfiprintf_r+0x2e>
 8009830:	230c      	movs	r3, #12
 8009832:	603b      	str	r3, [r7, #0]
 8009834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009838:	e0d1      	b.n	80099de <_svfiprintf_r+0x1d2>
 800983a:	2340      	movs	r3, #64	; 0x40
 800983c:	616b      	str	r3, [r5, #20]
 800983e:	2300      	movs	r3, #0
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
 8009842:	2320      	movs	r3, #32
 8009844:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009848:	f8cd 800c 	str.w	r8, [sp, #12]
 800984c:	2330      	movs	r3, #48	; 0x30
 800984e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099f8 <_svfiprintf_r+0x1ec>
 8009852:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009856:	f04f 0901 	mov.w	r9, #1
 800985a:	4623      	mov	r3, r4
 800985c:	469a      	mov	sl, r3
 800985e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009862:	b10a      	cbz	r2, 8009868 <_svfiprintf_r+0x5c>
 8009864:	2a25      	cmp	r2, #37	; 0x25
 8009866:	d1f9      	bne.n	800985c <_svfiprintf_r+0x50>
 8009868:	ebba 0b04 	subs.w	fp, sl, r4
 800986c:	d00b      	beq.n	8009886 <_svfiprintf_r+0x7a>
 800986e:	465b      	mov	r3, fp
 8009870:	4622      	mov	r2, r4
 8009872:	4629      	mov	r1, r5
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ff6d 	bl	8009754 <__ssputs_r>
 800987a:	3001      	adds	r0, #1
 800987c:	f000 80aa 	beq.w	80099d4 <_svfiprintf_r+0x1c8>
 8009880:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009882:	445a      	add	r2, fp
 8009884:	9209      	str	r2, [sp, #36]	; 0x24
 8009886:	f89a 3000 	ldrb.w	r3, [sl]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 80a2 	beq.w	80099d4 <_svfiprintf_r+0x1c8>
 8009890:	2300      	movs	r3, #0
 8009892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989a:	f10a 0a01 	add.w	sl, sl, #1
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098a6:	931a      	str	r3, [sp, #104]	; 0x68
 80098a8:	4654      	mov	r4, sl
 80098aa:	2205      	movs	r2, #5
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	4851      	ldr	r0, [pc, #324]	; (80099f8 <_svfiprintf_r+0x1ec>)
 80098b2:	f7f6 fc9d 	bl	80001f0 <memchr>
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	b9d8      	cbnz	r0, 80098f2 <_svfiprintf_r+0xe6>
 80098ba:	06d0      	lsls	r0, r2, #27
 80098bc:	bf44      	itt	mi
 80098be:	2320      	movmi	r3, #32
 80098c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098c4:	0711      	lsls	r1, r2, #28
 80098c6:	bf44      	itt	mi
 80098c8:	232b      	movmi	r3, #43	; 0x2b
 80098ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ce:	f89a 3000 	ldrb.w	r3, [sl]
 80098d2:	2b2a      	cmp	r3, #42	; 0x2a
 80098d4:	d015      	beq.n	8009902 <_svfiprintf_r+0xf6>
 80098d6:	9a07      	ldr	r2, [sp, #28]
 80098d8:	4654      	mov	r4, sl
 80098da:	2000      	movs	r0, #0
 80098dc:	f04f 0c0a 	mov.w	ip, #10
 80098e0:	4621      	mov	r1, r4
 80098e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e6:	3b30      	subs	r3, #48	; 0x30
 80098e8:	2b09      	cmp	r3, #9
 80098ea:	d94e      	bls.n	800998a <_svfiprintf_r+0x17e>
 80098ec:	b1b0      	cbz	r0, 800991c <_svfiprintf_r+0x110>
 80098ee:	9207      	str	r2, [sp, #28]
 80098f0:	e014      	b.n	800991c <_svfiprintf_r+0x110>
 80098f2:	eba0 0308 	sub.w	r3, r0, r8
 80098f6:	fa09 f303 	lsl.w	r3, r9, r3
 80098fa:	4313      	orrs	r3, r2
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	46a2      	mov	sl, r4
 8009900:	e7d2      	b.n	80098a8 <_svfiprintf_r+0x9c>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	1d19      	adds	r1, r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9103      	str	r1, [sp, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfbb      	ittet	lt
 800990e:	425b      	neglt	r3, r3
 8009910:	f042 0202 	orrlt.w	r2, r2, #2
 8009914:	9307      	strge	r3, [sp, #28]
 8009916:	9307      	strlt	r3, [sp, #28]
 8009918:	bfb8      	it	lt
 800991a:	9204      	strlt	r2, [sp, #16]
 800991c:	7823      	ldrb	r3, [r4, #0]
 800991e:	2b2e      	cmp	r3, #46	; 0x2e
 8009920:	d10c      	bne.n	800993c <_svfiprintf_r+0x130>
 8009922:	7863      	ldrb	r3, [r4, #1]
 8009924:	2b2a      	cmp	r3, #42	; 0x2a
 8009926:	d135      	bne.n	8009994 <_svfiprintf_r+0x188>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	1d1a      	adds	r2, r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	9203      	str	r2, [sp, #12]
 8009930:	2b00      	cmp	r3, #0
 8009932:	bfb8      	it	lt
 8009934:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009938:	3402      	adds	r4, #2
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009a08 <_svfiprintf_r+0x1fc>
 8009940:	7821      	ldrb	r1, [r4, #0]
 8009942:	2203      	movs	r2, #3
 8009944:	4650      	mov	r0, sl
 8009946:	f7f6 fc53 	bl	80001f0 <memchr>
 800994a:	b140      	cbz	r0, 800995e <_svfiprintf_r+0x152>
 800994c:	2340      	movs	r3, #64	; 0x40
 800994e:	eba0 000a 	sub.w	r0, r0, sl
 8009952:	fa03 f000 	lsl.w	r0, r3, r0
 8009956:	9b04      	ldr	r3, [sp, #16]
 8009958:	4303      	orrs	r3, r0
 800995a:	3401      	adds	r4, #1
 800995c:	9304      	str	r3, [sp, #16]
 800995e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009962:	4826      	ldr	r0, [pc, #152]	; (80099fc <_svfiprintf_r+0x1f0>)
 8009964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009968:	2206      	movs	r2, #6
 800996a:	f7f6 fc41 	bl	80001f0 <memchr>
 800996e:	2800      	cmp	r0, #0
 8009970:	d038      	beq.n	80099e4 <_svfiprintf_r+0x1d8>
 8009972:	4b23      	ldr	r3, [pc, #140]	; (8009a00 <_svfiprintf_r+0x1f4>)
 8009974:	bb1b      	cbnz	r3, 80099be <_svfiprintf_r+0x1b2>
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	3307      	adds	r3, #7
 800997a:	f023 0307 	bic.w	r3, r3, #7
 800997e:	3308      	adds	r3, #8
 8009980:	9303      	str	r3, [sp, #12]
 8009982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009984:	4433      	add	r3, r6
 8009986:	9309      	str	r3, [sp, #36]	; 0x24
 8009988:	e767      	b.n	800985a <_svfiprintf_r+0x4e>
 800998a:	fb0c 3202 	mla	r2, ip, r2, r3
 800998e:	460c      	mov	r4, r1
 8009990:	2001      	movs	r0, #1
 8009992:	e7a5      	b.n	80098e0 <_svfiprintf_r+0xd4>
 8009994:	2300      	movs	r3, #0
 8009996:	3401      	adds	r4, #1
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	4619      	mov	r1, r3
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4620      	mov	r0, r4
 80099a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a6:	3a30      	subs	r2, #48	; 0x30
 80099a8:	2a09      	cmp	r2, #9
 80099aa:	d903      	bls.n	80099b4 <_svfiprintf_r+0x1a8>
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d0c5      	beq.n	800993c <_svfiprintf_r+0x130>
 80099b0:	9105      	str	r1, [sp, #20]
 80099b2:	e7c3      	b.n	800993c <_svfiprintf_r+0x130>
 80099b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b8:	4604      	mov	r4, r0
 80099ba:	2301      	movs	r3, #1
 80099bc:	e7f0      	b.n	80099a0 <_svfiprintf_r+0x194>
 80099be:	ab03      	add	r3, sp, #12
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	462a      	mov	r2, r5
 80099c4:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <_svfiprintf_r+0x1f8>)
 80099c6:	a904      	add	r1, sp, #16
 80099c8:	4638      	mov	r0, r7
 80099ca:	f7fd ff97 	bl	80078fc <_printf_float>
 80099ce:	1c42      	adds	r2, r0, #1
 80099d0:	4606      	mov	r6, r0
 80099d2:	d1d6      	bne.n	8009982 <_svfiprintf_r+0x176>
 80099d4:	89ab      	ldrh	r3, [r5, #12]
 80099d6:	065b      	lsls	r3, r3, #25
 80099d8:	f53f af2c 	bmi.w	8009834 <_svfiprintf_r+0x28>
 80099dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099de:	b01d      	add	sp, #116	; 0x74
 80099e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e4:	ab03      	add	r3, sp, #12
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	462a      	mov	r2, r5
 80099ea:	4b06      	ldr	r3, [pc, #24]	; (8009a04 <_svfiprintf_r+0x1f8>)
 80099ec:	a904      	add	r1, sp, #16
 80099ee:	4638      	mov	r0, r7
 80099f0:	f7fe fa28 	bl	8007e44 <_printf_i>
 80099f4:	e7eb      	b.n	80099ce <_svfiprintf_r+0x1c2>
 80099f6:	bf00      	nop
 80099f8:	0800b05c 	.word	0x0800b05c
 80099fc:	0800b066 	.word	0x0800b066
 8009a00:	080078fd 	.word	0x080078fd
 8009a04:	08009755 	.word	0x08009755
 8009a08:	0800b062 	.word	0x0800b062

08009a0c <_sbrk_r>:
 8009a0c:	b538      	push	{r3, r4, r5, lr}
 8009a0e:	4d06      	ldr	r5, [pc, #24]	; (8009a28 <_sbrk_r+0x1c>)
 8009a10:	2300      	movs	r3, #0
 8009a12:	4604      	mov	r4, r0
 8009a14:	4608      	mov	r0, r1
 8009a16:	602b      	str	r3, [r5, #0]
 8009a18:	f7fa fcb6 	bl	8004388 <_sbrk>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_sbrk_r+0x1a>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_sbrk_r+0x1a>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	20000458 	.word	0x20000458

08009a2c <__assert_func>:
 8009a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a2e:	4614      	mov	r4, r2
 8009a30:	461a      	mov	r2, r3
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <__assert_func+0x2c>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4605      	mov	r5, r0
 8009a38:	68d8      	ldr	r0, [r3, #12]
 8009a3a:	b14c      	cbz	r4, 8009a50 <__assert_func+0x24>
 8009a3c:	4b07      	ldr	r3, [pc, #28]	; (8009a5c <__assert_func+0x30>)
 8009a3e:	9100      	str	r1, [sp, #0]
 8009a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a44:	4906      	ldr	r1, [pc, #24]	; (8009a60 <__assert_func+0x34>)
 8009a46:	462b      	mov	r3, r5
 8009a48:	f000 f80e 	bl	8009a68 <fiprintf>
 8009a4c:	f000 faac 	bl	8009fa8 <abort>
 8009a50:	4b04      	ldr	r3, [pc, #16]	; (8009a64 <__assert_func+0x38>)
 8009a52:	461c      	mov	r4, r3
 8009a54:	e7f3      	b.n	8009a3e <__assert_func+0x12>
 8009a56:	bf00      	nop
 8009a58:	20000014 	.word	0x20000014
 8009a5c:	0800b06d 	.word	0x0800b06d
 8009a60:	0800b07a 	.word	0x0800b07a
 8009a64:	0800b0a8 	.word	0x0800b0a8

08009a68 <fiprintf>:
 8009a68:	b40e      	push	{r1, r2, r3}
 8009a6a:	b503      	push	{r0, r1, lr}
 8009a6c:	4601      	mov	r1, r0
 8009a6e:	ab03      	add	r3, sp, #12
 8009a70:	4805      	ldr	r0, [pc, #20]	; (8009a88 <fiprintf+0x20>)
 8009a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a76:	6800      	ldr	r0, [r0, #0]
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	f000 f897 	bl	8009bac <_vfiprintf_r>
 8009a7e:	b002      	add	sp, #8
 8009a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a84:	b003      	add	sp, #12
 8009a86:	4770      	bx	lr
 8009a88:	20000014 	.word	0x20000014

08009a8c <__ascii_mbtowc>:
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	b901      	cbnz	r1, 8009a92 <__ascii_mbtowc+0x6>
 8009a90:	a901      	add	r1, sp, #4
 8009a92:	b142      	cbz	r2, 8009aa6 <__ascii_mbtowc+0x1a>
 8009a94:	b14b      	cbz	r3, 8009aaa <__ascii_mbtowc+0x1e>
 8009a96:	7813      	ldrb	r3, [r2, #0]
 8009a98:	600b      	str	r3, [r1, #0]
 8009a9a:	7812      	ldrb	r2, [r2, #0]
 8009a9c:	1e10      	subs	r0, r2, #0
 8009a9e:	bf18      	it	ne
 8009aa0:	2001      	movne	r0, #1
 8009aa2:	b002      	add	sp, #8
 8009aa4:	4770      	bx	lr
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	e7fb      	b.n	8009aa2 <__ascii_mbtowc+0x16>
 8009aaa:	f06f 0001 	mvn.w	r0, #1
 8009aae:	e7f8      	b.n	8009aa2 <__ascii_mbtowc+0x16>

08009ab0 <memmove>:
 8009ab0:	4288      	cmp	r0, r1
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	eb01 0402 	add.w	r4, r1, r2
 8009ab8:	d902      	bls.n	8009ac0 <memmove+0x10>
 8009aba:	4284      	cmp	r4, r0
 8009abc:	4623      	mov	r3, r4
 8009abe:	d807      	bhi.n	8009ad0 <memmove+0x20>
 8009ac0:	1e43      	subs	r3, r0, #1
 8009ac2:	42a1      	cmp	r1, r4
 8009ac4:	d008      	beq.n	8009ad8 <memmove+0x28>
 8009ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ace:	e7f8      	b.n	8009ac2 <memmove+0x12>
 8009ad0:	4402      	add	r2, r0
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	428a      	cmp	r2, r1
 8009ad6:	d100      	bne.n	8009ada <memmove+0x2a>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ae2:	e7f7      	b.n	8009ad4 <memmove+0x24>

08009ae4 <__malloc_lock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	; (8009aec <__malloc_lock+0x8>)
 8009ae6:	f000 bc1f 	b.w	800a328 <__retarget_lock_acquire_recursive>
 8009aea:	bf00      	nop
 8009aec:	2000045c 	.word	0x2000045c

08009af0 <__malloc_unlock>:
 8009af0:	4801      	ldr	r0, [pc, #4]	; (8009af8 <__malloc_unlock+0x8>)
 8009af2:	f000 bc1a 	b.w	800a32a <__retarget_lock_release_recursive>
 8009af6:	bf00      	nop
 8009af8:	2000045c 	.word	0x2000045c

08009afc <_realloc_r>:
 8009afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b00:	4680      	mov	r8, r0
 8009b02:	4614      	mov	r4, r2
 8009b04:	460e      	mov	r6, r1
 8009b06:	b921      	cbnz	r1, 8009b12 <_realloc_r+0x16>
 8009b08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	f7ff bdad 	b.w	800966c <_malloc_r>
 8009b12:	b92a      	cbnz	r2, 8009b20 <_realloc_r+0x24>
 8009b14:	f7ff fd3e 	bl	8009594 <_free_r>
 8009b18:	4625      	mov	r5, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b20:	f000 fc6a 	bl	800a3f8 <_malloc_usable_size_r>
 8009b24:	4284      	cmp	r4, r0
 8009b26:	4607      	mov	r7, r0
 8009b28:	d802      	bhi.n	8009b30 <_realloc_r+0x34>
 8009b2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009b2e:	d812      	bhi.n	8009b56 <_realloc_r+0x5a>
 8009b30:	4621      	mov	r1, r4
 8009b32:	4640      	mov	r0, r8
 8009b34:	f7ff fd9a 	bl	800966c <_malloc_r>
 8009b38:	4605      	mov	r5, r0
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d0ed      	beq.n	8009b1a <_realloc_r+0x1e>
 8009b3e:	42bc      	cmp	r4, r7
 8009b40:	4622      	mov	r2, r4
 8009b42:	4631      	mov	r1, r6
 8009b44:	bf28      	it	cs
 8009b46:	463a      	movcs	r2, r7
 8009b48:	f7ff f97c 	bl	8008e44 <memcpy>
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f7ff fd20 	bl	8009594 <_free_r>
 8009b54:	e7e1      	b.n	8009b1a <_realloc_r+0x1e>
 8009b56:	4635      	mov	r5, r6
 8009b58:	e7df      	b.n	8009b1a <_realloc_r+0x1e>

08009b5a <__sfputc_r>:
 8009b5a:	6893      	ldr	r3, [r2, #8]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	b410      	push	{r4}
 8009b62:	6093      	str	r3, [r2, #8]
 8009b64:	da08      	bge.n	8009b78 <__sfputc_r+0x1e>
 8009b66:	6994      	ldr	r4, [r2, #24]
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	db01      	blt.n	8009b70 <__sfputc_r+0x16>
 8009b6c:	290a      	cmp	r1, #10
 8009b6e:	d103      	bne.n	8009b78 <__sfputc_r+0x1e>
 8009b70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b74:	f000 b94a 	b.w	8009e0c <__swbuf_r>
 8009b78:	6813      	ldr	r3, [r2, #0]
 8009b7a:	1c58      	adds	r0, r3, #1
 8009b7c:	6010      	str	r0, [r2, #0]
 8009b7e:	7019      	strb	r1, [r3, #0]
 8009b80:	4608      	mov	r0, r1
 8009b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <__sfputs_r>:
 8009b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	460f      	mov	r7, r1
 8009b8e:	4614      	mov	r4, r2
 8009b90:	18d5      	adds	r5, r2, r3
 8009b92:	42ac      	cmp	r4, r5
 8009b94:	d101      	bne.n	8009b9a <__sfputs_r+0x12>
 8009b96:	2000      	movs	r0, #0
 8009b98:	e007      	b.n	8009baa <__sfputs_r+0x22>
 8009b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	f7ff ffda 	bl	8009b5a <__sfputc_r>
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	d1f3      	bne.n	8009b92 <__sfputs_r+0xa>
 8009baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009bac <_vfiprintf_r>:
 8009bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	b09d      	sub	sp, #116	; 0x74
 8009bb4:	4614      	mov	r4, r2
 8009bb6:	4698      	mov	r8, r3
 8009bb8:	4606      	mov	r6, r0
 8009bba:	b118      	cbz	r0, 8009bc4 <_vfiprintf_r+0x18>
 8009bbc:	6983      	ldr	r3, [r0, #24]
 8009bbe:	b90b      	cbnz	r3, 8009bc4 <_vfiprintf_r+0x18>
 8009bc0:	f000 fb14 	bl	800a1ec <__sinit>
 8009bc4:	4b89      	ldr	r3, [pc, #548]	; (8009dec <_vfiprintf_r+0x240>)
 8009bc6:	429d      	cmp	r5, r3
 8009bc8:	d11b      	bne.n	8009c02 <_vfiprintf_r+0x56>
 8009bca:	6875      	ldr	r5, [r6, #4]
 8009bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_vfiprintf_r+0x32>
 8009bd2:	89ab      	ldrh	r3, [r5, #12]
 8009bd4:	059a      	lsls	r2, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_vfiprintf_r+0x32>
 8009bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bda:	f000 fba5 	bl	800a328 <__retarget_lock_acquire_recursive>
 8009bde:	89ab      	ldrh	r3, [r5, #12]
 8009be0:	071b      	lsls	r3, r3, #28
 8009be2:	d501      	bpl.n	8009be8 <_vfiprintf_r+0x3c>
 8009be4:	692b      	ldr	r3, [r5, #16]
 8009be6:	b9eb      	cbnz	r3, 8009c24 <_vfiprintf_r+0x78>
 8009be8:	4629      	mov	r1, r5
 8009bea:	4630      	mov	r0, r6
 8009bec:	f000 f96e 	bl	8009ecc <__swsetup_r>
 8009bf0:	b1c0      	cbz	r0, 8009c24 <_vfiprintf_r+0x78>
 8009bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bf4:	07dc      	lsls	r4, r3, #31
 8009bf6:	d50e      	bpl.n	8009c16 <_vfiprintf_r+0x6a>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bfc:	b01d      	add	sp, #116	; 0x74
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	4b7b      	ldr	r3, [pc, #492]	; (8009df0 <_vfiprintf_r+0x244>)
 8009c04:	429d      	cmp	r5, r3
 8009c06:	d101      	bne.n	8009c0c <_vfiprintf_r+0x60>
 8009c08:	68b5      	ldr	r5, [r6, #8]
 8009c0a:	e7df      	b.n	8009bcc <_vfiprintf_r+0x20>
 8009c0c:	4b79      	ldr	r3, [pc, #484]	; (8009df4 <_vfiprintf_r+0x248>)
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	bf08      	it	eq
 8009c12:	68f5      	ldreq	r5, [r6, #12]
 8009c14:	e7da      	b.n	8009bcc <_vfiprintf_r+0x20>
 8009c16:	89ab      	ldrh	r3, [r5, #12]
 8009c18:	0598      	lsls	r0, r3, #22
 8009c1a:	d4ed      	bmi.n	8009bf8 <_vfiprintf_r+0x4c>
 8009c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1e:	f000 fb84 	bl	800a32a <__retarget_lock_release_recursive>
 8009c22:	e7e9      	b.n	8009bf8 <_vfiprintf_r+0x4c>
 8009c24:	2300      	movs	r3, #0
 8009c26:	9309      	str	r3, [sp, #36]	; 0x24
 8009c28:	2320      	movs	r3, #32
 8009c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c32:	2330      	movs	r3, #48	; 0x30
 8009c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009df8 <_vfiprintf_r+0x24c>
 8009c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c3c:	f04f 0901 	mov.w	r9, #1
 8009c40:	4623      	mov	r3, r4
 8009c42:	469a      	mov	sl, r3
 8009c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c48:	b10a      	cbz	r2, 8009c4e <_vfiprintf_r+0xa2>
 8009c4a:	2a25      	cmp	r2, #37	; 0x25
 8009c4c:	d1f9      	bne.n	8009c42 <_vfiprintf_r+0x96>
 8009c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8009c52:	d00b      	beq.n	8009c6c <_vfiprintf_r+0xc0>
 8009c54:	465b      	mov	r3, fp
 8009c56:	4622      	mov	r2, r4
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7ff ff94 	bl	8009b88 <__sfputs_r>
 8009c60:	3001      	adds	r0, #1
 8009c62:	f000 80aa 	beq.w	8009dba <_vfiprintf_r+0x20e>
 8009c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c68:	445a      	add	r2, fp
 8009c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8009c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f000 80a2 	beq.w	8009dba <_vfiprintf_r+0x20e>
 8009c76:	2300      	movs	r3, #0
 8009c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c80:	f10a 0a01 	add.w	sl, sl, #1
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c8e:	4654      	mov	r4, sl
 8009c90:	2205      	movs	r2, #5
 8009c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c96:	4858      	ldr	r0, [pc, #352]	; (8009df8 <_vfiprintf_r+0x24c>)
 8009c98:	f7f6 faaa 	bl	80001f0 <memchr>
 8009c9c:	9a04      	ldr	r2, [sp, #16]
 8009c9e:	b9d8      	cbnz	r0, 8009cd8 <_vfiprintf_r+0x12c>
 8009ca0:	06d1      	lsls	r1, r2, #27
 8009ca2:	bf44      	itt	mi
 8009ca4:	2320      	movmi	r3, #32
 8009ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009caa:	0713      	lsls	r3, r2, #28
 8009cac:	bf44      	itt	mi
 8009cae:	232b      	movmi	r3, #43	; 0x2b
 8009cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cba:	d015      	beq.n	8009ce8 <_vfiprintf_r+0x13c>
 8009cbc:	9a07      	ldr	r2, [sp, #28]
 8009cbe:	4654      	mov	r4, sl
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ccc:	3b30      	subs	r3, #48	; 0x30
 8009cce:	2b09      	cmp	r3, #9
 8009cd0:	d94e      	bls.n	8009d70 <_vfiprintf_r+0x1c4>
 8009cd2:	b1b0      	cbz	r0, 8009d02 <_vfiprintf_r+0x156>
 8009cd4:	9207      	str	r2, [sp, #28]
 8009cd6:	e014      	b.n	8009d02 <_vfiprintf_r+0x156>
 8009cd8:	eba0 0308 	sub.w	r3, r0, r8
 8009cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	46a2      	mov	sl, r4
 8009ce6:	e7d2      	b.n	8009c8e <_vfiprintf_r+0xe2>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	1d19      	adds	r1, r3, #4
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	9103      	str	r1, [sp, #12]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	bfbb      	ittet	lt
 8009cf4:	425b      	neglt	r3, r3
 8009cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8009cfa:	9307      	strge	r3, [sp, #28]
 8009cfc:	9307      	strlt	r3, [sp, #28]
 8009cfe:	bfb8      	it	lt
 8009d00:	9204      	strlt	r2, [sp, #16]
 8009d02:	7823      	ldrb	r3, [r4, #0]
 8009d04:	2b2e      	cmp	r3, #46	; 0x2e
 8009d06:	d10c      	bne.n	8009d22 <_vfiprintf_r+0x176>
 8009d08:	7863      	ldrb	r3, [r4, #1]
 8009d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0c:	d135      	bne.n	8009d7a <_vfiprintf_r+0x1ce>
 8009d0e:	9b03      	ldr	r3, [sp, #12]
 8009d10:	1d1a      	adds	r2, r3, #4
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	9203      	str	r2, [sp, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bfb8      	it	lt
 8009d1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d1e:	3402      	adds	r4, #2
 8009d20:	9305      	str	r3, [sp, #20]
 8009d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e08 <_vfiprintf_r+0x25c>
 8009d26:	7821      	ldrb	r1, [r4, #0]
 8009d28:	2203      	movs	r2, #3
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	f7f6 fa60 	bl	80001f0 <memchr>
 8009d30:	b140      	cbz	r0, 8009d44 <_vfiprintf_r+0x198>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	eba0 000a 	sub.w	r0, r0, sl
 8009d38:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	4303      	orrs	r3, r0
 8009d40:	3401      	adds	r4, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d48:	482c      	ldr	r0, [pc, #176]	; (8009dfc <_vfiprintf_r+0x250>)
 8009d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d4e:	2206      	movs	r2, #6
 8009d50:	f7f6 fa4e 	bl	80001f0 <memchr>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d03f      	beq.n	8009dd8 <_vfiprintf_r+0x22c>
 8009d58:	4b29      	ldr	r3, [pc, #164]	; (8009e00 <_vfiprintf_r+0x254>)
 8009d5a:	bb1b      	cbnz	r3, 8009da4 <_vfiprintf_r+0x1f8>
 8009d5c:	9b03      	ldr	r3, [sp, #12]
 8009d5e:	3307      	adds	r3, #7
 8009d60:	f023 0307 	bic.w	r3, r3, #7
 8009d64:	3308      	adds	r3, #8
 8009d66:	9303      	str	r3, [sp, #12]
 8009d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6a:	443b      	add	r3, r7
 8009d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6e:	e767      	b.n	8009c40 <_vfiprintf_r+0x94>
 8009d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d74:	460c      	mov	r4, r1
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7a5      	b.n	8009cc6 <_vfiprintf_r+0x11a>
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	3401      	adds	r4, #1
 8009d7e:	9305      	str	r3, [sp, #20]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f04f 0c0a 	mov.w	ip, #10
 8009d86:	4620      	mov	r0, r4
 8009d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d8c:	3a30      	subs	r2, #48	; 0x30
 8009d8e:	2a09      	cmp	r2, #9
 8009d90:	d903      	bls.n	8009d9a <_vfiprintf_r+0x1ee>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0c5      	beq.n	8009d22 <_vfiprintf_r+0x176>
 8009d96:	9105      	str	r1, [sp, #20]
 8009d98:	e7c3      	b.n	8009d22 <_vfiprintf_r+0x176>
 8009d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d9e:	4604      	mov	r4, r0
 8009da0:	2301      	movs	r3, #1
 8009da2:	e7f0      	b.n	8009d86 <_vfiprintf_r+0x1da>
 8009da4:	ab03      	add	r3, sp, #12
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4b16      	ldr	r3, [pc, #88]	; (8009e04 <_vfiprintf_r+0x258>)
 8009dac:	a904      	add	r1, sp, #16
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7fd fda4 	bl	80078fc <_printf_float>
 8009db4:	4607      	mov	r7, r0
 8009db6:	1c78      	adds	r0, r7, #1
 8009db8:	d1d6      	bne.n	8009d68 <_vfiprintf_r+0x1bc>
 8009dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dbc:	07d9      	lsls	r1, r3, #31
 8009dbe:	d405      	bmi.n	8009dcc <_vfiprintf_r+0x220>
 8009dc0:	89ab      	ldrh	r3, [r5, #12]
 8009dc2:	059a      	lsls	r2, r3, #22
 8009dc4:	d402      	bmi.n	8009dcc <_vfiprintf_r+0x220>
 8009dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc8:	f000 faaf 	bl	800a32a <__retarget_lock_release_recursive>
 8009dcc:	89ab      	ldrh	r3, [r5, #12]
 8009dce:	065b      	lsls	r3, r3, #25
 8009dd0:	f53f af12 	bmi.w	8009bf8 <_vfiprintf_r+0x4c>
 8009dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dd6:	e711      	b.n	8009bfc <_vfiprintf_r+0x50>
 8009dd8:	ab03      	add	r3, sp, #12
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	462a      	mov	r2, r5
 8009dde:	4b09      	ldr	r3, [pc, #36]	; (8009e04 <_vfiprintf_r+0x258>)
 8009de0:	a904      	add	r1, sp, #16
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7fe f82e 	bl	8007e44 <_printf_i>
 8009de8:	e7e4      	b.n	8009db4 <_vfiprintf_r+0x208>
 8009dea:	bf00      	nop
 8009dec:	0800b1d4 	.word	0x0800b1d4
 8009df0:	0800b1f4 	.word	0x0800b1f4
 8009df4:	0800b1b4 	.word	0x0800b1b4
 8009df8:	0800b05c 	.word	0x0800b05c
 8009dfc:	0800b066 	.word	0x0800b066
 8009e00:	080078fd 	.word	0x080078fd
 8009e04:	08009b89 	.word	0x08009b89
 8009e08:	0800b062 	.word	0x0800b062

08009e0c <__swbuf_r>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	4605      	mov	r5, r0
 8009e14:	b118      	cbz	r0, 8009e1e <__swbuf_r+0x12>
 8009e16:	6983      	ldr	r3, [r0, #24]
 8009e18:	b90b      	cbnz	r3, 8009e1e <__swbuf_r+0x12>
 8009e1a:	f000 f9e7 	bl	800a1ec <__sinit>
 8009e1e:	4b21      	ldr	r3, [pc, #132]	; (8009ea4 <__swbuf_r+0x98>)
 8009e20:	429c      	cmp	r4, r3
 8009e22:	d12b      	bne.n	8009e7c <__swbuf_r+0x70>
 8009e24:	686c      	ldr	r4, [r5, #4]
 8009e26:	69a3      	ldr	r3, [r4, #24]
 8009e28:	60a3      	str	r3, [r4, #8]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	071a      	lsls	r2, r3, #28
 8009e2e:	d52f      	bpl.n	8009e90 <__swbuf_r+0x84>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	b36b      	cbz	r3, 8009e90 <__swbuf_r+0x84>
 8009e34:	6923      	ldr	r3, [r4, #16]
 8009e36:	6820      	ldr	r0, [r4, #0]
 8009e38:	1ac0      	subs	r0, r0, r3
 8009e3a:	6963      	ldr	r3, [r4, #20]
 8009e3c:	b2f6      	uxtb	r6, r6
 8009e3e:	4283      	cmp	r3, r0
 8009e40:	4637      	mov	r7, r6
 8009e42:	dc04      	bgt.n	8009e4e <__swbuf_r+0x42>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f93c 	bl	800a0c4 <_fflush_r>
 8009e4c:	bb30      	cbnz	r0, 8009e9c <__swbuf_r+0x90>
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	60a3      	str	r3, [r4, #8]
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	701e      	strb	r6, [r3, #0]
 8009e5c:	6963      	ldr	r3, [r4, #20]
 8009e5e:	3001      	adds	r0, #1
 8009e60:	4283      	cmp	r3, r0
 8009e62:	d004      	beq.n	8009e6e <__swbuf_r+0x62>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d506      	bpl.n	8009e78 <__swbuf_r+0x6c>
 8009e6a:	2e0a      	cmp	r6, #10
 8009e6c:	d104      	bne.n	8009e78 <__swbuf_r+0x6c>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4628      	mov	r0, r5
 8009e72:	f000 f927 	bl	800a0c4 <_fflush_r>
 8009e76:	b988      	cbnz	r0, 8009e9c <__swbuf_r+0x90>
 8009e78:	4638      	mov	r0, r7
 8009e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <__swbuf_r+0x9c>)
 8009e7e:	429c      	cmp	r4, r3
 8009e80:	d101      	bne.n	8009e86 <__swbuf_r+0x7a>
 8009e82:	68ac      	ldr	r4, [r5, #8]
 8009e84:	e7cf      	b.n	8009e26 <__swbuf_r+0x1a>
 8009e86:	4b09      	ldr	r3, [pc, #36]	; (8009eac <__swbuf_r+0xa0>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	bf08      	it	eq
 8009e8c:	68ec      	ldreq	r4, [r5, #12]
 8009e8e:	e7ca      	b.n	8009e26 <__swbuf_r+0x1a>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f81a 	bl	8009ecc <__swsetup_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d0cb      	beq.n	8009e34 <__swbuf_r+0x28>
 8009e9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009ea0:	e7ea      	b.n	8009e78 <__swbuf_r+0x6c>
 8009ea2:	bf00      	nop
 8009ea4:	0800b1d4 	.word	0x0800b1d4
 8009ea8:	0800b1f4 	.word	0x0800b1f4
 8009eac:	0800b1b4 	.word	0x0800b1b4

08009eb0 <__ascii_wctomb>:
 8009eb0:	b149      	cbz	r1, 8009ec6 <__ascii_wctomb+0x16>
 8009eb2:	2aff      	cmp	r2, #255	; 0xff
 8009eb4:	bf85      	ittet	hi
 8009eb6:	238a      	movhi	r3, #138	; 0x8a
 8009eb8:	6003      	strhi	r3, [r0, #0]
 8009eba:	700a      	strbls	r2, [r1, #0]
 8009ebc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009ec0:	bf98      	it	ls
 8009ec2:	2001      	movls	r0, #1
 8009ec4:	4770      	bx	lr
 8009ec6:	4608      	mov	r0, r1
 8009ec8:	4770      	bx	lr
	...

08009ecc <__swsetup_r>:
 8009ecc:	4b32      	ldr	r3, [pc, #200]	; (8009f98 <__swsetup_r+0xcc>)
 8009ece:	b570      	push	{r4, r5, r6, lr}
 8009ed0:	681d      	ldr	r5, [r3, #0]
 8009ed2:	4606      	mov	r6, r0
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	b125      	cbz	r5, 8009ee2 <__swsetup_r+0x16>
 8009ed8:	69ab      	ldr	r3, [r5, #24]
 8009eda:	b913      	cbnz	r3, 8009ee2 <__swsetup_r+0x16>
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f985 	bl	800a1ec <__sinit>
 8009ee2:	4b2e      	ldr	r3, [pc, #184]	; (8009f9c <__swsetup_r+0xd0>)
 8009ee4:	429c      	cmp	r4, r3
 8009ee6:	d10f      	bne.n	8009f08 <__swsetup_r+0x3c>
 8009ee8:	686c      	ldr	r4, [r5, #4]
 8009eea:	89a3      	ldrh	r3, [r4, #12]
 8009eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ef0:	0719      	lsls	r1, r3, #28
 8009ef2:	d42c      	bmi.n	8009f4e <__swsetup_r+0x82>
 8009ef4:	06dd      	lsls	r5, r3, #27
 8009ef6:	d411      	bmi.n	8009f1c <__swsetup_r+0x50>
 8009ef8:	2309      	movs	r3, #9
 8009efa:	6033      	str	r3, [r6, #0]
 8009efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f00:	81a3      	strh	r3, [r4, #12]
 8009f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f06:	e03e      	b.n	8009f86 <__swsetup_r+0xba>
 8009f08:	4b25      	ldr	r3, [pc, #148]	; (8009fa0 <__swsetup_r+0xd4>)
 8009f0a:	429c      	cmp	r4, r3
 8009f0c:	d101      	bne.n	8009f12 <__swsetup_r+0x46>
 8009f0e:	68ac      	ldr	r4, [r5, #8]
 8009f10:	e7eb      	b.n	8009eea <__swsetup_r+0x1e>
 8009f12:	4b24      	ldr	r3, [pc, #144]	; (8009fa4 <__swsetup_r+0xd8>)
 8009f14:	429c      	cmp	r4, r3
 8009f16:	bf08      	it	eq
 8009f18:	68ec      	ldreq	r4, [r5, #12]
 8009f1a:	e7e6      	b.n	8009eea <__swsetup_r+0x1e>
 8009f1c:	0758      	lsls	r0, r3, #29
 8009f1e:	d512      	bpl.n	8009f46 <__swsetup_r+0x7a>
 8009f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f22:	b141      	cbz	r1, 8009f36 <__swsetup_r+0x6a>
 8009f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <__swsetup_r+0x66>
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7ff fb31 	bl	8009594 <_free_r>
 8009f32:	2300      	movs	r3, #0
 8009f34:	6363      	str	r3, [r4, #52]	; 0x34
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	b94b      	cbnz	r3, 8009f66 <__swsetup_r+0x9a>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f5c:	d003      	beq.n	8009f66 <__swsetup_r+0x9a>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4630      	mov	r0, r6
 8009f62:	f000 fa09 	bl	800a378 <__smakebuf_r>
 8009f66:	89a0      	ldrh	r0, [r4, #12]
 8009f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f6c:	f010 0301 	ands.w	r3, r0, #1
 8009f70:	d00a      	beq.n	8009f88 <__swsetup_r+0xbc>
 8009f72:	2300      	movs	r3, #0
 8009f74:	60a3      	str	r3, [r4, #8]
 8009f76:	6963      	ldr	r3, [r4, #20]
 8009f78:	425b      	negs	r3, r3
 8009f7a:	61a3      	str	r3, [r4, #24]
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	b943      	cbnz	r3, 8009f92 <__swsetup_r+0xc6>
 8009f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f84:	d1ba      	bne.n	8009efc <__swsetup_r+0x30>
 8009f86:	bd70      	pop	{r4, r5, r6, pc}
 8009f88:	0781      	lsls	r1, r0, #30
 8009f8a:	bf58      	it	pl
 8009f8c:	6963      	ldrpl	r3, [r4, #20]
 8009f8e:	60a3      	str	r3, [r4, #8]
 8009f90:	e7f4      	b.n	8009f7c <__swsetup_r+0xb0>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e7f7      	b.n	8009f86 <__swsetup_r+0xba>
 8009f96:	bf00      	nop
 8009f98:	20000014 	.word	0x20000014
 8009f9c:	0800b1d4 	.word	0x0800b1d4
 8009fa0:	0800b1f4 	.word	0x0800b1f4
 8009fa4:	0800b1b4 	.word	0x0800b1b4

08009fa8 <abort>:
 8009fa8:	b508      	push	{r3, lr}
 8009faa:	2006      	movs	r0, #6
 8009fac:	f000 fa54 	bl	800a458 <raise>
 8009fb0:	2001      	movs	r0, #1
 8009fb2:	f7fa f971 	bl	8004298 <_exit>
	...

08009fb8 <__sflush_r>:
 8009fb8:	898a      	ldrh	r2, [r1, #12]
 8009fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	0710      	lsls	r0, r2, #28
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	d458      	bmi.n	800a078 <__sflush_r+0xc0>
 8009fc6:	684b      	ldr	r3, [r1, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	dc05      	bgt.n	8009fd8 <__sflush_r+0x20>
 8009fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	dc02      	bgt.n	8009fd8 <__sflush_r+0x20>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d0f9      	beq.n	8009fd2 <__sflush_r+0x1a>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fe4:	682f      	ldr	r7, [r5, #0]
 8009fe6:	602b      	str	r3, [r5, #0]
 8009fe8:	d032      	beq.n	800a050 <__sflush_r+0x98>
 8009fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fec:	89a3      	ldrh	r3, [r4, #12]
 8009fee:	075a      	lsls	r2, r3, #29
 8009ff0:	d505      	bpl.n	8009ffe <__sflush_r+0x46>
 8009ff2:	6863      	ldr	r3, [r4, #4]
 8009ff4:	1ac0      	subs	r0, r0, r3
 8009ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ff8:	b10b      	cbz	r3, 8009ffe <__sflush_r+0x46>
 8009ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ffc:	1ac0      	subs	r0, r0, r3
 8009ffe:	2300      	movs	r3, #0
 800a000:	4602      	mov	r2, r0
 800a002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a004:	6a21      	ldr	r1, [r4, #32]
 800a006:	4628      	mov	r0, r5
 800a008:	47b0      	blx	r6
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	d106      	bne.n	800a01e <__sflush_r+0x66>
 800a010:	6829      	ldr	r1, [r5, #0]
 800a012:	291d      	cmp	r1, #29
 800a014:	d82c      	bhi.n	800a070 <__sflush_r+0xb8>
 800a016:	4a2a      	ldr	r2, [pc, #168]	; (800a0c0 <__sflush_r+0x108>)
 800a018:	40ca      	lsrs	r2, r1
 800a01a:	07d6      	lsls	r6, r2, #31
 800a01c:	d528      	bpl.n	800a070 <__sflush_r+0xb8>
 800a01e:	2200      	movs	r2, #0
 800a020:	6062      	str	r2, [r4, #4]
 800a022:	04d9      	lsls	r1, r3, #19
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	6022      	str	r2, [r4, #0]
 800a028:	d504      	bpl.n	800a034 <__sflush_r+0x7c>
 800a02a:	1c42      	adds	r2, r0, #1
 800a02c:	d101      	bne.n	800a032 <__sflush_r+0x7a>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	b903      	cbnz	r3, 800a034 <__sflush_r+0x7c>
 800a032:	6560      	str	r0, [r4, #84]	; 0x54
 800a034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a036:	602f      	str	r7, [r5, #0]
 800a038:	2900      	cmp	r1, #0
 800a03a:	d0ca      	beq.n	8009fd2 <__sflush_r+0x1a>
 800a03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a040:	4299      	cmp	r1, r3
 800a042:	d002      	beq.n	800a04a <__sflush_r+0x92>
 800a044:	4628      	mov	r0, r5
 800a046:	f7ff faa5 	bl	8009594 <_free_r>
 800a04a:	2000      	movs	r0, #0
 800a04c:	6360      	str	r0, [r4, #52]	; 0x34
 800a04e:	e7c1      	b.n	8009fd4 <__sflush_r+0x1c>
 800a050:	6a21      	ldr	r1, [r4, #32]
 800a052:	2301      	movs	r3, #1
 800a054:	4628      	mov	r0, r5
 800a056:	47b0      	blx	r6
 800a058:	1c41      	adds	r1, r0, #1
 800a05a:	d1c7      	bne.n	8009fec <__sflush_r+0x34>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0c4      	beq.n	8009fec <__sflush_r+0x34>
 800a062:	2b1d      	cmp	r3, #29
 800a064:	d001      	beq.n	800a06a <__sflush_r+0xb2>
 800a066:	2b16      	cmp	r3, #22
 800a068:	d101      	bne.n	800a06e <__sflush_r+0xb6>
 800a06a:	602f      	str	r7, [r5, #0]
 800a06c:	e7b1      	b.n	8009fd2 <__sflush_r+0x1a>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	e7ad      	b.n	8009fd4 <__sflush_r+0x1c>
 800a078:	690f      	ldr	r7, [r1, #16]
 800a07a:	2f00      	cmp	r7, #0
 800a07c:	d0a9      	beq.n	8009fd2 <__sflush_r+0x1a>
 800a07e:	0793      	lsls	r3, r2, #30
 800a080:	680e      	ldr	r6, [r1, #0]
 800a082:	bf08      	it	eq
 800a084:	694b      	ldreq	r3, [r1, #20]
 800a086:	600f      	str	r7, [r1, #0]
 800a088:	bf18      	it	ne
 800a08a:	2300      	movne	r3, #0
 800a08c:	eba6 0807 	sub.w	r8, r6, r7
 800a090:	608b      	str	r3, [r1, #8]
 800a092:	f1b8 0f00 	cmp.w	r8, #0
 800a096:	dd9c      	ble.n	8009fd2 <__sflush_r+0x1a>
 800a098:	6a21      	ldr	r1, [r4, #32]
 800a09a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a09c:	4643      	mov	r3, r8
 800a09e:	463a      	mov	r2, r7
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	47b0      	blx	r6
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	dc06      	bgt.n	800a0b6 <__sflush_r+0xfe>
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0b4:	e78e      	b.n	8009fd4 <__sflush_r+0x1c>
 800a0b6:	4407      	add	r7, r0
 800a0b8:	eba8 0800 	sub.w	r8, r8, r0
 800a0bc:	e7e9      	b.n	800a092 <__sflush_r+0xda>
 800a0be:	bf00      	nop
 800a0c0:	20400001 	.word	0x20400001

0800a0c4 <_fflush_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	690b      	ldr	r3, [r1, #16]
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	b913      	cbnz	r3, 800a0d4 <_fflush_r+0x10>
 800a0ce:	2500      	movs	r5, #0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	b118      	cbz	r0, 800a0de <_fflush_r+0x1a>
 800a0d6:	6983      	ldr	r3, [r0, #24]
 800a0d8:	b90b      	cbnz	r3, 800a0de <_fflush_r+0x1a>
 800a0da:	f000 f887 	bl	800a1ec <__sinit>
 800a0de:	4b14      	ldr	r3, [pc, #80]	; (800a130 <_fflush_r+0x6c>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	d11b      	bne.n	800a11c <_fflush_r+0x58>
 800a0e4:	686c      	ldr	r4, [r5, #4]
 800a0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0ef      	beq.n	800a0ce <_fflush_r+0xa>
 800a0ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0f0:	07d0      	lsls	r0, r2, #31
 800a0f2:	d404      	bmi.n	800a0fe <_fflush_r+0x3a>
 800a0f4:	0599      	lsls	r1, r3, #22
 800a0f6:	d402      	bmi.n	800a0fe <_fflush_r+0x3a>
 800a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fa:	f000 f915 	bl	800a328 <__retarget_lock_acquire_recursive>
 800a0fe:	4628      	mov	r0, r5
 800a100:	4621      	mov	r1, r4
 800a102:	f7ff ff59 	bl	8009fb8 <__sflush_r>
 800a106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a108:	07da      	lsls	r2, r3, #31
 800a10a:	4605      	mov	r5, r0
 800a10c:	d4e0      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	059b      	lsls	r3, r3, #22
 800a112:	d4dd      	bmi.n	800a0d0 <_fflush_r+0xc>
 800a114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a116:	f000 f908 	bl	800a32a <__retarget_lock_release_recursive>
 800a11a:	e7d9      	b.n	800a0d0 <_fflush_r+0xc>
 800a11c:	4b05      	ldr	r3, [pc, #20]	; (800a134 <_fflush_r+0x70>)
 800a11e:	429c      	cmp	r4, r3
 800a120:	d101      	bne.n	800a126 <_fflush_r+0x62>
 800a122:	68ac      	ldr	r4, [r5, #8]
 800a124:	e7df      	b.n	800a0e6 <_fflush_r+0x22>
 800a126:	4b04      	ldr	r3, [pc, #16]	; (800a138 <_fflush_r+0x74>)
 800a128:	429c      	cmp	r4, r3
 800a12a:	bf08      	it	eq
 800a12c:	68ec      	ldreq	r4, [r5, #12]
 800a12e:	e7da      	b.n	800a0e6 <_fflush_r+0x22>
 800a130:	0800b1d4 	.word	0x0800b1d4
 800a134:	0800b1f4 	.word	0x0800b1f4
 800a138:	0800b1b4 	.word	0x0800b1b4

0800a13c <std>:
 800a13c:	2300      	movs	r3, #0
 800a13e:	b510      	push	{r4, lr}
 800a140:	4604      	mov	r4, r0
 800a142:	e9c0 3300 	strd	r3, r3, [r0]
 800a146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a14a:	6083      	str	r3, [r0, #8]
 800a14c:	8181      	strh	r1, [r0, #12]
 800a14e:	6643      	str	r3, [r0, #100]	; 0x64
 800a150:	81c2      	strh	r2, [r0, #14]
 800a152:	6183      	str	r3, [r0, #24]
 800a154:	4619      	mov	r1, r3
 800a156:	2208      	movs	r2, #8
 800a158:	305c      	adds	r0, #92	; 0x5c
 800a15a:	f7fd fb27 	bl	80077ac <memset>
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <std+0x38>)
 800a160:	6263      	str	r3, [r4, #36]	; 0x24
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <std+0x3c>)
 800a164:	62a3      	str	r3, [r4, #40]	; 0x28
 800a166:	4b05      	ldr	r3, [pc, #20]	; (800a17c <std+0x40>)
 800a168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x44>)
 800a16c:	6224      	str	r4, [r4, #32]
 800a16e:	6323      	str	r3, [r4, #48]	; 0x30
 800a170:	bd10      	pop	{r4, pc}
 800a172:	bf00      	nop
 800a174:	0800a491 	.word	0x0800a491
 800a178:	0800a4b3 	.word	0x0800a4b3
 800a17c:	0800a4eb 	.word	0x0800a4eb
 800a180:	0800a50f 	.word	0x0800a50f

0800a184 <_cleanup_r>:
 800a184:	4901      	ldr	r1, [pc, #4]	; (800a18c <_cleanup_r+0x8>)
 800a186:	f000 b8af 	b.w	800a2e8 <_fwalk_reent>
 800a18a:	bf00      	nop
 800a18c:	0800a0c5 	.word	0x0800a0c5

0800a190 <__sfmoreglue>:
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	2268      	movs	r2, #104	; 0x68
 800a194:	1e4d      	subs	r5, r1, #1
 800a196:	4355      	muls	r5, r2
 800a198:	460e      	mov	r6, r1
 800a19a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a19e:	f7ff fa65 	bl	800966c <_malloc_r>
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	b140      	cbz	r0, 800a1b8 <__sfmoreglue+0x28>
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	e9c0 1600 	strd	r1, r6, [r0]
 800a1ac:	300c      	adds	r0, #12
 800a1ae:	60a0      	str	r0, [r4, #8]
 800a1b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1b4:	f7fd fafa 	bl	80077ac <memset>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}

0800a1bc <__sfp_lock_acquire>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	; (800a1c4 <__sfp_lock_acquire+0x8>)
 800a1be:	f000 b8b3 	b.w	800a328 <__retarget_lock_acquire_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	2000045d 	.word	0x2000045d

0800a1c8 <__sfp_lock_release>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__sfp_lock_release+0x8>)
 800a1ca:	f000 b8ae 	b.w	800a32a <__retarget_lock_release_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	2000045d 	.word	0x2000045d

0800a1d4 <__sinit_lock_acquire>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__sinit_lock_acquire+0x8>)
 800a1d6:	f000 b8a7 	b.w	800a328 <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	2000045e 	.word	0x2000045e

0800a1e0 <__sinit_lock_release>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__sinit_lock_release+0x8>)
 800a1e2:	f000 b8a2 	b.w	800a32a <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	2000045e 	.word	0x2000045e

0800a1ec <__sinit>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	f7ff fff0 	bl	800a1d4 <__sinit_lock_acquire>
 800a1f4:	69a3      	ldr	r3, [r4, #24]
 800a1f6:	b11b      	cbz	r3, 800a200 <__sinit+0x14>
 800a1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1fc:	f7ff bff0 	b.w	800a1e0 <__sinit_lock_release>
 800a200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a204:	6523      	str	r3, [r4, #80]	; 0x50
 800a206:	4b13      	ldr	r3, [pc, #76]	; (800a254 <__sinit+0x68>)
 800a208:	4a13      	ldr	r2, [pc, #76]	; (800a258 <__sinit+0x6c>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a20e:	42a3      	cmp	r3, r4
 800a210:	bf04      	itt	eq
 800a212:	2301      	moveq	r3, #1
 800a214:	61a3      	streq	r3, [r4, #24]
 800a216:	4620      	mov	r0, r4
 800a218:	f000 f820 	bl	800a25c <__sfp>
 800a21c:	6060      	str	r0, [r4, #4]
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 f81c 	bl	800a25c <__sfp>
 800a224:	60a0      	str	r0, [r4, #8]
 800a226:	4620      	mov	r0, r4
 800a228:	f000 f818 	bl	800a25c <__sfp>
 800a22c:	2200      	movs	r2, #0
 800a22e:	60e0      	str	r0, [r4, #12]
 800a230:	2104      	movs	r1, #4
 800a232:	6860      	ldr	r0, [r4, #4]
 800a234:	f7ff ff82 	bl	800a13c <std>
 800a238:	68a0      	ldr	r0, [r4, #8]
 800a23a:	2201      	movs	r2, #1
 800a23c:	2109      	movs	r1, #9
 800a23e:	f7ff ff7d 	bl	800a13c <std>
 800a242:	68e0      	ldr	r0, [r4, #12]
 800a244:	2202      	movs	r2, #2
 800a246:	2112      	movs	r1, #18
 800a248:	f7ff ff78 	bl	800a13c <std>
 800a24c:	2301      	movs	r3, #1
 800a24e:	61a3      	str	r3, [r4, #24]
 800a250:	e7d2      	b.n	800a1f8 <__sinit+0xc>
 800a252:	bf00      	nop
 800a254:	0800ae38 	.word	0x0800ae38
 800a258:	0800a185 	.word	0x0800a185

0800a25c <__sfp>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	4607      	mov	r7, r0
 800a260:	f7ff ffac 	bl	800a1bc <__sfp_lock_acquire>
 800a264:	4b1e      	ldr	r3, [pc, #120]	; (800a2e0 <__sfp+0x84>)
 800a266:	681e      	ldr	r6, [r3, #0]
 800a268:	69b3      	ldr	r3, [r6, #24]
 800a26a:	b913      	cbnz	r3, 800a272 <__sfp+0x16>
 800a26c:	4630      	mov	r0, r6
 800a26e:	f7ff ffbd 	bl	800a1ec <__sinit>
 800a272:	3648      	adds	r6, #72	; 0x48
 800a274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a278:	3b01      	subs	r3, #1
 800a27a:	d503      	bpl.n	800a284 <__sfp+0x28>
 800a27c:	6833      	ldr	r3, [r6, #0]
 800a27e:	b30b      	cbz	r3, 800a2c4 <__sfp+0x68>
 800a280:	6836      	ldr	r6, [r6, #0]
 800a282:	e7f7      	b.n	800a274 <__sfp+0x18>
 800a284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a288:	b9d5      	cbnz	r5, 800a2c0 <__sfp+0x64>
 800a28a:	4b16      	ldr	r3, [pc, #88]	; (800a2e4 <__sfp+0x88>)
 800a28c:	60e3      	str	r3, [r4, #12]
 800a28e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a292:	6665      	str	r5, [r4, #100]	; 0x64
 800a294:	f000 f847 	bl	800a326 <__retarget_lock_init_recursive>
 800a298:	f7ff ff96 	bl	800a1c8 <__sfp_lock_release>
 800a29c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2a4:	6025      	str	r5, [r4, #0]
 800a2a6:	61a5      	str	r5, [r4, #24]
 800a2a8:	2208      	movs	r2, #8
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2b0:	f7fd fa7c 	bl	80077ac <memset>
 800a2b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2bc:	4620      	mov	r0, r4
 800a2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c0:	3468      	adds	r4, #104	; 0x68
 800a2c2:	e7d9      	b.n	800a278 <__sfp+0x1c>
 800a2c4:	2104      	movs	r1, #4
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7ff ff62 	bl	800a190 <__sfmoreglue>
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	6030      	str	r0, [r6, #0]
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d1d5      	bne.n	800a280 <__sfp+0x24>
 800a2d4:	f7ff ff78 	bl	800a1c8 <__sfp_lock_release>
 800a2d8:	230c      	movs	r3, #12
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	e7ee      	b.n	800a2bc <__sfp+0x60>
 800a2de:	bf00      	nop
 800a2e0:	0800ae38 	.word	0x0800ae38
 800a2e4:	ffff0001 	.word	0xffff0001

0800a2e8 <_fwalk_reent>:
 800a2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	4688      	mov	r8, r1
 800a2f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2f4:	2700      	movs	r7, #0
 800a2f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2fa:	f1b9 0901 	subs.w	r9, r9, #1
 800a2fe:	d505      	bpl.n	800a30c <_fwalk_reent+0x24>
 800a300:	6824      	ldr	r4, [r4, #0]
 800a302:	2c00      	cmp	r4, #0
 800a304:	d1f7      	bne.n	800a2f6 <_fwalk_reent+0xe>
 800a306:	4638      	mov	r0, r7
 800a308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30c:	89ab      	ldrh	r3, [r5, #12]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d907      	bls.n	800a322 <_fwalk_reent+0x3a>
 800a312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a316:	3301      	adds	r3, #1
 800a318:	d003      	beq.n	800a322 <_fwalk_reent+0x3a>
 800a31a:	4629      	mov	r1, r5
 800a31c:	4630      	mov	r0, r6
 800a31e:	47c0      	blx	r8
 800a320:	4307      	orrs	r7, r0
 800a322:	3568      	adds	r5, #104	; 0x68
 800a324:	e7e9      	b.n	800a2fa <_fwalk_reent+0x12>

0800a326 <__retarget_lock_init_recursive>:
 800a326:	4770      	bx	lr

0800a328 <__retarget_lock_acquire_recursive>:
 800a328:	4770      	bx	lr

0800a32a <__retarget_lock_release_recursive>:
 800a32a:	4770      	bx	lr

0800a32c <__swhatbuf_r>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	460e      	mov	r6, r1
 800a330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a334:	2900      	cmp	r1, #0
 800a336:	b096      	sub	sp, #88	; 0x58
 800a338:	4614      	mov	r4, r2
 800a33a:	461d      	mov	r5, r3
 800a33c:	da08      	bge.n	800a350 <__swhatbuf_r+0x24>
 800a33e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a342:	2200      	movs	r2, #0
 800a344:	602a      	str	r2, [r5, #0]
 800a346:	061a      	lsls	r2, r3, #24
 800a348:	d410      	bmi.n	800a36c <__swhatbuf_r+0x40>
 800a34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a34e:	e00e      	b.n	800a36e <__swhatbuf_r+0x42>
 800a350:	466a      	mov	r2, sp
 800a352:	f000 f903 	bl	800a55c <_fstat_r>
 800a356:	2800      	cmp	r0, #0
 800a358:	dbf1      	blt.n	800a33e <__swhatbuf_r+0x12>
 800a35a:	9a01      	ldr	r2, [sp, #4]
 800a35c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a364:	425a      	negs	r2, r3
 800a366:	415a      	adcs	r2, r3
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	e7ee      	b.n	800a34a <__swhatbuf_r+0x1e>
 800a36c:	2340      	movs	r3, #64	; 0x40
 800a36e:	2000      	movs	r0, #0
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	b016      	add	sp, #88	; 0x58
 800a374:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a378 <__smakebuf_r>:
 800a378:	898b      	ldrh	r3, [r1, #12]
 800a37a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a37c:	079d      	lsls	r5, r3, #30
 800a37e:	4606      	mov	r6, r0
 800a380:	460c      	mov	r4, r1
 800a382:	d507      	bpl.n	800a394 <__smakebuf_r+0x1c>
 800a384:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	6123      	str	r3, [r4, #16]
 800a38c:	2301      	movs	r3, #1
 800a38e:	6163      	str	r3, [r4, #20]
 800a390:	b002      	add	sp, #8
 800a392:	bd70      	pop	{r4, r5, r6, pc}
 800a394:	ab01      	add	r3, sp, #4
 800a396:	466a      	mov	r2, sp
 800a398:	f7ff ffc8 	bl	800a32c <__swhatbuf_r>
 800a39c:	9900      	ldr	r1, [sp, #0]
 800a39e:	4605      	mov	r5, r0
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7ff f963 	bl	800966c <_malloc_r>
 800a3a6:	b948      	cbnz	r0, 800a3bc <__smakebuf_r+0x44>
 800a3a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ac:	059a      	lsls	r2, r3, #22
 800a3ae:	d4ef      	bmi.n	800a390 <__smakebuf_r+0x18>
 800a3b0:	f023 0303 	bic.w	r3, r3, #3
 800a3b4:	f043 0302 	orr.w	r3, r3, #2
 800a3b8:	81a3      	strh	r3, [r4, #12]
 800a3ba:	e7e3      	b.n	800a384 <__smakebuf_r+0xc>
 800a3bc:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <__smakebuf_r+0x7c>)
 800a3be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	6020      	str	r0, [r4, #0]
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	9b00      	ldr	r3, [sp, #0]
 800a3cc:	6163      	str	r3, [r4, #20]
 800a3ce:	9b01      	ldr	r3, [sp, #4]
 800a3d0:	6120      	str	r0, [r4, #16]
 800a3d2:	b15b      	cbz	r3, 800a3ec <__smakebuf_r+0x74>
 800a3d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 f8d1 	bl	800a580 <_isatty_r>
 800a3de:	b128      	cbz	r0, 800a3ec <__smakebuf_r+0x74>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	f023 0303 	bic.w	r3, r3, #3
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	81a3      	strh	r3, [r4, #12]
 800a3ec:	89a0      	ldrh	r0, [r4, #12]
 800a3ee:	4305      	orrs	r5, r0
 800a3f0:	81a5      	strh	r5, [r4, #12]
 800a3f2:	e7cd      	b.n	800a390 <__smakebuf_r+0x18>
 800a3f4:	0800a185 	.word	0x0800a185

0800a3f8 <_malloc_usable_size_r>:
 800a3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3fc:	1f18      	subs	r0, r3, #4
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bfbc      	itt	lt
 800a402:	580b      	ldrlt	r3, [r1, r0]
 800a404:	18c0      	addlt	r0, r0, r3
 800a406:	4770      	bx	lr

0800a408 <_raise_r>:
 800a408:	291f      	cmp	r1, #31
 800a40a:	b538      	push	{r3, r4, r5, lr}
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	d904      	bls.n	800a41c <_raise_r+0x14>
 800a412:	2316      	movs	r3, #22
 800a414:	6003      	str	r3, [r0, #0]
 800a416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a41a:	bd38      	pop	{r3, r4, r5, pc}
 800a41c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a41e:	b112      	cbz	r2, 800a426 <_raise_r+0x1e>
 800a420:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a424:	b94b      	cbnz	r3, 800a43a <_raise_r+0x32>
 800a426:	4620      	mov	r0, r4
 800a428:	f000 f830 	bl	800a48c <_getpid_r>
 800a42c:	462a      	mov	r2, r5
 800a42e:	4601      	mov	r1, r0
 800a430:	4620      	mov	r0, r4
 800a432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a436:	f000 b817 	b.w	800a468 <_kill_r>
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d00a      	beq.n	800a454 <_raise_r+0x4c>
 800a43e:	1c59      	adds	r1, r3, #1
 800a440:	d103      	bne.n	800a44a <_raise_r+0x42>
 800a442:	2316      	movs	r3, #22
 800a444:	6003      	str	r3, [r0, #0]
 800a446:	2001      	movs	r0, #1
 800a448:	e7e7      	b.n	800a41a <_raise_r+0x12>
 800a44a:	2400      	movs	r4, #0
 800a44c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a450:	4628      	mov	r0, r5
 800a452:	4798      	blx	r3
 800a454:	2000      	movs	r0, #0
 800a456:	e7e0      	b.n	800a41a <_raise_r+0x12>

0800a458 <raise>:
 800a458:	4b02      	ldr	r3, [pc, #8]	; (800a464 <raise+0xc>)
 800a45a:	4601      	mov	r1, r0
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	f7ff bfd3 	b.w	800a408 <_raise_r>
 800a462:	bf00      	nop
 800a464:	20000014 	.word	0x20000014

0800a468 <_kill_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	; (800a488 <_kill_r+0x20>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	4611      	mov	r1, r2
 800a474:	602b      	str	r3, [r5, #0]
 800a476:	f7f9 feff 	bl	8004278 <_kill>
 800a47a:	1c43      	adds	r3, r0, #1
 800a47c:	d102      	bne.n	800a484 <_kill_r+0x1c>
 800a47e:	682b      	ldr	r3, [r5, #0]
 800a480:	b103      	cbz	r3, 800a484 <_kill_r+0x1c>
 800a482:	6023      	str	r3, [r4, #0]
 800a484:	bd38      	pop	{r3, r4, r5, pc}
 800a486:	bf00      	nop
 800a488:	20000458 	.word	0x20000458

0800a48c <_getpid_r>:
 800a48c:	f7f9 beec 	b.w	8004268 <_getpid>

0800a490 <__sread>:
 800a490:	b510      	push	{r4, lr}
 800a492:	460c      	mov	r4, r1
 800a494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a498:	f000 f894 	bl	800a5c4 <_read_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	bfab      	itete	ge
 800a4a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4a4:	181b      	addge	r3, r3, r0
 800a4a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4aa:	bfac      	ite	ge
 800a4ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4ae:	81a3      	strhlt	r3, [r4, #12]
 800a4b0:	bd10      	pop	{r4, pc}

0800a4b2 <__swrite>:
 800a4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	461f      	mov	r7, r3
 800a4b8:	898b      	ldrh	r3, [r1, #12]
 800a4ba:	05db      	lsls	r3, r3, #23
 800a4bc:	4605      	mov	r5, r0
 800a4be:	460c      	mov	r4, r1
 800a4c0:	4616      	mov	r6, r2
 800a4c2:	d505      	bpl.n	800a4d0 <__swrite+0x1e>
 800a4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f000 f868 	bl	800a5a0 <_lseek_r>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	4632      	mov	r2, r6
 800a4de:	463b      	mov	r3, r7
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e6:	f000 b817 	b.w	800a518 <_write_r>

0800a4ea <__sseek>:
 800a4ea:	b510      	push	{r4, lr}
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f2:	f000 f855 	bl	800a5a0 <_lseek_r>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	89a3      	ldrh	r3, [r4, #12]
 800a4fa:	bf15      	itete	ne
 800a4fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a502:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a506:	81a3      	strheq	r3, [r4, #12]
 800a508:	bf18      	it	ne
 800a50a:	81a3      	strhne	r3, [r4, #12]
 800a50c:	bd10      	pop	{r4, pc}

0800a50e <__sclose>:
 800a50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a512:	f000 b813 	b.w	800a53c <_close_r>
	...

0800a518 <_write_r>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4d07      	ldr	r5, [pc, #28]	; (800a538 <_write_r+0x20>)
 800a51c:	4604      	mov	r4, r0
 800a51e:	4608      	mov	r0, r1
 800a520:	4611      	mov	r1, r2
 800a522:	2200      	movs	r2, #0
 800a524:	602a      	str	r2, [r5, #0]
 800a526:	461a      	mov	r2, r3
 800a528:	f7f9 fedd 	bl	80042e6 <_write>
 800a52c:	1c43      	adds	r3, r0, #1
 800a52e:	d102      	bne.n	800a536 <_write_r+0x1e>
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	b103      	cbz	r3, 800a536 <_write_r+0x1e>
 800a534:	6023      	str	r3, [r4, #0]
 800a536:	bd38      	pop	{r3, r4, r5, pc}
 800a538:	20000458 	.word	0x20000458

0800a53c <_close_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4d06      	ldr	r5, [pc, #24]	; (800a558 <_close_r+0x1c>)
 800a540:	2300      	movs	r3, #0
 800a542:	4604      	mov	r4, r0
 800a544:	4608      	mov	r0, r1
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	f7f9 fee9 	bl	800431e <_close>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_close_r+0x1a>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_close_r+0x1a>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	20000458 	.word	0x20000458

0800a55c <_fstat_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4d07      	ldr	r5, [pc, #28]	; (800a57c <_fstat_r+0x20>)
 800a560:	2300      	movs	r3, #0
 800a562:	4604      	mov	r4, r0
 800a564:	4608      	mov	r0, r1
 800a566:	4611      	mov	r1, r2
 800a568:	602b      	str	r3, [r5, #0]
 800a56a:	f7f9 fee4 	bl	8004336 <_fstat>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d102      	bne.n	800a578 <_fstat_r+0x1c>
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	b103      	cbz	r3, 800a578 <_fstat_r+0x1c>
 800a576:	6023      	str	r3, [r4, #0]
 800a578:	bd38      	pop	{r3, r4, r5, pc}
 800a57a:	bf00      	nop
 800a57c:	20000458 	.word	0x20000458

0800a580 <_isatty_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d06      	ldr	r5, [pc, #24]	; (800a59c <_isatty_r+0x1c>)
 800a584:	2300      	movs	r3, #0
 800a586:	4604      	mov	r4, r0
 800a588:	4608      	mov	r0, r1
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	f7f9 fee3 	bl	8004356 <_isatty>
 800a590:	1c43      	adds	r3, r0, #1
 800a592:	d102      	bne.n	800a59a <_isatty_r+0x1a>
 800a594:	682b      	ldr	r3, [r5, #0]
 800a596:	b103      	cbz	r3, 800a59a <_isatty_r+0x1a>
 800a598:	6023      	str	r3, [r4, #0]
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	20000458 	.word	0x20000458

0800a5a0 <_lseek_r>:
 800a5a0:	b538      	push	{r3, r4, r5, lr}
 800a5a2:	4d07      	ldr	r5, [pc, #28]	; (800a5c0 <_lseek_r+0x20>)
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	602a      	str	r2, [r5, #0]
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	f7f9 fedc 	bl	800436c <_lseek>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_lseek_r+0x1e>
 800a5b8:	682b      	ldr	r3, [r5, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_lseek_r+0x1e>
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20000458 	.word	0x20000458

0800a5c4 <_read_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d07      	ldr	r5, [pc, #28]	; (800a5e4 <_read_r+0x20>)
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	4608      	mov	r0, r1
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	602a      	str	r2, [r5, #0]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	f7f9 fe6a 	bl	80042ac <_read>
 800a5d8:	1c43      	adds	r3, r0, #1
 800a5da:	d102      	bne.n	800a5e2 <_read_r+0x1e>
 800a5dc:	682b      	ldr	r3, [r5, #0]
 800a5de:	b103      	cbz	r3, 800a5e2 <_read_r+0x1e>
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	20000458 	.word	0x20000458

0800a5e8 <sqrt>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	ed2d 8b02 	vpush	{d8}
 800a5ee:	ec55 4b10 	vmov	r4, r5, d0
 800a5f2:	f000 f853 	bl	800a69c <__ieee754_sqrt>
 800a5f6:	4622      	mov	r2, r4
 800a5f8:	462b      	mov	r3, r5
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4629      	mov	r1, r5
 800a5fe:	eeb0 8a40 	vmov.f32	s16, s0
 800a602:	eef0 8a60 	vmov.f32	s17, s1
 800a606:	f7f6 fa99 	bl	8000b3c <__aeabi_dcmpun>
 800a60a:	b990      	cbnz	r0, 800a632 <sqrt+0x4a>
 800a60c:	2200      	movs	r2, #0
 800a60e:	2300      	movs	r3, #0
 800a610:	4620      	mov	r0, r4
 800a612:	4629      	mov	r1, r5
 800a614:	f7f6 fa6a 	bl	8000aec <__aeabi_dcmplt>
 800a618:	b158      	cbz	r0, 800a632 <sqrt+0x4a>
 800a61a:	f7fd f89d 	bl	8007758 <__errno>
 800a61e:	2321      	movs	r3, #33	; 0x21
 800a620:	6003      	str	r3, [r0, #0]
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	4610      	mov	r0, r2
 800a628:	4619      	mov	r1, r3
 800a62a:	f7f6 f917 	bl	800085c <__aeabi_ddiv>
 800a62e:	ec41 0b18 	vmov	d8, r0, r1
 800a632:	eeb0 0a48 	vmov.f32	s0, s16
 800a636:	eef0 0a68 	vmov.f32	s1, s17
 800a63a:	ecbd 8b02 	vpop	{d8}
 800a63e:	bd38      	pop	{r3, r4, r5, pc}

0800a640 <asinf>:
 800a640:	b508      	push	{r3, lr}
 800a642:	ed2d 8b02 	vpush	{d8}
 800a646:	eeb0 8a40 	vmov.f32	s16, s0
 800a64a:	f000 f8d9 	bl	800a800 <__ieee754_asinf>
 800a64e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a656:	eef0 8a40 	vmov.f32	s17, s0
 800a65a:	d615      	bvs.n	800a688 <asinf+0x48>
 800a65c:	eeb0 0a48 	vmov.f32	s0, s16
 800a660:	f000 fb2c 	bl	800acbc <fabsf>
 800a664:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a668:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a670:	dd0a      	ble.n	800a688 <asinf+0x48>
 800a672:	f7fd f871 	bl	8007758 <__errno>
 800a676:	ecbd 8b02 	vpop	{d8}
 800a67a:	2321      	movs	r3, #33	; 0x21
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a682:	4804      	ldr	r0, [pc, #16]	; (800a694 <asinf+0x54>)
 800a684:	f000 bb22 	b.w	800accc <nanf>
 800a688:	eeb0 0a68 	vmov.f32	s0, s17
 800a68c:	ecbd 8b02 	vpop	{d8}
 800a690:	bd08      	pop	{r3, pc}
 800a692:	bf00      	nop
 800a694:	0800b0a8 	.word	0x0800b0a8

0800a698 <atan2f>:
 800a698:	f000 b998 	b.w	800a9cc <__ieee754_atan2f>

0800a69c <__ieee754_sqrt>:
 800a69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a0:	ec55 4b10 	vmov	r4, r5, d0
 800a6a4:	4e55      	ldr	r6, [pc, #340]	; (800a7fc <__ieee754_sqrt+0x160>)
 800a6a6:	43ae      	bics	r6, r5
 800a6a8:	ee10 0a10 	vmov	r0, s0
 800a6ac:	ee10 3a10 	vmov	r3, s0
 800a6b0:	462a      	mov	r2, r5
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	d110      	bne.n	800a6d8 <__ieee754_sqrt+0x3c>
 800a6b6:	ee10 2a10 	vmov	r2, s0
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ffa4 	bl	8000608 <__aeabi_dmul>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	f7f5 fde8 	bl	800029c <__adddf3>
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	ec45 4b10 	vmov	d0, r4, r5
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	2d00      	cmp	r5, #0
 800a6da:	dc10      	bgt.n	800a6fe <__ieee754_sqrt+0x62>
 800a6dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a6e0:	4330      	orrs	r0, r6
 800a6e2:	d0f5      	beq.n	800a6d0 <__ieee754_sqrt+0x34>
 800a6e4:	b15d      	cbz	r5, 800a6fe <__ieee754_sqrt+0x62>
 800a6e6:	ee10 2a10 	vmov	r2, s0
 800a6ea:	462b      	mov	r3, r5
 800a6ec:	ee10 0a10 	vmov	r0, s0
 800a6f0:	f7f5 fdd2 	bl	8000298 <__aeabi_dsub>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	f7f6 f8b0 	bl	800085c <__aeabi_ddiv>
 800a6fc:	e7e6      	b.n	800a6cc <__ieee754_sqrt+0x30>
 800a6fe:	1512      	asrs	r2, r2, #20
 800a700:	d074      	beq.n	800a7ec <__ieee754_sqrt+0x150>
 800a702:	07d4      	lsls	r4, r2, #31
 800a704:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a708:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a70c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a710:	bf5e      	ittt	pl
 800a712:	0fda      	lsrpl	r2, r3, #31
 800a714:	005b      	lslpl	r3, r3, #1
 800a716:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a71a:	2400      	movs	r4, #0
 800a71c:	0fda      	lsrs	r2, r3, #31
 800a71e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a722:	107f      	asrs	r7, r7, #1
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	2516      	movs	r5, #22
 800a728:	4620      	mov	r0, r4
 800a72a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a72e:	1886      	adds	r6, r0, r2
 800a730:	428e      	cmp	r6, r1
 800a732:	bfde      	ittt	le
 800a734:	1b89      	suble	r1, r1, r6
 800a736:	18b0      	addle	r0, r6, r2
 800a738:	18a4      	addle	r4, r4, r2
 800a73a:	0049      	lsls	r1, r1, #1
 800a73c:	3d01      	subs	r5, #1
 800a73e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a742:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a746:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a74a:	d1f0      	bne.n	800a72e <__ieee754_sqrt+0x92>
 800a74c:	462a      	mov	r2, r5
 800a74e:	f04f 0e20 	mov.w	lr, #32
 800a752:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a756:	4281      	cmp	r1, r0
 800a758:	eb06 0c05 	add.w	ip, r6, r5
 800a75c:	dc02      	bgt.n	800a764 <__ieee754_sqrt+0xc8>
 800a75e:	d113      	bne.n	800a788 <__ieee754_sqrt+0xec>
 800a760:	459c      	cmp	ip, r3
 800a762:	d811      	bhi.n	800a788 <__ieee754_sqrt+0xec>
 800a764:	f1bc 0f00 	cmp.w	ip, #0
 800a768:	eb0c 0506 	add.w	r5, ip, r6
 800a76c:	da43      	bge.n	800a7f6 <__ieee754_sqrt+0x15a>
 800a76e:	2d00      	cmp	r5, #0
 800a770:	db41      	blt.n	800a7f6 <__ieee754_sqrt+0x15a>
 800a772:	f100 0801 	add.w	r8, r0, #1
 800a776:	1a09      	subs	r1, r1, r0
 800a778:	459c      	cmp	ip, r3
 800a77a:	bf88      	it	hi
 800a77c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a780:	eba3 030c 	sub.w	r3, r3, ip
 800a784:	4432      	add	r2, r6
 800a786:	4640      	mov	r0, r8
 800a788:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a78c:	f1be 0e01 	subs.w	lr, lr, #1
 800a790:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a794:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a798:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a79c:	d1db      	bne.n	800a756 <__ieee754_sqrt+0xba>
 800a79e:	430b      	orrs	r3, r1
 800a7a0:	d006      	beq.n	800a7b0 <__ieee754_sqrt+0x114>
 800a7a2:	1c50      	adds	r0, r2, #1
 800a7a4:	bf13      	iteet	ne
 800a7a6:	3201      	addne	r2, #1
 800a7a8:	3401      	addeq	r4, #1
 800a7aa:	4672      	moveq	r2, lr
 800a7ac:	f022 0201 	bicne.w	r2, r2, #1
 800a7b0:	1063      	asrs	r3, r4, #1
 800a7b2:	0852      	lsrs	r2, r2, #1
 800a7b4:	07e1      	lsls	r1, r4, #31
 800a7b6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a7ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a7be:	bf48      	it	mi
 800a7c0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a7c4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a7c8:	4614      	mov	r4, r2
 800a7ca:	e781      	b.n	800a6d0 <__ieee754_sqrt+0x34>
 800a7cc:	0ad9      	lsrs	r1, r3, #11
 800a7ce:	3815      	subs	r0, #21
 800a7d0:	055b      	lsls	r3, r3, #21
 800a7d2:	2900      	cmp	r1, #0
 800a7d4:	d0fa      	beq.n	800a7cc <__ieee754_sqrt+0x130>
 800a7d6:	02cd      	lsls	r5, r1, #11
 800a7d8:	d50a      	bpl.n	800a7f0 <__ieee754_sqrt+0x154>
 800a7da:	f1c2 0420 	rsb	r4, r2, #32
 800a7de:	fa23 f404 	lsr.w	r4, r3, r4
 800a7e2:	1e55      	subs	r5, r2, #1
 800a7e4:	4093      	lsls	r3, r2
 800a7e6:	4321      	orrs	r1, r4
 800a7e8:	1b42      	subs	r2, r0, r5
 800a7ea:	e78a      	b.n	800a702 <__ieee754_sqrt+0x66>
 800a7ec:	4610      	mov	r0, r2
 800a7ee:	e7f0      	b.n	800a7d2 <__ieee754_sqrt+0x136>
 800a7f0:	0049      	lsls	r1, r1, #1
 800a7f2:	3201      	adds	r2, #1
 800a7f4:	e7ef      	b.n	800a7d6 <__ieee754_sqrt+0x13a>
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	e7bd      	b.n	800a776 <__ieee754_sqrt+0xda>
 800a7fa:	bf00      	nop
 800a7fc:	7ff00000 	.word	0x7ff00000

0800a800 <__ieee754_asinf>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	ee10 5a10 	vmov	r5, s0
 800a806:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a80a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a80e:	ed2d 8b04 	vpush	{d8-d9}
 800a812:	d10c      	bne.n	800a82e <__ieee754_asinf+0x2e>
 800a814:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a98c <__ieee754_asinf+0x18c>
 800a818:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a990 <__ieee754_asinf+0x190>
 800a81c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a820:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a824:	eeb0 0a67 	vmov.f32	s0, s15
 800a828:	ecbd 8b04 	vpop	{d8-d9}
 800a82c:	bd38      	pop	{r3, r4, r5, pc}
 800a82e:	dd04      	ble.n	800a83a <__ieee754_asinf+0x3a>
 800a830:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a834:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a838:	e7f6      	b.n	800a828 <__ieee754_asinf+0x28>
 800a83a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a83e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a842:	da0b      	bge.n	800a85c <__ieee754_asinf+0x5c>
 800a844:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a848:	da52      	bge.n	800a8f0 <__ieee754_asinf+0xf0>
 800a84a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a994 <__ieee754_asinf+0x194>
 800a84e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a852:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a85a:	dce5      	bgt.n	800a828 <__ieee754_asinf+0x28>
 800a85c:	f000 fa2e 	bl	800acbc <fabsf>
 800a860:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a864:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a868:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a86c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a998 <__ieee754_asinf+0x198>
 800a870:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a99c <__ieee754_asinf+0x19c>
 800a874:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a9a0 <__ieee754_asinf+0x1a0>
 800a878:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a87c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a9a4 <__ieee754_asinf+0x1a4>
 800a880:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a884:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a9a8 <__ieee754_asinf+0x1a8>
 800a888:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a88c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a9ac <__ieee754_asinf+0x1ac>
 800a890:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a894:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a9b0 <__ieee754_asinf+0x1b0>
 800a898:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a89c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a9b4 <__ieee754_asinf+0x1b4>
 800a8a0:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a8a4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a9b8 <__ieee754_asinf+0x1b8>
 800a8a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a8ac:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a9bc <__ieee754_asinf+0x1bc>
 800a8b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a8b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a8b8:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a8bc:	f000 f926 	bl	800ab0c <__ieee754_sqrtf>
 800a8c0:	4b3f      	ldr	r3, [pc, #252]	; (800a9c0 <__ieee754_asinf+0x1c0>)
 800a8c2:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a8c6:	429c      	cmp	r4, r3
 800a8c8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a8cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a8d0:	dd3d      	ble.n	800a94e <__ieee754_asinf+0x14e>
 800a8d2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a8d6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a9c4 <__ieee754_asinf+0x1c4>
 800a8da:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a8de:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a990 <__ieee754_asinf+0x190>
 800a8e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	bfd8      	it	le
 800a8ea:	eeb1 0a40 	vnegle.f32	s0, s0
 800a8ee:	e79b      	b.n	800a828 <__ieee754_asinf+0x28>
 800a8f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a8f4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a998 <__ieee754_asinf+0x198>
 800a8f8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a99c <__ieee754_asinf+0x19c>
 800a8fc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a9b0 <__ieee754_asinf+0x1b0>
 800a900:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a904:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a9a4 <__ieee754_asinf+0x1a4>
 800a908:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a90c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a9a8 <__ieee754_asinf+0x1a8>
 800a910:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a914:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a9ac <__ieee754_asinf+0x1ac>
 800a918:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a91c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a9a0 <__ieee754_asinf+0x1a0>
 800a920:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a924:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a9b4 <__ieee754_asinf+0x1b4>
 800a928:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a92c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a9b8 <__ieee754_asinf+0x1b8>
 800a930:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a934:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a9bc <__ieee754_asinf+0x1bc>
 800a938:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a93c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a940:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a944:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a948:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a94c:	e76c      	b.n	800a828 <__ieee754_asinf+0x28>
 800a94e:	ee10 3a10 	vmov	r3, s0
 800a952:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a956:	f023 030f 	bic.w	r3, r3, #15
 800a95a:	ee07 3a10 	vmov	s14, r3
 800a95e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a962:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a966:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a96a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a96e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a98c <__ieee754_asinf+0x18c>
 800a972:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a976:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a97a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a9c8 <__ieee754_asinf+0x1c8>
 800a97e:	eeb0 6a40 	vmov.f32	s12, s0
 800a982:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a986:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a98a:	e7aa      	b.n	800a8e2 <__ieee754_asinf+0xe2>
 800a98c:	b33bbd2e 	.word	0xb33bbd2e
 800a990:	3fc90fdb 	.word	0x3fc90fdb
 800a994:	7149f2ca 	.word	0x7149f2ca
 800a998:	3811ef08 	.word	0x3811ef08
 800a99c:	3a4f7f04 	.word	0x3a4f7f04
 800a9a0:	3e2aaaab 	.word	0x3e2aaaab
 800a9a4:	bd241146 	.word	0xbd241146
 800a9a8:	3e4e0aa8 	.word	0x3e4e0aa8
 800a9ac:	bea6b090 	.word	0xbea6b090
 800a9b0:	3d9dc62e 	.word	0x3d9dc62e
 800a9b4:	bf303361 	.word	0xbf303361
 800a9b8:	4001572d 	.word	0x4001572d
 800a9bc:	c019d139 	.word	0xc019d139
 800a9c0:	3f799999 	.word	0x3f799999
 800a9c4:	333bbd2e 	.word	0x333bbd2e
 800a9c8:	3f490fdb 	.word	0x3f490fdb

0800a9cc <__ieee754_atan2f>:
 800a9cc:	ee10 2a90 	vmov	r2, s1
 800a9d0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a9d4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	eef0 7a40 	vmov.f32	s15, s0
 800a9de:	dc06      	bgt.n	800a9ee <__ieee754_atan2f+0x22>
 800a9e0:	ee10 0a10 	vmov	r0, s0
 800a9e4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a9e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9ec:	dd04      	ble.n	800a9f8 <__ieee754_atan2f+0x2c>
 800a9ee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a9f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a9f6:	bd10      	pop	{r4, pc}
 800a9f8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a9fc:	d103      	bne.n	800aa06 <__ieee754_atan2f+0x3a>
 800a9fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa02:	f000 b887 	b.w	800ab14 <atanf>
 800aa06:	1794      	asrs	r4, r2, #30
 800aa08:	f004 0402 	and.w	r4, r4, #2
 800aa0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800aa10:	b943      	cbnz	r3, 800aa24 <__ieee754_atan2f+0x58>
 800aa12:	2c02      	cmp	r4, #2
 800aa14:	d05e      	beq.n	800aad4 <__ieee754_atan2f+0x108>
 800aa16:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aae8 <__ieee754_atan2f+0x11c>
 800aa1a:	2c03      	cmp	r4, #3
 800aa1c:	bf08      	it	eq
 800aa1e:	eef0 7a47 	vmoveq.f32	s15, s14
 800aa22:	e7e6      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aa24:	b941      	cbnz	r1, 800aa38 <__ieee754_atan2f+0x6c>
 800aa26:	eddf 7a31 	vldr	s15, [pc, #196]	; 800aaec <__ieee754_atan2f+0x120>
 800aa2a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800aaf0 <__ieee754_atan2f+0x124>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	bfb8      	it	lt
 800aa32:	eef0 7a40 	vmovlt.f32	s15, s0
 800aa36:	e7dc      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aa38:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aa3c:	d110      	bne.n	800aa60 <__ieee754_atan2f+0x94>
 800aa3e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aa46:	d107      	bne.n	800aa58 <__ieee754_atan2f+0x8c>
 800aa48:	2c02      	cmp	r4, #2
 800aa4a:	d846      	bhi.n	800aada <__ieee754_atan2f+0x10e>
 800aa4c:	4b29      	ldr	r3, [pc, #164]	; (800aaf4 <__ieee754_atan2f+0x128>)
 800aa4e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa52:	edd4 7a00 	vldr	s15, [r4]
 800aa56:	e7cc      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aa58:	2c02      	cmp	r4, #2
 800aa5a:	d841      	bhi.n	800aae0 <__ieee754_atan2f+0x114>
 800aa5c:	4b26      	ldr	r3, [pc, #152]	; (800aaf8 <__ieee754_atan2f+0x12c>)
 800aa5e:	e7f6      	b.n	800aa4e <__ieee754_atan2f+0x82>
 800aa60:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa64:	d0df      	beq.n	800aa26 <__ieee754_atan2f+0x5a>
 800aa66:	1a5b      	subs	r3, r3, r1
 800aa68:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800aa6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800aa70:	da1a      	bge.n	800aaa8 <__ieee754_atan2f+0xdc>
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	da01      	bge.n	800aa7a <__ieee754_atan2f+0xae>
 800aa76:	313c      	adds	r1, #60	; 0x3c
 800aa78:	db19      	blt.n	800aaae <__ieee754_atan2f+0xe2>
 800aa7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800aa7e:	f000 f91d 	bl	800acbc <fabsf>
 800aa82:	f000 f847 	bl	800ab14 <atanf>
 800aa86:	eef0 7a40 	vmov.f32	s15, s0
 800aa8a:	2c01      	cmp	r4, #1
 800aa8c:	d012      	beq.n	800aab4 <__ieee754_atan2f+0xe8>
 800aa8e:	2c02      	cmp	r4, #2
 800aa90:	d017      	beq.n	800aac2 <__ieee754_atan2f+0xf6>
 800aa92:	2c00      	cmp	r4, #0
 800aa94:	d0ad      	beq.n	800a9f2 <__ieee754_atan2f+0x26>
 800aa96:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800aafc <__ieee754_atan2f+0x130>
 800aa9a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa9e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800ab00 <__ieee754_atan2f+0x134>
 800aaa2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aaa6:	e7a4      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aaa8:	eddf 7a10 	vldr	s15, [pc, #64]	; 800aaec <__ieee754_atan2f+0x120>
 800aaac:	e7ed      	b.n	800aa8a <__ieee754_atan2f+0xbe>
 800aaae:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ab04 <__ieee754_atan2f+0x138>
 800aab2:	e7ea      	b.n	800aa8a <__ieee754_atan2f+0xbe>
 800aab4:	ee17 3a90 	vmov	r3, s15
 800aab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aabc:	ee07 3a90 	vmov	s15, r3
 800aac0:	e797      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aac2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aafc <__ieee754_atan2f+0x130>
 800aac6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aaca:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800ab00 <__ieee754_atan2f+0x134>
 800aace:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aad2:	e78e      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aad4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800ab00 <__ieee754_atan2f+0x134>
 800aad8:	e78b      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aada:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800ab08 <__ieee754_atan2f+0x13c>
 800aade:	e788      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aae0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ab04 <__ieee754_atan2f+0x138>
 800aae4:	e785      	b.n	800a9f2 <__ieee754_atan2f+0x26>
 800aae6:	bf00      	nop
 800aae8:	c0490fdb 	.word	0xc0490fdb
 800aaec:	3fc90fdb 	.word	0x3fc90fdb
 800aaf0:	bfc90fdb 	.word	0xbfc90fdb
 800aaf4:	0800b214 	.word	0x0800b214
 800aaf8:	0800b220 	.word	0x0800b220
 800aafc:	33bbbd2e 	.word	0x33bbbd2e
 800ab00:	40490fdb 	.word	0x40490fdb
 800ab04:	00000000 	.word	0x00000000
 800ab08:	3f490fdb 	.word	0x3f490fdb

0800ab0c <__ieee754_sqrtf>:
 800ab0c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ab10:	4770      	bx	lr
	...

0800ab14 <atanf>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	ee10 5a10 	vmov	r5, s0
 800ab1a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ab1e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800ab22:	eef0 7a40 	vmov.f32	s15, s0
 800ab26:	db10      	blt.n	800ab4a <atanf+0x36>
 800ab28:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ab2c:	dd04      	ble.n	800ab38 <atanf+0x24>
 800ab2e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ab32:	eeb0 0a67 	vmov.f32	s0, s15
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ac70 <atanf+0x15c>
 800ab3c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ac74 <atanf+0x160>
 800ab40:	2d00      	cmp	r5, #0
 800ab42:	bfd8      	it	le
 800ab44:	eef0 7a40 	vmovle.f32	s15, s0
 800ab48:	e7f3      	b.n	800ab32 <atanf+0x1e>
 800ab4a:	4b4b      	ldr	r3, [pc, #300]	; (800ac78 <atanf+0x164>)
 800ab4c:	429c      	cmp	r4, r3
 800ab4e:	dc10      	bgt.n	800ab72 <atanf+0x5e>
 800ab50:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ab54:	da0a      	bge.n	800ab6c <atanf+0x58>
 800ab56:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ac7c <atanf+0x168>
 800ab5a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ab5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab62:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ab66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab6a:	dce2      	bgt.n	800ab32 <atanf+0x1e>
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab70:	e013      	b.n	800ab9a <atanf+0x86>
 800ab72:	f000 f8a3 	bl	800acbc <fabsf>
 800ab76:	4b42      	ldr	r3, [pc, #264]	; (800ac80 <atanf+0x16c>)
 800ab78:	429c      	cmp	r4, r3
 800ab7a:	dc4f      	bgt.n	800ac1c <atanf+0x108>
 800ab7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ab80:	429c      	cmp	r4, r3
 800ab82:	dc41      	bgt.n	800ac08 <atanf+0xf4>
 800ab84:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ab88:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab8c:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab90:	2300      	movs	r3, #0
 800ab92:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800aba0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ac84 <atanf+0x170>
 800aba4:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ac88 <atanf+0x174>
 800aba8:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ac8c <atanf+0x178>
 800abac:	ee66 6a06 	vmul.f32	s13, s12, s12
 800abb0:	eee6 5a87 	vfma.f32	s11, s13, s14
 800abb4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ac90 <atanf+0x17c>
 800abb8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800abbc:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ac94 <atanf+0x180>
 800abc0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800abc4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ac98 <atanf+0x184>
 800abc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800abcc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac9c <atanf+0x188>
 800abd0:	eee7 5a26 	vfma.f32	s11, s14, s13
 800abd4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800aca0 <atanf+0x18c>
 800abd8:	eea6 5a87 	vfma.f32	s10, s13, s14
 800abdc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800aca4 <atanf+0x190>
 800abe0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800abe4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800aca8 <atanf+0x194>
 800abe8:	eea7 5a26 	vfma.f32	s10, s14, s13
 800abec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800acac <atanf+0x198>
 800abf0:	eea5 7a26 	vfma.f32	s14, s10, s13
 800abf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800abf8:	eea5 7a86 	vfma.f32	s14, s11, s12
 800abfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ac00:	d121      	bne.n	800ac46 <atanf+0x132>
 800ac02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac06:	e794      	b.n	800ab32 <atanf+0x1e>
 800ac08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ac0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ac10:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ac14:	2301      	movs	r3, #1
 800ac16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac1a:	e7be      	b.n	800ab9a <atanf+0x86>
 800ac1c:	4b24      	ldr	r3, [pc, #144]	; (800acb0 <atanf+0x19c>)
 800ac1e:	429c      	cmp	r4, r3
 800ac20:	dc0b      	bgt.n	800ac3a <atanf+0x126>
 800ac22:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ac2e:	2302      	movs	r3, #2
 800ac30:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ac34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac38:	e7af      	b.n	800ab9a <atanf+0x86>
 800ac3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ac3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac42:	2303      	movs	r3, #3
 800ac44:	e7a9      	b.n	800ab9a <atanf+0x86>
 800ac46:	4a1b      	ldr	r2, [pc, #108]	; (800acb4 <atanf+0x1a0>)
 800ac48:	491b      	ldr	r1, [pc, #108]	; (800acb8 <atanf+0x1a4>)
 800ac4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ac4e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ac52:	ed93 0a00 	vldr	s0, [r3]
 800ac56:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ac5a:	ed92 0a00 	vldr	s0, [r2]
 800ac5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac62:	2d00      	cmp	r5, #0
 800ac64:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ac68:	bfb8      	it	lt
 800ac6a:	eef1 7a67 	vneglt.f32	s15, s15
 800ac6e:	e760      	b.n	800ab32 <atanf+0x1e>
 800ac70:	3fc90fdb 	.word	0x3fc90fdb
 800ac74:	bfc90fdb 	.word	0xbfc90fdb
 800ac78:	3edfffff 	.word	0x3edfffff
 800ac7c:	7149f2ca 	.word	0x7149f2ca
 800ac80:	3f97ffff 	.word	0x3f97ffff
 800ac84:	3c8569d7 	.word	0x3c8569d7
 800ac88:	3d4bda59 	.word	0x3d4bda59
 800ac8c:	bd6ef16b 	.word	0xbd6ef16b
 800ac90:	3d886b35 	.word	0x3d886b35
 800ac94:	3dba2e6e 	.word	0x3dba2e6e
 800ac98:	3e124925 	.word	0x3e124925
 800ac9c:	3eaaaaab 	.word	0x3eaaaaab
 800aca0:	bd15a221 	.word	0xbd15a221
 800aca4:	bd9d8795 	.word	0xbd9d8795
 800aca8:	bde38e38 	.word	0xbde38e38
 800acac:	be4ccccd 	.word	0xbe4ccccd
 800acb0:	401bffff 	.word	0x401bffff
 800acb4:	0800b22c 	.word	0x0800b22c
 800acb8:	0800b23c 	.word	0x0800b23c

0800acbc <fabsf>:
 800acbc:	ee10 3a10 	vmov	r3, s0
 800acc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acc4:	ee00 3a10 	vmov	s0, r3
 800acc8:	4770      	bx	lr
	...

0800accc <nanf>:
 800accc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800acd4 <nanf+0x8>
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	7fc00000 	.word	0x7fc00000

0800acd8 <_init>:
 800acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acda:	bf00      	nop
 800acdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acde:	bc08      	pop	{r3}
 800ace0:	469e      	mov	lr, r3
 800ace2:	4770      	bx	lr

0800ace4 <_fini>:
 800ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ace6:	bf00      	nop
 800ace8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acea:	bc08      	pop	{r3}
 800acec:	469e      	mov	lr, r3
 800acee:	4770      	bx	lr
