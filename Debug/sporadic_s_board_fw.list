
sporadic_s_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a3c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000075c  08011be0  08011be0  00021be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801233c  0801233c  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801233c  0801233c  0002233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012344  08012344  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012344  08012344  00022344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012348  08012348  00022348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0801234c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001f8  08012540  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08012540  00030634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e996  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004285  00000000  00000000  0004ebba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00052e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e0  00000000  00000000  000548e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2aa  00000000  00000000  000561c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022f6e  00000000  00000000  0007346a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ba58  00000000  00000000  000963d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131e30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083c4  00000000  00000000  00131e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011bc4 	.word	0x08011bc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08011bc4 	.word	0x08011bc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADXL_init>:
#include "string.h"
I2C_HandleTypeDef *_adxl_i2c;
readings *_adxl_data;
uint16_t scale = 0;
uint8_t _adxl_timeout = 10;
uint8_t ADXL_init(I2C_HandleTypeDef *i2c, readings *data) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	_adxl_i2c = i2c;
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <ADXL_init+0x6c>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
	_adxl_data = data;
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <ADXL_init+0x70>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6013      	str	r3, [r2, #0]
	log_s_wnl("ADXL345 started---");
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <ADXL_init+0x74>)
 8000f74:	f000 fd0a 	bl	800198c <log_s_wnl>
	if (ADXL_ReadReg(ADXL345_DEVID) == 0xE5) {
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f84f 	bl	800101c <ADXL_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2be5      	cmp	r3, #229	; 0xe5
 8000f82:	d114      	bne.n	8000fae <ADXL_init+0x52>
		log_s_int("ok with id",ADXL_ReadReg(ADXL345_DEVID));
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f849 	bl	800101c <ADXL_ReadReg>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <ADXL_init+0x78>)
 8000f90:	f000 fd14 	bl	80019bc <log_s_int>
	} else {
		log_s_int("ERROR with id", ADXL_ReadReg(ADXL345_DEVID));
		return 1;
	}
	_adxl_data->adxl345.scale = 2 * (1 << (7 - ADXL_get_range()));
 8000f94:	f000 f882 	bl	800109c <ADXL_get_range>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <ADXL_init+0x70>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	82da      	strh	r2, [r3, #22]
	return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e008      	b.n	8000fc0 <ADXL_init+0x64>
		log_s_int("ERROR with id", ADXL_ReadReg(ADXL345_DEVID));
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f834 	bl	800101c <ADXL_ReadReg>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <ADXL_init+0x7c>)
 8000fba:	f000 fcff 	bl	80019bc <log_s_int>
		return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000214 	.word	0x20000214
 8000fcc:	20000218 	.word	0x20000218
 8000fd0:	08011be0 	.word	0x08011be0
 8000fd4:	08011bf4 	.word	0x08011bf4
 8000fd8:	08011c00 	.word	0x08011c00

08000fdc <ADXL_WriteReg>:

void ADXL_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	733b      	strb	r3, [r7, #12]
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR << 1, arr, 2, _adxl_timeout);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <ADXL_WriteReg+0x38>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <ADXL_WriteReg+0x3c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	21a6      	movs	r1, #166	; 0xa6
 8001006:	f005 f851 	bl	80060ac <HAL_I2C_Master_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000214 	.word	0x20000214
 8001018:	20000000 	.word	0x20000000

0800101c <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR << 1, &reg, 1, _adxl_timeout);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <ADXL_ReadReg+0x40>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <ADXL_ReadReg+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	1dfa      	adds	r2, r7, #7
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21a6      	movs	r1, #166	; 0xa6
 8001036:	f005 f839 	bl	80060ac <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_adxl_i2c, ADXL_ADDR << 1, &result, 1,
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <ADXL_ReadReg+0x40>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <ADXL_ReadReg+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f107 020f 	add.w	r2, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	21a6      	movs	r1, #166	; 0xa6
 800104c:	f005 f92c 	bl	80062a8 <HAL_I2C_Master_Receive>
			_adxl_timeout);
	return result;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
	/*uint8_t result;
	 HAL_I2C_Mem_Read (_adxl_i2c, ADXL_ADDR<<1, reg, 1, (uint8_t *)result, 1, 100);
	 return result;*/
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000214 	.word	0x20000214
 8001060:	20000000 	.word	0x20000000

08001064 <ADXL_set_range>:
void ADXL_set_range(ADXLRANGE rng) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,
			(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0x3) | rng);
 800106e:	2031      	movs	r0, #49	; 0x31
 8001070:	f7ff ffd4 	bl	800101c <ADXL_ReadReg>
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4619      	mov	r1, r3
 8001078:	2031      	movs	r0, #49	; 0x31
 800107a:	f7ff ffaf 	bl	8000fdc <ADXL_WriteReg>
	_adxl_data->adxl345.scale = 2 * (1 << (7 - rng));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f1c3 0307 	rsb	r3, r3, #7
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <ADXL_set_range+0x34>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b292      	uxth	r2, r2
 800108e:	82da      	strh	r2, [r3, #22]
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000218 	.word	0x20000218

0800109c <ADXL_get_range>:

uint8_t ADXL_get_range() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) % 4;
 80010a0:	2031      	movs	r0, #49	; 0x31
 80010a2:	f7ff ffbb 	bl	800101c <ADXL_ReadReg>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <ADXL_set_rate>:

void ADXL_set_rate(ADXLBITRATE rate) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_BW_RATE,
			(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0b111) | rate);
 80010bc:	2031      	movs	r0, #49	; 0x31
 80010be:	f7ff ffad 	bl	800101c <ADXL_ReadReg>
	ADXL_WriteReg(ADXL345_REG_BW_RATE,
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	202c      	movs	r0, #44	; 0x2c
 80010c8:	f7ff ff88 	bl	8000fdc <ADXL_WriteReg>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ADXL_power>:
	case HZ3200:
		return 3200;
	}
}

void ADXL_power(uint8_t pw) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if (pw == 1) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10b      	bne.n	80010fc <ADXL_power+0x28>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL, ADXL_ReadReg(
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff ff99 	bl	800101c <ADXL_ReadReg>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	202d      	movs	r0, #45	; 0x2d
 80010f6:	f7ff ff71 	bl	8000fdc <ADXL_WriteReg>
		ADXL345_REG_POWER_CTL) | ADXL345_BIT_PWR_REG_MEASURE);
	} else {
		ADXL_WriteReg(ADXL345_REG_POWER_CTL, ADXL_ReadReg(
		ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
	}
}
 80010fa:	e006      	b.n	800110a <ADXL_power+0x36>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL, ADXL_ReadReg(
 80010fc:	202d      	movs	r0, #45	; 0x2d
 80010fe:	f7ff ff8d 	bl	800101c <ADXL_ReadReg>
 8001102:	2100      	movs	r1, #0
 8001104:	202d      	movs	r0, #45	; 0x2d
 8001106:	f7ff ff69 	bl	8000fdc <ADXL_WriteReg>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ADXL_full_res>:
void ADXL_full_res(uint8_t res) {
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
	if (res == 1) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <ADXL_full_res+0x22>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,
 8001122:	2031      	movs	r0, #49	; 0x31
 8001124:	f7ff ff7a 	bl	800101c <ADXL_ReadReg>
 8001128:	4603      	mov	r3, r0
 800112a:	4619      	mov	r1, r3
 800112c:	2031      	movs	r0, #49	; 0x31
 800112e:	f7ff ff55 	bl	8000fdc <ADXL_WriteReg>
				ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) | ADXL345_BIT_FULL_RES_SET);
	} else {
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT, ADXL_ReadReg(
		ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
	}
}
 8001132:	e00a      	b.n	800114a <ADXL_full_res+0x38>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT, ADXL_ReadReg(
 8001134:	2031      	movs	r0, #49	; 0x31
 8001136:	f7ff ff71 	bl	800101c <ADXL_ReadReg>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4619      	mov	r1, r3
 8001144:	2031      	movs	r0, #49	; 0x31
 8001146:	f7ff ff49 	bl	8000fdc <ADXL_WriteReg>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <ADXL_get_data>:

void ADXL_get_data() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af04      	add	r7, sp, #16
	uint8_t data_rec[6];
	HAL_I2C_Mem_Read(_adxl_i2c, ADXL_ADDR << 1, 0x32, 1, (uint8_t*) data_rec, 6,
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <ADXL_get_data+0x68>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <ADXL_get_data+0x6c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2306      	movs	r3, #6
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	463b      	mov	r3, r7
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2232      	movs	r2, #50	; 0x32
 8001170:	21a6      	movs	r1, #166	; 0xa6
 8001172:	f005 fbb9 	bl	80068e8 <HAL_I2C_Mem_Read>
			_adxl_timeout);
	_adxl_data->adxl345.ax = ((data_rec[1] << 8) | data_rec[0]);
 8001176:	787b      	ldrb	r3, [r7, #1]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b219      	sxth	r1, r3
 800117c:	783b      	ldrb	r3, [r7, #0]
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <ADXL_get_data+0x70>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	b212      	sxth	r2, r2
 8001188:	821a      	strh	r2, [r3, #16]
	_adxl_data->adxl345.ay = ((data_rec[3] << 8) | data_rec[2]);
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b219      	sxth	r1, r3
 8001190:	78bb      	ldrb	r3, [r7, #2]
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <ADXL_get_data+0x70>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	b212      	sxth	r2, r2
 800119c:	825a      	strh	r2, [r3, #18]
	_adxl_data->adxl345.az = ((data_rec[5] << 8) | data_rec[4]);
 800119e:	797b      	ldrb	r3, [r7, #5]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b219      	sxth	r1, r3
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <ADXL_get_data+0x70>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b212      	sxth	r2, r2
 80011b0:	829a      	strh	r2, [r3, #20]
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000214 	.word	0x20000214
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000218 	.word	0x20000218

080011c8 <adxl_check_connection>:
uint8_t adxl_check_connection(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_DEVID) == 0xE5;
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff25 	bl	800101c <ADXL_ReadReg>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2be5      	cmp	r3, #229	; 0xe5
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <BMP180_init>:
		0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

BMP180_SETTINGS _calib_data;
BMP180_REGS _regs;

uint8_t BMP180_init(I2C_HandleTypeDef *i2c, readings *data) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	_bmp_i2c = i2c;
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <BMP180_init+0x44>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]
	_bmp_data = data;
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <BMP180_init+0x48>)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6013      	str	r3, [r2, #0]
	log_s_wnl("BMP180 started---");
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <BMP180_init+0x4c>)
 80011fc:	f000 fbc6 	bl	800198c <log_s_wnl>
	if (BMP180_ReadReg(BMP180_GET_ID_REG) == BMP180_CHIP_ID) {
 8001200:	20d0      	movs	r0, #208	; 0xd0
 8001202:	f000 f83b 	bl	800127c <BMP180_ReadReg>
 8001206:	4603      	mov	r3, r0
 8001208:	2b55      	cmp	r3, #85	; 0x55
 800120a:	d104      	bne.n	8001216 <BMP180_init+0x32>
		log_s("ok");
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <BMP180_init+0x50>)
 800120e:	f000 fb9b 	bl	8001948 <log_s>
	} else {
		log_s("ERROR");
		return 1;
	}
	return 0;
 8001212:	2300      	movs	r3, #0
 8001214:	e003      	b.n	800121e <BMP180_init+0x3a>
		log_s("ERROR");
 8001216:	4808      	ldr	r0, [pc, #32]	; (8001238 <BMP180_init+0x54>)
 8001218:	f000 fb96 	bl	8001948 <log_s>
		return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000021c 	.word	0x2000021c
 800122c:	20000220 	.word	0x20000220
 8001230:	08011c10 	.word	0x08011c10
 8001234:	08011c24 	.word	0x08011c24
 8001238:	08011c28 	.word	0x08011c28

0800123c <BMP180_WriteReg>:

void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	733b      	strb	r3, [r7, #12]
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, arr, 2, _bmp_timeout);
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <BMP180_WriteReg+0x38>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <BMP180_WriteReg+0x3c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	21ee      	movs	r1, #238	; 0xee
 8001266:	f004 ff21 	bl	80060ac <HAL_I2C_Master_Transmit>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000021c 	.word	0x2000021c
 8001278:	20000001 	.word	0x20000001

0800127c <BMP180_ReadReg>:

uint8_t BMP180_ReadReg(uint8_t reg) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, &reg, 1, _bmp_timeout);
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <BMP180_ReadReg+0x40>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <BMP180_ReadReg+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	1dfa      	adds	r2, r7, #7
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	21ee      	movs	r1, #238	; 0xee
 8001296:	f004 ff09 	bl	80060ac <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp_i2c, BMP180_ADDR << 1, &result, 1,
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <BMP180_ReadReg+0x40>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <BMP180_ReadReg+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f107 020f 	add.w	r2, r7, #15
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	21ee      	movs	r1, #238	; 0xee
 80012ac:	f004 fffc 	bl	80062a8 <HAL_I2C_Master_Receive>
			_bmp_timeout);
	return result;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000021c 	.word	0x2000021c
 80012c0:	20000001 	.word	0x20000001

080012c4 <BMP180_set_oss>:

int16_t _raw_t;
uint32_t _raw_p;

uint8_t _oss = 0;
void BMP180_set_oss(uint8_t oss) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	_oss = oss;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <BMP180_set_oss+0x1c>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	7013      	strb	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000240 	.word	0x20000240

080012e4 <_oss_delay>:

void _oss_delay() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if (_oss == 0) {
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <_oss_delay+0x48>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <_oss_delay+0x14>
		HAL_Delay(5);
 80012f0:	2005      	movs	r0, #5
 80012f2:	f004 f9a9 	bl	8005648 <HAL_Delay>
	} else if (_oss == 2) {
		HAL_Delay(14);
	} else if (_oss == 3) {
		HAL_Delay(26);
	}
}
 80012f6:	e016      	b.n	8001326 <_oss_delay+0x42>
	} else if (_oss == 1) {
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_oss_delay+0x48>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d103      	bne.n	8001308 <_oss_delay+0x24>
		HAL_Delay(8);
 8001300:	2008      	movs	r0, #8
 8001302:	f004 f9a1 	bl	8005648 <HAL_Delay>
}
 8001306:	e00e      	b.n	8001326 <_oss_delay+0x42>
	} else if (_oss == 2) {
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_oss_delay+0x48>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d103      	bne.n	8001318 <_oss_delay+0x34>
		HAL_Delay(14);
 8001310:	200e      	movs	r0, #14
 8001312:	f004 f999 	bl	8005648 <HAL_Delay>
}
 8001316:	e006      	b.n	8001326 <_oss_delay+0x42>
	} else if (_oss == 3) {
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <_oss_delay+0x48>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d102      	bne.n	8001326 <_oss_delay+0x42>
		HAL_Delay(26);
 8001320:	201a      	movs	r0, #26
 8001322:	f004 f991 	bl	8005648 <HAL_Delay>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000240 	.word	0x20000240

08001330 <BMP180_get_calibration_coefficients>:

void BMP180_get_calibration_coefficients() {
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 8001336:	af0a      	add	r7, sp, #40	; 0x28
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8)
 8001338:	20aa      	movs	r0, #170	; 0xaa
 800133a:	f7ff ff9f 	bl	800127c <BMP180_ReadReg>
 800133e:	4603      	mov	r3, r0
 8001340:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC1_LSB);
 8001342:	b21c      	sxth	r4, r3
 8001344:	20ab      	movs	r0, #171	; 0xab
 8001346:	f7ff ff99 	bl	800127c <BMP180_ReadReg>
 800134a:	4603      	mov	r3, r0
 800134c:	b21b      	sxth	r3, r3
 800134e:	4323      	orrs	r3, r4
 8001350:	b21a      	sxth	r2, r3
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8)
 8001352:	4b70      	ldr	r3, [pc, #448]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001354:	801a      	strh	r2, [r3, #0]
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8)
 8001356:	20ac      	movs	r0, #172	; 0xac
 8001358:	f7ff ff90 	bl	800127c <BMP180_ReadReg>
 800135c:	4603      	mov	r3, r0
 800135e:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC2_LSB);
 8001360:	b21c      	sxth	r4, r3
 8001362:	20ad      	movs	r0, #173	; 0xad
 8001364:	f7ff ff8a 	bl	800127c <BMP180_ReadReg>
 8001368:	4603      	mov	r3, r0
 800136a:	b21b      	sxth	r3, r3
 800136c:	4323      	orrs	r3, r4
 800136e:	b21a      	sxth	r2, r3
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8)
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001372:	805a      	strh	r2, [r3, #2]
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8)
 8001374:	20ae      	movs	r0, #174	; 0xae
 8001376:	f7ff ff81 	bl	800127c <BMP180_ReadReg>
 800137a:	4603      	mov	r3, r0
 800137c:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC3_LSB);
 800137e:	b21c      	sxth	r4, r3
 8001380:	20af      	movs	r0, #175	; 0xaf
 8001382:	f7ff ff7b 	bl	800127c <BMP180_ReadReg>
 8001386:	4603      	mov	r3, r0
 8001388:	b21b      	sxth	r3, r3
 800138a:	4323      	orrs	r3, r4
 800138c:	b21a      	sxth	r2, r3
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8)
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001390:	809a      	strh	r2, [r3, #4]
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8)
 8001392:	20b0      	movs	r0, #176	; 0xb0
 8001394:	f7ff ff72 	bl	800127c <BMP180_ReadReg>
 8001398:	4603      	mov	r3, r0
 800139a:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC4_LSB);
 800139c:	b21c      	sxth	r4, r3
 800139e:	20b1      	movs	r0, #177	; 0xb1
 80013a0:	f7ff ff6c 	bl	800127c <BMP180_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4323      	orrs	r3, r4
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b29a      	uxth	r2, r3
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8)
 80013ae:	4b59      	ldr	r3, [pc, #356]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80013b0:	80da      	strh	r2, [r3, #6]
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8)
 80013b2:	20b2      	movs	r0, #178	; 0xb2
 80013b4:	f7ff ff62 	bl	800127c <BMP180_ReadReg>
 80013b8:	4603      	mov	r3, r0
 80013ba:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC5_LSB);
 80013bc:	b21c      	sxth	r4, r3
 80013be:	20b3      	movs	r0, #179	; 0xb3
 80013c0:	f7ff ff5c 	bl	800127c <BMP180_ReadReg>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4323      	orrs	r3, r4
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	b29a      	uxth	r2, r3
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8)
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80013d0:	811a      	strh	r2, [r3, #8]
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8)
 80013d2:	20b4      	movs	r0, #180	; 0xb4
 80013d4:	f7ff ff52 	bl	800127c <BMP180_ReadReg>
 80013d8:	4603      	mov	r3, r0
 80013da:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC6_LSB);
 80013dc:	b21c      	sxth	r4, r3
 80013de:	20b5      	movs	r0, #181	; 0xb5
 80013e0:	f7ff ff4c 	bl	800127c <BMP180_ReadReg>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4323      	orrs	r3, r4
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	b29a      	uxth	r2, r3
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8)
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80013f0:	815a      	strh	r2, [r3, #10]
	_calib_data.B1 = (BMP180_ReadReg(BMP180_B1_MSB) << 8)
 80013f2:	20b6      	movs	r0, #182	; 0xb6
 80013f4:	f7ff ff42 	bl	800127c <BMP180_ReadReg>
 80013f8:	4603      	mov	r3, r0
 80013fa:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_B1_LSB);
 80013fc:	b21c      	sxth	r4, r3
 80013fe:	20b7      	movs	r0, #183	; 0xb7
 8001400:	f7ff ff3c 	bl	800127c <BMP180_ReadReg>
 8001404:	4603      	mov	r3, r0
 8001406:	b21b      	sxth	r3, r3
 8001408:	4323      	orrs	r3, r4
 800140a:	b21a      	sxth	r2, r3
	_calib_data.B1 = (BMP180_ReadReg(BMP180_B1_MSB) << 8)
 800140c:	4b41      	ldr	r3, [pc, #260]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800140e:	819a      	strh	r2, [r3, #12]
	_calib_data.B2 = (BMP180_ReadReg(BMP180_B2_MSB) << 8)
 8001410:	20b8      	movs	r0, #184	; 0xb8
 8001412:	f7ff ff33 	bl	800127c <BMP180_ReadReg>
 8001416:	4603      	mov	r3, r0
 8001418:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_B1_LSB);
 800141a:	b21c      	sxth	r4, r3
 800141c:	20b7      	movs	r0, #183	; 0xb7
 800141e:	f7ff ff2d 	bl	800127c <BMP180_ReadReg>
 8001422:	4603      	mov	r3, r0
 8001424:	b21b      	sxth	r3, r3
 8001426:	4323      	orrs	r3, r4
 8001428:	b21a      	sxth	r2, r3
	_calib_data.B2 = (BMP180_ReadReg(BMP180_B2_MSB) << 8)
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800142c:	81da      	strh	r2, [r3, #14]
	_calib_data.MB = (BMP180_ReadReg(BMP180_MB_MSB) << 8)
 800142e:	20ba      	movs	r0, #186	; 0xba
 8001430:	f7ff ff24 	bl	800127c <BMP180_ReadReg>
 8001434:	4603      	mov	r3, r0
 8001436:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_MB_LSB);
 8001438:	b21c      	sxth	r4, r3
 800143a:	20bb      	movs	r0, #187	; 0xbb
 800143c:	f7ff ff1e 	bl	800127c <BMP180_ReadReg>
 8001440:	4603      	mov	r3, r0
 8001442:	b21b      	sxth	r3, r3
 8001444:	4323      	orrs	r3, r4
 8001446:	b21a      	sxth	r2, r3
	_calib_data.MB = (BMP180_ReadReg(BMP180_MB_MSB) << 8)
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800144a:	821a      	strh	r2, [r3, #16]
	_calib_data.MC = (BMP180_ReadReg(BMP180_MC_MSB) << 8)
 800144c:	20bc      	movs	r0, #188	; 0xbc
 800144e:	f7ff ff15 	bl	800127c <BMP180_ReadReg>
 8001452:	4603      	mov	r3, r0
 8001454:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_MC_LSB);
 8001456:	b21c      	sxth	r4, r3
 8001458:	20bd      	movs	r0, #189	; 0xbd
 800145a:	f7ff ff0f 	bl	800127c <BMP180_ReadReg>
 800145e:	4603      	mov	r3, r0
 8001460:	b21b      	sxth	r3, r3
 8001462:	4323      	orrs	r3, r4
 8001464:	b21a      	sxth	r2, r3
	_calib_data.MC = (BMP180_ReadReg(BMP180_MC_MSB) << 8)
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001468:	825a      	strh	r2, [r3, #18]
	_calib_data.MD = (BMP180_ReadReg(BMP180_MD_MSB) << 8)
 800146a:	20be      	movs	r0, #190	; 0xbe
 800146c:	f7ff ff06 	bl	800127c <BMP180_ReadReg>
 8001470:	4603      	mov	r3, r0
 8001472:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_MD_LSB);
 8001474:	b21c      	sxth	r4, r3
 8001476:	20bf      	movs	r0, #191	; 0xbf
 8001478:	f7ff ff00 	bl	800127c <BMP180_ReadReg>
 800147c:	4603      	mov	r3, r0
 800147e:	b21b      	sxth	r3, r3
 8001480:	4323      	orrs	r3, r4
 8001482:	b21a      	sxth	r2, r3
	_calib_data.MD = (BMP180_ReadReg(BMP180_MD_MSB) << 8)
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001486:	829a      	strh	r2, [r3, #20]
	char *test[200];
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 800148e:	469c      	mov	ip, r3
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 8001496:	469e      	mov	lr, r3
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800149a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 800149e:	461a      	mov	r2, r3
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014a2:	88db      	ldrh	r3, [r3, #6]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014a4:	4619      	mov	r1, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014a8:	891b      	ldrh	r3, [r3, #8]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014aa:	461c      	mov	r4, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014ae:	895b      	ldrh	r3, [r3, #10]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014b0:	461d      	mov	r5, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014b8:	461e      	mov	r6, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014c0:	60fb      	str	r3, [r7, #12]
			_calib_data.MB, _calib_data.MC, _calib_data.MD);
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014c8:	60bb      	str	r3, [r7, #8]
			_calib_data.MB, _calib_data.MC, _calib_data.MD);
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014d0:	607b      	str	r3, [r7, #4]
			_calib_data.MB, _calib_data.MC, _calib_data.MD);
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014d8:	f107 0010 	add.w	r0, r7, #16
 80014dc:	9308      	str	r3, [sp, #32]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	9307      	str	r3, [sp, #28]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	9306      	str	r3, [sp, #24]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	9305      	str	r3, [sp, #20]
 80014ea:	9604      	str	r6, [sp, #16]
 80014ec:	9503      	str	r5, [sp, #12]
 80014ee:	9402      	str	r4, [sp, #8]
 80014f0:	9101      	str	r1, [sp, #4]
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	4673      	mov	r3, lr
 80014f6:	4662      	mov	r2, ip
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <BMP180_get_calibration_coefficients+0x1e8>)
 80014fa:	f00d fc2f 	bl	800ed5c <siprintf>
	log_s(test);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fa20 	bl	8001948 <log_s>
}
 8001508:	bf00      	nop
 800150a:	f507 774d 	add.w	r7, r7, #820	; 0x334
 800150e:	46bd      	mov	sp, r7
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001512:	bf00      	nop
 8001514:	20000224 	.word	0x20000224
 8001518:	08011c30 	.word	0x08011c30

0800151c <BMP180_get_data>:
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP); //measure
	HAL_Delay(5);  //wait
	return (BMP180_ReadReg(BMP180_MSB) << 8) | BMP180_ReadReg(BMP180_LSB); //read
}

void BMP180_get_data() {
 800151c:	b598      	push	{r3, r4, r7, lr}
 800151e:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, 0x2E); //measure
 8001520:	212e      	movs	r1, #46	; 0x2e
 8001522:	20f4      	movs	r0, #244	; 0xf4
 8001524:	f7ff fe8a 	bl	800123c <BMP180_WriteReg>
	HAL_Delay(5);  //wait
 8001528:	2005      	movs	r0, #5
 800152a:	f004 f88d 	bl	8005648 <HAL_Delay>
	_raw_t = (BMP180_ReadReg(BMP180_MSB) << 8) | BMP180_ReadReg(BMP180_LSB); //read
 800152e:	20f6      	movs	r0, #246	; 0xf6
 8001530:	f7ff fea4 	bl	800127c <BMP180_ReadReg>
 8001534:	4603      	mov	r3, r0
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21c      	sxth	r4, r3
 800153a:	20f7      	movs	r0, #247	; 0xf7
 800153c:	f7ff fe9e 	bl	800127c <BMP180_ReadReg>
 8001540:	4603      	mov	r3, r0
 8001542:	b21b      	sxth	r3, r3
 8001544:	4323      	orrs	r3, r4
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <BMP180_get_data+0x80>)
 800154a:	801a      	strh	r2, [r3, #0]

	BMP180_WriteReg(0xF4, 0x34 + (_oss << 6));
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <BMP180_get_data+0x84>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3334      	adds	r3, #52	; 0x34
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	20f4      	movs	r0, #244	; 0xf4
 800155c:	f7ff fe6e 	bl	800123c <BMP180_WriteReg>
	_oss_delay();
 8001560:	f7ff fec0 	bl	80012e4 <_oss_delay>
	_raw_p = ((BMP180_ReadReg(BMP180_MSB) << 16)
 8001564:	20f6      	movs	r0, #246	; 0xf6
 8001566:	f7ff fe89 	bl	800127c <BMP180_ReadReg>
 800156a:	4603      	mov	r3, r0
 800156c:	041c      	lsls	r4, r3, #16
			| (BMP180_ReadReg(BMP180_LSB) << 8)
 800156e:	20f7      	movs	r0, #247	; 0xf7
 8001570:	f7ff fe84 	bl	800127c <BMP180_ReadReg>
 8001574:	4603      	mov	r3, r0
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	431c      	orrs	r4, r3
			| BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _oss);
 800157a:	20f8      	movs	r0, #248	; 0xf8
 800157c:	f7ff fe7e 	bl	800127c <BMP180_ReadReg>
 8001580:	4603      	mov	r3, r0
 8001582:	ea44 0203 	orr.w	r2, r4, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <BMP180_get_data+0x84>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f1c3 0308 	rsb	r3, r3, #8
 800158e:	fa42 f303 	asr.w	r3, r2, r3
 8001592:	461a      	mov	r2, r3
	_raw_p = ((BMP180_ReadReg(BMP180_MSB) << 16)
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <BMP180_get_data+0x88>)
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	bd98      	pop	{r3, r4, r7, pc}
 800159c:	2000023a 	.word	0x2000023a
 80015a0:	20000240 	.word	0x20000240
 80015a4:	2000023c 	.word	0x2000023c

080015a8 <BMP180_Press>:

uint32_t BMP180_Press() {
 80015a8:	b480      	push	{r7}
 80015aa:	b08b      	sub	sp, #44	; 0x2c
 80015ac:	af00      	add	r7, sp, #0
	int32_t x1 = (_raw_t - _calib_data.AC6) * _calib_data.AC5 / (1 << 15);
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <BMP180_Press+0x1d0>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <BMP180_Press+0x1d4>)
 80015b8:	895b      	ldrh	r3, [r3, #10]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4a6f      	ldr	r2, [pc, #444]	; (800177c <BMP180_Press+0x1d4>)
 80015be:	8912      	ldrh	r2, [r2, #8]
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da02      	bge.n	80015ce <BMP180_Press+0x26>
 80015c8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80015cc:	337f      	adds	r3, #127	; 0x7f
 80015ce:	13db      	asrs	r3, r3, #15
 80015d0:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_calib_data.MC * (1 << 11)) / (x1 + _calib_data.MD);
 80015d2:	4b6a      	ldr	r3, [pc, #424]	; (800177c <BMP180_Press+0x1d4>)
 80015d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015d8:	02da      	lsls	r2, r3, #11
 80015da:	4b68      	ldr	r3, [pc, #416]	; (800177c <BMP180_Press+0x1d4>)
 80015dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	440b      	add	r3, r1
 80015e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ea:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80015fa:	617b      	str	r3, [r7, #20]
	x1 = (_calib_data.B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80015fc:	4b5f      	ldr	r3, [pc, #380]	; (800177c <BMP180_Press+0x1d4>)
 80015fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001602:	461a      	mov	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fb03 f303 	mul.w	r3, r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	da01      	bge.n	8001612 <BMP180_Press+0x6a>
 800160e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001612:	131b      	asrs	r3, r3, #12
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	da01      	bge.n	8001620 <BMP180_Press+0x78>
 800161c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001620:	12db      	asrs	r3, r3, #11
 8001622:	623b      	str	r3, [r7, #32]
	x2 = _calib_data.AC2 * b6 / (1 << 11);
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <BMP180_Press+0x1d4>)
 8001626:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800162a:	461a      	mov	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	da01      	bge.n	800163a <BMP180_Press+0x92>
 8001636:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800163a:	12db      	asrs	r3, r3, #11
 800163c:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_calib_data.AC1 * 4 + x3) << _oss) + 2) / 4;
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <BMP180_Press+0x1d4>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	009a      	lsls	r2, r3, #2
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4413      	add	r3, r2
 8001652:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <BMP180_Press+0x1d8>)
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	4093      	lsls	r3, r2
 8001658:	3302      	adds	r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	da00      	bge.n	8001660 <BMP180_Press+0xb8>
 800165e:	3303      	adds	r3, #3
 8001660:	109b      	asrs	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
	x1 = _calib_data.AC3 * b6 / (1 << 13);
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <BMP180_Press+0x1d4>)
 8001666:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	da02      	bge.n	800167c <BMP180_Press+0xd4>
 8001676:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800167a:	331f      	adds	r3, #31
 800167c:	135b      	asrs	r3, r3, #13
 800167e:	623b      	str	r3, [r7, #32]
	x2 = (_calib_data.B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <BMP180_Press+0x1d4>)
 8001682:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001686:	461a      	mov	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fb03 f303 	mul.w	r3, r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	da01      	bge.n	8001696 <BMP180_Press+0xee>
 8001692:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001696:	131b      	asrs	r3, r3, #12
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	da02      	bge.n	80016a6 <BMP180_Press+0xfe>
 80016a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016a4:	33ff      	adds	r3, #255	; 0xff
 80016a6:	141b      	asrs	r3, r3, #16
 80016a8:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	3302      	adds	r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da00      	bge.n	80016b8 <BMP180_Press+0x110>
 80016b6:	3303      	adds	r3, #3
 80016b8:	109b      	asrs	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _calib_data.AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <BMP180_Press+0x1d4>)
 80016be:	88db      	ldrh	r3, [r3, #6]
 80016c0:	461a      	mov	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	0bdb      	lsrs	r3, r3, #15
 80016ce:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) _raw_p - b3) * (50000 >> _oss);
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <BMP180_Press+0x1dc>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <BMP180_Press+0x1d8>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	4611      	mov	r1, r2
 80016de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016e2:	410a      	asrs	r2, r1
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db06      	blt.n	80016fe <BMP180_Press+0x156>
		p = (b7 * 2) / b4;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	005a      	lsls	r2, r3, #1
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
 80016fc:	e005      	b.n	800170a <BMP180_Press+0x162>
	else
		p = (b7 / b4) * 2;
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	2b00      	cmp	r3, #0
 800170e:	da00      	bge.n	8001712 <BMP180_Press+0x16a>
 8001710:	33ff      	adds	r3, #255	; 0xff
 8001712:	121b      	asrs	r3, r3, #8
 8001714:	461a      	mov	r2, r3
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	da00      	bge.n	800171e <BMP180_Press+0x176>
 800171c:	33ff      	adds	r3, #255	; 0xff
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f640 32de 	movw	r2, #3038	; 0xbde
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	da02      	bge.n	800173a <BMP180_Press+0x192>
 8001734:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001738:	33ff      	adds	r3, #255	; 0xff
 800173a:	141b      	asrs	r3, r3, #16
 800173c:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <BMP180_Press+0x1e0>)
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	da02      	bge.n	8001750 <BMP180_Press+0x1a8>
 800174a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800174e:	33ff      	adds	r3, #255	; 0xff
 8001750:	141b      	asrs	r3, r3, #16
 8001752:	61fb      	str	r3, [r7, #28]
	return (uint32_t) (p + (x1 + x2 + 3791) / (1 << 4));
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <BMP180_Press+0x1bc>
 8001762:	330f      	adds	r3, #15
 8001764:	111b      	asrs	r3, r3, #4
 8001766:	461a      	mov	r2, r3
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	4413      	add	r3, r2
}
 800176c:	4618      	mov	r0, r3
 800176e:	372c      	adds	r7, #44	; 0x2c
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	2000023a 	.word	0x2000023a
 800177c:	20000224 	.word	0x20000224
 8001780:	20000240 	.word	0x20000240
 8001784:	2000023c 	.word	0x2000023c
 8001788:	ffffe343 	.word	0xffffe343
 800178c:	00000000 	.word	0x00000000

08001790 <BMP180_calcAlt>:
double BMP180_calcAlt(uint32_t press) {
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return 8.31 * (273 + ((double) _bmp_data->bmp180.temp) / 10)
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <BMP180_calcAlt+0xe0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec8 	bl	8000534 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <BMP180_calcAlt+0xe4>)
 80017aa:	f7ff f857 	bl	800085c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	a324      	add	r3, pc, #144	; (adr r3, 8001848 <BMP180_calcAlt+0xb8>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fd6e 	bl	800029c <__adddf3>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	a321      	add	r3, pc, #132	; (adr r3, 8001850 <BMP180_calcAlt+0xc0>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff1b 	bl	8000608 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4614      	mov	r4, r2
 80017d8:	461d      	mov	r5, r3
			* log(101325 / (double) press) / 0.029 / 9.81;
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fe9a 	bl	8000514 <__aeabi_ui2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	a11c      	add	r1, pc, #112	; (adr r1, 8001858 <BMP180_calcAlt+0xc8>)
 80017e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ea:	f7ff f837 	bl	800085c <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	f00f fd27 	bl	8011250 <log>
 8001802:	ec53 2b10 	vmov	r2, r3, d0
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fefd 	bl	8000608 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	a312      	add	r3, pc, #72	; (adr r3, 8001860 <BMP180_calcAlt+0xd0>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7ff f81e 	bl	800085c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a30f      	add	r3, pc, #60	; (adr r3, 8001868 <BMP180_calcAlt+0xd8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f815 	bl	800085c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
}
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	00000000 	.word	0x00000000
 800184c:	40711000 	.word	0x40711000
 8001850:	51eb851f 	.word	0x51eb851f
 8001854:	40209eb8 	.word	0x40209eb8
 8001858:	00000000 	.word	0x00000000
 800185c:	40f8bcd0 	.word	0x40f8bcd0
 8001860:	0e560419 	.word	0x0e560419
 8001864:	3f9db22d 	.word	0x3f9db22d
 8001868:	51eb851f 	.word	0x51eb851f
 800186c:	40239eb8 	.word	0x40239eb8
 8001870:	20000220 	.word	0x20000220
 8001874:	40240000 	.word	0x40240000

08001878 <BMP180_Temp>:
int32_t BMP180_Temp() {
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
	int32_t x1 = (_raw_t - _calib_data.AC6) * _calib_data.AC5 / (1 << 15);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <BMP180_Temp+0x64>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	461a      	mov	r2, r3
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <BMP180_Temp+0x68>)
 8001888:	895b      	ldrh	r3, [r3, #10]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <BMP180_Temp+0x68>)
 800188e:	8912      	ldrh	r2, [r2, #8]
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	da02      	bge.n	800189e <BMP180_Temp+0x26>
 8001898:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800189c:	337f      	adds	r3, #127	; 0x7f
 800189e:	13db      	asrs	r3, r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
	int32_t x2 = (_calib_data.MC * (1 << 11)) / (x1 + _calib_data.MD);
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <BMP180_Temp+0x68>)
 80018a4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018a8:	02da      	lsls	r2, r3, #11
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <BMP180_Temp+0x68>)
 80018ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018b0:	4619      	mov	r1, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	440b      	add	r3, r1
 80018b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ba:	60bb      	str	r3, [r7, #8]
	int32_t b5 = x1 + x2;
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	607b      	str	r3, [r7, #4]
	return (b5 + 8) / (1 << 4);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3308      	adds	r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <BMP180_Temp+0x56>
 80018cc:	330f      	adds	r3, #15
 80018ce:	111b      	asrs	r3, r3, #4
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	2000023a 	.word	0x2000023a
 80018e0:	20000224 	.word	0x20000224

080018e4 <BMP180_upd_data>:

void BMP180_upd_data() {
 80018e4:	b598      	push	{r3, r4, r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	BMP180_get_data();
 80018e8:	f7ff fe18 	bl	800151c <BMP180_get_data>
	//log_s_int("press",BMP180_Press());
	_bmp_data->bmp180.pressure = BMP180_Press();
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <BMP180_upd_data+0x40>)
 80018ee:	681c      	ldr	r4, [r3, #0]
 80018f0:	f7ff fe5a 	bl	80015a8 <BMP180_Press>
 80018f4:	4603      	mov	r3, r0
 80018f6:	6023      	str	r3, [r4, #0]
	_bmp_data->bmp180.temp = BMP180_Temp();
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <BMP180_upd_data+0x40>)
 80018fa:	681c      	ldr	r4, [r3, #0]
 80018fc:	f7ff ffbc 	bl	8001878 <BMP180_Temp>
 8001900:	4603      	mov	r3, r0
 8001902:	6063      	str	r3, [r4, #4]
	_bmp_data->bmp180.height = BMP180_calcAlt(BMP180_Press());
 8001904:	f7ff fe50 	bl	80015a8 <BMP180_Press>
 8001908:	4603      	mov	r3, r0
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <BMP180_upd_data+0x40>)
 800190c:	6814      	ldr	r4, [r2, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff3e 	bl	8001790 <BMP180_calcAlt>
 8001914:	eeb0 7a40 	vmov.f32	s14, s0
 8001918:	eef0 7a60 	vmov.f32	s15, s1
 800191c:	ed84 7b02 	vstr	d7, [r4, #8]
}
 8001920:	bf00      	nop
 8001922:	bd98      	pop	{r3, r4, r7, pc}
 8001924:	20000220 	.word	0x20000220

08001928 <debug_init>:
#include "debug.h"
#include <stdio.h>
UART_HandleTypeDef *_dbg_uart;

void debug_init(UART_HandleTypeDef *uart) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	_dbg_uart = uart;
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <debug_init+0x1c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000244 	.word	0x20000244

08001948 <log_s>:

void log_s(const char *str) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart, (uint8_t*) str, strlen(str), 1000);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <log_s+0x3c>)
 8001952:	681c      	ldr	r4, [r3, #0]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7fe fc43 	bl	80001e0 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	b29a      	uxth	r2, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4620      	mov	r0, r4
 8001966:	f008 fec0 	bl	800a6ea <HAL_UART_Transmit>
	HAL_UART_Transmit(_dbg_uart, (uint8_t*) "\r\n", 2, 1000);
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <log_s+0x3c>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	2202      	movs	r2, #2
 8001974:	4904      	ldr	r1, [pc, #16]	; (8001988 <log_s+0x40>)
 8001976:	f008 feb8 	bl	800a6ea <HAL_UART_Transmit>
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	20000244 	.word	0x20000244
 8001988:	08011c5c 	.word	0x08011c5c

0800198c <log_s_wnl>:

void log_s_wnl(const char *str) {
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart, (uint8_t*) str, strlen(str), 1000);
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <log_s_wnl+0x2c>)
 8001996:	681c      	ldr	r4, [r3, #0]
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7fe fc21 	bl	80001e0 <strlen>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4620      	mov	r0, r4
 80019aa:	f008 fe9e 	bl	800a6ea <HAL_UART_Transmit>
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000244 	.word	0x20000244

080019bc <log_s_int>:
char *char_log[50];
void log_s_int(const char *str, int32_t i) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	sprintf((char*) char_log, "%s %ld\r\n", str, i);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4905      	ldr	r1, [pc, #20]	; (80019e0 <log_s_int+0x24>)
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <log_s_int+0x28>)
 80019ce:	f00d f9c5 	bl	800ed5c <siprintf>
	log_s_wnl((const char*) char_log);
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <log_s_int+0x28>)
 80019d4:	f7ff ffda 	bl	800198c <log_s_wnl>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08011c60 	.word	0x08011c60
 80019e4:	20000248 	.word	0x20000248

080019e8 <log_s_float>:

void log_s_float(const char *str, double i) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	ed87 0b00 	vstr	d0, [r7]
	sprintf((char*) char_log, "%s %f\r\n", str, i);
 80019f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019f8:	e9cd 2300 	strd	r2, r3, [sp]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4905      	ldr	r1, [pc, #20]	; (8001a14 <log_s_float+0x2c>)
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <log_s_float+0x30>)
 8001a02:	f00d f9ab 	bl	800ed5c <siprintf>
	log_s_wnl((const char*) char_log);
 8001a06:	4804      	ldr	r0, [pc, #16]	; (8001a18 <log_s_float+0x30>)
 8001a08:	f7ff ffc0 	bl	800198c <log_s_wnl>
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	08011c6c 	.word	0x08011c6c
 8001a18:	20000248 	.word	0x20000248

08001a1c <log_s_p_3>:
void log_p(int16_t *data_p) {
	sprintf((char*) char_log, "%p\r\n", data_p);
	log_s_wnl((const char*) char_log);
}
void log_s_p_3(const char *str, int16_t *data_p0, int16_t *data_p1,
		int16_t *data_p2) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
	sprintf((char*) char_log, "%s %p %p %p", str, data_p0, data_p1, data_p2);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4905      	ldr	r1, [pc, #20]	; (8001a4c <log_s_p_3+0x30>)
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <log_s_p_3+0x34>)
 8001a3a:	f00d f98f 	bl	800ed5c <siprintf>
	log_s((const char*) char_log);
 8001a3e:	4804      	ldr	r0, [pc, #16]	; (8001a50 <log_s_p_3+0x34>)
 8001a40:	f7ff ff82 	bl	8001948 <log_s>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	08011c7c 	.word	0x08011c7c
 8001a50:	20000248 	.word	0x20000248

08001a54 <log_s_p>:
void log_s_p(const char *str, int16_t *data_p0) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
	sprintf((char*) char_log, "%s %p", str, data_p0);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	4905      	ldr	r1, [pc, #20]	; (8001a78 <log_s_p+0x24>)
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <log_s_p+0x28>)
 8001a66:	f00d f979 	bl	800ed5c <siprintf>
	log_s((const char*) char_log);
 8001a6a:	4804      	ldr	r0, [pc, #16]	; (8001a7c <log_s_p+0x28>)
 8001a6c:	f7ff ff6c 	bl	8001948 <log_s>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	08011c88 	.word	0x08011c88
 8001a7c:	20000248 	.word	0x20000248

08001a80 <GY801_init>:
#include "gy801.h"
#include <stdio.h>
#include <math.h>
readings *_data_gy;

uint8_t GY801_init(I2C_HandleTypeDef *i2c, readings *data) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	//_i2c=i2c;
	_data_gy = data;
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <GY801_init+0xbc>)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6013      	str	r3, [r2, #0]
	uint8_t ret = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
	ret |= ADXL_init(i2c, data);
 8001a94:	6839      	ldr	r1, [r7, #0]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fa60 	bl	8000f5c <ADXL_init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <GY801_init+0x30>
		return ret;
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	e040      	b.n	8001b32 <GY801_init+0xb2>
	ADXL_set_range(RANGE_16G);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f7ff fad7 	bl	8001064 <ADXL_set_range>
	ADXL_full_res(1);
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff fb2b 	bl	8001112 <ADXL_full_res>
	ADXL_set_rate(HZ800);
 8001abc:	200d      	movs	r0, #13
 8001abe:	f7ff faf8 	bl	80010b2 <ADXL_set_rate>
	ADXL_power(1);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f7ff fb06 	bl	80010d4 <ADXL_power>
	ret |= BMP180_init(i2c, data);
 8001ac8:	6839      	ldr	r1, [r7, #0]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fb8a 	bl	80011e4 <BMP180_init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <GY801_init+0x68>
		return ret;
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	e024      	b.n	8001b32 <GY801_init+0xb2>
	BMP180_set_oss(0);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fbeb 	bl	80012c4 <BMP180_set_oss>
	BMP180_get_calibration_coefficients();
 8001aee:	f7ff fc1f 	bl	8001330 <BMP180_get_calibration_coefficients>
	ret |= GYRO_init(i2c, data);
 8001af2:	6839      	ldr	r1, [r7, #0]
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f95d 	bl	8001db4 <GYRO_init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <GY801_init+0x8e>
		return ret;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	e011      	b.n	8001b32 <GY801_init+0xb2>
	GYRO_power(1);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f000 f9cc 	bl	8001eac <GYRO_power>
	ret |= mag_init(i2c, data);
 8001b14:	6839      	ldr	r1, [r7, #0]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fa12 	bl	8001f40 <mag_init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <GY801_init+0xb0>
		return ret;
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	e000      	b.n	8001b32 <GY801_init+0xb2>
	return ret;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000310 	.word	0x20000310

08001b40 <med>:
int16_t axfilt[3], ayfilt[3], azfilt[3];
int16_t gxfilt[3], gyfilt[3], gzfilt[3];
int16_t temp[3];
int16_t med(uint8_t mode, int16_t new_val) {
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	460a      	mov	r2, r1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	80bb      	strh	r3, [r7, #4]
	switch (mode) {
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	2b05      	cmp	r3, #5
 8001b54:	d83e      	bhi.n	8001bd4 <med+0x94>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <med+0x1c>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001b75 	.word	0x08001b75
 8001b60:	08001b85 	.word	0x08001b85
 8001b64:	08001b95 	.word	0x08001b95
 8001b68:	08001ba5 	.word	0x08001ba5
 8001b6c:	08001bb5 	.word	0x08001bb5
 8001b70:	08001bc5 	.word	0x08001bc5
	case 0:
		memcpy(&temp, axfilt, sizeof(axfilt));
 8001b74:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <med+0x1ac>)
 8001b76:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <med+0x1b0>)
 8001b78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b7c:	6018      	str	r0, [r3, #0]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	8019      	strh	r1, [r3, #0]
		break;
 8001b82:	e027      	b.n	8001bd4 <med+0x94>
	case 1:
		memcpy(&temp, ayfilt, sizeof(ayfilt));
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <med+0x1ac>)
 8001b86:	4a5b      	ldr	r2, [pc, #364]	; (8001cf4 <med+0x1b4>)
 8001b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b8c:	6018      	str	r0, [r3, #0]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	8019      	strh	r1, [r3, #0]
		break;
 8001b92:	e01f      	b.n	8001bd4 <med+0x94>
	case 2:
		memcpy(&temp, azfilt, sizeof(azfilt));
 8001b94:	4b55      	ldr	r3, [pc, #340]	; (8001cec <med+0x1ac>)
 8001b96:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <med+0x1b8>)
 8001b98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b9c:	6018      	str	r0, [r3, #0]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	8019      	strh	r1, [r3, #0]
		break;
 8001ba2:	e017      	b.n	8001bd4 <med+0x94>
	case 3:
		memcpy(&temp, gxfilt, sizeof(gxfilt));
 8001ba4:	4b51      	ldr	r3, [pc, #324]	; (8001cec <med+0x1ac>)
 8001ba6:	4a55      	ldr	r2, [pc, #340]	; (8001cfc <med+0x1bc>)
 8001ba8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bac:	6018      	str	r0, [r3, #0]
 8001bae:	3304      	adds	r3, #4
 8001bb0:	8019      	strh	r1, [r3, #0]
		break;
 8001bb2:	e00f      	b.n	8001bd4 <med+0x94>
	case 4:
		memcpy(&temp, gyfilt, sizeof(gyfilt));
 8001bb4:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <med+0x1ac>)
 8001bb6:	4a52      	ldr	r2, [pc, #328]	; (8001d00 <med+0x1c0>)
 8001bb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bbc:	6018      	str	r0, [r3, #0]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	8019      	strh	r1, [r3, #0]
		break;
 8001bc2:	e007      	b.n	8001bd4 <med+0x94>
	case 5:
		memcpy(&temp, gzfilt, sizeof(gzfilt));
 8001bc4:	4b49      	ldr	r3, [pc, #292]	; (8001cec <med+0x1ac>)
 8001bc6:	4a4f      	ldr	r2, [pc, #316]	; (8001d04 <med+0x1c4>)
 8001bc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bcc:	6018      	str	r0, [r3, #0]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	8019      	strh	r1, [r3, #0]
		break;
 8001bd2:	bf00      	nop
	}
	temp[0] = temp[1];
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <med+0x1ac>)
 8001bd6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001bda:	4b44      	ldr	r3, [pc, #272]	; (8001cec <med+0x1ac>)
 8001bdc:	801a      	strh	r2, [r3, #0]
	temp[1] = temp[2];
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <med+0x1ac>)
 8001be0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001be4:	4b41      	ldr	r3, [pc, #260]	; (8001cec <med+0x1ac>)
 8001be6:	805a      	strh	r2, [r3, #2]
	temp[2] = new_val;
 8001be8:	4a40      	ldr	r2, [pc, #256]	; (8001cec <med+0x1ac>)
 8001bea:	88bb      	ldrh	r3, [r7, #4]
 8001bec:	8093      	strh	r3, [r2, #4]
	switch (mode) {
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d83f      	bhi.n	8001c74 <med+0x134>
 8001bf4:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <med+0xbc>)
 8001bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfa:	bf00      	nop
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c25 	.word	0x08001c25
 8001c04:	08001c35 	.word	0x08001c35
 8001c08:	08001c45 	.word	0x08001c45
 8001c0c:	08001c55 	.word	0x08001c55
 8001c10:	08001c65 	.word	0x08001c65
	case 0:
		memcpy(&axfilt, temp, sizeof(temp));
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <med+0x1b0>)
 8001c16:	4a35      	ldr	r2, [pc, #212]	; (8001cec <med+0x1ac>)
 8001c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c1c:	6018      	str	r0, [r3, #0]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	8019      	strh	r1, [r3, #0]
		break;
 8001c22:	e027      	b.n	8001c74 <med+0x134>
	case 1:
		memcpy(&ayfilt, temp, sizeof(temp));
 8001c24:	4b33      	ldr	r3, [pc, #204]	; (8001cf4 <med+0x1b4>)
 8001c26:	4a31      	ldr	r2, [pc, #196]	; (8001cec <med+0x1ac>)
 8001c28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c2c:	6018      	str	r0, [r3, #0]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	8019      	strh	r1, [r3, #0]
		break;
 8001c32:	e01f      	b.n	8001c74 <med+0x134>
	case 2:
		memcpy(&azfilt, temp, sizeof(temp));
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <med+0x1b8>)
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <med+0x1ac>)
 8001c38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	8019      	strh	r1, [r3, #0]
		break;
 8001c42:	e017      	b.n	8001c74 <med+0x134>
	case 3:
		memcpy(&gxfilt, temp, sizeof(temp));
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <med+0x1bc>)
 8001c46:	4a29      	ldr	r2, [pc, #164]	; (8001cec <med+0x1ac>)
 8001c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c4c:	6018      	str	r0, [r3, #0]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	8019      	strh	r1, [r3, #0]
		break;
 8001c52:	e00f      	b.n	8001c74 <med+0x134>
	case 4:
		memcpy(&gyfilt, temp, sizeof(temp));
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <med+0x1c0>)
 8001c56:	4a25      	ldr	r2, [pc, #148]	; (8001cec <med+0x1ac>)
 8001c58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c5c:	6018      	str	r0, [r3, #0]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	8019      	strh	r1, [r3, #0]
		break;
 8001c62:	e007      	b.n	8001c74 <med+0x134>
	case 5:
		memcpy(&gzfilt, temp, sizeof(temp));
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <med+0x1c4>)
 8001c66:	4a21      	ldr	r2, [pc, #132]	; (8001cec <med+0x1ac>)
 8001c68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c6c:	6018      	str	r0, [r3, #0]
 8001c6e:	3304      	adds	r3, #4
 8001c70:	8019      	strh	r1, [r3, #0]
		break;
 8001c72:	bf00      	nop
	}
	return (temp[0] < temp[1]) ?
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <med+0x1ac>)
 8001c76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <med+0x1ac>)
 8001c7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			((temp[1] < temp[2]) ?
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001c80:	429a      	cmp	r2, r3
 8001c82:	da16      	bge.n	8001cb2 <med+0x172>
			((temp[1] < temp[2]) ?
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <med+0x1ac>)
 8001c86:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <med+0x1ac>)
 8001c8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001c90:	429a      	cmp	r2, r3
 8001c92:	da03      	bge.n	8001c9c <med+0x15c>
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <med+0x1ac>)
 8001c96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c9a:	e020      	b.n	8001cde <med+0x19e>
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <med+0x1ac>)
 8001c9e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <med+0x1ac>)
 8001ca4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	bfb8      	it	lt
 8001cac:	4613      	movlt	r3, r2
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	e015      	b.n	8001cde <med+0x19e>
			((temp[0] < temp[2]) ?
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <med+0x1ac>)
 8001cb4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <med+0x1ac>)
 8001cba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	da03      	bge.n	8001cca <med+0x18a>
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <med+0x1ac>)
 8001cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc8:	e009      	b.n	8001cde <med+0x19e>
					temp[0] : ((temp[2] < temp[1]) ? temp[1] : temp[2]));
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <med+0x1ac>)
 8001ccc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <med+0x1ac>)
 8001cd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	bfb8      	it	lt
 8001cda:	4613      	movlt	r3, r2
 8001cdc:	b21b      	sxth	r3, r3
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000344 	.word	0x20000344
 8001cf0:	20000314 	.word	0x20000314
 8001cf4:	2000031c 	.word	0x2000031c
 8001cf8:	20000324 	.word	0x20000324
 8001cfc:	2000032c 	.word	0x2000032c
 8001d00:	20000334 	.word	0x20000334
 8001d04:	2000033c 	.word	0x2000033c

08001d08 <GY801_update_data>:

void GY801_update_data() {
 8001d08:	b598      	push	{r3, r4, r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	//BMP180_upd_data();
	ADXL_get_data();
 8001d0c:	f7ff fa22 	bl	8001154 <ADXL_get_data>
	GYRO_get_data();
 8001d10:	f000 f8e0 	bl	8001ed4 <GYRO_get_data>
	//mag_get_data();
	lsm303dlhc_get_acc();
 8001d14:	f000 f9b4 	bl	8002080 <lsm303dlhc_get_acc>
	lsm303dlhc_get_mag();
 8001d18:	f000 f9ee 	bl	80020f8 <lsm303dlhc_get_mag>
	_data_gy->adxl345.ax = med(0, _data_gy->adxl345.ax);
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <GY801_update_data+0xa8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <GY801_update_data+0xa8>)
 8001d26:	6814      	ldr	r4, [r2, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff ff08 	bl	8001b40 <med>
 8001d30:	4603      	mov	r3, r0
 8001d32:	8223      	strh	r3, [r4, #16]
	_data_gy->adxl345.ay = med(1, _data_gy->adxl345.ay);
 8001d34:	4b1e      	ldr	r3, [pc, #120]	; (8001db0 <GY801_update_data+0xa8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <GY801_update_data+0xa8>)
 8001d3e:	6814      	ldr	r4, [r2, #0]
 8001d40:	4619      	mov	r1, r3
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7ff fefc 	bl	8001b40 <med>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	8263      	strh	r3, [r4, #18]
	_data_gy->adxl345.az = med(2, _data_gy->adxl345.az);
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <GY801_update_data+0xa8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d54:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <GY801_update_data+0xa8>)
 8001d56:	6814      	ldr	r4, [r2, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7ff fef0 	bl	8001b40 <med>
 8001d60:	4603      	mov	r3, r0
 8001d62:	82a3      	strh	r3, [r4, #20]
	_data_gy->l3g4200d.gx=med(3, _data_gy->l3g4200d.gx);
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <GY801_update_data+0xa8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d6c:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <GY801_update_data+0xa8>)
 8001d6e:	6814      	ldr	r4, [r2, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	2003      	movs	r0, #3
 8001d74:	f7ff fee4 	bl	8001b40 <med>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	8423      	strh	r3, [r4, #32]
	_data_gy->l3g4200d.gy=med(4, _data_gy->l3g4200d.gy);
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <GY801_update_data+0xa8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d84:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <GY801_update_data+0xa8>)
 8001d86:	6814      	ldr	r4, [r2, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	2004      	movs	r0, #4
 8001d8c:	f7ff fed8 	bl	8001b40 <med>
 8001d90:	4603      	mov	r3, r0
 8001d92:	8463      	strh	r3, [r4, #34]	; 0x22
	_data_gy->l3g4200d.gz=med(5, _data_gy->l3g4200d.gz);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <GY801_update_data+0xa8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <GY801_update_data+0xa8>)
 8001d9e:	6814      	ldr	r4, [r2, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	2005      	movs	r0, #5
 8001da4:	f7ff fecc 	bl	8001b40 <med>
 8001da8:	4603      	mov	r3, r0
 8001daa:	84a3      	strh	r3, [r4, #36]	; 0x24
	 //sprintf((char*)gy_data,"X:%06d Y:%06d Z:%06d",_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	 //sprintf((char*)gy_data,"%ld;%ld;%ld.%ld;%d;%d;%d;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),_data_gy->bmp180.pressure,_data_gy->bmp180.temp/10,_data_gy->bmp180.temp%10,_data_gy->adxl345.ax,_data_gy->adxl345.ay,_data_gy->adxl345.az,(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	 sprintf((char*)gy_data,"%ld;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx*0.1388,_data_gy->lsm303dlhc_mag.my*0.1388,_data_gy->lsm303dlhc_mag.mz*0.1388);
	 log_s((char*)gy_data);*/

}
 8001dac:	bf00      	nop
 8001dae:	bd98      	pop	{r3, r4, r7, pc}
 8001db0:	20000310 	.word	0x20000310

08001db4 <GYRO_init>:
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_gyro_i2c;
readings *_gyro_data;
uint8_t _gyro_timeout = 10;
uint8_t GYRO_init(I2C_HandleTypeDef *i2c, readings *data) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
	_gyro_i2c = i2c;
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <GYRO_init+0x5c>)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6013      	str	r3, [r2, #0]
	_gyro_data = data;
 8001dc4:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <GYRO_init+0x60>)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6013      	str	r3, [r2, #0]
	log_s_wnl("L3G4200D started---");
 8001dca:	4813      	ldr	r0, [pc, #76]	; (8001e18 <GYRO_init+0x64>)
 8001dcc:	f7ff fdde 	bl	800198c <log_s_wnl>
	if (GYRO_ReadReg(GYRO_REG_DEVID) == 211) {
 8001dd0:	200f      	movs	r0, #15
 8001dd2:	f000 f847 	bl	8001e64 <GYRO_ReadReg>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2bd3      	cmp	r3, #211	; 0xd3
 8001dda:	d110      	bne.n	8001dfe <GYRO_init+0x4a>
		log_s("ok");
 8001ddc:	480f      	ldr	r0, [pc, #60]	; (8001e1c <GYRO_init+0x68>)
 8001dde:	f7ff fdb3 	bl	8001948 <log_s>
	} else {
		log_s("ERROR");
		return 1;
	}
	GYRO_WriteReg(GYRO_REG_CTRL_REG1, 0b11111111);
 8001de2:	21ff      	movs	r1, #255	; 0xff
 8001de4:	2020      	movs	r0, #32
 8001de6:	f000 f81d 	bl	8001e24 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG2, 0b0010000);
 8001dea:	2110      	movs	r1, #16
 8001dec:	2021      	movs	r0, #33	; 0x21
 8001dee:	f000 f819 	bl	8001e24 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG4, 0b00110000);
 8001df2:	2130      	movs	r1, #48	; 0x30
 8001df4:	2023      	movs	r0, #35	; 0x23
 8001df6:	f000 f815 	bl	8001e24 <GYRO_WriteReg>
	return 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	e003      	b.n	8001e06 <GYRO_init+0x52>
		log_s("ERROR");
 8001dfe:	4808      	ldr	r0, [pc, #32]	; (8001e20 <GYRO_init+0x6c>)
 8001e00:	f7ff fda2 	bl	8001948 <log_s>
		return 1;
 8001e04:	2301      	movs	r3, #1
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000034c 	.word	0x2000034c
 8001e14:	20000350 	.word	0x20000350
 8001e18:	08011ca8 	.word	0x08011ca8
 8001e1c:	08011cbc 	.word	0x08011cbc
 8001e20:	08011cc0 	.word	0x08011cc0

08001e24 <GYRO_WriteReg>:

void GYRO_WriteReg(uint8_t reg, uint8_t cmd) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af02      	add	r7, sp, #8
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	733b      	strb	r3, [r7, #12]
 8001e38:	79bb      	ldrb	r3, [r7, #6]
 8001e3a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR << 1, arr, 2, _gyro_timeout);
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <GYRO_WriteReg+0x38>)
 8001e3e:	6818      	ldr	r0, [r3, #0]
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <GYRO_WriteReg+0x3c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	f107 020c 	add.w	r2, r7, #12
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	21d2      	movs	r1, #210	; 0xd2
 8001e4e:	f004 f92d 	bl	80060ac <HAL_I2C_Master_Transmit>
}
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000034c 	.word	0x2000034c
 8001e60:	20000002 	.word	0x20000002

08001e64 <GYRO_ReadReg>:

uint8_t GYRO_ReadReg(uint8_t reg) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR << 1, &reg, 1, _gyro_timeout);
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <GYRO_ReadReg+0x40>)
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <GYRO_ReadReg+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	1dfa      	adds	r2, r7, #7
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	21d2      	movs	r1, #210	; 0xd2
 8001e7e:	f004 f915 	bl	80060ac <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_gyro_i2c, GYRO_ADDR << 1, &result, 1,
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <GYRO_ReadReg+0x40>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <GYRO_ReadReg+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	f107 020f 	add.w	r2, r7, #15
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2301      	movs	r3, #1
 8001e92:	21d2      	movs	r1, #210	; 0xd2
 8001e94:	f004 fa08 	bl	80062a8 <HAL_I2C_Master_Receive>
			_gyro_timeout);
	return result;
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000034c 	.word	0x2000034c
 8001ea8:	20000002 	.word	0x20000002

08001eac <GYRO_power>:

void GYRO_power(uint8_t pwr) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
	GYRO_WriteReg(GYRO_REG_CTRL_REG1, pwr ? 0x0F : 0x00);
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <GYRO_power+0x14>
 8001ebc:	230f      	movs	r3, #15
 8001ebe:	e000      	b.n	8001ec2 <GYRO_power+0x16>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	2020      	movs	r0, #32
 8001ec6:	f7ff ffad 	bl	8001e24 <GYRO_WriteReg>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <GYRO_get_data>:

void GYRO_get_data() {
 8001ed4:	b598      	push	{r3, r4, r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	_gyro_data->l3g4200d.gx = ((GYRO_ReadReg(0x29) << 8) | GYRO_ReadReg(0x28));
 8001ed8:	2029      	movs	r0, #41	; 0x29
 8001eda:	f7ff ffc3 	bl	8001e64 <GYRO_ReadReg>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	021b      	lsls	r3, r3, #8
 8001ee2:	b21c      	sxth	r4, r3
 8001ee4:	2028      	movs	r0, #40	; 0x28
 8001ee6:	f7ff ffbd 	bl	8001e64 <GYRO_ReadReg>
 8001eea:	4603      	mov	r3, r0
 8001eec:	b21a      	sxth	r2, r3
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <GYRO_get_data+0x68>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4322      	orrs	r2, r4
 8001ef4:	b212      	sxth	r2, r2
 8001ef6:	841a      	strh	r2, [r3, #32]
	_gyro_data->l3g4200d.gy = ((GYRO_ReadReg(0x2B) << 8) | GYRO_ReadReg(0x2A));
 8001ef8:	202b      	movs	r0, #43	; 0x2b
 8001efa:	f7ff ffb3 	bl	8001e64 <GYRO_ReadReg>
 8001efe:	4603      	mov	r3, r0
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21c      	sxth	r4, r3
 8001f04:	202a      	movs	r0, #42	; 0x2a
 8001f06:	f7ff ffad 	bl	8001e64 <GYRO_ReadReg>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b21a      	sxth	r2, r3
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <GYRO_get_data+0x68>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4322      	orrs	r2, r4
 8001f14:	b212      	sxth	r2, r2
 8001f16:	845a      	strh	r2, [r3, #34]	; 0x22
	_gyro_data->l3g4200d.gz = ((GYRO_ReadReg(0x2D) << 8) | GYRO_ReadReg(0x2C));
 8001f18:	202d      	movs	r0, #45	; 0x2d
 8001f1a:	f7ff ffa3 	bl	8001e64 <GYRO_ReadReg>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	b21c      	sxth	r4, r3
 8001f24:	202c      	movs	r0, #44	; 0x2c
 8001f26:	f7ff ff9d 	bl	8001e64 <GYRO_ReadReg>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <GYRO_get_data+0x68>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4322      	orrs	r2, r4
 8001f34:	b212      	sxth	r2, r2
 8001f36:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001f38:	bf00      	nop
 8001f3a:	bd98      	pop	{r3, r4, r7, pc}
 8001f3c:	20000350 	.word	0x20000350

08001f40 <mag_init>:
#include "lsm303dlhc.h"
I2C_HandleTypeDef *_mag_i2c;
readings *_mag_data;
uint8_t _mag_timeout = 10;
uint8_t mag_init(I2C_HandleTypeDef *i2c, readings *data) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
	_mag_i2c = i2c;
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <mag_init+0x80>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6013      	str	r3, [r2, #0]
	_mag_data = data;
 8001f50:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <mag_init+0x84>)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6013      	str	r3, [r2, #0]
	log_s_wnl("LSM303DLHC started---");
 8001f56:	481c      	ldr	r0, [pc, #112]	; (8001fc8 <mag_init+0x88>)
 8001f58:	f7ff fd18 	bl	800198c <log_s_wnl>
	if (mag_read_data(1, LSM303DLHC_REG_WHOAMI) == 0x33) {
 8001f5c:	210f      	movs	r1, #15
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 f838 	bl	8001fd4 <mag_read_data>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b33      	cmp	r3, #51	; 0x33
 8001f68:	d122      	bne.n	8001fb0 <mag_init+0x70>
		log_s("ok");
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <mag_init+0x8c>)
 8001f6c:	f7ff fcec 	bl	8001948 <log_s>
		log_s("ERROR");
		return 1;
		return;
	}
	/* accel config */
	mag_write_data(1, LSM303DLHC_REG_CTRL_REG1_A, 0b01110111);
 8001f70:	2277      	movs	r2, #119	; 0x77
 8001f72:	2120      	movs	r1, #32
 8001f74:	2001      	movs	r0, #1
 8001f76:	f000 f85d 	bl	8002034 <mag_write_data>
	mag_write_data(1, LSM303DLHC_REG_CTRL_REG2_A, 0b10010000);
 8001f7a:	2290      	movs	r2, #144	; 0x90
 8001f7c:	2121      	movs	r1, #33	; 0x21
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f000 f858 	bl	8002034 <mag_write_data>
	mag_write_data(1, LSM303DLHC_REG_CTRL_REG4_A, 0b00111000);
 8001f84:	2238      	movs	r2, #56	; 0x38
 8001f86:	2123      	movs	r1, #35	; 0x23
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f000 f853 	bl	8002034 <mag_write_data>
	/* mag config */
	mag_write_data(0, LSM303DLHC_REG_CRA_REG_M, 0b00011100);
 8001f8e:	221c      	movs	r2, #28
 8001f90:	2100      	movs	r1, #0
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f84e 	bl	8002034 <mag_write_data>
	mag_write_data(0, LSM303DLHC_REG_CRB_REG_M, 0b10000000);
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f849 	bl	8002034 <mag_write_data>
	mag_write_data(0, LSM303DLHC_REG_MR_REG_M, 0b00000000);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2102      	movs	r1, #2
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f000 f844 	bl	8002034 <mag_write_data>
	return 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e003      	b.n	8001fb8 <mag_init+0x78>
		log_s("ERROR");
 8001fb0:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <mag_init+0x90>)
 8001fb2:	f7ff fcc9 	bl	8001948 <log_s>
		return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000354 	.word	0x20000354
 8001fc4:	20000358 	.word	0x20000358
 8001fc8:	08011cc8 	.word	0x08011cc8
 8001fcc:	08011ce0 	.word	0x08011ce0
 8001fd0:	08011ce4 	.word	0x08011ce4

08001fd4 <mag_read_data>:

uint8_t mag_read_data(uint8_t type, uint8_t reg) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af04      	add	r7, sp, #16
 8001fda:	4603      	mov	r3, r0
 8001fdc:	460a      	mov	r2, r1
 8001fde:	71fb      	strb	r3, [r7, #7]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	71bb      	strb	r3, [r7, #6]
	//log_s_int("addr",((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1);
	uint8_t result;
	HAL_I2C_Mem_Read(_mag_i2c,
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <mag_read_data+0x58>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <mag_read_data+0x1e>
 8001fee:	2232      	movs	r2, #50	; 0x32
 8001ff0:	e000      	b.n	8001ff4 <mag_read_data+0x20>
 8001ff2:	223c      	movs	r2, #60	; 0x3c
			(((type) ? LSM303DLHC_ACCEL_ADDR : LSM303DLHC_MAG_ADDR) << 1)
					+ !type, reg, I2C_MEMADD_SIZE_8BIT, &result, 1,
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	b29b      	uxth	r3, r3
	HAL_I2C_Mem_Read(_mag_i2c,
 8002002:	4413      	add	r3, r2
 8002004:	b299      	uxth	r1, r3
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <mag_read_data+0x5c>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	9302      	str	r3, [sp, #8]
 8002010:	2301      	movs	r3, #1
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	f107 030f 	add.w	r3, r7, #15
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2301      	movs	r3, #1
 800201c:	f004 fc64 	bl	80068e8 <HAL_I2C_Mem_Read>
			_mag_timeout);
	return result;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000354 	.word	0x20000354
 8002030:	20000003 	.word	0x20000003

08002034 <mag_write_data>:
void mag_write_data(uint8_t type, uint8_t reg, uint8_t cmd) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af04      	add	r7, sp, #16
 800203a:	4603      	mov	r3, r0
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	460b      	mov	r3, r1
 8002040:	71bb      	strb	r3, [r7, #6]
 8002042:	4613      	mov	r3, r2
 8002044:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(_mag_i2c,
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <mag_write_data+0x44>)
 8002048:	6818      	ldr	r0, [r3, #0]
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <mag_write_data+0x20>
 8002050:	2132      	movs	r1, #50	; 0x32
 8002052:	e000      	b.n	8002056 <mag_write_data+0x22>
 8002054:	213c      	movs	r1, #60	; 0x3c
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	b29a      	uxth	r2, r3
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <mag_write_data+0x48>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	9302      	str	r3, [sp, #8]
 8002060:	2301      	movs	r3, #1
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	1d7b      	adds	r3, r7, #5
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	2301      	movs	r3, #1
 800206a:	f004 fb43 	bl	80066f4 <HAL_I2C_Mem_Write>
			((type) ? LSM303DLHC_ACCEL_ADDR : LSM303DLHC_MAG_ADDR) << 1,
			(uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &cmd, 1, _mag_timeout);
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000354 	.word	0x20000354
 800207c:	20000003 	.word	0x20000003

08002080 <lsm303dlhc_get_acc>:

void lsm303dlhc_get_acc() {
 8002080:	b598      	push	{r3, r4, r7, lr}
 8002082:	af00      	add	r7, sp, #0
	_mag_data->lsm303dlhc.ax =
			((mag_read_data(1, LSM303DLHC_REG_OUT_X_H_A) << 8)
 8002084:	2129      	movs	r1, #41	; 0x29
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff ffa4 	bl	8001fd4 <mag_read_data>
 800208c:	4603      	mov	r3, r0
 800208e:	021b      	lsls	r3, r3, #8
					| mag_read_data(1, LSM303DLHC_REG_OUT_X_L_A));
 8002090:	b21c      	sxth	r4, r3
 8002092:	2128      	movs	r1, #40	; 0x28
 8002094:	2001      	movs	r0, #1
 8002096:	f7ff ff9d 	bl	8001fd4 <mag_read_data>
 800209a:	4603      	mov	r3, r0
 800209c:	b21a      	sxth	r2, r3
	_mag_data->lsm303dlhc.ax =
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <lsm303dlhc_get_acc+0x74>)
 80020a0:	681b      	ldr	r3, [r3, #0]
					| mag_read_data(1, LSM303DLHC_REG_OUT_X_L_A));
 80020a2:	4322      	orrs	r2, r4
 80020a4:	b212      	sxth	r2, r2
	_mag_data->lsm303dlhc.ax =
 80020a6:	831a      	strh	r2, [r3, #24]
	_mag_data->lsm303dlhc.ay =
			((mag_read_data(1, LSM303DLHC_REG_OUT_Y_H_A) << 8)
 80020a8:	212b      	movs	r1, #43	; 0x2b
 80020aa:	2001      	movs	r0, #1
 80020ac:	f7ff ff92 	bl	8001fd4 <mag_read_data>
 80020b0:	4603      	mov	r3, r0
 80020b2:	021b      	lsls	r3, r3, #8
					| mag_read_data(1, LSM303DLHC_REG_OUT_Y_L_A));
 80020b4:	b21c      	sxth	r4, r3
 80020b6:	212a      	movs	r1, #42	; 0x2a
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff ff8b 	bl	8001fd4 <mag_read_data>
 80020be:	4603      	mov	r3, r0
 80020c0:	b21a      	sxth	r2, r3
	_mag_data->lsm303dlhc.ay =
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <lsm303dlhc_get_acc+0x74>)
 80020c4:	681b      	ldr	r3, [r3, #0]
					| mag_read_data(1, LSM303DLHC_REG_OUT_Y_L_A));
 80020c6:	4322      	orrs	r2, r4
 80020c8:	b212      	sxth	r2, r2
	_mag_data->lsm303dlhc.ay =
 80020ca:	835a      	strh	r2, [r3, #26]
	_mag_data->lsm303dlhc.az =
			((mag_read_data(1, LSM303DLHC_REG_OUT_Z_H_A) << 8)
 80020cc:	212d      	movs	r1, #45	; 0x2d
 80020ce:	2001      	movs	r0, #1
 80020d0:	f7ff ff80 	bl	8001fd4 <mag_read_data>
 80020d4:	4603      	mov	r3, r0
 80020d6:	021b      	lsls	r3, r3, #8
					| mag_read_data(1, LSM303DLHC_REG_OUT_Z_L_A));
 80020d8:	b21c      	sxth	r4, r3
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff ff79 	bl	8001fd4 <mag_read_data>
 80020e2:	4603      	mov	r3, r0
 80020e4:	b21a      	sxth	r2, r3
	_mag_data->lsm303dlhc.az =
 80020e6:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <lsm303dlhc_get_acc+0x74>)
 80020e8:	681b      	ldr	r3, [r3, #0]
					| mag_read_data(1, LSM303DLHC_REG_OUT_Z_L_A));
 80020ea:	4322      	orrs	r2, r4
 80020ec:	b212      	sxth	r2, r2
	_mag_data->lsm303dlhc.az =
 80020ee:	839a      	strh	r2, [r3, #28]
}
 80020f0:	bf00      	nop
 80020f2:	bd98      	pop	{r3, r4, r7, pc}
 80020f4:	20000358 	.word	0x20000358

080020f8 <lsm303dlhc_get_mag>:
void lsm303dlhc_get_mag() {
 80020f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020fc:	af00      	add	r7, sp, #0
	_mag_data->lsm303dlhc_mag.mx_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 80020fe:	2103      	movs	r1, #3
 8002100:	2000      	movs	r0, #0
 8002102:	f7ff ff67 	bl	8001fd4 <mag_read_data>
 8002106:	4603      	mov	r3, r0
 8002108:	b29b      	uxth	r3, r3
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b29c      	uxth	r4, r3
			LSM303DLHC_REG_OUT_X_H_M) << 8)
			| mag_read_data(0, LSM303DLHC_REG_OUT_X_L_M));
 800210e:	2104      	movs	r1, #4
 8002110:	2000      	movs	r0, #0
 8002112:	f7ff ff5f 	bl	8001fd4 <mag_read_data>
 8002116:	4603      	mov	r3, r0
 8002118:	b29b      	uxth	r3, r3
	_mag_data->lsm303dlhc_mag.mx_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 800211a:	4323      	orrs	r3, r4
 800211c:	b29a      	uxth	r2, r3
 800211e:	4bb2      	ldr	r3, [pc, #712]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b212      	sxth	r2, r2
 8002124:	851a      	strh	r2, [r3, #40]	; 0x28
	_mag_data->lsm303dlhc_mag.my_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 8002126:	2107      	movs	r1, #7
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ff53 	bl	8001fd4 <mag_read_data>
 800212e:	4603      	mov	r3, r0
 8002130:	b29b      	uxth	r3, r3
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b29c      	uxth	r4, r3
			LSM303DLHC_REG_OUT_Y_H_M) << 8)
			| mag_read_data(0, LSM303DLHC_REG_OUT_Y_L_M));
 8002136:	2108      	movs	r1, #8
 8002138:	2000      	movs	r0, #0
 800213a:	f7ff ff4b 	bl	8001fd4 <mag_read_data>
 800213e:	4603      	mov	r3, r0
 8002140:	b29b      	uxth	r3, r3
	_mag_data->lsm303dlhc_mag.my_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 8002142:	4323      	orrs	r3, r4
 8002144:	b29a      	uxth	r2, r3
 8002146:	4ba8      	ldr	r3, [pc, #672]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b212      	sxth	r2, r2
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a
	_mag_data->lsm303dlhc_mag.mz_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 800214e:	2105      	movs	r1, #5
 8002150:	2000      	movs	r0, #0
 8002152:	f7ff ff3f 	bl	8001fd4 <mag_read_data>
 8002156:	4603      	mov	r3, r0
 8002158:	b29b      	uxth	r3, r3
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	b29c      	uxth	r4, r3
			LSM303DLHC_REG_OUT_Z_H_M) << 8)
			| mag_read_data(0, LSM303DLHC_REG_OUT_Z_L_M));
 800215e:	2106      	movs	r1, #6
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff ff37 	bl	8001fd4 <mag_read_data>
 8002166:	4603      	mov	r3, r0
 8002168:	b29b      	uxth	r3, r3
	_mag_data->lsm303dlhc_mag.mz_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 800216a:	4323      	orrs	r3, r4
 800216c:	b29a      	uxth	r2, r3
 800216e:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b212      	sxth	r2, r2
 8002174:	859a      	strh	r2, [r3, #44]	; 0x2c
	// magneto calibration
	_mag_data->lsm303dlhc_mag.mx = 4.383713
			* (_mag_data->lsm303dlhc_mag.mx_raw + 43.206892)
 8002176:	4b9c      	ldr	r3, [pc, #624]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9d8 	bl	8000534 <__aeabi_i2d>
 8002184:	a384      	add	r3, pc, #528	; (adr r3, 8002398 <lsm303dlhc_get_mag+0x2a0>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe f887 	bl	800029c <__adddf3>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	a382      	add	r3, pc, #520	; (adr r3, 80023a0 <lsm303dlhc_get_mag+0x2a8>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe fa34 	bl	8000608 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
			+ 0.021545 * (_mag_data->lsm303dlhc_mag.my_raw + -25.655564)
 80021a8:	4b8f      	ldr	r3, [pc, #572]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe f9bf 	bl	8000534 <__aeabi_i2d>
 80021b6:	a37c      	add	r3, pc, #496	; (adr r3, 80023a8 <lsm303dlhc_get_mag+0x2b0>)
 80021b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021bc:	f7fe f86c 	bl	8000298 <__aeabi_dsub>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	a379      	add	r3, pc, #484	; (adr r3, 80023b0 <lsm303dlhc_get_mag+0x2b8>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fa1b 	bl	8000608 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4620      	mov	r0, r4
 80021d8:	4629      	mov	r1, r5
 80021da:	f7fe f85f 	bl	800029c <__adddf3>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4690      	mov	r8, r2
 80021e4:	4699      	mov	r9, r3
			+ -0.077899 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 80021e6:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9a0 	bl	8000534 <__aeabi_i2d>
 80021f4:	a370      	add	r3, pc, #448	; (adr r3, 80023b8 <lsm303dlhc_get_mag+0x2c0>)
 80021f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fa:	f7fe f84d 	bl	8000298 <__aeabi_dsub>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	a36e      	add	r3, pc, #440	; (adr r3, 80023c0 <lsm303dlhc_get_mag+0x2c8>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f9fc 	bl	8000608 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mx = 4.383713
 8002214:	4974      	ldr	r1, [pc, #464]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 8002216:	680c      	ldr	r4, [r1, #0]
			+ -0.077899 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 8002218:	4640      	mov	r0, r8
 800221a:	4649      	mov	r1, r9
 800221c:	f7fe f83e 	bl	800029c <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mx = 4.383713
 8002224:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	_mag_data->lsm303dlhc_mag.my = 0.021545
			* (_mag_data->lsm303dlhc_mag.mx_raw + 43.206892)
 8002228:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f97f 	bl	8000534 <__aeabi_i2d>
 8002236:	a358      	add	r3, pc, #352	; (adr r3, 8002398 <lsm303dlhc_get_mag+0x2a0>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	f7fe f82e 	bl	800029c <__adddf3>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	a359      	add	r3, pc, #356	; (adr r3, 80023b0 <lsm303dlhc_get_mag+0x2b8>)
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f7fe f9db 	bl	8000608 <__aeabi_dmul>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4614      	mov	r4, r2
 8002258:	461d      	mov	r5, r3
			+ 4.431516 * (_mag_data->lsm303dlhc_mag.my_raw + -25.655564)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f966 	bl	8000534 <__aeabi_i2d>
 8002268:	a34f      	add	r3, pc, #316	; (adr r3, 80023a8 <lsm303dlhc_get_mag+0x2b0>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f813 	bl	8000298 <__aeabi_dsub>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	a353      	add	r3, pc, #332	; (adr r3, 80023c8 <lsm303dlhc_get_mag+0x2d0>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f9c2 	bl	8000608 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fe f806 	bl	800029c <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4690      	mov	r8, r2
 8002296:	4699      	mov	r9, r3
			+ 0.225705 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f947 	bl	8000534 <__aeabi_i2d>
 80022a6:	a344      	add	r3, pc, #272	; (adr r3, 80023b8 <lsm303dlhc_get_mag+0x2c0>)
 80022a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ac:	f7fd fff4 	bl	8000298 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	a345      	add	r3, pc, #276	; (adr r3, 80023d0 <lsm303dlhc_get_mag+0x2d8>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9a3 	bl	8000608 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.my = 0.021545
 80022c6:	4948      	ldr	r1, [pc, #288]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 80022c8:	680c      	ldr	r4, [r1, #0]
			+ 0.225705 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 80022ca:	4640      	mov	r0, r8
 80022cc:	4649      	mov	r1, r9
 80022ce:	f7fd ffe5 	bl	800029c <__adddf3>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.my = 0.021545
 80022d6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	_mag_data->lsm303dlhc_mag.mz = -0.077899
			* (_mag_data->lsm303dlhc_mag.mx_raw + 43.206892)
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f926 	bl	8000534 <__aeabi_i2d>
 80022e8:	a32b      	add	r3, pc, #172	; (adr r3, 8002398 <lsm303dlhc_get_mag+0x2a0>)
 80022ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ee:	f7fd ffd5 	bl	800029c <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4610      	mov	r0, r2
 80022f8:	4619      	mov	r1, r3
 80022fa:	a331      	add	r3, pc, #196	; (adr r3, 80023c0 <lsm303dlhc_get_mag+0x2c8>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	f7fe f982 	bl	8000608 <__aeabi_dmul>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4614      	mov	r4, r2
 800230a:	461d      	mov	r5, r3
			+ 0.066753 * (_mag_data->lsm303dlhc_mag.my_raw + -25.655564)
 800230c:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f90d 	bl	8000534 <__aeabi_i2d>
 800231a:	a323      	add	r3, pc, #140	; (adr r3, 80023a8 <lsm303dlhc_get_mag+0x2b0>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fd ffba 	bl	8000298 <__aeabi_dsub>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	a32a      	add	r3, pc, #168	; (adr r3, 80023d8 <lsm303dlhc_get_mag+0x2e0>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fe f969 	bl	8000608 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f7fd ffad 	bl	800029c <__adddf3>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4690      	mov	r8, r2
 8002348:	4699      	mov	r9, r3
			+ 5.335236 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 800234a:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002352:	4618      	mov	r0, r3
 8002354:	f7fe f8ee 	bl	8000534 <__aeabi_i2d>
 8002358:	a317      	add	r3, pc, #92	; (adr r3, 80023b8 <lsm303dlhc_get_mag+0x2c0>)
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fd ff9b 	bl	8000298 <__aeabi_dsub>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	a31d      	add	r3, pc, #116	; (adr r3, 80023e0 <lsm303dlhc_get_mag+0x2e8>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f94a 	bl	8000608 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mz = -0.077899
 8002378:	491b      	ldr	r1, [pc, #108]	; (80023e8 <lsm303dlhc_get_mag+0x2f0>)
 800237a:	680c      	ldr	r4, [r1, #0]
			+ 5.335236 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 800237c:	4640      	mov	r0, r8
 800237e:	4649      	mov	r1, r9
 8002380:	f7fd ff8c 	bl	800029c <__adddf3>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mz = -0.077899
 8002388:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
}
 800238c:	bf00      	nop
 800238e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002392:	bf00      	nop
 8002394:	f3af 8000 	nop.w
 8002398:	6fe2e6eb 	.word	0x6fe2e6eb
 800239c:	40459a7b 	.word	0x40459a7b
 80023a0:	0f883340 	.word	0x0f883340
 80023a4:	401188ec 	.word	0x401188ec
 80023a8:	0ad46f58 	.word	0x0ad46f58
 80023ac:	4039a7d3 	.word	0x4039a7d3
 80023b0:	7991bc56 	.word	0x7991bc56
 80023b4:	3f960fe4 	.word	0x3f960fe4
 80023b8:	fbce4218 	.word	0xfbce4218
 80023bc:	3fe238ff 	.word	0x3fe238ff
 80023c0:	59641f64 	.word	0x59641f64
 80023c4:	bfb3f130 	.word	0xbfb3f130
 80023c8:	548ecd8e 	.word	0x548ecd8e
 80023cc:	4011b9df 	.word	0x4011b9df
 80023d0:	c4c5974e 	.word	0xc4c5974e
 80023d4:	3fcce3e6 	.word	0x3fcce3e6
 80023d8:	7fe8ee6c 	.word	0x7fe8ee6c
 80023dc:	3fb116b9 	.word	0x3fb116b9
 80023e0:	1b21c476 	.word	0x1b21c476
 80023e4:	40155748 	.word	0x40155748
 80023e8:	20000358 	.word	0x20000358

080023ec <mahony_print_ptr>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

void mahony_print_ptr() {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	log_s_p_3("AHRS", &roll, &pitch, &yaw);
 80023f0:	4b03      	ldr	r3, [pc, #12]	; (8002400 <mahony_print_ptr+0x14>)
 80023f2:	4a04      	ldr	r2, [pc, #16]	; (8002404 <mahony_print_ptr+0x18>)
 80023f4:	4904      	ldr	r1, [pc, #16]	; (8002408 <mahony_print_ptr+0x1c>)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <mahony_print_ptr+0x20>)
 80023f8:	f7ff fb10 	bl	8001a1c <log_s_p_3>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000380 	.word	0x20000380
 8002404:	2000037c 	.word	0x2000037c
 8002408:	20000378 	.word	0x20000378
 800240c:	08011cec 	.word	0x08011cec

08002410 <mahony_update>:

void mahony_update(float invSampleFreq, float gx, float gy, float gz, float ax,
		float ay, float az, float mx, float my, float mz) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a6      	sub	sp, #152	; 0x98
 8002414:	af00      	add	r7, sp, #0
 8002416:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800241a:	edc7 0a08 	vstr	s1, [r7, #32]
 800241e:	ed87 1a07 	vstr	s2, [r7, #28]
 8002422:	edc7 1a06 	vstr	s3, [r7, #24]
 8002426:	ed87 2a05 	vstr	s4, [r7, #20]
 800242a:	edc7 2a04 	vstr	s5, [r7, #16]
 800242e:	ed87 3a03 	vstr	s6, [r7, #12]
 8002432:	edc7 3a02 	vstr	s7, [r7, #8]
 8002436:	ed87 4a01 	vstr	s8, [r7, #4]
 800243a:	edc7 4a00 	vstr	s9, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid
	// (avoids NaN in magnetometer normalisation)
	if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800243e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002442:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	d11c      	bne.n	8002486 <mahony_update+0x76>
 800244c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002458:	d115      	bne.n	8002486 <mahony_update+0x76>
 800245a:	edd7 7a00 	vldr	s15, [r7]
 800245e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002466:	d10e      	bne.n	8002486 <mahony_update+0x76>
		mahony_updateIMU(gx, gy, gz, ax, ay, az);
 8002468:	edd7 2a03 	vldr	s5, [r7, #12]
 800246c:	ed97 2a04 	vldr	s4, [r7, #16]
 8002470:	edd7 1a05 	vldr	s3, [r7, #20]
 8002474:	ed97 1a06 	vldr	s2, [r7, #24]
 8002478:	edd7 0a07 	vldr	s1, [r7, #28]
 800247c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002480:	f000 fbe6 	bl	8002c50 <mahony_updateIMU>
		return;
 8002484:	e3cd      	b.n	8002c22 <mahony_update+0x812>
	}

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002486:	edd7 7a05 	vldr	s15, [r7, #20]
 800248a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	d10e      	bne.n	80024b2 <mahony_update+0xa2>
 8002494:	edd7 7a04 	vldr	s15, [r7, #16]
 8002498:	eef5 7a40 	vcmp.f32	s15, #0.0
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	d107      	bne.n	80024b2 <mahony_update+0xa2>
 80024a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	f000 82b7 	beq.w	8002a20 <mahony_update+0x610>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 80024b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80024be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	f000 fe41 	bl	800315c <mahony_invSqrt>
 80024da:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		ax *= recipNorm;
 80024de:	ed97 7a05 	vldr	s14, [r7, #20]
 80024e2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 80024ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80024f2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 80024fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8002502:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	edc7 7a03 	vstr	s15, [r7, #12]

		// Normalise magnetometer measurement
		recipNorm = mahony_invSqrt(mx * mx + my * my + mz * mz);
 800250e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002512:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002516:	edd7 7a01 	vldr	s15, [r7, #4]
 800251a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800251e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002522:	edd7 7a00 	vldr	s15, [r7]
 8002526:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800252a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252e:	eeb0 0a67 	vmov.f32	s0, s15
 8002532:	f000 fe13 	bl	800315c <mahony_invSqrt>
 8002536:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		mx *= recipNorm;
 800253a:	ed97 7a02 	vldr	s14, [r7, #8]
 800253e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	edc7 7a02 	vstr	s15, [r7, #8]
		my *= recipNorm;
 800254a:	ed97 7a01 	vldr	s14, [r7, #4]
 800254e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	edc7 7a01 	vstr	s15, [r7, #4]
		mz *= recipNorm;
 800255a:	ed97 7a00 	vldr	s14, [r7]
 800255e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002566:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		q0q0 = q0 * q0;
 800256a:	4bf0      	ldr	r3, [pc, #960]	; (800292c <mahony_update+0x51c>)
 800256c:	ed93 7a00 	vldr	s14, [r3]
 8002570:	4bee      	ldr	r3, [pc, #952]	; (800292c <mahony_update+0x51c>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q1 = q0 * q1;
 800257e:	4beb      	ldr	r3, [pc, #940]	; (800292c <mahony_update+0x51c>)
 8002580:	ed93 7a00 	vldr	s14, [r3]
 8002584:	4bea      	ldr	r3, [pc, #936]	; (8002930 <mahony_update+0x520>)
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q2 = q0 * q2;
 8002592:	4be6      	ldr	r3, [pc, #920]	; (800292c <mahony_update+0x51c>)
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	4be6      	ldr	r3, [pc, #920]	; (8002934 <mahony_update+0x524>)
 800259a:	edd3 7a00 	vldr	s15, [r3]
 800259e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q0q3 = q0 * q3;
 80025a6:	4be1      	ldr	r3, [pc, #900]	; (800292c <mahony_update+0x51c>)
 80025a8:	ed93 7a00 	vldr	s14, [r3]
 80025ac:	4be2      	ldr	r3, [pc, #904]	; (8002938 <mahony_update+0x528>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q1 = q1 * q1;
 80025ba:	4bdd      	ldr	r3, [pc, #884]	; (8002930 <mahony_update+0x520>)
 80025bc:	ed93 7a00 	vldr	s14, [r3]
 80025c0:	4bdb      	ldr	r3, [pc, #876]	; (8002930 <mahony_update+0x520>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q2 = q1 * q2;
 80025ce:	4bd8      	ldr	r3, [pc, #864]	; (8002930 <mahony_update+0x520>)
 80025d0:	ed93 7a00 	vldr	s14, [r3]
 80025d4:	4bd7      	ldr	r3, [pc, #860]	; (8002934 <mahony_update+0x524>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025de:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q1q3 = q1 * q3;
 80025e2:	4bd3      	ldr	r3, [pc, #844]	; (8002930 <mahony_update+0x520>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4bd3      	ldr	r3, [pc, #844]	; (8002938 <mahony_update+0x528>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q2 = q2 * q2;
 80025f6:	4bcf      	ldr	r3, [pc, #828]	; (8002934 <mahony_update+0x524>)
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	4bcd      	ldr	r3, [pc, #820]	; (8002934 <mahony_update+0x524>)
 80025fe:	edd3 7a00 	vldr	s15, [r3]
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q2q3 = q2 * q3;
 800260a:	4bca      	ldr	r3, [pc, #808]	; (8002934 <mahony_update+0x524>)
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	4bc9      	ldr	r3, [pc, #804]	; (8002938 <mahony_update+0x528>)
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q3q3 = q3 * q3;
 800261e:	4bc6      	ldr	r3, [pc, #792]	; (8002938 <mahony_update+0x528>)
 8002620:	ed93 7a00 	vldr	s14, [r3]
 8002624:	4bc4      	ldr	r3, [pc, #784]	; (8002938 <mahony_update+0x528>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		// Reference direction of Earth's magnetic field
		hx = 2.0f
				* (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3)
 8002632:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002636:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800263a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800263e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002642:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002646:	edd7 7a02 	vldr	s15, [r7, #8]
 800264a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002652:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002656:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800265a:	edd7 7a01 	vldr	s15, [r7, #4]
 800265e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002662:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ mz * (q1q3 + q0q2));
 8002666:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800266a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800266e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002672:	edd7 7a00 	vldr	s15, [r7]
 8002676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
		hx = 2.0f
 800267e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002682:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		hy = 2.0f
				* (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3)
 8002686:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800268a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800268e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002692:	edd7 7a02 	vldr	s15, [r7, #8]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800269e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80026a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026a6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80026aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80026b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b6:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ mz * (q2q3 - q0q1));
 80026ba:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80026be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026c6:	edd7 7a00 	vldr	s15, [r7]
 80026ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ce:	ee77 7a27 	vadd.f32	s15, s14, s15
		hy = 2.0f
 80026d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026d6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		bx = sqrtf(hx * hx + hy * hy);
 80026da:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ee:	eeb0 0a67 	vmov.f32	s0, s15
 80026f2:	f00e fe19 	bl	8011328 <sqrtf>
 80026f6:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		bz = 2.0f
				* (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1)
 80026fa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80026fe:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002702:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002706:	edd7 7a02 	vldr	s15, [r7, #8]
 800270a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800270e:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002712:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002716:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800271a:	edd7 7a01 	vldr	s15, [r7, #4]
 800271e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002722:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ mz * (0.5f - q1q1 - q2q2));
 8002726:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800272a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800272e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002732:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002736:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800273a:	edd7 7a00 	vldr	s15, [r7]
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee77 7a27 	vadd.f32	s15, s14, s15
		bz = 2.0f
 8002746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800274a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 800274e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002752:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		halfvy = q0q1 + q2q3;
 800275e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002762:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800276a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		halfvz = q0q0 - 0.5f + q3q3;
 800276e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002772:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002776:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800277a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800277e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002782:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8002786:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800278a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800278e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002792:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002796:	ee37 7a67 	vsub.f32	s14, s14, s15
 800279a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800279e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a2:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80027a6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80027aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 80027be:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80027c2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80027c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80027ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80027d6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80027da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 80027ee:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80027f2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80027fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002802:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002806:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800280a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800280e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002812:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002816:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002822:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		// Error is sum of cross product between estimated direction
		// and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 8002826:	ed97 7a04 	vldr	s14, [r7, #16]
 800282a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800282e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002832:	edd7 6a03 	vldr	s13, [r7, #12]
 8002836:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800283a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002842:	edd7 6a01 	vldr	s13, [r7, #4]
 8002846:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800284a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800284e:	ed97 6a00 	vldr	s12, [r7]
 8002852:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002856:	ee66 7a27 	vmul.f32	s15, s12, s15
 800285a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800285e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002862:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 8002866:	ed97 7a03 	vldr	s14, [r7, #12]
 800286a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800286e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002872:	edd7 6a05 	vldr	s13, [r7, #20]
 8002876:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800287a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002882:	edd7 6a00 	vldr	s13, [r7]
 8002886:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800288a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800288e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002892:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002896:	ee66 7a27 	vmul.f32	s15, s12, s15
 800289a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 80028a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80028aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80028ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b2:	edd7 6a04 	vldr	s13, [r7, #16]
 80028b6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80028ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028c2:	edd7 6a02 	vldr	s13, [r7, #8]
 80028c6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80028ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80028d2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <mahony_update+0x52c>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	dd61      	ble.n	80029ba <mahony_update+0x5aa>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <mahony_update+0x52c>)
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002900:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002904:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002908:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <mahony_update+0x530>)
 800290e:	edd3 7a00 	vldr	s15, [r3]
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <mahony_update+0x530>)
 8002918:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <mahony_update+0x52c>)
 800291e:	ed93 7a00 	vldr	s14, [r3]
 8002922:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002926:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292a:	e00b      	b.n	8002944 <mahony_update+0x534>
 800292c:	2000000c 	.word	0x2000000c
 8002930:	2000035c 	.word	0x2000035c
 8002934:	20000360 	.word	0x20000360
 8002938:	20000364 	.word	0x20000364
 800293c:	20000008 	.word	0x20000008
 8002940:	20000368 	.word	0x20000368
 8002944:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800294c:	4bb6      	ldr	r3, [pc, #728]	; (8002c28 <mahony_update+0x818>)
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	4bb4      	ldr	r3, [pc, #720]	; (8002c28 <mahony_update+0x818>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 800295c:	4bb3      	ldr	r3, [pc, #716]	; (8002c2c <mahony_update+0x81c>)
 800295e:	ed93 7a00 	vldr	s14, [r3]
 8002962:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800296e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002972:	4baf      	ldr	r3, [pc, #700]	; (8002c30 <mahony_update+0x820>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	4bac      	ldr	r3, [pc, #688]	; (8002c30 <mahony_update+0x820>)
 800297e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8002982:	4bac      	ldr	r3, [pc, #688]	; (8002c34 <mahony_update+0x824>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ed97 7a08 	vldr	s14, [r7, #32]
 800298c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002990:	edc7 7a08 	vstr	s15, [r7, #32]
			gy += integralFBy;
 8002994:	4ba4      	ldr	r3, [pc, #656]	; (8002c28 <mahony_update+0x818>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	ed97 7a07 	vldr	s14, [r7, #28]
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	edc7 7a07 	vstr	s15, [r7, #28]
			gz += integralFBz;
 80029a6:	4ba2      	ldr	r3, [pc, #648]	; (8002c30 <mahony_update+0x820>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80029b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b4:	edc7 7a06 	vstr	s15, [r7, #24]
 80029b8:	e00b      	b.n	80029d2 <mahony_update+0x5c2>
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 80029ba:	4b9e      	ldr	r3, [pc, #632]	; (8002c34 <mahony_update+0x824>)
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80029c2:	4b99      	ldr	r3, [pc, #612]	; (8002c28 <mahony_update+0x818>)
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80029ca:	4b99      	ldr	r3, [pc, #612]	; (8002c30 <mahony_update+0x820>)
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 80029d2:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <mahony_update+0x828>)
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	edc7 7a08 	vstr	s15, [r7, #32]
		gy += twoKp * halfey;
 80029ec:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <mahony_update+0x828>)
 80029ee:	ed93 7a00 	vldr	s14, [r3]
 80029f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80029fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a02:	edc7 7a07 	vstr	s15, [r7, #28]
		gz += twoKp * halfez;
 8002a06:	4b8c      	ldr	r3, [pc, #560]	; (8002c38 <mahony_update+0x828>)
 8002a08:	ed93 7a00 	vldr	s14, [r3]
 8002a0c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a14:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a1c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8002a20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	edc7 7a08 	vstr	s15, [r7, #32]
	gy *= (0.5f * invSampleFreq);
 8002a38:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4c:	edc7 7a07 	vstr	s15, [r7, #28]
	gz *= (0.5f * invSampleFreq);
 8002a50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a64:	edc7 7a06 	vstr	s15, [r7, #24]
	qa = q0;
 8002a68:	4b74      	ldr	r3, [pc, #464]	; (8002c3c <mahony_update+0x82c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	637b      	str	r3, [r7, #52]	; 0x34
	qb = q1;
 8002a6e:	4b74      	ldr	r3, [pc, #464]	; (8002c40 <mahony_update+0x830>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	633b      	str	r3, [r7, #48]	; 0x30
	qc = q2;
 8002a74:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <mahony_update+0x834>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8002a7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a7e:	eeb1 7a67 	vneg.f32	s14, s15
 8002a82:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9a:	4b6b      	ldr	r3, [pc, #428]	; (8002c48 <mahony_update+0x838>)
 8002a9c:	edd3 6a00 	vldr	s13, [r3]
 8002aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aac:	4b63      	ldr	r3, [pc, #396]	; (8002c3c <mahony_update+0x82c>)
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab6:	4b61      	ldr	r3, [pc, #388]	; (8002c3c <mahony_update+0x82c>)
 8002ab8:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8002abc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ac0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002acc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad8:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <mahony_update+0x838>)
 8002ada:	edd3 6a00 	vldr	s13, [r3]
 8002ade:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aea:	4b55      	ldr	r3, [pc, #340]	; (8002c40 <mahony_update+0x830>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af4:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <mahony_update+0x830>)
 8002af6:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8002afa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002afe:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b06:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002b0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b16:	4b4c      	ldr	r3, [pc, #304]	; (8002c48 <mahony_update+0x838>)
 8002b18:	edd3 6a00 	vldr	s13, [r3]
 8002b1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <mahony_update+0x834>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <mahony_update+0x834>)
 8002b34:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8002b38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b44:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002b48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b54:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002b58:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b64:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <mahony_update+0x838>)
 8002b66:	edd3 7a00 	vldr	s15, [r3]
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	4b36      	ldr	r3, [pc, #216]	; (8002c48 <mahony_update+0x838>)
 8002b70:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b74:	4b31      	ldr	r3, [pc, #196]	; (8002c3c <mahony_update+0x82c>)
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <mahony_update+0x82c>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b84:	4b2e      	ldr	r3, [pc, #184]	; (8002c40 <mahony_update+0x830>)
 8002b86:	edd3 6a00 	vldr	s13, [r3]
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <mahony_update+0x830>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <mahony_update+0x834>)
 8002b9a:	edd3 6a00 	vldr	s13, [r3]
 8002b9e:	4b29      	ldr	r3, [pc, #164]	; (8002c44 <mahony_update+0x834>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ba8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bac:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <mahony_update+0x838>)
 8002bae:	edd3 6a00 	vldr	s13, [r3]
 8002bb2:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <mahony_update+0x838>)
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc4:	f000 faca 	bl	800315c <mahony_invSqrt>
 8002bc8:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	q0 *= recipNorm;
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <mahony_update+0x82c>)
 8002bce:	ed93 7a00 	vldr	s14, [r3]
 8002bd2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <mahony_update+0x82c>)
 8002bdc:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <mahony_update+0x830>)
 8002be2:	ed93 7a00 	vldr	s14, [r3]
 8002be6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <mahony_update+0x830>)
 8002bf0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <mahony_update+0x834>)
 8002bf6:	ed93 7a00 	vldr	s14, [r3]
 8002bfa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <mahony_update+0x834>)
 8002c04:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <mahony_update+0x838>)
 8002c0a:	ed93 7a00 	vldr	s14, [r3]
 8002c0e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <mahony_update+0x838>)
 8002c18:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <mahony_update+0x83c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
}
 8002c22:	3798      	adds	r7, #152	; 0x98
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	2000036c 	.word	0x2000036c
 8002c2c:	20000008 	.word	0x20000008
 8002c30:	20000370 	.word	0x20000370
 8002c34:	20000368 	.word	0x20000368
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	2000035c 	.word	0x2000035c
 8002c44:	20000360 	.word	0x20000360
 8002c48:	20000364 	.word	0x20000364
 8002c4c:	20000384 	.word	0x20000384

08002c50 <mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void mahony_updateIMU(float gx, float gy, float gz, float ax, float ay,
		float az) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b090      	sub	sp, #64	; 0x40
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c5e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c62:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c66:	ed87 2a01 	vstr	s4, [r7, #4]
 8002c6a:	edc7 2a00 	vstr	s5, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	d10e      	bne.n	8002c9a <mahony_updateIMU+0x4a>
 8002c7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c88:	d107      	bne.n	8002c9a <mahony_updateIMU+0x4a>
 8002c8a:	edd7 7a00 	vldr	s15, [r7]
 8002c8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	f000 8144 	beq.w	8002f22 <mahony_updateIMU+0x2d2>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 8002c9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ca2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ca6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cae:	edd7 7a00 	vldr	s15, [r7]
 8002cb2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cba:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbe:	f000 fa4d 	bl	800315c <mahony_invSqrt>
 8002cc2:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		ax *= recipNorm;
 8002cc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002cca:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002cd6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cda:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 8002ce6:	ed97 7a00 	vldr	s14, [r7]
 8002cea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf2:	edc7 7a00 	vstr	s15, [r7]

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8002cf6:	4b68      	ldr	r3, [pc, #416]	; (8002e98 <mahony_updateIMU+0x248>)
 8002cf8:	ed93 7a00 	vldr	s14, [r3]
 8002cfc:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <mahony_updateIMU+0x24c>)
 8002cfe:	edd3 7a00 	vldr	s15, [r3]
 8002d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d06:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <mahony_updateIMU+0x250>)
 8002d08:	edd3 6a00 	vldr	s13, [r3]
 8002d0c:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <mahony_updateIMU+0x254>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		halfvy = q0 * q1 + q2 * q3;
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <mahony_updateIMU+0x250>)
 8002d20:	ed93 7a00 	vldr	s14, [r3]
 8002d24:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <mahony_updateIMU+0x248>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <mahony_updateIMU+0x254>)
 8002d30:	edd3 6a00 	vldr	s13, [r3]
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <mahony_updateIMU+0x24c>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d42:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8002d46:	4b56      	ldr	r3, [pc, #344]	; (8002ea0 <mahony_updateIMU+0x250>)
 8002d48:	ed93 7a00 	vldr	s14, [r3]
 8002d4c:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <mahony_updateIMU+0x250>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d56:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d5a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d5e:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <mahony_updateIMU+0x24c>)
 8002d60:	edd3 6a00 	vldr	s13, [r3]
 8002d64:	4b4d      	ldr	r3, [pc, #308]	; (8002e9c <mahony_updateIMU+0x24c>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8002d76:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d82:	edd7 6a00 	vldr	s13, [r7]
 8002d86:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d92:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		halfey = (az * halfvx - ax * halfvz);
 8002d96:	ed97 7a00 	vldr	s14, [r7]
 8002d9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da2:	edd7 6a02 	vldr	s13, [r7, #8]
 8002da6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		halfez = (ax * halfvy - ay * halfvx);
 8002db6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002dba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002dbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8002dc6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
 8002dd6:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <mahony_updateIMU+0x258>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	dd6a      	ble.n	8002ebc <mahony_updateIMU+0x26c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <mahony_updateIMU+0x258>)
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <mahony_updateIMU+0x25c>)
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <mahony_updateIMU+0x260>)
 8002e00:	edd3 7a00 	vldr	s15, [r3]
 8002e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e08:	4b29      	ldr	r3, [pc, #164]	; (8002eb0 <mahony_updateIMU+0x260>)
 8002e0a:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <mahony_updateIMU+0x258>)
 8002e10:	ed93 7a00 	vldr	s14, [r3]
 8002e14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1c:	4b23      	ldr	r3, [pc, #140]	; (8002eac <mahony_updateIMU+0x25c>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <mahony_updateIMU+0x264>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <mahony_updateIMU+0x264>)
 8002e32:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 8002e36:	4b1c      	ldr	r3, [pc, #112]	; (8002ea8 <mahony_updateIMU+0x258>)
 8002e38:	ed93 7a00 	vldr	s14, [r3]
 8002e3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <mahony_updateIMU+0x25c>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <mahony_updateIMU+0x268>)
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <mahony_updateIMU+0x268>)
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8002e5e:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <mahony_updateIMU+0x260>)
 8002e60:	edd3 7a00 	vldr	s15, [r3]
 8002e64:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6c:	edc7 7a05 	vstr	s15, [r7, #20]
			gy += integralFBy;
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <mahony_updateIMU+0x264>)
 8002e72:	edd3 7a00 	vldr	s15, [r3]
 8002e76:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e7e:	edc7 7a04 	vstr	s15, [r7, #16]
			gz += integralFBz;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <mahony_updateIMU+0x268>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e90:	edc7 7a03 	vstr	s15, [r7, #12]
 8002e94:	e01e      	b.n	8002ed4 <mahony_updateIMU+0x284>
 8002e96:	bf00      	nop
 8002e98:	2000035c 	.word	0x2000035c
 8002e9c:	20000364 	.word	0x20000364
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	20000360 	.word	0x20000360
 8002ea8:	20000008 	.word	0x20000008
 8002eac:	20000374 	.word	0x20000374
 8002eb0:	20000368 	.word	0x20000368
 8002eb4:	2000036c 	.word	0x2000036c
 8002eb8:	20000370 	.word	0x20000370
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 8002ebc:	4b9d      	ldr	r3, [pc, #628]	; (8003134 <mahony_updateIMU+0x4e4>)
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002ec4:	4b9c      	ldr	r3, [pc, #624]	; (8003138 <mahony_updateIMU+0x4e8>)
 8002ec6:	f04f 0200 	mov.w	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002ecc:	4b9b      	ldr	r3, [pc, #620]	; (800313c <mahony_updateIMU+0x4ec>)
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8002ed4:	4b9a      	ldr	r3, [pc, #616]	; (8003140 <mahony_updateIMU+0x4f0>)
 8002ed6:	ed93 7a00 	vldr	s14, [r3]
 8002eda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eea:	edc7 7a05 	vstr	s15, [r7, #20]
		gy += twoKp * halfey;
 8002eee:	4b94      	ldr	r3, [pc, #592]	; (8003140 <mahony_updateIMU+0x4f0>)
 8002ef0:	ed93 7a00 	vldr	s14, [r3]
 8002ef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f04:	edc7 7a04 	vstr	s15, [r7, #16]
		gz += twoKp * halfez;
 8002f08:	4b8d      	ldr	r3, [pc, #564]	; (8003140 <mahony_updateIMU+0x4f0>)
 8002f0a:	ed93 7a00 	vldr	s14, [r3]
 8002f0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f1e:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8002f22:	4b88      	ldr	r3, [pc, #544]	; (8003144 <mahony_updateIMU+0x4f4>)
 8002f24:	edd3 7a00 	vldr	s15, [r3]
 8002f28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f30:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f38:	edc7 7a05 	vstr	s15, [r7, #20]
	gy *= (0.5f * invSampleFreq);
 8002f3c:	4b81      	ldr	r3, [pc, #516]	; (8003144 <mahony_updateIMU+0x4f4>)
 8002f3e:	edd3 7a00 	vldr	s15, [r3]
 8002f42:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f52:	edc7 7a04 	vstr	s15, [r7, #16]
	gz *= (0.5f * invSampleFreq);
 8002f56:	4b7b      	ldr	r3, [pc, #492]	; (8003144 <mahony_updateIMU+0x4f4>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6c:	edc7 7a03 	vstr	s15, [r7, #12]
	qa = q0;
 8002f70:	4b75      	ldr	r3, [pc, #468]	; (8003148 <mahony_updateIMU+0x4f8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	623b      	str	r3, [r7, #32]
	qb = q1;
 8002f76:	4b75      	ldr	r3, [pc, #468]	; (800314c <mahony_updateIMU+0x4fc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61fb      	str	r3, [r7, #28]
	qc = q2;
 8002f7c:	4b74      	ldr	r3, [pc, #464]	; (8003150 <mahony_updateIMU+0x500>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	61bb      	str	r3, [r7, #24]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8002f82:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f86:	eeb1 7a67 	vneg.f32	s14, s15
 8002f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f92:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f96:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fa2:	4b6c      	ldr	r3, [pc, #432]	; (8003154 <mahony_updateIMU+0x504>)
 8002fa4:	edd3 6a00 	vldr	s13, [r3]
 8002fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fb4:	4b64      	ldr	r3, [pc, #400]	; (8003148 <mahony_updateIMU+0x4f8>)
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fbe:	4b62      	ldr	r3, [pc, #392]	; (8003148 <mahony_updateIMU+0x4f8>)
 8002fc0:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8002fc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd0:	edd7 6a06 	vldr	s13, [r7, #24]
 8002fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fe0:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <mahony_updateIMU+0x504>)
 8002fe2:	edd3 6a00 	vldr	s13, [r3]
 8002fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ff2:	4b56      	ldr	r3, [pc, #344]	; (800314c <mahony_updateIMU+0x4fc>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <mahony_updateIMU+0x4fc>)
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8003002:	ed97 7a08 	vldr	s14, [r7, #32]
 8003006:	edd7 7a04 	vldr	s15, [r7, #16]
 800300a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800300e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003012:	edd7 7a03 	vldr	s15, [r7, #12]
 8003016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800301a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800301e:	4b4d      	ldr	r3, [pc, #308]	; (8003154 <mahony_updateIMU+0x504>)
 8003020:	edd3 6a00 	vldr	s13, [r3]
 8003024:	edd7 7a05 	vldr	s15, [r7, #20]
 8003028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003030:	4b47      	ldr	r3, [pc, #284]	; (8003150 <mahony_updateIMU+0x500>)
 8003032:	edd3 7a00 	vldr	s15, [r3]
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	4b45      	ldr	r3, [pc, #276]	; (8003150 <mahony_updateIMU+0x500>)
 800303c:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8003040:	ed97 7a08 	vldr	s14, [r7, #32]
 8003044:	edd7 7a03 	vldr	s15, [r7, #12]
 8003048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003050:	edd7 7a04 	vldr	s15, [r7, #16]
 8003054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003060:	edd7 7a05 	vldr	s15, [r7, #20]
 8003064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003068:	ee37 7a67 	vsub.f32	s14, s14, s15
 800306c:	4b39      	ldr	r3, [pc, #228]	; (8003154 <mahony_updateIMU+0x504>)
 800306e:	edd3 7a00 	vldr	s15, [r3]
 8003072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003076:	4b37      	ldr	r3, [pc, #220]	; (8003154 <mahony_updateIMU+0x504>)
 8003078:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800307c:	4b32      	ldr	r3, [pc, #200]	; (8003148 <mahony_updateIMU+0x4f8>)
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	4b31      	ldr	r3, [pc, #196]	; (8003148 <mahony_updateIMU+0x4f8>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <mahony_updateIMU+0x4fc>)
 800308e:	edd3 6a00 	vldr	s13, [r3]
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <mahony_updateIMU+0x4fc>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800309c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030a0:	4b2b      	ldr	r3, [pc, #172]	; (8003150 <mahony_updateIMU+0x500>)
 80030a2:	edd3 6a00 	vldr	s13, [r3]
 80030a6:	4b2a      	ldr	r3, [pc, #168]	; (8003150 <mahony_updateIMU+0x500>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030b4:	4b27      	ldr	r3, [pc, #156]	; (8003154 <mahony_updateIMU+0x504>)
 80030b6:	edd3 6a00 	vldr	s13, [r3]
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <mahony_updateIMU+0x504>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	eeb0 0a67 	vmov.f32	s0, s15
 80030cc:	f000 f846 	bl	800315c <mahony_invSqrt>
 80030d0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	q0 *= recipNorm;
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <mahony_updateIMU+0x4f8>)
 80030d6:	ed93 7a00 	vldr	s14, [r3]
 80030da:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <mahony_updateIMU+0x4f8>)
 80030e4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80030e8:	4b18      	ldr	r3, [pc, #96]	; (800314c <mahony_updateIMU+0x4fc>)
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <mahony_updateIMU+0x4fc>)
 80030f8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80030fc:	4b14      	ldr	r3, [pc, #80]	; (8003150 <mahony_updateIMU+0x500>)
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <mahony_updateIMU+0x500>)
 800310c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <mahony_updateIMU+0x504>)
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <mahony_updateIMU+0x504>)
 8003120:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <mahony_updateIMU+0x508>)
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
}
 800312a:	bf00      	nop
 800312c:	3740      	adds	r7, #64	; 0x40
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000368 	.word	0x20000368
 8003138:	2000036c 	.word	0x2000036c
 800313c:	20000370 	.word	0x20000370
 8003140:	20000004 	.word	0x20000004
 8003144:	20000374 	.word	0x20000374
 8003148:	2000000c 	.word	0x2000000c
 800314c:	2000035c 	.word	0x2000035c
 8003150:	20000360 	.word	0x20000360
 8003154:	20000364 	.word	0x20000364
 8003158:	20000384 	.word	0x20000384

0800315c <mahony_invSqrt>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float mahony_invSqrt(float x) {
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003166:	edd7 7a01 	vldr	s15, [r7, #4]
 800316a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800316e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003172:	edc7 7a05 	vstr	s15, [r7, #20]
	union {
		float f;
		long l;
	} i;
	i.f = x;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	60fb      	str	r3, [r7, #12]
	i.l = 0x5f3759df - (i.l >> 1);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	105a      	asrs	r2, r3, #1
 800317e:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <mahony_invSqrt+0x90>)
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
	float y = i.f;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003188:	ed97 7a05 	vldr	s14, [r7, #20]
 800318c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003194:	edd7 7a04 	vldr	s15, [r7, #16]
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80031a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80031a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ac:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80031b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80031b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80031b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80031c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80031d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	ee07 3a90 	vmov	s15, r3
}
 80031de:	eeb0 0a67 	vmov.f32	s0, s15
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	5f3759df 	.word	0x5f3759df

080031f0 <mahony_computeAngles>:

//-------------------------------------------------------------------------------------------

void mahony_computeAngles() {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
	roll = atan2f(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2) * 180 / M_PI;
 80031f4:	4b64      	ldr	r3, [pc, #400]	; (8003388 <mahony_computeAngles+0x198>)
 80031f6:	ed93 7a00 	vldr	s14, [r3]
 80031fa:	4b64      	ldr	r3, [pc, #400]	; (800338c <mahony_computeAngles+0x19c>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003204:	4b62      	ldr	r3, [pc, #392]	; (8003390 <mahony_computeAngles+0x1a0>)
 8003206:	edd3 6a00 	vldr	s13, [r3]
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <mahony_computeAngles+0x1a4>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003214:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003218:	4b5c      	ldr	r3, [pc, #368]	; (800338c <mahony_computeAngles+0x19c>)
 800321a:	ed93 7a00 	vldr	s14, [r3]
 800321e:	4b5b      	ldr	r3, [pc, #364]	; (800338c <mahony_computeAngles+0x19c>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003228:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800322c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003230:	4b57      	ldr	r3, [pc, #348]	; (8003390 <mahony_computeAngles+0x1a0>)
 8003232:	edd3 6a00 	vldr	s13, [r3]
 8003236:	4b56      	ldr	r3, [pc, #344]	; (8003390 <mahony_computeAngles+0x1a0>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003244:	eef0 0a67 	vmov.f32	s1, s15
 8003248:	eeb0 0a46 	vmov.f32	s0, s12
 800324c:	f00e f86a 	bl	8011324 <atan2f>
 8003250:	eef0 7a40 	vmov.f32	s15, s0
 8003254:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003398 <mahony_computeAngles+0x1a8>
 8003258:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325c:	ee17 0a90 	vmov	r0, s15
 8003260:	f7fd f97a 	bl	8000558 <__aeabi_f2d>
 8003264:	a346      	add	r3, pc, #280	; (adr r3, 8003380 <mahony_computeAngles+0x190>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	f7fd faf7 	bl	800085c <__aeabi_ddiv>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4610      	mov	r0, r2
 8003274:	4619      	mov	r1, r3
 8003276:	f7fd fc9f 	bl	8000bb8 <__aeabi_d2f>
 800327a:	4603      	mov	r3, r0
 800327c:	4a47      	ldr	r2, [pc, #284]	; (800339c <mahony_computeAngles+0x1ac>)
 800327e:	6013      	str	r3, [r2, #0]
	pitch = asinf(-2.0f * (q1 * q3 - q0 * q2)) * 180 / M_PI;
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <mahony_computeAngles+0x19c>)
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	4b43      	ldr	r3, [pc, #268]	; (8003394 <mahony_computeAngles+0x1a4>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003290:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <mahony_computeAngles+0x198>)
 8003292:	edd3 6a00 	vldr	s13, [r3]
 8003296:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <mahony_computeAngles+0x1a0>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80032a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032ac:	eeb0 0a67 	vmov.f32	s0, s15
 80032b0:	f00e f80c 	bl	80112cc <asinf>
 80032b4:	eef0 7a40 	vmov.f32	s15, s0
 80032b8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003398 <mahony_computeAngles+0x1a8>
 80032bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c0:	ee17 0a90 	vmov	r0, s15
 80032c4:	f7fd f948 	bl	8000558 <__aeabi_f2d>
 80032c8:	a32d      	add	r3, pc, #180	; (adr r3, 8003380 <mahony_computeAngles+0x190>)
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f7fd fac5 	bl	800085c <__aeabi_ddiv>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f7fd fc6d 	bl	8000bb8 <__aeabi_d2f>
 80032de:	4603      	mov	r3, r0
 80032e0:	4a2f      	ldr	r2, [pc, #188]	; (80033a0 <mahony_computeAngles+0x1b0>)
 80032e2:	6013      	str	r3, [r2, #0]
	yaw = atan2f(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3) * 180 / M_PI;
 80032e4:	4b29      	ldr	r3, [pc, #164]	; (800338c <mahony_computeAngles+0x19c>)
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	4b29      	ldr	r3, [pc, #164]	; (8003390 <mahony_computeAngles+0x1a0>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f4:	4b24      	ldr	r3, [pc, #144]	; (8003388 <mahony_computeAngles+0x198>)
 80032f6:	edd3 6a00 	vldr	s13, [r3]
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <mahony_computeAngles+0x1a4>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003304:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <mahony_computeAngles+0x1a0>)
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <mahony_computeAngles+0x1a0>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003318:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800331c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003320:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <mahony_computeAngles+0x1a4>)
 8003322:	edd3 6a00 	vldr	s13, [r3]
 8003326:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <mahony_computeAngles+0x1a4>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	eef0 0a67 	vmov.f32	s1, s15
 8003338:	eeb0 0a46 	vmov.f32	s0, s12
 800333c:	f00d fff2 	bl	8011324 <atan2f>
 8003340:	eef0 7a40 	vmov.f32	s15, s0
 8003344:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003398 <mahony_computeAngles+0x1a8>
 8003348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800334c:	ee17 0a90 	vmov	r0, s15
 8003350:	f7fd f902 	bl	8000558 <__aeabi_f2d>
 8003354:	a30a      	add	r3, pc, #40	; (adr r3, 8003380 <mahony_computeAngles+0x190>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd fa7f 	bl	800085c <__aeabi_ddiv>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	f7fd fc27 	bl	8000bb8 <__aeabi_d2f>
 800336a:	4603      	mov	r3, r0
 800336c:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <mahony_computeAngles+0x1b4>)
 800336e:	6013      	str	r3, [r2, #0]
	anglesComputed = 1;
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <mahony_computeAngles+0x1b8>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w
 8003380:	54442d18 	.word	0x54442d18
 8003384:	400921fb 	.word	0x400921fb
 8003388:	2000000c 	.word	0x2000000c
 800338c:	2000035c 	.word	0x2000035c
 8003390:	20000360 	.word	0x20000360
 8003394:	20000364 	.word	0x20000364
 8003398:	43340000 	.word	0x43340000
 800339c:	20000378 	.word	0x20000378
 80033a0:	2000037c 	.word	0x2000037c
 80033a4:	20000380 	.word	0x20000380
 80033a8:	20000384 	.word	0x20000384

080033ac <mahony_getRoll>:

float mahony_getRoll() {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
	if (!anglesComputed)
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <mahony_getRoll+0x20>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <mahony_getRoll+0x10>
		mahony_computeAngles();
 80033b8:	f7ff ff1a 	bl	80031f0 <mahony_computeAngles>
	return roll;
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <mahony_getRoll+0x24>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	ee07 3a90 	vmov	s15, r3
}
 80033c4:	eeb0 0a67 	vmov.f32	s0, s15
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000384 	.word	0x20000384
 80033d0:	20000378 	.word	0x20000378

080033d4 <mahony_getPitch>:
float mahony_getPitch() {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
	if (!anglesComputed)
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <mahony_getPitch+0x20>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d101      	bne.n	80033e4 <mahony_getPitch+0x10>
		mahony_computeAngles();
 80033e0:	f7ff ff06 	bl	80031f0 <mahony_computeAngles>
	return pitch;
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <mahony_getPitch+0x24>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	ee07 3a90 	vmov	s15, r3
}
 80033ec:	eeb0 0a67 	vmov.f32	s0, s15
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000384 	.word	0x20000384
 80033f8:	2000037c 	.word	0x2000037c

080033fc <mahony_getYaw>:
float mahony_getYaw() {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	if (!anglesComputed)
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <mahony_getYaw+0x20>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <mahony_getYaw+0x10>
		mahony_computeAngles();
 8003408:	f7ff fef2 	bl	80031f0 <mahony_computeAngles>
	return yaw;
 800340c:	4b04      	ldr	r3, [pc, #16]	; (8003420 <mahony_getYaw+0x24>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	ee07 3a90 	vmov	s15, r3
}
 8003414:	eeb0 0a67 	vmov.f32	s0, s15
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000384 	.word	0x20000384
 8003420:	20000380 	.word	0x20000380

08003424 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t map(float x, int16_t in_min, int16_t in_max, int16_t out_min,
		int16_t out_max) {
 8003424:	b490      	push	{r4, r7}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	ed87 0a03 	vstr	s0, [r7, #12]
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	817b      	strh	r3, [r7, #10]
 800343a:	4603      	mov	r3, r0
 800343c:	813b      	strh	r3, [r7, #8]
 800343e:	460b      	mov	r3, r1
 8003440:	80fb      	strh	r3, [r7, #6]
 8003442:	4613      	mov	r3, r2
 8003444:	80bb      	strh	r3, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003446:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003452:	ed97 7a03 	vldr	s14, [r7, #12]
 8003456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800345a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800345e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	ee07 3a90 	vmov	s15, r3
 8003468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800346c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003470:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003474:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003496:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800349a:	ee17 3a90 	vmov	r3, s15
 800349e:	b21b      	sxth	r3, r3
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc90      	pop	{r4, r7}
 80034a8:	4770      	bx	lr
 80034aa:	0000      	movs	r0, r0
 80034ac:	0000      	movs	r0, r0
	...

080034b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80034b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b4:	ed2d 8b04 	vpush	{d8-d9}
 80034b8:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 80034bc:	b08d      	sub	sp, #52	; 0x34
 80034be:	af18      	add	r7, sp, #96	; 0x60
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80034c0:	f002 f850 	bl	8005564 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80034c4:	f000 fefa 	bl	80042bc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	//I2CResetBus();
	__HAL_RCC_I2C1_CLK_ENABLE();
 80034c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80034cc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <main+0x1c0>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	4a65      	ldr	r2, [pc, #404]	; (8003670 <main+0x1c0>)
 80034da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034de:	6413      	str	r3, [r2, #64]	; 0x40
 80034e0:	4b63      	ldr	r3, [pc, #396]	; (8003670 <main+0x1c0>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80034e8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80034ec:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80034f6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80034fa:	681b      	ldr	r3, [r3, #0]
	HAL_Delay(100);
 80034fc:	2064      	movs	r0, #100	; 0x64
 80034fe:	f002 f8a3 	bl	8005648 <HAL_Delay>
	__HAL_RCC_I2C1_FORCE_RESET();
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <main+0x1c0>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <main+0x1c0>)
 8003508:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800350c:	6213      	str	r3, [r2, #32]
	HAL_Delay(100);
 800350e:	2064      	movs	r0, #100	; 0x64
 8003510:	f002 f89a 	bl	8005648 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 8003514:	4b56      	ldr	r3, [pc, #344]	; (8003670 <main+0x1c0>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a55      	ldr	r2, [pc, #340]	; (8003670 <main+0x1c0>)
 800351a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800351e:	6213      	str	r3, [r2, #32]
	HAL_Delay(100);
 8003520:	2064      	movs	r0, #100	; 0x64
 8003522:	f002 f891 	bl	8005648 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003526:	f001 f8cf 	bl	80046c8 <MX_GPIO_Init>
	MX_I2C1_Init();
 800352a:	f000 ff31 	bl	8004390 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 800352e:	f001 f8a1 	bl	8004674 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8003532:	f000 ff7b 	bl	800442c <MX_SPI1_Init>
	MX_TIM2_Init();
 8003536:	f000 ffaf 	bl	8004498 <MX_TIM2_Init>
	MX_TIM3_Init();
 800353a:	f001 f823 	bl	8004584 <MX_TIM3_Init>
	MX_SDIO_SD_Init();
 800353e:	f000 ff55 	bl	80043ec <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8003542:	f008 f979 	bl	800b838 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(150);
 8003546:	2096      	movs	r0, #150	; 0x96
 8003548:	f002 f87e 	bl	8005648 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800354c:	2100      	movs	r1, #0
 800354e:	4849      	ldr	r0, [pc, #292]	; (8003674 <main+0x1c4>)
 8003550:	f006 fb0a 	bl	8009b68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003554:	2100      	movs	r1, #0
 8003556:	4848      	ldr	r0, [pc, #288]	; (8003678 <main+0x1c8>)
 8003558:	f006 fb06 	bl	8009b68 <HAL_TIM_PWM_Start>
	blink_stmled();
 800355c:	f001 f944 	bl	80047e8 <blink_stmled>
	debug_init(&huart1);
 8003560:	4846      	ldr	r0, [pc, #280]	; (800367c <main+0x1cc>)
 8003562:	f7fe f9e1 	bl	8001928 <debug_init>
	log_s("Start");
 8003566:	4846      	ldr	r0, [pc, #280]	; (8003680 <main+0x1d0>)
 8003568:	f7fe f9ee 	bl	8001948 <log_s>
	//I2C_Scan();
	gy_init_lbl: if (GY801_init(&hi2c1, &data)) {
 800356c:	4945      	ldr	r1, [pc, #276]	; (8003684 <main+0x1d4>)
 800356e:	4846      	ldr	r0, [pc, #280]	; (8003688 <main+0x1d8>)
 8003570:	f7fe fa86 	bl	8001a80 <GY801_init>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d007      	beq.n	800358a <main+0xda>
		I2C_ClearBusyFlagErratum(&hi2c1, 100); //fix i2c HAL_BUSY: https://istarik.ru/blog/stm32/123.html
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	4842      	ldr	r0, [pc, #264]	; (8003688 <main+0x1d8>)
 800357e:	f001 f99d 	bl	80048bc <I2C_ClearBusyFlagErratum>
		log_s("REINIT_DONE TRYING....");
 8003582:	4842      	ldr	r0, [pc, #264]	; (800368c <main+0x1dc>)
 8003584:	f7fe f9e0 	bl	8001948 <log_s>
		goto gy_init_lbl;
 8003588:	e7f0      	b.n	800356c <main+0xbc>
		blink_rfled(1); //HAL_GPIO_WritePin(GPIOC, LED_RF_Pin, GPIO_PIN_SET);
	}

	uint8_t nrf_data[32];
	nrf_init(&hspi1);
 800358a:	4841      	ldr	r0, [pc, #260]	; (8003690 <main+0x1e0>)
 800358c:	f001 fa60 	bl	8004a50 <nrf_init>
	uint32_t packet = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003596:	f102 020c 	add.w	r2, r2, #12
 800359a:	6013      	str	r3, [r2, #0]

	extern char SDPath[4];
	FATFS fileSystem;
	uint8_t testbuff[] = "new run\r\n";
 800359c:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80035a0:	f103 0310 	add.w	r3, r3, #16
 80035a4:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <main+0x1e4>)
 80035a6:	3b90      	subs	r3, #144	; 0x90
 80035a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035aa:	c303      	stmia	r3!, {r0, r1}
 80035ac:	801a      	strh	r2, [r3, #0]
	char sdBuff[256];
	FIL logFile;
	UINT tempBytes;
	UINT sdSize = 0;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80035b4:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80035b8:	6013      	str	r3, [r2, #0]
	FRESULT res = 0;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 80035c0:	f102 0233 	add.w	r2, r2, #51	; 0x33
 80035c4:	7013      	strb	r3, [r2, #0]
	FSIZE_t fsize;
	if (f_mount(&fileSystem, (TCHAR const*) SDPath, 0) == FR_OK) {
 80035c6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80035ca:	f103 0310 	add.w	r3, r3, #16
 80035ce:	3b04      	subs	r3, #4
 80035d0:	2200      	movs	r2, #0
 80035d2:	4931      	ldr	r1, [pc, #196]	; (8003698 <main+0x1e8>)
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00a f881 	bl	800d6dc <f_mount>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d163      	bne.n	80036a8 <main+0x1f8>
		if (f_open(&logFile, "log.txt", FA_WRITE | FA_OPEN_ALWAYS) == FR_OK) {
 80035e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035e4:	2212      	movs	r2, #18
 80035e6:	492d      	ldr	r1, [pc, #180]	; (800369c <main+0x1ec>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f00a f8bd 	bl	800d768 <f_open>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d135      	bne.n	8003660 <main+0x1b0>
			uint64_t fsize = f_size(&logFile);
 80035f4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80035f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	461c      	mov	r4, r3
 8003602:	4615      	mov	r5, r2
 8003604:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003608:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800360c:	e9c3 4500 	strd	r4, r5, [r3]
			f_lseek(&logFile, fsize);
 8003610:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003614:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f00a fc7f 	bl	800df24 <f_lseek>
			if (f_write(&logFile, testbuff, sizeof(testbuff),
 8003626:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800362a:	3b04      	subs	r3, #4
 800362c:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8003630:	f101 0110 	add.w	r1, r1, #16
 8003634:	3910      	subs	r1, #16
 8003636:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800363a:	220a      	movs	r2, #10
 800363c:	f00a fa60 	bl	800db00 <f_write>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <main+0x1a2>
					(void*) &tempBytes) == FR_OK) {
				f_sync(&logFile);
 8003646:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800364a:	4618      	mov	r0, r3
 800364c:	f00a fbec 	bl	800de28 <f_sync>
 8003650:	e031      	b.n	80036b6 <main+0x206>
			} else {
				log_s("SD_ERR_WRITE");
 8003652:	4813      	ldr	r0, [pc, #76]	; (80036a0 <main+0x1f0>)
 8003654:	f7fe f978 	bl	8001948 <log_s>
				blink_rfled(2);
 8003658:	2002      	movs	r0, #2
 800365a:	f001 f8d7 	bl	800480c <blink_rfled>
				goto sd_end_lbl;
 800365e:	e02a      	b.n	80036b6 <main+0x206>
			}
		} else {
			log_s("SD_ERR_OPEN");
 8003660:	4810      	ldr	r0, [pc, #64]	; (80036a4 <main+0x1f4>)
 8003662:	f7fe f971 	bl	8001948 <log_s>
			blink_rfled(2);
 8003666:	2002      	movs	r0, #2
 8003668:	f001 f8d0 	bl	800480c <blink_rfled>
			goto sd_end_lbl;
 800366c:	e023      	b.n	80036b6 <main+0x206>
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	200004b8 	.word	0x200004b8
 8003678:	20000500 	.word	0x20000500
 800367c:	20000548 	.word	0x20000548
 8003680:	08011d20 	.word	0x08011d20
 8003684:	20000590 	.word	0x20000590
 8003688:	20000388 	.word	0x20000388
 800368c:	08011d28 	.word	0x08011d28
 8003690:	20000460 	.word	0x20000460
 8003694:	08011e30 	.word	0x08011e30
 8003698:	200005ec 	.word	0x200005ec
 800369c:	08011d40 	.word	0x08011d40
 80036a0:	08011d48 	.word	0x08011d48
 80036a4:	08011d58 	.word	0x08011d58
		}
	} else {
		log_s("SD_ERR_MOUNT");
 80036a8:	48d9      	ldr	r0, [pc, #868]	; (8003a10 <main+0x560>)
 80036aa:	f7fe f94d 	bl	8001948 <log_s>
		blink_rfled(2);
 80036ae:	2002      	movs	r0, #2
 80036b0:	f001 f8ac 	bl	800480c <blink_rfled>
		goto sd_end_lbl;
 80036b4:	bf00      	nop
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uint32_t last_t; //,test_t;
	float pitch, roll;
	float max_height=0;
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036be:	f102 0204 	add.w	r2, r2, #4
 80036c2:	6013      	str	r3, [r2, #0]
	uint32_t max_height_t = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036ca:	6013      	str	r3, [r2, #0]

	log_s_int("con 0", constrain(2, -1, 1));
 80036cc:	2101      	movs	r1, #1
 80036ce:	48d1      	ldr	r0, [pc, #836]	; (8003a14 <main+0x564>)
 80036d0:	f7fe f974 	bl	80019bc <log_s_int>
	log_s_int("con 2", constrain(2, 1, -1));
 80036d4:	2101      	movs	r1, #1
 80036d6:	48d0      	ldr	r0, [pc, #832]	; (8003a18 <main+0x568>)
 80036d8:	f7fe f970 	bl	80019bc <log_s_int>
	log_s_int("con -10", constrain(-10, -1, 1));
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036e0:	48ce      	ldr	r0, [pc, #824]	; (8003a1c <main+0x56c>)
 80036e2:	f7fe f96b 	bl	80019bc <log_s_int>
	// madgwick
	log_s_p_3("ADXL", &data.adxl345.ax, &data.adxl345.ay, &data.adxl345.az);
 80036e6:	4bce      	ldr	r3, [pc, #824]	; (8003a20 <main+0x570>)
 80036e8:	4ace      	ldr	r2, [pc, #824]	; (8003a24 <main+0x574>)
 80036ea:	49cf      	ldr	r1, [pc, #828]	; (8003a28 <main+0x578>)
 80036ec:	48cf      	ldr	r0, [pc, #828]	; (8003a2c <main+0x57c>)
 80036ee:	f7fe f995 	bl	8001a1c <log_s_p_3>
	log_s_p_3("ACCEL", &data.lsm303dlhc.ax, &data.lsm303dlhc.ay,
 80036f2:	4bcf      	ldr	r3, [pc, #828]	; (8003a30 <main+0x580>)
 80036f4:	4acf      	ldr	r2, [pc, #828]	; (8003a34 <main+0x584>)
 80036f6:	49d0      	ldr	r1, [pc, #832]	; (8003a38 <main+0x588>)
 80036f8:	48d0      	ldr	r0, [pc, #832]	; (8003a3c <main+0x58c>)
 80036fa:	f7fe f98f 	bl	8001a1c <log_s_p_3>
			&data.lsm303dlhc.az);
	log_s_p_3("GYRO", &data.l3g4200d.gx, &data.l3g4200d.gy, &data.l3g4200d.gz);
 80036fe:	4bd0      	ldr	r3, [pc, #832]	; (8003a40 <main+0x590>)
 8003700:	4ad0      	ldr	r2, [pc, #832]	; (8003a44 <main+0x594>)
 8003702:	49d1      	ldr	r1, [pc, #836]	; (8003a48 <main+0x598>)
 8003704:	48d1      	ldr	r0, [pc, #836]	; (8003a4c <main+0x59c>)
 8003706:	f7fe f989 	bl	8001a1c <log_s_p_3>
	log_s_p_3("MAG", &data.lsm303dlhc_mag.mx_raw, &data.lsm303dlhc_mag.my_raw,
 800370a:	4bd1      	ldr	r3, [pc, #836]	; (8003a50 <main+0x5a0>)
 800370c:	4ad1      	ldr	r2, [pc, #836]	; (8003a54 <main+0x5a4>)
 800370e:	49d2      	ldr	r1, [pc, #840]	; (8003a58 <main+0x5a8>)
 8003710:	48d2      	ldr	r0, [pc, #840]	; (8003a5c <main+0x5ac>)
 8003712:	f7fe f983 	bl	8001a1c <log_s_p_3>
			&data.lsm303dlhc_mag.mz_raw);
	uint32_t ahrs_t = HAL_GetTick();
 8003716:	f001 ff8b 	bl	8005630 <HAL_GetTick>
 800371a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800371e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8003722:	6018      	str	r0, [r3, #0]
	uint16_t hz = 0;
 8003724:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003728:	f5a3 73e3 	sub.w	r3, r3, #454	; 0x1c6
 800372c:	2200      	movs	r2, #0
 800372e:	801a      	strh	r2, [r3, #0]
	uint32_t hz_t = HAL_GetTick();
 8003730:	f001 ff7e 	bl	8005630 <HAL_GetTick>
 8003734:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003738:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800373c:	6018      	str	r0, [r3, #0]
	log_s_p("HZ", &hz);
 800373e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003742:	3b06      	subs	r3, #6
 8003744:	4619      	mov	r1, r3
 8003746:	48c6      	ldr	r0, [pc, #792]	; (8003a60 <main+0x5b0>)
 8003748:	f7fe f984 	bl	8001a54 <log_s_p>
	mahony_print_ptr();
 800374c:	f7fe fe4e 	bl	80023ec <mahony_print_ptr>
	//char *log_chars[50];
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (!adxl_check_connection()) {
 8003750:	f7fd fd3a 	bl	80011c8 <adxl_check_connection>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d103      	bne.n	8003762 <main+0x2b2>
			I2C_ClearBusyFlagErratum(&hi2c1, 100);
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	48c1      	ldr	r0, [pc, #772]	; (8003a64 <main+0x5b4>)
 800375e:	f001 f8ad 	bl	80048bc <I2C_ClearBusyFlagErratum>
		}
		GY801_update_data();
 8003762:	f7fe fad1 	bl	8001d08 <GY801_update_data>
		hz += 1;
 8003766:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800376a:	f5a3 73e3 	sub.w	r3, r3, #454	; 0x1c6
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003778:	f5a3 73e3 	sub.w	r3, r3, #454	; 0x1c6
 800377c:	801a      	strh	r2, [r3, #0]
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800377e:	f001 ff57 	bl	8005630 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003788:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003798:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8003a68 <main+0x5b8>
 800379c:	ee87 8a87 	vdiv.f32	s16, s15, s14
				(float) data.l3g4200d.gx * M_PI / 180 / 131,
 80037a0:	4bb2      	ldr	r3, [pc, #712]	; (8003a6c <main+0x5bc>)
 80037a2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ae:	ee17 0a90 	vmov	r0, s15
 80037b2:	f7fc fed1 	bl	8000558 <__aeabi_f2d>
 80037b6:	a390      	add	r3, pc, #576	; (adr r3, 80039f8 <main+0x548>)
 80037b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037bc:	f7fc ff24 	bl	8000608 <__aeabi_dmul>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4610      	mov	r0, r2
 80037c6:	4619      	mov	r1, r3
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	4ba8      	ldr	r3, [pc, #672]	; (8003a70 <main+0x5c0>)
 80037ce:	f7fd f845 	bl	800085c <__aeabi_ddiv>
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	4610      	mov	r0, r2
 80037d8:	4619      	mov	r1, r3
 80037da:	a389      	add	r3, pc, #548	; (adr r3, 8003a00 <main+0x550>)
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f7fd f83c 	bl	800085c <__aeabi_ddiv>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 80037e8:	4610      	mov	r0, r2
 80037ea:	4619      	mov	r1, r3
 80037ec:	f7fd f9e4 	bl	8000bb8 <__aeabi_d2f>
 80037f0:	4604      	mov	r4, r0
				(float) data.l3g4200d.gy * M_PI / 180 / 131,
 80037f2:	4b9e      	ldr	r3, [pc, #632]	; (8003a6c <main+0x5bc>)
 80037f4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003800:	ee17 0a90 	vmov	r0, s15
 8003804:	f7fc fea8 	bl	8000558 <__aeabi_f2d>
 8003808:	a37b      	add	r3, pc, #492	; (adr r3, 80039f8 <main+0x548>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fc fefb 	bl	8000608 <__aeabi_dmul>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	4b94      	ldr	r3, [pc, #592]	; (8003a70 <main+0x5c0>)
 8003820:	f7fd f81c 	bl	800085c <__aeabi_ddiv>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	a374      	add	r3, pc, #464	; (adr r3, 8003a00 <main+0x550>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f7fd f813 	bl	800085c <__aeabi_ddiv>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f9bb 	bl	8000bb8 <__aeabi_d2f>
 8003842:	4605      	mov	r5, r0
				(float) data.l3g4200d.gz * M_PI / 180 / 131,
 8003844:	4b89      	ldr	r3, [pc, #548]	; (8003a6c <main+0x5bc>)
 8003846:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003852:	ee17 0a90 	vmov	r0, s15
 8003856:	f7fc fe7f 	bl	8000558 <__aeabi_f2d>
 800385a:	a367      	add	r3, pc, #412	; (adr r3, 80039f8 <main+0x548>)
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f7fc fed2 	bl	8000608 <__aeabi_dmul>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4610      	mov	r0, r2
 800386a:	4619      	mov	r1, r3
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	4b7f      	ldr	r3, [pc, #508]	; (8003a70 <main+0x5c0>)
 8003872:	f7fc fff3 	bl	800085c <__aeabi_ddiv>
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	a360      	add	r3, pc, #384	; (adr r3, 8003a00 <main+0x550>)
 8003880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003884:	f7fc ffea 	bl	800085c <__aeabi_ddiv>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	f7fd f992 	bl	8000bb8 <__aeabi_d2f>
 8003894:	4606      	mov	r6, r0
				(float) data.adxl345.ay * 9.81 / 32.0f,
 8003896:	4b75      	ldr	r3, [pc, #468]	; (8003a6c <main+0x5bc>)
 8003898:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a4:	ee17 0a90 	vmov	r0, s15
 80038a8:	f7fc fe56 	bl	8000558 <__aeabi_f2d>
 80038ac:	a356      	add	r3, pc, #344	; (adr r3, 8003a08 <main+0x558>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f7fc fea9 	bl	8000608 <__aeabi_dmul>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4610      	mov	r0, r2
 80038bc:	4619      	mov	r1, r3
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	4b6c      	ldr	r3, [pc, #432]	; (8003a74 <main+0x5c4>)
 80038c4:	f7fc ffca 	bl	800085c <__aeabi_ddiv>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	f7fd f972 	bl	8000bb8 <__aeabi_d2f>
 80038d4:	4680      	mov	r8, r0
				(float) data.adxl345.ax * 9.81 / 32.0f,
 80038d6:	4b65      	ldr	r3, [pc, #404]	; (8003a6c <main+0x5bc>)
 80038d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80038dc:	ee07 3a90 	vmov	s15, r3
 80038e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038e4:	ee17 0a90 	vmov	r0, s15
 80038e8:	f7fc fe36 	bl	8000558 <__aeabi_f2d>
 80038ec:	a346      	add	r3, pc, #280	; (adr r3, 8003a08 <main+0x558>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	f7fc fe89 	bl	8000608 <__aeabi_dmul>
 80038f6:	4602      	mov	r2, r0
 80038f8:	460b      	mov	r3, r1
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	4b5c      	ldr	r3, [pc, #368]	; (8003a74 <main+0x5c4>)
 8003904:	f7fc ffaa 	bl	800085c <__aeabi_ddiv>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f952 	bl	8000bb8 <__aeabi_d2f>
 8003914:	4681      	mov	r9, r0
				(float) data.adxl345.az * 9.81 / 32.0f,
 8003916:	4b55      	ldr	r3, [pc, #340]	; (8003a6c <main+0x5bc>)
 8003918:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003924:	ee17 0a90 	vmov	r0, s15
 8003928:	f7fc fe16 	bl	8000558 <__aeabi_f2d>
 800392c:	a336      	add	r3, pc, #216	; (adr r3, 8003a08 <main+0x558>)
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f7fc fe69 	bl	8000608 <__aeabi_dmul>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4610      	mov	r0, r2
 800393c:	4619      	mov	r1, r3
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <main+0x5c4>)
 8003944:	f7fc ff8a 	bl	800085c <__aeabi_ddiv>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800394c:	4610      	mov	r0, r2
 800394e:	4619      	mov	r1, r3
 8003950:	f7fd f932 	bl	8000bb8 <__aeabi_d2f>
 8003954:	4682      	mov	sl, r0
				(float) data.lsm303dlhc_mag.mx / 450,
 8003956:	4b45      	ldr	r3, [pc, #276]	; (8003a6c <main+0x5bc>)
 8003958:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800395c:	4610      	mov	r0, r2
 800395e:	4619      	mov	r1, r3
 8003960:	f7fd f92a 	bl	8000bb8 <__aeabi_d2f>
 8003964:	ee07 0a10 	vmov	s14, r0
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 8003968:	eddf 7a43 	vldr	s15, [pc, #268]	; 8003a78 <main+0x5c8>
 800396c:	eec7 8a27 	vdiv.f32	s17, s14, s15
				(float) data.lsm303dlhc_mag.my / 450,
 8003970:	4b3e      	ldr	r3, [pc, #248]	; (8003a6c <main+0x5bc>)
 8003972:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003976:	4610      	mov	r0, r2
 8003978:	4619      	mov	r1, r3
 800397a:	f7fd f91d 	bl	8000bb8 <__aeabi_d2f>
 800397e:	ee07 0a10 	vmov	s14, r0
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 8003982:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8003a78 <main+0x5c8>
 8003986:	ee87 9a27 	vdiv.f32	s18, s14, s15
				(float) data.lsm303dlhc_mag.mz / 450);
 800398a:	4b38      	ldr	r3, [pc, #224]	; (8003a6c <main+0x5bc>)
 800398c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	f7fd f910 	bl	8000bb8 <__aeabi_d2f>
 8003998:	ee06 0a90 	vmov	s13, r0
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800399c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003a78 <main+0x5c8>
 80039a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a4:	eef0 4a67 	vmov.f32	s9, s15
 80039a8:	eeb0 4a49 	vmov.f32	s8, s18
 80039ac:	eef0 3a68 	vmov.f32	s7, s17
 80039b0:	ee03 aa10 	vmov	s6, sl
 80039b4:	ee02 9a90 	vmov	s5, r9
 80039b8:	ee02 8a10 	vmov	s4, r8
 80039bc:	ee01 6a90 	vmov	s3, r6
 80039c0:	ee01 5a10 	vmov	s2, r5
 80039c4:	ee00 4a90 	vmov	s1, r4
 80039c8:	eeb0 0a48 	vmov.f32	s0, s16
 80039cc:	f7fe fd20 	bl	8002410 <mahony_update>
		//log_s_int("AHRS_T", HAL_GetTick() - ahrs_t);
		ahrs_t = HAL_GetTick();
 80039d0:	f001 fe2e 	bl	8005630 <HAL_GetTick>
 80039d4:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80039d8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80039dc:	6018      	str	r0, [r3, #0]
		pitch = constrain(mahony_getPitch(),-20,20) + 10;
 80039de:	f7ff fcf9 	bl	80033d4 <mahony_getPitch>
 80039e2:	eef0 7a40 	vmov.f32	s15, s0
 80039e6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80039ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f2:	dd46      	ble.n	8003a82 <main+0x5d2>
 80039f4:	e042      	b.n	8003a7c <main+0x5cc>
 80039f6:	bf00      	nop
 80039f8:	54442d18 	.word	0x54442d18
 80039fc:	400921fb 	.word	0x400921fb
 8003a00:	00000000 	.word	0x00000000
 8003a04:	40606000 	.word	0x40606000
 8003a08:	51eb851f 	.word	0x51eb851f
 8003a0c:	40239eb8 	.word	0x40239eb8
 8003a10:	08011d64 	.word	0x08011d64
 8003a14:	08011d74 	.word	0x08011d74
 8003a18:	08011d7c 	.word	0x08011d7c
 8003a1c:	08011d84 	.word	0x08011d84
 8003a20:	200005a4 	.word	0x200005a4
 8003a24:	200005a2 	.word	0x200005a2
 8003a28:	200005a0 	.word	0x200005a0
 8003a2c:	08011d8c 	.word	0x08011d8c
 8003a30:	200005ac 	.word	0x200005ac
 8003a34:	200005aa 	.word	0x200005aa
 8003a38:	200005a8 	.word	0x200005a8
 8003a3c:	08011d94 	.word	0x08011d94
 8003a40:	200005b4 	.word	0x200005b4
 8003a44:	200005b2 	.word	0x200005b2
 8003a48:	200005b0 	.word	0x200005b0
 8003a4c:	08011d9c 	.word	0x08011d9c
 8003a50:	200005bc 	.word	0x200005bc
 8003a54:	200005ba 	.word	0x200005ba
 8003a58:	200005b8 	.word	0x200005b8
 8003a5c:	08011da4 	.word	0x08011da4
 8003a60:	08011da8 	.word	0x08011da8
 8003a64:	20000388 	.word	0x20000388
 8003a68:	447a0000 	.word	0x447a0000
 8003a6c:	20000590 	.word	0x20000590
 8003a70:	40668000 	.word	0x40668000
 8003a74:	40400000 	.word	0x40400000
 8003a78:	43e10000 	.word	0x43e10000
 8003a7c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003a80:	e011      	b.n	8003aa6 <main+0x5f6>
 8003a82:	f7ff fca7 	bl	80033d4 <mahony_getPitch>
 8003a86:	eef0 7a40 	vmov.f32	s15, s0
 8003a8a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8003a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	d502      	bpl.n	8003a9e <main+0x5ee>
 8003a98:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8003a9c:	e003      	b.n	8003aa6 <main+0x5f6>
 8003a9e:	f7ff fc99 	bl	80033d4 <mahony_getPitch>
 8003aa2:	eef0 7a40 	vmov.f32	s15, s0
 8003aa6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003aae:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003ab2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003ab6:	edc3 7a00 	vstr	s15, [r3]
		roll = constrain(mahony_getRoll(),-20,20) + 10;
 8003aba:	f7ff fc77 	bl	80033ac <mahony_getRoll>
 8003abe:	eef0 7a40 	vmov.f32	s15, s0
 8003ac2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003ac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	dd02      	ble.n	8003ad6 <main+0x626>
 8003ad0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003ad4:	e011      	b.n	8003afa <main+0x64a>
 8003ad6:	f7ff fc69 	bl	80033ac <mahony_getRoll>
 8003ada:	eef0 7a40 	vmov.f32	s15, s0
 8003ade:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8003ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	d502      	bpl.n	8003af2 <main+0x642>
 8003aec:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8003af0:	e003      	b.n	8003afa <main+0x64a>
 8003af2:	f7ff fc5b 	bl	80033ac <mahony_getRoll>
 8003af6:	eef0 7a40 	vmov.f32	s15, s0
 8003afa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b02:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003b06:	f103 0320 	add.w	r3, r3, #32
 8003b0a:	edc3 7a00 	vstr	s15, [r3]
		htim2.Instance->CCR1 = constrain(
 8003b0e:	2319      	movs	r3, #25
 8003b10:	227d      	movs	r2, #125	; 0x7d
 8003b12:	215a      	movs	r1, #90	; 0x5a
 8003b14:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b18:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b1c:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8003b20:	ed94 0a00 	vldr	s0, [r4]
 8003b24:	f7ff fc7e 	bl	8003424 <map>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b7d      	cmp	r3, #125	; 0x7d
 8003b2c:	dc20      	bgt.n	8003b70 <main+0x6c0>
 8003b2e:	2319      	movs	r3, #25
 8003b30:	227d      	movs	r2, #125	; 0x7d
 8003b32:	215a      	movs	r1, #90	; 0x5a
 8003b34:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b38:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b3c:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8003b40:	ed94 0a00 	vldr	s0, [r4]
 8003b44:	f7ff fc6e 	bl	8003424 <map>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b18      	cmp	r3, #24
 8003b4c:	dd0e      	ble.n	8003b6c <main+0x6bc>
 8003b4e:	2319      	movs	r3, #25
 8003b50:	227d      	movs	r2, #125	; 0x7d
 8003b52:	215a      	movs	r1, #90	; 0x5a
 8003b54:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b58:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b5c:	f104 0424 	add.w	r4, r4, #36	; 0x24
 8003b60:	ed94 0a00 	vldr	s0, [r4]
 8003b64:	f7ff fc5e 	bl	8003424 <map>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	e002      	b.n	8003b72 <main+0x6c2>
 8003b6c:	2319      	movs	r3, #25
 8003b6e:	e000      	b.n	8003b72 <main+0x6c2>
 8003b70:	237d      	movs	r3, #125	; 0x7d
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <main+0x72c>)
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6353      	str	r3, [r2, #52]	; 0x34
				map(/*(pitch<15+21 && pitch> -15+21)?pitch:21*/pitch, -90, 90,
						125, 25), 25, 125);
		htim3.Instance->CCR1 = constrain(
 8003b78:	237d      	movs	r3, #125	; 0x7d
 8003b7a:	2219      	movs	r2, #25
 8003b7c:	215a      	movs	r1, #90	; 0x5a
 8003b7e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b82:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b86:	f104 0420 	add.w	r4, r4, #32
 8003b8a:	ed94 0a00 	vldr	s0, [r4]
 8003b8e:	f7ff fc49 	bl	8003424 <map>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b7d      	cmp	r3, #125	; 0x7d
 8003b96:	dc23      	bgt.n	8003be0 <main+0x730>
 8003b98:	237d      	movs	r3, #125	; 0x7d
 8003b9a:	2219      	movs	r2, #25
 8003b9c:	215a      	movs	r1, #90	; 0x5a
 8003b9e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003ba2:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003ba6:	f104 0420 	add.w	r4, r4, #32
 8003baa:	ed94 0a00 	vldr	s0, [r4]
 8003bae:	f7ff fc39 	bl	8003424 <map>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b18      	cmp	r3, #24
 8003bb6:	dd0e      	ble.n	8003bd6 <main+0x726>
 8003bb8:	237d      	movs	r3, #125	; 0x7d
 8003bba:	2219      	movs	r2, #25
 8003bbc:	215a      	movs	r1, #90	; 0x5a
 8003bbe:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003bc2:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003bc6:	f104 0420 	add.w	r4, r4, #32
 8003bca:	ed94 0a00 	vldr	s0, [r4]
 8003bce:	f7ff fc29 	bl	8003424 <map>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	e005      	b.n	8003be2 <main+0x732>
 8003bd6:	2319      	movs	r3, #25
 8003bd8:	e003      	b.n	8003be2 <main+0x732>
 8003bda:	bf00      	nop
 8003bdc:	200004b8 	.word	0x200004b8
 8003be0:	237d      	movs	r3, #125	; 0x7d
 8003be2:	4ad1      	ldr	r2, [pc, #836]	; (8003f28 <main+0xa78>)
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	6353      	str	r3, [r2, #52]	; 0x34
				map(/*(roll<15-23 && roll> -15-23)?roll:-23*/roll, -90, 90, 25,
						125), 25, 125);

		if (HAL_GetTick() - hz_t >= 1000) {
 8003be8:	f001 fd22 	bl	8005630 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003bf2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bfe:	d315      	bcc.n	8003c2c <main+0x77c>
			hz_t = HAL_GetTick();
 8003c00:	f001 fd16 	bl	8005630 <HAL_GetTick>
 8003c04:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003c08:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8003c0c:	6018      	str	r0, [r3, #0]
			log_s_int("HZ", hz);
 8003c0e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003c12:	f5a3 73e3 	sub.w	r3, r3, #454	; 0x1c6
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	48c4      	ldr	r0, [pc, #784]	; (8003f2c <main+0xa7c>)
 8003c1c:	f7fd fece 	bl	80019bc <log_s_int>
			hz = 0;
 8003c20:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003c24:	f5a3 73e3 	sub.w	r3, r3, #454	; 0x1c6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
		}

		if (HAL_GetTick() - last_t >= 100) {
 8003c2c:	f001 fd00 	bl	8005630 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c36:	f103 0308 	add.w	r3, r3, #8
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b63      	cmp	r3, #99	; 0x63
 8003c40:	f67f ad86 	bls.w	8003750 <main+0x2a0>
			last_t = HAL_GetTick();
 8003c44:	f001 fcf4 	bl	8005630 <HAL_GetTick>
 8003c48:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c4c:	f103 0308 	add.w	r3, r3, #8
 8003c50:	6018      	str	r0, [r3, #0]
			BMP180_upd_data();
 8003c52:	f7fd fe47 	bl	80018e4 <BMP180_upd_data>
			nrf_data[0] = (packet >> 8 * 0) & 0xFF;
 8003c56:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c5a:	f103 030c 	add.w	r3, r3, #12
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003c66:	7013      	strb	r3, [r2, #0]
			nrf_data[1] = (packet >> 8 * 1) & 0xFF;
 8003c68:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c6c:	f103 030c 	add.w	r3, r3, #12
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003c7a:	f102 0201 	add.w	r2, r2, #1
 8003c7e:	7013      	strb	r3, [r2, #0]
			nrf_data[2] = (packet >> 8 * 2) & 0xFF;
 8003c80:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c84:	f103 030c 	add.w	r3, r3, #12
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003c92:	f102 0202 	add.w	r2, r2, #2
 8003c96:	7013      	strb	r3, [r2, #0]
			nrf_data[3] = (packet >> 8 * 3) & 0xFF;
 8003c98:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c9c:	f103 030c 	add.w	r3, r3, #12
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	0e1b      	lsrs	r3, r3, #24
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003caa:	f102 0203 	add.w	r2, r2, #3
 8003cae:	7013      	strb	r3, [r2, #0]
			nrf_data[4] = ((uint16_t) (data.bmp180.pressure / 10) >> 8 * 0)
 8003cb0:	4b9f      	ldr	r3, [pc, #636]	; (8003f30 <main+0xa80>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a9f      	ldr	r2, [pc, #636]	; (8003f34 <main+0xa84>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	08db      	lsrs	r3, r3, #3
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003cc2:	f102 0204 	add.w	r2, r2, #4
 8003cc6:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[5] = ((uint16_t) (data.bmp180.pressure / 10) >> 8 * 1)
 8003cc8:	4b99      	ldr	r3, [pc, #612]	; (8003f30 <main+0xa80>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a99      	ldr	r2, [pc, #612]	; (8003f34 <main+0xa84>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	08db      	lsrs	r3, r3, #3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ce0:	f102 0205 	add.w	r2, r2, #5
 8003ce4:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[6] = (data.adxl345.ay >> 8 * 0) & 0xFF;
 8003ce6:	4b92      	ldr	r3, [pc, #584]	; (8003f30 <main+0xa80>)
 8003ce8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003cf2:	f102 0206 	add.w	r2, r2, #6
 8003cf6:	7013      	strb	r3, [r2, #0]
			nrf_data[7] = (data.adxl345.ay >> 8 * 1) & 0xFF;
 8003cf8:	4b8d      	ldr	r3, [pc, #564]	; (8003f30 <main+0xa80>)
 8003cfa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003cfe:	121b      	asrs	r3, r3, #8
 8003d00:	b21b      	sxth	r3, r3
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d08:	f102 0207 	add.w	r2, r2, #7
 8003d0c:	7013      	strb	r3, [r2, #0]
			nrf_data[8] = (data.adxl345.ax >> 8 * 0) & 0xFF;
 8003d0e:	4b88      	ldr	r3, [pc, #544]	; (8003f30 <main+0xa80>)
 8003d10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d1a:	f102 0208 	add.w	r2, r2, #8
 8003d1e:	7013      	strb	r3, [r2, #0]
			nrf_data[9] = (data.adxl345.ax >> 8 * 1) & 0xFF;
 8003d20:	4b83      	ldr	r3, [pc, #524]	; (8003f30 <main+0xa80>)
 8003d22:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d26:	121b      	asrs	r3, r3, #8
 8003d28:	b21b      	sxth	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d30:	f102 0209 	add.w	r2, r2, #9
 8003d34:	7013      	strb	r3, [r2, #0]
			nrf_data[10] = (data.adxl345.az >> 8 * 0) & 0xFF;
 8003d36:	4b7e      	ldr	r3, [pc, #504]	; (8003f30 <main+0xa80>)
 8003d38:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d42:	f102 020a 	add.w	r2, r2, #10
 8003d46:	7013      	strb	r3, [r2, #0]
			nrf_data[11] = (data.adxl345.az >> 8 * 1) & 0xFF;
 8003d48:	4b79      	ldr	r3, [pc, #484]	; (8003f30 <main+0xa80>)
 8003d4a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d4e:	121b      	asrs	r3, r3, #8
 8003d50:	b21b      	sxth	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d58:	f102 020b 	add.w	r2, r2, #11
 8003d5c:	7013      	strb	r3, [r2, #0]
			nrf_data[12] = (data.l3g4200d.gx >> 8 * 0) & 0xFF;
 8003d5e:	4b74      	ldr	r3, [pc, #464]	; (8003f30 <main+0xa80>)
 8003d60:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d6a:	f102 020c 	add.w	r2, r2, #12
 8003d6e:	7013      	strb	r3, [r2, #0]
			nrf_data[13] = (data.l3g4200d.gx >> 8 * 1) & 0xFF;
 8003d70:	4b6f      	ldr	r3, [pc, #444]	; (8003f30 <main+0xa80>)
 8003d72:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003d76:	121b      	asrs	r3, r3, #8
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d80:	f102 020d 	add.w	r2, r2, #13
 8003d84:	7013      	strb	r3, [r2, #0]
			nrf_data[14] = (data.l3g4200d.gy >> 8 * 0) & 0xFF;
 8003d86:	4b6a      	ldr	r3, [pc, #424]	; (8003f30 <main+0xa80>)
 8003d88:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d92:	f102 020e 	add.w	r2, r2, #14
 8003d96:	7013      	strb	r3, [r2, #0]
			nrf_data[15] = (data.l3g4200d.gy >> 8 * 1) & 0xFF;
 8003d98:	4b65      	ldr	r3, [pc, #404]	; (8003f30 <main+0xa80>)
 8003d9a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003d9e:	121b      	asrs	r3, r3, #8
 8003da0:	b21b      	sxth	r3, r3
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003da8:	f102 020f 	add.w	r2, r2, #15
 8003dac:	7013      	strb	r3, [r2, #0]
			nrf_data[16] = (data.l3g4200d.gz >> 8 * 0) & 0xFF;
 8003dae:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <main+0xa80>)
 8003db0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003dba:	f102 0210 	add.w	r2, r2, #16
 8003dbe:	7013      	strb	r3, [r2, #0]
			nrf_data[17] = (data.l3g4200d.gz >> 8 * 1) & 0xFF;
 8003dc0:	4b5b      	ldr	r3, [pc, #364]	; (8003f30 <main+0xa80>)
 8003dc2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003dc6:	121b      	asrs	r3, r3, #8
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003dd0:	f102 0211 	add.w	r2, r2, #17
 8003dd4:	7013      	strb	r3, [r2, #0]
			nrf_data[18] = (data.lsm303dlhc_mag.mx_raw >> 8 * 0) & 0xFF;
 8003dd6:	4b56      	ldr	r3, [pc, #344]	; (8003f30 <main+0xa80>)
 8003dd8:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003de2:	f102 0212 	add.w	r2, r2, #18
 8003de6:	7013      	strb	r3, [r2, #0]
			nrf_data[19] = (data.lsm303dlhc_mag.mx_raw >> 8 * 1) & 0xFF;
 8003de8:	4b51      	ldr	r3, [pc, #324]	; (8003f30 <main+0xa80>)
 8003dea:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003dee:	121b      	asrs	r3, r3, #8
 8003df0:	b21b      	sxth	r3, r3
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003df8:	f102 0213 	add.w	r2, r2, #19
 8003dfc:	7013      	strb	r3, [r2, #0]
			nrf_data[20] = (data.lsm303dlhc_mag.my_raw >> 8 * 0) & 0xFF;
 8003dfe:	4b4c      	ldr	r3, [pc, #304]	; (8003f30 <main+0xa80>)
 8003e00:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e0a:	f102 0214 	add.w	r2, r2, #20
 8003e0e:	7013      	strb	r3, [r2, #0]
			nrf_data[21] = (data.lsm303dlhc_mag.my_raw >> 8 * 1) & 0xFF;
 8003e10:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <main+0xa80>)
 8003e12:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003e16:	121b      	asrs	r3, r3, #8
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e20:	f102 0215 	add.w	r2, r2, #21
 8003e24:	7013      	strb	r3, [r2, #0]
			nrf_data[22] = (data.lsm303dlhc_mag.mz_raw >> 8 * 0) & 0xFF;
 8003e26:	4b42      	ldr	r3, [pc, #264]	; (8003f30 <main+0xa80>)
 8003e28:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e32:	f102 0216 	add.w	r2, r2, #22
 8003e36:	7013      	strb	r3, [r2, #0]
			nrf_data[23] = (data.lsm303dlhc_mag.mz_raw >> 8 * 1) & 0xFF;
 8003e38:	4b3d      	ldr	r3, [pc, #244]	; (8003f30 <main+0xa80>)
 8003e3a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003e3e:	121b      	asrs	r3, r3, #8
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e48:	f102 0217 	add.w	r2, r2, #23
 8003e4c:	7013      	strb	r3, [r2, #0]
			nrf_data[24] = ((int16_t) (mahony_getRoll() * 100) >> 8 * 0) & 0xFF;
 8003e4e:	f7ff faad 	bl	80033ac <mahony_getRoll>
 8003e52:	eef0 7a40 	vmov.f32	s15, s0
 8003e56:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003f38 <main+0xa88>
 8003e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e62:	ee17 3a90 	vmov	r3, s15
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e6e:	f102 0218 	add.w	r2, r2, #24
 8003e72:	7013      	strb	r3, [r2, #0]
			nrf_data[25] = ((int16_t) (mahony_getRoll() * 100) >> 8 * 1) & 0xFF;
 8003e74:	f7ff fa9a 	bl	80033ac <mahony_getRoll>
 8003e78:	eef0 7a40 	vmov.f32	s15, s0
 8003e7c:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f38 <main+0xa88>
 8003e80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e88:	ee17 3a90 	vmov	r3, s15
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	121b      	asrs	r3, r3, #8
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e98:	f102 0219 	add.w	r2, r2, #25
 8003e9c:	7013      	strb	r3, [r2, #0]
			nrf_data[26] = ((int16_t) (mahony_getPitch() * 100) >> 8 * 0)
 8003e9e:	f7ff fa99 	bl	80033d4 <mahony_getPitch>
 8003ea2:	eef0 7a40 	vmov.f32	s15, s0
 8003ea6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003f38 <main+0xa88>
 8003eaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eb2:	ee17 3a90 	vmov	r3, s15
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ebe:	f102 021a 	add.w	r2, r2, #26
 8003ec2:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[27] = ((int16_t) (mahony_getPitch() * 100) >> 8 * 1)
 8003ec4:	f7ff fa86 	bl	80033d4 <mahony_getPitch>
 8003ec8:	eef0 7a40 	vmov.f32	s15, s0
 8003ecc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003f38 <main+0xa88>
 8003ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ed8:	ee17 3a90 	vmov	r3, s15
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	121b      	asrs	r3, r3, #8
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ee8:	f102 021b 	add.w	r2, r2, #27
 8003eec:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[28] = ((int16_t) (mahony_getYaw() * 100) >> 8 * 0) & 0xFF;
 8003eee:	f7ff fa85 	bl	80033fc <mahony_getYaw>
 8003ef2:	eef0 7a40 	vmov.f32	s15, s0
 8003ef6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003f38 <main+0xa88>
 8003efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f02:	ee17 3a90 	vmov	r3, s15
 8003f06:	b21b      	sxth	r3, r3
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f0e:	f102 021c 	add.w	r2, r2, #28
 8003f12:	7013      	strb	r3, [r2, #0]
			nrf_data[29] = ((int16_t) (mahony_getYaw() * 100) >> 8 * 1) & 0xFF;
 8003f14:	f7ff fa72 	bl	80033fc <mahony_getYaw>
 8003f18:	eef0 7a40 	vmov.f32	s15, s0
 8003f1c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8003f38 <main+0xa88>
 8003f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f24:	e00a      	b.n	8003f3c <main+0xa8c>
 8003f26:	bf00      	nop
 8003f28:	20000500 	.word	0x20000500
 8003f2c:	08011da8 	.word	0x08011da8
 8003f30:	20000590 	.word	0x20000590
 8003f34:	cccccccd 	.word	0xcccccccd
 8003f38:	42c80000 	.word	0x42c80000
 8003f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f40:	ee17 3a90 	vmov	r3, s15
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	121b      	asrs	r3, r3, #8
 8003f48:	b21b      	sxth	r3, r3
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f50:	f102 021d 	add.w	r2, r2, #29
 8003f54:	7013      	strb	r3, [r2, #0]
			nrf_data[30] = (data.bmp180.temp >> 8 * 0) & 0xFF;
 8003f56:	4b90      	ldr	r3, [pc, #576]	; (8004198 <main+0xce8>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f60:	f102 021e 	add.w	r2, r2, #30
 8003f64:	7013      	strb	r3, [r2, #0]
			nrf_data[31] = (data.bmp180.temp >> 8 * 1) & 0xFF;
 8003f66:	4b8c      	ldr	r3, [pc, #560]	; (8004198 <main+0xce8>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	121b      	asrs	r3, r3, #8
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f72:	f102 021f 	add.w	r2, r2, #31
 8003f76:	7013      	strb	r3, [r2, #0]
			//uint32_t test_t=HAL_GetTick();
			nrf_send(nrf_data);  //2ms
 8003f78:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fe9b 	bl	8004cb8 <nrf_send>
			//log_s_int("NRF_T",HAL_GetTick()-test_t);

			memset(sdBuff, 0, sizeof(sdBuff));
 8003f82:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003f86:	f103 0310 	add.w	r3, r3, #16
 8003f8a:	3b10      	subs	r3, #16
 8003f8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f00a fa70 	bl	800e478 <memset>
			sprintf(sdBuff,
 8003f98:	f001 fb4a 	bl	8005630 <HAL_GetTick>
 8003f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
					"%ld|%ld|%f|%.1f|%ld|%d|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|\r\n",
					packet, HAL_GetTick(), (float) data.bmp180.height,
 8003f9e:	4b7e      	ldr	r3, [pc, #504]	; (8004198 <main+0xce8>)
 8003fa0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	f7fc fe06 	bl	8000bb8 <__aeabi_d2f>
 8003fac:	4603      	mov	r3, r0
			sprintf(sdBuff,
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc fad2 	bl	8000558 <__aeabi_f2d>
 8003fb4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					((float) data.bmp180.temp) / 10, data.bmp180.pressure,
 8003fb8:	4b77      	ldr	r3, [pc, #476]	; (8004198 <main+0xce8>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003fc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
			sprintf(sdBuff,
 8003fcc:	ee16 0a90 	vmov	r0, s13
 8003fd0:	f7fc fac2 	bl	8000558 <__aeabi_f2d>
 8003fd4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <main+0xce8>)
 8003fda:	681e      	ldr	r6, [r3, #0]
					data.adxl345.ax, data.adxl345.ay, data.adxl345.az,
 8003fdc:	4b6e      	ldr	r3, [pc, #440]	; (8004198 <main+0xce8>)
 8003fde:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
			sprintf(sdBuff,
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
					data.adxl345.ax, data.adxl345.ay, data.adxl345.az,
 8003fe4:	4b6c      	ldr	r3, [pc, #432]	; (8004198 <main+0xce8>)
 8003fe6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sprintf(sdBuff,
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
					data.adxl345.ax, data.adxl345.ay, data.adxl345.az,
 8003fec:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <main+0xce8>)
 8003fee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
			sprintf(sdBuff,
 8003ff2:	623b      	str	r3, [r7, #32]
					data.l3g4200d.gx, data.l3g4200d.gy, data.l3g4200d.gz,
 8003ff4:	4b68      	ldr	r3, [pc, #416]	; (8004198 <main+0xce8>)
 8003ff6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
			sprintf(sdBuff,
 8003ffa:	61fb      	str	r3, [r7, #28]
					data.l3g4200d.gx, data.l3g4200d.gy, data.l3g4200d.gz,
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <main+0xce8>)
 8003ffe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
			sprintf(sdBuff,
 8004002:	61bb      	str	r3, [r7, #24]
					data.l3g4200d.gx, data.l3g4200d.gy, data.l3g4200d.gz,
 8004004:	4b64      	ldr	r3, [pc, #400]	; (8004198 <main+0xce8>)
 8004006:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
			sprintf(sdBuff,
 800400a:	617b      	str	r3, [r7, #20]
					(float) data.lsm303dlhc_mag.mx,
 800400c:	4b62      	ldr	r3, [pc, #392]	; (8004198 <main+0xce8>)
 800400e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	f7fc fdcf 	bl	8000bb8 <__aeabi_d2f>
 800401a:	4603      	mov	r3, r0
			sprintf(sdBuff,
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fa9b 	bl	8000558 <__aeabi_f2d>
 8004022:	e9c7 0102 	strd	r0, r1, [r7, #8]
					(float) data.lsm303dlhc_mag.my,
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <main+0xce8>)
 8004028:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800402c:	4610      	mov	r0, r2
 800402e:	4619      	mov	r1, r3
 8004030:	f7fc fdc2 	bl	8000bb8 <__aeabi_d2f>
 8004034:	4603      	mov	r3, r0
			sprintf(sdBuff,
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fa8e 	bl	8000558 <__aeabi_f2d>
 800403c:	e9c7 0100 	strd	r0, r1, [r7]
					(float) data.lsm303dlhc_mag.mz, mahony_getRoll(),
 8004040:	4b55      	ldr	r3, [pc, #340]	; (8004198 <main+0xce8>)
 8004042:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	f7fc fdb5 	bl	8000bb8 <__aeabi_d2f>
 800404e:	4603      	mov	r3, r0
			sprintf(sdBuff,
 8004050:	4618      	mov	r0, r3
 8004052:	f7fc fa81 	bl	8000558 <__aeabi_f2d>
 8004056:	4682      	mov	sl, r0
 8004058:	468b      	mov	fp, r1
					(float) data.lsm303dlhc_mag.mz, mahony_getRoll(),
 800405a:	f7ff f9a7 	bl	80033ac <mahony_getRoll>
 800405e:	ee10 3a10 	vmov	r3, s0
			sprintf(sdBuff,
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fa78 	bl	8000558 <__aeabi_f2d>
 8004068:	4680      	mov	r8, r0
 800406a:	4689      	mov	r9, r1
					mahony_getPitch(), mahony_getYaw());
 800406c:	f7ff f9b2 	bl	80033d4 <mahony_getPitch>
 8004070:	ee10 3a10 	vmov	r3, s0
			sprintf(sdBuff,
 8004074:	4618      	mov	r0, r3
 8004076:	f7fc fa6f 	bl	8000558 <__aeabi_f2d>
 800407a:	4604      	mov	r4, r0
 800407c:	460d      	mov	r5, r1
					mahony_getPitch(), mahony_getYaw());
 800407e:	f7ff f9bd 	bl	80033fc <mahony_getYaw>
 8004082:	ee10 3a10 	vmov	r3, s0
			sprintf(sdBuff,
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa66 	bl	8000558 <__aeabi_f2d>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	f507 5084 	add.w	r0, r7, #4224	; 0x1080
 8004094:	f100 0010 	add.w	r0, r0, #16
 8004098:	3810      	subs	r0, #16
 800409a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800409e:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 80040a2:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80040a6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80040aa:	ed97 7b00 	vldr	d7, [r7]
 80040ae:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80040b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80040b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	920a      	str	r2, [sp, #40]	; 0x28
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	9209      	str	r2, [sp, #36]	; 0x24
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	9208      	str	r2, [sp, #32]
 80040c6:	6a3a      	ldr	r2, [r7, #32]
 80040c8:	9207      	str	r2, [sp, #28]
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	9206      	str	r2, [sp, #24]
 80040ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040d0:	9205      	str	r2, [sp, #20]
 80040d2:	9604      	str	r6, [sp, #16]
 80040d4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80040d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80040dc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80040e0:	ed8d 7b00 	vstr	d7, [sp]
 80040e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e6:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80040ea:	f102 020c 	add.w	r2, r2, #12
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	492a      	ldr	r1, [pc, #168]	; (800419c <main+0xcec>)
 80040f2:	f00a fe33 	bl	800ed5c <siprintf>
			//log_s_wnl(sdBuff);
			if (f_write(&logFile, sdBuff, strlen(sdBuff), &tempBytes)
 80040f6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80040fa:	f103 0310 	add.w	r3, r3, #16
 80040fe:	3b10      	subs	r3, #16
 8004100:	4618      	mov	r0, r3
 8004102:	f7fc f86d 	bl	80001e0 <strlen>
 8004106:	4602      	mov	r2, r0
 8004108:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800410c:	3b04      	subs	r3, #4
 800410e:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8004112:	f101 0110 	add.w	r1, r1, #16
 8004116:	3910      	subs	r1, #16
 8004118:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800411c:	f009 fcf0 	bl	800db00 <f_write>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d105      	bne.n	8004132 <main+0xc82>
					== FR_OK) {
				f_sync(&logFile);
 8004126:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800412a:	4618      	mov	r0, r3
 800412c:	f009 fe7c 	bl	800de28 <f_sync>
 8004130:	e003      	b.n	800413a <main+0xc8a>
			} else
				HAL_GPIO_TogglePin(GPIOC, LED_RF_Pin);
 8004132:	2104      	movs	r1, #4
 8004134:	481a      	ldr	r0, [pc, #104]	; (80041a0 <main+0xcf0>)
 8004136:	f001 fe2a 	bl	8005d8e <HAL_GPIO_TogglePin>
			/*sprintf((char*) log_chars, "|%c%c|\r\n",(data.adxl345.ax >> 8 * 0) & 0xFF,(data.adxl345.ax >> 8 * 1) & 0xFF);
			 log_s_wnl((const char*) log_chars);*/
			if (HAL_GetTick() > 5000) {
 800413a:	f001 fa79 	bl	8005630 <HAL_GetTick>
 800413e:	4603      	mov	r3, r0
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	f240 8097 	bls.w	8004278 <main+0xdc8>
				log_s_float("height", data.bmp180.height);
 800414a:	4b13      	ldr	r3, [pc, #76]	; (8004198 <main+0xce8>)
 800414c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004150:	eeb0 0a47 	vmov.f32	s0, s14
 8004154:	eef0 0a67 	vmov.f32	s1, s15
 8004158:	4812      	ldr	r0, [pc, #72]	; (80041a4 <main+0xcf4>)
 800415a:	f7fd fc45 	bl	80019e8 <log_s_float>
				max_height = max(data.bmp180.height, max_height);
 800415e:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <main+0xce8>)
 8004160:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004164:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004168:	f103 0304 	add.w	r3, r3, #4
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	f7fc f9f3 	bl	8000558 <__aeabi_f2d>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4620      	mov	r0, r4
 8004178:	4629      	mov	r1, r5
 800417a:	f7fc fcd5 	bl	8000b28 <__aeabi_dcmpgt>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d011      	beq.n	80041a8 <main+0xcf8>
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <main+0xce8>)
 8004186:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f7fc fd13 	bl	8000bb8 <__aeabi_d2f>
 8004192:	4603      	mov	r3, r0
 8004194:	e00d      	b.n	80041b2 <main+0xd02>
 8004196:	bf00      	nop
 8004198:	20000590 	.word	0x20000590
 800419c:	08011dac 	.word	0x08011dac
 80041a0:	40020800 	.word	0x40020800
 80041a4:	08011de8 	.word	0x08011de8
 80041a8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80041ac:	f103 0304 	add.w	r3, r3, #4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80041b6:	f102 0204 	add.w	r2, r2, #4
 80041ba:	6013      	str	r3, [r2, #0]
				log_s_float("m__eight", max_height);
 80041bc:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80041c0:	f103 0304 	add.w	r3, r3, #4
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	f7fc f9c7 	bl	8000558 <__aeabi_f2d>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	ec43 2b10 	vmov	d0, r2, r3
 80041d2:	4832      	ldr	r0, [pc, #200]	; (800429c <main+0xdec>)
 80041d4:	f7fd fc08 	bl	80019e8 <log_s_float>
				if (max_height - data.bmp180.height > 5) {
 80041d8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80041dc:	f103 0304 	add.w	r3, r3, #4
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	f7fc f9b9 	bl	8000558 <__aeabi_f2d>
 80041e6:	4b2e      	ldr	r3, [pc, #184]	; (80042a0 <main+0xdf0>)
 80041e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80041ec:	f7fc f854 	bl	8000298 <__aeabi_dsub>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <main+0xdf4>)
 80041fe:	f7fc fc93 	bl	8000b28 <__aeabi_dcmpgt>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d037      	beq.n	8004278 <main+0xdc8>
					if (max_height_t == 0) {
 8004208:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <main+0xd7c>
						max_height_t = HAL_GetTick();
 8004212:	f001 fa0d 	bl	8005630 <HAL_GetTick>
 8004216:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800421a:	6018      	str	r0, [r3, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800421c:	2201      	movs	r2, #1
 800421e:	2102      	movs	r1, #2
 8004220:	4821      	ldr	r0, [pc, #132]	; (80042a8 <main+0xdf8>)
 8004222:	f001 fd9b 	bl	8005d5c <HAL_GPIO_WritePin>
						log_s("ton----------");
 8004226:	4821      	ldr	r0, [pc, #132]	; (80042ac <main+0xdfc>)
 8004228:	f7fd fb8e 	bl	8001948 <log_s>
					}
					log_s_int("max_height_t",max_height_t);
 800422c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4619      	mov	r1, r3
 8004234:	481e      	ldr	r0, [pc, #120]	; (80042b0 <main+0xe00>)
 8004236:	f7fd fbc1 	bl	80019bc <log_s_int>
					log_s_int("t",HAL_GetTick());
 800423a:	f001 f9f9 	bl	8005630 <HAL_GetTick>
 800423e:	4603      	mov	r3, r0
 8004240:	4619      	mov	r1, r3
 8004242:	481c      	ldr	r0, [pc, #112]	; (80042b4 <main+0xe04>)
 8004244:	f7fd fbba 	bl	80019bc <log_s_int>
					if (HAL_GetTick()-max_height_t  > 5000
 8004248:	f001 f9f2 	bl	8005630 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d90c      	bls.n	8004278 <main+0xdc8>
							&& max_height_t != 0) {
 800425e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <main+0xdc8>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8004268:	2200      	movs	r2, #0
 800426a:	2102      	movs	r1, #2
 800426c:	480e      	ldr	r0, [pc, #56]	; (80042a8 <main+0xdf8>)
 800426e:	f001 fd75 	bl	8005d5c <HAL_GPIO_WritePin>
						log_s("toff-----------");
 8004272:	4811      	ldr	r0, [pc, #68]	; (80042b8 <main+0xe08>)
 8004274:	f7fd fb68 	bl	8001948 <log_s>
					}
				}
			}
			packet++;
 8004278:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800427c:	f103 030c 	add.w	r3, r3, #12
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8004288:	f102 020c 	add.w	r2, r2, #12
 800428c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800428e:	2101      	movs	r1, #1
 8004290:	4805      	ldr	r0, [pc, #20]	; (80042a8 <main+0xdf8>)
 8004292:	f001 fd7c 	bl	8005d8e <HAL_GPIO_TogglePin>
		if (!adxl_check_connection()) {
 8004296:	f7ff ba5b 	b.w	8003750 <main+0x2a0>
 800429a:	bf00      	nop
 800429c:	08011df0 	.word	0x08011df0
 80042a0:	20000590 	.word	0x20000590
 80042a4:	40140000 	.word	0x40140000
 80042a8:	40020800 	.word	0x40020800
 80042ac:	08011dfc 	.word	0x08011dfc
 80042b0:	08011e0c 	.word	0x08011e0c
 80042b4:	08011e1c 	.word	0x08011e1c
 80042b8:	08011e20 	.word	0x08011e20

080042bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b094      	sub	sp, #80	; 0x50
 80042c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80042c2:	f107 0320 	add.w	r3, r7, #32
 80042c6:	2230      	movs	r2, #48	; 0x30
 80042c8:	2100      	movs	r1, #0
 80042ca:	4618      	mov	r0, r3
 80042cc:	f00a f8d4 	bl	800e478 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80042d0:	f107 030c 	add.w	r3, r7, #12
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	60da      	str	r2, [r3, #12]
 80042de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	4b28      	ldr	r3, [pc, #160]	; (8004388 <SystemClock_Config+0xcc>)
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	4a27      	ldr	r2, [pc, #156]	; (8004388 <SystemClock_Config+0xcc>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6413      	str	r3, [r2, #64]	; 0x40
 80042f0:	4b25      	ldr	r3, [pc, #148]	; (8004388 <SystemClock_Config+0xcc>)
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80042fc:	2300      	movs	r3, #0
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <SystemClock_Config+0xd0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004308:	4a20      	ldr	r2, [pc, #128]	; (800438c <SystemClock_Config+0xd0>)
 800430a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800430e:	6013      	str	r3, [r2, #0]
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <SystemClock_Config+0xd0>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800431c:	2302      	movs	r3, #2
 800431e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004320:	2301      	movs	r3, #1
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004324:	2310      	movs	r3, #16
 8004326:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004328:	2302      	movs	r3, #2
 800432a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800432c:	2300      	movs	r3, #0
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004330:	2308      	movs	r3, #8
 8004332:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8004334:	2354      	movs	r3, #84	; 0x54
 8004336:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004338:	2302      	movs	r3, #2
 800433a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800433c:	2304      	movs	r3, #4
 800433e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004340:	f107 0320 	add.w	r3, r7, #32
 8004344:	4618      	mov	r0, r3
 8004346:	f003 f9a1 	bl	800768c <HAL_RCC_OscConfig>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <SystemClock_Config+0x98>
		Error_Handler();
 8004350:	f000 fb58 	bl	8004a04 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004354:	230f      	movs	r3, #15
 8004356:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004358:	2302      	movs	r3, #2
 800435a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004364:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800436a:	f107 030c 	add.w	r3, r7, #12
 800436e:	2102      	movs	r1, #2
 8004370:	4618      	mov	r0, r3
 8004372:	f003 fc03 	bl	8007b7c <HAL_RCC_ClockConfig>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <SystemClock_Config+0xc4>
		Error_Handler();
 800437c:	f000 fb42 	bl	8004a04 <Error_Handler>
	}
}
 8004380:	bf00      	nop
 8004382:	3750      	adds	r7, #80	; 0x50
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	40007000 	.word	0x40007000

08004390 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <MX_I2C1_Init+0x50>)
 8004396:	4a13      	ldr	r2, [pc, #76]	; (80043e4 <MX_I2C1_Init+0x54>)
 8004398:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800439a:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <MX_I2C1_Init+0x50>)
 800439c:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <MX_I2C1_Init+0x58>)
 800439e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80043a6:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043ac:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043b2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80043ba:	4b09      	ldr	r3, [pc, #36]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043c6:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80043cc:	4804      	ldr	r0, [pc, #16]	; (80043e0 <MX_I2C1_Init+0x50>)
 80043ce:	f001 fcf9 	bl	8005dc4 <HAL_I2C_Init>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80043d8:	f000 fb14 	bl	8004a04 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80043dc:	bf00      	nop
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	20000388 	.word	0x20000388
 80043e4:	40005400 	.word	0x40005400
 80043e8:	00061a80 	.word	0x00061a80

080043ec <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 80043f2:	4a0d      	ldr	r2, [pc, #52]	; (8004428 <MX_SDIO_SD_Init+0x3c>)
 80043f4:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80043fc:	4b09      	ldr	r3, [pc, #36]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 8004404:	2200      	movs	r2, #0
 8004406:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 800440a:	2200      	movs	r2, #0
 800440c:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 8004410:	2200      	movs	r2, #0
 8004412:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 14;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <MX_SDIO_SD_Init+0x38>)
 8004416:	220e      	movs	r2, #14
 8004418:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	200003dc 	.word	0x200003dc
 8004428:	40012c00 	.word	0x40012c00

0800442c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <MX_SPI1_Init+0x64>)
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <MX_SPI1_Init+0x68>)
 8004434:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004436:	4b16      	ldr	r3, [pc, #88]	; (8004490 <MX_SPI1_Init+0x64>)
 8004438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800443c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <MX_SPI1_Init+0x64>)
 8004440:	2200      	movs	r2, #0
 8004442:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004444:	4b12      	ldr	r3, [pc, #72]	; (8004490 <MX_SPI1_Init+0x64>)
 8004446:	2200      	movs	r2, #0
 8004448:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <MX_SPI1_Init+0x64>)
 800444c:	2200      	movs	r2, #0
 800444e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004450:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <MX_SPI1_Init+0x64>)
 8004452:	2200      	movs	r2, #0
 8004454:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <MX_SPI1_Init+0x64>)
 8004458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800445e:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <MX_SPI1_Init+0x64>)
 8004460:	2220      	movs	r2, #32
 8004462:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <MX_SPI1_Init+0x64>)
 8004466:	2200      	movs	r2, #0
 8004468:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800446a:	4b09      	ldr	r3, [pc, #36]	; (8004490 <MX_SPI1_Init+0x64>)
 800446c:	2200      	movs	r2, #0
 800446e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <MX_SPI1_Init+0x64>)
 8004472:	2200      	movs	r2, #0
 8004474:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <MX_SPI1_Init+0x64>)
 8004478:	220a      	movs	r2, #10
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800447c:	4804      	ldr	r0, [pc, #16]	; (8004490 <MX_SPI1_Init+0x64>)
 800447e:	f004 fd23 	bl	8008ec8 <HAL_SPI_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <MX_SPI1_Init+0x60>
		Error_Handler();
 8004488:	f000 fabc 	bl	8004a04 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800448c:	bf00      	nop
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000460 	.word	0x20000460
 8004494:	40013000 	.word	0x40013000

08004498 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004498:	b580      	push	{r7, lr}
 800449a:	b08e      	sub	sp, #56	; 0x38
 800449c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800449e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044ac:	f107 0320 	add.w	r3, r7, #32
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	609a      	str	r2, [r3, #8]
 80044c0:	60da      	str	r2, [r3, #12]
 80044c2:	611a      	str	r2, [r3, #16]
 80044c4:	615a      	str	r2, [r3, #20]
 80044c6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80044c8:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80044ce:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1680 - 1;
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044d2:	f240 628f 	movw	r2, #1679	; 0x68f
 80044d6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 80044de:	4b28      	ldr	r3, [pc, #160]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044e4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044e6:	4b26      	ldr	r3, [pc, #152]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80044f2:	4823      	ldr	r0, [pc, #140]	; (8004580 <MX_TIM2_Init+0xe8>)
 80044f4:	f005 fa90 	bl	8009a18 <HAL_TIM_Base_Init>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <MX_TIM2_Init+0x6a>
		Error_Handler();
 80044fe:	f000 fa81 	bl	8004a04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800450c:	4619      	mov	r1, r3
 800450e:	481c      	ldr	r0, [pc, #112]	; (8004580 <MX_TIM2_Init+0xe8>)
 8004510:	f005 fc9c 	bl	8009e4c <HAL_TIM_ConfigClockSource>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM2_Init+0x86>
		Error_Handler();
 800451a:	f000 fa73 	bl	8004a04 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800451e:	4818      	ldr	r0, [pc, #96]	; (8004580 <MX_TIM2_Init+0xe8>)
 8004520:	f005 fac9 	bl	8009ab6 <HAL_TIM_PWM_Init>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <MX_TIM2_Init+0x96>
		Error_Handler();
 800452a:	f000 fa6b 	bl	8004a04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8004536:	f107 0320 	add.w	r3, r7, #32
 800453a:	4619      	mov	r1, r3
 800453c:	4810      	ldr	r0, [pc, #64]	; (8004580 <MX_TIM2_Init+0xe8>)
 800453e:	f006 f819 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8004548:	f000 fa5c 	bl	8004a04 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800454c:	2360      	movs	r3, #96	; 0x60
 800454e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	2200      	movs	r2, #0
 8004560:	4619      	mov	r1, r3
 8004562:	4807      	ldr	r0, [pc, #28]	; (8004580 <MX_TIM2_Init+0xe8>)
 8004564:	f005 fbb0 	bl	8009cc8 <HAL_TIM_PWM_ConfigChannel>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 800456e:	f000 fa49 	bl	8004a04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8004572:	4803      	ldr	r0, [pc, #12]	; (8004580 <MX_TIM2_Init+0xe8>)
 8004574:	f000 fe22 	bl	80051bc <HAL_TIM_MspPostInit>

}
 8004578:	bf00      	nop
 800457a:	3738      	adds	r7, #56	; 0x38
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200004b8 	.word	0x200004b8

08004584 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800458a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800458e:	2200      	movs	r2, #0
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	605a      	str	r2, [r3, #4]
 8004594:	609a      	str	r2, [r3, #8]
 8004596:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004598:	f107 0320 	add.w	r3, r7, #32
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	611a      	str	r2, [r3, #16]
 80045b0:	615a      	str	r2, [r3, #20]
 80045b2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80045b4:	4b2d      	ldr	r3, [pc, #180]	; (800466c <MX_TIM3_Init+0xe8>)
 80045b6:	4a2e      	ldr	r2, [pc, #184]	; (8004670 <MX_TIM3_Init+0xec>)
 80045b8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1680 - 1;
 80045ba:	4b2c      	ldr	r3, [pc, #176]	; (800466c <MX_TIM3_Init+0xe8>)
 80045bc:	f240 628f 	movw	r2, #1679	; 0x68f
 80045c0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c2:	4b2a      	ldr	r3, [pc, #168]	; (800466c <MX_TIM3_Init+0xe8>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 80045c8:	4b28      	ldr	r3, [pc, #160]	; (800466c <MX_TIM3_Init+0xe8>)
 80045ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045ce:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d0:	4b26      	ldr	r3, [pc, #152]	; (800466c <MX_TIM3_Init+0xe8>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045d6:	4b25      	ldr	r3, [pc, #148]	; (800466c <MX_TIM3_Init+0xe8>)
 80045d8:	2200      	movs	r2, #0
 80045da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80045dc:	4823      	ldr	r0, [pc, #140]	; (800466c <MX_TIM3_Init+0xe8>)
 80045de:	f005 fa1b 	bl	8009a18 <HAL_TIM_Base_Init>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <MX_TIM3_Init+0x68>
		Error_Handler();
 80045e8:	f000 fa0c 	bl	8004a04 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80045f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045f6:	4619      	mov	r1, r3
 80045f8:	481c      	ldr	r0, [pc, #112]	; (800466c <MX_TIM3_Init+0xe8>)
 80045fa:	f005 fc27 	bl	8009e4c <HAL_TIM_ConfigClockSource>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <MX_TIM3_Init+0x84>
		Error_Handler();
 8004604:	f000 f9fe 	bl	8004a04 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004608:	4818      	ldr	r0, [pc, #96]	; (800466c <MX_TIM3_Init+0xe8>)
 800460a:	f005 fa54 	bl	8009ab6 <HAL_TIM_PWM_Init>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM3_Init+0x94>
		Error_Handler();
 8004614:	f000 f9f6 	bl	8004a04 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004618:	2300      	movs	r3, #0
 800461a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800461c:	2300      	movs	r3, #0
 800461e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004620:	f107 0320 	add.w	r3, r7, #32
 8004624:	4619      	mov	r1, r3
 8004626:	4811      	ldr	r0, [pc, #68]	; (800466c <MX_TIM3_Init+0xe8>)
 8004628:	f005 ffa4 	bl	800a574 <HAL_TIMEx_MasterConfigSynchronization>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8004632:	f000 f9e7 	bl	8004a04 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004636:	2360      	movs	r3, #96	; 0x60
 8004638:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8004646:	1d3b      	adds	r3, r7, #4
 8004648:	2200      	movs	r2, #0
 800464a:	4619      	mov	r1, r3
 800464c:	4807      	ldr	r0, [pc, #28]	; (800466c <MX_TIM3_Init+0xe8>)
 800464e:	f005 fb3b 	bl	8009cc8 <HAL_TIM_PWM_ConfigChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8004658:	f000 f9d4 	bl	8004a04 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800465c:	4803      	ldr	r0, [pc, #12]	; (800466c <MX_TIM3_Init+0xe8>)
 800465e:	f000 fdad 	bl	80051bc <HAL_TIM_MspPostInit>

}
 8004662:	bf00      	nop
 8004664:	3738      	adds	r7, #56	; 0x38
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000500 	.word	0x20000500
 8004670:	40000400 	.word	0x40000400

08004674 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004678:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <MX_USART1_UART_Init+0x50>)
 800467c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800467e:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 8004680:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004684:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004686:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 8004688:	2200      	movs	r2, #0
 800468a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 800468e:	2200      	movs	r2, #0
 8004690:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 8004694:	2200      	movs	r2, #0
 8004696:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004698:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 800469a:	220c      	movs	r2, #12
 800469c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80046aa:	4805      	ldr	r0, [pc, #20]	; (80046c0 <MX_USART1_UART_Init+0x4c>)
 80046ac:	f005 ffd0 	bl	800a650 <HAL_UART_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80046b6:	f000 f9a5 	bl	8004a04 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000548 	.word	0x20000548
 80046c4:	40011000 	.word	0x40011000

080046c8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	605a      	str	r2, [r3, #4]
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	60da      	str	r2, [r3, #12]
 80046dc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
 80046e2:	4b3d      	ldr	r3, [pc, #244]	; (80047d8 <MX_GPIO_Init+0x110>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	4a3c      	ldr	r2, [pc, #240]	; (80047d8 <MX_GPIO_Init+0x110>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6313      	str	r3, [r2, #48]	; 0x30
 80046ee:	4b3a      	ldr	r3, [pc, #232]	; (80047d8 <MX_GPIO_Init+0x110>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
 80046fe:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	4a35      	ldr	r2, [pc, #212]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004708:	6313      	str	r3, [r2, #48]	; 0x30
 800470a:	4b33      	ldr	r3, [pc, #204]	; (80047d8 <MX_GPIO_Init+0x110>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <MX_GPIO_Init+0x110>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	4a2e      	ldr	r2, [pc, #184]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6313      	str	r3, [r2, #48]	; 0x30
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004732:	2300      	movs	r3, #0
 8004734:	607b      	str	r3, [r7, #4]
 8004736:	4b28      	ldr	r3, [pc, #160]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a27      	ldr	r2, [pc, #156]	; (80047d8 <MX_GPIO_Init+0x110>)
 800473c:	f043 0302 	orr.w	r3, r3, #2
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
 8004742:	4b25      	ldr	r3, [pc, #148]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	607b      	str	r3, [r7, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	603b      	str	r3, [r7, #0]
 8004752:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a20      	ldr	r2, [pc, #128]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b1e      	ldr	r3, [pc, #120]	; (80047d8 <MX_GPIO_Init+0x110>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_MCU_Pin | GPIO_PIN_1 | LED_RF_Pin | GPIO_PIN_4,
 800476a:	2200      	movs	r2, #0
 800476c:	2117      	movs	r1, #23
 800476e:	481b      	ldr	r0, [pc, #108]	; (80047dc <MX_GPIO_Init+0x114>)
 8004770:	f001 faf4 	bl	8005d5c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004774:	2200      	movs	r2, #0
 8004776:	2110      	movs	r1, #16
 8004778:	4819      	ldr	r0, [pc, #100]	; (80047e0 <MX_GPIO_Init+0x118>)
 800477a:	f001 faef 	bl	8005d5c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_MCU_Pin PC1 LED_RF_Pin PC4 */
	GPIO_InitStruct.Pin = LED_MCU_Pin | GPIO_PIN_1 | LED_RF_Pin | GPIO_PIN_4;
 800477e:	2317      	movs	r3, #23
 8004780:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004782:	2301      	movs	r3, #1
 8004784:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478a:	2300      	movs	r3, #0
 800478c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800478e:	f107 0314 	add.w	r3, r7, #20
 8004792:	4619      	mov	r1, r3
 8004794:	4811      	ldr	r0, [pc, #68]	; (80047dc <MX_GPIO_Init+0x114>)
 8004796:	f001 f861 	bl	800585c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 800479a:	2310      	movs	r3, #16
 800479c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a6:	2300      	movs	r3, #0
 80047a8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	f107 0314 	add.w	r3, r7, #20
 80047ae:	4619      	mov	r1, r3
 80047b0:	480b      	ldr	r0, [pc, #44]	; (80047e0 <MX_GPIO_Init+0x118>)
 80047b2:	f001 f853 	bl	800585c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDIO_CD_Pin IRQ_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin | IRQ_Pin;
 80047b6:	f240 4304 	movw	r3, #1028	; 0x404
 80047ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	4619      	mov	r1, r3
 80047ca:	4806      	ldr	r0, [pc, #24]	; (80047e4 <MX_GPIO_Init+0x11c>)
 80047cc:	f001 f846 	bl	800585c <HAL_GPIO_Init>
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);*/
	/* USER CODE END MX_GPIO_Init_2 */
}
 80047d0:	bf00      	nop
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40020800 	.word	0x40020800
 80047e0:	40020000 	.word	0x40020000
 80047e4:	40020400 	.word	0x40020400

080047e8 <blink_stmled>:

/* USER CODE BEGIN 4 */
void blink_stmled() {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80047ec:	2101      	movs	r1, #1
 80047ee:	4806      	ldr	r0, [pc, #24]	; (8004808 <blink_stmled+0x20>)
 80047f0:	f001 facd 	bl	8005d8e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80047f4:	2064      	movs	r0, #100	; 0x64
 80047f6:	f000 ff27 	bl	8005648 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 80047fa:	2101      	movs	r1, #1
 80047fc:	4802      	ldr	r0, [pc, #8]	; (8004808 <blink_stmled+0x20>)
 80047fe:	f001 fac6 	bl	8005d8e <HAL_GPIO_TogglePin>
}
 8004802:	bf00      	nop
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40020800 	.word	0x40020800

0800480c <blink_rfled>:

void blink_rfled(uint8_t count) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < count; i++) {
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e010      	b.n	800483e <blink_rfled+0x32>
		HAL_GPIO_TogglePin(GPIOC, LED_RF_Pin);
 800481c:	2104      	movs	r1, #4
 800481e:	480c      	ldr	r0, [pc, #48]	; (8004850 <blink_rfled+0x44>)
 8004820:	f001 fab5 	bl	8005d8e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004824:	2064      	movs	r0, #100	; 0x64
 8004826:	f000 ff0f 	bl	8005648 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_RF_Pin);
 800482a:	2104      	movs	r1, #4
 800482c:	4808      	ldr	r0, [pc, #32]	; (8004850 <blink_rfled+0x44>)
 800482e:	f001 faae 	bl	8005d8e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004832:	2064      	movs	r0, #100	; 0x64
 8004834:	f000 ff08 	bl	8005648 <HAL_Delay>
	for (uint8_t i = 0; i < count; i++) {
 8004838:	7bfb      	ldrb	r3, [r7, #15]
 800483a:	3301      	adds	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	7bfa      	ldrb	r2, [r7, #15]
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3ea      	bcc.n	800481c <blink_rfled+0x10>
	}
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	40020800 	.word	0x40020800

08004854 <wait_for_gpio_state_timeout>:

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin,
		GPIO_PinState state, uint32_t timeout) {
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607b      	str	r3, [r7, #4]
 800485e:	460b      	mov	r3, r1
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	4613      	mov	r3, r2
 8004864:	727b      	strb	r3, [r7, #9]
	uint32_t Tickstart = HAL_GetTick();
 8004866:	f000 fee3 	bl	8005630 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]
	uint8_t ret = 1;
 800486c:	2301      	movs	r3, #1
 800486e:	75fb      	strb	r3, [r7, #23]

	for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8004870:	e011      	b.n	8004896 <wait_for_gpio_state_timeout+0x42>
			{
		if (timeout != HAL_MAX_DELAY) // Check for the timeout
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004878:	d00c      	beq.n	8004894 <wait_for_gpio_state_timeout+0x40>
		{
			if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <wait_for_gpio_state_timeout+0x3c>
 8004880:	f000 fed6 	bl	8005630 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d201      	bcs.n	8004894 <wait_for_gpio_state_timeout+0x40>
				ret = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	75fb      	strb	r3, [r7, #23]
		}

		asm("nop");
 8004894:	bf00      	nop
	for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8004896:	897b      	ldrh	r3, [r7, #10]
 8004898:	4619      	mov	r1, r3
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f001 fa46 	bl	8005d2c <HAL_GPIO_ReadPin>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	7a7b      	ldrb	r3, [r7, #9]
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d002      	beq.n	80048b0 <wait_for_gpio_state_timeout+0x5c>
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d0e0      	beq.n	8004872 <wait_for_gpio_state_timeout+0x1e>
	}
	return ret;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <I2C_ClearBusyFlagErratum>:
static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b088      	sub	sp, #32
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	/**I2C1 GPIO Configuration
	 PB6     ------> I2C1_SCL
	 PB7     ------> I2C1_SDA
	 */
	// 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet
	GPIO_InitTypeDef GPIO_InitStructure = { 0 };
 80048c6:	f107 030c 	add.w	r3, r7, #12
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	611a      	str	r2, [r3, #16]

	// 1. Clear PE bit.
	CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0201 	bic.w	r2, r2, #1
 80048e4:	601a      	str	r2, [r3, #0]

	//  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
	HAL_I2C_DeInit(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f001 fbb0 	bl	800604c <HAL_I2C_DeInit>

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80048ec:	2311      	movs	r3, #17
 80048ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]

	GPIO_InitStructure.Pin = GPIO_PIN_6; // SCL // если пин другой, то укажите нужный
 80048f4:	2340      	movs	r3, #64	; 0x40
 80048f6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4619      	mov	r1, r3
 80048fe:	4840      	ldr	r0, [pc, #256]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004900:	f000 ffac 	bl	800585c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_7; // SDA
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	4619      	mov	r1, r3
 800490e:	483c      	ldr	r0, [pc, #240]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004910:	f000 ffa4 	bl	800585c <HAL_GPIO_Init>

	// 3. Check SCL and SDA High level in GPIOx_IDR.
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004914:	2201      	movs	r2, #1
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	4839      	ldr	r0, [pc, #228]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 800491a:	f001 fa1f 	bl	8005d5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800491e:	2201      	movs	r2, #1
 8004920:	2140      	movs	r1, #64	; 0x40
 8004922:	4837      	ldr	r0, [pc, #220]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004924:	f001 fa1a 	bl	8005d5c <HAL_GPIO_WritePin>

	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_6, GPIO_PIN_SET, timeout);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	2201      	movs	r2, #1
 800492c:	2140      	movs	r1, #64	; 0x40
 800492e:	4834      	ldr	r0, [pc, #208]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004930:	f7ff ff90 	bl	8004854 <wait_for_gpio_state_timeout>
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_7, GPIO_PIN_SET, timeout);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	4831      	ldr	r0, [pc, #196]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 800493c:	f7ff ff8a 	bl	8004854 <wait_for_gpio_state_timeout>

	// 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004940:	2200      	movs	r2, #0
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	482e      	ldr	r0, [pc, #184]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004946:	f001 fa09 	bl	8005d5c <HAL_GPIO_WritePin>

	// 5. Check SDA Low level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET, timeout);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	482b      	ldr	r0, [pc, #172]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004952:	f7ff ff7f 	bl	8004854 <wait_for_gpio_state_timeout>

	// 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004956:	2200      	movs	r2, #0
 8004958:	2140      	movs	r1, #64	; 0x40
 800495a:	4829      	ldr	r0, [pc, #164]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 800495c:	f001 f9fe 	bl	8005d5c <HAL_GPIO_WritePin>

	// 7. Check SCL Low level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET, timeout);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	2140      	movs	r1, #64	; 0x40
 8004966:	4826      	ldr	r0, [pc, #152]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004968:	f7ff ff74 	bl	8004854 <wait_for_gpio_state_timeout>

	// 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800496c:	2201      	movs	r2, #1
 800496e:	2140      	movs	r1, #64	; 0x40
 8004970:	4823      	ldr	r0, [pc, #140]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004972:	f001 f9f3 	bl	8005d5c <HAL_GPIO_WritePin>

	// 9. Check SCL High level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_6, GPIO_PIN_SET, timeout);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	2140      	movs	r1, #64	; 0x40
 800497c:	4820      	ldr	r0, [pc, #128]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 800497e:	f7ff ff69 	bl	8004854 <wait_for_gpio_state_timeout>

	// 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004982:	2201      	movs	r2, #1
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	481e      	ldr	r0, [pc, #120]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004988:	f001 f9e8 	bl	8005d5c <HAL_GPIO_WritePin>

	// 11. Check SDA High level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_7, GPIO_PIN_SET, timeout);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2201      	movs	r2, #1
 8004990:	2180      	movs	r1, #128	; 0x80
 8004992:	481b      	ldr	r0, [pc, #108]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 8004994:	f7ff ff5e 	bl	8004854 <wait_for_gpio_state_timeout>

	// 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
	GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8004998:	2312      	movs	r3, #18
 800499a:	613b      	str	r3, [r7, #16]
	//GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

	GPIO_InitStructure.Pin = GPIO_PIN_6;
 800499c:	2340      	movs	r3, #64	; 0x40
 800499e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4619      	mov	r1, r3
 80049a6:	4816      	ldr	r0, [pc, #88]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 80049a8:	f000 ff58 	bl	800585c <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_7;
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80049b0:	f107 030c 	add.w	r3, r7, #12
 80049b4:	4619      	mov	r1, r3
 80049b6:	4812      	ldr	r0, [pc, #72]	; (8004a00 <I2C_ClearBusyFlagErratum+0x144>)
 80049b8:	f000 ff50 	bl	800585c <HAL_GPIO_Init>

	// 13. Set SWRST bit in I2Cx_CR1 register.
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ca:	601a      	str	r2, [r3, #0]
	asm("nop");
 80049cc:	bf00      	nop

	/* 14. Clear SWRST bit in I2Cx_CR1 register. */
	CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049dc:	601a      	str	r2, [r3, #0]
	asm("nop");
 80049de:	bf00      	nop

	/* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
	asm("nop");
 80049f0:	bf00      	nop

	// Call initialization function.
	HAL_I2C_Init(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f001 f9e6 	bl	8005dc4 <HAL_I2C_Init>
}
 80049f8:	bf00      	nop
 80049fa:	3720      	adds	r7, #32
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40020400 	.word	0x40020400

08004a04 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a08:	b672      	cpsid	i
}
 8004a0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004a0c:	e7fe      	b.n	8004a0c <Error_Handler+0x8>
	...

08004a10 <DelayMicro>:
#ifndef INC_NRF24L01_H_
#define INC_NRF24L01_H_
#include "stm32f4xx_hal.h"
#include "debug.h"

__STATIC_INLINE void DelayMicro(__IO uint32_t micros) {
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <DelayMicro+0x38>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <DelayMicro+0x3c>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	0ddb      	lsrs	r3, r3, #23
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--)
 8004a2c:	bf00      	nop
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1fa      	bne.n	8004a2e <DelayMicro+0x1e>
		;
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000018 	.word	0x20000018
 8004a4c:	ee9bfab5 	.word	0xee9bfab5

08004a50 <nrf_init>:
#define CSN(x) HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, (x)?GPIO_PIN_SET:GPIO_PIN_RESET);
#define IRQ HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin)

uint8_t TX_ADDRESS[5] = { 0x73, 0x70, 0x72, 0x64, 0x67 };
uint8_t transmit_len = 1;
void nrf_init(SPI_HandleTypeDef *spi) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	_nrf_spi = spi;
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <nrf_init+0xbc>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6013      	str	r3, [r2, #0]
	nrf_write_reg(NRF_REG_CONFIG, 0b01011010);
 8004a5e:	215a      	movs	r1, #90	; 0x5a
 8004a60:	2000      	movs	r0, #0
 8004a62:	f000 f9b3 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_EN_AA, 0b00000000);
 8004a66:	2100      	movs	r1, #0
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f000 f9af 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_EN_RXADDR, 0b00000011);
 8004a6e:	2103      	movs	r1, #3
 8004a70:	2002      	movs	r0, #2
 8004a72:	f000 f9ab 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_SETUP_AW, 0b00000011); // 5 byte
 8004a76:	2103      	movs	r1, #3
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f000 f9a7 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_SETUP_RETR, 0b00000000); //  4ms 15 t
 8004a7e:	2100      	movs	r1, #0
 8004a80:	2004      	movs	r0, #4
 8004a82:	f000 f9a3 	bl	8004dcc <nrf_write_reg>
	nrf_toggle_activate();
 8004a86:	f000 f845 	bl	8004b14 <nrf_toggle_activate>
	nrf_write_reg(NRF_REG_RF_CH, 0x05); // frequency
 8004a8a:	2105      	movs	r1, #5
 8004a8c:	2005      	movs	r0, #5
 8004a8e:	f000 f99d 	bl	8004dcc <nrf_write_reg>
	//--------------------------------76543210
	nrf_write_reg(NRF_REG_RF_SETUP, 0b00100110);
 8004a92:	2126      	movs	r1, #38	; 0x26
 8004a94:	2006      	movs	r0, #6
 8004a96:	f000 f999 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_STATUS, 0b01110000);
 8004a9a:	2170      	movs	r1, #112	; 0x70
 8004a9c:	2007      	movs	r0, #7
 8004a9e:	f000 f995 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P0, 0b00100000);
 8004aa2:	2120      	movs	r1, #32
 8004aa4:	2011      	movs	r0, #17
 8004aa6:	f000 f991 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P1, 0b00000000);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	2012      	movs	r0, #18
 8004aae:	f000 f98d 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P2, 0b00000000);
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	2013      	movs	r0, #19
 8004ab6:	f000 f989 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P3, 0b00000000);
 8004aba:	2100      	movs	r1, #0
 8004abc:	2014      	movs	r0, #20
 8004abe:	f000 f985 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P4, 0b00000000);
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	2015      	movs	r0, #21
 8004ac6:	f000 f981 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P5, 0b00000000);
 8004aca:	2100      	movs	r1, #0
 8004acc:	2016      	movs	r0, #22
 8004ace:	f000 f97d 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_FIFO_STATUS, 0b00000000);
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2017      	movs	r0, #23
 8004ad6:	f000 f979 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_DYNPD, 0b00000000);
 8004ada:	2100      	movs	r1, #0
 8004adc:	201c      	movs	r0, #28
 8004ade:	f000 f975 	bl	8004dcc <nrf_write_reg>
	nrf_write_reg(NRF_REG_FEATURE, 0b00000000);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	201d      	movs	r0, #29
 8004ae6:	f000 f971 	bl	8004dcc <nrf_write_reg>

	nrf_write_buf(NRF_REG_TX_ADDR, TX_ADDRESS, 5);
 8004aea:	2205      	movs	r2, #5
 8004aec:	4908      	ldr	r1, [pc, #32]	; (8004b10 <nrf_init+0xc0>)
 8004aee:	2010      	movs	r0, #16
 8004af0:	f000 f99c 	bl	8004e2c <nrf_write_buf>
	nrf_write_buf(NRF_REG_RX_ADDR_P0, TX_ADDRESS, 5);
 8004af4:	2205      	movs	r2, #5
 8004af6:	4906      	ldr	r1, [pc, #24]	; (8004b10 <nrf_init+0xc0>)
 8004af8:	200a      	movs	r0, #10
 8004afa:	f000 f997 	bl	8004e2c <nrf_write_buf>
	nrf_rx_mode();
 8004afe:	f000 f837 	bl	8004b70 <nrf_rx_mode>
	 uint8_t buf1[5];
	 NRF24_Read_Buf(0x10,buf1,5);
	 sprintf(str1,"TX_ADDR: 0x%x, 0x%x, 0x%x, 0x%x, 0x%x" ,buf1[0],buf1[1],buf1[2],buf1[3],buf1[4]);
	 log_s(str1);*/

}
 8004b02:	bf00      	nop
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	200005d8 	.word	0x200005d8
 8004b10:	20000010 	.word	0x20000010

08004b14 <nrf_toggle_activate>:
void nrf_toggle_activate(void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
	dt[0] = NRF_CMD_ACTIVATE;
 8004b18:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <nrf_toggle_activate+0x50>)
 8004b1a:	2250      	movs	r2, #80	; 0x50
 8004b1c:	701a      	strb	r2, [r3, #0]
	CSN(0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2110      	movs	r1, #16
 8004b22:	4811      	ldr	r0, [pc, #68]	; (8004b68 <nrf_toggle_activate+0x54>)
 8004b24:	f001 f91a 	bl	8005d5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, dt, 1, 1000);
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <nrf_toggle_activate+0x58>)
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b30:	2201      	movs	r2, #1
 8004b32:	490c      	ldr	r1, [pc, #48]	; (8004b64 <nrf_toggle_activate+0x50>)
 8004b34:	f004 fa51 	bl	8008fda <HAL_SPI_Transmit>
	DelayMicro(1);
 8004b38:	2001      	movs	r0, #1
 8004b3a:	f7ff ff69 	bl	8004a10 <DelayMicro>
	dt[0] = 0x73;
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <nrf_toggle_activate+0x50>)
 8004b40:	2273      	movs	r2, #115	; 0x73
 8004b42:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(_nrf_spi, dt, 1, 1000);
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <nrf_toggle_activate+0x58>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4905      	ldr	r1, [pc, #20]	; (8004b64 <nrf_toggle_activate+0x50>)
 8004b50:	f004 fa43 	bl	8008fda <HAL_SPI_Transmit>
	CSN(1);
 8004b54:	2201      	movs	r2, #1
 8004b56:	2110      	movs	r1, #16
 8004b58:	4803      	ldr	r0, [pc, #12]	; (8004b68 <nrf_toggle_activate+0x54>)
 8004b5a:	f001 f8ff 	bl	8005d5c <HAL_GPIO_WritePin>
}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200005dc 	.word	0x200005dc
 8004b68:	40020000 	.word	0x40020000
 8004b6c:	200005d8 	.word	0x200005d8

08004b70 <nrf_rx_mode>:
void nrf_rx_mode(void) {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
	regval = 0;
 8004b74:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <nrf_rx_mode+0x50>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
	regval = nrf_read_reg(NRF_REG_CONFIG);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f000 f8ec 	bl	8004d58 <nrf_read_reg>
 8004b80:	4603      	mov	r3, r0
 8004b82:	461a      	mov	r2, r3
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <nrf_rx_mode+0x50>)
 8004b86:	701a      	strb	r2, [r3, #0]
	regval |= (1 << NRF_BIT_PWR_UP) | (1 << NRF_BIT_PRIM_RX);
 8004b88:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <nrf_rx_mode+0x50>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f043 0303 	orr.w	r3, r3, #3
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <nrf_rx_mode+0x50>)
 8004b94:	701a      	strb	r2, [r3, #0]
	nrf_write_reg(NRF_REG_CONFIG, regval);
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <nrf_rx_mode+0x50>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f000 f915 	bl	8004dcc <nrf_write_reg>
	CE(1);
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2110      	movs	r1, #16
 8004ba6:	4807      	ldr	r0, [pc, #28]	; (8004bc4 <nrf_rx_mode+0x54>)
 8004ba8:	f001 f8d8 	bl	8005d5c <HAL_GPIO_WritePin>
	DelayMicro(150);
 8004bac:	2096      	movs	r0, #150	; 0x96
 8004bae:	f7ff ff2f 	bl	8004a10 <DelayMicro>
	nrf_flush_rx();
 8004bb2:	f000 f82b 	bl	8004c0c <nrf_flush_rx>
	nrf_flush_tx();
 8004bb6:	f000 f807 	bl	8004bc8 <nrf_flush_tx>
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	200005dd 	.word	0x200005dd
 8004bc4:	40020800 	.word	0x40020800

08004bc8 <nrf_flush_tx>:
void nrf_flush_tx() {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
	dt[0] = NRF_CMD_FLUSH_TX;
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <nrf_flush_tx+0x38>)
 8004bce:	22e1      	movs	r2, #225	; 0xe1
 8004bd0:	701a      	strb	r2, [r3, #0]
	CSN(0);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2110      	movs	r1, #16
 8004bd6:	480b      	ldr	r0, [pc, #44]	; (8004c04 <nrf_flush_tx+0x3c>)
 8004bd8:	f001 f8c0 	bl	8005d5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &dt, 1, 1000);
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <nrf_flush_tx+0x40>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004be4:	2201      	movs	r2, #1
 8004be6:	4906      	ldr	r1, [pc, #24]	; (8004c00 <nrf_flush_tx+0x38>)
 8004be8:	f004 f9f7 	bl	8008fda <HAL_SPI_Transmit>
	DelayMicro(1);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7ff ff0f 	bl	8004a10 <DelayMicro>
	CSN(1);
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2110      	movs	r1, #16
 8004bf6:	4803      	ldr	r0, [pc, #12]	; (8004c04 <nrf_flush_tx+0x3c>)
 8004bf8:	f001 f8b0 	bl	8005d5c <HAL_GPIO_WritePin>
}
 8004bfc:	bf00      	nop
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	200005dc 	.word	0x200005dc
 8004c04:	40020000 	.word	0x40020000
 8004c08:	200005d8 	.word	0x200005d8

08004c0c <nrf_flush_rx>:
void nrf_flush_rx() {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	dt[0] = NRF_CMD_FLUSH_RX;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <nrf_flush_rx+0x38>)
 8004c12:	22e2      	movs	r2, #226	; 0xe2
 8004c14:	701a      	strb	r2, [r3, #0]
	CSN(0);
 8004c16:	2200      	movs	r2, #0
 8004c18:	2110      	movs	r1, #16
 8004c1a:	480b      	ldr	r0, [pc, #44]	; (8004c48 <nrf_flush_rx+0x3c>)
 8004c1c:	f001 f89e 	bl	8005d5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &dt, 1, 1000);
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <nrf_flush_rx+0x40>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4906      	ldr	r1, [pc, #24]	; (8004c44 <nrf_flush_rx+0x38>)
 8004c2c:	f004 f9d5 	bl	8008fda <HAL_SPI_Transmit>
	DelayMicro(1);
 8004c30:	2001      	movs	r0, #1
 8004c32:	f7ff feed 	bl	8004a10 <DelayMicro>
	CSN(1);
 8004c36:	2201      	movs	r2, #1
 8004c38:	2110      	movs	r1, #16
 8004c3a:	4803      	ldr	r0, [pc, #12]	; (8004c48 <nrf_flush_rx+0x3c>)
 8004c3c:	f001 f88e 	bl	8005d5c <HAL_GPIO_WritePin>
}
 8004c40:	bf00      	nop
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	200005dc 	.word	0x200005dc
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	200005d8 	.word	0x200005d8

08004c50 <nrf_tx_mode>:
void nrf_tx_mode() {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
	nrf_write_buf(NRF_REG_TX_ADDR, TX_ADDRESS, 5);
 8004c54:	2205      	movs	r2, #5
 8004c56:	4915      	ldr	r1, [pc, #84]	; (8004cac <nrf_tx_mode+0x5c>)
 8004c58:	2010      	movs	r0, #16
 8004c5a:	f000 f8e7 	bl	8004e2c <nrf_write_buf>
	CE(0);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	2110      	movs	r1, #16
 8004c62:	4813      	ldr	r0, [pc, #76]	; (8004cb0 <nrf_tx_mode+0x60>)
 8004c64:	f001 f87a 	bl	8005d5c <HAL_GPIO_WritePin>
	nrf_flush_rx();
 8004c68:	f7ff ffd0 	bl	8004c0c <nrf_flush_rx>
	nrf_flush_tx();
 8004c6c:	f7ff ffac 	bl	8004bc8 <nrf_flush_tx>
	regval = nrf_read_reg(NRF_REG_CONFIG);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f000 f871 	bl	8004d58 <nrf_read_reg>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <nrf_tx_mode+0x64>)
 8004c7c:	701a      	strb	r2, [r3, #0]
	regval |= (1 << NRF_BIT_PWR_UP);
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <nrf_tx_mode+0x64>)
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	f043 0302 	orr.w	r3, r3, #2
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <nrf_tx_mode+0x64>)
 8004c8a:	701a      	strb	r2, [r3, #0]
	regval &= ~(1 << NRF_BIT_PRIM_RX);
 8004c8c:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <nrf_tx_mode+0x64>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f023 0301 	bic.w	r3, r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	4b07      	ldr	r3, [pc, #28]	; (8004cb4 <nrf_tx_mode+0x64>)
 8004c98:	701a      	strb	r2, [r3, #0]
	nrf_write_reg(0x00, regval);
 8004c9a:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <nrf_tx_mode+0x64>)
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	f000 f893 	bl	8004dcc <nrf_write_reg>
}
 8004ca6:	bf00      	nop
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000010 	.word	0x20000010
 8004cb0:	40020800 	.word	0x40020800
 8004cb4:	200005dd 	.word	0x200005dd

08004cb8 <nrf_send>:
void nrf_send(uint8_t *pBuf) {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00, regval = 0x00;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73bb      	strb	r3, [r7, #14]
	nrf_tx_mode();
 8004cc8:	f7ff ffc2 	bl	8004c50 <nrf_tx_mode>
	nrf_write_reg(NRF_REG_STATUS, 0b00110000);
 8004ccc:	2130      	movs	r1, #48	; 0x30
 8004cce:	2007      	movs	r0, #7
 8004cd0:	f000 f87c 	bl	8004dcc <nrf_write_reg>
	DelayMicro(150);
 8004cd4:	2096      	movs	r0, #150	; 0x96
 8004cd6:	f7ff fe9b 	bl	8004a10 <DelayMicro>
	nrf_write_buf(NRF_CMD_W_TX_PAYLOAD, pBuf, 32);
 8004cda:	2220      	movs	r2, #32
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	20a0      	movs	r0, #160	; 0xa0
 8004ce0:	f000 f8a4 	bl	8004e2c <nrf_write_buf>
	CE(1);
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	4819      	ldr	r0, [pc, #100]	; (8004d50 <nrf_send+0x98>)
 8004cea:	f001 f837 	bl	8005d5c <HAL_GPIO_WritePin>
	DelayMicro(15);
 8004cee:	200f      	movs	r0, #15
 8004cf0:	f7ff fe8e 	bl	8004a10 <DelayMicro>
	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8004cf4:	bf00      	nop
 8004cf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cfa:	4816      	ldr	r0, [pc, #88]	; (8004d54 <nrf_send+0x9c>)
 8004cfc:	f001 f816 	bl	8005d2c <HAL_GPIO_ReadPin>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d0f7      	beq.n	8004cf6 <nrf_send+0x3e>
	CE(0);
 8004d06:	2200      	movs	r2, #0
 8004d08:	2110      	movs	r1, #16
 8004d0a:	4811      	ldr	r0, [pc, #68]	; (8004d50 <nrf_send+0x98>)
 8004d0c:	f001 f826 	bl	8005d5c <HAL_GPIO_WritePin>
	status = nrf_read_reg(NRF_REG_STATUS);
 8004d10:	2007      	movs	r0, #7
 8004d12:	f000 f821 	bl	8004d58 <nrf_read_reg>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]
	if (status & NRF_BIT_CONFIG_TX_DS) //tx_ds == 0x20
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <nrf_send+0x76>
	{
		nrf_write_reg(NRF_REG_STATUS, 0x20);
 8004d24:	2120      	movs	r1, #32
 8004d26:	2007      	movs	r0, #7
 8004d28:	f000 f850 	bl	8004dcc <nrf_write_reg>
 8004d2c:	e00a      	b.n	8004d44 <nrf_send+0x8c>
	} else if (status & NRF_BIT_CONFIG_MAX_RT) {
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <nrf_send+0x8c>
		nrf_write_reg(NRF_REG_STATUS, 0x10);
 8004d38:	2110      	movs	r1, #16
 8004d3a:	2007      	movs	r0, #7
 8004d3c:	f000 f846 	bl	8004dcc <nrf_write_reg>
		nrf_flush_tx();
 8004d40:	f7ff ff42 	bl	8004bc8 <nrf_flush_tx>
	}
	nrf_rx_mode();
 8004d44:	f7ff ff14 	bl	8004b70 <nrf_rx_mode>
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40020800 	.word	0x40020800
 8004d54:	40020400 	.word	0x40020400

08004d58 <nrf_read_reg>:
uint8_t _read_data = 0;
uint8_t nrf_read_reg(uint8_t addr) {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	71fb      	strb	r3, [r7, #7]
	_read_data = 0;
 8004d62:	4b17      	ldr	r3, [pc, #92]	; (8004dc0 <nrf_read_reg+0x68>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = 0xFF;
 8004d68:	23ff      	movs	r3, #255	; 0xff
 8004d6a:	73fb      	strb	r3, [r7, #15]
	CSN(0);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2110      	movs	r1, #16
 8004d70:	4814      	ldr	r0, [pc, #80]	; (8004dc4 <nrf_read_reg+0x6c>)
 8004d72:	f000 fff3 	bl	8005d5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
 8004d76:	4b14      	ldr	r3, [pc, #80]	; (8004dc8 <nrf_read_reg+0x70>)
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	1df9      	adds	r1, r7, #7
 8004d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d80:	2201      	movs	r2, #1
 8004d82:	f004 f92a 	bl	8008fda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_nrf_spi, &cmd, 1, 1000);
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <nrf_read_reg+0x70>)
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	f107 010f 	add.w	r1, r7, #15
 8004d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d92:	2201      	movs	r2, #1
 8004d94:	f004 f921 	bl	8008fda <HAL_SPI_Transmit>
	HAL_SPI_Receive(_nrf_spi, &_read_data, 1, 1000);
 8004d98:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <nrf_read_reg+0x70>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da0:	2201      	movs	r2, #1
 8004da2:	4907      	ldr	r1, [pc, #28]	; (8004dc0 <nrf_read_reg+0x68>)
 8004da4:	f004 fa55 	bl	8009252 <HAL_SPI_Receive>
	CSN(1);
 8004da8:	2201      	movs	r2, #1
 8004daa:	2110      	movs	r1, #16
 8004dac:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <nrf_read_reg+0x6c>)
 8004dae:	f000 ffd5 	bl	8005d5c <HAL_GPIO_WritePin>
	return _read_data;
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <nrf_read_reg+0x68>)
 8004db4:	781b      	ldrb	r3, [r3, #0]

}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200005de 	.word	0x200005de
 8004dc4:	40020000 	.word	0x40020000
 8004dc8:	200005d8 	.word	0x200005d8

08004dcc <nrf_write_reg>:
void nrf_write_reg(uint8_t addr, uint8_t dt) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	71fb      	strb	r3, [r7, #7]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71bb      	strb	r3, [r7, #6]

	CSN(0);
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2110      	movs	r1, #16
 8004de0:	4810      	ldr	r0, [pc, #64]	; (8004e24 <nrf_write_reg+0x58>)
 8004de2:	f000 ffbb 	bl	8005d5c <HAL_GPIO_WritePin>
	addr |= NRF_CMD_W_REGISTER;
 8004de6:	79fb      	ldrb	r3, [r7, #7]
 8004de8:	f043 0320 	orr.w	r3, r3, #32
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <nrf_write_reg+0x5c>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	1df9      	adds	r1, r7, #7
 8004df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f004 f8ed 	bl	8008fda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_nrf_spi, &dt, 1, 1000);
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <nrf_write_reg+0x5c>)
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	1db9      	adds	r1, r7, #6
 8004e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f004 f8e5 	bl	8008fda <HAL_SPI_Transmit>
	CSN(1);
 8004e10:	2201      	movs	r2, #1
 8004e12:	2110      	movs	r1, #16
 8004e14:	4803      	ldr	r0, [pc, #12]	; (8004e24 <nrf_write_reg+0x58>)
 8004e16:	f000 ffa1 	bl	8005d5c <HAL_GPIO_WritePin>

}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40020000 	.word	0x40020000
 8004e28:	200005d8 	.word	0x200005d8

08004e2c <nrf_write_buf>:
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
	HAL_SPI_Receive(_nrf_spi, pBuf, bytes, 1000);
	CSN(1);
}

void nrf_write_buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	71fb      	strb	r3, [r7, #7]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	71bb      	strb	r3, [r7, #6]
	addr |= NRF_CMD_W_REGISTER;
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f043 0320 	orr.w	r3, r3, #32
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	71fb      	strb	r3, [r7, #7]
	CSN(0);
 8004e46:	2200      	movs	r2, #0
 8004e48:	2110      	movs	r1, #16
 8004e4a:	480e      	ldr	r0, [pc, #56]	; (8004e84 <nrf_write_buf+0x58>)
 8004e4c:	f000 ff86 	bl	8005d5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
 8004e50:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <nrf_write_buf+0x5c>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	1df9      	adds	r1, r7, #7
 8004e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f004 f8bd 	bl	8008fda <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_nrf_spi, pBuf, bytes, 1000);
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <nrf_write_buf+0x5c>)
 8004e62:	6818      	ldr	r0, [r3, #0]
 8004e64:	79bb      	ldrb	r3, [r7, #6]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	f004 f8b4 	bl	8008fda <HAL_SPI_Transmit>
	CSN(1);
 8004e72:	2201      	movs	r2, #1
 8004e74:	2110      	movs	r1, #16
 8004e76:	4803      	ldr	r0, [pc, #12]	; (8004e84 <nrf_write_buf+0x58>)
 8004e78:	f000 ff70 	bl	8005d5c <HAL_GPIO_WritePin>
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	40020000 	.word	0x40020000
 8004e88:	200005d8 	.word	0x200005d8

08004e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <HAL_MspInit+0x4c>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	4a0f      	ldr	r2, [pc, #60]	; (8004ed8 <HAL_MspInit+0x4c>)
 8004e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea2:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <HAL_MspInit+0x4c>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eae:	2300      	movs	r3, #0
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <HAL_MspInit+0x4c>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a08      	ldr	r2, [pc, #32]	; (8004ed8 <HAL_MspInit+0x4c>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <HAL_MspInit+0x4c>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800

08004edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a20      	ldr	r2, [pc, #128]	; (8004f7c <HAL_I2C_MspInit+0xa0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d139      	bne.n	8004f72 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0e:	4b1c      	ldr	r3, [pc, #112]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a17      	ldr	r2, [pc, #92]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f24:	f043 0302 	orr.w	r3, r3, #2
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30
 8004f2a:	4b15      	ldr	r3, [pc, #84]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	60fb      	str	r3, [r7, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f36:	23c0      	movs	r3, #192	; 0xc0
 8004f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f42:	2303      	movs	r3, #3
 8004f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f46:	2304      	movs	r3, #4
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	4619      	mov	r1, r3
 8004f50:	480c      	ldr	r0, [pc, #48]	; (8004f84 <HAL_I2C_MspInit+0xa8>)
 8004f52:	f000 fc83 	bl	800585c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	4b09      	ldr	r3, [pc, #36]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f64:	6413      	str	r3, [r2, #64]	; 0x40
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_I2C_MspInit+0xa4>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004f72:	bf00      	nop
 8004f74:	3728      	adds	r7, #40	; 0x28
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40005400 	.word	0x40005400
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40020400 	.word	0x40020400

08004f88 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <HAL_I2C_MspDeInit+0x38>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10d      	bne.n	8004fb6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <HAL_I2C_MspDeInit+0x3c>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a09      	ldr	r2, [pc, #36]	; (8004fc4 <HAL_I2C_MspDeInit+0x3c>)
 8004fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004fa6:	2140      	movs	r1, #64	; 0x40
 8004fa8:	4807      	ldr	r0, [pc, #28]	; (8004fc8 <HAL_I2C_MspDeInit+0x40>)
 8004faa:	f000 fddb 	bl	8005b64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004fae:	2180      	movs	r1, #128	; 0x80
 8004fb0:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <HAL_I2C_MspDeInit+0x40>)
 8004fb2:	f000 fdd7 	bl	8005b64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40005400 	.word	0x40005400
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40020400 	.word	0x40020400

08004fcc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a31      	ldr	r2, [pc, #196]	; (80050b0 <HAL_SD_MspInit+0xe4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d15b      	bne.n	80050a6 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	4a2f      	ldr	r2, [pc, #188]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8004ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b29      	ldr	r3, [pc, #164]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	4a28      	ldr	r2, [pc, #160]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6313      	str	r3, [r2, #48]	; 0x30
 800501a:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8005030:	f043 0308 	orr.w	r3, r3, #8
 8005034:	6313      	str	r3, [r2, #48]	; 0x30
 8005036:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_SD_MspInit+0xe8>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	2302      	movs	r3, #2
 800504a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800504c:	2301      	movs	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005050:	2303      	movs	r3, #3
 8005052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005054:	230c      	movs	r3, #12
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4619      	mov	r1, r3
 800505e:	4816      	ldr	r0, [pc, #88]	; (80050b8 <HAL_SD_MspInit+0xec>)
 8005060:	f000 fbfc 	bl	800585c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506a:	2302      	movs	r3, #2
 800506c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005072:	2303      	movs	r3, #3
 8005074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005076:	230c      	movs	r3, #12
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	4619      	mov	r1, r3
 8005080:	480d      	ldr	r0, [pc, #52]	; (80050b8 <HAL_SD_MspInit+0xec>)
 8005082:	f000 fbeb 	bl	800585c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005086:	2304      	movs	r3, #4
 8005088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800508a:	2302      	movs	r3, #2
 800508c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800508e:	2301      	movs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005092:	2303      	movs	r3, #3
 8005094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005096:	230c      	movs	r3, #12
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	4619      	mov	r1, r3
 80050a0:	4806      	ldr	r0, [pc, #24]	; (80050bc <HAL_SD_MspInit+0xf0>)
 80050a2:	f000 fbdb 	bl	800585c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80050a6:	bf00      	nop
 80050a8:	3728      	adds	r7, #40	; 0x28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40020800 	.word	0x40020800
 80050bc:	40020c00 	.word	0x40020c00

080050c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_SPI_MspInit+0x84>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d12b      	bne.n	800513a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	4b18      	ldr	r3, [pc, #96]	; (8005148 <HAL_SPI_MspInit+0x88>)
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	4a17      	ldr	r2, [pc, #92]	; (8005148 <HAL_SPI_MspInit+0x88>)
 80050ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050f0:	6453      	str	r3, [r2, #68]	; 0x44
 80050f2:	4b15      	ldr	r3, [pc, #84]	; (8005148 <HAL_SPI_MspInit+0x88>)
 80050f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_SPI_MspInit+0x88>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	4a10      	ldr	r2, [pc, #64]	; (8005148 <HAL_SPI_MspInit+0x88>)
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	6313      	str	r3, [r2, #48]	; 0x30
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_SPI_MspInit+0x88>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800511a:	23e0      	movs	r3, #224	; 0xe0
 800511c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511e:	2302      	movs	r3, #2
 8005120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005126:	2303      	movs	r3, #3
 8005128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800512a:	2305      	movs	r3, #5
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	f107 0314 	add.w	r3, r7, #20
 8005132:	4619      	mov	r1, r3
 8005134:	4805      	ldr	r0, [pc, #20]	; (800514c <HAL_SPI_MspInit+0x8c>)
 8005136:	f000 fb91 	bl	800585c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800513a:	bf00      	nop
 800513c:	3728      	adds	r7, #40	; 0x28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40013000 	.word	0x40013000
 8005148:	40023800 	.word	0x40023800
 800514c:	40020000 	.word	0x40020000

08005150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005160:	d10e      	bne.n	8005180 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <HAL_TIM_Base_MspInit+0x64>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <HAL_TIM_Base_MspInit+0x64>)
 800516c:	f043 0301 	orr.w	r3, r3, #1
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <HAL_TIM_Base_MspInit+0x64>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800517e:	e012      	b.n	80051a6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <HAL_TIM_Base_MspInit+0x68>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d10d      	bne.n	80051a6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <HAL_TIM_Base_MspInit+0x64>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <HAL_TIM_Base_MspInit+0x64>)
 8005194:	f043 0302 	orr.w	r3, r3, #2
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_TIM_Base_MspInit+0x64>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	68bb      	ldr	r3, [r7, #8]
}
 80051a6:	bf00      	nop
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40000400 	.word	0x40000400

080051bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	; 0x28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 0314 	add.w	r3, r7, #20
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051dc:	d11f      	bne.n	800521e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051de:	2300      	movs	r3, #0
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a21      	ldr	r2, [pc, #132]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 80051e8:	f043 0301 	orr.w	r3, r3, #1
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30
 80051ee:	4b1f      	ldr	r3, [pc, #124]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80051fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005200:	2302      	movs	r3, #2
 8005202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005208:	2300      	movs	r3, #0
 800520a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800520c:	2301      	movs	r3, #1
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005210:	f107 0314 	add.w	r3, r7, #20
 8005214:	4619      	mov	r1, r3
 8005216:	4816      	ldr	r0, [pc, #88]	; (8005270 <HAL_TIM_MspPostInit+0xb4>)
 8005218:	f000 fb20 	bl	800585c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800521c:	e022      	b.n	8005264 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a14      	ldr	r2, [pc, #80]	; (8005274 <HAL_TIM_MspPostInit+0xb8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d11d      	bne.n	8005264 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005228:	2300      	movs	r3, #0
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	4a0e      	ldr	r2, [pc, #56]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6313      	str	r3, [r2, #48]	; 0x30
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <HAL_TIM_MspPostInit+0xb0>)
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005250:	2300      	movs	r3, #0
 8005252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005254:	2302      	movs	r3, #2
 8005256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4619      	mov	r1, r3
 800525e:	4806      	ldr	r0, [pc, #24]	; (8005278 <HAL_TIM_MspPostInit+0xbc>)
 8005260:	f000 fafc 	bl	800585c <HAL_GPIO_Init>
}
 8005264:	bf00      	nop
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40023800 	.word	0x40023800
 8005270:	40020000 	.word	0x40020000
 8005274:	40000400 	.word	0x40000400
 8005278:	40020800 	.word	0x40020800

0800527c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	60da      	str	r2, [r3, #12]
 8005292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a19      	ldr	r2, [pc, #100]	; (8005300 <HAL_UART_MspInit+0x84>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d12c      	bne.n	80052f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_UART_MspInit+0x88>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	4a17      	ldr	r2, [pc, #92]	; (8005304 <HAL_UART_MspInit+0x88>)
 80052a8:	f043 0310 	orr.w	r3, r3, #16
 80052ac:	6453      	str	r3, [r2, #68]	; 0x44
 80052ae:	4b15      	ldr	r3, [pc, #84]	; (8005304 <HAL_UART_MspInit+0x88>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <HAL_UART_MspInit+0x88>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <HAL_UART_MspInit+0x88>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_UART_MspInit+0x88>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80052d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80052da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e4:	2303      	movs	r3, #3
 80052e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80052e8:	2307      	movs	r3, #7
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4619      	mov	r1, r3
 80052f2:	4805      	ldr	r0, [pc, #20]	; (8005308 <HAL_UART_MspInit+0x8c>)
 80052f4:	f000 fab2 	bl	800585c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80052f8:	bf00      	nop
 80052fa:	3728      	adds	r7, #40	; 0x28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40011000 	.word	0x40011000
 8005304:	40023800 	.word	0x40023800
 8005308:	40020000 	.word	0x40020000

0800530c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005310:	e7fe      	b.n	8005310 <NMI_Handler+0x4>

08005312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005316:	e7fe      	b.n	8005316 <HardFault_Handler+0x4>

08005318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800531c:	e7fe      	b.n	800531c <MemManage_Handler+0x4>

0800531e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005322:	e7fe      	b.n	8005322 <BusFault_Handler+0x4>

08005324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <UsageFault_Handler+0x4>

0800532a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800532e:	bf00      	nop
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005346:	b480      	push	{r7}
 8005348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005358:	f000 f956 	bl	8005608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800535c:	bf00      	nop
 800535e:	bd80      	pop	{r7, pc}

08005360 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
	return 1;
 8005364:	2301      	movs	r3, #1
}
 8005366:	4618      	mov	r0, r3
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <_kill>:

int _kill(int pid, int sig) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800537a:	f009 f853 	bl	800e424 <__errno>
 800537e:	4603      	mov	r3, r0
 8005380:	2216      	movs	r2, #22
 8005382:	601a      	str	r2, [r3, #0]
	return -1;
 8005384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <_exit>:

void _exit(int status) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005398:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ffe7 	bl	8005370 <_kill>
	while (1) {
 80053a2:	e7fe      	b.n	80053a2 <_exit+0x12>

080053a4 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	e00a      	b.n	80053cc <_read+0x28>
		*ptr++ = __io_getchar();
 80053b6:	f3af 8000 	nop.w
 80053ba:	4601      	mov	r1, r0
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	60ba      	str	r2, [r7, #8]
 80053c2:	b2ca      	uxtb	r2, r1
 80053c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	3301      	adds	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	dbf0      	blt.n	80053b6 <_read+0x12>
	}

	return len;
 80053d4:	687b      	ldr	r3, [r7, #4]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80053de:	b580      	push	{r7, lr}
 80053e0:	b086      	sub	sp, #24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e009      	b.n	8005404 <_write+0x26>
		__io_putchar(*ptr++);
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	60ba      	str	r2, [r7, #8]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	3301      	adds	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	429a      	cmp	r2, r3
 800540a:	dbf1      	blt.n	80053f0 <_write+0x12>
	}
	return len;
 800540c:	687b      	ldr	r3, [r7, #4]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <_close>:

int _close(int file) {
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
	return -1;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <_fstat>:

int _fstat(int file, struct stat *st) {
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800543e:	605a      	str	r2, [r3, #4]
	return 0;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <_isatty>:

int _isatty(int file) {
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
	return 1;
 8005456:	2301      	movs	r3, #1
}
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
	return 0;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8005488:	4a14      	ldr	r2, [pc, #80]	; (80054dc <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8005494:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <_sbrk+0x64>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800549c:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <_sbrk+0x64>)
 800549e:	4a12      	ldr	r2, [pc, #72]	; (80054e8 <_sbrk+0x68>)
 80054a0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80054a2:	4b10      	ldr	r3, [pc, #64]	; (80054e4 <_sbrk+0x64>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d207      	bcs.n	80054c0 <_sbrk+0x40>
		errno = ENOMEM;
 80054b0:	f008 ffb8 	bl	800e424 <__errno>
 80054b4:	4603      	mov	r3, r0
 80054b6:	220c      	movs	r2, #12
 80054b8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054be:	e009      	b.n	80054d4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <_sbrk+0x64>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <_sbrk+0x64>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	4a05      	ldr	r2, [pc, #20]	; (80054e4 <_sbrk+0x64>)
 80054d0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20018000 	.word	0x20018000
 80054e0:	00000400 	.word	0x00000400
 80054e4:	200005e0 	.word	0x200005e0
 80054e8:	20000638 	.word	0x20000638

080054ec <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <SystemInit+0x20>)
 80054f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f6:	4a05      	ldr	r2, [pc, #20]	; (800550c <SystemInit+0x20>)
 80054f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005500:	bf00      	nop
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	e000ed00 	.word	0xe000ed00

08005510 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005548 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005514:	480d      	ldr	r0, [pc, #52]	; (800554c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005516:	490e      	ldr	r1, [pc, #56]	; (8005550 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005518:	4a0e      	ldr	r2, [pc, #56]	; (8005554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800551a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800551c:	e002      	b.n	8005524 <LoopCopyDataInit>

0800551e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800551e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005522:	3304      	adds	r3, #4

08005524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005528:	d3f9      	bcc.n	800551e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800552a:	4a0b      	ldr	r2, [pc, #44]	; (8005558 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800552c:	4c0b      	ldr	r4, [pc, #44]	; (800555c <LoopFillZerobss+0x26>)
  movs r3, #0
 800552e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005530:	e001      	b.n	8005536 <LoopFillZerobss>

08005532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005534:	3204      	adds	r2, #4

08005536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005538:	d3fb      	bcc.n	8005532 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800553a:	f7ff ffd7 	bl	80054ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800553e:	f008 ff77 	bl	800e430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005542:	f7fd ffb5 	bl	80034b0 <main>
  bx  lr    
 8005546:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005548:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800554c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005550:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8005554:	0801234c 	.word	0x0801234c
  ldr r2, =_sbss
 8005558:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800555c:	20000634 	.word	0x20000634

08005560 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005560:	e7fe      	b.n	8005560 <ADC_IRQHandler>
	...

08005564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005568:	4b0e      	ldr	r3, [pc, #56]	; (80055a4 <HAL_Init+0x40>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a0d      	ldr	r2, [pc, #52]	; (80055a4 <HAL_Init+0x40>)
 800556e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005572:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <HAL_Init+0x40>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a0a      	ldr	r2, [pc, #40]	; (80055a4 <HAL_Init+0x40>)
 800557a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800557e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005580:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <HAL_Init+0x40>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a07      	ldr	r2, [pc, #28]	; (80055a4 <HAL_Init+0x40>)
 8005586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800558c:	2003      	movs	r0, #3
 800558e:	f000 f931 	bl	80057f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005592:	200f      	movs	r0, #15
 8005594:	f000 f808 	bl	80055a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005598:	f7ff fc78 	bl	8004e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40023c00 	.word	0x40023c00

080055a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_InitTick+0x54>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b12      	ldr	r3, [pc, #72]	; (8005600 <HAL_InitTick+0x58>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	4619      	mov	r1, r3
 80055ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055be:	fbb3 f3f1 	udiv	r3, r3, r1
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 f93b 	bl	8005842 <HAL_SYSTICK_Config>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e00e      	b.n	80055f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b0f      	cmp	r3, #15
 80055da:	d80a      	bhi.n	80055f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055dc:	2200      	movs	r2, #0
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055e4:	f000 f911 	bl	800580a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055e8:	4a06      	ldr	r2, [pc, #24]	; (8005604 <HAL_InitTick+0x5c>)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	e000      	b.n	80055f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000018 	.word	0x20000018
 8005600:	20000020 	.word	0x20000020
 8005604:	2000001c 	.word	0x2000001c

08005608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_IncTick+0x20>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_IncTick+0x24>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4413      	add	r3, r2
 8005618:	4a04      	ldr	r2, [pc, #16]	; (800562c <HAL_IncTick+0x24>)
 800561a:	6013      	str	r3, [r2, #0]
}
 800561c:	bf00      	nop
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000020 	.word	0x20000020
 800562c:	200005e4 	.word	0x200005e4

08005630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return uwTick;
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <HAL_GetTick+0x14>)
 8005636:	681b      	ldr	r3, [r3, #0]
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	200005e4 	.word	0x200005e4

08005648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005650:	f7ff ffee 	bl	8005630 <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005660:	d005      	beq.n	800566e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <HAL_Delay+0x44>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4413      	add	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800566e:	bf00      	nop
 8005670:	f7ff ffde 	bl	8005630 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	429a      	cmp	r2, r3
 800567e:	d8f7      	bhi.n	8005670 <HAL_Delay+0x28>
  {
  }
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000020 	.word	0x20000020

08005690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <__NVIC_SetPriorityGrouping+0x44>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056ac:	4013      	ands	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056c2:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <__NVIC_SetPriorityGrouping+0x44>)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	60d3      	str	r3, [r2, #12]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	e000ed00 	.word	0xe000ed00

080056d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056dc:	4b04      	ldr	r3, [pc, #16]	; (80056f0 <__NVIC_GetPriorityGrouping+0x18>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	0a1b      	lsrs	r3, r3, #8
 80056e2:	f003 0307 	and.w	r3, r3, #7
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	e000ed00 	.word	0xe000ed00

080056f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	4603      	mov	r3, r0
 80056fc:	6039      	str	r1, [r7, #0]
 80056fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db0a      	blt.n	800571e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	490c      	ldr	r1, [pc, #48]	; (8005740 <__NVIC_SetPriority+0x4c>)
 800570e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005712:	0112      	lsls	r2, r2, #4
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	440b      	add	r3, r1
 8005718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800571c:	e00a      	b.n	8005734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	b2da      	uxtb	r2, r3
 8005722:	4908      	ldr	r1, [pc, #32]	; (8005744 <__NVIC_SetPriority+0x50>)
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	f003 030f 	and.w	r3, r3, #15
 800572a:	3b04      	subs	r3, #4
 800572c:	0112      	lsls	r2, r2, #4
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	440b      	add	r3, r1
 8005732:	761a      	strb	r2, [r3, #24]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000e100 	.word	0xe000e100
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	; 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f1c3 0307 	rsb	r3, r3, #7
 8005762:	2b04      	cmp	r3, #4
 8005764:	bf28      	it	cs
 8005766:	2304      	movcs	r3, #4
 8005768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3304      	adds	r3, #4
 800576e:	2b06      	cmp	r3, #6
 8005770:	d902      	bls.n	8005778 <NVIC_EncodePriority+0x30>
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3b03      	subs	r3, #3
 8005776:	e000      	b.n	800577a <NVIC_EncodePriority+0x32>
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800577c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	43da      	mvns	r2, r3
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	401a      	ands	r2, r3
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	43d9      	mvns	r1, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a0:	4313      	orrs	r3, r2
         );
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3724      	adds	r7, #36	; 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057c0:	d301      	bcc.n	80057c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057c2:	2301      	movs	r3, #1
 80057c4:	e00f      	b.n	80057e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057c6:	4a0a      	ldr	r2, [pc, #40]	; (80057f0 <SysTick_Config+0x40>)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057ce:	210f      	movs	r1, #15
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057d4:	f7ff ff8e 	bl	80056f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <SysTick_Config+0x40>)
 80057da:	2200      	movs	r2, #0
 80057dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057de:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <SysTick_Config+0x40>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	e000e010 	.word	0xe000e010

080057f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ff47 	bl	8005690 <__NVIC_SetPriorityGrouping>
}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005818:	2300      	movs	r3, #0
 800581a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800581c:	f7ff ff5c 	bl	80056d8 <__NVIC_GetPriorityGrouping>
 8005820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	6978      	ldr	r0, [r7, #20]
 8005828:	f7ff ff8e 	bl	8005748 <NVIC_EncodePriority>
 800582c:	4602      	mov	r2, r0
 800582e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005832:	4611      	mov	r1, r2
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff ff5d 	bl	80056f4 <__NVIC_SetPriority>
}
 800583a:	bf00      	nop
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff ffb0 	bl	80057b0 <SysTick_Config>
 8005850:	4603      	mov	r3, r0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	; 0x24
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800586e:	2300      	movs	r3, #0
 8005870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005872:	2300      	movs	r3, #0
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	e159      	b.n	8005b2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005878:	2201      	movs	r2, #1
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4013      	ands	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	f040 8148 	bne.w	8005b26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d005      	beq.n	80058ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d130      	bne.n	8005910 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	2203      	movs	r2, #3
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4013      	ands	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058e4:	2201      	movs	r2, #1
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	43db      	mvns	r3, r3
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4013      	ands	r3, r2
 80058f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 0201 	and.w	r2, r3, #1
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	4313      	orrs	r3, r2
 8005908:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	2b03      	cmp	r3, #3
 800591a:	d017      	beq.n	800594c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	2203      	movs	r2, #3
 8005928:	fa02 f303 	lsl.w	r3, r2, r3
 800592c:	43db      	mvns	r3, r3
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4013      	ands	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	fa02 f303 	lsl.w	r3, r2, r3
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	4313      	orrs	r3, r2
 8005944:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d123      	bne.n	80059a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	08da      	lsrs	r2, r3, #3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	3208      	adds	r2, #8
 8005960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	220f      	movs	r2, #15
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	fa02 f303 	lsl.w	r3, r2, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4313      	orrs	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	08da      	lsrs	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3208      	adds	r2, #8
 800599a:	69b9      	ldr	r1, [r7, #24]
 800599c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	2203      	movs	r2, #3
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0203 	and.w	r2, r3, #3
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fa02 f303 	lsl.w	r3, r2, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80a2 	beq.w	8005b26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	4b57      	ldr	r3, [pc, #348]	; (8005b44 <HAL_GPIO_Init+0x2e8>)
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	4a56      	ldr	r2, [pc, #344]	; (8005b44 <HAL_GPIO_Init+0x2e8>)
 80059ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059f0:	6453      	str	r3, [r2, #68]	; 0x44
 80059f2:	4b54      	ldr	r3, [pc, #336]	; (8005b44 <HAL_GPIO_Init+0x2e8>)
 80059f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059fe:	4a52      	ldr	r2, [pc, #328]	; (8005b48 <HAL_GPIO_Init+0x2ec>)
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	089b      	lsrs	r3, r3, #2
 8005a04:	3302      	adds	r3, #2
 8005a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	f003 0303 	and.w	r3, r3, #3
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	220f      	movs	r2, #15
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a49      	ldr	r2, [pc, #292]	; (8005b4c <HAL_GPIO_Init+0x2f0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d019      	beq.n	8005a5e <HAL_GPIO_Init+0x202>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a48      	ldr	r2, [pc, #288]	; (8005b50 <HAL_GPIO_Init+0x2f4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <HAL_GPIO_Init+0x1fe>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a47      	ldr	r2, [pc, #284]	; (8005b54 <HAL_GPIO_Init+0x2f8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00d      	beq.n	8005a56 <HAL_GPIO_Init+0x1fa>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a46      	ldr	r2, [pc, #280]	; (8005b58 <HAL_GPIO_Init+0x2fc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <HAL_GPIO_Init+0x1f6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a45      	ldr	r2, [pc, #276]	; (8005b5c <HAL_GPIO_Init+0x300>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d101      	bne.n	8005a4e <HAL_GPIO_Init+0x1f2>
 8005a4a:	2304      	movs	r3, #4
 8005a4c:	e008      	b.n	8005a60 <HAL_GPIO_Init+0x204>
 8005a4e:	2307      	movs	r3, #7
 8005a50:	e006      	b.n	8005a60 <HAL_GPIO_Init+0x204>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e004      	b.n	8005a60 <HAL_GPIO_Init+0x204>
 8005a56:	2302      	movs	r3, #2
 8005a58:	e002      	b.n	8005a60 <HAL_GPIO_Init+0x204>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_GPIO_Init+0x204>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f002 0203 	and.w	r2, r2, #3
 8005a66:	0092      	lsls	r2, r2, #2
 8005a68:	4093      	lsls	r3, r2
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a70:	4935      	ldr	r1, [pc, #212]	; (8005b48 <HAL_GPIO_Init+0x2ec>)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	3302      	adds	r3, #2
 8005a78:	69ba      	ldr	r2, [r7, #24]
 8005a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a7e:	4b38      	ldr	r3, [pc, #224]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	43db      	mvns	r3, r3
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aa2:	4a2f      	ldr	r2, [pc, #188]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d003      	beq.n	8005acc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005acc:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ad2:	4b23      	ldr	r3, [pc, #140]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	43db      	mvns	r3, r3
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005af6:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005afc:	4b18      	ldr	r3, [pc, #96]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b20:	4a0f      	ldr	r2, [pc, #60]	; (8005b60 <HAL_GPIO_Init+0x304>)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	2b0f      	cmp	r3, #15
 8005b30:	f67f aea2 	bls.w	8005878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40013800 	.word	0x40013800
 8005b4c:	40020000 	.word	0x40020000
 8005b50:	40020400 	.word	0x40020400
 8005b54:	40020800 	.word	0x40020800
 8005b58:	40020c00 	.word	0x40020c00
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40013c00 	.word	0x40013c00

08005b64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]
 8005b7e:	e0bb      	b.n	8005cf8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b80:	2201      	movs	r2, #1
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	fa02 f303 	lsl.w	r3, r2, r3
 8005b88:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	f040 80ab 	bne.w	8005cf2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005b9c:	4a5c      	ldr	r2, [pc, #368]	; (8005d10 <HAL_GPIO_DeInit+0x1ac>)
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	089b      	lsrs	r3, r3, #2
 8005ba2:	3302      	adds	r3, #2
 8005ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f003 0303 	and.w	r3, r3, #3
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	220f      	movs	r2, #15
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4013      	ands	r3, r2
 8005bbc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a54      	ldr	r2, [pc, #336]	; (8005d14 <HAL_GPIO_DeInit+0x1b0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d019      	beq.n	8005bfa <HAL_GPIO_DeInit+0x96>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a53      	ldr	r2, [pc, #332]	; (8005d18 <HAL_GPIO_DeInit+0x1b4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <HAL_GPIO_DeInit+0x92>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a52      	ldr	r2, [pc, #328]	; (8005d1c <HAL_GPIO_DeInit+0x1b8>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00d      	beq.n	8005bf2 <HAL_GPIO_DeInit+0x8e>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a51      	ldr	r2, [pc, #324]	; (8005d20 <HAL_GPIO_DeInit+0x1bc>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <HAL_GPIO_DeInit+0x8a>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a50      	ldr	r2, [pc, #320]	; (8005d24 <HAL_GPIO_DeInit+0x1c0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d101      	bne.n	8005bea <HAL_GPIO_DeInit+0x86>
 8005be6:	2304      	movs	r3, #4
 8005be8:	e008      	b.n	8005bfc <HAL_GPIO_DeInit+0x98>
 8005bea:	2307      	movs	r3, #7
 8005bec:	e006      	b.n	8005bfc <HAL_GPIO_DeInit+0x98>
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e004      	b.n	8005bfc <HAL_GPIO_DeInit+0x98>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e002      	b.n	8005bfc <HAL_GPIO_DeInit+0x98>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_GPIO_DeInit+0x98>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	f002 0203 	and.w	r2, r2, #3
 8005c02:	0092      	lsls	r2, r2, #2
 8005c04:	4093      	lsls	r3, r2
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d132      	bne.n	8005c72 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005c0c:	4b46      	ldr	r3, [pc, #280]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	4944      	ldr	r1, [pc, #272]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005c1a:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	4941      	ldr	r1, [pc, #260]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005c28:	4b3f      	ldr	r3, [pc, #252]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	493d      	ldr	r1, [pc, #244]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005c36:	4b3c      	ldr	r3, [pc, #240]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c38:	689a      	ldr	r2, [r3, #8]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	43db      	mvns	r3, r3
 8005c3e:	493a      	ldr	r1, [pc, #232]	; (8005d28 <HAL_GPIO_DeInit+0x1c4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	220f      	movs	r2, #15
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005c54:	4a2e      	ldr	r2, [pc, #184]	; (8005d10 <HAL_GPIO_DeInit+0x1ac>)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	43da      	mvns	r2, r3
 8005c64:	482a      	ldr	r0, [pc, #168]	; (8005d10 <HAL_GPIO_DeInit+0x1ac>)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	089b      	lsrs	r3, r3, #2
 8005c6a:	400a      	ands	r2, r1
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	005b      	lsls	r3, r3, #1
 8005c7a:	2103      	movs	r1, #3
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	43db      	mvns	r3, r3
 8005c82:	401a      	ands	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	08da      	lsrs	r2, r3, #3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3208      	adds	r2, #8
 8005c90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	220f      	movs	r2, #15
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	08d2      	lsrs	r2, r2, #3
 8005ca8:	4019      	ands	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3208      	adds	r2, #8
 8005cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	005b      	lsls	r3, r3, #1
 8005cba:	2103      	movs	r1, #3
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	401a      	ands	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	2101      	movs	r1, #1
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	2103      	movs	r1, #3
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	401a      	ands	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	f67f af40 	bls.w	8005b80 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40013800 	.word	0x40013800
 8005d14:	40020000 	.word	0x40020000
 8005d18:	40020400 	.word	0x40020400
 8005d1c:	40020800 	.word	0x40020800
 8005d20:	40020c00 	.word	0x40020c00
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40013c00 	.word	0x40013c00

08005d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	887b      	ldrh	r3, [r7, #2]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d44:	2301      	movs	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]
 8005d48:	e001      	b.n	8005d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	807b      	strh	r3, [r7, #2]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d6c:	787b      	ldrb	r3, [r7, #1]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d72:	887a      	ldrh	r2, [r7, #2]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d78:	e003      	b.n	8005d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d7a:	887b      	ldrh	r3, [r7, #2]
 8005d7c:	041a      	lsls	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	619a      	str	r2, [r3, #24]
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	460b      	mov	r3, r1
 8005d98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005da0:	887a      	ldrh	r2, [r7, #2]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4013      	ands	r3, r2
 8005da6:	041a      	lsls	r2, r3, #16
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	43d9      	mvns	r1, r3
 8005dac:	887b      	ldrh	r3, [r7, #2]
 8005dae:	400b      	ands	r3, r1
 8005db0:	431a      	orrs	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	619a      	str	r2, [r3, #24]
}
 8005db6:	bf00      	nop
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e12b      	b.n	800602e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7ff f876 	bl	8004edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	; 0x24
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0201 	bic.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e28:	f002 f89e 	bl	8007f68 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4a81      	ldr	r2, [pc, #516]	; (8006038 <HAL_I2C_Init+0x274>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d807      	bhi.n	8005e48 <HAL_I2C_Init+0x84>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a80      	ldr	r2, [pc, #512]	; (800603c <HAL_I2C_Init+0x278>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	bf94      	ite	ls
 8005e40:	2301      	movls	r3, #1
 8005e42:	2300      	movhi	r3, #0
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	e006      	b.n	8005e56 <HAL_I2C_Init+0x92>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4a7d      	ldr	r2, [pc, #500]	; (8006040 <HAL_I2C_Init+0x27c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	bf94      	ite	ls
 8005e50:	2301      	movls	r3, #1
 8005e52:	2300      	movhi	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e0e7      	b.n	800602e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a78      	ldr	r2, [pc, #480]	; (8006044 <HAL_I2C_Init+0x280>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	0c9b      	lsrs	r3, r3, #18
 8005e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4a6a      	ldr	r2, [pc, #424]	; (8006038 <HAL_I2C_Init+0x274>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d802      	bhi.n	8005e98 <HAL_I2C_Init+0xd4>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	3301      	adds	r3, #1
 8005e96:	e009      	b.n	8005eac <HAL_I2C_Init+0xe8>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	4a69      	ldr	r2, [pc, #420]	; (8006048 <HAL_I2C_Init+0x284>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	099b      	lsrs	r3, r3, #6
 8005eaa:	3301      	adds	r3, #1
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	495c      	ldr	r1, [pc, #368]	; (8006038 <HAL_I2C_Init+0x274>)
 8005ec8:	428b      	cmp	r3, r1
 8005eca:	d819      	bhi.n	8005f00 <HAL_I2C_Init+0x13c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1e59      	subs	r1, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ee0:	400b      	ands	r3, r1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00a      	beq.n	8005efc <HAL_I2C_Init+0x138>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	1e59      	subs	r1, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	005b      	lsls	r3, r3, #1
 8005ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005efa:	e051      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005efc:	2304      	movs	r3, #4
 8005efe:	e04f      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d111      	bne.n	8005f2c <HAL_I2C_Init+0x168>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1e58      	subs	r0, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	440b      	add	r3, r1
 8005f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	bf0c      	ite	eq
 8005f24:	2301      	moveq	r3, #1
 8005f26:	2300      	movne	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	e012      	b.n	8005f52 <HAL_I2C_Init+0x18e>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1e58      	subs	r0, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	0099      	lsls	r1, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d001      	beq.n	8005f5a <HAL_I2C_Init+0x196>
 8005f56:	2301      	movs	r3, #1
 8005f58:	e022      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10e      	bne.n	8005f80 <HAL_I2C_Init+0x1bc>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	1e58      	subs	r0, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6859      	ldr	r1, [r3, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	440b      	add	r3, r1
 8005f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f74:	3301      	adds	r3, #1
 8005f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7e:	e00f      	b.n	8005fa0 <HAL_I2C_Init+0x1dc>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	1e58      	subs	r0, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6859      	ldr	r1, [r3, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	0099      	lsls	r1, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	6809      	ldr	r1, [r1, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6911      	ldr	r1, [r2, #16]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	68d2      	ldr	r2, [r2, #12]
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	430b      	orrs	r3, r1
 8005fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695a      	ldr	r2, [r3, #20]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	000186a0 	.word	0x000186a0
 800603c:	001e847f 	.word	0x001e847f
 8006040:	003d08ff 	.word	0x003d08ff
 8006044:	431bde83 	.word	0x431bde83
 8006048:	10624dd3 	.word	0x10624dd3

0800604c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e021      	b.n	80060a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2224      	movs	r2, #36	; 0x24
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0201 	bic.w	r2, r2, #1
 8006074:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fe ff86 	bl	8004f88 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	461a      	mov	r2, r3
 80060b8:	460b      	mov	r3, r1
 80060ba:	817b      	strh	r3, [r7, #10]
 80060bc:	4613      	mov	r3, r2
 80060be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060c0:	f7ff fab6 	bl	8005630 <HAL_GetTick>
 80060c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	f040 80e0 	bne.w	8006294 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	2319      	movs	r3, #25
 80060da:	2201      	movs	r2, #1
 80060dc:	4970      	ldr	r1, [pc, #448]	; (80062a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f001 f8f6 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060ea:	2302      	movs	r3, #2
 80060ec:	e0d3      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_I2C_Master_Transmit+0x50>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0cc      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ea>
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b01      	cmp	r3, #1
 8006110:	d007      	beq.n	8006122 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0201 	orr.w	r2, r2, #1
 8006120:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006130:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2221      	movs	r2, #33	; 0x21
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2210      	movs	r2, #16
 800613e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	893a      	ldrh	r2, [r7, #8]
 8006152:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a50      	ldr	r2, [pc, #320]	; (80062a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8006162:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006164:	8979      	ldrh	r1, [r7, #10]
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	6a3a      	ldr	r2, [r7, #32]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fde2 	bl	8006d34 <I2C_MasterRequestWrite>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e08d      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006190:	e066      	b.n	8006260 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	6a39      	ldr	r1, [r7, #32]
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f001 f970 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00d      	beq.n	80061be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d107      	bne.n	80061ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e06b      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	781a      	ldrb	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d11b      	bne.n	8006234 <HAL_I2C_Master_Transmit+0x188>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	781a      	ldrb	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	6a39      	ldr	r1, [r7, #32]
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f001 f960 	bl	80074fe <I2C_WaitOnBTFFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00d      	beq.n	8006260 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	2b04      	cmp	r3, #4
 800624a:	d107      	bne.n	800625c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800625a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e01a      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	2b00      	cmp	r3, #0
 8006266:	d194      	bne.n	8006192 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	00100002 	.word	0x00100002
 80062a4:	ffff0000 	.word	0xffff0000

080062a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08c      	sub	sp, #48	; 0x30
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	461a      	mov	r2, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	817b      	strh	r3, [r7, #10]
 80062b8:	4613      	mov	r3, r2
 80062ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7ff f9b8 	bl	8005630 <HAL_GetTick>
 80062c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	f040 820b 	bne.w	80066e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	2319      	movs	r3, #25
 80062d6:	2201      	movs	r2, #1
 80062d8:	497c      	ldr	r1, [pc, #496]	; (80064cc <HAL_I2C_Master_Receive+0x224>)
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 fff8 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	e1fe      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_I2C_Master_Receive+0x50>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e1f7      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b01      	cmp	r3, #1
 800630c:	d007      	beq.n	800631e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0201 	orr.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800632c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2222      	movs	r2, #34	; 0x22
 8006332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2210      	movs	r2, #16
 800633a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	893a      	ldrh	r2, [r7, #8]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a5c      	ldr	r2, [pc, #368]	; (80064d0 <HAL_I2C_Master_Receive+0x228>)
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006360:	8979      	ldrh	r1, [r7, #10]
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fd66 	bl	8006e38 <I2C_MasterRequestRead>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e1b8      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	2b00      	cmp	r3, #0
 800637c:	d113      	bne.n	80063a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637e:	2300      	movs	r3, #0
 8006380:	623b      	str	r3, [r7, #32]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	623b      	str	r3, [r7, #32]
 8006392:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	e18c      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d11b      	bne.n	80063e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	2300      	movs	r3, #0
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	61fb      	str	r3, [r7, #28]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	61fb      	str	r3, [r7, #28]
 80063d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	e16c      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d11b      	bne.n	8006426 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800640c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	61bb      	str	r3, [r7, #24]
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	e14c      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006436:	2300      	movs	r3, #0
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	617b      	str	r3, [r7, #20]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800644c:	e138      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	2b03      	cmp	r3, #3
 8006454:	f200 80f1 	bhi.w	800663a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645c:	2b01      	cmp	r3, #1
 800645e:	d123      	bne.n	80064a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f001 f88b 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e139      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691a      	ldr	r2, [r3, #16]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006490:	3b01      	subs	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064a6:	e10b      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d14e      	bne.n	800654e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	2200      	movs	r2, #0
 80064b8:	4906      	ldr	r1, [pc, #24]	; (80064d4 <HAL_I2C_Master_Receive+0x22c>)
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 ff08 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d008      	beq.n	80064d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e10e      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
 80064ca:	bf00      	nop
 80064cc:	00100002 	.word	0x00100002
 80064d0:	ffff0000 	.word	0xffff0000
 80064d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691a      	ldr	r2, [r3, #16]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691a      	ldr	r2, [r3, #16]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800654c:	e0b8      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	2200      	movs	r2, #0
 8006556:	4966      	ldr	r1, [pc, #408]	; (80066f0 <HAL_I2C_Master_Receive+0x448>)
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 feb9 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0bf      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2200      	movs	r2, #0
 80065b2:	494f      	ldr	r1, [pc, #316]	; (80066f0 <HAL_I2C_Master_Receive+0x448>)
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fe8b 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e091      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691a      	ldr	r2, [r3, #16]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f0:	3b01      	subs	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006638:	e042      	b.n	80066c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 ff9e 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e04c      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	3b01      	subs	r3, #1
 800666c:	b29a      	uxth	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	3b01      	subs	r3, #1
 800667a:	b29a      	uxth	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	2b04      	cmp	r3, #4
 800668c:	d118      	bne.n	80066c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	3b01      	subs	r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f47f aec2 	bne.w	800644e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3728      	adds	r7, #40	; 0x28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	00010004 	.word	0x00010004

080066f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	461a      	mov	r2, r3
 8006702:	4603      	mov	r3, r0
 8006704:	817b      	strh	r3, [r7, #10]
 8006706:	460b      	mov	r3, r1
 8006708:	813b      	strh	r3, [r7, #8]
 800670a:	4613      	mov	r3, r2
 800670c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800670e:	f7fe ff8f 	bl	8005630 <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b20      	cmp	r3, #32
 800671e:	f040 80d9 	bne.w	80068d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	2319      	movs	r3, #25
 8006728:	2201      	movs	r2, #1
 800672a:	496d      	ldr	r1, [pc, #436]	; (80068e0 <HAL_I2C_Mem_Write+0x1ec>)
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 fdcf 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
 800673a:	e0cc      	b.n	80068d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_I2C_Mem_Write+0x56>
 8006746:	2302      	movs	r3, #2
 8006748:	e0c5      	b.n	80068d6 <HAL_I2C_Mem_Write+0x1e2>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d007      	beq.n	8006770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2221      	movs	r2, #33	; 0x21
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2240      	movs	r2, #64	; 0x40
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a3a      	ldr	r2, [r7, #32]
 800679a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a4d      	ldr	r2, [pc, #308]	; (80068e4 <HAL_I2C_Mem_Write+0x1f0>)
 80067b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067b2:	88f8      	ldrh	r0, [r7, #6]
 80067b4:	893a      	ldrh	r2, [r7, #8]
 80067b6:	8979      	ldrh	r1, [r7, #10]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	4603      	mov	r3, r0
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f000 fc06 	bl	8006fd4 <I2C_RequestMemoryWrite>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d052      	beq.n	8006874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e081      	b.n	80068d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fe50 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d00d      	beq.n	80067fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d107      	bne.n	80067fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e06b      	b.n	80068d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	781a      	ldrb	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b04      	cmp	r3, #4
 800683a:	d11b      	bne.n	8006874 <HAL_I2C_Mem_Write+0x180>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	d017      	beq.n	8006874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	781a      	ldrb	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1aa      	bne.n	80067d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fe3c 	bl	80074fe <I2C_WaitOnBTFFlagUntilTimeout>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00d      	beq.n	80068a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	2b04      	cmp	r3, #4
 8006892:	d107      	bne.n	80068a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e016      	b.n	80068d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2220      	movs	r2, #32
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	e000      	b.n	80068d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	00100002 	.word	0x00100002
 80068e4:	ffff0000 	.word	0xffff0000

080068e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	; 0x30
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	4608      	mov	r0, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	461a      	mov	r2, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	817b      	strh	r3, [r7, #10]
 80068fa:	460b      	mov	r3, r1
 80068fc:	813b      	strh	r3, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006902:	f7fe fe95 	bl	8005630 <HAL_GetTick>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b20      	cmp	r3, #32
 8006912:	f040 8208 	bne.w	8006d26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	2319      	movs	r3, #25
 800691c:	2201      	movs	r2, #1
 800691e:	497b      	ldr	r1, [pc, #492]	; (8006b0c <HAL_I2C_Mem_Read+0x224>)
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fcd5 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800692c:	2302      	movs	r3, #2
 800692e:	e1fb      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_I2C_Mem_Read+0x56>
 800693a:	2302      	movs	r3, #2
 800693c:	e1f4      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b01      	cmp	r3, #1
 8006952:	d007      	beq.n	8006964 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2222      	movs	r2, #34	; 0x22
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2240      	movs	r2, #64	; 0x40
 8006980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4a5b      	ldr	r2, [pc, #364]	; (8006b10 <HAL_I2C_Mem_Read+0x228>)
 80069a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069a6:	88f8      	ldrh	r0, [r7, #6]
 80069a8:	893a      	ldrh	r2, [r7, #8]
 80069aa:	8979      	ldrh	r1, [r7, #10]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	4603      	mov	r3, r0
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fba2 	bl	8007100 <I2C_RequestMemoryRead>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e1b0      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d113      	bne.n	80069f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	623b      	str	r3, [r7, #32]
 80069e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	e184      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d11b      	bne.n	8006a36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	61fb      	str	r3, [r7, #28]
 8006a22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	e164      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d11b      	bne.n	8006a76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	e144      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a8c:	e138      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	f200 80f1 	bhi.w	8006c7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d123      	bne.n	8006ae8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006aa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fd6b 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e139      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	b29a      	uxth	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ae6:	e10b      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d14e      	bne.n	8006b8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	2200      	movs	r2, #0
 8006af8:	4906      	ldr	r1, [pc, #24]	; (8006b14 <HAL_I2C_Mem_Read+0x22c>)
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 fbe8 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e10e      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
 8006b0a:	bf00      	nop
 8006b0c:	00100002 	.word	0x00100002
 8006b10:	ffff0000 	.word	0xffff0000
 8006b14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	691a      	ldr	r2, [r3, #16]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	b2d2      	uxtb	r2, r2
 8006b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691a      	ldr	r2, [r3, #16]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b8c:	e0b8      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b94:	2200      	movs	r2, #0
 8006b96:	4966      	ldr	r1, [pc, #408]	; (8006d30 <HAL_I2C_Mem_Read+0x448>)
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fb99 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0bf      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	494f      	ldr	r1, [pc, #316]	; (8006d30 <HAL_I2C_Mem_Read+0x448>)
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f000 fb6b 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e091      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691a      	ldr	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c30:	3b01      	subs	r3, #1
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	b2d2      	uxtb	r2, r2
 8006c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	1c5a      	adds	r2, r3, #1
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c78:	e042      	b.n	8006d00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 fc7e 	bl	8007580 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e04c      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006caa:	3b01      	subs	r3, #1
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d118      	bne.n	8006d00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f47f aec2 	bne.w	8006a8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	e000      	b.n	8006d28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d26:	2302      	movs	r3, #2
  }
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3728      	adds	r7, #40	; 0x28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	00010004 	.word	0x00010004

08006d34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	460b      	mov	r3, r1
 8006d42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d006      	beq.n	8006d5e <I2C_MasterRequestWrite+0x2a>
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d003      	beq.n	8006d5e <I2C_MasterRequestWrite+0x2a>
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d5c:	d108      	bne.n	8006d70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e00b      	b.n	8006d88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d74:	2b12      	cmp	r3, #18
 8006d76:	d107      	bne.n	8006d88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fa9b 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00d      	beq.n	8006dbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dae:	d103      	bne.n	8006db8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e035      	b.n	8006e28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dc4:	d108      	bne.n	8006dd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dc6:	897b      	ldrh	r3, [r7, #10]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dd4:	611a      	str	r2, [r3, #16]
 8006dd6:	e01b      	b.n	8006e10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006dd8:	897b      	ldrh	r3, [r7, #10]
 8006dda:	11db      	asrs	r3, r3, #7
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 0306 	and.w	r3, r3, #6
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f063 030f 	orn	r3, r3, #15
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	490e      	ldr	r1, [pc, #56]	; (8006e30 <I2C_MasterRequestWrite+0xfc>)
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fac1 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e010      	b.n	8006e28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006e06:	897b      	ldrh	r3, [r7, #10]
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4907      	ldr	r1, [pc, #28]	; (8006e34 <I2C_MasterRequestWrite+0x100>)
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fab1 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	00010008 	.word	0x00010008
 8006e34:	00010002 	.word	0x00010002

08006e38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	607a      	str	r2, [r7, #4]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	460b      	mov	r3, r1
 8006e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d006      	beq.n	8006e72 <I2C_MasterRequestRead+0x3a>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d003      	beq.n	8006e72 <I2C_MasterRequestRead+0x3a>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e70:	d108      	bne.n	8006e84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e00b      	b.n	8006e9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	2b11      	cmp	r3, #17
 8006e8a:	d107      	bne.n	8006e9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fa11 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00d      	beq.n	8006ed0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec2:	d103      	bne.n	8006ecc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e079      	b.n	8006fc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ed8:	d108      	bne.n	8006eec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006eda:	897b      	ldrh	r3, [r7, #10]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f043 0301 	orr.w	r3, r3, #1
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	611a      	str	r2, [r3, #16]
 8006eea:	e05f      	b.n	8006fac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006eec:	897b      	ldrh	r3, [r7, #10]
 8006eee:	11db      	asrs	r3, r3, #7
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	f003 0306 	and.w	r3, r3, #6
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	f063 030f 	orn	r3, r3, #15
 8006efc:	b2da      	uxtb	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	4930      	ldr	r1, [pc, #192]	; (8006fcc <I2C_MasterRequestRead+0x194>)
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fa37 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e054      	b.n	8006fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006f1a:	897b      	ldrh	r3, [r7, #10]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4929      	ldr	r1, [pc, #164]	; (8006fd0 <I2C_MasterRequestRead+0x198>)
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 fa27 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e044      	b.n	8006fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	613b      	str	r3, [r7, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	613b      	str	r3, [r7, #16]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	613b      	str	r3, [r7, #16]
 8006f4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f9af 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f86:	d103      	bne.n	8006f90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e017      	b.n	8006fc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f94:	897b      	ldrh	r3, [r7, #10]
 8006f96:	11db      	asrs	r3, r3, #7
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 0306 	and.w	r3, r3, #6
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f063 030e 	orn	r3, r3, #14
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4907      	ldr	r1, [pc, #28]	; (8006fd0 <I2C_MasterRequestRead+0x198>)
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f000 f9e3 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	00010008 	.word	0x00010008
 8006fd0:	00010002 	.word	0x00010002

08006fd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	817b      	strh	r3, [r7, #10]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	813b      	strh	r3, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ffc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	2200      	movs	r2, #0
 8007006:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 f960 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007024:	d103      	bne.n	800702e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e05f      	b.n	80070f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007032:	897b      	ldrh	r3, [r7, #10]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007040:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007044:	6a3a      	ldr	r2, [r7, #32]
 8007046:	492d      	ldr	r1, [pc, #180]	; (80070fc <I2C_RequestMemoryWrite+0x128>)
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f998 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e04c      	b.n	80070f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007058:	2300      	movs	r3, #0
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699b      	ldr	r3, [r3, #24]
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800706e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007070:	6a39      	ldr	r1, [r7, #32]
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fa02 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00d      	beq.n	800709a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	2b04      	cmp	r3, #4
 8007084:	d107      	bne.n	8007096 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007094:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e02b      	b.n	80070f2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d105      	bne.n	80070ac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	611a      	str	r2, [r3, #16]
 80070aa:	e021      	b.n	80070f0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070ac:	893b      	ldrh	r3, [r7, #8]
 80070ae:	0a1b      	lsrs	r3, r3, #8
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070bc:	6a39      	ldr	r1, [r7, #32]
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f000 f9dc 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00d      	beq.n	80070e6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d107      	bne.n	80070e2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e005      	b.n	80070f2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070e6:	893b      	ldrh	r3, [r7, #8]
 80070e8:	b2da      	uxtb	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	00010002 	.word	0x00010002

08007100 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	4608      	mov	r0, r1
 800710a:	4611      	mov	r1, r2
 800710c:	461a      	mov	r2, r3
 800710e:	4603      	mov	r3, r0
 8007110:	817b      	strh	r3, [r7, #10]
 8007112:	460b      	mov	r3, r1
 8007114:	813b      	strh	r3, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007128:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6a3b      	ldr	r3, [r7, #32]
 8007140:	2200      	movs	r2, #0
 8007142:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 f8c2 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00d      	beq.n	800716e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800715c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007160:	d103      	bne.n	800716a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007168:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e0aa      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800716e:	897b      	ldrh	r3, [r7, #10]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	461a      	mov	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800717c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	6a3a      	ldr	r2, [r7, #32]
 8007182:	4952      	ldr	r1, [pc, #328]	; (80072cc <I2C_RequestMemoryRead+0x1cc>)
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f8fa 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e097      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007194:	2300      	movs	r3, #0
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	617b      	str	r3, [r7, #20]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ac:	6a39      	ldr	r1, [r7, #32]
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f000 f964 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d107      	bne.n	80071d2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e076      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d105      	bne.n	80071e8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071dc:	893b      	ldrh	r3, [r7, #8]
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	611a      	str	r2, [r3, #16]
 80071e6:	e021      	b.n	800722c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071e8:	893b      	ldrh	r3, [r7, #8]
 80071ea:	0a1b      	lsrs	r3, r3, #8
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071f8:	6a39      	ldr	r1, [r7, #32]
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f93e 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	2b04      	cmp	r3, #4
 800720c:	d107      	bne.n	800721e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e050      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007222:	893b      	ldrh	r3, [r7, #8]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800722c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722e:	6a39      	ldr	r1, [r7, #32]
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 f923 	bl	800747c <I2C_WaitOnTXEFlagUntilTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00d      	beq.n	8007258 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	2b04      	cmp	r3, #4
 8007242:	d107      	bne.n	8007254 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007252:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e035      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007266:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	2200      	movs	r2, #0
 8007270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f82b 	bl	80072d0 <I2C_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00d      	beq.n	800729c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800728e:	d103      	bne.n	8007298 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e013      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800729c:	897b      	ldrh	r3, [r7, #10]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	6a3a      	ldr	r2, [r7, #32]
 80072b0:	4906      	ldr	r1, [pc, #24]	; (80072cc <I2C_RequestMemoryRead+0x1cc>)
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f000 f863 	bl	800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3718      	adds	r7, #24
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	00010002 	.word	0x00010002

080072d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	4613      	mov	r3, r2
 80072de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072e0:	e025      	b.n	800732e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e8:	d021      	beq.n	800732e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ea:	f7fe f9a1 	bl	8005630 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d302      	bcc.n	8007300 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d116      	bne.n	800732e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2220      	movs	r2, #32
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f043 0220 	orr.w	r2, r3, #32
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e023      	b.n	8007376 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10d      	bne.n	8007354 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	43da      	mvns	r2, r3
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4013      	ands	r3, r2
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	e00c      	b.n	800736e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	43da      	mvns	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4013      	ands	r3, r2
 8007360:	b29b      	uxth	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	bf0c      	ite	eq
 8007366:	2301      	moveq	r3, #1
 8007368:	2300      	movne	r3, #0
 800736a:	b2db      	uxtb	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	429a      	cmp	r2, r3
 8007372:	d0b6      	beq.n	80072e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800738c:	e051      	b.n	8007432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739c:	d123      	bne.n	80073e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	f043 0204 	orr.w	r2, r3, #4
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e046      	b.n	8007474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ec:	d021      	beq.n	8007432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073ee:	f7fe f91f 	bl	8005630 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d302      	bcc.n	8007404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d116      	bne.n	8007432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2200      	movs	r2, #0
 8007408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2220      	movs	r2, #32
 800740e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0220 	orr.w	r2, r3, #32
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e020      	b.n	8007474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b01      	cmp	r3, #1
 800743a:	d10c      	bne.n	8007456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	43da      	mvns	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	b29b      	uxth	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	bf14      	ite	ne
 800744e:	2301      	movne	r3, #1
 8007450:	2300      	moveq	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	e00b      	b.n	800746e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	43da      	mvns	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4013      	ands	r3, r2
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	bf14      	ite	ne
 8007468:	2301      	movne	r3, #1
 800746a:	2300      	moveq	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d18d      	bne.n	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007488:	e02d      	b.n	80074e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f8ce 	bl	800762c <I2C_IsAcknowledgeFailed>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e02d      	b.n	80074f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a0:	d021      	beq.n	80074e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a2:	f7fe f8c5 	bl	8005630 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d302      	bcc.n	80074b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d116      	bne.n	80074e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f043 0220 	orr.w	r2, r3, #32
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e007      	b.n	80074f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695b      	ldr	r3, [r3, #20]
 80074ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f0:	2b80      	cmp	r3, #128	; 0x80
 80074f2:	d1ca      	bne.n	800748a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800750a:	e02d      	b.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800750c:	68f8      	ldr	r0, [r7, #12]
 800750e:	f000 f88d 	bl	800762c <I2C_IsAcknowledgeFailed>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e02d      	b.n	8007578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007522:	d021      	beq.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007524:	f7fe f884 	bl	8005630 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	429a      	cmp	r2, r3
 8007532:	d302      	bcc.n	800753a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d116      	bne.n	8007568 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	f043 0220 	orr.w	r2, r3, #32
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e007      	b.n	8007578 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b04      	cmp	r3, #4
 8007574:	d1ca      	bne.n	800750c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800758c:	e042      	b.n	8007614 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b10      	cmp	r3, #16
 800759a:	d119      	bne.n	80075d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0210 	mvn.w	r2, #16
 80075a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e029      	b.n	8007624 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075d0:	f7fe f82e 	bl	8005630 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d302      	bcc.n	80075e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d116      	bne.n	8007614 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007600:	f043 0220 	orr.w	r2, r3, #32
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e007      	b.n	8007624 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761e:	2b40      	cmp	r3, #64	; 0x40
 8007620:	d1b5      	bne.n	800758e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800763e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007642:	d11b      	bne.n	800767c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800764c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	f043 0204 	orr.w	r2, r3, #4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	370c      	adds	r7, #12
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr
	...

0800768c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e267      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d075      	beq.n	8007796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076aa:	4b88      	ldr	r3, [pc, #544]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 030c 	and.w	r3, r3, #12
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	d00c      	beq.n	80076d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076b6:	4b85      	ldr	r3, [pc, #532]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076be:	2b08      	cmp	r3, #8
 80076c0:	d112      	bne.n	80076e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076c2:	4b82      	ldr	r3, [pc, #520]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ce:	d10b      	bne.n	80076e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d0:	4b7e      	ldr	r3, [pc, #504]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d05b      	beq.n	8007794 <HAL_RCC_OscConfig+0x108>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d157      	bne.n	8007794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e242      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f0:	d106      	bne.n	8007700 <HAL_RCC_OscConfig+0x74>
 80076f2:	4b76      	ldr	r3, [pc, #472]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a75      	ldr	r2, [pc, #468]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80076f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	e01d      	b.n	800773c <HAL_RCC_OscConfig+0xb0>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007708:	d10c      	bne.n	8007724 <HAL_RCC_OscConfig+0x98>
 800770a:	4b70      	ldr	r3, [pc, #448]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a6f      	ldr	r2, [pc, #444]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	4b6d      	ldr	r3, [pc, #436]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a6c      	ldr	r2, [pc, #432]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 800771c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	e00b      	b.n	800773c <HAL_RCC_OscConfig+0xb0>
 8007724:	4b69      	ldr	r3, [pc, #420]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a68      	ldr	r2, [pc, #416]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 800772a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	4b66      	ldr	r3, [pc, #408]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a65      	ldr	r2, [pc, #404]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800773a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d013      	beq.n	800776c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007744:	f7fd ff74 	bl	8005630 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800774c:	f7fd ff70 	bl	8005630 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b64      	cmp	r3, #100	; 0x64
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e207      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800775e:	4b5b      	ldr	r3, [pc, #364]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d0f0      	beq.n	800774c <HAL_RCC_OscConfig+0xc0>
 800776a:	e014      	b.n	8007796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800776c:	f7fd ff60 	bl	8005630 <HAL_GetTick>
 8007770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007774:	f7fd ff5c 	bl	8005630 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b64      	cmp	r3, #100	; 0x64
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e1f3      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007786:	4b51      	ldr	r3, [pc, #324]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f0      	bne.n	8007774 <HAL_RCC_OscConfig+0xe8>
 8007792:	e000      	b.n	8007796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d063      	beq.n	800786a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077a2:	4b4a      	ldr	r3, [pc, #296]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f003 030c 	and.w	r3, r3, #12
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00b      	beq.n	80077c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ae:	4b47      	ldr	r3, [pc, #284]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	d11c      	bne.n	80077f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ba:	4b44      	ldr	r3, [pc, #272]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d116      	bne.n	80077f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077c6:	4b41      	ldr	r3, [pc, #260]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_RCC_OscConfig+0x152>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d001      	beq.n	80077de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e1c7      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077de:	4b3b      	ldr	r3, [pc, #236]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4937      	ldr	r1, [pc, #220]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077f2:	e03a      	b.n	800786a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d020      	beq.n	800783e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077fc:	4b34      	ldr	r3, [pc, #208]	; (80078d0 <HAL_RCC_OscConfig+0x244>)
 80077fe:	2201      	movs	r2, #1
 8007800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007802:	f7fd ff15 	bl	8005630 <HAL_GetTick>
 8007806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800780a:	f7fd ff11 	bl	8005630 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e1a8      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800781c:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	4925      	ldr	r1, [pc, #148]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007838:	4313      	orrs	r3, r2
 800783a:	600b      	str	r3, [r1, #0]
 800783c:	e015      	b.n	800786a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <HAL_RCC_OscConfig+0x244>)
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007844:	f7fd fef4 	bl	8005630 <HAL_GetTick>
 8007848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800784a:	e008      	b.n	800785e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800784c:	f7fd fef0 	bl	8005630 <HAL_GetTick>
 8007850:	4602      	mov	r2, r0
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	1ad3      	subs	r3, r2, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d901      	bls.n	800785e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e187      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800785e:	4b1b      	ldr	r3, [pc, #108]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1f0      	bne.n	800784c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d036      	beq.n	80078e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d016      	beq.n	80078ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800787e:	4b15      	ldr	r3, [pc, #84]	; (80078d4 <HAL_RCC_OscConfig+0x248>)
 8007880:	2201      	movs	r2, #1
 8007882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007884:	f7fd fed4 	bl	8005630 <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800788a:	e008      	b.n	800789e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800788c:	f7fd fed0 	bl	8005630 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d901      	bls.n	800789e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e167      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800789e:	4b0b      	ldr	r3, [pc, #44]	; (80078cc <HAL_RCC_OscConfig+0x240>)
 80078a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0f0      	beq.n	800788c <HAL_RCC_OscConfig+0x200>
 80078aa:	e01b      	b.n	80078e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078ac:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <HAL_RCC_OscConfig+0x248>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078b2:	f7fd febd 	bl	8005630 <HAL_GetTick>
 80078b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b8:	e00e      	b.n	80078d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078ba:	f7fd feb9 	bl	8005630 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d907      	bls.n	80078d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e150      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
 80078cc:	40023800 	.word	0x40023800
 80078d0:	42470000 	.word	0x42470000
 80078d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078d8:	4b88      	ldr	r3, [pc, #544]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 80078da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1ea      	bne.n	80078ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0304 	and.w	r3, r3, #4
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 8097 	beq.w	8007a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078f6:	4b81      	ldr	r3, [pc, #516]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10f      	bne.n	8007922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	4b7d      	ldr	r3, [pc, #500]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	4a7c      	ldr	r2, [pc, #496]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 800790c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007910:	6413      	str	r3, [r2, #64]	; 0x40
 8007912:	4b7a      	ldr	r3, [pc, #488]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791a:	60bb      	str	r3, [r7, #8]
 800791c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800791e:	2301      	movs	r3, #1
 8007920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007922:	4b77      	ldr	r3, [pc, #476]	; (8007b00 <HAL_RCC_OscConfig+0x474>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800792a:	2b00      	cmp	r3, #0
 800792c:	d118      	bne.n	8007960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800792e:	4b74      	ldr	r3, [pc, #464]	; (8007b00 <HAL_RCC_OscConfig+0x474>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a73      	ldr	r2, [pc, #460]	; (8007b00 <HAL_RCC_OscConfig+0x474>)
 8007934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800793a:	f7fd fe79 	bl	8005630 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007940:	e008      	b.n	8007954 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007942:	f7fd fe75 	bl	8005630 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e10c      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007954:	4b6a      	ldr	r3, [pc, #424]	; (8007b00 <HAL_RCC_OscConfig+0x474>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f0      	beq.n	8007942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d106      	bne.n	8007976 <HAL_RCC_OscConfig+0x2ea>
 8007968:	4b64      	ldr	r3, [pc, #400]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a63      	ldr	r2, [pc, #396]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	e01c      	b.n	80079b0 <HAL_RCC_OscConfig+0x324>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	2b05      	cmp	r3, #5
 800797c:	d10c      	bne.n	8007998 <HAL_RCC_OscConfig+0x30c>
 800797e:	4b5f      	ldr	r3, [pc, #380]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007982:	4a5e      	ldr	r2, [pc, #376]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007984:	f043 0304 	orr.w	r3, r3, #4
 8007988:	6713      	str	r3, [r2, #112]	; 0x70
 800798a:	4b5c      	ldr	r3, [pc, #368]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a5b      	ldr	r2, [pc, #364]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007990:	f043 0301 	orr.w	r3, r3, #1
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
 8007996:	e00b      	b.n	80079b0 <HAL_RCC_OscConfig+0x324>
 8007998:	4b58      	ldr	r3, [pc, #352]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 800799a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799c:	4a57      	ldr	r2, [pc, #348]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 800799e:	f023 0301 	bic.w	r3, r3, #1
 80079a2:	6713      	str	r3, [r2, #112]	; 0x70
 80079a4:	4b55      	ldr	r3, [pc, #340]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	4a54      	ldr	r2, [pc, #336]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 80079aa:	f023 0304 	bic.w	r3, r3, #4
 80079ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d015      	beq.n	80079e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079b8:	f7fd fe3a 	bl	8005630 <HAL_GetTick>
 80079bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079be:	e00a      	b.n	80079d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079c0:	f7fd fe36 	bl	8005630 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e0cb      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079d6:	4b49      	ldr	r3, [pc, #292]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0ee      	beq.n	80079c0 <HAL_RCC_OscConfig+0x334>
 80079e2:	e014      	b.n	8007a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079e4:	f7fd fe24 	bl	8005630 <HAL_GetTick>
 80079e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079ea:	e00a      	b.n	8007a02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ec:	f7fd fe20 	bl	8005630 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e0b5      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a02:	4b3e      	ldr	r3, [pc, #248]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1ee      	bne.n	80079ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d105      	bne.n	8007a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a14:	4b39      	ldr	r3, [pc, #228]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	4a38      	ldr	r2, [pc, #224]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	699b      	ldr	r3, [r3, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 80a1 	beq.w	8007b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a2a:	4b34      	ldr	r3, [pc, #208]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d05c      	beq.n	8007af0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d141      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a3e:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <HAL_RCC_OscConfig+0x478>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a44:	f7fd fdf4 	bl	8005630 <HAL_GetTick>
 8007a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a4a:	e008      	b.n	8007a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a4c:	f7fd fdf0 	bl	8005630 <HAL_GetTick>
 8007a50:	4602      	mov	r2, r0
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d901      	bls.n	8007a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a5a:	2303      	movs	r3, #3
 8007a5c:	e087      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a5e:	4b27      	ldr	r3, [pc, #156]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1f0      	bne.n	8007a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69da      	ldr	r2, [r3, #28]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a80:	085b      	lsrs	r3, r3, #1
 8007a82:	3b01      	subs	r3, #1
 8007a84:	041b      	lsls	r3, r3, #16
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	061b      	lsls	r3, r3, #24
 8007a8e:	491b      	ldr	r1, [pc, #108]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a94:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <HAL_RCC_OscConfig+0x478>)
 8007a96:	2201      	movs	r2, #1
 8007a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9a:	f7fd fdc9 	bl	8005630 <HAL_GetTick>
 8007a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aa2:	f7fd fdc5 	bl	8005630 <HAL_GetTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e05c      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ab4:	4b11      	ldr	r3, [pc, #68]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d0f0      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x416>
 8007ac0:	e054      	b.n	8007b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <HAL_RCC_OscConfig+0x478>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ac8:	f7fd fdb2 	bl	8005630 <HAL_GetTick>
 8007acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ad0:	f7fd fdae 	bl	8005630 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e045      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ae2:	4b06      	ldr	r3, [pc, #24]	; (8007afc <HAL_RCC_OscConfig+0x470>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x444>
 8007aee:	e03d      	b.n	8007b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d107      	bne.n	8007b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e038      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
 8007afc:	40023800 	.word	0x40023800
 8007b00:	40007000 	.word	0x40007000
 8007b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b08:	4b1b      	ldr	r3, [pc, #108]	; (8007b78 <HAL_RCC_OscConfig+0x4ec>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	699b      	ldr	r3, [r3, #24]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d028      	beq.n	8007b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d121      	bne.n	8007b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d11a      	bne.n	8007b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b38:	4013      	ands	r3, r2
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d111      	bne.n	8007b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4e:	085b      	lsrs	r3, r3, #1
 8007b50:	3b01      	subs	r3, #1
 8007b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d107      	bne.n	8007b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d001      	beq.n	8007b6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e000      	b.n	8007b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	40023800 	.word	0x40023800

08007b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e0cc      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b90:	4b68      	ldr	r3, [pc, #416]	; (8007d34 <HAL_RCC_ClockConfig+0x1b8>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0307 	and.w	r3, r3, #7
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d90c      	bls.n	8007bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b9e:	4b65      	ldr	r3, [pc, #404]	; (8007d34 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba6:	4b63      	ldr	r3, [pc, #396]	; (8007d34 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d001      	beq.n	8007bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0b8      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d020      	beq.n	8007c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0304 	and.w	r3, r3, #4
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bd0:	4b59      	ldr	r3, [pc, #356]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4a58      	ldr	r2, [pc, #352]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007be8:	4b53      	ldr	r3, [pc, #332]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	4a52      	ldr	r2, [pc, #328]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007bee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bf4:	4b50      	ldr	r3, [pc, #320]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	494d      	ldr	r1, [pc, #308]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d044      	beq.n	8007c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d107      	bne.n	8007c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c1a:	4b47      	ldr	r3, [pc, #284]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d119      	bne.n	8007c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e07f      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d003      	beq.n	8007c3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d107      	bne.n	8007c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c3a:	4b3f      	ldr	r3, [pc, #252]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e06f      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c4a:	4b3b      	ldr	r3, [pc, #236]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e067      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c5a:	4b37      	ldr	r3, [pc, #220]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f023 0203 	bic.w	r2, r3, #3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	4934      	ldr	r1, [pc, #208]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c6c:	f7fd fce0 	bl	8005630 <HAL_GetTick>
 8007c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c72:	e00a      	b.n	8007c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c74:	f7fd fcdc 	bl	8005630 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e04f      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c8a:	4b2b      	ldr	r3, [pc, #172]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 020c 	and.w	r2, r3, #12
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d1eb      	bne.n	8007c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c9c:	4b25      	ldr	r3, [pc, #148]	; (8007d34 <HAL_RCC_ClockConfig+0x1b8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0307 	and.w	r3, r3, #7
 8007ca4:	683a      	ldr	r2, [r7, #0]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d20c      	bcs.n	8007cc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007caa:	4b22      	ldr	r3, [pc, #136]	; (8007d34 <HAL_RCC_ClockConfig+0x1b8>)
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cb2:	4b20      	ldr	r3, [pc, #128]	; (8007d34 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d001      	beq.n	8007cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e032      	b.n	8007d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d008      	beq.n	8007ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cd0:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	4916      	ldr	r1, [pc, #88]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0308 	and.w	r3, r3, #8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cee:	4b12      	ldr	r3, [pc, #72]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	490e      	ldr	r1, [pc, #56]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d02:	f000 f821 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8007d06:	4602      	mov	r2, r0
 8007d08:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	091b      	lsrs	r3, r3, #4
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	490a      	ldr	r1, [pc, #40]	; (8007d3c <HAL_RCC_ClockConfig+0x1c0>)
 8007d14:	5ccb      	ldrb	r3, [r1, r3]
 8007d16:	fa22 f303 	lsr.w	r3, r2, r3
 8007d1a:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <HAL_RCC_ClockConfig+0x1c4>)
 8007d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d1e:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <HAL_RCC_ClockConfig+0x1c8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fd fc40 	bl	80055a8 <HAL_InitTick>

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40023c00 	.word	0x40023c00
 8007d38:	40023800 	.word	0x40023800
 8007d3c:	08011e80 	.word	0x08011e80
 8007d40:	20000018 	.word	0x20000018
 8007d44:	2000001c 	.word	0x2000001c

08007d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d4c:	b094      	sub	sp, #80	; 0x50
 8007d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	647b      	str	r3, [r7, #68]	; 0x44
 8007d54:	2300      	movs	r3, #0
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d58:	2300      	movs	r3, #0
 8007d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d60:	4b79      	ldr	r3, [pc, #484]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 030c 	and.w	r3, r3, #12
 8007d68:	2b08      	cmp	r3, #8
 8007d6a:	d00d      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x40>
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	f200 80e1 	bhi.w	8007f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <HAL_RCC_GetSysClockFreq+0x34>
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d003      	beq.n	8007d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d7a:	e0db      	b.n	8007f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d7c:	4b73      	ldr	r3, [pc, #460]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8007d7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007d80:	e0db      	b.n	8007f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d82:	4b72      	ldr	r3, [pc, #456]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8007d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d86:	e0d8      	b.n	8007f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d88:	4b6f      	ldr	r3, [pc, #444]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d92:	4b6d      	ldr	r3, [pc, #436]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d063      	beq.n	8007e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d9e:	4b6a      	ldr	r3, [pc, #424]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	099b      	lsrs	r3, r3, #6
 8007da4:	2200      	movs	r2, #0
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8007da8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30
 8007db2:	2300      	movs	r3, #0
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
 8007db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007dba:	4622      	mov	r2, r4
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	f04f 0000 	mov.w	r0, #0
 8007dc2:	f04f 0100 	mov.w	r1, #0
 8007dc6:	0159      	lsls	r1, r3, #5
 8007dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dcc:	0150      	lsls	r0, r2, #5
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	1a51      	subs	r1, r2, r1
 8007dd6:	6139      	str	r1, [r7, #16]
 8007dd8:	4629      	mov	r1, r5
 8007dda:	eb63 0301 	sbc.w	r3, r3, r1
 8007dde:	617b      	str	r3, [r7, #20]
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dec:	4659      	mov	r1, fp
 8007dee:	018b      	lsls	r3, r1, #6
 8007df0:	4651      	mov	r1, sl
 8007df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007df6:	4651      	mov	r1, sl
 8007df8:	018a      	lsls	r2, r1, #6
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8007e00:	4659      	mov	r1, fp
 8007e02:	eb63 0901 	sbc.w	r9, r3, r1
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e1a:	4690      	mov	r8, r2
 8007e1c:	4699      	mov	r9, r3
 8007e1e:	4623      	mov	r3, r4
 8007e20:	eb18 0303 	adds.w	r3, r8, r3
 8007e24:	60bb      	str	r3, [r7, #8]
 8007e26:	462b      	mov	r3, r5
 8007e28:	eb49 0303 	adc.w	r3, r9, r3
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	028b      	lsls	r3, r1, #10
 8007e3e:	4621      	mov	r1, r4
 8007e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e44:	4621      	mov	r1, r4
 8007e46:	028a      	lsls	r2, r1, #10
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e4e:	2200      	movs	r2, #0
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e58:	f7f8 fefe 	bl	8000c58 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4613      	mov	r3, r2
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e64:	e058      	b.n	8007f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e66:	4b38      	ldr	r3, [pc, #224]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	099b      	lsrs	r3, r3, #6
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	4611      	mov	r1, r2
 8007e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e76:	623b      	str	r3, [r7, #32]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e80:	4642      	mov	r2, r8
 8007e82:	464b      	mov	r3, r9
 8007e84:	f04f 0000 	mov.w	r0, #0
 8007e88:	f04f 0100 	mov.w	r1, #0
 8007e8c:	0159      	lsls	r1, r3, #5
 8007e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e92:	0150      	lsls	r0, r2, #5
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4641      	mov	r1, r8
 8007e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e9e:	4649      	mov	r1, r9
 8007ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8007ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	00eb      	lsls	r3, r5, #3
 8007eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ece:	00e2      	lsls	r2, r4, #3
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	461d      	mov	r5, r3
 8007ed4:	4643      	mov	r3, r8
 8007ed6:	18e3      	adds	r3, r4, r3
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	464b      	mov	r3, r9
 8007edc:	eb45 0303 	adc.w	r3, r5, r3
 8007ee0:	607b      	str	r3, [r7, #4]
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eee:	4629      	mov	r1, r5
 8007ef0:	028b      	lsls	r3, r1, #10
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ef8:	4621      	mov	r1, r4
 8007efa:	028a      	lsls	r2, r1, #10
 8007efc:	4610      	mov	r0, r2
 8007efe:	4619      	mov	r1, r3
 8007f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f02:	2200      	movs	r2, #0
 8007f04:	61bb      	str	r3, [r7, #24]
 8007f06:	61fa      	str	r2, [r7, #28]
 8007f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f0c:	f7f8 fea4 	bl	8000c58 <__aeabi_uldivmod>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4613      	mov	r3, r2
 8007f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f18:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	3301      	adds	r3, #1
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f32:	e002      	b.n	8007f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8007f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3750      	adds	r7, #80	; 0x50
 8007f40:	46bd      	mov	sp, r7
 8007f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f46:	bf00      	nop
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	00f42400 	.word	0x00f42400

08007f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f50:	b480      	push	{r7}
 8007f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f54:	4b03      	ldr	r3, [pc, #12]	; (8007f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f56:	681b      	ldr	r3, [r3, #0]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018

08007f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f6c:	f7ff fff0 	bl	8007f50 <HAL_RCC_GetHCLKFreq>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	0a9b      	lsrs	r3, r3, #10
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	4903      	ldr	r1, [pc, #12]	; (8007f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f7e:	5ccb      	ldrb	r3, [r1, r3]
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	08011e90 	.word	0x08011e90

08007f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f94:	f7ff ffdc 	bl	8007f50 <HAL_RCC_GetHCLKFreq>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	0b5b      	lsrs	r3, r3, #13
 8007fa0:	f003 0307 	and.w	r3, r3, #7
 8007fa4:	4903      	ldr	r1, [pc, #12]	; (8007fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fa6:	5ccb      	ldrb	r3, [r1, r3]
 8007fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	08011e90 	.word	0x08011e90

08007fb8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e022      	b.n	8008010 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d105      	bne.n	8007fe2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fc fff5 	bl	8004fcc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f814 	bl	8008018 <HAL_SD_InitCard>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e00a      	b.n	8008010 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800800e:	2300      	movs	r3, #0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3708      	adds	r7, #8
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008018:	b5b0      	push	{r4, r5, r7, lr}
 800801a:	b08e      	sub	sp, #56	; 0x38
 800801c:	af04      	add	r7, sp, #16
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008020:	2300      	movs	r3, #0
 8008022:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008028:	2300      	movs	r3, #0
 800802a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008030:	2300      	movs	r3, #0
 8008032:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008034:	2376      	movs	r3, #118	; 0x76
 8008036:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681d      	ldr	r5, [r3, #0]
 800803c:	466c      	mov	r4, sp
 800803e:	f107 0314 	add.w	r3, r7, #20
 8008042:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800804a:	f107 0308 	add.w	r3, r7, #8
 800804e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008050:	4628      	mov	r0, r5
 8008052:	f002 febf 	bl	800add4 <SDIO_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800805c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e04f      	b.n	8008108 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008068:	4b29      	ldr	r3, [pc, #164]	; (8008110 <HAL_SD_InitCard+0xf8>)
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f002 fef7 	bl	800ae66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <HAL_SD_InitCard+0xf8>)
 800807a:	2201      	movs	r2, #1
 800807c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800807e:	2002      	movs	r0, #2
 8008080:	f7fd fae2 	bl	8005648 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fe69 	bl	8008d5c <SD_PowerON>
 800808a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e02e      	b.n	8008108 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fd88 	bl	8008bc0 <SD_InitCard>
 80080b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	431a      	orrs	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e01b      	b.n	8008108 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80080d8:	4618      	mov	r0, r3
 80080da:	f002 ff56 	bl	800af8a <SDMMC_CmdBlockLength>
 80080de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00f      	beq.n	8008106 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <HAL_SD_InitCard+0xfc>)
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bdb0      	pop	{r4, r5, r7, pc}
 8008110:	422580a0 	.word	0x422580a0
 8008114:	004005ff 	.word	0x004005ff

08008118 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b092      	sub	sp, #72	; 0x48
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008126:	f7fd fa83 	bl	8005630 <HAL_GetTick>
 800812a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d107      	bne.n	800814a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e1bd      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b01      	cmp	r3, #1
 8008154:	f040 81b0 	bne.w	80084b8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800815e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	441a      	add	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008168:	429a      	cmp	r2, r3
 800816a:	d907      	bls.n	800817c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e1a4      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2203      	movs	r2, #3
 8008180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2200      	movs	r2, #0
 800818a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008190:	2b01      	cmp	r3, #1
 8008192:	d002      	beq.n	800819a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	025b      	lsls	r3, r3, #9
 8008198:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800819e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	025b      	lsls	r3, r3, #9
 80081a4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80081a6:	2390      	movs	r3, #144	; 0x90
 80081a8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80081aa:	2302      	movs	r3, #2
 80081ac:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80081b2:	2301      	movs	r3, #1
 80081b4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f107 0214 	add.w	r2, r7, #20
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f002 feb6 	bl	800af32 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d90a      	bls.n	80081e2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2202      	movs	r2, #2
 80081d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081d8:	4618      	mov	r0, r3
 80081da:	f002 ff1a 	bl	800b012 <SDMMC_CmdReadMultiBlock>
 80081de:	6478      	str	r0, [r7, #68]	; 0x44
 80081e0:	e009      	b.n	80081f6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081ee:	4618      	mov	r0, r3
 80081f0:	f002 feed 	bl	800afce <SDMMC_CmdReadSingleBlock>
 80081f4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d012      	beq.n	8008222 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a7a      	ldr	r2, [pc, #488]	; (80083ec <HAL_SD_ReadBlocks+0x2d4>)
 8008202:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800820a:	431a      	orrs	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e151      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008226:	e061      	b.n	80082ec <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d03c      	beq.n	80082b0 <HAL_SD_ReadBlocks+0x198>
 8008236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d039      	beq.n	80082b0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800823c:	2300      	movs	r3, #0
 800823e:	643b      	str	r3, [r7, #64]	; 0x40
 8008240:	e033      	b.n	80082aa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f002 fdef 	bl	800ae2a <SDIO_ReadFIFO>
 800824c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	b2da      	uxtb	r2, r3
 8008252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008254:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008258:	3301      	adds	r3, #1
 800825a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800825c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825e:	3b01      	subs	r3, #1
 8008260:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	0a1b      	lsrs	r3, r3, #8
 8008266:	b2da      	uxtb	r2, r3
 8008268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	3301      	adds	r3, #1
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008274:	3b01      	subs	r3, #1
 8008276:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	0c1b      	lsrs	r3, r3, #16
 800827c:	b2da      	uxtb	r2, r3
 800827e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008280:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	3301      	adds	r3, #1
 8008286:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828a:	3b01      	subs	r3, #1
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	0e1b      	lsrs	r3, r3, #24
 8008292:	b2da      	uxtb	r2, r3
 8008294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008296:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829a:	3301      	adds	r3, #1
 800829c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800829e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a0:	3b01      	subs	r3, #1
 80082a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80082a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a6:	3301      	adds	r3, #1
 80082a8:	643b      	str	r3, [r7, #64]	; 0x40
 80082aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ac:	2b07      	cmp	r3, #7
 80082ae:	d9c8      	bls.n	8008242 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80082b0:	f7fd f9be 	bl	8005630 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082bc:	429a      	cmp	r2, r3
 80082be:	d902      	bls.n	80082c6 <HAL_SD_ReadBlocks+0x1ae>
 80082c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d112      	bne.n	80082ec <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a48      	ldr	r2, [pc, #288]	; (80083ec <HAL_SD_ReadBlocks+0x2d4>)
 80082cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80082e8:	2303      	movs	r3, #3
 80082ea:	e0ec      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f2:	f240 332a 	movw	r3, #810	; 0x32a
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d095      	beq.n	8008228 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d022      	beq.n	8008350 <HAL_SD_ReadBlocks+0x238>
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d91f      	bls.n	8008350 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008314:	2b03      	cmp	r3, #3
 8008316:	d01b      	beq.n	8008350 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4618      	mov	r0, r3
 800831e:	f002 fedf 	bl	800b0e0 <SDMMC_CmdStopTransfer>
 8008322:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008326:	2b00      	cmp	r3, #0
 8008328:	d012      	beq.n	8008350 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a2f      	ldr	r2, [pc, #188]	; (80083ec <HAL_SD_ReadBlocks+0x2d4>)
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008338:	431a      	orrs	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e0ba      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	2b00      	cmp	r3, #0
 800835c:	d012      	beq.n	8008384 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a22      	ldr	r2, [pc, #136]	; (80083ec <HAL_SD_ReadBlocks+0x2d4>)
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836a:	f043 0208 	orr.w	r2, r3, #8
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e0a0      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d012      	beq.n	80083b8 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a15      	ldr	r2, [pc, #84]	; (80083ec <HAL_SD_ReadBlocks+0x2d4>)
 8008398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	f043 0202 	orr.w	r2, r3, #2
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e086      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d063      	beq.n	800848e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a08      	ldr	r2, [pc, #32]	; (80083ec <HAL_SD_ReadBlocks+0x2d4>)
 80083cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	f043 0220 	orr.w	r2, r3, #32
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e06c      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
 80083ec:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f002 fd18 	bl	800ae2a <SDIO_ReadFIFO>
 80083fa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008402:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008406:	3301      	adds	r3, #1
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800840a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840c:	3b01      	subs	r3, #1
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	b2da      	uxtb	r2, r3
 8008416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008418:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	3301      	adds	r3, #1
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	3b01      	subs	r3, #1
 8008424:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008428:	0c1b      	lsrs	r3, r3, #16
 800842a:	b2da      	uxtb	r2, r3
 800842c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	3301      	adds	r3, #1
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008438:	3b01      	subs	r3, #1
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	0e1b      	lsrs	r3, r3, #24
 8008440:	b2da      	uxtb	r2, r3
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008448:	3301      	adds	r3, #1
 800844a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800844c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800844e:	3b01      	subs	r3, #1
 8008450:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008452:	f7fd f8ed 	bl	8005630 <HAL_GetTick>
 8008456:	4602      	mov	r2, r0
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800845e:	429a      	cmp	r2, r3
 8008460:	d902      	bls.n	8008468 <HAL_SD_ReadBlocks+0x350>
 8008462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008464:	2b00      	cmp	r3, #0
 8008466:	d112      	bne.n	800848e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a18      	ldr	r2, [pc, #96]	; (80084d0 <HAL_SD_ReadBlocks+0x3b8>)
 800846e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e01b      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <HAL_SD_ReadBlocks+0x38a>
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1a6      	bne.n	80083f0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f240 523a 	movw	r2, #1338	; 0x53a
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e006      	b.n	80084c6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
  }
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3748      	adds	r7, #72	; 0x48
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	004005ff 	.word	0x004005ff

080084d4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b092      	sub	sp, #72	; 0x48
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084e2:	f7fd f8a5 	bl	8005630 <HAL_GetTick>
 80084e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d107      	bne.n	8008506 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e166      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800850c:	b2db      	uxtb	r3, r3
 800850e:	2b01      	cmp	r3, #1
 8008510:	f040 8159 	bne.w	80087c6 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800851a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	441a      	add	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008524:	429a      	cmp	r2, r3
 8008526:	d907      	bls.n	8008538 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e14d      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2203      	movs	r2, #3
 800853c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2200      	movs	r2, #0
 8008546:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854c:	2b01      	cmp	r3, #1
 800854e:	d002      	beq.n	8008556 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	025b      	lsls	r3, r3, #9
 8008554:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800855a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	025b      	lsls	r3, r3, #9
 8008560:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008562:	2390      	movs	r3, #144	; 0x90
 8008564:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008566:	2300      	movs	r3, #0
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800856a:	2300      	movs	r3, #0
 800856c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800856e:	2301      	movs	r3, #1
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f107 0218 	add.w	r2, r7, #24
 800857a:	4611      	mov	r1, r2
 800857c:	4618      	mov	r0, r3
 800857e:	f002 fcd8 	bl	800af32 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d90a      	bls.n	800859e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008594:	4618      	mov	r0, r3
 8008596:	f002 fd80 	bl	800b09a <SDMMC_CmdWriteMultiBlock>
 800859a:	6478      	str	r0, [r7, #68]	; 0x44
 800859c:	e009      	b.n	80085b2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2210      	movs	r2, #16
 80085a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fd53 	bl	800b056 <SDMMC_CmdWriteSingleBlock>
 80085b0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d012      	beq.n	80085de <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a87      	ldr	r2, [pc, #540]	; (80087dc <HAL_SD_WriteBlocks+0x308>)
 80085be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085c6:	431a      	orrs	r2, r3
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e0fa      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80085e2:	e065      	b.n	80086b0 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d040      	beq.n	8008674 <HAL_SD_WriteBlocks+0x1a0>
 80085f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d03d      	beq.n	8008674 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
 80085fc:	e037      	b.n	800866e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008606:	3301      	adds	r3, #1
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800860a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860c:	3b01      	subs	r3, #1
 800860e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	021a      	lsls	r2, r3, #8
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800861c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861e:	3301      	adds	r3, #1
 8008620:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	3b01      	subs	r3, #1
 8008626:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	041a      	lsls	r2, r3, #16
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	3301      	adds	r3, #1
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800863a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800863c:	3b01      	subs	r3, #1
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	061a      	lsls	r2, r3, #24
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800864c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800864e:	3301      	adds	r3, #1
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008654:	3b01      	subs	r3, #1
 8008656:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f107 0214 	add.w	r2, r7, #20
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fbee 	bl	800ae44 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866a:	3301      	adds	r3, #1
 800866c:	643b      	str	r3, [r7, #64]	; 0x40
 800866e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008670:	2b07      	cmp	r3, #7
 8008672:	d9c4      	bls.n	80085fe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008674:	f7fc ffdc 	bl	8005630 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008680:	429a      	cmp	r2, r3
 8008682:	d902      	bls.n	800868a <HAL_SD_WriteBlocks+0x1b6>
 8008684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d112      	bne.n	80086b0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a53      	ldr	r2, [pc, #332]	; (80087dc <HAL_SD_WriteBlocks+0x308>)
 8008690:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008698:	431a      	orrs	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e091      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b6:	f240 331a 	movw	r3, #794	; 0x31a
 80086ba:	4013      	ands	r3, r2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d091      	beq.n	80085e4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d022      	beq.n	8008714 <HAL_SD_WriteBlocks+0x240>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d91f      	bls.n	8008714 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d01b      	beq.n	8008714 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4618      	mov	r0, r3
 80086e2:	f002 fcfd 	bl	800b0e0 <SDMMC_CmdStopTransfer>
 80086e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80086e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d012      	beq.n	8008714 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a3a      	ldr	r2, [pc, #232]	; (80087dc <HAL_SD_WriteBlocks+0x308>)
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e05f      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d012      	beq.n	8008748 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2d      	ldr	r2, [pc, #180]	; (80087dc <HAL_SD_WriteBlocks+0x308>)
 8008728:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	f043 0208 	orr.w	r2, r3, #8
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e045      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d012      	beq.n	800877c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a20      	ldr	r2, [pc, #128]	; (80087dc <HAL_SD_WriteBlocks+0x308>)
 800875c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008762:	f043 0202 	orr.w	r2, r3, #2
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e02b      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b00      	cmp	r3, #0
 8008788:	d012      	beq.n	80087b0 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a13      	ldr	r2, [pc, #76]	; (80087dc <HAL_SD_WriteBlocks+0x308>)
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	f043 0210 	orr.w	r2, r3, #16
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e011      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e006      	b.n	80087d4 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
  }
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3748      	adds	r7, #72	; 0x48
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	004005ff 	.word	0x004005ff

080087e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ee:	0f9b      	lsrs	r3, r3, #30
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fa:	0e9b      	lsrs	r3, r3, #26
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	b2da      	uxtb	r2, r3
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800880c:	0e1b      	lsrs	r3, r3, #24
 800880e:	b2db      	uxtb	r3, r3
 8008810:	f003 0303 	and.w	r3, r3, #3
 8008814:	b2da      	uxtb	r2, r3
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881e:	0c1b      	lsrs	r3, r3, #16
 8008820:	b2da      	uxtb	r2, r3
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882a:	0a1b      	lsrs	r3, r3, #8
 800882c:	b2da      	uxtb	r2, r3
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008836:	b2da      	uxtb	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008840:	0d1b      	lsrs	r3, r3, #20
 8008842:	b29a      	uxth	r2, r3
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800884c:	0c1b      	lsrs	r3, r3, #16
 800884e:	b2db      	uxtb	r3, r3
 8008850:	f003 030f 	and.w	r3, r3, #15
 8008854:	b2da      	uxtb	r2, r3
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800885e:	0bdb      	lsrs	r3, r3, #15
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0301 	and.w	r3, r3, #1
 8008866:	b2da      	uxtb	r2, r3
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008870:	0b9b      	lsrs	r3, r3, #14
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008882:	0b5b      	lsrs	r3, r3, #13
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008894:	0b1b      	lsrs	r3, r3, #12
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 0301 	and.w	r3, r3, #1
 800889c:	b2da      	uxtb	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2200      	movs	r2, #0
 80088a6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d163      	bne.n	8008978 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088b4:	009a      	lsls	r2, r3, #2
 80088b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80088ba:	4013      	ands	r3, r2
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80088c0:	0f92      	lsrs	r2, r2, #30
 80088c2:	431a      	orrs	r2, r3
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088cc:	0edb      	lsrs	r3, r3, #27
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	0e1b      	lsrs	r3, r3, #24
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f0:	0d5b      	lsrs	r3, r3, #21
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	f003 0307 	and.w	r3, r3, #7
 80088f8:	b2da      	uxtb	r2, r3
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008902:	0c9b      	lsrs	r3, r3, #18
 8008904:	b2db      	uxtb	r3, r3
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	b2da      	uxtb	r2, r3
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008914:	0bdb      	lsrs	r3, r3, #15
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	b2da      	uxtb	r2, r3
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	7e1b      	ldrb	r3, [r3, #24]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	3302      	adds	r3, #2
 8008938:	2201      	movs	r2, #1
 800893a:	fa02 f303 	lsl.w	r3, r2, r3
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008942:	fb03 f202 	mul.w	r2, r3, r2
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	7a1b      	ldrb	r3, [r3, #8]
 800894e:	b2db      	uxtb	r3, r3
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	2201      	movs	r2, #1
 8008956:	409a      	lsls	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008964:	0a52      	lsrs	r2, r2, #9
 8008966:	fb03 f202 	mul.w	r2, r3, r2
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008974:	661a      	str	r2, [r3, #96]	; 0x60
 8008976:	e031      	b.n	80089dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897c:	2b01      	cmp	r3, #1
 800897e:	d11d      	bne.n	80089bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008984:	041b      	lsls	r3, r3, #16
 8008986:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	431a      	orrs	r2, r3
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	3301      	adds	r3, #1
 800899c:	029a      	lsls	r2, r3, #10
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	661a      	str	r2, [r3, #96]	; 0x60
 80089ba:	e00f      	b.n	80089dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a58      	ldr	r2, [pc, #352]	; (8008b24 <HAL_SD_GetCardCSD+0x344>)
 80089c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e09d      	b.n	8008b18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089e0:	0b9b      	lsrs	r3, r3, #14
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f2:	09db      	lsrs	r3, r3, #7
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a14:	0fdb      	lsrs	r3, r3, #31
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a20:	0f5b      	lsrs	r3, r3, #29
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	0e9b      	lsrs	r3, r3, #26
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a44:	0d9b      	lsrs	r3, r3, #22
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a56:	0d5b      	lsrs	r3, r3, #21
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	b2da      	uxtb	r2, r3
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a72:	0c1b      	lsrs	r3, r3, #16
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a86:	0bdb      	lsrs	r3, r3, #15
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9a:	0b9b      	lsrs	r3, r3, #14
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aae:	0b5b      	lsrs	r3, r3, #13
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	0b1b      	lsrs	r3, r3, #12
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad6:	0a9b      	lsrs	r3, r3, #10
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aea:	0a1b      	lsrs	r3, r3, #8
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0303 	and.w	r3, r3, #3
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b06:	b2da      	uxtb	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	004005ff 	.word	0x004005ff

08008b28 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008b8c:	f107 030c 	add.w	r3, r7, #12
 8008b90:	4619      	mov	r1, r3
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f970 	bl	8008e78 <SD_SendStatus>
 8008b98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d005      	beq.n	8008bac <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	0a5b      	lsrs	r3, r3, #9
 8008bb0:	f003 030f 	and.w	r3, r3, #15
 8008bb4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008bb6:	693b      	ldr	r3, [r7, #16]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3718      	adds	r7, #24
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008bc0:	b5b0      	push	{r4, r5, r7, lr}
 8008bc2:	b094      	sub	sp, #80	; 0x50
 8008bc4:	af04      	add	r7, sp, #16
 8008bc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f002 f956 	bl	800ae82 <SDIO_GetPowerState>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bdc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008be0:	e0b8      	b.n	8008d54 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d02f      	beq.n	8008c4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f002 fb3d 	bl	800b26e <SDMMC_CmdSendCID>
 8008bf4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <SD_InitCard+0x40>
    {
      return errorstate;
 8008bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bfe:	e0a9      	b.n	8008d54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f002 f980 	bl	800af0c <SDIO_GetResponse>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2104      	movs	r1, #4
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f002 f977 	bl	800af0c <SDIO_GetResponse>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2108      	movs	r1, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 f96e 	bl	800af0c <SDIO_GetResponse>
 8008c30:	4602      	mov	r2, r0
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	210c      	movs	r1, #12
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 f965 	bl	800af0c <SDIO_GetResponse>
 8008c42:	4602      	mov	r2, r0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d00d      	beq.n	8008c6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f107 020e 	add.w	r2, r7, #14
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f002 fb43 	bl	800b2e8 <SDMMC_CmdSetRelAdd>
 8008c62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <SD_InitCard+0xae>
    {
      return errorstate;
 8008c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6c:	e072      	b.n	8008d54 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d036      	beq.n	8008ce4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008c76:	89fb      	ldrh	r3, [r7, #14]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c86:	041b      	lsls	r3, r3, #16
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4610      	mov	r0, r2
 8008c8c:	f002 fb0d 	bl	800b2aa <SDMMC_CmdSendCSD>
 8008c90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d001      	beq.n	8008c9c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9a:	e05b      	b.n	8008d54 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f002 f932 	bl	800af0c <SDIO_GetResponse>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2104      	movs	r1, #4
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f002 f929 	bl	800af0c <SDIO_GetResponse>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2108      	movs	r1, #8
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f002 f920 	bl	800af0c <SDIO_GetResponse>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	210c      	movs	r1, #12
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f002 f917 	bl	800af0c <SDIO_GetResponse>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2104      	movs	r1, #4
 8008cea:	4618      	mov	r0, r3
 8008cec:	f002 f90e 	bl	800af0c <SDIO_GetResponse>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	0d1a      	lsrs	r2, r3, #20
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008cf8:	f107 0310 	add.w	r3, r7, #16
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fd6e 	bl	80087e0 <HAL_SD_GetCardCSD>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d002      	beq.n	8008d10 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d0e:	e021      	b.n	8008d54 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	461c      	mov	r4, r3
 8008d1e:	4615      	mov	r5, r2
 8008d20:	4622      	mov	r2, r4
 8008d22:	462b      	mov	r3, r5
 8008d24:	4608      	mov	r0, r1
 8008d26:	f002 f9fd 	bl	800b124 <SDMMC_CmdSelDesel>
 8008d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <SD_InitCard+0x176>
  {
    return errorstate;
 8008d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d34:	e00e      	b.n	8008d54 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681d      	ldr	r5, [r3, #0]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	466c      	mov	r4, sp
 8008d3e:	f103 0210 	add.w	r2, r3, #16
 8008d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008d48:	3304      	adds	r3, #4
 8008d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f002 f841 	bl	800add4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3740      	adds	r7, #64	; 0x40
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bdb0      	pop	{r4, r5, r7, pc}

08008d5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f002 f9f8 	bl	800b16a <SDMMC_CmdGoIdleState>
 8008d7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	e072      	b.n	8008e6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f002 fa0b 	bl	800b1a6 <SDMMC_CmdOperCond>
 8008d90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00d      	beq.n	8008db4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f002 f9e1 	bl	800b16a <SDMMC_CmdGoIdleState>
 8008da8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d004      	beq.n	8008dba <SD_PowerON+0x5e>
    {
      return errorstate;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e05b      	b.n	8008e6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d137      	bne.n	8008e32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f002 fa0b 	bl	800b1e4 <SDMMC_CmdAppCommand>
 8008dce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d02d      	beq.n	8008e32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dda:	e047      	b.n	8008e6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f002 f9fe 	bl	800b1e4 <SDMMC_CmdAppCommand>
 8008de8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <SD_PowerON+0x98>
    {
      return errorstate;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	e03b      	b.n	8008e6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	491e      	ldr	r1, [pc, #120]	; (8008e74 <SD_PowerON+0x118>)
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f002 fa14 	bl	800b228 <SDMMC_CmdAppOperCommand>
 8008e00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e0c:	e02e      	b.n	8008e6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2100      	movs	r1, #0
 8008e14:	4618      	mov	r0, r3
 8008e16:	f002 f879 	bl	800af0c <SDIO_GetResponse>
 8008e1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	0fdb      	lsrs	r3, r3, #31
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <SD_PowerON+0xcc>
 8008e24:	2301      	movs	r3, #1
 8008e26:	e000      	b.n	8008e2a <SD_PowerON+0xce>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	613b      	str	r3, [r7, #16]

    count++;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d802      	bhi.n	8008e42 <SD_PowerON+0xe6>
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0cc      	beq.n	8008ddc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d902      	bls.n	8008e52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e50:	e00c      	b.n	8008e6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d003      	beq.n	8008e64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	645a      	str	r2, [r3, #68]	; 0x44
 8008e62:	e002      	b.n	8008e6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	c1100000 	.word	0xc1100000

08008e78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e8c:	e018      	b.n	8008ec0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e96:	041b      	lsls	r3, r3, #16
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f002 fa45 	bl	800b32a <SDMMC_CmdSendStatus>
 8008ea0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <SD_SendStatus+0x34>
  {
    return errorstate;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	e009      	b.n	8008ec0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 f82a 	bl	800af0c <SDIO_GetResponse>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e07b      	b.n	8008fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d108      	bne.n	8008ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eea:	d009      	beq.n	8008f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	61da      	str	r2, [r3, #28]
 8008ef2:	e005      	b.n	8008f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fc f8d0 	bl	80050c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	695b      	ldr	r3, [r3, #20]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f70:	431a      	orrs	r2, r3
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a1b      	ldr	r3, [r3, #32]
 8008f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f84:	ea42 0103 	orr.w	r1, r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	f003 0104 	and.w	r1, r3, #4
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f003 0210 	and.w	r2, r3, #16
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69da      	ldr	r2, [r3, #28]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b088      	sub	sp, #32
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	60f8      	str	r0, [r7, #12]
 8008fe2:	60b9      	str	r1, [r7, #8]
 8008fe4:	603b      	str	r3, [r7, #0]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d101      	bne.n	8008ffc <HAL_SPI_Transmit+0x22>
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e126      	b.n	800924a <HAL_SPI_Transmit+0x270>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009004:	f7fc fb14 	bl	8005630 <HAL_GetTick>
 8009008:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	d002      	beq.n	8009020 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800901a:	2302      	movs	r3, #2
 800901c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800901e:	e10b      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d002      	beq.n	800902c <HAL_SPI_Transmit+0x52>
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009030:	e102      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2203      	movs	r2, #3
 8009036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	88fa      	ldrh	r2, [r7, #6]
 800904a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	88fa      	ldrh	r2, [r7, #6]
 8009050:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2200      	movs	r2, #0
 8009056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009078:	d10f      	bne.n	800909a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009088:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009098:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b40      	cmp	r3, #64	; 0x40
 80090a6:	d007      	beq.n	80090b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090c0:	d14b      	bne.n	800915a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d002      	beq.n	80090d0 <HAL_SPI_Transmit+0xf6>
 80090ca:	8afb      	ldrh	r3, [r7, #22]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d13e      	bne.n	800914e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	1c9a      	adds	r2, r3, #2
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80090f4:	e02b      	b.n	800914e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b02      	cmp	r3, #2
 8009102:	d112      	bne.n	800912a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	881a      	ldrh	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	1c9a      	adds	r2, r3, #2
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800911e:	b29b      	uxth	r3, r3
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	86da      	strh	r2, [r3, #54]	; 0x36
 8009128:	e011      	b.n	800914e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800912a:	f7fc fa81 	bl	8005630 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d803      	bhi.n	8009142 <HAL_SPI_Transmit+0x168>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009140:	d102      	bne.n	8009148 <HAL_SPI_Transmit+0x16e>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d102      	bne.n	800914e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800914c:	e074      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009152:	b29b      	uxth	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1ce      	bne.n	80090f6 <HAL_SPI_Transmit+0x11c>
 8009158:	e04c      	b.n	80091f4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d002      	beq.n	8009168 <HAL_SPI_Transmit+0x18e>
 8009162:	8afb      	ldrh	r3, [r7, #22]
 8009164:	2b01      	cmp	r3, #1
 8009166:	d140      	bne.n	80091ea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800918e:	e02c      	b.n	80091ea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0302 	and.w	r3, r3, #2
 800919a:	2b02      	cmp	r3, #2
 800919c:	d113      	bne.n	80091c6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	7812      	ldrb	r2, [r2, #0]
 80091aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	1c5a      	adds	r2, r3, #1
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80091c4:	e011      	b.n	80091ea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091c6:	f7fc fa33 	bl	8005630 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d803      	bhi.n	80091de <HAL_SPI_Transmit+0x204>
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091dc:	d102      	bne.n	80091e4 <HAL_SPI_Transmit+0x20a>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d102      	bne.n	80091ea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091e8:	e026      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1cd      	bne.n	8009190 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	6839      	ldr	r1, [r7, #0]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 fbcb 	bl	8009994 <SPI_EndRxTxTransaction>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009212:	2300      	movs	r3, #0
 8009214:	613b      	str	r3, [r7, #16]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	77fb      	strb	r3, [r7, #31]
 8009234:	e000      	b.n	8009238 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009236:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009248:	7ffb      	ldrb	r3, [r7, #31]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3720      	adds	r7, #32
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b088      	sub	sp, #32
 8009256:	af02      	add	r7, sp, #8
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800926e:	d112      	bne.n	8009296 <HAL_SPI_Receive+0x44>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10e      	bne.n	8009296 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2204      	movs	r2, #4
 800927c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009280:	88fa      	ldrh	r2, [r7, #6]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4613      	mov	r3, r2
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f8f1 	bl	8009474 <HAL_SPI_TransmitReceive>
 8009292:	4603      	mov	r3, r0
 8009294:	e0ea      	b.n	800946c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_SPI_Receive+0x52>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e0e3      	b.n	800946c <HAL_SPI_Receive+0x21a>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092ac:	f7fc f9c0 	bl	8005630 <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d002      	beq.n	80092c4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80092be:	2302      	movs	r3, #2
 80092c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092c2:	e0ca      	b.n	800945a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d002      	beq.n	80092d0 <HAL_SPI_Receive+0x7e>
 80092ca:	88fb      	ldrh	r3, [r7, #6]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092d4:	e0c1      	b.n	800945a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2204      	movs	r2, #4
 80092da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	88fa      	ldrh	r2, [r7, #6]
 80092ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	88fa      	ldrh	r2, [r7, #6]
 80092f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800931c:	d10f      	bne.n	800933e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800932c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800933c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	d007      	beq.n	800935c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800935a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d162      	bne.n	800942a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009364:	e02e      	b.n	80093c4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 0301 	and.w	r3, r3, #1
 8009370:	2b01      	cmp	r3, #1
 8009372:	d115      	bne.n	80093a0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f103 020c 	add.w	r2, r3, #12
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	7812      	ldrb	r2, [r2, #0]
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	1c5a      	adds	r2, r3, #1
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800939e:	e011      	b.n	80093c4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093a0:	f7fc f946 	bl	8005630 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d803      	bhi.n	80093b8 <HAL_SPI_Receive+0x166>
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b6:	d102      	bne.n	80093be <HAL_SPI_Receive+0x16c>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80093c2:	e04a      	b.n	800945a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1cb      	bne.n	8009366 <HAL_SPI_Receive+0x114>
 80093ce:	e031      	b.n	8009434 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d113      	bne.n	8009406 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68da      	ldr	r2, [r3, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	b292      	uxth	r2, r2
 80093ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f0:	1c9a      	adds	r2, r3, #2
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009404:	e011      	b.n	800942a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009406:	f7fc f913 	bl	8005630 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	429a      	cmp	r2, r3
 8009414:	d803      	bhi.n	800941e <HAL_SPI_Receive+0x1cc>
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800941c:	d102      	bne.n	8009424 <HAL_SPI_Receive+0x1d2>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d102      	bne.n	800942a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009428:	e017      	b.n	800945a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800942e:	b29b      	uxth	r3, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1cd      	bne.n	80093d0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fa45 	bl	80098c8 <SPI_EndRxTransaction>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d002      	beq.n	800944a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2220      	movs	r2, #32
 8009448:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
 8009456:	e000      	b.n	800945a <HAL_SPI_Receive+0x208>
  }

error :
 8009458:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800946a:	7dfb      	ldrb	r3, [r7, #23]
}
 800946c:	4618      	mov	r0, r3
 800946e:	3718      	adds	r7, #24
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b08c      	sub	sp, #48	; 0x30
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	607a      	str	r2, [r7, #4]
 8009480:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009482:	2301      	movs	r3, #1
 8009484:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_SPI_TransmitReceive+0x26>
 8009496:	2302      	movs	r3, #2
 8009498:	e18a      	b.n	80097b0 <HAL_SPI_TransmitReceive+0x33c>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80094a2:	f7fc f8c5 	bl	8005630 <HAL_GetTick>
 80094a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80094b8:	887b      	ldrh	r3, [r7, #2]
 80094ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80094bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d00f      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x70>
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094ca:	d107      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <HAL_SPI_TransmitReceive+0x68>
 80094d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d003      	beq.n	80094e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80094dc:	2302      	movs	r3, #2
 80094de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094e2:	e15b      	b.n	800979c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d005      	beq.n	80094f6 <HAL_SPI_TransmitReceive+0x82>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <HAL_SPI_TransmitReceive+0x82>
 80094f0:	887b      	ldrh	r3, [r7, #2]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80094fc:	e14e      	b.n	800979c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b04      	cmp	r3, #4
 8009508:	d003      	beq.n	8009512 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2205      	movs	r2, #5
 800950e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	887a      	ldrh	r2, [r7, #2]
 8009522:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	887a      	ldrh	r2, [r7, #2]
 8009528:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	887a      	ldrh	r2, [r7, #2]
 8009534:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	887a      	ldrh	r2, [r7, #2]
 800953a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d007      	beq.n	8009566 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800956e:	d178      	bne.n	8009662 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <HAL_SPI_TransmitReceive+0x10a>
 8009578:	8b7b      	ldrh	r3, [r7, #26]
 800957a:	2b01      	cmp	r3, #1
 800957c:	d166      	bne.n	800964c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	881a      	ldrh	r2, [r3, #0]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	1c9a      	adds	r2, r3, #2
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009598:	b29b      	uxth	r3, r3
 800959a:	3b01      	subs	r3, #1
 800959c:	b29a      	uxth	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095a2:	e053      	b.n	800964c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f003 0302 	and.w	r3, r3, #2
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d11b      	bne.n	80095ea <HAL_SPI_TransmitReceive+0x176>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d016      	beq.n	80095ea <HAL_SPI_TransmitReceive+0x176>
 80095bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d113      	bne.n	80095ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c6:	881a      	ldrh	r2, [r3, #0]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	1c9a      	adds	r2, r3, #2
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095dc:	b29b      	uxth	r3, r3
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80095e6:	2300      	movs	r3, #0
 80095e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d119      	bne.n	800962c <HAL_SPI_TransmitReceive+0x1b8>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d014      	beq.n	800962c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960c:	b292      	uxth	r2, r2
 800960e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	1c9a      	adds	r2, r3, #2
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800961e:	b29b      	uxth	r3, r3
 8009620:	3b01      	subs	r3, #1
 8009622:	b29a      	uxth	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009628:	2301      	movs	r3, #1
 800962a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800962c:	f7fc f800 	bl	8005630 <HAL_GetTick>
 8009630:	4602      	mov	r2, r0
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009638:	429a      	cmp	r2, r3
 800963a:	d807      	bhi.n	800964c <HAL_SPI_TransmitReceive+0x1d8>
 800963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009642:	d003      	beq.n	800964c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800964a:	e0a7      	b.n	800979c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009650:	b29b      	uxth	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1a6      	bne.n	80095a4 <HAL_SPI_TransmitReceive+0x130>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800965a:	b29b      	uxth	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1a1      	bne.n	80095a4 <HAL_SPI_TransmitReceive+0x130>
 8009660:	e07c      	b.n	800975c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <HAL_SPI_TransmitReceive+0x1fc>
 800966a:	8b7b      	ldrh	r3, [r7, #26]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d16b      	bne.n	8009748 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	330c      	adds	r3, #12
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800968c:	b29b      	uxth	r3, r3
 800968e:	3b01      	subs	r3, #1
 8009690:	b29a      	uxth	r2, r3
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009696:	e057      	b.n	8009748 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d11c      	bne.n	80096e0 <HAL_SPI_TransmitReceive+0x26c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d017      	beq.n	80096e0 <HAL_SPI_TransmitReceive+0x26c>
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d114      	bne.n	80096e0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	330c      	adds	r3, #12
 80096c0:	7812      	ldrb	r2, [r2, #0]
 80096c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	3b01      	subs	r3, #1
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d119      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x2ae>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d014      	beq.n	8009722 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	3b01      	subs	r3, #1
 8009718:	b29a      	uxth	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800971e:	2301      	movs	r3, #1
 8009720:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009722:	f7fb ff85 	bl	8005630 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800972e:	429a      	cmp	r2, r3
 8009730:	d803      	bhi.n	800973a <HAL_SPI_TransmitReceive+0x2c6>
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009738:	d102      	bne.n	8009740 <HAL_SPI_TransmitReceive+0x2cc>
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	2b00      	cmp	r3, #0
 800973e:	d103      	bne.n	8009748 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009746:	e029      	b.n	800979c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800974c:	b29b      	uxth	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1a2      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x224>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009756:	b29b      	uxth	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d19d      	bne.n	8009698 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800975c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f917 	bl	8009994 <SPI_EndRxTxTransaction>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009778:	e010      	b.n	800979c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009782:	2300      	movs	r3, #0
 8009784:	617b      	str	r3, [r7, #20]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	e000      	b.n	800979c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800979a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3730      	adds	r7, #48	; 0x30
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	4613      	mov	r3, r2
 80097c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80097c8:	f7fb ff32 	bl	8005630 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d0:	1a9b      	subs	r3, r3, r2
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	4413      	add	r3, r2
 80097d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80097d8:	f7fb ff2a 	bl	8005630 <HAL_GetTick>
 80097dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80097de:	4b39      	ldr	r3, [pc, #228]	; (80098c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	015b      	lsls	r3, r3, #5
 80097e4:	0d1b      	lsrs	r3, r3, #20
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	fb02 f303 	mul.w	r3, r2, r3
 80097ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097ee:	e054      	b.n	800989a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f6:	d050      	beq.n	800989a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097f8:	f7fb ff1a 	bl	8005630 <HAL_GetTick>
 80097fc:	4602      	mov	r2, r0
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	69fa      	ldr	r2, [r7, #28]
 8009804:	429a      	cmp	r2, r3
 8009806:	d902      	bls.n	800980e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d13d      	bne.n	800988a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800981c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009826:	d111      	bne.n	800984c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009830:	d004      	beq.n	800983c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800983a:	d107      	bne.n	800984c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800984a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009854:	d10f      	bne.n	8009876 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009864:	601a      	str	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009874:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009886:	2303      	movs	r3, #3
 8009888:	e017      	b.n	80098ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3b01      	subs	r3, #1
 8009898:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	4013      	ands	r3, r2
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	bf0c      	ite	eq
 80098aa:	2301      	moveq	r3, #1
 80098ac:	2300      	movne	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d19b      	bne.n	80097f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3720      	adds	r7, #32
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000018 	.word	0x20000018

080098c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098dc:	d111      	bne.n	8009902 <SPI_EndRxTransaction+0x3a>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e6:	d004      	beq.n	80098f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f0:	d107      	bne.n	8009902 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009900:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800990a:	d12a      	bne.n	8009962 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009914:	d012      	beq.n	800993c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2200      	movs	r2, #0
 800991e:	2180      	movs	r1, #128	; 0x80
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f7ff ff49 	bl	80097b8 <SPI_WaitFlagStateUntilTimeout>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d02d      	beq.n	8009988 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009930:	f043 0220 	orr.w	r2, r3, #32
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009938:	2303      	movs	r3, #3
 800993a:	e026      	b.n	800998a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2200      	movs	r2, #0
 8009944:	2101      	movs	r1, #1
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff ff36 	bl	80097b8 <SPI_WaitFlagStateUntilTimeout>
 800994c:	4603      	mov	r3, r0
 800994e:	2b00      	cmp	r3, #0
 8009950:	d01a      	beq.n	8009988 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009956:	f043 0220 	orr.w	r2, r3, #32
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e013      	b.n	800998a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2200      	movs	r2, #0
 800996a:	2101      	movs	r1, #1
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff ff23 	bl	80097b8 <SPI_WaitFlagStateUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d007      	beq.n	8009988 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997c:	f043 0220 	orr.w	r2, r3, #32
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	e000      	b.n	800998a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009988:	2300      	movs	r3, #0
}
 800998a:	4618      	mov	r0, r3
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b088      	sub	sp, #32
 8009998:	af02      	add	r7, sp, #8
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80099a0:	4b1b      	ldr	r3, [pc, #108]	; (8009a10 <SPI_EndRxTxTransaction+0x7c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a1b      	ldr	r2, [pc, #108]	; (8009a14 <SPI_EndRxTxTransaction+0x80>)
 80099a6:	fba2 2303 	umull	r2, r3, r2, r3
 80099aa:	0d5b      	lsrs	r3, r3, #21
 80099ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099be:	d112      	bne.n	80099e6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2200      	movs	r2, #0
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff fef4 	bl	80097b8 <SPI_WaitFlagStateUntilTimeout>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d016      	beq.n	8009a04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099da:	f043 0220 	orr.w	r2, r3, #32
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80099e2:	2303      	movs	r3, #3
 80099e4:	e00f      	b.n	8009a06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fc:	2b80      	cmp	r3, #128	; 0x80
 80099fe:	d0f2      	beq.n	80099e6 <SPI_EndRxTxTransaction+0x52>
 8009a00:	e000      	b.n	8009a04 <SPI_EndRxTxTransaction+0x70>
        break;
 8009a02:	bf00      	nop
  }

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000018 	.word	0x20000018
 8009a14:	165e9f81 	.word	0x165e9f81

08009a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e041      	b.n	8009aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fb fb86 	bl	8005150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f000 fac0 	bl	8009fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3708      	adds	r7, #8
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e041      	b.n	8009b4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d106      	bne.n	8009ae2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f839 	bl	8009b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	3304      	adds	r3, #4
 8009af2:	4619      	mov	r1, r3
 8009af4:	4610      	mov	r0, r2
 8009af6:	f000 fa71 	bl	8009fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <HAL_TIM_PWM_Start+0x24>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	bf14      	ite	ne
 8009b84:	2301      	movne	r3, #1
 8009b86:	2300      	moveq	r3, #0
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	e022      	b.n	8009bd2 <HAL_TIM_PWM_Start+0x6a>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d109      	bne.n	8009ba6 <HAL_TIM_PWM_Start+0x3e>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	bf14      	ite	ne
 8009b9e:	2301      	movne	r3, #1
 8009ba0:	2300      	moveq	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	e015      	b.n	8009bd2 <HAL_TIM_PWM_Start+0x6a>
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b08      	cmp	r3, #8
 8009baa:	d109      	bne.n	8009bc0 <HAL_TIM_PWM_Start+0x58>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	bf14      	ite	ne
 8009bb8:	2301      	movne	r3, #1
 8009bba:	2300      	moveq	r3, #0
 8009bbc:	b2db      	uxtb	r3, r3
 8009bbe:	e008      	b.n	8009bd2 <HAL_TIM_PWM_Start+0x6a>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	bf14      	ite	ne
 8009bcc:	2301      	movne	r3, #1
 8009bce:	2300      	moveq	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e068      	b.n	8009cac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d104      	bne.n	8009bea <HAL_TIM_PWM_Start+0x82>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009be8:	e013      	b.n	8009c12 <HAL_TIM_PWM_Start+0xaa>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d104      	bne.n	8009bfa <HAL_TIM_PWM_Start+0x92>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bf8:	e00b      	b.n	8009c12 <HAL_TIM_PWM_Start+0xaa>
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b08      	cmp	r3, #8
 8009bfe:	d104      	bne.n	8009c0a <HAL_TIM_PWM_Start+0xa2>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2202      	movs	r2, #2
 8009c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c08:	e003      	b.n	8009c12 <HAL_TIM_PWM_Start+0xaa>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	2201      	movs	r2, #1
 8009c18:	6839      	ldr	r1, [r7, #0]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f000 fc84 	bl	800a528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a23      	ldr	r2, [pc, #140]	; (8009cb4 <HAL_TIM_PWM_Start+0x14c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d107      	bne.n	8009c3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1d      	ldr	r2, [pc, #116]	; (8009cb4 <HAL_TIM_PWM_Start+0x14c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x10e>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4c:	d013      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x10e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a19      	ldr	r2, [pc, #100]	; (8009cb8 <HAL_TIM_PWM_Start+0x150>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x10e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a17      	ldr	r2, [pc, #92]	; (8009cbc <HAL_TIM_PWM_Start+0x154>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x10e>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <HAL_TIM_PWM_Start+0x158>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_TIM_PWM_Start+0x10e>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a14      	ldr	r2, [pc, #80]	; (8009cc4 <HAL_TIM_PWM_Start+0x15c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d111      	bne.n	8009c9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f003 0307 	and.w	r3, r3, #7
 8009c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b06      	cmp	r3, #6
 8009c86:	d010      	beq.n	8009caa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c98:	e007      	b.n	8009caa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f042 0201 	orr.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40000c00 	.word	0x40000c00
 8009cc4:	40014000 	.word	0x40014000

08009cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e0ae      	b.n	8009e44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b0c      	cmp	r3, #12
 8009cf2:	f200 809f 	bhi.w	8009e34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d31 	.word	0x08009d31
 8009d00:	08009e35 	.word	0x08009e35
 8009d04:	08009e35 	.word	0x08009e35
 8009d08:	08009e35 	.word	0x08009e35
 8009d0c:	08009d71 	.word	0x08009d71
 8009d10:	08009e35 	.word	0x08009e35
 8009d14:	08009e35 	.word	0x08009e35
 8009d18:	08009e35 	.word	0x08009e35
 8009d1c:	08009db3 	.word	0x08009db3
 8009d20:	08009e35 	.word	0x08009e35
 8009d24:	08009e35 	.word	0x08009e35
 8009d28:	08009e35 	.word	0x08009e35
 8009d2c:	08009df3 	.word	0x08009df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68b9      	ldr	r1, [r7, #8]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f9d0 	bl	800a0dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	699a      	ldr	r2, [r3, #24]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0208 	orr.w	r2, r2, #8
 8009d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	699a      	ldr	r2, [r3, #24]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0204 	bic.w	r2, r2, #4
 8009d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6999      	ldr	r1, [r3, #24]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	691a      	ldr	r2, [r3, #16]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	430a      	orrs	r2, r1
 8009d6c:	619a      	str	r2, [r3, #24]
      break;
 8009d6e:	e064      	b.n	8009e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68b9      	ldr	r1, [r7, #8]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 fa16 	bl	800a1a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	699a      	ldr	r2, [r3, #24]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6999      	ldr	r1, [r3, #24]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	021a      	lsls	r2, r3, #8
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	619a      	str	r2, [r3, #24]
      break;
 8009db0:	e043      	b.n	8009e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	4618      	mov	r0, r3
 8009dba:	f000 fa61 	bl	800a280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	69da      	ldr	r2, [r3, #28]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0208 	orr.w	r2, r2, #8
 8009dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	69da      	ldr	r2, [r3, #28]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 0204 	bic.w	r2, r2, #4
 8009ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	69d9      	ldr	r1, [r3, #28]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	691a      	ldr	r2, [r3, #16]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	430a      	orrs	r2, r1
 8009dee:	61da      	str	r2, [r3, #28]
      break;
 8009df0:	e023      	b.n	8009e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68b9      	ldr	r1, [r7, #8]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f000 faab 	bl	800a354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69da      	ldr	r2, [r3, #28]
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	69d9      	ldr	r1, [r3, #28]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	021a      	lsls	r2, r3, #8
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	61da      	str	r2, [r3, #28]
      break;
 8009e32:	e002      	b.n	8009e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	75fb      	strb	r3, [r7, #23]
      break;
 8009e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_TIM_ConfigClockSource+0x1c>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e0b4      	b.n	8009fd2 <HAL_TIM_ConfigClockSource+0x186>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea0:	d03e      	beq.n	8009f20 <HAL_TIM_ConfigClockSource+0xd4>
 8009ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ea6:	f200 8087 	bhi.w	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eae:	f000 8086 	beq.w	8009fbe <HAL_TIM_ConfigClockSource+0x172>
 8009eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb6:	d87f      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009eb8:	2b70      	cmp	r3, #112	; 0x70
 8009eba:	d01a      	beq.n	8009ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8009ebc:	2b70      	cmp	r3, #112	; 0x70
 8009ebe:	d87b      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ec0:	2b60      	cmp	r3, #96	; 0x60
 8009ec2:	d050      	beq.n	8009f66 <HAL_TIM_ConfigClockSource+0x11a>
 8009ec4:	2b60      	cmp	r3, #96	; 0x60
 8009ec6:	d877      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ec8:	2b50      	cmp	r3, #80	; 0x50
 8009eca:	d03c      	beq.n	8009f46 <HAL_TIM_ConfigClockSource+0xfa>
 8009ecc:	2b50      	cmp	r3, #80	; 0x50
 8009ece:	d873      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ed0:	2b40      	cmp	r3, #64	; 0x40
 8009ed2:	d058      	beq.n	8009f86 <HAL_TIM_ConfigClockSource+0x13a>
 8009ed4:	2b40      	cmp	r3, #64	; 0x40
 8009ed6:	d86f      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ed8:	2b30      	cmp	r3, #48	; 0x30
 8009eda:	d064      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8009edc:	2b30      	cmp	r3, #48	; 0x30
 8009ede:	d86b      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ee0:	2b20      	cmp	r3, #32
 8009ee2:	d060      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ee4:	2b20      	cmp	r3, #32
 8009ee6:	d867      	bhi.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d05c      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8009eec:	2b10      	cmp	r3, #16
 8009eee:	d05a      	beq.n	8009fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8009ef0:	e062      	b.n	8009fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	6899      	ldr	r1, [r3, #8]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	f000 faf1 	bl	800a4e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	609a      	str	r2, [r3, #8]
      break;
 8009f1e:	e04f      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6818      	ldr	r0, [r3, #0]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	6899      	ldr	r1, [r3, #8]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f000 fada 	bl	800a4e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f42:	609a      	str	r2, [r3, #8]
      break;
 8009f44:	e03c      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	6859      	ldr	r1, [r3, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	461a      	mov	r2, r3
 8009f54:	f000 fa4e 	bl	800a3f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2150      	movs	r1, #80	; 0x50
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 faa7 	bl	800a4b2 <TIM_ITRx_SetConfig>
      break;
 8009f64:	e02c      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	6859      	ldr	r1, [r3, #4]
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f000 fa6d 	bl	800a452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2160      	movs	r1, #96	; 0x60
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f000 fa97 	bl	800a4b2 <TIM_ITRx_SetConfig>
      break;
 8009f84:	e01c      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	6859      	ldr	r1, [r3, #4]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	461a      	mov	r2, r3
 8009f94:	f000 fa2e 	bl	800a3f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2140      	movs	r1, #64	; 0x40
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fa87 	bl	800a4b2 <TIM_ITRx_SetConfig>
      break;
 8009fa4:	e00c      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f000 fa7e 	bl	800a4b2 <TIM_ITRx_SetConfig>
      break;
 8009fb6:	e003      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	73fb      	strb	r3, [r7, #15]
      break;
 8009fbc:	e000      	b.n	8009fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a34      	ldr	r2, [pc, #208]	; (800a0c0 <TIM_Base_SetConfig+0xe4>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00f      	beq.n	800a014 <TIM_Base_SetConfig+0x38>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffa:	d00b      	beq.n	800a014 <TIM_Base_SetConfig+0x38>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a31      	ldr	r2, [pc, #196]	; (800a0c4 <TIM_Base_SetConfig+0xe8>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d007      	beq.n	800a014 <TIM_Base_SetConfig+0x38>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a30      	ldr	r2, [pc, #192]	; (800a0c8 <TIM_Base_SetConfig+0xec>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d003      	beq.n	800a014 <TIM_Base_SetConfig+0x38>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a2f      	ldr	r2, [pc, #188]	; (800a0cc <TIM_Base_SetConfig+0xf0>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d108      	bne.n	800a026 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a01a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	4313      	orrs	r3, r2
 800a024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a25      	ldr	r2, [pc, #148]	; (800a0c0 <TIM_Base_SetConfig+0xe4>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d01b      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a034:	d017      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a22      	ldr	r2, [pc, #136]	; (800a0c4 <TIM_Base_SetConfig+0xe8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d013      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a21      	ldr	r2, [pc, #132]	; (800a0c8 <TIM_Base_SetConfig+0xec>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d00f      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a20      	ldr	r2, [pc, #128]	; (800a0cc <TIM_Base_SetConfig+0xf0>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d00b      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a1f      	ldr	r2, [pc, #124]	; (800a0d0 <TIM_Base_SetConfig+0xf4>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d007      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a1e      	ldr	r2, [pc, #120]	; (800a0d4 <TIM_Base_SetConfig+0xf8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d003      	beq.n	800a066 <TIM_Base_SetConfig+0x8a>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a1d      	ldr	r2, [pc, #116]	; (800a0d8 <TIM_Base_SetConfig+0xfc>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d108      	bne.n	800a078 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a06c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	4313      	orrs	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	4313      	orrs	r3, r2
 800a084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a08      	ldr	r2, [pc, #32]	; (800a0c0 <TIM_Base_SetConfig+0xe4>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d103      	bne.n	800a0ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	691a      	ldr	r2, [r3, #16]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	615a      	str	r2, [r3, #20]
}
 800a0b2:	bf00      	nop
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40000400 	.word	0x40000400
 800a0c8:	40000800 	.word	0x40000800
 800a0cc:	40000c00 	.word	0x40000c00
 800a0d0:	40014000 	.word	0x40014000
 800a0d4:	40014400 	.word	0x40014400
 800a0d8:	40014800 	.word	0x40014800

0800a0dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b087      	sub	sp, #28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	f023 0201 	bic.w	r2, r3, #1
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6a1b      	ldr	r3, [r3, #32]
 800a0f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	699b      	ldr	r3, [r3, #24]
 800a102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f023 0302 	bic.w	r3, r3, #2
 800a124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a1c      	ldr	r2, [pc, #112]	; (800a1a4 <TIM_OC1_SetConfig+0xc8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d10c      	bne.n	800a152 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	f023 0308 	bic.w	r3, r3, #8
 800a13e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	697a      	ldr	r2, [r7, #20]
 800a146:	4313      	orrs	r3, r2
 800a148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	f023 0304 	bic.w	r3, r3, #4
 800a150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a13      	ldr	r2, [pc, #76]	; (800a1a4 <TIM_OC1_SetConfig+0xc8>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d111      	bne.n	800a17e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	4313      	orrs	r3, r2
 800a172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	621a      	str	r2, [r3, #32]
}
 800a198:	bf00      	nop
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	40010000 	.word	0x40010000

0800a1a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	f023 0210 	bic.w	r2, r3, #16
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	021b      	lsls	r3, r3, #8
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	f023 0320 	bic.w	r3, r3, #32
 800a1f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	011b      	lsls	r3, r3, #4
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a1e      	ldr	r2, [pc, #120]	; (800a27c <TIM_OC2_SetConfig+0xd4>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d10d      	bne.n	800a224 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a20e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	011b      	lsls	r3, r3, #4
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	4313      	orrs	r3, r2
 800a21a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a15      	ldr	r2, [pc, #84]	; (800a27c <TIM_OC2_SetConfig+0xd4>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d113      	bne.n	800a254 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a23a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	4313      	orrs	r3, r2
 800a246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	621a      	str	r2, [r3, #32]
}
 800a26e:	bf00      	nop
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40010000 	.word	0x40010000

0800a280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f023 0303 	bic.w	r3, r3, #3
 800a2b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	689b      	ldr	r3, [r3, #8]
 800a2ce:	021b      	lsls	r3, r3, #8
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <TIM_OC3_SetConfig+0xd0>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d10d      	bne.n	800a2fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a2e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	021b      	lsls	r3, r3, #8
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a14      	ldr	r2, [pc, #80]	; (800a350 <TIM_OC3_SetConfig+0xd0>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d113      	bne.n	800a32a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	011b      	lsls	r3, r3, #4
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	699b      	ldr	r3, [r3, #24]
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	4313      	orrs	r3, r2
 800a328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	621a      	str	r2, [r3, #32]
}
 800a344:	bf00      	nop
 800a346:	371c      	adds	r7, #28
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr
 800a350:	40010000 	.word	0x40010000

0800a354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	69db      	ldr	r3, [r3, #28]
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a38a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	021b      	lsls	r3, r3, #8
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	4313      	orrs	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a39e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	031b      	lsls	r3, r3, #12
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a10      	ldr	r2, [pc, #64]	; (800a3f0 <TIM_OC4_SetConfig+0x9c>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d109      	bne.n	800a3c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a3ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	695b      	ldr	r3, [r3, #20]
 800a3c0:	019b      	lsls	r3, r3, #6
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	621a      	str	r2, [r3, #32]
}
 800a3e2:	bf00      	nop
 800a3e4:	371c      	adds	r7, #28
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ec:	4770      	bx	lr
 800a3ee:	bf00      	nop
 800a3f0:	40010000 	.word	0x40010000

0800a3f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b087      	sub	sp, #28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a1b      	ldr	r3, [r3, #32]
 800a404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	f023 0201 	bic.w	r2, r3, #1
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	699b      	ldr	r3, [r3, #24]
 800a416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a41e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	011b      	lsls	r3, r3, #4
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4313      	orrs	r3, r2
 800a428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	f023 030a 	bic.w	r3, r3, #10
 800a430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a432:	697a      	ldr	r2, [r7, #20]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4313      	orrs	r3, r2
 800a438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	693a      	ldr	r2, [r7, #16]
 800a43e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a452:	b480      	push	{r7}
 800a454:	b087      	sub	sp, #28
 800a456:	af00      	add	r7, sp, #0
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	f023 0210 	bic.w	r2, r3, #16
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	699b      	ldr	r3, [r3, #24]
 800a46e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a47c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	031b      	lsls	r3, r3, #12
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	4313      	orrs	r3, r2
 800a486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a48e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	621a      	str	r2, [r3, #32]
}
 800a4a6:	bf00      	nop
 800a4a8:	371c      	adds	r7, #28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	f043 0307 	orr.w	r3, r3, #7
 800a4d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	609a      	str	r2, [r3, #8]
}
 800a4dc:	bf00      	nop
 800a4de:	3714      	adds	r7, #20
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	021a      	lsls	r2, r3, #8
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	431a      	orrs	r2, r3
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4313      	orrs	r3, r2
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	4313      	orrs	r3, r2
 800a514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	609a      	str	r2, [r3, #8]
}
 800a51c:	bf00      	nop
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 031f 	and.w	r3, r3, #31
 800a53a:	2201      	movs	r2, #1
 800a53c:	fa02 f303 	lsl.w	r3, r2, r3
 800a540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a1a      	ldr	r2, [r3, #32]
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	43db      	mvns	r3, r3
 800a54a:	401a      	ands	r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a1a      	ldr	r2, [r3, #32]
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f003 031f 	and.w	r3, r3, #31
 800a55a:	6879      	ldr	r1, [r7, #4]
 800a55c:	fa01 f303 	lsl.w	r3, r1, r3
 800a560:	431a      	orrs	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	621a      	str	r2, [r3, #32]
}
 800a566:	bf00      	nop
 800a568:	371c      	adds	r7, #28
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
	...

0800a574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d101      	bne.n	800a58c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a588:	2302      	movs	r3, #2
 800a58a:	e050      	b.n	800a62e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2202      	movs	r2, #2
 800a598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a1c      	ldr	r2, [pc, #112]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d018      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5d8:	d013      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a18      	ldr	r2, [pc, #96]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00e      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a16      	ldr	r2, [pc, #88]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d009      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a15      	ldr	r2, [pc, #84]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d004      	beq.n	800a602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a13      	ldr	r2, [pc, #76]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d10c      	bne.n	800a61c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	4313      	orrs	r3, r2
 800a612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2201      	movs	r2, #1
 800a620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	40010000 	.word	0x40010000
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	40014000 	.word	0x40014000

0800a650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e03f      	b.n	800a6e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fa fe00 	bl	800527c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2224      	movs	r2, #36	; 0x24
 800a680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68da      	ldr	r2, [r3, #12]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f929 	bl	800a8ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	691a      	ldr	r2, [r3, #16]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	695a      	ldr	r2, [r3, #20]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68da      	ldr	r2, [r3, #12]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a6c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2220      	movs	r2, #32
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b08a      	sub	sp, #40	; 0x28
 800a6ee:	af02      	add	r7, sp, #8
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	603b      	str	r3, [r7, #0]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b20      	cmp	r3, #32
 800a708:	d17c      	bne.n	800a804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <HAL_UART_Transmit+0x2c>
 800a710:	88fb      	ldrh	r3, [r7, #6]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e075      	b.n	800a806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_UART_Transmit+0x3e>
 800a724:	2302      	movs	r3, #2
 800a726:	e06e      	b.n	800a806 <HAL_UART_Transmit+0x11c>
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2221      	movs	r2, #33	; 0x21
 800a73a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a73e:	f7fa ff77 	bl	8005630 <HAL_GetTick>
 800a742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	88fa      	ldrh	r2, [r7, #6]
 800a748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	88fa      	ldrh	r2, [r7, #6]
 800a74e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a758:	d108      	bne.n	800a76c <HAL_UART_Transmit+0x82>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d104      	bne.n	800a76c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	61bb      	str	r3, [r7, #24]
 800a76a:	e003      	b.n	800a774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a770:	2300      	movs	r3, #0
 800a772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a77c:	e02a      	b.n	800a7d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2200      	movs	r2, #0
 800a786:	2180      	movs	r1, #128	; 0x80
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 f840 	bl	800a80e <UART_WaitOnFlagUntilTimeout>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e036      	b.n	800a806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10b      	bne.n	800a7b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	3302      	adds	r3, #2
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	e007      	b.n	800a7c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	781a      	ldrb	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1cf      	bne.n	800a77e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	9300      	str	r3, [sp, #0]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	2140      	movs	r1, #64	; 0x40
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f000 f810 	bl	800a80e <UART_WaitOnFlagUntilTimeout>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e006      	b.n	800a806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	e000      	b.n	800a806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a804:	2302      	movs	r3, #2
  }
}
 800a806:	4618      	mov	r0, r3
 800a808:	3720      	adds	r7, #32
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b090      	sub	sp, #64	; 0x40
 800a812:	af00      	add	r7, sp, #0
 800a814:	60f8      	str	r0, [r7, #12]
 800a816:	60b9      	str	r1, [r7, #8]
 800a818:	603b      	str	r3, [r7, #0]
 800a81a:	4613      	mov	r3, r2
 800a81c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a81e:	e050      	b.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a826:	d04c      	beq.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d007      	beq.n	800a83e <UART_WaitOnFlagUntilTimeout+0x30>
 800a82e:	f7fa feff 	bl	8005630 <HAL_GetTick>
 800a832:	4602      	mov	r2, r0
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d241      	bcs.n	800a8c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	330c      	adds	r3, #12
 800a844:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a848:	e853 3f00 	ldrex	r3, [r3]
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	330c      	adds	r3, #12
 800a85c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a85e:	637a      	str	r2, [r7, #52]	; 0x34
 800a860:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a866:	e841 2300 	strex	r3, r2, [r1]
 800a86a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1e5      	bne.n	800a83e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3314      	adds	r3, #20
 800a878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	613b      	str	r3, [r7, #16]
   return(result);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f023 0301 	bic.w	r3, r3, #1
 800a888:	63bb      	str	r3, [r7, #56]	; 0x38
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3314      	adds	r3, #20
 800a890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a892:	623a      	str	r2, [r7, #32]
 800a894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	69f9      	ldr	r1, [r7, #28]
 800a898:	6a3a      	ldr	r2, [r7, #32]
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e5      	bne.n	800a872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2220      	movs	r2, #32
 800a8aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e00f      	b.n	800a8e2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681a      	ldr	r2, [r3, #0]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4013      	ands	r3, r2
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	bf0c      	ite	eq
 800a8d2:	2301      	moveq	r3, #1
 800a8d4:	2300      	movne	r3, #0
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	461a      	mov	r2, r3
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d09f      	beq.n	800a820 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3740      	adds	r7, #64	; 0x40
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8f0:	b0c0      	sub	sp, #256	; 0x100
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a908:	68d9      	ldr	r1, [r3, #12]
 800a90a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	ea40 0301 	orr.w	r3, r0, r1
 800a914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	431a      	orrs	r2, r3
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	4313      	orrs	r3, r2
 800a934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a944:	f021 010c 	bic.w	r1, r1, #12
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a952:	430b      	orrs	r3, r1
 800a954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a966:	6999      	ldr	r1, [r3, #24]
 800a968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	ea40 0301 	orr.w	r3, r0, r1
 800a972:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b8f      	ldr	r3, [pc, #572]	; (800abb8 <UART_SetConfig+0x2cc>)
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d005      	beq.n	800a98c <UART_SetConfig+0xa0>
 800a980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4b8d      	ldr	r3, [pc, #564]	; (800abbc <UART_SetConfig+0x2d0>)
 800a988:	429a      	cmp	r2, r3
 800a98a:	d104      	bne.n	800a996 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a98c:	f7fd fb00 	bl	8007f90 <HAL_RCC_GetPCLK2Freq>
 800a990:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a994:	e003      	b.n	800a99e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a996:	f7fd fae7 	bl	8007f68 <HAL_RCC_GetPCLK1Freq>
 800a99a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a8:	f040 810c 	bne.w	800abc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a9ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a9be:	4622      	mov	r2, r4
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	1891      	adds	r1, r2, r2
 800a9c4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a9c6:	415b      	adcs	r3, r3
 800a9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	eb12 0801 	adds.w	r8, r2, r1
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	eb43 0901 	adc.w	r9, r3, r1
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9ee:	4690      	mov	r8, r2
 800a9f0:	4699      	mov	r9, r3
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	eb18 0303 	adds.w	r3, r8, r3
 800a9f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	eb49 0303 	adc.w	r3, r9, r3
 800aa02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aa16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	18db      	adds	r3, r3, r3
 800aa1e:	653b      	str	r3, [r7, #80]	; 0x50
 800aa20:	4613      	mov	r3, r2
 800aa22:	eb42 0303 	adc.w	r3, r2, r3
 800aa26:	657b      	str	r3, [r7, #84]	; 0x54
 800aa28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa30:	f7f6 f912 	bl	8000c58 <__aeabi_uldivmod>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4b61      	ldr	r3, [pc, #388]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aa3a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa3e:	095b      	lsrs	r3, r3, #5
 800aa40:	011c      	lsls	r4, r3, #4
 800aa42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa54:	4642      	mov	r2, r8
 800aa56:	464b      	mov	r3, r9
 800aa58:	1891      	adds	r1, r2, r2
 800aa5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa5c:	415b      	adcs	r3, r3
 800aa5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa64:	4641      	mov	r1, r8
 800aa66:	eb12 0a01 	adds.w	sl, r2, r1
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	eb43 0b01 	adc.w	fp, r3, r1
 800aa70:	f04f 0200 	mov.w	r2, #0
 800aa74:	f04f 0300 	mov.w	r3, #0
 800aa78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa84:	4692      	mov	sl, r2
 800aa86:	469b      	mov	fp, r3
 800aa88:	4643      	mov	r3, r8
 800aa8a:	eb1a 0303 	adds.w	r3, sl, r3
 800aa8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa92:	464b      	mov	r3, r9
 800aa94:	eb4b 0303 	adc.w	r3, fp, r3
 800aa98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aaa8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aaac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aab0:	460b      	mov	r3, r1
 800aab2:	18db      	adds	r3, r3, r3
 800aab4:	643b      	str	r3, [r7, #64]	; 0x40
 800aab6:	4613      	mov	r3, r2
 800aab8:	eb42 0303 	adc.w	r3, r2, r3
 800aabc:	647b      	str	r3, [r7, #68]	; 0x44
 800aabe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aac2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aac6:	f7f6 f8c7 	bl	8000c58 <__aeabi_uldivmod>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	4611      	mov	r1, r2
 800aad0:	4b3b      	ldr	r3, [pc, #236]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aad2:	fba3 2301 	umull	r2, r3, r3, r1
 800aad6:	095b      	lsrs	r3, r3, #5
 800aad8:	2264      	movs	r2, #100	; 0x64
 800aada:	fb02 f303 	mul.w	r3, r2, r3
 800aade:	1acb      	subs	r3, r1, r3
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aae6:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aae8:	fba3 2302 	umull	r2, r3, r3, r2
 800aaec:	095b      	lsrs	r3, r3, #5
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aaf4:	441c      	add	r4, r3
 800aaf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ab08:	4642      	mov	r2, r8
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	1891      	adds	r1, r2, r2
 800ab0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab10:	415b      	adcs	r3, r3
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab18:	4641      	mov	r1, r8
 800ab1a:	1851      	adds	r1, r2, r1
 800ab1c:	6339      	str	r1, [r7, #48]	; 0x30
 800ab1e:	4649      	mov	r1, r9
 800ab20:	414b      	adcs	r3, r1
 800ab22:	637b      	str	r3, [r7, #52]	; 0x34
 800ab24:	f04f 0200 	mov.w	r2, #0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab30:	4659      	mov	r1, fp
 800ab32:	00cb      	lsls	r3, r1, #3
 800ab34:	4651      	mov	r1, sl
 800ab36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab3a:	4651      	mov	r1, sl
 800ab3c:	00ca      	lsls	r2, r1, #3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	4603      	mov	r3, r0
 800ab44:	4642      	mov	r2, r8
 800ab46:	189b      	adds	r3, r3, r2
 800ab48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab4c:	464b      	mov	r3, r9
 800ab4e:	460a      	mov	r2, r1
 800ab50:	eb42 0303 	adc.w	r3, r2, r3
 800ab54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	18db      	adds	r3, r3, r3
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab72:	4613      	mov	r3, r2
 800ab74:	eb42 0303 	adc.w	r3, r2, r3
 800ab78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab82:	f7f6 f869 	bl	8000c58 <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <UART_SetConfig+0x2d4>)
 800ab8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab90:	095b      	lsrs	r3, r3, #5
 800ab92:	2164      	movs	r1, #100	; 0x64
 800ab94:	fb01 f303 	mul.w	r3, r1, r3
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	3332      	adds	r3, #50	; 0x32
 800ab9e:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aba0:	fba2 2303 	umull	r2, r3, r2, r3
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	f003 0207 	and.w	r2, r3, #7
 800abaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4422      	add	r2, r4
 800abb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800abb4:	e105      	b.n	800adc2 <UART_SetConfig+0x4d6>
 800abb6:	bf00      	nop
 800abb8:	40011000 	.word	0x40011000
 800abbc:	40011400 	.word	0x40011400
 800abc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800abce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800abd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800abd6:	4642      	mov	r2, r8
 800abd8:	464b      	mov	r3, r9
 800abda:	1891      	adds	r1, r2, r2
 800abdc:	6239      	str	r1, [r7, #32]
 800abde:	415b      	adcs	r3, r3
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
 800abe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abe6:	4641      	mov	r1, r8
 800abe8:	1854      	adds	r4, r2, r1
 800abea:	4649      	mov	r1, r9
 800abec:	eb43 0501 	adc.w	r5, r3, r1
 800abf0:	f04f 0200 	mov.w	r2, #0
 800abf4:	f04f 0300 	mov.w	r3, #0
 800abf8:	00eb      	lsls	r3, r5, #3
 800abfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abfe:	00e2      	lsls	r2, r4, #3
 800ac00:	4614      	mov	r4, r2
 800ac02:	461d      	mov	r5, r3
 800ac04:	4643      	mov	r3, r8
 800ac06:	18e3      	adds	r3, r4, r3
 800ac08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	eb45 0303 	adc.w	r3, r5, r3
 800ac12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac26:	f04f 0200 	mov.w	r2, #0
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac32:	4629      	mov	r1, r5
 800ac34:	008b      	lsls	r3, r1, #2
 800ac36:	4621      	mov	r1, r4
 800ac38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	008a      	lsls	r2, r1, #2
 800ac40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac44:	f7f6 f808 	bl	8000c58 <__aeabi_uldivmod>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4b60      	ldr	r3, [pc, #384]	; (800add0 <UART_SetConfig+0x4e4>)
 800ac4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac52:	095b      	lsrs	r3, r3, #5
 800ac54:	011c      	lsls	r4, r3, #4
 800ac56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	1891      	adds	r1, r2, r2
 800ac6e:	61b9      	str	r1, [r7, #24]
 800ac70:	415b      	adcs	r3, r3
 800ac72:	61fb      	str	r3, [r7, #28]
 800ac74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac78:	4641      	mov	r1, r8
 800ac7a:	1851      	adds	r1, r2, r1
 800ac7c:	6139      	str	r1, [r7, #16]
 800ac7e:	4649      	mov	r1, r9
 800ac80:	414b      	adcs	r3, r1
 800ac82:	617b      	str	r3, [r7, #20]
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac90:	4659      	mov	r1, fp
 800ac92:	00cb      	lsls	r3, r1, #3
 800ac94:	4651      	mov	r1, sl
 800ac96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac9a:	4651      	mov	r1, sl
 800ac9c:	00ca      	lsls	r2, r1, #3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	4642      	mov	r2, r8
 800aca6:	189b      	adds	r3, r3, r2
 800aca8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acac:	464b      	mov	r3, r9
 800acae:	460a      	mov	r2, r1
 800acb0:	eb42 0303 	adc.w	r3, r2, r3
 800acb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800acc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800acc4:	f04f 0200 	mov.w	r2, #0
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800acd0:	4649      	mov	r1, r9
 800acd2:	008b      	lsls	r3, r1, #2
 800acd4:	4641      	mov	r1, r8
 800acd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acda:	4641      	mov	r1, r8
 800acdc:	008a      	lsls	r2, r1, #2
 800acde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ace2:	f7f5 ffb9 	bl	8000c58 <__aeabi_uldivmod>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4b39      	ldr	r3, [pc, #228]	; (800add0 <UART_SetConfig+0x4e4>)
 800acec:	fba3 1302 	umull	r1, r3, r3, r2
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	2164      	movs	r1, #100	; 0x64
 800acf4:	fb01 f303 	mul.w	r3, r1, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	3332      	adds	r3, #50	; 0x32
 800acfe:	4a34      	ldr	r2, [pc, #208]	; (800add0 <UART_SetConfig+0x4e4>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	095b      	lsrs	r3, r3, #5
 800ad06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad0a:	441c      	add	r4, r3
 800ad0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad10:	2200      	movs	r2, #0
 800ad12:	673b      	str	r3, [r7, #112]	; 0x70
 800ad14:	677a      	str	r2, [r7, #116]	; 0x74
 800ad16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ad1a:	4642      	mov	r2, r8
 800ad1c:	464b      	mov	r3, r9
 800ad1e:	1891      	adds	r1, r2, r2
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	415b      	adcs	r3, r3
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad2a:	4641      	mov	r1, r8
 800ad2c:	1851      	adds	r1, r2, r1
 800ad2e:	6039      	str	r1, [r7, #0]
 800ad30:	4649      	mov	r1, r9
 800ad32:	414b      	adcs	r3, r1
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad42:	4659      	mov	r1, fp
 800ad44:	00cb      	lsls	r3, r1, #3
 800ad46:	4651      	mov	r1, sl
 800ad48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	00ca      	lsls	r2, r1, #3
 800ad50:	4610      	mov	r0, r2
 800ad52:	4619      	mov	r1, r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	4642      	mov	r2, r8
 800ad58:	189b      	adds	r3, r3, r2
 800ad5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	460a      	mov	r2, r1
 800ad60:	eb42 0303 	adc.w	r3, r2, r3
 800ad64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	663b      	str	r3, [r7, #96]	; 0x60
 800ad70:	667a      	str	r2, [r7, #100]	; 0x64
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad7e:	4649      	mov	r1, r9
 800ad80:	008b      	lsls	r3, r1, #2
 800ad82:	4641      	mov	r1, r8
 800ad84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad88:	4641      	mov	r1, r8
 800ad8a:	008a      	lsls	r2, r1, #2
 800ad8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad90:	f7f5 ff62 	bl	8000c58 <__aeabi_uldivmod>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <UART_SetConfig+0x4e4>)
 800ad9a:	fba3 1302 	umull	r1, r3, r3, r2
 800ad9e:	095b      	lsrs	r3, r3, #5
 800ada0:	2164      	movs	r1, #100	; 0x64
 800ada2:	fb01 f303 	mul.w	r3, r1, r3
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	3332      	adds	r3, #50	; 0x32
 800adac:	4a08      	ldr	r2, [pc, #32]	; (800add0 <UART_SetConfig+0x4e4>)
 800adae:	fba2 2303 	umull	r2, r3, r2, r3
 800adb2:	095b      	lsrs	r3, r3, #5
 800adb4:	f003 020f 	and.w	r2, r3, #15
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4422      	add	r2, r4
 800adc0:	609a      	str	r2, [r3, #8]
}
 800adc2:	bf00      	nop
 800adc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800adc8:	46bd      	mov	sp, r7
 800adca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adce:	bf00      	nop
 800add0:	51eb851f 	.word	0x51eb851f

0800add4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800add4:	b084      	sub	sp, #16
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	f107 001c 	add.w	r0, r7, #28
 800ade2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800adea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800adec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800adee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800adf2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800adf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800adf6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800adf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800adfa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800adfe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ae0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae12:	68fa      	ldr	r2, [r7, #12]
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae1a:	2300      	movs	r3, #0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	b004      	add	sp, #16
 800ae28:	4770      	bx	lr

0800ae2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b083      	sub	sp, #12
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2203      	movs	r2, #3
 800ae72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0303 	and.w	r3, r3, #3
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aebc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aec2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aec8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800aed8:	f023 030f 	bic.w	r3, r3, #15
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	691b      	ldr	r3, [r3, #16]
 800aefe:	b2db      	uxtb	r3, r3
}
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3314      	adds	r3, #20
 800af1a:	461a      	mov	r2, r3
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	4413      	add	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
}  
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800af32:	b480      	push	{r7}
 800af34:	b085      	sub	sp, #20
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800af5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800af64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	4313      	orrs	r3, r2
 800af6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	431a      	orrs	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800af7c:	2300      	movs	r3, #0

}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b088      	sub	sp, #32
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800af98:	2310      	movs	r3, #16
 800af9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afa0:	2300      	movs	r3, #0
 800afa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afaa:	f107 0308 	add.w	r3, r7, #8
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7ff ff74 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800afb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800afba:	2110      	movs	r1, #16
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f9d7 	bl	800b370 <SDMMC_GetCmdResp1>
 800afc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc4:	69fb      	ldr	r3, [r7, #28]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3720      	adds	r7, #32
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b088      	sub	sp, #32
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
 800afd6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800afdc:	2311      	movs	r3, #17
 800afde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afe4:	2300      	movs	r3, #0
 800afe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afee:	f107 0308 	add.w	r3, r7, #8
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff ff52 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800affa:	f241 3288 	movw	r2, #5000	; 0x1388
 800affe:	2111      	movs	r1, #17
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f9b5 	bl	800b370 <SDMMC_GetCmdResp1>
 800b006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b008:	69fb      	ldr	r3, [r7, #28]
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3720      	adds	r7, #32
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b088      	sub	sp, #32
 800b016:	af00      	add	r7, sp, #0
 800b018:	6078      	str	r0, [r7, #4]
 800b01a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b020:	2312      	movs	r3, #18
 800b022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b024:	2340      	movs	r3, #64	; 0x40
 800b026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b028:	2300      	movs	r3, #0
 800b02a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b02c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b032:	f107 0308 	add.w	r3, r7, #8
 800b036:	4619      	mov	r1, r3
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7ff ff30 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b03e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b042:	2112      	movs	r1, #18
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f993 	bl	800b370 <SDMMC_GetCmdResp1>
 800b04a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b04c:	69fb      	ldr	r3, [r7, #28]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3720      	adds	r7, #32
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b088      	sub	sp, #32
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b064:	2318      	movs	r3, #24
 800b066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b074:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b076:	f107 0308 	add.w	r3, r7, #8
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff ff0e 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b082:	f241 3288 	movw	r2, #5000	; 0x1388
 800b086:	2118      	movs	r1, #24
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f971 	bl	800b370 <SDMMC_GetCmdResp1>
 800b08e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b090:	69fb      	ldr	r3, [r7, #28]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b088      	sub	sp, #32
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b0a8:	2319      	movs	r3, #25
 800b0aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ba:	f107 0308 	add.w	r3, r7, #8
 800b0be:	4619      	mov	r1, r3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff feec 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b0c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0ca:	2119      	movs	r1, #25
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f94f 	bl	800b370 <SDMMC_GetCmdResp1>
 800b0d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0d4:	69fb      	ldr	r3, [r7, #28]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b088      	sub	sp, #32
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b0ec:	230c      	movs	r3, #12
 800b0ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0f0:	2340      	movs	r3, #64	; 0x40
 800b0f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0fe:	f107 0308 	add.w	r3, r7, #8
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff feca 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b10a:	4a05      	ldr	r2, [pc, #20]	; (800b120 <SDMMC_CmdStopTransfer+0x40>)
 800b10c:	210c      	movs	r1, #12
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f000 f92e 	bl	800b370 <SDMMC_GetCmdResp1>
 800b114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b116:	69fb      	ldr	r3, [r7, #28]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3720      	adds	r7, #32
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	05f5e100 	.word	0x05f5e100

0800b124 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b134:	2307      	movs	r3, #7
 800b136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b138:	2340      	movs	r3, #64	; 0x40
 800b13a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b144:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b146:	f107 0310 	add.w	r3, r7, #16
 800b14a:	4619      	mov	r1, r3
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff fea6 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b152:	f241 3288 	movw	r2, #5000	; 0x1388
 800b156:	2107      	movs	r1, #7
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 f909 	bl	800b370 <SDMMC_GetCmdResp1>
 800b15e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b162:	4618      	mov	r0, r3
 800b164:	3728      	adds	r7, #40	; 0x28
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b088      	sub	sp, #32
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b176:	2300      	movs	r3, #0
 800b178:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b17a:	2300      	movs	r3, #0
 800b17c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b17e:	2300      	movs	r3, #0
 800b180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b182:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b186:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b188:	f107 0308 	add.w	r3, r7, #8
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f7ff fe85 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fb23 	bl	800b7e0 <SDMMC_GetCmdError>
 800b19a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b19c:	69fb      	ldr	r3, [r7, #28]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3720      	adds	r7, #32
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b088      	sub	sp, #32
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b1ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b1b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b1b4:	2308      	movs	r3, #8
 800b1b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1b8:	2340      	movs	r3, #64	; 0x40
 800b1ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1c6:	f107 0308 	add.w	r3, r7, #8
 800b1ca:	4619      	mov	r1, r3
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f7ff fe66 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 fab6 	bl	800b744 <SDMMC_GetCmdResp7>
 800b1d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1da:	69fb      	ldr	r3, [r7, #28]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3720      	adds	r7, #32
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b088      	sub	sp, #32
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b1f2:	2337      	movs	r3, #55	; 0x37
 800b1f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1f6:	2340      	movs	r3, #64	; 0x40
 800b1f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b204:	f107 0308 	add.w	r3, r7, #8
 800b208:	4619      	mov	r1, r3
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7ff fe47 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b210:	f241 3288 	movw	r2, #5000	; 0x1388
 800b214:	2137      	movs	r1, #55	; 0x37
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 f8aa 	bl	800b370 <SDMMC_GetCmdResp1>
 800b21c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21e:	69fb      	ldr	r3, [r7, #28]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3720      	adds	r7, #32
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b088      	sub	sp, #32
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b238:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b23e:	2329      	movs	r3, #41	; 0x29
 800b240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b242:	2340      	movs	r3, #64	; 0x40
 800b244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b246:	2300      	movs	r3, #0
 800b248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b24e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b250:	f107 0308 	add.w	r3, r7, #8
 800b254:	4619      	mov	r1, r3
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fe21 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f9bd 	bl	800b5dc <SDMMC_GetCmdResp3>
 800b262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b264:	69fb      	ldr	r3, [r7, #28]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3720      	adds	r7, #32
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b088      	sub	sp, #32
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b27a:	2302      	movs	r3, #2
 800b27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b27e:	23c0      	movs	r3, #192	; 0xc0
 800b280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b28a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b28c:	f107 0308 	add.w	r3, r7, #8
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff fe03 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 f957 	bl	800b54c <SDMMC_GetCmdResp2>
 800b29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2a0:	69fb      	ldr	r3, [r7, #28]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b088      	sub	sp, #32
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
 800b2b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b2b8:	2309      	movs	r3, #9
 800b2ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b2bc:	23c0      	movs	r3, #192	; 0xc0
 800b2be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2ca:	f107 0308 	add.w	r3, r7, #8
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f7ff fde4 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f938 	bl	800b54c <SDMMC_GetCmdResp2>
 800b2dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2de:	69fb      	ldr	r3, [r7, #28]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3720      	adds	r7, #32
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b088      	sub	sp, #32
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2fa:	2340      	movs	r3, #64	; 0x40
 800b2fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2fe:	2300      	movs	r3, #0
 800b300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b306:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b308:	f107 0308 	add.w	r3, r7, #8
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff fdc5 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b314:	683a      	ldr	r2, [r7, #0]
 800b316:	2103      	movs	r1, #3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f99d 	bl	800b658 <SDMMC_GetCmdResp6>
 800b31e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b320:	69fb      	ldr	r3, [r7, #28]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3720      	adds	r7, #32
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b088      	sub	sp, #32
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b338:	230d      	movs	r3, #13
 800b33a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b33c:	2340      	movs	r3, #64	; 0x40
 800b33e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b340:	2300      	movs	r3, #0
 800b342:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b348:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b34a:	f107 0308 	add.w	r3, r7, #8
 800b34e:	4619      	mov	r1, r3
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f7ff fda4 	bl	800ae9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b356:	f241 3288 	movw	r2, #5000	; 0x1388
 800b35a:	210d      	movs	r1, #13
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 f807 	bl	800b370 <SDMMC_GetCmdResp1>
 800b362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b364:	69fb      	ldr	r3, [r7, #28]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3720      	adds	r7, #32
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	460b      	mov	r3, r1
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b37e:	4b70      	ldr	r3, [pc, #448]	; (800b540 <SDMMC_GetCmdResp1+0x1d0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a70      	ldr	r2, [pc, #448]	; (800b544 <SDMMC_GetCmdResp1+0x1d4>)
 800b384:	fba2 2303 	umull	r2, r3, r2, r3
 800b388:	0a5a      	lsrs	r2, r3, #9
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	fb02 f303 	mul.w	r3, r2, r3
 800b390:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	1e5a      	subs	r2, r3, #1
 800b396:	61fa      	str	r2, [r7, #28]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d102      	bne.n	800b3a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3a0:	e0c9      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0ef      	beq.n	800b392 <SDMMC_GetCmdResp1+0x22>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1ea      	bne.n	800b392 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2204      	movs	r2, #4
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3ce:	2304      	movs	r3, #4
 800b3d0:	e0b1      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e0a6      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	22c5      	movs	r2, #197	; 0xc5
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff fd7f 	bl	800aef2 <SDIO_GetCommandResponse>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d001      	beq.n	800b402 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e099      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b402:	2100      	movs	r1, #0
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7ff fd81 	bl	800af0c <SDIO_GetResponse>
 800b40a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b40c:	697a      	ldr	r2, [r7, #20]
 800b40e:	4b4e      	ldr	r3, [pc, #312]	; (800b548 <SDMMC_GetCmdResp1+0x1d8>)
 800b410:	4013      	ands	r3, r2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b416:	2300      	movs	r3, #0
 800b418:	e08d      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	da02      	bge.n	800b426 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b420:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b424:	e087      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b430:	2340      	movs	r3, #64	; 0x40
 800b432:	e080      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b43e:	2380      	movs	r3, #128	; 0x80
 800b440:	e079      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b44c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b450:	e071      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b45c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b460:	e069      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d002      	beq.n	800b472 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b46c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b470:	e061      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b47c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b480:	e059      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b48c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b490:	e051      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b49c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4a0:	e049      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b4ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4b0:	e041      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b4bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4c0:	e039      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d002      	beq.n	800b4d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b4cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b4d0:	e031      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b4dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b4e0:	e029      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b4ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b4f0:	e021      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b4fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b500:	e019      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b50c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b510:	e011      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b51c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b520:	e009      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f003 0308 	and.w	r3, r3, #8
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d002      	beq.n	800b532 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b52c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b530:	e001      	b.n	800b536 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b536:	4618      	mov	r0, r3
 800b538:	3720      	adds	r7, #32
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20000018 	.word	0x20000018
 800b544:	10624dd3 	.word	0x10624dd3
 800b548:	fdffe008 	.word	0xfdffe008

0800b54c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b085      	sub	sp, #20
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b554:	4b1f      	ldr	r3, [pc, #124]	; (800b5d4 <SDMMC_GetCmdResp2+0x88>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a1f      	ldr	r2, [pc, #124]	; (800b5d8 <SDMMC_GetCmdResp2+0x8c>)
 800b55a:	fba2 2303 	umull	r2, r3, r2, r3
 800b55e:	0a5b      	lsrs	r3, r3, #9
 800b560:	f241 3288 	movw	r2, #5000	; 0x1388
 800b564:	fb02 f303 	mul.w	r3, r2, r3
 800b568:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	1e5a      	subs	r2, r3, #1
 800b56e:	60fa      	str	r2, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b578:	e026      	b.n	800b5c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0ef      	beq.n	800b56a <SDMMC_GetCmdResp2+0x1e>
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1ea      	bne.n	800b56a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5a6:	2304      	movs	r3, #4
 800b5a8:	e00e      	b.n	800b5c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d004      	beq.n	800b5c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e003      	b.n	800b5c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	22c5      	movs	r2, #197	; 0xc5
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	20000018 	.word	0x20000018
 800b5d8:	10624dd3 	.word	0x10624dd3

0800b5dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5e4:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <SDMMC_GetCmdResp3+0x74>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a1a      	ldr	r2, [pc, #104]	; (800b654 <SDMMC_GetCmdResp3+0x78>)
 800b5ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ee:	0a5b      	lsrs	r3, r3, #9
 800b5f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5f4:	fb02 f303 	mul.w	r3, r2, r3
 800b5f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	1e5a      	subs	r2, r3, #1
 800b5fe:	60fa      	str	r2, [r7, #12]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b608:	e01b      	b.n	800b642 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0ef      	beq.n	800b5fa <SDMMC_GetCmdResp3+0x1e>
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1ea      	bne.n	800b5fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b628:	f003 0304 	and.w	r3, r3, #4
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d004      	beq.n	800b63a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2204      	movs	r2, #4
 800b634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b636:	2304      	movs	r3, #4
 800b638:	e003      	b.n	800b642 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	22c5      	movs	r2, #197	; 0xc5
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	20000018 	.word	0x20000018
 800b654:	10624dd3 	.word	0x10624dd3

0800b658 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b088      	sub	sp, #32
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	460b      	mov	r3, r1
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b666:	4b35      	ldr	r3, [pc, #212]	; (800b73c <SDMMC_GetCmdResp6+0xe4>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a35      	ldr	r2, [pc, #212]	; (800b740 <SDMMC_GetCmdResp6+0xe8>)
 800b66c:	fba2 2303 	umull	r2, r3, r2, r3
 800b670:	0a5b      	lsrs	r3, r3, #9
 800b672:	f241 3288 	movw	r2, #5000	; 0x1388
 800b676:	fb02 f303 	mul.w	r3, r2, r3
 800b67a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	1e5a      	subs	r2, r3, #1
 800b680:	61fa      	str	r2, [r7, #28]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d102      	bne.n	800b68c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b68a:	e052      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b690:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0ef      	beq.n	800b67c <SDMMC_GetCmdResp6+0x24>
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1ea      	bne.n	800b67c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6aa:	f003 0304 	and.w	r3, r3, #4
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d004      	beq.n	800b6bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2204      	movs	r2, #4
 800b6b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b6b8:	2304      	movs	r3, #4
 800b6ba:	e03a      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d004      	beq.n	800b6d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e02f      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f7ff fc0d 	bl	800aef2 <SDIO_GetCommandResponse>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	7afb      	ldrb	r3, [r7, #11]
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d001      	beq.n	800b6e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e025      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	22c5      	movs	r2, #197	; 0xc5
 800b6ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f7ff fc0c 	bl	800af0c <SDIO_GetResponse>
 800b6f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d106      	bne.n	800b70e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	0c1b      	lsrs	r3, r3, #16
 800b704:	b29a      	uxth	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b70a:	2300      	movs	r3, #0
 800b70c:	e011      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d002      	beq.n	800b71e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b71c:	e009      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b72c:	e001      	b.n	800b732 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b72e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000018 	.word	0x20000018
 800b740:	10624dd3 	.word	0x10624dd3

0800b744 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b74c:	4b22      	ldr	r3, [pc, #136]	; (800b7d8 <SDMMC_GetCmdResp7+0x94>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a22      	ldr	r2, [pc, #136]	; (800b7dc <SDMMC_GetCmdResp7+0x98>)
 800b752:	fba2 2303 	umull	r2, r3, r2, r3
 800b756:	0a5b      	lsrs	r3, r3, #9
 800b758:	f241 3288 	movw	r2, #5000	; 0x1388
 800b75c:	fb02 f303 	mul.w	r3, r2, r3
 800b760:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	1e5a      	subs	r2, r3, #1
 800b766:	60fa      	str	r2, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d102      	bne.n	800b772 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b76c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b770:	e02c      	b.n	800b7cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b776:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d0ef      	beq.n	800b762 <SDMMC_GetCmdResp7+0x1e>
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1ea      	bne.n	800b762 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b790:	f003 0304 	and.w	r3, r3, #4
 800b794:	2b00      	cmp	r3, #0
 800b796:	d004      	beq.n	800b7a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2204      	movs	r2, #4
 800b79c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b79e:	2304      	movs	r3, #4
 800b7a0:	e014      	b.n	800b7cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e009      	b.n	800b7cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2240      	movs	r2, #64	; 0x40
 800b7c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7ca:	2300      	movs	r3, #0
  
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	20000018 	.word	0x20000018
 800b7dc:	10624dd3 	.word	0x10624dd3

0800b7e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7e8:	4b11      	ldr	r3, [pc, #68]	; (800b830 <SDMMC_GetCmdError+0x50>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a11      	ldr	r2, [pc, #68]	; (800b834 <SDMMC_GetCmdError+0x54>)
 800b7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f2:	0a5b      	lsrs	r3, r3, #9
 800b7f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f8:	fb02 f303 	mul.w	r3, r2, r3
 800b7fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	1e5a      	subs	r2, r3, #1
 800b802:	60fa      	str	r2, [r7, #12]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d102      	bne.n	800b80e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b80c:	e009      	b.n	800b822 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b816:	2b00      	cmp	r3, #0
 800b818:	d0f1      	beq.n	800b7fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	22c5      	movs	r2, #197	; 0xc5
 800b81e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	20000018 	.word	0x20000018
 800b834:	10624dd3 	.word	0x10624dd3

0800b838 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b83c:	4904      	ldr	r1, [pc, #16]	; (800b850 <MX_FATFS_Init+0x18>)
 800b83e:	4805      	ldr	r0, [pc, #20]	; (800b854 <MX_FATFS_Init+0x1c>)
 800b840:	f002 fde0 	bl	800e404 <FATFS_LinkDriver>
 800b844:	4603      	mov	r3, r0
 800b846:	461a      	mov	r2, r3
 800b848:	4b03      	ldr	r3, [pc, #12]	; (800b858 <MX_FATFS_Init+0x20>)
 800b84a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */
  /* USER CODE END Init */
}
 800b84c:	bf00      	nop
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200005ec 	.word	0x200005ec
 800b854:	08011e98 	.word	0x08011e98
 800b858:	200005e8 	.word	0x200005e8

0800b85c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b85c:	b480      	push	{r7}
 800b85e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 800b860:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b862:	4618      	mov	r0, r3
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b876:	f000 f86b 	bl	800b950 <BSP_SD_IsDetected>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d001      	beq.n	800b884 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e005      	b.n	800b890 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b884:	4804      	ldr	r0, [pc, #16]	; (800b898 <BSP_SD_Init+0x2c>)
 800b886:	f7fc fb97 	bl	8007fb8 <HAL_SD_Init>
 800b88a:	4603      	mov	r3, r0
 800b88c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b88e:	79fb      	ldrb	r3, [r7, #7]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}
 800b898:	200003dc 	.word	0x200003dc

0800b89c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b088      	sub	sp, #32
 800b8a0:	af02      	add	r7, sp, #8
 800b8a2:	60f8      	str	r0, [r7, #12]
 800b8a4:	60b9      	str	r1, [r7, #8]
 800b8a6:	607a      	str	r2, [r7, #4]
 800b8a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	68f9      	ldr	r1, [r7, #12]
 800b8b8:	4806      	ldr	r0, [pc, #24]	; (800b8d4 <BSP_SD_ReadBlocks+0x38>)
 800b8ba:	f7fc fc2d 	bl	8008118 <HAL_SD_ReadBlocks>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d001      	beq.n	800b8c8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3718      	adds	r7, #24
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	200003dc 	.word	0x200003dc

0800b8d8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af02      	add	r7, sp, #8
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	68f9      	ldr	r1, [r7, #12]
 800b8f4:	4806      	ldr	r0, [pc, #24]	; (800b910 <BSP_SD_WriteBlocks+0x38>)
 800b8f6:	f7fc fded 	bl	80084d4 <HAL_SD_WriteBlocks>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b904:	7dfb      	ldrb	r3, [r7, #23]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	200003dc 	.word	0x200003dc

0800b914 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b918:	4805      	ldr	r0, [pc, #20]	; (800b930 <BSP_SD_GetCardState+0x1c>)
 800b91a:	f7fd f931 	bl	8008b80 <HAL_SD_GetCardState>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b04      	cmp	r3, #4
 800b922:	bf14      	ite	ne
 800b924:	2301      	movne	r3, #1
 800b926:	2300      	moveq	r3, #0
 800b928:	b2db      	uxtb	r3, r3
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	200003dc 	.word	0x200003dc

0800b934 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b93c:	6879      	ldr	r1, [r7, #4]
 800b93e:	4803      	ldr	r0, [pc, #12]	; (800b94c <BSP_SD_GetCardInfo+0x18>)
 800b940:	f7fd f8f2 	bl	8008b28 <HAL_SD_GetCardInfo>
}
 800b944:	bf00      	nop
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	200003dc 	.word	0x200003dc

0800b950 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b956:	2301      	movs	r3, #1
 800b958:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b95a:	f000 f80b 	bl	800b974 <BSP_PlatformIsDetected>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d101      	bne.n	800b968 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b964:	2300      	movs	r3, #0
 800b966:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	b2db      	uxtb	r3, r3
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <BSP_PlatformIsDetected>:
 ******************************************************************************
 */
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b97a:	2301      	movs	r3, #1
 800b97c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b97e:	2104      	movs	r1, #4
 800b980:	4806      	ldr	r0, [pc, #24]	; (800b99c <BSP_PlatformIsDetected+0x28>)
 800b982:	f7fa f9d3 	bl	8005d2c <HAL_GPIO_ReadPin>
 800b986:	4603      	mov	r3, r0
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d001      	beq.n	800b990 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b98c:	2300      	movs	r3, #0
 800b98e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
	/* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800b990:	79fb      	ldrb	r3, [r7, #7]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	40020400 	.word	0x40020400

0800b9a0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b9aa:	4b0b      	ldr	r3, [pc, #44]	; (800b9d8 <SD_CheckStatus+0x38>)
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b9b0:	f7ff ffb0 	bl	800b914 <BSP_SD_GetCardState>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d107      	bne.n	800b9ca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b9ba:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <SD_CheckStatus+0x38>)
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	f023 0301 	bic.w	r3, r3, #1
 800b9c4:	b2da      	uxtb	r2, r3
 800b9c6:	4b04      	ldr	r3, [pc, #16]	; (800b9d8 <SD_CheckStatus+0x38>)
 800b9c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b9ca:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <SD_CheckStatus+0x38>)
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	b2db      	uxtb	r3, r3
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	20000021 	.word	0x20000021

0800b9dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800b9e6:	4b0b      	ldr	r3, [pc, #44]	; (800ba14 <SD_initialize+0x38>)
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b9ec:	f7ff ff3e 	bl	800b86c <BSP_SD_Init>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d107      	bne.n	800ba06 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800b9f6:	79fb      	ldrb	r3, [r7, #7]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7ff ffd1 	bl	800b9a0 <SD_CheckStatus>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	4b04      	ldr	r3, [pc, #16]	; (800ba14 <SD_initialize+0x38>)
 800ba04:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ba06:	4b03      	ldr	r3, [pc, #12]	; (800ba14 <SD_initialize+0x38>)
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	b2db      	uxtb	r3, r3
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20000021 	.word	0x20000021

0800ba18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	4603      	mov	r3, r0
 800ba20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7ff ffbb 	bl	800b9a0 <SD_CheckStatus>
 800ba2a:	4603      	mov	r3, r0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}

0800ba34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b086      	sub	sp, #24
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	607a      	str	r2, [r7, #4]
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ba48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	6879      	ldr	r1, [r7, #4]
 800ba50:	68b8      	ldr	r0, [r7, #8]
 800ba52:	f7ff ff23 	bl	800b89c <BSP_SD_ReadBlocks>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d107      	bne.n	800ba6c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ba5c:	bf00      	nop
 800ba5e:	f7ff ff59 	bl	800b914 <BSP_SD_GetCardState>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1fa      	bne.n	800ba5e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b086      	sub	sp, #24
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	603b      	str	r3, [r7, #0]
 800ba82:	4603      	mov	r3, r0
 800ba84:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ba86:	2301      	movs	r3, #1
 800ba88:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ba8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	6879      	ldr	r1, [r7, #4]
 800ba92:	68b8      	ldr	r0, [r7, #8]
 800ba94:	f7ff ff20 	bl	800b8d8 <BSP_SD_WriteBlocks>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d107      	bne.n	800baae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ba9e:	bf00      	nop
 800baa0:	f7ff ff38 	bl	800b914 <BSP_SD_GetCardState>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d1fa      	bne.n	800baa0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800baae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b08c      	sub	sp, #48	; 0x30
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	603a      	str	r2, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
 800bac4:	460b      	mov	r3, r1
 800bac6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bace:	4b25      	ldr	r3, [pc, #148]	; (800bb64 <SD_ioctl+0xac>)
 800bad0:	781b      	ldrb	r3, [r3, #0]
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	f003 0301 	and.w	r3, r3, #1
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <SD_ioctl+0x28>
 800badc:	2303      	movs	r3, #3
 800bade:	e03c      	b.n	800bb5a <SD_ioctl+0xa2>

  switch (cmd)
 800bae0:	79bb      	ldrb	r3, [r7, #6]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d834      	bhi.n	800bb50 <SD_ioctl+0x98>
 800bae6:	a201      	add	r2, pc, #4	; (adr r2, 800baec <SD_ioctl+0x34>)
 800bae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baec:	0800bafd 	.word	0x0800bafd
 800baf0:	0800bb05 	.word	0x0800bb05
 800baf4:	0800bb1d 	.word	0x0800bb1d
 800baf8:	0800bb37 	.word	0x0800bb37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb02:	e028      	b.n	800bb56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb04:	f107 030c 	add.w	r3, r7, #12
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff ff13 	bl	800b934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bb0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb1a:	e01c      	b.n	800bb56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb1c:	f107 030c 	add.w	r3, r7, #12
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff ff07 	bl	800b934 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb34:	e00f      	b.n	800bb56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bb36:	f107 030c 	add.w	r3, r7, #12
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff fefa 	bl	800b934 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	0a5a      	lsrs	r2, r3, #9
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bb4e:	e002      	b.n	800bb56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bb50:	2304      	movs	r3, #4
 800bb52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bb56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3730      	adds	r7, #48	; 0x30
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}
 800bb62:	bf00      	nop
 800bb64:	20000021 	.word	0x20000021

0800bb68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	4a08      	ldr	r2, [pc, #32]	; (800bb98 <disk_status+0x30>)
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4413      	add	r3, r2
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	79fa      	ldrb	r2, [r7, #7]
 800bb80:	4905      	ldr	r1, [pc, #20]	; (800bb98 <disk_status+0x30>)
 800bb82:	440a      	add	r2, r1
 800bb84:	7a12      	ldrb	r2, [r2, #8]
 800bb86:	4610      	mov	r0, r2
 800bb88:	4798      	blx	r3
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	20000618 	.word	0x20000618

0800bb9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	4603      	mov	r3, r0
 800bba4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bbaa:	79fb      	ldrb	r3, [r7, #7]
 800bbac:	4a0d      	ldr	r2, [pc, #52]	; (800bbe4 <disk_initialize+0x48>)
 800bbae:	5cd3      	ldrb	r3, [r2, r3]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d111      	bne.n	800bbd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bbb4:	79fb      	ldrb	r3, [r7, #7]
 800bbb6:	4a0b      	ldr	r2, [pc, #44]	; (800bbe4 <disk_initialize+0x48>)
 800bbb8:	2101      	movs	r1, #1
 800bbba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bbbc:	79fb      	ldrb	r3, [r7, #7]
 800bbbe:	4a09      	ldr	r2, [pc, #36]	; (800bbe4 <disk_initialize+0x48>)
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	79fa      	ldrb	r2, [r7, #7]
 800bbca:	4906      	ldr	r1, [pc, #24]	; (800bbe4 <disk_initialize+0x48>)
 800bbcc:	440a      	add	r2, r1
 800bbce:	7a12      	ldrb	r2, [r2, #8]
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	4798      	blx	r3
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000618 	.word	0x20000618

0800bbe8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bbe8:	b590      	push	{r4, r7, lr}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	607a      	str	r2, [r7, #4]
 800bbf2:	603b      	str	r3, [r7, #0]
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	4a0a      	ldr	r2, [pc, #40]	; (800bc24 <disk_read+0x3c>)
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	4413      	add	r3, r2
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	689c      	ldr	r4, [r3, #8]
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
 800bc06:	4a07      	ldr	r2, [pc, #28]	; (800bc24 <disk_read+0x3c>)
 800bc08:	4413      	add	r3, r2
 800bc0a:	7a18      	ldrb	r0, [r3, #8]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	68b9      	ldr	r1, [r7, #8]
 800bc12:	47a0      	blx	r4
 800bc14:	4603      	mov	r3, r0
 800bc16:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	371c      	adds	r7, #28
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd90      	pop	{r4, r7, pc}
 800bc22:	bf00      	nop
 800bc24:	20000618 	.word	0x20000618

0800bc28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60b9      	str	r1, [r7, #8]
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bc38:	7bfb      	ldrb	r3, [r7, #15]
 800bc3a:	4a0a      	ldr	r2, [pc, #40]	; (800bc64 <disk_write+0x3c>)
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	68dc      	ldr	r4, [r3, #12]
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	4a07      	ldr	r2, [pc, #28]	; (800bc64 <disk_write+0x3c>)
 800bc48:	4413      	add	r3, r2
 800bc4a:	7a18      	ldrb	r0, [r3, #8]
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	47a0      	blx	r4
 800bc54:	4603      	mov	r3, r0
 800bc56:	75fb      	strb	r3, [r7, #23]
  return res;
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	371c      	adds	r7, #28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd90      	pop	{r4, r7, pc}
 800bc62:	bf00      	nop
 800bc64:	20000618 	.word	0x20000618

0800bc68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	603a      	str	r2, [r7, #0]
 800bc72:	71fb      	strb	r3, [r7, #7]
 800bc74:	460b      	mov	r3, r1
 800bc76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bc78:	79fb      	ldrb	r3, [r7, #7]
 800bc7a:	4a09      	ldr	r2, [pc, #36]	; (800bca0 <disk_ioctl+0x38>)
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	4413      	add	r3, r2
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	79fa      	ldrb	r2, [r7, #7]
 800bc86:	4906      	ldr	r1, [pc, #24]	; (800bca0 <disk_ioctl+0x38>)
 800bc88:	440a      	add	r2, r1
 800bc8a:	7a10      	ldrb	r0, [r2, #8]
 800bc8c:	79b9      	ldrb	r1, [r7, #6]
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	4798      	blx	r3
 800bc92:	4603      	mov	r3, r0
 800bc94:	73fb      	strb	r3, [r7, #15]
  return res;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	20000618 	.word	0x20000618

0800bca4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bca4:	b480      	push	{r7}
 800bca6:	b085      	sub	sp, #20
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bcb4:	89fb      	ldrh	r3, [r7, #14]
 800bcb6:	021b      	lsls	r3, r3, #8
 800bcb8:	b21a      	sxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	b21b      	sxth	r3, r3
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	b21b      	sxth	r3, r3
 800bcc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bcc6:	89fb      	ldrh	r3, [r7, #14]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b085      	sub	sp, #20
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3303      	adds	r3, #3
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	021b      	lsls	r3, r3, #8
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	3202      	adds	r2, #2
 800bcec:	7812      	ldrb	r2, [r2, #0]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	3201      	adds	r2, #1
 800bcfa:	7812      	ldrb	r2, [r2, #0]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	7812      	ldrb	r2, [r2, #0]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]
	return rv;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b083      	sub	sp, #12
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
 800bd22:	460b      	mov	r3, r1
 800bd24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	1c5a      	adds	r2, r3, #1
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	887a      	ldrh	r2, [r7, #2]
 800bd2e:	b2d2      	uxtb	r2, r2
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	887b      	ldrh	r3, [r7, #2]
 800bd34:	0a1b      	lsrs	r3, r3, #8
 800bd36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	1c5a      	adds	r2, r3, #1
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	887a      	ldrh	r2, [r7, #2]
 800bd40:	b2d2      	uxtb	r2, r2
 800bd42:	701a      	strb	r2, [r3, #0]
}
 800bd44:	bf00      	nop
 800bd46:	370c      	adds	r7, #12
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	b2d2      	uxtb	r2, r2
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	0a1b      	lsrs	r3, r3, #8
 800bd6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	1c5a      	adds	r2, r3, #1
 800bd70:	607a      	str	r2, [r7, #4]
 800bd72:	683a      	ldr	r2, [r7, #0]
 800bd74:	b2d2      	uxtb	r2, r2
 800bd76:	701a      	strb	r2, [r3, #0]
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	0a1b      	lsrs	r3, r3, #8
 800bd7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	1c5a      	adds	r2, r3, #1
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	683a      	ldr	r2, [r7, #0]
 800bd86:	b2d2      	uxtb	r2, r2
 800bd88:	701a      	strb	r2, [r3, #0]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	0a1b      	lsrs	r3, r3, #8
 800bd8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	1c5a      	adds	r2, r3, #1
 800bd94:	607a      	str	r2, [r7, #4]
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	701a      	strb	r2, [r3, #0]
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bda8:	b480      	push	{r7}
 800bdaa:	b087      	sub	sp, #28
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00d      	beq.n	800bdde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bdc2:	693a      	ldr	r2, [r7, #16]
 800bdc4:	1c53      	adds	r3, r2, #1
 800bdc6:	613b      	str	r3, [r7, #16]
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	1c59      	adds	r1, r3, #1
 800bdcc:	6179      	str	r1, [r7, #20]
 800bdce:	7812      	ldrb	r2, [r2, #0]
 800bdd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	607b      	str	r3, [r7, #4]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1f1      	bne.n	800bdc2 <mem_cpy+0x1a>
	}
}
 800bdde:	bf00      	nop
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bdea:	b480      	push	{r7}
 800bdec:	b087      	sub	sp, #28
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	60f8      	str	r0, [r7, #12]
 800bdf2:	60b9      	str	r1, [r7, #8]
 800bdf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	1c5a      	adds	r2, r3, #1
 800bdfe:	617a      	str	r2, [r7, #20]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	b2d2      	uxtb	r2, r2
 800be04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	3b01      	subs	r3, #1
 800be0a:	607b      	str	r3, [r7, #4]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1f3      	bne.n	800bdfa <mem_set+0x10>
}
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	371c      	adds	r7, #28
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800be20:	b480      	push	{r7}
 800be22:	b089      	sub	sp, #36	; 0x24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	61fb      	str	r3, [r7, #28]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	1c5a      	adds	r2, r3, #1
 800be3c:	61fa      	str	r2, [r7, #28]
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	4619      	mov	r1, r3
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	61ba      	str	r2, [r7, #24]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	1acb      	subs	r3, r1, r3
 800be4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	3b01      	subs	r3, #1
 800be52:	607b      	str	r3, [r7, #4]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d002      	beq.n	800be60 <mem_cmp+0x40>
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0eb      	beq.n	800be38 <mem_cmp+0x18>

	return r;
 800be60:	697b      	ldr	r3, [r7, #20]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3724      	adds	r7, #36	; 0x24
 800be66:	46bd      	mov	sp, r7
 800be68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6c:	4770      	bx	lr

0800be6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800be78:	e002      	b.n	800be80 <chk_chr+0x12>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	3301      	adds	r3, #1
 800be7e:	607b      	str	r3, [r7, #4]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <chk_chr+0x26>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	461a      	mov	r2, r3
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	4293      	cmp	r3, r2
 800be92:	d1f2      	bne.n	800be7a <chk_chr+0xc>
	return *str;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	781b      	ldrb	r3, [r3, #0]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800beae:	2300      	movs	r3, #0
 800beb0:	60bb      	str	r3, [r7, #8]
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e029      	b.n	800bf0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800beb8:	4a27      	ldr	r2, [pc, #156]	; (800bf58 <chk_lock+0xb4>)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	011b      	lsls	r3, r3, #4
 800bebe:	4413      	add	r3, r2
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01d      	beq.n	800bf02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bec6:	4a24      	ldr	r2, [pc, #144]	; (800bf58 <chk_lock+0xb4>)
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	4413      	add	r3, r2
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d116      	bne.n	800bf06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bed8:	4a1f      	ldr	r2, [pc, #124]	; (800bf58 <chk_lock+0xb4>)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	011b      	lsls	r3, r3, #4
 800bede:	4413      	add	r3, r2
 800bee0:	3304      	adds	r3, #4
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bee8:	429a      	cmp	r2, r3
 800beea:	d10c      	bne.n	800bf06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800beec:	4a1a      	ldr	r2, [pc, #104]	; (800bf58 <chk_lock+0xb4>)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	011b      	lsls	r3, r3, #4
 800bef2:	4413      	add	r3, r2
 800bef4:	3308      	adds	r3, #8
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800befc:	429a      	cmp	r2, r3
 800befe:	d102      	bne.n	800bf06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bf00:	e007      	b.n	800bf12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bf02:	2301      	movs	r3, #1
 800bf04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	60fb      	str	r3, [r7, #12]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d9d2      	bls.n	800beb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d109      	bne.n	800bf2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d102      	bne.n	800bf24 <chk_lock+0x80>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d101      	bne.n	800bf28 <chk_lock+0x84>
 800bf24:	2300      	movs	r3, #0
 800bf26:	e010      	b.n	800bf4a <chk_lock+0xa6>
 800bf28:	2312      	movs	r3, #18
 800bf2a:	e00e      	b.n	800bf4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d108      	bne.n	800bf44 <chk_lock+0xa0>
 800bf32:	4a09      	ldr	r2, [pc, #36]	; (800bf58 <chk_lock+0xb4>)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	011b      	lsls	r3, r3, #4
 800bf38:	4413      	add	r3, r2
 800bf3a:	330c      	adds	r3, #12
 800bf3c:	881b      	ldrh	r3, [r3, #0]
 800bf3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf42:	d101      	bne.n	800bf48 <chk_lock+0xa4>
 800bf44:	2310      	movs	r3, #16
 800bf46:	e000      	b.n	800bf4a <chk_lock+0xa6>
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr
 800bf56:	bf00      	nop
 800bf58:	200005f8 	.word	0x200005f8

0800bf5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf62:	2300      	movs	r3, #0
 800bf64:	607b      	str	r3, [r7, #4]
 800bf66:	e002      	b.n	800bf6e <enq_lock+0x12>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	607b      	str	r3, [r7, #4]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d806      	bhi.n	800bf82 <enq_lock+0x26>
 800bf74:	4a09      	ldr	r2, [pc, #36]	; (800bf9c <enq_lock+0x40>)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	4413      	add	r3, r2
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1f2      	bne.n	800bf68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	bf14      	ite	ne
 800bf88:	2301      	movne	r3, #1
 800bf8a:	2300      	moveq	r3, #0
 800bf8c:	b2db      	uxtb	r3, r3
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	370c      	adds	r7, #12
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	200005f8 	.word	0x200005f8

0800bfa0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
 800bfa8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bfaa:	2300      	movs	r3, #0
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	e01f      	b.n	800bff0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bfb0:	4a41      	ldr	r2, [pc, #260]	; (800c0b8 <inc_lock+0x118>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	011b      	lsls	r3, r3, #4
 800bfb6:	4413      	add	r3, r2
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d113      	bne.n	800bfea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bfc2:	4a3d      	ldr	r2, [pc, #244]	; (800c0b8 <inc_lock+0x118>)
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	4413      	add	r3, r2
 800bfca:	3304      	adds	r3, #4
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d109      	bne.n	800bfea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bfd6:	4a38      	ldr	r2, [pc, #224]	; (800c0b8 <inc_lock+0x118>)
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	011b      	lsls	r3, r3, #4
 800bfdc:	4413      	add	r3, r2
 800bfde:	3308      	adds	r3, #8
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d006      	beq.n	800bff8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	3301      	adds	r3, #1
 800bfee:	60fb      	str	r3, [r7, #12]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d9dc      	bls.n	800bfb0 <inc_lock+0x10>
 800bff6:	e000      	b.n	800bffa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bff8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d132      	bne.n	800c066 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c000:	2300      	movs	r3, #0
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e002      	b.n	800c00c <inc_lock+0x6c>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	3301      	adds	r3, #1
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2b01      	cmp	r3, #1
 800c010:	d806      	bhi.n	800c020 <inc_lock+0x80>
 800c012:	4a29      	ldr	r2, [pc, #164]	; (800c0b8 <inc_lock+0x118>)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	4413      	add	r3, r2
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1f2      	bne.n	800c006 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b02      	cmp	r3, #2
 800c024:	d101      	bne.n	800c02a <inc_lock+0x8a>
 800c026:	2300      	movs	r3, #0
 800c028:	e040      	b.n	800c0ac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	4922      	ldr	r1, [pc, #136]	; (800c0b8 <inc_lock+0x118>)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	440b      	add	r3, r1
 800c036:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689a      	ldr	r2, [r3, #8]
 800c03c:	491e      	ldr	r1, [pc, #120]	; (800c0b8 <inc_lock+0x118>)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	011b      	lsls	r3, r3, #4
 800c042:	440b      	add	r3, r1
 800c044:	3304      	adds	r3, #4
 800c046:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	695a      	ldr	r2, [r3, #20]
 800c04c:	491a      	ldr	r1, [pc, #104]	; (800c0b8 <inc_lock+0x118>)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	440b      	add	r3, r1
 800c054:	3308      	adds	r3, #8
 800c056:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c058:	4a17      	ldr	r2, [pc, #92]	; (800c0b8 <inc_lock+0x118>)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	011b      	lsls	r3, r3, #4
 800c05e:	4413      	add	r3, r2
 800c060:	330c      	adds	r3, #12
 800c062:	2200      	movs	r2, #0
 800c064:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <inc_lock+0xe0>
 800c06c:	4a12      	ldr	r2, [pc, #72]	; (800c0b8 <inc_lock+0x118>)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	4413      	add	r3, r2
 800c074:	330c      	adds	r3, #12
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d001      	beq.n	800c080 <inc_lock+0xe0>
 800c07c:	2300      	movs	r3, #0
 800c07e:	e015      	b.n	800c0ac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d108      	bne.n	800c098 <inc_lock+0xf8>
 800c086:	4a0c      	ldr	r2, [pc, #48]	; (800c0b8 <inc_lock+0x118>)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	011b      	lsls	r3, r3, #4
 800c08c:	4413      	add	r3, r2
 800c08e:	330c      	adds	r3, #12
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	3301      	adds	r3, #1
 800c094:	b29a      	uxth	r2, r3
 800c096:	e001      	b.n	800c09c <inc_lock+0xfc>
 800c098:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c09c:	4906      	ldr	r1, [pc, #24]	; (800c0b8 <inc_lock+0x118>)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	011b      	lsls	r3, r3, #4
 800c0a2:	440b      	add	r3, r1
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3301      	adds	r3, #1
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	200005f8 	.word	0x200005f8

0800c0bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	e010      	b.n	800c0ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0ca:	4a0d      	ldr	r2, [pc, #52]	; (800c100 <clear_lock+0x44>)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	011b      	lsls	r3, r3, #4
 800c0d0:	4413      	add	r3, r2
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d105      	bne.n	800c0e6 <clear_lock+0x2a>
 800c0da:	4a09      	ldr	r2, [pc, #36]	; (800c100 <clear_lock+0x44>)
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	011b      	lsls	r3, r3, #4
 800c0e0:	4413      	add	r3, r2
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d9eb      	bls.n	800c0ca <clear_lock+0xe>
	}
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	3714      	adds	r7, #20
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	200005f8 	.word	0x200005f8

0800c104 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c10c:	2300      	movs	r3, #0
 800c10e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	78db      	ldrb	r3, [r3, #3]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d034      	beq.n	800c182 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c11c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	7858      	ldrb	r0, [r3, #1]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c128:	2301      	movs	r3, #1
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	f7ff fd7c 	bl	800bc28 <disk_write>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c136:	2301      	movs	r3, #1
 800c138:	73fb      	strb	r3, [r7, #15]
 800c13a:	e022      	b.n	800c182 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c146:	697a      	ldr	r2, [r7, #20]
 800c148:	1ad2      	subs	r2, r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	69db      	ldr	r3, [r3, #28]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d217      	bcs.n	800c182 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	789b      	ldrb	r3, [r3, #2]
 800c156:	613b      	str	r3, [r7, #16]
 800c158:	e010      	b.n	800c17c <sync_window+0x78>
					wsect += fs->fsize;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4413      	add	r3, r2
 800c162:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	7858      	ldrb	r0, [r3, #1]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c16e:	2301      	movs	r3, #1
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	f7ff fd59 	bl	800bc28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3b01      	subs	r3, #1
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d8eb      	bhi.n	800c15a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c182:	7bfb      	ldrb	r3, [r7, #15]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3718      	adds	r7, #24
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d01b      	beq.n	800c1dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f7ff ffad 	bl	800c104 <sync_window>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d113      	bne.n	800c1dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	7858      	ldrb	r0, [r3, #1]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c1be:	2301      	movs	r3, #1
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	f7ff fd11 	bl	800bbe8 <disk_read>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d004      	beq.n	800c1d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3710      	adds	r7, #16
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f7ff ff87 	bl	800c104 <sync_window>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d159      	bne.n	800c2b4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b03      	cmp	r3, #3
 800c206:	d149      	bne.n	800c29c <sync_fs+0xb4>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	791b      	ldrb	r3, [r3, #4]
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	d145      	bne.n	800c29c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	899b      	ldrh	r3, [r3, #12]
 800c21a:	461a      	mov	r2, r3
 800c21c:	2100      	movs	r1, #0
 800c21e:	f7ff fde4 	bl	800bdea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3334      	adds	r3, #52	; 0x34
 800c226:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c22a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff fd73 	bl	800bd1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3334      	adds	r3, #52	; 0x34
 800c238:	4921      	ldr	r1, [pc, #132]	; (800c2c0 <sync_fs+0xd8>)
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff fd88 	bl	800bd50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3334      	adds	r3, #52	; 0x34
 800c244:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c248:	491e      	ldr	r1, [pc, #120]	; (800c2c4 <sync_fs+0xdc>)
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fd80 	bl	800bd50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	3334      	adds	r3, #52	; 0x34
 800c254:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	4619      	mov	r1, r3
 800c25e:	4610      	mov	r0, r2
 800c260:	f7ff fd76 	bl	800bd50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3334      	adds	r3, #52	; 0x34
 800c268:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	4619      	mov	r1, r3
 800c272:	4610      	mov	r0, r2
 800c274:	f7ff fd6c 	bl	800bd50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a1b      	ldr	r3, [r3, #32]
 800c27c:	1c5a      	adds	r2, r3, #1
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7858      	ldrb	r0, [r3, #1]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c290:	2301      	movs	r3, #1
 800c292:	f7ff fcc9 	bl	800bc28 <disk_write>
			fs->fsi_flag = 0;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	785b      	ldrb	r3, [r3, #1]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff fcdf 	bl	800bc68 <disk_ioctl>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d001      	beq.n	800c2b4 <sync_fs+0xcc>
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	41615252 	.word	0x41615252
 800c2c4:	61417272 	.word	0x61417272

0800c2c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	3b02      	subs	r3, #2
 800c2d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	3b02      	subs	r3, #2
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d301      	bcc.n	800c2e8 <clust2sect+0x20>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	e008      	b.n	800c2fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	895b      	ldrh	r3, [r3, #10]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	fb03 f202 	mul.w	r2, r3, r2
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f8:	4413      	add	r3, r2
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	370c      	adds	r7, #12
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b086      	sub	sp, #24
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d904      	bls.n	800c326 <get_fat+0x20>
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	699b      	ldr	r3, [r3, #24]
 800c320:	683a      	ldr	r2, [r7, #0]
 800c322:	429a      	cmp	r2, r3
 800c324:	d302      	bcc.n	800c32c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c326:	2301      	movs	r3, #1
 800c328:	617b      	str	r3, [r7, #20]
 800c32a:	e0bb      	b.n	800c4a4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c32c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c330:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	2b03      	cmp	r3, #3
 800c338:	f000 8083 	beq.w	800c442 <get_fat+0x13c>
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	f300 80a7 	bgt.w	800c490 <get_fat+0x18a>
 800c342:	2b01      	cmp	r3, #1
 800c344:	d002      	beq.n	800c34c <get_fat+0x46>
 800c346:	2b02      	cmp	r3, #2
 800c348:	d056      	beq.n	800c3f8 <get_fat+0xf2>
 800c34a:	e0a1      	b.n	800c490 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	60fb      	str	r3, [r7, #12]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	085b      	lsrs	r3, r3, #1
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	4413      	add	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	899b      	ldrh	r3, [r3, #12]
 800c362:	4619      	mov	r1, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	fbb3 f3f1 	udiv	r3, r3, r1
 800c36a:	4413      	add	r3, r2
 800c36c:	4619      	mov	r1, r3
 800c36e:	6938      	ldr	r0, [r7, #16]
 800c370:	f7ff ff0c 	bl	800c18c <move_window>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	f040 808d 	bne.w	800c496 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	60fa      	str	r2, [r7, #12]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	8992      	ldrh	r2, [r2, #12]
 800c386:	fbb3 f1f2 	udiv	r1, r3, r2
 800c38a:	fb01 f202 	mul.w	r2, r1, r2
 800c38e:	1a9b      	subs	r3, r3, r2
 800c390:	693a      	ldr	r2, [r7, #16]
 800c392:	4413      	add	r3, r2
 800c394:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c398:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	899b      	ldrh	r3, [r3, #12]
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3aa:	4413      	add	r3, r2
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6938      	ldr	r0, [r7, #16]
 800c3b0:	f7ff feec 	bl	800c18c <move_window>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d16f      	bne.n	800c49a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	899b      	ldrh	r3, [r3, #12]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3c6:	fb01 f202 	mul.w	r2, r1, r2
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	693a      	ldr	r2, [r7, #16]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3d4:	021b      	lsls	r3, r3, #8
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d002      	beq.n	800c3ee <get_fat+0xe8>
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	091b      	lsrs	r3, r3, #4
 800c3ec:	e002      	b.n	800c3f4 <get_fat+0xee>
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3f4:	617b      	str	r3, [r7, #20]
			break;
 800c3f6:	e055      	b.n	800c4a4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	899b      	ldrh	r3, [r3, #12]
 800c400:	085b      	lsrs	r3, r3, #1
 800c402:	b29b      	uxth	r3, r3
 800c404:	4619      	mov	r1, r3
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	fbb3 f3f1 	udiv	r3, r3, r1
 800c40c:	4413      	add	r3, r2
 800c40e:	4619      	mov	r1, r3
 800c410:	6938      	ldr	r0, [r7, #16]
 800c412:	f7ff febb 	bl	800c18c <move_window>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d140      	bne.n	800c49e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	693a      	ldr	r2, [r7, #16]
 800c428:	8992      	ldrh	r2, [r2, #12]
 800c42a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c42e:	fb00 f202 	mul.w	r2, r0, r2
 800c432:	1a9b      	subs	r3, r3, r2
 800c434:	440b      	add	r3, r1
 800c436:	4618      	mov	r0, r3
 800c438:	f7ff fc34 	bl	800bca4 <ld_word>
 800c43c:	4603      	mov	r3, r0
 800c43e:	617b      	str	r3, [r7, #20]
			break;
 800c440:	e030      	b.n	800c4a4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	899b      	ldrh	r3, [r3, #12]
 800c44a:	089b      	lsrs	r3, r3, #2
 800c44c:	b29b      	uxth	r3, r3
 800c44e:	4619      	mov	r1, r3
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	fbb3 f3f1 	udiv	r3, r3, r1
 800c456:	4413      	add	r3, r2
 800c458:	4619      	mov	r1, r3
 800c45a:	6938      	ldr	r0, [r7, #16]
 800c45c:	f7ff fe96 	bl	800c18c <move_window>
 800c460:	4603      	mov	r3, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d11d      	bne.n	800c4a2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	009b      	lsls	r3, r3, #2
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	8992      	ldrh	r2, [r2, #12]
 800c474:	fbb3 f0f2 	udiv	r0, r3, r2
 800c478:	fb00 f202 	mul.w	r2, r0, r2
 800c47c:	1a9b      	subs	r3, r3, r2
 800c47e:	440b      	add	r3, r1
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fc27 	bl	800bcd4 <ld_dword>
 800c486:	4603      	mov	r3, r0
 800c488:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c48c:	617b      	str	r3, [r7, #20]
			break;
 800c48e:	e009      	b.n	800c4a4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c490:	2301      	movs	r3, #1
 800c492:	617b      	str	r3, [r7, #20]
 800c494:	e006      	b.n	800c4a4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c496:	bf00      	nop
 800c498:	e004      	b.n	800c4a4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c49a:	bf00      	nop
 800c49c:	e002      	b.n	800c4a4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c49e:	bf00      	nop
 800c4a0:	e000      	b.n	800c4a4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c4a2:	bf00      	nop
		}
	}

	return val;
 800c4a4:	697b      	ldr	r3, [r7, #20]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c4ae:	b590      	push	{r4, r7, lr}
 800c4b0:	b089      	sub	sp, #36	; 0x24
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	60f8      	str	r0, [r7, #12]
 800c4b6:	60b9      	str	r1, [r7, #8]
 800c4b8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c4ba:	2302      	movs	r3, #2
 800c4bc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	f240 8102 	bls.w	800c6ca <put_fat+0x21c>
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	f080 80fc 	bcs.w	800c6ca <put_fat+0x21c>
		switch (fs->fs_type) {
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	f000 80b6 	beq.w	800c648 <put_fat+0x19a>
 800c4dc:	2b03      	cmp	r3, #3
 800c4de:	f300 80fd 	bgt.w	800c6dc <put_fat+0x22e>
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	d003      	beq.n	800c4ee <put_fat+0x40>
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	f000 8083 	beq.w	800c5f2 <put_fat+0x144>
 800c4ec:	e0f6      	b.n	800c6dc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	61bb      	str	r3, [r7, #24]
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	085b      	lsrs	r3, r3, #1
 800c4f6:	69ba      	ldr	r2, [r7, #24]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	899b      	ldrh	r3, [r3, #12]
 800c504:	4619      	mov	r1, r3
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	fbb3 f3f1 	udiv	r3, r3, r1
 800c50c:	4413      	add	r3, r2
 800c50e:	4619      	mov	r1, r3
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f7ff fe3b 	bl	800c18c <move_window>
 800c516:	4603      	mov	r3, r0
 800c518:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c51a:	7ffb      	ldrb	r3, [r7, #31]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f040 80d6 	bne.w	800c6ce <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	61ba      	str	r2, [r7, #24]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	8992      	ldrh	r2, [r2, #12]
 800c532:	fbb3 f0f2 	udiv	r0, r3, r2
 800c536:	fb00 f202 	mul.w	r2, r0, r2
 800c53a:	1a9b      	subs	r3, r3, r2
 800c53c:	440b      	add	r3, r1
 800c53e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00d      	beq.n	800c566 <put_fat+0xb8>
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	b25b      	sxtb	r3, r3
 800c550:	f003 030f 	and.w	r3, r3, #15
 800c554:	b25a      	sxtb	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	011b      	lsls	r3, r3, #4
 800c55c:	b25b      	sxtb	r3, r3
 800c55e:	4313      	orrs	r3, r2
 800c560:	b25b      	sxtb	r3, r3
 800c562:	b2db      	uxtb	r3, r3
 800c564:	e001      	b.n	800c56a <put_fat+0xbc>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2201      	movs	r2, #1
 800c572:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	899b      	ldrh	r3, [r3, #12]
 800c57c:	4619      	mov	r1, r3
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	fbb3 f3f1 	udiv	r3, r3, r1
 800c584:	4413      	add	r3, r2
 800c586:	4619      	mov	r1, r3
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7ff fdff 	bl	800c18c <move_window>
 800c58e:	4603      	mov	r3, r0
 800c590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c592:	7ffb      	ldrb	r3, [r7, #31]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f040 809c 	bne.w	800c6d2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	899b      	ldrh	r3, [r3, #12]
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5ac:	fb00 f202 	mul.w	r2, r0, r2
 800c5b0:	1a9b      	subs	r3, r3, r2
 800c5b2:	440b      	add	r3, r1
 800c5b4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d003      	beq.n	800c5c8 <put_fat+0x11a>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	091b      	lsrs	r3, r3, #4
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	e00e      	b.n	800c5e6 <put_fat+0x138>
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	b25b      	sxtb	r3, r3
 800c5ce:	f023 030f 	bic.w	r3, r3, #15
 800c5d2:	b25a      	sxtb	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	0a1b      	lsrs	r3, r3, #8
 800c5d8:	b25b      	sxtb	r3, r3
 800c5da:	f003 030f 	and.w	r3, r3, #15
 800c5de:	b25b      	sxtb	r3, r3
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	b25b      	sxtb	r3, r3
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	697a      	ldr	r2, [r7, #20]
 800c5e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2201      	movs	r2, #1
 800c5ee:	70da      	strb	r2, [r3, #3]
			break;
 800c5f0:	e074      	b.n	800c6dc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	899b      	ldrh	r3, [r3, #12]
 800c5fa:	085b      	lsrs	r3, r3, #1
 800c5fc:	b29b      	uxth	r3, r3
 800c5fe:	4619      	mov	r1, r3
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	fbb3 f3f1 	udiv	r3, r3, r1
 800c606:	4413      	add	r3, r2
 800c608:	4619      	mov	r1, r3
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7ff fdbe 	bl	800c18c <move_window>
 800c610:	4603      	mov	r3, r0
 800c612:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c614:	7ffb      	ldrb	r3, [r7, #31]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d15d      	bne.n	800c6d6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	005b      	lsls	r3, r3, #1
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	8992      	ldrh	r2, [r2, #12]
 800c628:	fbb3 f0f2 	udiv	r0, r3, r2
 800c62c:	fb00 f202 	mul.w	r2, r0, r2
 800c630:	1a9b      	subs	r3, r3, r2
 800c632:	440b      	add	r3, r1
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	b292      	uxth	r2, r2
 800c638:	4611      	mov	r1, r2
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7ff fb6d 	bl	800bd1a <st_word>
			fs->wflag = 1;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2201      	movs	r2, #1
 800c644:	70da      	strb	r2, [r3, #3]
			break;
 800c646:	e049      	b.n	800c6dc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	899b      	ldrh	r3, [r3, #12]
 800c650:	089b      	lsrs	r3, r3, #2
 800c652:	b29b      	uxth	r3, r3
 800c654:	4619      	mov	r1, r3
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	fbb3 f3f1 	udiv	r3, r3, r1
 800c65c:	4413      	add	r3, r2
 800c65e:	4619      	mov	r1, r3
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7ff fd93 	bl	800c18c <move_window>
 800c666:	4603      	mov	r3, r0
 800c668:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c66a:	7ffb      	ldrb	r3, [r7, #31]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d134      	bne.n	800c6da <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	8992      	ldrh	r2, [r2, #12]
 800c684:	fbb3 f0f2 	udiv	r0, r3, r2
 800c688:	fb00 f202 	mul.w	r2, r0, r2
 800c68c:	1a9b      	subs	r3, r3, r2
 800c68e:	440b      	add	r3, r1
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff fb1f 	bl	800bcd4 <ld_dword>
 800c696:	4603      	mov	r3, r0
 800c698:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c69c:	4323      	orrs	r3, r4
 800c69e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	8992      	ldrh	r2, [r2, #12]
 800c6ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6b2:	fb00 f202 	mul.w	r2, r0, r2
 800c6b6:	1a9b      	subs	r3, r3, r2
 800c6b8:	440b      	add	r3, r1
 800c6ba:	6879      	ldr	r1, [r7, #4]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff fb47 	bl	800bd50 <st_dword>
			fs->wflag = 1;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	70da      	strb	r2, [r3, #3]
			break;
 800c6c8:	e008      	b.n	800c6dc <put_fat+0x22e>
		}
	}
 800c6ca:	bf00      	nop
 800c6cc:	e006      	b.n	800c6dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6ce:	bf00      	nop
 800c6d0:	e004      	b.n	800c6dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6d2:	bf00      	nop
 800c6d4:	e002      	b.n	800c6dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6d6:	bf00      	nop
 800c6d8:	e000      	b.n	800c6dc <put_fat+0x22e>
			if (res != FR_OK) break;
 800c6da:	bf00      	nop
	return res;
 800c6dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3724      	adds	r7, #36	; 0x24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd90      	pop	{r4, r7, pc}

0800c6e6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b088      	sub	sp, #32
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d904      	bls.n	800c70c <remove_chain+0x26>
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	699b      	ldr	r3, [r3, #24]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d301      	bcc.n	800c710 <remove_chain+0x2a>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e04b      	b.n	800c7a8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00c      	beq.n	800c730 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c71a:	6879      	ldr	r1, [r7, #4]
 800c71c:	69b8      	ldr	r0, [r7, #24]
 800c71e:	f7ff fec6 	bl	800c4ae <put_fat>
 800c722:	4603      	mov	r3, r0
 800c724:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c726:	7ffb      	ldrb	r3, [r7, #31]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <remove_chain+0x4a>
 800c72c:	7ffb      	ldrb	r3, [r7, #31]
 800c72e:	e03b      	b.n	800c7a8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7ff fde7 	bl	800c306 <get_fat>
 800c738:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d031      	beq.n	800c7a4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <remove_chain+0x64>
 800c746:	2302      	movs	r3, #2
 800c748:	e02e      	b.n	800c7a8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c750:	d101      	bne.n	800c756 <remove_chain+0x70>
 800c752:	2301      	movs	r3, #1
 800c754:	e028      	b.n	800c7a8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c756:	2200      	movs	r2, #0
 800c758:	68b9      	ldr	r1, [r7, #8]
 800c75a:	69b8      	ldr	r0, [r7, #24]
 800c75c:	f7ff fea7 	bl	800c4ae <put_fat>
 800c760:	4603      	mov	r3, r0
 800c762:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c764:	7ffb      	ldrb	r3, [r7, #31]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d001      	beq.n	800c76e <remove_chain+0x88>
 800c76a:	7ffb      	ldrb	r3, [r7, #31]
 800c76c:	e01c      	b.n	800c7a8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	695a      	ldr	r2, [r3, #20]
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	699b      	ldr	r3, [r3, #24]
 800c776:	3b02      	subs	r3, #2
 800c778:	429a      	cmp	r2, r3
 800c77a:	d20b      	bcs.n	800c794 <remove_chain+0xae>
			fs->free_clst++;
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	1c5a      	adds	r2, r3, #1
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	791b      	ldrb	r3, [r3, #4]
 800c78a:	f043 0301 	orr.w	r3, r3, #1
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d3c6      	bcc.n	800c730 <remove_chain+0x4a>
 800c7a2:	e000      	b.n	800c7a6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c7a4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3720      	adds	r7, #32
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10d      	bne.n	800c7e2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	691b      	ldr	r3, [r3, #16]
 800c7ca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d004      	beq.n	800c7dc <create_chain+0x2c>
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	69ba      	ldr	r2, [r7, #24]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d31b      	bcc.n	800c814 <create_chain+0x64>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	61bb      	str	r3, [r7, #24]
 800c7e0:	e018      	b.n	800c814 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7ff fd8e 	bl	800c306 <get_fat>
 800c7ea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d801      	bhi.n	800c7f6 <create_chain+0x46>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e070      	b.n	800c8d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7fc:	d101      	bne.n	800c802 <create_chain+0x52>
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	e06a      	b.n	800c8d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d201      	bcs.n	800c810 <create_chain+0x60>
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	e063      	b.n	800c8d8 <create_chain+0x128>
		scl = clst;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	3301      	adds	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	699b      	ldr	r3, [r3, #24]
 800c822:	69fa      	ldr	r2, [r7, #28]
 800c824:	429a      	cmp	r2, r3
 800c826:	d307      	bcc.n	800c838 <create_chain+0x88>
				ncl = 2;
 800c828:	2302      	movs	r3, #2
 800c82a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c82c:	69fa      	ldr	r2, [r7, #28]
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	429a      	cmp	r2, r3
 800c832:	d901      	bls.n	800c838 <create_chain+0x88>
 800c834:	2300      	movs	r3, #0
 800c836:	e04f      	b.n	800c8d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c838:	69f9      	ldr	r1, [r7, #28]
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f7ff fd63 	bl	800c306 <get_fat>
 800c840:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00e      	beq.n	800c866 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d003      	beq.n	800c856 <create_chain+0xa6>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c854:	d101      	bne.n	800c85a <create_chain+0xaa>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	e03e      	b.n	800c8d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c85a:	69fa      	ldr	r2, [r7, #28]
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d1da      	bne.n	800c818 <create_chain+0x68>
 800c862:	2300      	movs	r3, #0
 800c864:	e038      	b.n	800c8d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c866:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c86c:	69f9      	ldr	r1, [r7, #28]
 800c86e:	6938      	ldr	r0, [r7, #16]
 800c870:	f7ff fe1d 	bl	800c4ae <put_fat>
 800c874:	4603      	mov	r3, r0
 800c876:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d109      	bne.n	800c892 <create_chain+0xe2>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d006      	beq.n	800c892 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c884:	69fa      	ldr	r2, [r7, #28]
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6938      	ldr	r0, [r7, #16]
 800c88a:	f7ff fe10 	bl	800c4ae <put_fat>
 800c88e:	4603      	mov	r3, r0
 800c890:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c892:	7dfb      	ldrb	r3, [r7, #23]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d116      	bne.n	800c8c6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	69fa      	ldr	r2, [r7, #28]
 800c89c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	695a      	ldr	r2, [r3, #20]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	699b      	ldr	r3, [r3, #24]
 800c8a6:	3b02      	subs	r3, #2
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d804      	bhi.n	800c8b6 <create_chain+0x106>
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	695b      	ldr	r3, [r3, #20]
 800c8b0:	1e5a      	subs	r2, r3, #1
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	791b      	ldrb	r3, [r3, #4]
 800c8ba:	f043 0301 	orr.w	r3, r3, #1
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	711a      	strb	r2, [r3, #4]
 800c8c4:	e007      	b.n	800c8d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d102      	bne.n	800c8d2 <create_chain+0x122>
 800c8cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8d0:	e000      	b.n	800c8d4 <create_chain+0x124>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c8d6:	69fb      	ldr	r3, [r7, #28]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3720      	adds	r7, #32
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}

0800c8e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	899b      	ldrh	r3, [r3, #12]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	fbb3 f3f2 	udiv	r3, r3, r2
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	8952      	ldrh	r2, [r2, #10]
 800c908:	fbb3 f3f2 	udiv	r3, r3, r2
 800c90c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	1d1a      	adds	r2, r3, #4
 800c912:	613a      	str	r2, [r7, #16]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <clmt_clust+0x42>
 800c91e:	2300      	movs	r3, #0
 800c920:	e010      	b.n	800c944 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	429a      	cmp	r2, r3
 800c928:	d307      	bcc.n	800c93a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c92a:	697a      	ldr	r2, [r7, #20]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	617b      	str	r3, [r7, #20]
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	3304      	adds	r3, #4
 800c936:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c938:	e7e9      	b.n	800c90e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c93a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	4413      	add	r3, r2
}
 800c944:	4618      	mov	r0, r3
 800c946:	371c      	adds	r7, #28
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c966:	d204      	bcs.n	800c972 <dir_sdi+0x22>
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	f003 031f 	and.w	r3, r3, #31
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c972:	2302      	movs	r3, #2
 800c974:	e071      	b.n	800ca5a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d106      	bne.n	800c996 <dir_sdi+0x46>
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b02      	cmp	r3, #2
 800c98e:	d902      	bls.n	800c996 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c994:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d10c      	bne.n	800c9b6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	095b      	lsrs	r3, r3, #5
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	8912      	ldrh	r2, [r2, #8]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d301      	bcc.n	800c9ac <dir_sdi+0x5c>
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	e056      	b.n	800ca5a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	61da      	str	r2, [r3, #28]
 800c9b4:	e02d      	b.n	800ca12 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	895b      	ldrh	r3, [r3, #10]
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	899b      	ldrh	r3, [r3, #12]
 800c9c0:	fb02 f303 	mul.w	r3, r2, r3
 800c9c4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9c6:	e019      	b.n	800c9fc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6979      	ldr	r1, [r7, #20]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7ff fc9a 	bl	800c306 <get_fat>
 800c9d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9da:	d101      	bne.n	800c9e0 <dir_sdi+0x90>
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e03c      	b.n	800ca5a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d904      	bls.n	800c9f0 <dir_sdi+0xa0>
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d301      	bcc.n	800c9f4 <dir_sdi+0xa4>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e032      	b.n	800ca5a <dir_sdi+0x10a>
			ofs -= csz;
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d2e1      	bcs.n	800c9c8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ca04:	6979      	ldr	r1, [r7, #20]
 800ca06:	6938      	ldr	r0, [r7, #16]
 800ca08:	f7ff fc5e 	bl	800c2c8 <clust2sect>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	697a      	ldr	r2, [r7, #20]
 800ca16:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d101      	bne.n	800ca24 <dir_sdi+0xd4>
 800ca20:	2302      	movs	r3, #2
 800ca22:	e01a      	b.n	800ca5a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	69da      	ldr	r2, [r3, #28]
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	899b      	ldrh	r3, [r3, #12]
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca34:	441a      	add	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	899b      	ldrh	r3, [r3, #12]
 800ca44:	461a      	mov	r2, r3
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca4c:	fb00 f202 	mul.w	r2, r0, r2
 800ca50:	1a9b      	subs	r3, r3, r2
 800ca52:	18ca      	adds	r2, r1, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca58:	2300      	movs	r3, #0
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b086      	sub	sp, #24
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	695b      	ldr	r3, [r3, #20]
 800ca76:	3320      	adds	r3, #32
 800ca78:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <dir_next+0x28>
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca88:	d301      	bcc.n	800ca8e <dir_next+0x2c>
 800ca8a:	2304      	movs	r3, #4
 800ca8c:	e0bb      	b.n	800cc06 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	899b      	ldrh	r3, [r3, #12]
 800ca92:	461a      	mov	r2, r3
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca9a:	fb01 f202 	mul.w	r2, r1, r2
 800ca9e:	1a9b      	subs	r3, r3, r2
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	f040 809d 	bne.w	800cbe0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	699b      	ldr	r3, [r3, #24]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d10b      	bne.n	800cad0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	095b      	lsrs	r3, r3, #5
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	8912      	ldrh	r2, [r2, #8]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	f0c0 808d 	bcc.w	800cbe0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	61da      	str	r2, [r3, #28]
 800cacc:	2304      	movs	r3, #4
 800cace:	e09a      	b.n	800cc06 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	899b      	ldrh	r3, [r3, #12]
 800cad4:	461a      	mov	r2, r3
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	fbb3 f3f2 	udiv	r3, r3, r2
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	8952      	ldrh	r2, [r2, #10]
 800cae0:	3a01      	subs	r2, #1
 800cae2:	4013      	ands	r3, r2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d17b      	bne.n	800cbe0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	4619      	mov	r1, r3
 800caf0:	4610      	mov	r0, r2
 800caf2:	f7ff fc08 	bl	800c306 <get_fat>
 800caf6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d801      	bhi.n	800cb02 <dir_next+0xa0>
 800cafe:	2302      	movs	r3, #2
 800cb00:	e081      	b.n	800cc06 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb08:	d101      	bne.n	800cb0e <dir_next+0xac>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e07b      	b.n	800cc06 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d359      	bcc.n	800cbcc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d104      	bne.n	800cb28 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	61da      	str	r2, [r3, #28]
 800cb24:	2304      	movs	r3, #4
 800cb26:	e06e      	b.n	800cc06 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4610      	mov	r0, r2
 800cb32:	f7ff fe3d 	bl	800c7b0 <create_chain>
 800cb36:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d101      	bne.n	800cb42 <dir_next+0xe0>
 800cb3e:	2307      	movs	r3, #7
 800cb40:	e061      	b.n	800cc06 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d101      	bne.n	800cb4c <dir_next+0xea>
 800cb48:	2302      	movs	r3, #2
 800cb4a:	e05c      	b.n	800cc06 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb52:	d101      	bne.n	800cb58 <dir_next+0xf6>
 800cb54:	2301      	movs	r3, #1
 800cb56:	e056      	b.n	800cc06 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f7ff fad3 	bl	800c104 <sync_window>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d001      	beq.n	800cb68 <dir_next+0x106>
 800cb64:	2301      	movs	r3, #1
 800cb66:	e04e      	b.n	800cc06 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	899b      	ldrh	r3, [r3, #12]
 800cb72:	461a      	mov	r2, r3
 800cb74:	2100      	movs	r1, #0
 800cb76:	f7ff f938 	bl	800bdea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	613b      	str	r3, [r7, #16]
 800cb7e:	6979      	ldr	r1, [r7, #20]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f7ff fba1 	bl	800c2c8 <clust2sect>
 800cb86:	4602      	mov	r2, r0
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	631a      	str	r2, [r3, #48]	; 0x30
 800cb8c:	e012      	b.n	800cbb4 <dir_next+0x152>
						fs->wflag = 1;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2201      	movs	r2, #1
 800cb92:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f7ff fab5 	bl	800c104 <sync_window>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <dir_next+0x142>
 800cba0:	2301      	movs	r3, #1
 800cba2:	e030      	b.n	800cc06 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	3301      	adds	r3, #1
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbae:	1c5a      	adds	r2, r3, #1
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	631a      	str	r2, [r3, #48]	; 0x30
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	895b      	ldrh	r3, [r3, #10]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d3e6      	bcc.n	800cb8e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cbc4:	693b      	ldr	r3, [r7, #16]
 800cbc6:	1ad2      	subs	r2, r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cbd2:	6979      	ldr	r1, [r7, #20]
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f7ff fb77 	bl	800c2c8 <clust2sect>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	899b      	ldrh	r3, [r3, #12]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbf8:	fb00 f202 	mul.w	r2, r0, r2
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	18ca      	adds	r2, r1, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3718      	adds	r7, #24
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b086      	sub	sp, #24
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cc1e:	2100      	movs	r1, #0
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7ff fe95 	bl	800c950 <dir_sdi>
 800cc26:	4603      	mov	r3, r0
 800cc28:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc2a:	7dfb      	ldrb	r3, [r7, #23]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d12b      	bne.n	800cc88 <dir_alloc+0x7a>
		n = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	4619      	mov	r1, r3
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f7ff faa6 	bl	800c18c <move_window>
 800cc40:	4603      	mov	r3, r0
 800cc42:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc44:	7dfb      	ldrb	r3, [r7, #23]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d11d      	bne.n	800cc86 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2be5      	cmp	r3, #229	; 0xe5
 800cc52:	d004      	beq.n	800cc5e <dir_alloc+0x50>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d107      	bne.n	800cc6e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	3301      	adds	r3, #1
 800cc62:	613b      	str	r3, [r7, #16]
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d102      	bne.n	800cc72 <dir_alloc+0x64>
 800cc6c:	e00c      	b.n	800cc88 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cc6e:	2300      	movs	r3, #0
 800cc70:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cc72:	2101      	movs	r1, #1
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff fef4 	bl	800ca62 <dir_next>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d0d7      	beq.n	800cc34 <dir_alloc+0x26>
 800cc84:	e000      	b.n	800cc88 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cc86:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	2b04      	cmp	r3, #4
 800cc8c:	d101      	bne.n	800cc92 <dir_alloc+0x84>
 800cc8e:	2307      	movs	r3, #7
 800cc90:	75fb      	strb	r3, [r7, #23]
	return res;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	331a      	adds	r3, #26
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f7fe fffa 	bl	800bca4 <ld_word>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d109      	bne.n	800ccd0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	3314      	adds	r3, #20
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fe ffef 	bl	800bca4 <ld_word>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	041b      	lsls	r3, r3, #16
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	60f8      	str	r0, [r7, #12]
 800cce2:	60b9      	str	r1, [r7, #8]
 800cce4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	331a      	adds	r3, #26
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	b292      	uxth	r2, r2
 800ccee:	4611      	mov	r1, r2
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7ff f812 	bl	800bd1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d109      	bne.n	800cd12 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	f103 0214 	add.w	r2, r3, #20
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	0c1b      	lsrs	r3, r3, #16
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7ff f804 	bl	800bd1a <st_word>
	}
}
 800cd12:	bf00      	nop
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b086      	sub	sp, #24
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cd28:	2100      	movs	r1, #0
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff fe10 	bl	800c950 <dir_sdi>
 800cd30:	4603      	mov	r3, r0
 800cd32:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <dir_find+0x24>
 800cd3a:	7dfb      	ldrb	r3, [r7, #23]
 800cd3c:	e03e      	b.n	800cdbc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	69db      	ldr	r3, [r3, #28]
 800cd42:	4619      	mov	r1, r3
 800cd44:	6938      	ldr	r0, [r7, #16]
 800cd46:	f7ff fa21 	bl	800c18c <move_window>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd4e:	7dfb      	ldrb	r3, [r7, #23]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d12f      	bne.n	800cdb4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a1b      	ldr	r3, [r3, #32]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cd5c:	7bfb      	ldrb	r3, [r7, #15]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d102      	bne.n	800cd68 <dir_find+0x4e>
 800cd62:	2304      	movs	r3, #4
 800cd64:	75fb      	strb	r3, [r7, #23]
 800cd66:	e028      	b.n	800cdba <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6a1b      	ldr	r3, [r3, #32]
 800cd6c:	330b      	adds	r3, #11
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a1b      	ldr	r3, [r3, #32]
 800cd7e:	330b      	adds	r3, #11
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	f003 0308 	and.w	r3, r3, #8
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <dir_find+0x86>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a18      	ldr	r0, [r3, #32]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3324      	adds	r3, #36	; 0x24
 800cd92:	220b      	movs	r2, #11
 800cd94:	4619      	mov	r1, r3
 800cd96:	f7ff f843 	bl	800be20 <mem_cmp>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00b      	beq.n	800cdb8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cda0:	2100      	movs	r1, #0
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f7ff fe5d 	bl	800ca62 <dir_next>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cdac:	7dfb      	ldrb	r3, [r7, #23]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d0c5      	beq.n	800cd3e <dir_find+0x24>
 800cdb2:	e002      	b.n	800cdba <dir_find+0xa0>
		if (res != FR_OK) break;
 800cdb4:	bf00      	nop
 800cdb6:	e000      	b.n	800cdba <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cdb8:	bf00      	nop

	return res;
 800cdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3718      	adds	r7, #24
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f7ff ff1a 	bl	800cc0e <dir_alloc>
 800cdda:	4603      	mov	r3, r0
 800cddc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cdde:	7bfb      	ldrb	r3, [r7, #15]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d11c      	bne.n	800ce1e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	69db      	ldr	r3, [r3, #28]
 800cde8:	4619      	mov	r1, r3
 800cdea:	68b8      	ldr	r0, [r7, #8]
 800cdec:	f7ff f9ce 	bl	800c18c <move_window>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d111      	bne.n	800ce1e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	2100      	movs	r1, #0
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fff1 	bl	800bdea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a18      	ldr	r0, [r3, #32]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	3324      	adds	r3, #36	; 0x24
 800ce10:	220b      	movs	r2, #11
 800ce12:	4619      	mov	r1, r3
 800ce14:	f7fe ffc8 	bl	800bda8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}

0800ce28 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b088      	sub	sp, #32
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	3324      	adds	r3, #36	; 0x24
 800ce3c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ce3e:	220b      	movs	r2, #11
 800ce40:	2120      	movs	r1, #32
 800ce42:	68b8      	ldr	r0, [r7, #8]
 800ce44:	f7fe ffd1 	bl	800bdea <mem_set>
	si = i = 0; ni = 8;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	613b      	str	r3, [r7, #16]
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	61fb      	str	r3, [r7, #28]
 800ce50:	2308      	movs	r3, #8
 800ce52:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	1c5a      	adds	r2, r3, #1
 800ce58:	61fa      	str	r2, [r7, #28]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ce62:	7efb      	ldrb	r3, [r7, #27]
 800ce64:	2b20      	cmp	r3, #32
 800ce66:	d94e      	bls.n	800cf06 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ce68:	7efb      	ldrb	r3, [r7, #27]
 800ce6a:	2b2f      	cmp	r3, #47	; 0x2f
 800ce6c:	d006      	beq.n	800ce7c <create_name+0x54>
 800ce6e:	7efb      	ldrb	r3, [r7, #27]
 800ce70:	2b5c      	cmp	r3, #92	; 0x5c
 800ce72:	d110      	bne.n	800ce96 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce74:	e002      	b.n	800ce7c <create_name+0x54>
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	61fb      	str	r3, [r7, #28]
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	4413      	add	r3, r2
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	2b2f      	cmp	r3, #47	; 0x2f
 800ce86:	d0f6      	beq.n	800ce76 <create_name+0x4e>
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	4413      	add	r3, r2
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	2b5c      	cmp	r3, #92	; 0x5c
 800ce92:	d0f0      	beq.n	800ce76 <create_name+0x4e>
			break;
 800ce94:	e038      	b.n	800cf08 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ce96:	7efb      	ldrb	r3, [r7, #27]
 800ce98:	2b2e      	cmp	r3, #46	; 0x2e
 800ce9a:	d003      	beq.n	800cea4 <create_name+0x7c>
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d30c      	bcc.n	800cebe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	2b0b      	cmp	r3, #11
 800cea8:	d002      	beq.n	800ceb0 <create_name+0x88>
 800ceaa:	7efb      	ldrb	r3, [r7, #27]
 800ceac:	2b2e      	cmp	r3, #46	; 0x2e
 800ceae:	d001      	beq.n	800ceb4 <create_name+0x8c>
 800ceb0:	2306      	movs	r3, #6
 800ceb2:	e044      	b.n	800cf3e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ceb4:	2308      	movs	r3, #8
 800ceb6:	613b      	str	r3, [r7, #16]
 800ceb8:	230b      	movs	r3, #11
 800ceba:	617b      	str	r3, [r7, #20]
			continue;
 800cebc:	e022      	b.n	800cf04 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cebe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	da04      	bge.n	800ced0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cec6:	7efb      	ldrb	r3, [r7, #27]
 800cec8:	3b80      	subs	r3, #128	; 0x80
 800ceca:	4a1f      	ldr	r2, [pc, #124]	; (800cf48 <create_name+0x120>)
 800cecc:	5cd3      	ldrb	r3, [r2, r3]
 800cece:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ced0:	7efb      	ldrb	r3, [r7, #27]
 800ced2:	4619      	mov	r1, r3
 800ced4:	481d      	ldr	r0, [pc, #116]	; (800cf4c <create_name+0x124>)
 800ced6:	f7fe ffca 	bl	800be6e <chk_chr>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <create_name+0xbc>
 800cee0:	2306      	movs	r3, #6
 800cee2:	e02c      	b.n	800cf3e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cee4:	7efb      	ldrb	r3, [r7, #27]
 800cee6:	2b60      	cmp	r3, #96	; 0x60
 800cee8:	d905      	bls.n	800cef6 <create_name+0xce>
 800ceea:	7efb      	ldrb	r3, [r7, #27]
 800ceec:	2b7a      	cmp	r3, #122	; 0x7a
 800ceee:	d802      	bhi.n	800cef6 <create_name+0xce>
 800cef0:	7efb      	ldrb	r3, [r7, #27]
 800cef2:	3b20      	subs	r3, #32
 800cef4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	613a      	str	r2, [r7, #16]
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	4413      	add	r3, r2
 800cf00:	7efa      	ldrb	r2, [r7, #27]
 800cf02:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cf04:	e7a6      	b.n	800ce54 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cf06:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	441a      	add	r2, r3
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d101      	bne.n	800cf1c <create_name+0xf4>
 800cf18:	2306      	movs	r3, #6
 800cf1a:	e010      	b.n	800cf3e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	2be5      	cmp	r3, #229	; 0xe5
 800cf22:	d102      	bne.n	800cf2a <create_name+0x102>
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	2205      	movs	r2, #5
 800cf28:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cf2a:	7efb      	ldrb	r3, [r7, #27]
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d801      	bhi.n	800cf34 <create_name+0x10c>
 800cf30:	2204      	movs	r2, #4
 800cf32:	e000      	b.n	800cf36 <create_name+0x10e>
 800cf34:	2200      	movs	r2, #0
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	330b      	adds	r3, #11
 800cf3a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cf3c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	08011eac 	.word	0x08011eac
 800cf4c:	08011e3c 	.word	0x08011e3c

0800cf50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cf64:	e002      	b.n	800cf6c <follow_path+0x1c>
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	3301      	adds	r3, #1
 800cf6a:	603b      	str	r3, [r7, #0]
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b2f      	cmp	r3, #47	; 0x2f
 800cf72:	d0f8      	beq.n	800cf66 <follow_path+0x16>
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	2b5c      	cmp	r3, #92	; 0x5c
 800cf7a:	d0f4      	beq.n	800cf66 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b1f      	cmp	r3, #31
 800cf88:	d80a      	bhi.n	800cfa0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2280      	movs	r2, #128	; 0x80
 800cf8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cf92:	2100      	movs	r1, #0
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff fcdb 	bl	800c950 <dir_sdi>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	75fb      	strb	r3, [r7, #23]
 800cf9e:	e048      	b.n	800d032 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cfa0:	463b      	mov	r3, r7
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff ff3f 	bl	800ce28 <create_name>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d139      	bne.n	800d028 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff feb0 	bl	800cd1a <dir_find>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfc4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d00a      	beq.n	800cfe2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cfcc:	7dfb      	ldrb	r3, [r7, #23]
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d12c      	bne.n	800d02c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cfd2:	7afb      	ldrb	r3, [r7, #11]
 800cfd4:	f003 0304 	and.w	r3, r3, #4
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d127      	bne.n	800d02c <follow_path+0xdc>
 800cfdc:	2305      	movs	r3, #5
 800cfde:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cfe0:	e024      	b.n	800d02c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfe2:	7afb      	ldrb	r3, [r7, #11]
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d121      	bne.n	800d030 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	799b      	ldrb	r3, [r3, #6]
 800cff0:	f003 0310 	and.w	r3, r3, #16
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d102      	bne.n	800cffe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cff8:	2305      	movs	r3, #5
 800cffa:	75fb      	strb	r3, [r7, #23]
 800cffc:	e019      	b.n	800d032 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	695b      	ldr	r3, [r3, #20]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	8992      	ldrh	r2, [r2, #12]
 800d00c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d010:	fb00 f202 	mul.w	r2, r0, r2
 800d014:	1a9b      	subs	r3, r3, r2
 800d016:	440b      	add	r3, r1
 800d018:	4619      	mov	r1, r3
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	f7ff fe3e 	bl	800cc9c <ld_clust>
 800d020:	4602      	mov	r2, r0
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d026:	e7bb      	b.n	800cfa0 <follow_path+0x50>
			if (res != FR_OK) break;
 800d028:	bf00      	nop
 800d02a:	e002      	b.n	800d032 <follow_path+0xe2>
				break;
 800d02c:	bf00      	nop
 800d02e:	e000      	b.n	800d032 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d030:	bf00      	nop
			}
		}
	}

	return res;
 800d032:	7dfb      	ldrb	r3, [r7, #23]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b087      	sub	sp, #28
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d048:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d031      	beq.n	800d0b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	617b      	str	r3, [r7, #20]
 800d058:	e002      	b.n	800d060 <get_ldnumber+0x24>
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	3301      	adds	r3, #1
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	2b20      	cmp	r3, #32
 800d066:	d903      	bls.n	800d070 <get_ldnumber+0x34>
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b3a      	cmp	r3, #58	; 0x3a
 800d06e:	d1f4      	bne.n	800d05a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	2b3a      	cmp	r3, #58	; 0x3a
 800d076:	d11c      	bne.n	800d0b2 <get_ldnumber+0x76>
			tp = *path;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	60fa      	str	r2, [r7, #12]
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	3b30      	subs	r3, #48	; 0x30
 800d088:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	2b09      	cmp	r3, #9
 800d08e:	d80e      	bhi.n	800d0ae <get_ldnumber+0x72>
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	429a      	cmp	r2, r3
 800d096:	d10a      	bne.n	800d0ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d107      	bne.n	800d0ae <get_ldnumber+0x72>
					vol = (int)i;
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	697a      	ldr	r2, [r7, #20]
 800d0ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	e002      	b.n	800d0b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d0b6:	693b      	ldr	r3, [r7, #16]
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	371c      	adds	r7, #28
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	70da      	strb	r2, [r3, #3]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0da:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d0dc:	6839      	ldr	r1, [r7, #0]
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7ff f854 	bl	800c18c <move_window>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d001      	beq.n	800d0ee <check_fs+0x2a>
 800d0ea:	2304      	movs	r3, #4
 800d0ec:	e038      	b.n	800d160 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	3334      	adds	r3, #52	; 0x34
 800d0f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fdd4 	bl	800bca4 <ld_word>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d104:	429a      	cmp	r2, r3
 800d106:	d001      	beq.n	800d10c <check_fs+0x48>
 800d108:	2303      	movs	r3, #3
 800d10a:	e029      	b.n	800d160 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d112:	2be9      	cmp	r3, #233	; 0xe9
 800d114:	d009      	beq.n	800d12a <check_fs+0x66>
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d11c:	2beb      	cmp	r3, #235	; 0xeb
 800d11e:	d11e      	bne.n	800d15e <check_fs+0x9a>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d126:	2b90      	cmp	r3, #144	; 0x90
 800d128:	d119      	bne.n	800d15e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	3334      	adds	r3, #52	; 0x34
 800d12e:	3336      	adds	r3, #54	; 0x36
 800d130:	4618      	mov	r0, r3
 800d132:	f7fe fdcf 	bl	800bcd4 <ld_dword>
 800d136:	4603      	mov	r3, r0
 800d138:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d13c:	4a0a      	ldr	r2, [pc, #40]	; (800d168 <check_fs+0xa4>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d101      	bne.n	800d146 <check_fs+0x82>
 800d142:	2300      	movs	r3, #0
 800d144:	e00c      	b.n	800d160 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3334      	adds	r3, #52	; 0x34
 800d14a:	3352      	adds	r3, #82	; 0x52
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe fdc1 	bl	800bcd4 <ld_dword>
 800d152:	4603      	mov	r3, r0
 800d154:	4a05      	ldr	r2, [pc, #20]	; (800d16c <check_fs+0xa8>)
 800d156:	4293      	cmp	r3, r2
 800d158:	d101      	bne.n	800d15e <check_fs+0x9a>
 800d15a:	2300      	movs	r3, #0
 800d15c:	e000      	b.n	800d160 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d15e:	2302      	movs	r3, #2
}
 800d160:	4618      	mov	r0, r3
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	00544146 	.word	0x00544146
 800d16c:	33544146 	.word	0x33544146

0800d170 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b096      	sub	sp, #88	; 0x58
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	4613      	mov	r3, r2
 800d17c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7ff ff59 	bl	800d03c <get_ldnumber>
 800d18a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d18c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d18e:	2b00      	cmp	r3, #0
 800d190:	da01      	bge.n	800d196 <find_volume+0x26>
 800d192:	230b      	movs	r3, #11
 800d194:	e262      	b.n	800d65c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d196:	4a9f      	ldr	r2, [pc, #636]	; (800d414 <find_volume+0x2a4>)
 800d198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d19e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <find_volume+0x3a>
 800d1a6:	230c      	movs	r3, #12
 800d1a8:	e258      	b.n	800d65c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	f023 0301 	bic.w	r3, r3, #1
 800d1b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d01a      	beq.n	800d1f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe fccf 	bl	800bb68 <disk_status>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d1d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10c      	bne.n	800d1f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d007      	beq.n	800d1f2 <find_volume+0x82>
 800d1e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	e234      	b.n	800d65c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	e232      	b.n	800d65c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d202:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d206:	785b      	ldrb	r3, [r3, #1]
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fe fcc7 	bl	800bb9c <disk_initialize>
 800d20e:	4603      	mov	r3, r0
 800d210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d220:	2303      	movs	r3, #3
 800d222:	e21b      	b.n	800d65c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d224:	79fb      	ldrb	r3, [r7, #7]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d007      	beq.n	800d23a <find_volume+0xca>
 800d22a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d22e:	f003 0304 	and.w	r3, r3, #4
 800d232:	2b00      	cmp	r3, #0
 800d234:	d001      	beq.n	800d23a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d236:	230a      	movs	r3, #10
 800d238:	e210      	b.n	800d65c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23c:	7858      	ldrb	r0, [r3, #1]
 800d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d240:	330c      	adds	r3, #12
 800d242:	461a      	mov	r2, r3
 800d244:	2102      	movs	r1, #2
 800d246:	f7fe fd0f 	bl	800bc68 <disk_ioctl>
 800d24a:	4603      	mov	r3, r0
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <find_volume+0xe4>
 800d250:	2301      	movs	r3, #1
 800d252:	e203      	b.n	800d65c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d256:	899b      	ldrh	r3, [r3, #12]
 800d258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d25c:	d80d      	bhi.n	800d27a <find_volume+0x10a>
 800d25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d260:	899b      	ldrh	r3, [r3, #12]
 800d262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d266:	d308      	bcc.n	800d27a <find_volume+0x10a>
 800d268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26a:	899b      	ldrh	r3, [r3, #12]
 800d26c:	461a      	mov	r2, r3
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	899b      	ldrh	r3, [r3, #12]
 800d272:	3b01      	subs	r3, #1
 800d274:	4013      	ands	r3, r2
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <find_volume+0x10e>
 800d27a:	2301      	movs	r3, #1
 800d27c:	e1ee      	b.n	800d65c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d27e:	2300      	movs	r3, #0
 800d280:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d284:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d286:	f7ff ff1d 	bl	800d0c4 <check_fs>
 800d28a:	4603      	mov	r3, r0
 800d28c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d294:	2b02      	cmp	r3, #2
 800d296:	d149      	bne.n	800d32c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d298:	2300      	movs	r3, #0
 800d29a:	643b      	str	r3, [r7, #64]	; 0x40
 800d29c:	e01e      	b.n	800d2dc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a6:	011b      	lsls	r3, r3, #4
 800d2a8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d2ac:	4413      	add	r3, r2
 800d2ae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d006      	beq.n	800d2c8 <find_volume+0x158>
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	3308      	adds	r3, #8
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fd08 	bl	800bcd4 <ld_dword>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	e000      	b.n	800d2ca <find_volume+0x15a>
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	3358      	adds	r3, #88	; 0x58
 800d2d0:	443b      	add	r3, r7
 800d2d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d8:	3301      	adds	r3, #1
 800d2da:	643b      	str	r3, [r7, #64]	; 0x40
 800d2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d9dd      	bls.n	800d29e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d2e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <find_volume+0x182>
 800d2ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	3358      	adds	r3, #88	; 0x58
 800d2f8:	443b      	add	r3, r7
 800d2fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d2fe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <find_volume+0x1a2>
 800d306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d30a:	f7ff fedb 	bl	800d0c4 <check_fs>
 800d30e:	4603      	mov	r3, r0
 800d310:	e000      	b.n	800d314 <find_volume+0x1a4>
 800d312:	2303      	movs	r3, #3
 800d314:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d905      	bls.n	800d32c <find_volume+0x1bc>
 800d320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d322:	3301      	adds	r3, #1
 800d324:	643b      	str	r3, [r7, #64]	; 0x40
 800d326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d328:	2b03      	cmp	r3, #3
 800d32a:	d9e2      	bls.n	800d2f2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d330:	2b04      	cmp	r3, #4
 800d332:	d101      	bne.n	800d338 <find_volume+0x1c8>
 800d334:	2301      	movs	r3, #1
 800d336:	e191      	b.n	800d65c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d338:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d901      	bls.n	800d344 <find_volume+0x1d4>
 800d340:	230d      	movs	r3, #13
 800d342:	e18b      	b.n	800d65c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d346:	3334      	adds	r3, #52	; 0x34
 800d348:	330b      	adds	r3, #11
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fe fcaa 	bl	800bca4 <ld_word>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d356:	899b      	ldrh	r3, [r3, #12]
 800d358:	429a      	cmp	r2, r3
 800d35a:	d001      	beq.n	800d360 <find_volume+0x1f0>
 800d35c:	230d      	movs	r3, #13
 800d35e:	e17d      	b.n	800d65c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	3334      	adds	r3, #52	; 0x34
 800d364:	3316      	adds	r3, #22
 800d366:	4618      	mov	r0, r3
 800d368:	f7fe fc9c 	bl	800bca4 <ld_word>
 800d36c:	4603      	mov	r3, r0
 800d36e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <find_volume+0x214>
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	3334      	adds	r3, #52	; 0x34
 800d37a:	3324      	adds	r3, #36	; 0x24
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe fca9 	bl	800bcd4 <ld_dword>
 800d382:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d388:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d392:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d396:	789b      	ldrb	r3, [r3, #2]
 800d398:	2b01      	cmp	r3, #1
 800d39a:	d005      	beq.n	800d3a8 <find_volume+0x238>
 800d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39e:	789b      	ldrb	r3, [r3, #2]
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d001      	beq.n	800d3a8 <find_volume+0x238>
 800d3a4:	230d      	movs	r3, #13
 800d3a6:	e159      	b.n	800d65c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	789b      	ldrb	r3, [r3, #2]
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b0:	fb02 f303 	mul.w	r3, r2, r3
 800d3b4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	895b      	ldrh	r3, [r3, #10]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d008      	beq.n	800d3dc <find_volume+0x26c>
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3cc:	895b      	ldrh	r3, [r3, #10]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	895b      	ldrh	r3, [r3, #10]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	4013      	ands	r3, r2
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <find_volume+0x270>
 800d3dc:	230d      	movs	r3, #13
 800d3de:	e13d      	b.n	800d65c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	3334      	adds	r3, #52	; 0x34
 800d3e4:	3311      	adds	r3, #17
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fc5c 	bl	800bca4 <ld_word>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f6:	891b      	ldrh	r3, [r3, #8]
 800d3f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3fa:	8992      	ldrh	r2, [r2, #12]
 800d3fc:	0952      	lsrs	r2, r2, #5
 800d3fe:	b292      	uxth	r2, r2
 800d400:	fbb3 f1f2 	udiv	r1, r3, r2
 800d404:	fb01 f202 	mul.w	r2, r1, r2
 800d408:	1a9b      	subs	r3, r3, r2
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d003      	beq.n	800d418 <find_volume+0x2a8>
 800d410:	230d      	movs	r3, #13
 800d412:	e123      	b.n	800d65c <find_volume+0x4ec>
 800d414:	200005f0 	.word	0x200005f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	3334      	adds	r3, #52	; 0x34
 800d41c:	3313      	adds	r3, #19
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fe fc40 	bl	800bca4 <ld_word>
 800d424:	4603      	mov	r3, r0
 800d426:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d106      	bne.n	800d43c <find_volume+0x2cc>
 800d42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d430:	3334      	adds	r3, #52	; 0x34
 800d432:	3320      	adds	r3, #32
 800d434:	4618      	mov	r0, r3
 800d436:	f7fe fc4d 	bl	800bcd4 <ld_dword>
 800d43a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	3334      	adds	r3, #52	; 0x34
 800d440:	330e      	adds	r3, #14
 800d442:	4618      	mov	r0, r3
 800d444:	f7fe fc2e 	bl	800bca4 <ld_word>
 800d448:	4603      	mov	r3, r0
 800d44a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d44c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <find_volume+0x2e6>
 800d452:	230d      	movs	r3, #13
 800d454:	e102      	b.n	800d65c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d456:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45a:	4413      	add	r3, r2
 800d45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d45e:	8911      	ldrh	r1, [r2, #8]
 800d460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d462:	8992      	ldrh	r2, [r2, #12]
 800d464:	0952      	lsrs	r2, r2, #5
 800d466:	b292      	uxth	r2, r2
 800d468:	fbb1 f2f2 	udiv	r2, r1, r2
 800d46c:	b292      	uxth	r2, r2
 800d46e:	4413      	add	r3, r2
 800d470:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d476:	429a      	cmp	r2, r3
 800d478:	d201      	bcs.n	800d47e <find_volume+0x30e>
 800d47a:	230d      	movs	r3, #13
 800d47c:	e0ee      	b.n	800d65c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d47e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	1ad3      	subs	r3, r2, r3
 800d484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d486:	8952      	ldrh	r2, [r2, #10]
 800d488:	fbb3 f3f2 	udiv	r3, r3, r2
 800d48c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <find_volume+0x328>
 800d494:	230d      	movs	r3, #13
 800d496:	e0e1      	b.n	800d65c <find_volume+0x4ec>
		fmt = FS_FAT32;
 800d498:	2303      	movs	r3, #3
 800d49a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d802      	bhi.n	800d4ae <find_volume+0x33e>
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d802      	bhi.n	800d4be <find_volume+0x34e>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c0:	1c9a      	adds	r2, r3, #2
 800d4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4ca:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d4cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d4ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4d0:	441a      	add	r2, r3
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d4d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4da:	441a      	add	r2, r3
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4de:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d4e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4e4:	2b03      	cmp	r3, #3
 800d4e6:	d11e      	bne.n	800d526 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ea:	3334      	adds	r3, #52	; 0x34
 800d4ec:	332a      	adds	r3, #42	; 0x2a
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fbd8 	bl	800bca4 <ld_word>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d001      	beq.n	800d4fe <find_volume+0x38e>
 800d4fa:	230d      	movs	r3, #13
 800d4fc:	e0ae      	b.n	800d65c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d500:	891b      	ldrh	r3, [r3, #8]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <find_volume+0x39a>
 800d506:	230d      	movs	r3, #13
 800d508:	e0a8      	b.n	800d65c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50c:	3334      	adds	r3, #52	; 0x34
 800d50e:	332c      	adds	r3, #44	; 0x2c
 800d510:	4618      	mov	r0, r3
 800d512:	f7fe fbdf 	bl	800bcd4 <ld_dword>
 800d516:	4602      	mov	r2, r0
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	647b      	str	r3, [r7, #68]	; 0x44
 800d524:	e01f      	b.n	800d566 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d528:	891b      	ldrh	r3, [r3, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <find_volume+0x3c2>
 800d52e:	230d      	movs	r3, #13
 800d530:	e094      	b.n	800d65c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d538:	441a      	add	r2, r3
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d53e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d542:	2b02      	cmp	r3, #2
 800d544:	d103      	bne.n	800d54e <find_volume+0x3de>
 800d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	005b      	lsls	r3, r3, #1
 800d54c:	e00a      	b.n	800d564 <find_volume+0x3f4>
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	699a      	ldr	r2, [r3, #24]
 800d552:	4613      	mov	r3, r2
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	4413      	add	r3, r2
 800d558:	085a      	lsrs	r2, r3, #1
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	699b      	ldr	r3, [r3, #24]
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d564:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d568:	69da      	ldr	r2, [r3, #28]
 800d56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56c:	899b      	ldrh	r3, [r3, #12]
 800d56e:	4619      	mov	r1, r3
 800d570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d572:	440b      	add	r3, r1
 800d574:	3b01      	subs	r3, #1
 800d576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d578:	8989      	ldrh	r1, [r1, #12]
 800d57a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d57e:	429a      	cmp	r2, r3
 800d580:	d201      	bcs.n	800d586 <find_volume+0x416>
 800d582:	230d      	movs	r3, #13
 800d584:	e06a      	b.n	800d65c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d58c:	615a      	str	r2, [r3, #20]
 800d58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d590:	695a      	ldr	r2, [r3, #20]
 800d592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d594:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d598:	2280      	movs	r2, #128	; 0x80
 800d59a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d59c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d149      	bne.n	800d638 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	3334      	adds	r3, #52	; 0x34
 800d5a8:	3330      	adds	r3, #48	; 0x30
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fe fb7a 	bl	800bca4 <ld_word>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d140      	bne.n	800d638 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5be:	f7fe fde5 	bl	800c18c <move_window>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d137      	bne.n	800d638 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5d0:	3334      	adds	r3, #52	; 0x34
 800d5d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe fb64 	bl	800bca4 <ld_word>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d127      	bne.n	800d638 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	3334      	adds	r3, #52	; 0x34
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fb71 	bl	800bcd4 <ld_dword>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	4a1b      	ldr	r2, [pc, #108]	; (800d664 <find_volume+0x4f4>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d11e      	bne.n	800d638 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fc:	3334      	adds	r3, #52	; 0x34
 800d5fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe fb66 	bl	800bcd4 <ld_dword>
 800d608:	4603      	mov	r3, r0
 800d60a:	4a17      	ldr	r2, [pc, #92]	; (800d668 <find_volume+0x4f8>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d113      	bne.n	800d638 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d612:	3334      	adds	r3, #52	; 0x34
 800d614:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe fb5b 	bl	800bcd4 <ld_dword>
 800d61e:	4602      	mov	r2, r0
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d626:	3334      	adds	r3, #52	; 0x34
 800d628:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fb51 	bl	800bcd4 <ld_dword>
 800d632:	4602      	mov	r2, r0
 800d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d636:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d63e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d640:	4b0a      	ldr	r3, [pc, #40]	; (800d66c <find_volume+0x4fc>)
 800d642:	881b      	ldrh	r3, [r3, #0]
 800d644:	3301      	adds	r3, #1
 800d646:	b29a      	uxth	r2, r3
 800d648:	4b08      	ldr	r3, [pc, #32]	; (800d66c <find_volume+0x4fc>)
 800d64a:	801a      	strh	r2, [r3, #0]
 800d64c:	4b07      	ldr	r3, [pc, #28]	; (800d66c <find_volume+0x4fc>)
 800d64e:	881a      	ldrh	r2, [r3, #0]
 800d650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d652:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d654:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d656:	f7fe fd31 	bl	800c0bc <clear_lock>
#endif
	return FR_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3758      	adds	r7, #88	; 0x58
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	41615252 	.word	0x41615252
 800d668:	61417272 	.word	0x61417272
 800d66c:	200005f4 	.word	0x200005f4

0800d670 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d67a:	2309      	movs	r3, #9
 800d67c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d01c      	beq.n	800d6be <validate+0x4e>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d018      	beq.n	800d6be <validate+0x4e>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d013      	beq.n	800d6be <validate+0x4e>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	889a      	ldrh	r2, [r3, #4]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	88db      	ldrh	r3, [r3, #6]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d10c      	bne.n	800d6be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	785b      	ldrb	r3, [r3, #1]
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe fa5c 	bl	800bb68 <disk_status>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d101      	bne.n	800d6be <validate+0x4e>
			res = FR_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d6be:	7bfb      	ldrb	r3, [r7, #15]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d102      	bne.n	800d6ca <validate+0x5a>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	e000      	b.n	800d6cc <validate+0x5c>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	683a      	ldr	r2, [r7, #0]
 800d6ce:	6013      	str	r3, [r2, #0]
	return res;
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
	...

0800d6dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d6ee:	f107 0310 	add.w	r3, r7, #16
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7ff fca2 	bl	800d03c <get_ldnumber>
 800d6f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	da01      	bge.n	800d704 <f_mount+0x28>
 800d700:	230b      	movs	r3, #11
 800d702:	e02b      	b.n	800d75c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d704:	4a17      	ldr	r2, [pc, #92]	; (800d764 <f_mount+0x88>)
 800d706:	69fb      	ldr	r3, [r7, #28]
 800d708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d70c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d005      	beq.n	800d720 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d714:	69b8      	ldr	r0, [r7, #24]
 800d716:	f7fe fcd1 	bl	800c0bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d71a:	69bb      	ldr	r3, [r7, #24]
 800d71c:	2200      	movs	r2, #0
 800d71e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	490d      	ldr	r1, [pc, #52]	; (800d764 <f_mount+0x88>)
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <f_mount+0x66>
 800d73c:	79fb      	ldrb	r3, [r7, #7]
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d001      	beq.n	800d746 <f_mount+0x6a>
 800d742:	2300      	movs	r3, #0
 800d744:	e00a      	b.n	800d75c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d746:	f107 010c 	add.w	r1, r7, #12
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	2200      	movs	r2, #0
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff fd0d 	bl	800d170 <find_volume>
 800d756:	4603      	mov	r3, r0
 800d758:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3720      	adds	r7, #32
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	200005f0 	.word	0x200005f0

0800d768 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b098      	sub	sp, #96	; 0x60
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	4613      	mov	r3, r2
 800d774:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d101      	bne.n	800d780 <f_open+0x18>
 800d77c:	2309      	movs	r3, #9
 800d77e:	e1bb      	b.n	800daf8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d786:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d788:	79fa      	ldrb	r2, [r7, #7]
 800d78a:	f107 0110 	add.w	r1, r7, #16
 800d78e:	f107 0308 	add.w	r3, r7, #8
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fcec 	bl	800d170 <find_volume>
 800d798:	4603      	mov	r3, r0
 800d79a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d79e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f040 819f 	bne.w	800dae6 <f_open+0x37e>
		dj.obj.fs = fs;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d7ac:	68ba      	ldr	r2, [r7, #8]
 800d7ae:	f107 0314 	add.w	r3, r7, #20
 800d7b2:	4611      	mov	r1, r2
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	f7ff fbcb 	bl	800cf50 <follow_path>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d11a      	bne.n	800d7fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d7c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d7cc:	b25b      	sxtb	r3, r3
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da03      	bge.n	800d7da <f_open+0x72>
				res = FR_INVALID_NAME;
 800d7d2:	2306      	movs	r3, #6
 800d7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d7d8:	e011      	b.n	800d7fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d7da:	79fb      	ldrb	r3, [r7, #7]
 800d7dc:	f023 0301 	bic.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	bf14      	ite	ne
 800d7e4:	2301      	movne	r3, #1
 800d7e6:	2300      	moveq	r3, #0
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	f107 0314 	add.w	r3, r7, #20
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fe fb56 	bl	800bea4 <chk_lock>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d7fe:	79fb      	ldrb	r3, [r7, #7]
 800d800:	f003 031c 	and.w	r3, r3, #28
 800d804:	2b00      	cmp	r3, #0
 800d806:	d07f      	beq.n	800d908 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d808:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d017      	beq.n	800d840 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d814:	2b04      	cmp	r3, #4
 800d816:	d10e      	bne.n	800d836 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d818:	f7fe fba0 	bl	800bf5c <enq_lock>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d006      	beq.n	800d830 <f_open+0xc8>
 800d822:	f107 0314 	add.w	r3, r7, #20
 800d826:	4618      	mov	r0, r3
 800d828:	f7ff facc 	bl	800cdc4 <dir_register>
 800d82c:	4603      	mov	r3, r0
 800d82e:	e000      	b.n	800d832 <f_open+0xca>
 800d830:	2312      	movs	r3, #18
 800d832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d836:	79fb      	ldrb	r3, [r7, #7]
 800d838:	f043 0308 	orr.w	r3, r3, #8
 800d83c:	71fb      	strb	r3, [r7, #7]
 800d83e:	e010      	b.n	800d862 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d840:	7ebb      	ldrb	r3, [r7, #26]
 800d842:	f003 0311 	and.w	r3, r3, #17
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <f_open+0xea>
					res = FR_DENIED;
 800d84a:	2307      	movs	r3, #7
 800d84c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d850:	e007      	b.n	800d862 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d852:	79fb      	ldrb	r3, [r7, #7]
 800d854:	f003 0304 	and.w	r3, r3, #4
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <f_open+0xfa>
 800d85c:	2308      	movs	r3, #8
 800d85e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d866:	2b00      	cmp	r3, #0
 800d868:	d168      	bne.n	800d93c <f_open+0x1d4>
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	f003 0308 	and.w	r3, r3, #8
 800d870:	2b00      	cmp	r3, #0
 800d872:	d063      	beq.n	800d93c <f_open+0x1d4>
				dw = GET_FATTIME();
 800d874:	f7fd fff2 	bl	800b85c <get_fattime>
 800d878:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87c:	330e      	adds	r3, #14
 800d87e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d880:	4618      	mov	r0, r3
 800d882:	f7fe fa65 	bl	800bd50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d888:	3316      	adds	r3, #22
 800d88a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe fa5f 	bl	800bd50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d894:	330b      	adds	r3, #11
 800d896:	2220      	movs	r2, #32
 800d898:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d89e:	4611      	mov	r1, r2
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f7ff f9fb 	bl	800cc9c <ld_clust>
 800d8a6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fa13 	bl	800ccda <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d8b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8b6:	331c      	adds	r3, #28
 800d8b8:	2100      	movs	r1, #0
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f7fe fa48 	bl	800bd50 <st_dword>
					fs->wflag = 1;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d037      	beq.n	800d93c <f_open+0x1d4>
						dw = fs->winsect;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8d0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d8d2:	f107 0314 	add.w	r3, r7, #20
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7fe ff03 	bl	800c6e6 <remove_chain>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d8e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d126      	bne.n	800d93c <f_open+0x1d4>
							res = move_window(fs, dw);
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe fc4a 	bl	800c18c <move_window>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d902:	3a01      	subs	r2, #1
 800d904:	611a      	str	r2, [r3, #16]
 800d906:	e019      	b.n	800d93c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d115      	bne.n	800d93c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d910:	7ebb      	ldrb	r3, [r7, #26]
 800d912:	f003 0310 	and.w	r3, r3, #16
 800d916:	2b00      	cmp	r3, #0
 800d918:	d003      	beq.n	800d922 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d91a:	2304      	movs	r3, #4
 800d91c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d920:	e00c      	b.n	800d93c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d922:	79fb      	ldrb	r3, [r7, #7]
 800d924:	f003 0302 	and.w	r3, r3, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d007      	beq.n	800d93c <f_open+0x1d4>
 800d92c:	7ebb      	ldrb	r3, [r7, #26]
 800d92e:	f003 0301 	and.w	r3, r3, #1
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <f_open+0x1d4>
						res = FR_DENIED;
 800d936:	2307      	movs	r3, #7
 800d938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d93c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d940:	2b00      	cmp	r3, #0
 800d942:	d128      	bne.n	800d996 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d944:	79fb      	ldrb	r3, [r7, #7]
 800d946:	f003 0308 	and.w	r3, r3, #8
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d003      	beq.n	800d956 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d94e:	79fb      	ldrb	r3, [r7, #7]
 800d950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d954:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d964:	79fb      	ldrb	r3, [r7, #7]
 800d966:	f023 0301 	bic.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	bf14      	ite	ne
 800d96e:	2301      	movne	r3, #1
 800d970:	2300      	moveq	r3, #0
 800d972:	b2db      	uxtb	r3, r3
 800d974:	461a      	mov	r2, r3
 800d976:	f107 0314 	add.w	r3, r7, #20
 800d97a:	4611      	mov	r1, r2
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fe fb0f 	bl	800bfa0 <inc_lock>
 800d982:	4602      	mov	r2, r0
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	691b      	ldr	r3, [r3, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <f_open+0x22e>
 800d990:	2302      	movs	r3, #2
 800d992:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f040 80a3 	bne.w	800dae6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7ff f978 	bl	800cc9c <ld_clust>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d9b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b4:	331c      	adds	r3, #28
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe f98c 	bl	800bcd4 <ld_dword>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	88da      	ldrh	r2, [r3, #6]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	79fa      	ldrb	r2, [r7, #7]
 800d9da:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3330      	adds	r3, #48	; 0x30
 800d9f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d9f6:	2100      	movs	r1, #0
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fe f9f6 	bl	800bdea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	f003 0320 	and.w	r3, r3, #32
 800da04:	2b00      	cmp	r3, #0
 800da06:	d06e      	beq.n	800dae6 <f_open+0x37e>
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d06a      	beq.n	800dae6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	68da      	ldr	r2, [r3, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	895b      	ldrh	r3, [r3, #10]
 800da1c:	461a      	mov	r2, r3
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	899b      	ldrh	r3, [r3, #12]
 800da22:	fb02 f303 	mul.w	r3, r2, r3
 800da26:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	689b      	ldr	r3, [r3, #8]
 800da2c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	657b      	str	r3, [r7, #84]	; 0x54
 800da34:	e016      	b.n	800da64 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7fe fc63 	bl	800c306 <get_fat>
 800da40:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800da42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da44:	2b01      	cmp	r3, #1
 800da46:	d802      	bhi.n	800da4e <f_open+0x2e6>
 800da48:	2302      	movs	r3, #2
 800da4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800da4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da54:	d102      	bne.n	800da5c <f_open+0x2f4>
 800da56:	2301      	movs	r3, #1
 800da58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800da5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	657b      	str	r3, [r7, #84]	; 0x54
 800da64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d103      	bne.n	800da74 <f_open+0x30c>
 800da6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da70:	429a      	cmp	r2, r3
 800da72:	d8e0      	bhi.n	800da36 <f_open+0x2ce>
				}
				fp->clust = clst;
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da78:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800da7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d131      	bne.n	800dae6 <f_open+0x37e>
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	899b      	ldrh	r3, [r3, #12]
 800da86:	461a      	mov	r2, r3
 800da88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800da8a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da8e:	fb01 f202 	mul.w	r2, r1, r2
 800da92:	1a9b      	subs	r3, r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d026      	beq.n	800dae6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7fe fc13 	bl	800c2c8 <clust2sect>
 800daa2:	6478      	str	r0, [r7, #68]	; 0x44
 800daa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d103      	bne.n	800dab2 <f_open+0x34a>
						res = FR_INT_ERR;
 800daaa:	2302      	movs	r3, #2
 800daac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dab0:	e019      	b.n	800dae6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	899b      	ldrh	r3, [r3, #12]
 800dab6:	461a      	mov	r2, r3
 800dab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daba:	fbb3 f2f2 	udiv	r2, r3, r2
 800dabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac0:	441a      	add	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	7858      	ldrb	r0, [r3, #1]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	6a1a      	ldr	r2, [r3, #32]
 800dad4:	2301      	movs	r3, #1
 800dad6:	f7fe f887 	bl	800bbe8 <disk_read>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <f_open+0x37e>
 800dae0:	2301      	movs	r3, #1
 800dae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daea:	2b00      	cmp	r3, #0
 800daec:	d002      	beq.n	800daf4 <f_open+0x38c>
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800daf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3760      	adds	r7, #96	; 0x60
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b08c      	sub	sp, #48	; 0x30
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
 800db0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2200      	movs	r2, #0
 800db16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f107 0210 	add.w	r2, r7, #16
 800db1e:	4611      	mov	r1, r2
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fda5 	bl	800d670 <validate>
 800db26:	4603      	mov	r3, r0
 800db28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800db2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db30:	2b00      	cmp	r3, #0
 800db32:	d107      	bne.n	800db44 <f_write+0x44>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	7d5b      	ldrb	r3, [r3, #21]
 800db38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800db3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <f_write+0x4a>
 800db44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800db48:	e16a      	b.n	800de20 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	7d1b      	ldrb	r3, [r3, #20]
 800db4e:	f003 0302 	and.w	r3, r3, #2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <f_write+0x5a>
 800db56:	2307      	movs	r3, #7
 800db58:	e162      	b.n	800de20 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	699a      	ldr	r2, [r3, #24]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	441a      	add	r2, r3
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	699b      	ldr	r3, [r3, #24]
 800db66:	429a      	cmp	r2, r3
 800db68:	f080 814c 	bcs.w	800de04 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	699b      	ldr	r3, [r3, #24]
 800db70:	43db      	mvns	r3, r3
 800db72:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800db74:	e146      	b.n	800de04 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	699b      	ldr	r3, [r3, #24]
 800db7a:	693a      	ldr	r2, [r7, #16]
 800db7c:	8992      	ldrh	r2, [r2, #12]
 800db7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800db82:	fb01 f202 	mul.w	r2, r1, r2
 800db86:	1a9b      	subs	r3, r3, r2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	f040 80f1 	bne.w	800dd70 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	693a      	ldr	r2, [r7, #16]
 800db94:	8992      	ldrh	r2, [r2, #12]
 800db96:	fbb3 f3f2 	udiv	r3, r3, r2
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	8952      	ldrh	r2, [r2, #10]
 800db9e:	3a01      	subs	r2, #1
 800dba0:	4013      	ands	r3, r2
 800dba2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d143      	bne.n	800dc32 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10c      	bne.n	800dbcc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d11a      	bne.n	800dbf4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe fdf4 	bl	800c7b0 <create_chain>
 800dbc8:	62b8      	str	r0, [r7, #40]	; 0x28
 800dbca:	e013      	b.n	800dbf4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d007      	beq.n	800dbe4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	699b      	ldr	r3, [r3, #24]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	68f8      	ldr	r0, [r7, #12]
 800dbdc:	f7fe fe80 	bl	800c8e0 <clmt_clust>
 800dbe0:	62b8      	str	r0, [r7, #40]	; 0x28
 800dbe2:	e007      	b.n	800dbf4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	69db      	ldr	r3, [r3, #28]
 800dbea:	4619      	mov	r1, r3
 800dbec:	4610      	mov	r0, r2
 800dbee:	f7fe fddf 	bl	800c7b0 <create_chain>
 800dbf2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 8109 	beq.w	800de0e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d104      	bne.n	800dc0c <f_write+0x10c>
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2202      	movs	r2, #2
 800dc06:	755a      	strb	r2, [r3, #21]
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e109      	b.n	800de20 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc12:	d104      	bne.n	800dc1e <f_write+0x11e>
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2201      	movs	r2, #1
 800dc18:	755a      	strb	r2, [r3, #21]
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e100      	b.n	800de20 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d102      	bne.n	800dc32 <f_write+0x132>
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	7d1b      	ldrb	r3, [r3, #20]
 800dc36:	b25b      	sxtb	r3, r3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	da18      	bge.n	800dc6e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	7858      	ldrb	r0, [r3, #1]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6a1a      	ldr	r2, [r3, #32]
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	f7fd ffec 	bl	800bc28 <disk_write>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <f_write+0x160>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	755a      	strb	r2, [r3, #21]
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e0df      	b.n	800de20 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	7d1b      	ldrb	r3, [r3, #20]
 800dc64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dc6e:	693a      	ldr	r2, [r7, #16]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	69db      	ldr	r3, [r3, #28]
 800dc74:	4619      	mov	r1, r3
 800dc76:	4610      	mov	r0, r2
 800dc78:	f7fe fb26 	bl	800c2c8 <clust2sect>
 800dc7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d104      	bne.n	800dc8e <f_write+0x18e>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2202      	movs	r2, #2
 800dc88:	755a      	strb	r2, [r3, #21]
 800dc8a:	2302      	movs	r3, #2
 800dc8c:	e0c8      	b.n	800de20 <f_write+0x320>
			sect += csect;
 800dc8e:	697a      	ldr	r2, [r7, #20]
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	4413      	add	r3, r2
 800dc94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	899b      	ldrh	r3, [r3, #12]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dca2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dca4:	6a3b      	ldr	r3, [r7, #32]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d043      	beq.n	800dd32 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dcaa:	69ba      	ldr	r2, [r7, #24]
 800dcac:	6a3b      	ldr	r3, [r7, #32]
 800dcae:	4413      	add	r3, r2
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	8952      	ldrh	r2, [r2, #10]
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d905      	bls.n	800dcc4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	895b      	ldrh	r3, [r3, #10]
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	7858      	ldrb	r0, [r3, #1]
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	697a      	ldr	r2, [r7, #20]
 800dccc:	69f9      	ldr	r1, [r7, #28]
 800dcce:	f7fd ffab 	bl	800bc28 <disk_write>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d004      	beq.n	800dce2 <f_write+0x1e2>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	755a      	strb	r2, [r3, #21]
 800dcde:	2301      	movs	r3, #1
 800dce0:	e09e      	b.n	800de20 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6a1a      	ldr	r2, [r3, #32]
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	1ad3      	subs	r3, r2, r3
 800dcea:	6a3a      	ldr	r2, [r7, #32]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d918      	bls.n	800dd22 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6a1a      	ldr	r2, [r3, #32]
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	693a      	ldr	r2, [r7, #16]
 800dd00:	8992      	ldrh	r2, [r2, #12]
 800dd02:	fb02 f303 	mul.w	r3, r2, r3
 800dd06:	69fa      	ldr	r2, [r7, #28]
 800dd08:	18d1      	adds	r1, r2, r3
 800dd0a:	693b      	ldr	r3, [r7, #16]
 800dd0c:	899b      	ldrh	r3, [r3, #12]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	f7fe f84a 	bl	800bda8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	7d1b      	ldrb	r3, [r3, #20]
 800dd18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	899b      	ldrh	r3, [r3, #12]
 800dd26:	461a      	mov	r2, r3
 800dd28:	6a3b      	ldr	r3, [r7, #32]
 800dd2a:	fb02 f303 	mul.w	r3, r2, r3
 800dd2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dd30:	e04b      	b.n	800ddca <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	6a1b      	ldr	r3, [r3, #32]
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d016      	beq.n	800dd6a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	699a      	ldr	r2, [r3, #24]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d210      	bcs.n	800dd6a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	7858      	ldrb	r0, [r3, #1]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd52:	2301      	movs	r3, #1
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	f7fd ff47 	bl	800bbe8 <disk_read>
 800dd5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2201      	movs	r2, #1
 800dd64:	755a      	strb	r2, [r3, #21]
 800dd66:	2301      	movs	r3, #1
 800dd68:	e05a      	b.n	800de20 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	697a      	ldr	r2, [r7, #20]
 800dd6e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	899b      	ldrh	r3, [r3, #12]
 800dd74:	4618      	mov	r0, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	699b      	ldr	r3, [r3, #24]
 800dd7a:	693a      	ldr	r2, [r7, #16]
 800dd7c:	8992      	ldrh	r2, [r2, #12]
 800dd7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd82:	fb01 f202 	mul.w	r2, r1, r2
 800dd86:	1a9b      	subs	r3, r3, r2
 800dd88:	1ac3      	subs	r3, r0, r3
 800dd8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d901      	bls.n	800dd98 <f_write+0x298>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	693a      	ldr	r2, [r7, #16]
 800dda4:	8992      	ldrh	r2, [r2, #12]
 800dda6:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddaa:	fb00 f202 	mul.w	r2, r0, r2
 800ddae:	1a9b      	subs	r3, r3, r2
 800ddb0:	440b      	add	r3, r1
 800ddb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddb4:	69f9      	ldr	r1, [r7, #28]
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fd fff6 	bl	800bda8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	7d1b      	ldrb	r3, [r3, #20]
 800ddc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ddca:	69fa      	ldr	r2, [r7, #28]
 800ddcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddce:	4413      	add	r3, r2
 800ddd0:	61fb      	str	r3, [r7, #28]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	699a      	ldr	r2, [r3, #24]
 800ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd8:	441a      	add	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	619a      	str	r2, [r3, #24]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	429a      	cmp	r2, r3
 800dde8:	bf38      	it	cc
 800ddea:	461a      	movcc	r2, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	60da      	str	r2, [r3, #12]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf6:	441a      	add	r2, r3
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	f47f aeb5 	bne.w	800db76 <f_write+0x76>
 800de0c:	e000      	b.n	800de10 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de0e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	7d1b      	ldrb	r3, [r3, #20]
 800de14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de18:	b2da      	uxtb	r2, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800de1e:	2300      	movs	r3, #0
}
 800de20:	4618      	mov	r0, r3
 800de22:	3730      	adds	r7, #48	; 0x30
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f107 0208 	add.w	r2, r7, #8
 800de36:	4611      	mov	r1, r2
 800de38:	4618      	mov	r0, r3
 800de3a:	f7ff fc19 	bl	800d670 <validate>
 800de3e:	4603      	mov	r3, r0
 800de40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de42:	7dfb      	ldrb	r3, [r7, #23]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d168      	bne.n	800df1a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	7d1b      	ldrb	r3, [r3, #20]
 800de4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de50:	2b00      	cmp	r3, #0
 800de52:	d062      	beq.n	800df1a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	7d1b      	ldrb	r3, [r3, #20]
 800de58:	b25b      	sxtb	r3, r3
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	da15      	bge.n	800de8a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	7858      	ldrb	r0, [r3, #1]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a1a      	ldr	r2, [r3, #32]
 800de6c:	2301      	movs	r3, #1
 800de6e:	f7fd fedb 	bl	800bc28 <disk_write>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <f_sync+0x54>
 800de78:	2301      	movs	r3, #1
 800de7a:	e04f      	b.n	800df1c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	7d1b      	ldrb	r3, [r3, #20]
 800de80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de84:	b2da      	uxtb	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800de8a:	f7fd fce7 	bl	800b85c <get_fattime>
 800de8e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800de90:	68ba      	ldr	r2, [r7, #8]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de96:	4619      	mov	r1, r3
 800de98:	4610      	mov	r0, r2
 800de9a:	f7fe f977 	bl	800c18c <move_window>
 800de9e:	4603      	mov	r3, r0
 800dea0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dea2:	7dfb      	ldrb	r3, [r7, #23]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d138      	bne.n	800df1a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	330b      	adds	r3, #11
 800deb2:	781a      	ldrb	r2, [r3, #0]
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	330b      	adds	r3, #11
 800deb8:	f042 0220 	orr.w	r2, r2, #32
 800debc:	b2d2      	uxtb	r2, r2
 800debe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6818      	ldr	r0, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	461a      	mov	r2, r3
 800deca:	68f9      	ldr	r1, [r7, #12]
 800decc:	f7fe ff05 	bl	800ccda <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f103 021c 	add.w	r2, r3, #28
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	4619      	mov	r1, r3
 800dedc:	4610      	mov	r0, r2
 800dede:	f7fd ff37 	bl	800bd50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	3316      	adds	r3, #22
 800dee6:	6939      	ldr	r1, [r7, #16]
 800dee8:	4618      	mov	r0, r3
 800deea:	f7fd ff31 	bl	800bd50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	3312      	adds	r3, #18
 800def2:	2100      	movs	r1, #0
 800def4:	4618      	mov	r0, r3
 800def6:	f7fd ff10 	bl	800bd1a <st_word>
					fs->wflag = 1;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2201      	movs	r2, #1
 800defe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe f970 	bl	800c1e8 <sync_fs>
 800df08:	4603      	mov	r3, r0
 800df0a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800df1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b090      	sub	sp, #64	; 0x40
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f107 0208 	add.w	r2, r7, #8
 800df34:	4611      	mov	r1, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f7ff fb9a 	bl	800d670 <validate>
 800df3c:	4603      	mov	r3, r0
 800df3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800df42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df46:	2b00      	cmp	r3, #0
 800df48:	d103      	bne.n	800df52 <f_lseek+0x2e>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	7d5b      	ldrb	r3, [r3, #21]
 800df4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800df52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <f_lseek+0x3c>
 800df5a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800df5e:	e201      	b.n	800e364 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df64:	2b00      	cmp	r3, #0
 800df66:	f000 80d9 	beq.w	800e11c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df70:	d15a      	bne.n	800e028 <f_lseek+0x104>
			tbl = fp->cltbl;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df76:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	1d1a      	adds	r2, r3, #4
 800df7c:	627a      	str	r2, [r7, #36]	; 0x24
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	617b      	str	r3, [r7, #20]
 800df82:	2302      	movs	r3, #2
 800df84:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800df8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d03a      	beq.n	800e008 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800df92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df94:	613b      	str	r3, [r7, #16]
 800df96:	2300      	movs	r3, #0
 800df98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9c:	3302      	adds	r3, #2
 800df9e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa2:	60fb      	str	r3, [r7, #12]
 800dfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f7fe f9a9 	bl	800c306 <get_fat>
 800dfb4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d804      	bhi.n	800dfc6 <f_lseek+0xa2>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2202      	movs	r2, #2
 800dfc0:	755a      	strb	r2, [r3, #21]
 800dfc2:	2302      	movs	r3, #2
 800dfc4:	e1ce      	b.n	800e364 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfcc:	d104      	bne.n	800dfd8 <f_lseek+0xb4>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	755a      	strb	r2, [r3, #21]
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e1c5      	b.n	800e364 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d0de      	beq.n	800dfa0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dfe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d809      	bhi.n	800dffe <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfec:	1d1a      	adds	r2, r3, #4
 800dfee:	627a      	str	r2, [r7, #36]	; 0x24
 800dff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dff2:	601a      	str	r2, [r3, #0]
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	1d1a      	adds	r2, r3, #4
 800dff8:	627a      	str	r2, [r7, #36]	; 0x24
 800dffa:	693a      	ldr	r2, [r7, #16]
 800dffc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	699b      	ldr	r3, [r3, #24]
 800e002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e004:	429a      	cmp	r2, r3
 800e006:	d3c4      	bcc.n	800df92 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e00e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d803      	bhi.n	800e020 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	e19f      	b.n	800e360 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e020:	2311      	movs	r3, #17
 800e022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e026:	e19b      	b.n	800e360 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68db      	ldr	r3, [r3, #12]
 800e02c:	683a      	ldr	r2, [r7, #0]
 800e02e:	429a      	cmp	r2, r3
 800e030:	d902      	bls.n	800e038 <f_lseek+0x114>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	68db      	ldr	r3, [r3, #12]
 800e036:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f000 818d 	beq.w	800e360 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	3b01      	subs	r3, #1
 800e04a:	4619      	mov	r1, r3
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7fe fc47 	bl	800c8e0 <clmt_clust>
 800e052:	4602      	mov	r2, r0
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	69db      	ldr	r3, [r3, #28]
 800e05e:	4619      	mov	r1, r3
 800e060:	4610      	mov	r0, r2
 800e062:	f7fe f931 	bl	800c2c8 <clust2sect>
 800e066:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e068:	69bb      	ldr	r3, [r7, #24]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d104      	bne.n	800e078 <f_lseek+0x154>
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2202      	movs	r2, #2
 800e072:	755a      	strb	r2, [r3, #21]
 800e074:	2302      	movs	r3, #2
 800e076:	e175      	b.n	800e364 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	3b01      	subs	r3, #1
 800e07c:	68ba      	ldr	r2, [r7, #8]
 800e07e:	8992      	ldrh	r2, [r2, #12]
 800e080:	fbb3 f3f2 	udiv	r3, r3, r2
 800e084:	68ba      	ldr	r2, [r7, #8]
 800e086:	8952      	ldrh	r2, [r2, #10]
 800e088:	3a01      	subs	r2, #1
 800e08a:	4013      	ands	r3, r2
 800e08c:	69ba      	ldr	r2, [r7, #24]
 800e08e:	4413      	add	r3, r2
 800e090:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	8992      	ldrh	r2, [r2, #12]
 800e09a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e09e:	fb01 f202 	mul.w	r2, r1, r2
 800e0a2:	1a9b      	subs	r3, r3, r2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f000 815b 	beq.w	800e360 <f_lseek+0x43c>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6a1b      	ldr	r3, [r3, #32]
 800e0ae:	69ba      	ldr	r2, [r7, #24]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	f000 8155 	beq.w	800e360 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	7d1b      	ldrb	r3, [r3, #20]
 800e0ba:	b25b      	sxtb	r3, r3
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	da18      	bge.n	800e0f2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	7858      	ldrb	r0, [r3, #1]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6a1a      	ldr	r2, [r3, #32]
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	f7fd fdaa 	bl	800bc28 <disk_write>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d004      	beq.n	800e0e4 <f_lseek+0x1c0>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2201      	movs	r2, #1
 800e0de:	755a      	strb	r2, [r3, #21]
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e13f      	b.n	800e364 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	7d1b      	ldrb	r3, [r3, #20]
 800e0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	7858      	ldrb	r0, [r3, #1]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	69ba      	ldr	r2, [r7, #24]
 800e100:	f7fd fd72 	bl	800bbe8 <disk_read>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d004      	beq.n	800e114 <f_lseek+0x1f0>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	755a      	strb	r2, [r3, #21]
 800e110:	2301      	movs	r3, #1
 800e112:	e127      	b.n	800e364 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	69ba      	ldr	r2, [r7, #24]
 800e118:	621a      	str	r2, [r3, #32]
 800e11a:	e121      	b.n	800e360 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d908      	bls.n	800e138 <f_lseek+0x214>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	7d1b      	ldrb	r3, [r3, #20]
 800e12a:	f003 0302 	and.w	r3, r3, #2
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d102      	bne.n	800e138 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	68db      	ldr	r3, [r3, #12]
 800e136:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	699b      	ldr	r3, [r3, #24]
 800e13c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	637b      	str	r3, [r7, #52]	; 0x34
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e146:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	f000 80b5 	beq.w	800e2ba <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	895b      	ldrh	r3, [r3, #10]
 800e154:	461a      	mov	r2, r3
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	899b      	ldrh	r3, [r3, #12]
 800e15a:	fb02 f303 	mul.w	r3, r2, r3
 800e15e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d01b      	beq.n	800e19e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	1e5a      	subs	r2, r3, #1
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	1e59      	subs	r1, r3, #1
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d30f      	bcc.n	800e19e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	1e5a      	subs	r2, r3, #1
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	425b      	negs	r3, r3
 800e186:	401a      	ands	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	683a      	ldr	r2, [r7, #0]
 800e192:	1ad3      	subs	r3, r2, r3
 800e194:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	69db      	ldr	r3, [r3, #28]
 800e19a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e19c:	e022      	b.n	800e1e4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d119      	bne.n	800e1de <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2100      	movs	r1, #0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe fafe 	bl	800c7b0 <create_chain>
 800e1b4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d104      	bne.n	800e1c6 <f_lseek+0x2a2>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	755a      	strb	r2, [r3, #21]
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e0ce      	b.n	800e364 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1cc:	d104      	bne.n	800e1d8 <f_lseek+0x2b4>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	755a      	strb	r2, [r3, #21]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	e0c5      	b.n	800e364 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1dc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1e2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d067      	beq.n	800e2ba <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e1ea:	e03a      	b.n	800e262 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e1ec:	683a      	ldr	r2, [r7, #0]
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	603b      	str	r3, [r7, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	699a      	ldr	r2, [r3, #24]
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	441a      	add	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7d1b      	ldrb	r3, [r3, #20]
 800e204:	f003 0302 	and.w	r3, r3, #2
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00b      	beq.n	800e224 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe facd 	bl	800c7b0 <create_chain>
 800e216:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d108      	bne.n	800e230 <f_lseek+0x30c>
							ofs = 0; break;
 800e21e:	2300      	movs	r3, #0
 800e220:	603b      	str	r3, [r7, #0]
 800e222:	e022      	b.n	800e26a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e228:	4618      	mov	r0, r3
 800e22a:	f7fe f86c 	bl	800c306 <get_fat>
 800e22e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e236:	d104      	bne.n	800e242 <f_lseek+0x31e>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	755a      	strb	r2, [r3, #21]
 800e23e:	2301      	movs	r3, #1
 800e240:	e090      	b.n	800e364 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e244:	2b01      	cmp	r3, #1
 800e246:	d904      	bls.n	800e252 <f_lseek+0x32e>
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e24e:	429a      	cmp	r2, r3
 800e250:	d304      	bcc.n	800e25c <f_lseek+0x338>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2202      	movs	r2, #2
 800e256:	755a      	strb	r2, [r3, #21]
 800e258:	2302      	movs	r3, #2
 800e25a:	e083      	b.n	800e364 <f_lseek+0x440>
					fp->clust = clst;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e260:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	429a      	cmp	r2, r3
 800e268:	d8c0      	bhi.n	800e1ec <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	699a      	ldr	r2, [r3, #24]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	441a      	add	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	899b      	ldrh	r3, [r3, #12]
 800e27a:	461a      	mov	r2, r3
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e282:	fb01 f202 	mul.w	r2, r1, r2
 800e286:	1a9b      	subs	r3, r3, r2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d016      	beq.n	800e2ba <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe f819 	bl	800c2c8 <clust2sect>
 800e296:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d104      	bne.n	800e2a8 <f_lseek+0x384>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	755a      	strb	r2, [r3, #21]
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	e05d      	b.n	800e364 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	899b      	ldrh	r3, [r3, #12]
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2b6:	4413      	add	r3, r2
 800e2b8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	699a      	ldr	r2, [r3, #24]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d90a      	bls.n	800e2dc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	699a      	ldr	r2, [r3, #24]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d6:	b2da      	uxtb	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	699b      	ldr	r3, [r3, #24]
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	8992      	ldrh	r2, [r2, #12]
 800e2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2e8:	fb01 f202 	mul.w	r2, r1, r2
 800e2ec:	1a9b      	subs	r3, r3, r2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d036      	beq.n	800e360 <f_lseek+0x43c>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6a1b      	ldr	r3, [r3, #32]
 800e2f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d031      	beq.n	800e360 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	7d1b      	ldrb	r3, [r3, #20]
 800e300:	b25b      	sxtb	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	da18      	bge.n	800e338 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	7858      	ldrb	r0, [r3, #1]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a1a      	ldr	r2, [r3, #32]
 800e314:	2301      	movs	r3, #1
 800e316:	f7fd fc87 	bl	800bc28 <disk_write>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d004      	beq.n	800e32a <f_lseek+0x406>
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	755a      	strb	r2, [r3, #21]
 800e326:	2301      	movs	r3, #1
 800e328:	e01c      	b.n	800e364 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	7d1b      	ldrb	r3, [r3, #20]
 800e32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e332:	b2da      	uxtb	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	7858      	ldrb	r0, [r3, #1]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e342:	2301      	movs	r3, #1
 800e344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e346:	f7fd fc4f 	bl	800bbe8 <disk_read>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d004      	beq.n	800e35a <f_lseek+0x436>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	755a      	strb	r2, [r3, #21]
 800e356:	2301      	movs	r3, #1
 800e358:	e004      	b.n	800e364 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e35e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e364:	4618      	mov	r0, r3
 800e366:	3740      	adds	r7, #64	; 0x40
 800e368:	46bd      	mov	sp, r7
 800e36a:	bd80      	pop	{r7, pc}

0800e36c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b087      	sub	sp, #28
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	60b9      	str	r1, [r7, #8]
 800e376:	4613      	mov	r3, r2
 800e378:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e37a:	2301      	movs	r3, #1
 800e37c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e382:	4b1f      	ldr	r3, [pc, #124]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e384:	7a5b      	ldrb	r3, [r3, #9]
 800e386:	b2db      	uxtb	r3, r3
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d131      	bne.n	800e3f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e38c:	4b1c      	ldr	r3, [pc, #112]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e38e:	7a5b      	ldrb	r3, [r3, #9]
 800e390:	b2db      	uxtb	r3, r3
 800e392:	461a      	mov	r2, r3
 800e394:	4b1a      	ldr	r3, [pc, #104]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e396:	2100      	movs	r1, #0
 800e398:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e39a:	4b19      	ldr	r3, [pc, #100]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e39c:	7a5b      	ldrb	r3, [r3, #9]
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	4a17      	ldr	r2, [pc, #92]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	4413      	add	r3, r2
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e3aa:	4b15      	ldr	r3, [pc, #84]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e3ac:	7a5b      	ldrb	r3, [r3, #9]
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4b13      	ldr	r3, [pc, #76]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e3b4:	4413      	add	r3, r2
 800e3b6:	79fa      	ldrb	r2, [r7, #7]
 800e3b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e3ba:	4b11      	ldr	r3, [pc, #68]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e3bc:	7a5b      	ldrb	r3, [r3, #9]
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	1c5a      	adds	r2, r3, #1
 800e3c2:	b2d1      	uxtb	r1, r2
 800e3c4:	4a0e      	ldr	r2, [pc, #56]	; (800e400 <FATFS_LinkDriverEx+0x94>)
 800e3c6:	7251      	strb	r1, [r2, #9]
 800e3c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3ca:	7dbb      	ldrb	r3, [r7, #22]
 800e3cc:	3330      	adds	r3, #48	; 0x30
 800e3ce:	b2da      	uxtb	r2, r3
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	223a      	movs	r2, #58	; 0x3a
 800e3da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	3302      	adds	r3, #2
 800e3e0:	222f      	movs	r2, #47	; 0x2f
 800e3e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	3303      	adds	r3, #3
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	371c      	adds	r7, #28
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr
 800e3fe:	bf00      	nop
 800e400:	20000618 	.word	0x20000618

0800e404 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e40e:	2200      	movs	r2, #0
 800e410:	6839      	ldr	r1, [r7, #0]
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f7ff ffaa 	bl	800e36c <FATFS_LinkDriverEx>
 800e418:	4603      	mov	r3, r0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
	...

0800e424 <__errno>:
 800e424:	4b01      	ldr	r3, [pc, #4]	; (800e42c <__errno+0x8>)
 800e426:	6818      	ldr	r0, [r3, #0]
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	20000024 	.word	0x20000024

0800e430 <__libc_init_array>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	4d0d      	ldr	r5, [pc, #52]	; (800e468 <__libc_init_array+0x38>)
 800e434:	4c0d      	ldr	r4, [pc, #52]	; (800e46c <__libc_init_array+0x3c>)
 800e436:	1b64      	subs	r4, r4, r5
 800e438:	10a4      	asrs	r4, r4, #2
 800e43a:	2600      	movs	r6, #0
 800e43c:	42a6      	cmp	r6, r4
 800e43e:	d109      	bne.n	800e454 <__libc_init_array+0x24>
 800e440:	4d0b      	ldr	r5, [pc, #44]	; (800e470 <__libc_init_array+0x40>)
 800e442:	4c0c      	ldr	r4, [pc, #48]	; (800e474 <__libc_init_array+0x44>)
 800e444:	f003 fbbe 	bl	8011bc4 <_init>
 800e448:	1b64      	subs	r4, r4, r5
 800e44a:	10a4      	asrs	r4, r4, #2
 800e44c:	2600      	movs	r6, #0
 800e44e:	42a6      	cmp	r6, r4
 800e450:	d105      	bne.n	800e45e <__libc_init_array+0x2e>
 800e452:	bd70      	pop	{r4, r5, r6, pc}
 800e454:	f855 3b04 	ldr.w	r3, [r5], #4
 800e458:	4798      	blx	r3
 800e45a:	3601      	adds	r6, #1
 800e45c:	e7ee      	b.n	800e43c <__libc_init_array+0xc>
 800e45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e462:	4798      	blx	r3
 800e464:	3601      	adds	r6, #1
 800e466:	e7f2      	b.n	800e44e <__libc_init_array+0x1e>
 800e468:	08012344 	.word	0x08012344
 800e46c:	08012344 	.word	0x08012344
 800e470:	08012344 	.word	0x08012344
 800e474:	08012348 	.word	0x08012348

0800e478 <memset>:
 800e478:	4402      	add	r2, r0
 800e47a:	4603      	mov	r3, r0
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d100      	bne.n	800e482 <memset+0xa>
 800e480:	4770      	bx	lr
 800e482:	f803 1b01 	strb.w	r1, [r3], #1
 800e486:	e7f9      	b.n	800e47c <memset+0x4>

0800e488 <__cvt>:
 800e488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e48c:	ec55 4b10 	vmov	r4, r5, d0
 800e490:	2d00      	cmp	r5, #0
 800e492:	460e      	mov	r6, r1
 800e494:	4619      	mov	r1, r3
 800e496:	462b      	mov	r3, r5
 800e498:	bfbb      	ittet	lt
 800e49a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e49e:	461d      	movlt	r5, r3
 800e4a0:	2300      	movge	r3, #0
 800e4a2:	232d      	movlt	r3, #45	; 0x2d
 800e4a4:	700b      	strb	r3, [r1, #0]
 800e4a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e4ac:	4691      	mov	r9, r2
 800e4ae:	f023 0820 	bic.w	r8, r3, #32
 800e4b2:	bfbc      	itt	lt
 800e4b4:	4622      	movlt	r2, r4
 800e4b6:	4614      	movlt	r4, r2
 800e4b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4bc:	d005      	beq.n	800e4ca <__cvt+0x42>
 800e4be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e4c2:	d100      	bne.n	800e4c6 <__cvt+0x3e>
 800e4c4:	3601      	adds	r6, #1
 800e4c6:	2102      	movs	r1, #2
 800e4c8:	e000      	b.n	800e4cc <__cvt+0x44>
 800e4ca:	2103      	movs	r1, #3
 800e4cc:	ab03      	add	r3, sp, #12
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	ab02      	add	r3, sp, #8
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	ec45 4b10 	vmov	d0, r4, r5
 800e4d8:	4653      	mov	r3, sl
 800e4da:	4632      	mov	r2, r6
 800e4dc:	f000 fcec 	bl	800eeb8 <_dtoa_r>
 800e4e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	d102      	bne.n	800e4ee <__cvt+0x66>
 800e4e8:	f019 0f01 	tst.w	r9, #1
 800e4ec:	d022      	beq.n	800e534 <__cvt+0xac>
 800e4ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e4f2:	eb07 0906 	add.w	r9, r7, r6
 800e4f6:	d110      	bne.n	800e51a <__cvt+0x92>
 800e4f8:	783b      	ldrb	r3, [r7, #0]
 800e4fa:	2b30      	cmp	r3, #48	; 0x30
 800e4fc:	d10a      	bne.n	800e514 <__cvt+0x8c>
 800e4fe:	2200      	movs	r2, #0
 800e500:	2300      	movs	r3, #0
 800e502:	4620      	mov	r0, r4
 800e504:	4629      	mov	r1, r5
 800e506:	f7f2 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800e50a:	b918      	cbnz	r0, 800e514 <__cvt+0x8c>
 800e50c:	f1c6 0601 	rsb	r6, r6, #1
 800e510:	f8ca 6000 	str.w	r6, [sl]
 800e514:	f8da 3000 	ldr.w	r3, [sl]
 800e518:	4499      	add	r9, r3
 800e51a:	2200      	movs	r2, #0
 800e51c:	2300      	movs	r3, #0
 800e51e:	4620      	mov	r0, r4
 800e520:	4629      	mov	r1, r5
 800e522:	f7f2 fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e526:	b108      	cbz	r0, 800e52c <__cvt+0xa4>
 800e528:	f8cd 900c 	str.w	r9, [sp, #12]
 800e52c:	2230      	movs	r2, #48	; 0x30
 800e52e:	9b03      	ldr	r3, [sp, #12]
 800e530:	454b      	cmp	r3, r9
 800e532:	d307      	bcc.n	800e544 <__cvt+0xbc>
 800e534:	9b03      	ldr	r3, [sp, #12]
 800e536:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e538:	1bdb      	subs	r3, r3, r7
 800e53a:	4638      	mov	r0, r7
 800e53c:	6013      	str	r3, [r2, #0]
 800e53e:	b004      	add	sp, #16
 800e540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e544:	1c59      	adds	r1, r3, #1
 800e546:	9103      	str	r1, [sp, #12]
 800e548:	701a      	strb	r2, [r3, #0]
 800e54a:	e7f0      	b.n	800e52e <__cvt+0xa6>

0800e54c <__exponent>:
 800e54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e54e:	4603      	mov	r3, r0
 800e550:	2900      	cmp	r1, #0
 800e552:	bfb8      	it	lt
 800e554:	4249      	neglt	r1, r1
 800e556:	f803 2b02 	strb.w	r2, [r3], #2
 800e55a:	bfb4      	ite	lt
 800e55c:	222d      	movlt	r2, #45	; 0x2d
 800e55e:	222b      	movge	r2, #43	; 0x2b
 800e560:	2909      	cmp	r1, #9
 800e562:	7042      	strb	r2, [r0, #1]
 800e564:	dd2a      	ble.n	800e5bc <__exponent+0x70>
 800e566:	f10d 0407 	add.w	r4, sp, #7
 800e56a:	46a4      	mov	ip, r4
 800e56c:	270a      	movs	r7, #10
 800e56e:	46a6      	mov	lr, r4
 800e570:	460a      	mov	r2, r1
 800e572:	fb91 f6f7 	sdiv	r6, r1, r7
 800e576:	fb07 1516 	mls	r5, r7, r6, r1
 800e57a:	3530      	adds	r5, #48	; 0x30
 800e57c:	2a63      	cmp	r2, #99	; 0x63
 800e57e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e582:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e586:	4631      	mov	r1, r6
 800e588:	dcf1      	bgt.n	800e56e <__exponent+0x22>
 800e58a:	3130      	adds	r1, #48	; 0x30
 800e58c:	f1ae 0502 	sub.w	r5, lr, #2
 800e590:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e594:	1c44      	adds	r4, r0, #1
 800e596:	4629      	mov	r1, r5
 800e598:	4561      	cmp	r1, ip
 800e59a:	d30a      	bcc.n	800e5b2 <__exponent+0x66>
 800e59c:	f10d 0209 	add.w	r2, sp, #9
 800e5a0:	eba2 020e 	sub.w	r2, r2, lr
 800e5a4:	4565      	cmp	r5, ip
 800e5a6:	bf88      	it	hi
 800e5a8:	2200      	movhi	r2, #0
 800e5aa:	4413      	add	r3, r2
 800e5ac:	1a18      	subs	r0, r3, r0
 800e5ae:	b003      	add	sp, #12
 800e5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e5b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e5ba:	e7ed      	b.n	800e598 <__exponent+0x4c>
 800e5bc:	2330      	movs	r3, #48	; 0x30
 800e5be:	3130      	adds	r1, #48	; 0x30
 800e5c0:	7083      	strb	r3, [r0, #2]
 800e5c2:	70c1      	strb	r1, [r0, #3]
 800e5c4:	1d03      	adds	r3, r0, #4
 800e5c6:	e7f1      	b.n	800e5ac <__exponent+0x60>

0800e5c8 <_printf_float>:
 800e5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5cc:	ed2d 8b02 	vpush	{d8}
 800e5d0:	b08d      	sub	sp, #52	; 0x34
 800e5d2:	460c      	mov	r4, r1
 800e5d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e5d8:	4616      	mov	r6, r2
 800e5da:	461f      	mov	r7, r3
 800e5dc:	4605      	mov	r5, r0
 800e5de:	f001 fa59 	bl	800fa94 <_localeconv_r>
 800e5e2:	f8d0 a000 	ldr.w	sl, [r0]
 800e5e6:	4650      	mov	r0, sl
 800e5e8:	f7f1 fdfa 	bl	80001e0 <strlen>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800e5f0:	6823      	ldr	r3, [r4, #0]
 800e5f2:	9305      	str	r3, [sp, #20]
 800e5f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e5f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e5fc:	3307      	adds	r3, #7
 800e5fe:	f023 0307 	bic.w	r3, r3, #7
 800e602:	f103 0208 	add.w	r2, r3, #8
 800e606:	f8c8 2000 	str.w	r2, [r8]
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e612:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e61a:	9307      	str	r3, [sp, #28]
 800e61c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e620:	ee08 0a10 	vmov	s16, r0
 800e624:	4b9f      	ldr	r3, [pc, #636]	; (800e8a4 <_printf_float+0x2dc>)
 800e626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e62a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e62e:	f7f2 fa85 	bl	8000b3c <__aeabi_dcmpun>
 800e632:	bb88      	cbnz	r0, 800e698 <_printf_float+0xd0>
 800e634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e638:	4b9a      	ldr	r3, [pc, #616]	; (800e8a4 <_printf_float+0x2dc>)
 800e63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e63e:	f7f2 fa5f 	bl	8000b00 <__aeabi_dcmple>
 800e642:	bb48      	cbnz	r0, 800e698 <_printf_float+0xd0>
 800e644:	2200      	movs	r2, #0
 800e646:	2300      	movs	r3, #0
 800e648:	4640      	mov	r0, r8
 800e64a:	4649      	mov	r1, r9
 800e64c:	f7f2 fa4e 	bl	8000aec <__aeabi_dcmplt>
 800e650:	b110      	cbz	r0, 800e658 <_printf_float+0x90>
 800e652:	232d      	movs	r3, #45	; 0x2d
 800e654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e658:	4b93      	ldr	r3, [pc, #588]	; (800e8a8 <_printf_float+0x2e0>)
 800e65a:	4894      	ldr	r0, [pc, #592]	; (800e8ac <_printf_float+0x2e4>)
 800e65c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e660:	bf94      	ite	ls
 800e662:	4698      	movls	r8, r3
 800e664:	4680      	movhi	r8, r0
 800e666:	2303      	movs	r3, #3
 800e668:	6123      	str	r3, [r4, #16]
 800e66a:	9b05      	ldr	r3, [sp, #20]
 800e66c:	f023 0204 	bic.w	r2, r3, #4
 800e670:	6022      	str	r2, [r4, #0]
 800e672:	f04f 0900 	mov.w	r9, #0
 800e676:	9700      	str	r7, [sp, #0]
 800e678:	4633      	mov	r3, r6
 800e67a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e67c:	4621      	mov	r1, r4
 800e67e:	4628      	mov	r0, r5
 800e680:	f000 f9d8 	bl	800ea34 <_printf_common>
 800e684:	3001      	adds	r0, #1
 800e686:	f040 8090 	bne.w	800e7aa <_printf_float+0x1e2>
 800e68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e68e:	b00d      	add	sp, #52	; 0x34
 800e690:	ecbd 8b02 	vpop	{d8}
 800e694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e698:	4642      	mov	r2, r8
 800e69a:	464b      	mov	r3, r9
 800e69c:	4640      	mov	r0, r8
 800e69e:	4649      	mov	r1, r9
 800e6a0:	f7f2 fa4c 	bl	8000b3c <__aeabi_dcmpun>
 800e6a4:	b140      	cbz	r0, 800e6b8 <_printf_float+0xf0>
 800e6a6:	464b      	mov	r3, r9
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	bfbc      	itt	lt
 800e6ac:	232d      	movlt	r3, #45	; 0x2d
 800e6ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e6b2:	487f      	ldr	r0, [pc, #508]	; (800e8b0 <_printf_float+0x2e8>)
 800e6b4:	4b7f      	ldr	r3, [pc, #508]	; (800e8b4 <_printf_float+0x2ec>)
 800e6b6:	e7d1      	b.n	800e65c <_printf_float+0x94>
 800e6b8:	6863      	ldr	r3, [r4, #4]
 800e6ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e6be:	9206      	str	r2, [sp, #24]
 800e6c0:	1c5a      	adds	r2, r3, #1
 800e6c2:	d13f      	bne.n	800e744 <_printf_float+0x17c>
 800e6c4:	2306      	movs	r3, #6
 800e6c6:	6063      	str	r3, [r4, #4]
 800e6c8:	9b05      	ldr	r3, [sp, #20]
 800e6ca:	6861      	ldr	r1, [r4, #4]
 800e6cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	9303      	str	r3, [sp, #12]
 800e6d4:	ab0a      	add	r3, sp, #40	; 0x28
 800e6d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e6da:	ab09      	add	r3, sp, #36	; 0x24
 800e6dc:	ec49 8b10 	vmov	d0, r8, r9
 800e6e0:	9300      	str	r3, [sp, #0]
 800e6e2:	6022      	str	r2, [r4, #0]
 800e6e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e6e8:	4628      	mov	r0, r5
 800e6ea:	f7ff fecd 	bl	800e488 <__cvt>
 800e6ee:	9b06      	ldr	r3, [sp, #24]
 800e6f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6f2:	2b47      	cmp	r3, #71	; 0x47
 800e6f4:	4680      	mov	r8, r0
 800e6f6:	d108      	bne.n	800e70a <_printf_float+0x142>
 800e6f8:	1cc8      	adds	r0, r1, #3
 800e6fa:	db02      	blt.n	800e702 <_printf_float+0x13a>
 800e6fc:	6863      	ldr	r3, [r4, #4]
 800e6fe:	4299      	cmp	r1, r3
 800e700:	dd41      	ble.n	800e786 <_printf_float+0x1be>
 800e702:	f1ab 0b02 	sub.w	fp, fp, #2
 800e706:	fa5f fb8b 	uxtb.w	fp, fp
 800e70a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e70e:	d820      	bhi.n	800e752 <_printf_float+0x18a>
 800e710:	3901      	subs	r1, #1
 800e712:	465a      	mov	r2, fp
 800e714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e718:	9109      	str	r1, [sp, #36]	; 0x24
 800e71a:	f7ff ff17 	bl	800e54c <__exponent>
 800e71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e720:	1813      	adds	r3, r2, r0
 800e722:	2a01      	cmp	r2, #1
 800e724:	4681      	mov	r9, r0
 800e726:	6123      	str	r3, [r4, #16]
 800e728:	dc02      	bgt.n	800e730 <_printf_float+0x168>
 800e72a:	6822      	ldr	r2, [r4, #0]
 800e72c:	07d2      	lsls	r2, r2, #31
 800e72e:	d501      	bpl.n	800e734 <_printf_float+0x16c>
 800e730:	3301      	adds	r3, #1
 800e732:	6123      	str	r3, [r4, #16]
 800e734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d09c      	beq.n	800e676 <_printf_float+0xae>
 800e73c:	232d      	movs	r3, #45	; 0x2d
 800e73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e742:	e798      	b.n	800e676 <_printf_float+0xae>
 800e744:	9a06      	ldr	r2, [sp, #24]
 800e746:	2a47      	cmp	r2, #71	; 0x47
 800e748:	d1be      	bne.n	800e6c8 <_printf_float+0x100>
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1bc      	bne.n	800e6c8 <_printf_float+0x100>
 800e74e:	2301      	movs	r3, #1
 800e750:	e7b9      	b.n	800e6c6 <_printf_float+0xfe>
 800e752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e756:	d118      	bne.n	800e78a <_printf_float+0x1c2>
 800e758:	2900      	cmp	r1, #0
 800e75a:	6863      	ldr	r3, [r4, #4]
 800e75c:	dd0b      	ble.n	800e776 <_printf_float+0x1ae>
 800e75e:	6121      	str	r1, [r4, #16]
 800e760:	b913      	cbnz	r3, 800e768 <_printf_float+0x1a0>
 800e762:	6822      	ldr	r2, [r4, #0]
 800e764:	07d0      	lsls	r0, r2, #31
 800e766:	d502      	bpl.n	800e76e <_printf_float+0x1a6>
 800e768:	3301      	adds	r3, #1
 800e76a:	440b      	add	r3, r1
 800e76c:	6123      	str	r3, [r4, #16]
 800e76e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e770:	f04f 0900 	mov.w	r9, #0
 800e774:	e7de      	b.n	800e734 <_printf_float+0x16c>
 800e776:	b913      	cbnz	r3, 800e77e <_printf_float+0x1b6>
 800e778:	6822      	ldr	r2, [r4, #0]
 800e77a:	07d2      	lsls	r2, r2, #31
 800e77c:	d501      	bpl.n	800e782 <_printf_float+0x1ba>
 800e77e:	3302      	adds	r3, #2
 800e780:	e7f4      	b.n	800e76c <_printf_float+0x1a4>
 800e782:	2301      	movs	r3, #1
 800e784:	e7f2      	b.n	800e76c <_printf_float+0x1a4>
 800e786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e78c:	4299      	cmp	r1, r3
 800e78e:	db05      	blt.n	800e79c <_printf_float+0x1d4>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	6121      	str	r1, [r4, #16]
 800e794:	07d8      	lsls	r0, r3, #31
 800e796:	d5ea      	bpl.n	800e76e <_printf_float+0x1a6>
 800e798:	1c4b      	adds	r3, r1, #1
 800e79a:	e7e7      	b.n	800e76c <_printf_float+0x1a4>
 800e79c:	2900      	cmp	r1, #0
 800e79e:	bfd4      	ite	le
 800e7a0:	f1c1 0202 	rsble	r2, r1, #2
 800e7a4:	2201      	movgt	r2, #1
 800e7a6:	4413      	add	r3, r2
 800e7a8:	e7e0      	b.n	800e76c <_printf_float+0x1a4>
 800e7aa:	6823      	ldr	r3, [r4, #0]
 800e7ac:	055a      	lsls	r2, r3, #21
 800e7ae:	d407      	bmi.n	800e7c0 <_printf_float+0x1f8>
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	4642      	mov	r2, r8
 800e7b4:	4631      	mov	r1, r6
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	47b8      	blx	r7
 800e7ba:	3001      	adds	r0, #1
 800e7bc:	d12c      	bne.n	800e818 <_printf_float+0x250>
 800e7be:	e764      	b.n	800e68a <_printf_float+0xc2>
 800e7c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7c4:	f240 80e0 	bls.w	800e988 <_printf_float+0x3c0>
 800e7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	f7f2 f982 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d034      	beq.n	800e842 <_printf_float+0x27a>
 800e7d8:	4a37      	ldr	r2, [pc, #220]	; (800e8b8 <_printf_float+0x2f0>)
 800e7da:	2301      	movs	r3, #1
 800e7dc:	4631      	mov	r1, r6
 800e7de:	4628      	mov	r0, r5
 800e7e0:	47b8      	blx	r7
 800e7e2:	3001      	adds	r0, #1
 800e7e4:	f43f af51 	beq.w	800e68a <_printf_float+0xc2>
 800e7e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	db02      	blt.n	800e7f6 <_printf_float+0x22e>
 800e7f0:	6823      	ldr	r3, [r4, #0]
 800e7f2:	07d8      	lsls	r0, r3, #31
 800e7f4:	d510      	bpl.n	800e818 <_printf_float+0x250>
 800e7f6:	ee18 3a10 	vmov	r3, s16
 800e7fa:	4652      	mov	r2, sl
 800e7fc:	4631      	mov	r1, r6
 800e7fe:	4628      	mov	r0, r5
 800e800:	47b8      	blx	r7
 800e802:	3001      	adds	r0, #1
 800e804:	f43f af41 	beq.w	800e68a <_printf_float+0xc2>
 800e808:	f04f 0800 	mov.w	r8, #0
 800e80c:	f104 091a 	add.w	r9, r4, #26
 800e810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e812:	3b01      	subs	r3, #1
 800e814:	4543      	cmp	r3, r8
 800e816:	dc09      	bgt.n	800e82c <_printf_float+0x264>
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	079b      	lsls	r3, r3, #30
 800e81c:	f100 8105 	bmi.w	800ea2a <_printf_float+0x462>
 800e820:	68e0      	ldr	r0, [r4, #12]
 800e822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e824:	4298      	cmp	r0, r3
 800e826:	bfb8      	it	lt
 800e828:	4618      	movlt	r0, r3
 800e82a:	e730      	b.n	800e68e <_printf_float+0xc6>
 800e82c:	2301      	movs	r3, #1
 800e82e:	464a      	mov	r2, r9
 800e830:	4631      	mov	r1, r6
 800e832:	4628      	mov	r0, r5
 800e834:	47b8      	blx	r7
 800e836:	3001      	adds	r0, #1
 800e838:	f43f af27 	beq.w	800e68a <_printf_float+0xc2>
 800e83c:	f108 0801 	add.w	r8, r8, #1
 800e840:	e7e6      	b.n	800e810 <_printf_float+0x248>
 800e842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e844:	2b00      	cmp	r3, #0
 800e846:	dc39      	bgt.n	800e8bc <_printf_float+0x2f4>
 800e848:	4a1b      	ldr	r2, [pc, #108]	; (800e8b8 <_printf_float+0x2f0>)
 800e84a:	2301      	movs	r3, #1
 800e84c:	4631      	mov	r1, r6
 800e84e:	4628      	mov	r0, r5
 800e850:	47b8      	blx	r7
 800e852:	3001      	adds	r0, #1
 800e854:	f43f af19 	beq.w	800e68a <_printf_float+0xc2>
 800e858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e85c:	4313      	orrs	r3, r2
 800e85e:	d102      	bne.n	800e866 <_printf_float+0x29e>
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	07d9      	lsls	r1, r3, #31
 800e864:	d5d8      	bpl.n	800e818 <_printf_float+0x250>
 800e866:	ee18 3a10 	vmov	r3, s16
 800e86a:	4652      	mov	r2, sl
 800e86c:	4631      	mov	r1, r6
 800e86e:	4628      	mov	r0, r5
 800e870:	47b8      	blx	r7
 800e872:	3001      	adds	r0, #1
 800e874:	f43f af09 	beq.w	800e68a <_printf_float+0xc2>
 800e878:	f04f 0900 	mov.w	r9, #0
 800e87c:	f104 0a1a 	add.w	sl, r4, #26
 800e880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e882:	425b      	negs	r3, r3
 800e884:	454b      	cmp	r3, r9
 800e886:	dc01      	bgt.n	800e88c <_printf_float+0x2c4>
 800e888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e88a:	e792      	b.n	800e7b2 <_printf_float+0x1ea>
 800e88c:	2301      	movs	r3, #1
 800e88e:	4652      	mov	r2, sl
 800e890:	4631      	mov	r1, r6
 800e892:	4628      	mov	r0, r5
 800e894:	47b8      	blx	r7
 800e896:	3001      	adds	r0, #1
 800e898:	f43f aef7 	beq.w	800e68a <_printf_float+0xc2>
 800e89c:	f109 0901 	add.w	r9, r9, #1
 800e8a0:	e7ee      	b.n	800e880 <_printf_float+0x2b8>
 800e8a2:	bf00      	nop
 800e8a4:	7fefffff 	.word	0x7fefffff
 800e8a8:	08011f30 	.word	0x08011f30
 800e8ac:	08011f34 	.word	0x08011f34
 800e8b0:	08011f3c 	.word	0x08011f3c
 800e8b4:	08011f38 	.word	0x08011f38
 800e8b8:	08011f40 	.word	0x08011f40
 800e8bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	bfa8      	it	ge
 800e8c4:	461a      	movge	r2, r3
 800e8c6:	2a00      	cmp	r2, #0
 800e8c8:	4691      	mov	r9, r2
 800e8ca:	dc37      	bgt.n	800e93c <_printf_float+0x374>
 800e8cc:	f04f 0b00 	mov.w	fp, #0
 800e8d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e8d4:	f104 021a 	add.w	r2, r4, #26
 800e8d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e8da:	9305      	str	r3, [sp, #20]
 800e8dc:	eba3 0309 	sub.w	r3, r3, r9
 800e8e0:	455b      	cmp	r3, fp
 800e8e2:	dc33      	bgt.n	800e94c <_printf_float+0x384>
 800e8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	db3b      	blt.n	800e964 <_printf_float+0x39c>
 800e8ec:	6823      	ldr	r3, [r4, #0]
 800e8ee:	07da      	lsls	r2, r3, #31
 800e8f0:	d438      	bmi.n	800e964 <_printf_float+0x39c>
 800e8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8f4:	9a05      	ldr	r2, [sp, #20]
 800e8f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e8f8:	1a9a      	subs	r2, r3, r2
 800e8fa:	eba3 0901 	sub.w	r9, r3, r1
 800e8fe:	4591      	cmp	r9, r2
 800e900:	bfa8      	it	ge
 800e902:	4691      	movge	r9, r2
 800e904:	f1b9 0f00 	cmp.w	r9, #0
 800e908:	dc35      	bgt.n	800e976 <_printf_float+0x3ae>
 800e90a:	f04f 0800 	mov.w	r8, #0
 800e90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e912:	f104 0a1a 	add.w	sl, r4, #26
 800e916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e91a:	1a9b      	subs	r3, r3, r2
 800e91c:	eba3 0309 	sub.w	r3, r3, r9
 800e920:	4543      	cmp	r3, r8
 800e922:	f77f af79 	ble.w	800e818 <_printf_float+0x250>
 800e926:	2301      	movs	r3, #1
 800e928:	4652      	mov	r2, sl
 800e92a:	4631      	mov	r1, r6
 800e92c:	4628      	mov	r0, r5
 800e92e:	47b8      	blx	r7
 800e930:	3001      	adds	r0, #1
 800e932:	f43f aeaa 	beq.w	800e68a <_printf_float+0xc2>
 800e936:	f108 0801 	add.w	r8, r8, #1
 800e93a:	e7ec      	b.n	800e916 <_printf_float+0x34e>
 800e93c:	4613      	mov	r3, r2
 800e93e:	4631      	mov	r1, r6
 800e940:	4642      	mov	r2, r8
 800e942:	4628      	mov	r0, r5
 800e944:	47b8      	blx	r7
 800e946:	3001      	adds	r0, #1
 800e948:	d1c0      	bne.n	800e8cc <_printf_float+0x304>
 800e94a:	e69e      	b.n	800e68a <_printf_float+0xc2>
 800e94c:	2301      	movs	r3, #1
 800e94e:	4631      	mov	r1, r6
 800e950:	4628      	mov	r0, r5
 800e952:	9205      	str	r2, [sp, #20]
 800e954:	47b8      	blx	r7
 800e956:	3001      	adds	r0, #1
 800e958:	f43f ae97 	beq.w	800e68a <_printf_float+0xc2>
 800e95c:	9a05      	ldr	r2, [sp, #20]
 800e95e:	f10b 0b01 	add.w	fp, fp, #1
 800e962:	e7b9      	b.n	800e8d8 <_printf_float+0x310>
 800e964:	ee18 3a10 	vmov	r3, s16
 800e968:	4652      	mov	r2, sl
 800e96a:	4631      	mov	r1, r6
 800e96c:	4628      	mov	r0, r5
 800e96e:	47b8      	blx	r7
 800e970:	3001      	adds	r0, #1
 800e972:	d1be      	bne.n	800e8f2 <_printf_float+0x32a>
 800e974:	e689      	b.n	800e68a <_printf_float+0xc2>
 800e976:	9a05      	ldr	r2, [sp, #20]
 800e978:	464b      	mov	r3, r9
 800e97a:	4442      	add	r2, r8
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	d1c1      	bne.n	800e90a <_printf_float+0x342>
 800e986:	e680      	b.n	800e68a <_printf_float+0xc2>
 800e988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e98a:	2a01      	cmp	r2, #1
 800e98c:	dc01      	bgt.n	800e992 <_printf_float+0x3ca>
 800e98e:	07db      	lsls	r3, r3, #31
 800e990:	d538      	bpl.n	800ea04 <_printf_float+0x43c>
 800e992:	2301      	movs	r3, #1
 800e994:	4642      	mov	r2, r8
 800e996:	4631      	mov	r1, r6
 800e998:	4628      	mov	r0, r5
 800e99a:	47b8      	blx	r7
 800e99c:	3001      	adds	r0, #1
 800e99e:	f43f ae74 	beq.w	800e68a <_printf_float+0xc2>
 800e9a2:	ee18 3a10 	vmov	r3, s16
 800e9a6:	4652      	mov	r2, sl
 800e9a8:	4631      	mov	r1, r6
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	47b8      	blx	r7
 800e9ae:	3001      	adds	r0, #1
 800e9b0:	f43f ae6b 	beq.w	800e68a <_printf_float+0xc2>
 800e9b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	f7f2 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e9c0:	b9d8      	cbnz	r0, 800e9fa <_printf_float+0x432>
 800e9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9c4:	f108 0201 	add.w	r2, r8, #1
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	47b8      	blx	r7
 800e9d0:	3001      	adds	r0, #1
 800e9d2:	d10e      	bne.n	800e9f2 <_printf_float+0x42a>
 800e9d4:	e659      	b.n	800e68a <_printf_float+0xc2>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	4652      	mov	r2, sl
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4628      	mov	r0, r5
 800e9de:	47b8      	blx	r7
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	f43f ae52 	beq.w	800e68a <_printf_float+0xc2>
 800e9e6:	f108 0801 	add.w	r8, r8, #1
 800e9ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	4543      	cmp	r3, r8
 800e9f0:	dcf1      	bgt.n	800e9d6 <_printf_float+0x40e>
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e9f8:	e6dc      	b.n	800e7b4 <_printf_float+0x1ec>
 800e9fa:	f04f 0800 	mov.w	r8, #0
 800e9fe:	f104 0a1a 	add.w	sl, r4, #26
 800ea02:	e7f2      	b.n	800e9ea <_printf_float+0x422>
 800ea04:	2301      	movs	r3, #1
 800ea06:	4642      	mov	r2, r8
 800ea08:	e7df      	b.n	800e9ca <_printf_float+0x402>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	464a      	mov	r2, r9
 800ea0e:	4631      	mov	r1, r6
 800ea10:	4628      	mov	r0, r5
 800ea12:	47b8      	blx	r7
 800ea14:	3001      	adds	r0, #1
 800ea16:	f43f ae38 	beq.w	800e68a <_printf_float+0xc2>
 800ea1a:	f108 0801 	add.w	r8, r8, #1
 800ea1e:	68e3      	ldr	r3, [r4, #12]
 800ea20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ea22:	1a5b      	subs	r3, r3, r1
 800ea24:	4543      	cmp	r3, r8
 800ea26:	dcf0      	bgt.n	800ea0a <_printf_float+0x442>
 800ea28:	e6fa      	b.n	800e820 <_printf_float+0x258>
 800ea2a:	f04f 0800 	mov.w	r8, #0
 800ea2e:	f104 0919 	add.w	r9, r4, #25
 800ea32:	e7f4      	b.n	800ea1e <_printf_float+0x456>

0800ea34 <_printf_common>:
 800ea34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea38:	4616      	mov	r6, r2
 800ea3a:	4699      	mov	r9, r3
 800ea3c:	688a      	ldr	r2, [r1, #8]
 800ea3e:	690b      	ldr	r3, [r1, #16]
 800ea40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea44:	4293      	cmp	r3, r2
 800ea46:	bfb8      	it	lt
 800ea48:	4613      	movlt	r3, r2
 800ea4a:	6033      	str	r3, [r6, #0]
 800ea4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea50:	4607      	mov	r7, r0
 800ea52:	460c      	mov	r4, r1
 800ea54:	b10a      	cbz	r2, 800ea5a <_printf_common+0x26>
 800ea56:	3301      	adds	r3, #1
 800ea58:	6033      	str	r3, [r6, #0]
 800ea5a:	6823      	ldr	r3, [r4, #0]
 800ea5c:	0699      	lsls	r1, r3, #26
 800ea5e:	bf42      	ittt	mi
 800ea60:	6833      	ldrmi	r3, [r6, #0]
 800ea62:	3302      	addmi	r3, #2
 800ea64:	6033      	strmi	r3, [r6, #0]
 800ea66:	6825      	ldr	r5, [r4, #0]
 800ea68:	f015 0506 	ands.w	r5, r5, #6
 800ea6c:	d106      	bne.n	800ea7c <_printf_common+0x48>
 800ea6e:	f104 0a19 	add.w	sl, r4, #25
 800ea72:	68e3      	ldr	r3, [r4, #12]
 800ea74:	6832      	ldr	r2, [r6, #0]
 800ea76:	1a9b      	subs	r3, r3, r2
 800ea78:	42ab      	cmp	r3, r5
 800ea7a:	dc26      	bgt.n	800eaca <_printf_common+0x96>
 800ea7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea80:	1e13      	subs	r3, r2, #0
 800ea82:	6822      	ldr	r2, [r4, #0]
 800ea84:	bf18      	it	ne
 800ea86:	2301      	movne	r3, #1
 800ea88:	0692      	lsls	r2, r2, #26
 800ea8a:	d42b      	bmi.n	800eae4 <_printf_common+0xb0>
 800ea8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea90:	4649      	mov	r1, r9
 800ea92:	4638      	mov	r0, r7
 800ea94:	47c0      	blx	r8
 800ea96:	3001      	adds	r0, #1
 800ea98:	d01e      	beq.n	800ead8 <_printf_common+0xa4>
 800ea9a:	6823      	ldr	r3, [r4, #0]
 800ea9c:	68e5      	ldr	r5, [r4, #12]
 800ea9e:	6832      	ldr	r2, [r6, #0]
 800eaa0:	f003 0306 	and.w	r3, r3, #6
 800eaa4:	2b04      	cmp	r3, #4
 800eaa6:	bf08      	it	eq
 800eaa8:	1aad      	subeq	r5, r5, r2
 800eaaa:	68a3      	ldr	r3, [r4, #8]
 800eaac:	6922      	ldr	r2, [r4, #16]
 800eaae:	bf0c      	ite	eq
 800eab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eab4:	2500      	movne	r5, #0
 800eab6:	4293      	cmp	r3, r2
 800eab8:	bfc4      	itt	gt
 800eaba:	1a9b      	subgt	r3, r3, r2
 800eabc:	18ed      	addgt	r5, r5, r3
 800eabe:	2600      	movs	r6, #0
 800eac0:	341a      	adds	r4, #26
 800eac2:	42b5      	cmp	r5, r6
 800eac4:	d11a      	bne.n	800eafc <_printf_common+0xc8>
 800eac6:	2000      	movs	r0, #0
 800eac8:	e008      	b.n	800eadc <_printf_common+0xa8>
 800eaca:	2301      	movs	r3, #1
 800eacc:	4652      	mov	r2, sl
 800eace:	4649      	mov	r1, r9
 800ead0:	4638      	mov	r0, r7
 800ead2:	47c0      	blx	r8
 800ead4:	3001      	adds	r0, #1
 800ead6:	d103      	bne.n	800eae0 <_printf_common+0xac>
 800ead8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae0:	3501      	adds	r5, #1
 800eae2:	e7c6      	b.n	800ea72 <_printf_common+0x3e>
 800eae4:	18e1      	adds	r1, r4, r3
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	2030      	movs	r0, #48	; 0x30
 800eaea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eaee:	4422      	add	r2, r4
 800eaf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eaf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eaf8:	3302      	adds	r3, #2
 800eafa:	e7c7      	b.n	800ea8c <_printf_common+0x58>
 800eafc:	2301      	movs	r3, #1
 800eafe:	4622      	mov	r2, r4
 800eb00:	4649      	mov	r1, r9
 800eb02:	4638      	mov	r0, r7
 800eb04:	47c0      	blx	r8
 800eb06:	3001      	adds	r0, #1
 800eb08:	d0e6      	beq.n	800ead8 <_printf_common+0xa4>
 800eb0a:	3601      	adds	r6, #1
 800eb0c:	e7d9      	b.n	800eac2 <_printf_common+0x8e>
	...

0800eb10 <_printf_i>:
 800eb10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb14:	7e0f      	ldrb	r7, [r1, #24]
 800eb16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eb18:	2f78      	cmp	r7, #120	; 0x78
 800eb1a:	4691      	mov	r9, r2
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	460c      	mov	r4, r1
 800eb20:	469a      	mov	sl, r3
 800eb22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eb26:	d807      	bhi.n	800eb38 <_printf_i+0x28>
 800eb28:	2f62      	cmp	r7, #98	; 0x62
 800eb2a:	d80a      	bhi.n	800eb42 <_printf_i+0x32>
 800eb2c:	2f00      	cmp	r7, #0
 800eb2e:	f000 80d8 	beq.w	800ece2 <_printf_i+0x1d2>
 800eb32:	2f58      	cmp	r7, #88	; 0x58
 800eb34:	f000 80a3 	beq.w	800ec7e <_printf_i+0x16e>
 800eb38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eb40:	e03a      	b.n	800ebb8 <_printf_i+0xa8>
 800eb42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb46:	2b15      	cmp	r3, #21
 800eb48:	d8f6      	bhi.n	800eb38 <_printf_i+0x28>
 800eb4a:	a101      	add	r1, pc, #4	; (adr r1, 800eb50 <_printf_i+0x40>)
 800eb4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb50:	0800eba9 	.word	0x0800eba9
 800eb54:	0800ebbd 	.word	0x0800ebbd
 800eb58:	0800eb39 	.word	0x0800eb39
 800eb5c:	0800eb39 	.word	0x0800eb39
 800eb60:	0800eb39 	.word	0x0800eb39
 800eb64:	0800eb39 	.word	0x0800eb39
 800eb68:	0800ebbd 	.word	0x0800ebbd
 800eb6c:	0800eb39 	.word	0x0800eb39
 800eb70:	0800eb39 	.word	0x0800eb39
 800eb74:	0800eb39 	.word	0x0800eb39
 800eb78:	0800eb39 	.word	0x0800eb39
 800eb7c:	0800ecc9 	.word	0x0800ecc9
 800eb80:	0800ebed 	.word	0x0800ebed
 800eb84:	0800ecab 	.word	0x0800ecab
 800eb88:	0800eb39 	.word	0x0800eb39
 800eb8c:	0800eb39 	.word	0x0800eb39
 800eb90:	0800eceb 	.word	0x0800eceb
 800eb94:	0800eb39 	.word	0x0800eb39
 800eb98:	0800ebed 	.word	0x0800ebed
 800eb9c:	0800eb39 	.word	0x0800eb39
 800eba0:	0800eb39 	.word	0x0800eb39
 800eba4:	0800ecb3 	.word	0x0800ecb3
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	1d1a      	adds	r2, r3, #4
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	602a      	str	r2, [r5, #0]
 800ebb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e0a3      	b.n	800ed04 <_printf_i+0x1f4>
 800ebbc:	6820      	ldr	r0, [r4, #0]
 800ebbe:	6829      	ldr	r1, [r5, #0]
 800ebc0:	0606      	lsls	r6, r0, #24
 800ebc2:	f101 0304 	add.w	r3, r1, #4
 800ebc6:	d50a      	bpl.n	800ebde <_printf_i+0xce>
 800ebc8:	680e      	ldr	r6, [r1, #0]
 800ebca:	602b      	str	r3, [r5, #0]
 800ebcc:	2e00      	cmp	r6, #0
 800ebce:	da03      	bge.n	800ebd8 <_printf_i+0xc8>
 800ebd0:	232d      	movs	r3, #45	; 0x2d
 800ebd2:	4276      	negs	r6, r6
 800ebd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebd8:	485e      	ldr	r0, [pc, #376]	; (800ed54 <_printf_i+0x244>)
 800ebda:	230a      	movs	r3, #10
 800ebdc:	e019      	b.n	800ec12 <_printf_i+0x102>
 800ebde:	680e      	ldr	r6, [r1, #0]
 800ebe0:	602b      	str	r3, [r5, #0]
 800ebe2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ebe6:	bf18      	it	ne
 800ebe8:	b236      	sxthne	r6, r6
 800ebea:	e7ef      	b.n	800ebcc <_printf_i+0xbc>
 800ebec:	682b      	ldr	r3, [r5, #0]
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	1d19      	adds	r1, r3, #4
 800ebf2:	6029      	str	r1, [r5, #0]
 800ebf4:	0601      	lsls	r1, r0, #24
 800ebf6:	d501      	bpl.n	800ebfc <_printf_i+0xec>
 800ebf8:	681e      	ldr	r6, [r3, #0]
 800ebfa:	e002      	b.n	800ec02 <_printf_i+0xf2>
 800ebfc:	0646      	lsls	r6, r0, #25
 800ebfe:	d5fb      	bpl.n	800ebf8 <_printf_i+0xe8>
 800ec00:	881e      	ldrh	r6, [r3, #0]
 800ec02:	4854      	ldr	r0, [pc, #336]	; (800ed54 <_printf_i+0x244>)
 800ec04:	2f6f      	cmp	r7, #111	; 0x6f
 800ec06:	bf0c      	ite	eq
 800ec08:	2308      	moveq	r3, #8
 800ec0a:	230a      	movne	r3, #10
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ec12:	6865      	ldr	r5, [r4, #4]
 800ec14:	60a5      	str	r5, [r4, #8]
 800ec16:	2d00      	cmp	r5, #0
 800ec18:	bfa2      	ittt	ge
 800ec1a:	6821      	ldrge	r1, [r4, #0]
 800ec1c:	f021 0104 	bicge.w	r1, r1, #4
 800ec20:	6021      	strge	r1, [r4, #0]
 800ec22:	b90e      	cbnz	r6, 800ec28 <_printf_i+0x118>
 800ec24:	2d00      	cmp	r5, #0
 800ec26:	d04d      	beq.n	800ecc4 <_printf_i+0x1b4>
 800ec28:	4615      	mov	r5, r2
 800ec2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ec2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ec32:	5dc7      	ldrb	r7, [r0, r7]
 800ec34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ec38:	4637      	mov	r7, r6
 800ec3a:	42bb      	cmp	r3, r7
 800ec3c:	460e      	mov	r6, r1
 800ec3e:	d9f4      	bls.n	800ec2a <_printf_i+0x11a>
 800ec40:	2b08      	cmp	r3, #8
 800ec42:	d10b      	bne.n	800ec5c <_printf_i+0x14c>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	07de      	lsls	r6, r3, #31
 800ec48:	d508      	bpl.n	800ec5c <_printf_i+0x14c>
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	6861      	ldr	r1, [r4, #4]
 800ec4e:	4299      	cmp	r1, r3
 800ec50:	bfde      	ittt	le
 800ec52:	2330      	movle	r3, #48	; 0x30
 800ec54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ec5c:	1b52      	subs	r2, r2, r5
 800ec5e:	6122      	str	r2, [r4, #16]
 800ec60:	f8cd a000 	str.w	sl, [sp]
 800ec64:	464b      	mov	r3, r9
 800ec66:	aa03      	add	r2, sp, #12
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	f7ff fee2 	bl	800ea34 <_printf_common>
 800ec70:	3001      	adds	r0, #1
 800ec72:	d14c      	bne.n	800ed0e <_printf_i+0x1fe>
 800ec74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec78:	b004      	add	sp, #16
 800ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7e:	4835      	ldr	r0, [pc, #212]	; (800ed54 <_printf_i+0x244>)
 800ec80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ec84:	6829      	ldr	r1, [r5, #0]
 800ec86:	6823      	ldr	r3, [r4, #0]
 800ec88:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec8c:	6029      	str	r1, [r5, #0]
 800ec8e:	061d      	lsls	r5, r3, #24
 800ec90:	d514      	bpl.n	800ecbc <_printf_i+0x1ac>
 800ec92:	07df      	lsls	r7, r3, #31
 800ec94:	bf44      	itt	mi
 800ec96:	f043 0320 	orrmi.w	r3, r3, #32
 800ec9a:	6023      	strmi	r3, [r4, #0]
 800ec9c:	b91e      	cbnz	r6, 800eca6 <_printf_i+0x196>
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	f023 0320 	bic.w	r3, r3, #32
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	2310      	movs	r3, #16
 800eca8:	e7b0      	b.n	800ec0c <_printf_i+0xfc>
 800ecaa:	6823      	ldr	r3, [r4, #0]
 800ecac:	f043 0320 	orr.w	r3, r3, #32
 800ecb0:	6023      	str	r3, [r4, #0]
 800ecb2:	2378      	movs	r3, #120	; 0x78
 800ecb4:	4828      	ldr	r0, [pc, #160]	; (800ed58 <_printf_i+0x248>)
 800ecb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecba:	e7e3      	b.n	800ec84 <_printf_i+0x174>
 800ecbc:	0659      	lsls	r1, r3, #25
 800ecbe:	bf48      	it	mi
 800ecc0:	b2b6      	uxthmi	r6, r6
 800ecc2:	e7e6      	b.n	800ec92 <_printf_i+0x182>
 800ecc4:	4615      	mov	r5, r2
 800ecc6:	e7bb      	b.n	800ec40 <_printf_i+0x130>
 800ecc8:	682b      	ldr	r3, [r5, #0]
 800ecca:	6826      	ldr	r6, [r4, #0]
 800eccc:	6961      	ldr	r1, [r4, #20]
 800ecce:	1d18      	adds	r0, r3, #4
 800ecd0:	6028      	str	r0, [r5, #0]
 800ecd2:	0635      	lsls	r5, r6, #24
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	d501      	bpl.n	800ecdc <_printf_i+0x1cc>
 800ecd8:	6019      	str	r1, [r3, #0]
 800ecda:	e002      	b.n	800ece2 <_printf_i+0x1d2>
 800ecdc:	0670      	lsls	r0, r6, #25
 800ecde:	d5fb      	bpl.n	800ecd8 <_printf_i+0x1c8>
 800ece0:	8019      	strh	r1, [r3, #0]
 800ece2:	2300      	movs	r3, #0
 800ece4:	6123      	str	r3, [r4, #16]
 800ece6:	4615      	mov	r5, r2
 800ece8:	e7ba      	b.n	800ec60 <_printf_i+0x150>
 800ecea:	682b      	ldr	r3, [r5, #0]
 800ecec:	1d1a      	adds	r2, r3, #4
 800ecee:	602a      	str	r2, [r5, #0]
 800ecf0:	681d      	ldr	r5, [r3, #0]
 800ecf2:	6862      	ldr	r2, [r4, #4]
 800ecf4:	2100      	movs	r1, #0
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f7f1 fa7a 	bl	80001f0 <memchr>
 800ecfc:	b108      	cbz	r0, 800ed02 <_printf_i+0x1f2>
 800ecfe:	1b40      	subs	r0, r0, r5
 800ed00:	6060      	str	r0, [r4, #4]
 800ed02:	6863      	ldr	r3, [r4, #4]
 800ed04:	6123      	str	r3, [r4, #16]
 800ed06:	2300      	movs	r3, #0
 800ed08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed0c:	e7a8      	b.n	800ec60 <_printf_i+0x150>
 800ed0e:	6923      	ldr	r3, [r4, #16]
 800ed10:	462a      	mov	r2, r5
 800ed12:	4649      	mov	r1, r9
 800ed14:	4640      	mov	r0, r8
 800ed16:	47d0      	blx	sl
 800ed18:	3001      	adds	r0, #1
 800ed1a:	d0ab      	beq.n	800ec74 <_printf_i+0x164>
 800ed1c:	6823      	ldr	r3, [r4, #0]
 800ed1e:	079b      	lsls	r3, r3, #30
 800ed20:	d413      	bmi.n	800ed4a <_printf_i+0x23a>
 800ed22:	68e0      	ldr	r0, [r4, #12]
 800ed24:	9b03      	ldr	r3, [sp, #12]
 800ed26:	4298      	cmp	r0, r3
 800ed28:	bfb8      	it	lt
 800ed2a:	4618      	movlt	r0, r3
 800ed2c:	e7a4      	b.n	800ec78 <_printf_i+0x168>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	4632      	mov	r2, r6
 800ed32:	4649      	mov	r1, r9
 800ed34:	4640      	mov	r0, r8
 800ed36:	47d0      	blx	sl
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d09b      	beq.n	800ec74 <_printf_i+0x164>
 800ed3c:	3501      	adds	r5, #1
 800ed3e:	68e3      	ldr	r3, [r4, #12]
 800ed40:	9903      	ldr	r1, [sp, #12]
 800ed42:	1a5b      	subs	r3, r3, r1
 800ed44:	42ab      	cmp	r3, r5
 800ed46:	dcf2      	bgt.n	800ed2e <_printf_i+0x21e>
 800ed48:	e7eb      	b.n	800ed22 <_printf_i+0x212>
 800ed4a:	2500      	movs	r5, #0
 800ed4c:	f104 0619 	add.w	r6, r4, #25
 800ed50:	e7f5      	b.n	800ed3e <_printf_i+0x22e>
 800ed52:	bf00      	nop
 800ed54:	08011f42 	.word	0x08011f42
 800ed58:	08011f53 	.word	0x08011f53

0800ed5c <siprintf>:
 800ed5c:	b40e      	push	{r1, r2, r3}
 800ed5e:	b500      	push	{lr}
 800ed60:	b09c      	sub	sp, #112	; 0x70
 800ed62:	ab1d      	add	r3, sp, #116	; 0x74
 800ed64:	9002      	str	r0, [sp, #8]
 800ed66:	9006      	str	r0, [sp, #24]
 800ed68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed6c:	4809      	ldr	r0, [pc, #36]	; (800ed94 <siprintf+0x38>)
 800ed6e:	9107      	str	r1, [sp, #28]
 800ed70:	9104      	str	r1, [sp, #16]
 800ed72:	4909      	ldr	r1, [pc, #36]	; (800ed98 <siprintf+0x3c>)
 800ed74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed78:	9105      	str	r1, [sp, #20]
 800ed7a:	6800      	ldr	r0, [r0, #0]
 800ed7c:	9301      	str	r3, [sp, #4]
 800ed7e:	a902      	add	r1, sp, #8
 800ed80:	f001 fb78 	bl	8010474 <_svfiprintf_r>
 800ed84:	9b02      	ldr	r3, [sp, #8]
 800ed86:	2200      	movs	r2, #0
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	b01c      	add	sp, #112	; 0x70
 800ed8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed90:	b003      	add	sp, #12
 800ed92:	4770      	bx	lr
 800ed94:	20000024 	.word	0x20000024
 800ed98:	ffff0208 	.word	0xffff0208

0800ed9c <quorem>:
 800ed9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eda0:	6903      	ldr	r3, [r0, #16]
 800eda2:	690c      	ldr	r4, [r1, #16]
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	4607      	mov	r7, r0
 800eda8:	f2c0 8081 	blt.w	800eeae <quorem+0x112>
 800edac:	3c01      	subs	r4, #1
 800edae:	f101 0814 	add.w	r8, r1, #20
 800edb2:	f100 0514 	add.w	r5, r0, #20
 800edb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800edba:	9301      	str	r3, [sp, #4]
 800edbc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800edc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800edc4:	3301      	adds	r3, #1
 800edc6:	429a      	cmp	r2, r3
 800edc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800edcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800edd0:	fbb2 f6f3 	udiv	r6, r2, r3
 800edd4:	d331      	bcc.n	800ee3a <quorem+0x9e>
 800edd6:	f04f 0e00 	mov.w	lr, #0
 800edda:	4640      	mov	r0, r8
 800eddc:	46ac      	mov	ip, r5
 800edde:	46f2      	mov	sl, lr
 800ede0:	f850 2b04 	ldr.w	r2, [r0], #4
 800ede4:	b293      	uxth	r3, r2
 800ede6:	fb06 e303 	mla	r3, r6, r3, lr
 800edea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800edee:	b29b      	uxth	r3, r3
 800edf0:	ebaa 0303 	sub.w	r3, sl, r3
 800edf4:	f8dc a000 	ldr.w	sl, [ip]
 800edf8:	0c12      	lsrs	r2, r2, #16
 800edfa:	fa13 f38a 	uxtah	r3, r3, sl
 800edfe:	fb06 e202 	mla	r2, r6, r2, lr
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	9b00      	ldr	r3, [sp, #0]
 800ee06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee0a:	b292      	uxth	r2, r2
 800ee0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ee10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee14:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee18:	4581      	cmp	r9, r0
 800ee1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee1e:	f84c 3b04 	str.w	r3, [ip], #4
 800ee22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ee26:	d2db      	bcs.n	800ede0 <quorem+0x44>
 800ee28:	f855 300b 	ldr.w	r3, [r5, fp]
 800ee2c:	b92b      	cbnz	r3, 800ee3a <quorem+0x9e>
 800ee2e:	9b01      	ldr	r3, [sp, #4]
 800ee30:	3b04      	subs	r3, #4
 800ee32:	429d      	cmp	r5, r3
 800ee34:	461a      	mov	r2, r3
 800ee36:	d32e      	bcc.n	800ee96 <quorem+0xfa>
 800ee38:	613c      	str	r4, [r7, #16]
 800ee3a:	4638      	mov	r0, r7
 800ee3c:	f001 f8c6 	bl	800ffcc <__mcmp>
 800ee40:	2800      	cmp	r0, #0
 800ee42:	db24      	blt.n	800ee8e <quorem+0xf2>
 800ee44:	3601      	adds	r6, #1
 800ee46:	4628      	mov	r0, r5
 800ee48:	f04f 0c00 	mov.w	ip, #0
 800ee4c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ee50:	f8d0 e000 	ldr.w	lr, [r0]
 800ee54:	b293      	uxth	r3, r2
 800ee56:	ebac 0303 	sub.w	r3, ip, r3
 800ee5a:	0c12      	lsrs	r2, r2, #16
 800ee5c:	fa13 f38e 	uxtah	r3, r3, lr
 800ee60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ee64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee6e:	45c1      	cmp	r9, r8
 800ee70:	f840 3b04 	str.w	r3, [r0], #4
 800ee74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ee78:	d2e8      	bcs.n	800ee4c <quorem+0xb0>
 800ee7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee82:	b922      	cbnz	r2, 800ee8e <quorem+0xf2>
 800ee84:	3b04      	subs	r3, #4
 800ee86:	429d      	cmp	r5, r3
 800ee88:	461a      	mov	r2, r3
 800ee8a:	d30a      	bcc.n	800eea2 <quorem+0x106>
 800ee8c:	613c      	str	r4, [r7, #16]
 800ee8e:	4630      	mov	r0, r6
 800ee90:	b003      	add	sp, #12
 800ee92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee96:	6812      	ldr	r2, [r2, #0]
 800ee98:	3b04      	subs	r3, #4
 800ee9a:	2a00      	cmp	r2, #0
 800ee9c:	d1cc      	bne.n	800ee38 <quorem+0x9c>
 800ee9e:	3c01      	subs	r4, #1
 800eea0:	e7c7      	b.n	800ee32 <quorem+0x96>
 800eea2:	6812      	ldr	r2, [r2, #0]
 800eea4:	3b04      	subs	r3, #4
 800eea6:	2a00      	cmp	r2, #0
 800eea8:	d1f0      	bne.n	800ee8c <quorem+0xf0>
 800eeaa:	3c01      	subs	r4, #1
 800eeac:	e7eb      	b.n	800ee86 <quorem+0xea>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	e7ee      	b.n	800ee90 <quorem+0xf4>
 800eeb2:	0000      	movs	r0, r0
 800eeb4:	0000      	movs	r0, r0
	...

0800eeb8 <_dtoa_r>:
 800eeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eebc:	ed2d 8b04 	vpush	{d8-d9}
 800eec0:	ec57 6b10 	vmov	r6, r7, d0
 800eec4:	b093      	sub	sp, #76	; 0x4c
 800eec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eecc:	9106      	str	r1, [sp, #24]
 800eece:	ee10 aa10 	vmov	sl, s0
 800eed2:	4604      	mov	r4, r0
 800eed4:	9209      	str	r2, [sp, #36]	; 0x24
 800eed6:	930c      	str	r3, [sp, #48]	; 0x30
 800eed8:	46bb      	mov	fp, r7
 800eeda:	b975      	cbnz	r5, 800eefa <_dtoa_r+0x42>
 800eedc:	2010      	movs	r0, #16
 800eede:	f000 fddd 	bl	800fa9c <malloc>
 800eee2:	4602      	mov	r2, r0
 800eee4:	6260      	str	r0, [r4, #36]	; 0x24
 800eee6:	b920      	cbnz	r0, 800eef2 <_dtoa_r+0x3a>
 800eee8:	4ba7      	ldr	r3, [pc, #668]	; (800f188 <_dtoa_r+0x2d0>)
 800eeea:	21ea      	movs	r1, #234	; 0xea
 800eeec:	48a7      	ldr	r0, [pc, #668]	; (800f18c <_dtoa_r+0x2d4>)
 800eeee:	f001 fbd1 	bl	8010694 <__assert_func>
 800eef2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eef6:	6005      	str	r5, [r0, #0]
 800eef8:	60c5      	str	r5, [r0, #12]
 800eefa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eefc:	6819      	ldr	r1, [r3, #0]
 800eefe:	b151      	cbz	r1, 800ef16 <_dtoa_r+0x5e>
 800ef00:	685a      	ldr	r2, [r3, #4]
 800ef02:	604a      	str	r2, [r1, #4]
 800ef04:	2301      	movs	r3, #1
 800ef06:	4093      	lsls	r3, r2
 800ef08:	608b      	str	r3, [r1, #8]
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f000 fe1c 	bl	800fb48 <_Bfree>
 800ef10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef12:	2200      	movs	r2, #0
 800ef14:	601a      	str	r2, [r3, #0]
 800ef16:	1e3b      	subs	r3, r7, #0
 800ef18:	bfaa      	itet	ge
 800ef1a:	2300      	movge	r3, #0
 800ef1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ef20:	f8c8 3000 	strge.w	r3, [r8]
 800ef24:	4b9a      	ldr	r3, [pc, #616]	; (800f190 <_dtoa_r+0x2d8>)
 800ef26:	bfbc      	itt	lt
 800ef28:	2201      	movlt	r2, #1
 800ef2a:	f8c8 2000 	strlt.w	r2, [r8]
 800ef2e:	ea33 030b 	bics.w	r3, r3, fp
 800ef32:	d11b      	bne.n	800ef6c <_dtoa_r+0xb4>
 800ef34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef36:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef40:	4333      	orrs	r3, r6
 800ef42:	f000 8592 	beq.w	800fa6a <_dtoa_r+0xbb2>
 800ef46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef48:	b963      	cbnz	r3, 800ef64 <_dtoa_r+0xac>
 800ef4a:	4b92      	ldr	r3, [pc, #584]	; (800f194 <_dtoa_r+0x2dc>)
 800ef4c:	e022      	b.n	800ef94 <_dtoa_r+0xdc>
 800ef4e:	4b92      	ldr	r3, [pc, #584]	; (800f198 <_dtoa_r+0x2e0>)
 800ef50:	9301      	str	r3, [sp, #4]
 800ef52:	3308      	adds	r3, #8
 800ef54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ef56:	6013      	str	r3, [r2, #0]
 800ef58:	9801      	ldr	r0, [sp, #4]
 800ef5a:	b013      	add	sp, #76	; 0x4c
 800ef5c:	ecbd 8b04 	vpop	{d8-d9}
 800ef60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef64:	4b8b      	ldr	r3, [pc, #556]	; (800f194 <_dtoa_r+0x2dc>)
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	3303      	adds	r3, #3
 800ef6a:	e7f3      	b.n	800ef54 <_dtoa_r+0x9c>
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	2300      	movs	r3, #0
 800ef70:	4650      	mov	r0, sl
 800ef72:	4659      	mov	r1, fp
 800ef74:	f7f1 fdb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef78:	ec4b ab19 	vmov	d9, sl, fp
 800ef7c:	4680      	mov	r8, r0
 800ef7e:	b158      	cbz	r0, 800ef98 <_dtoa_r+0xe0>
 800ef80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef82:	2301      	movs	r3, #1
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f000 856b 	beq.w	800fa64 <_dtoa_r+0xbac>
 800ef8e:	4883      	ldr	r0, [pc, #524]	; (800f19c <_dtoa_r+0x2e4>)
 800ef90:	6018      	str	r0, [r3, #0]
 800ef92:	1e43      	subs	r3, r0, #1
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	e7df      	b.n	800ef58 <_dtoa_r+0xa0>
 800ef98:	ec4b ab10 	vmov	d0, sl, fp
 800ef9c:	aa10      	add	r2, sp, #64	; 0x40
 800ef9e:	a911      	add	r1, sp, #68	; 0x44
 800efa0:	4620      	mov	r0, r4
 800efa2:	f001 f8b9 	bl	8010118 <__d2b>
 800efa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800efaa:	ee08 0a10 	vmov	s16, r0
 800efae:	2d00      	cmp	r5, #0
 800efb0:	f000 8084 	beq.w	800f0bc <_dtoa_r+0x204>
 800efb4:	ee19 3a90 	vmov	r3, s19
 800efb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800efbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800efc0:	4656      	mov	r6, sl
 800efc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800efc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800efca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800efce:	4b74      	ldr	r3, [pc, #464]	; (800f1a0 <_dtoa_r+0x2e8>)
 800efd0:	2200      	movs	r2, #0
 800efd2:	4630      	mov	r0, r6
 800efd4:	4639      	mov	r1, r7
 800efd6:	f7f1 f95f 	bl	8000298 <__aeabi_dsub>
 800efda:	a365      	add	r3, pc, #404	; (adr r3, 800f170 <_dtoa_r+0x2b8>)
 800efdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efe0:	f7f1 fb12 	bl	8000608 <__aeabi_dmul>
 800efe4:	a364      	add	r3, pc, #400	; (adr r3, 800f178 <_dtoa_r+0x2c0>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	f7f1 f957 	bl	800029c <__adddf3>
 800efee:	4606      	mov	r6, r0
 800eff0:	4628      	mov	r0, r5
 800eff2:	460f      	mov	r7, r1
 800eff4:	f7f1 fa9e 	bl	8000534 <__aeabi_i2d>
 800eff8:	a361      	add	r3, pc, #388	; (adr r3, 800f180 <_dtoa_r+0x2c8>)
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	f7f1 fb03 	bl	8000608 <__aeabi_dmul>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	4630      	mov	r0, r6
 800f008:	4639      	mov	r1, r7
 800f00a:	f7f1 f947 	bl	800029c <__adddf3>
 800f00e:	4606      	mov	r6, r0
 800f010:	460f      	mov	r7, r1
 800f012:	f7f1 fda9 	bl	8000b68 <__aeabi_d2iz>
 800f016:	2200      	movs	r2, #0
 800f018:	9000      	str	r0, [sp, #0]
 800f01a:	2300      	movs	r3, #0
 800f01c:	4630      	mov	r0, r6
 800f01e:	4639      	mov	r1, r7
 800f020:	f7f1 fd64 	bl	8000aec <__aeabi_dcmplt>
 800f024:	b150      	cbz	r0, 800f03c <_dtoa_r+0x184>
 800f026:	9800      	ldr	r0, [sp, #0]
 800f028:	f7f1 fa84 	bl	8000534 <__aeabi_i2d>
 800f02c:	4632      	mov	r2, r6
 800f02e:	463b      	mov	r3, r7
 800f030:	f7f1 fd52 	bl	8000ad8 <__aeabi_dcmpeq>
 800f034:	b910      	cbnz	r0, 800f03c <_dtoa_r+0x184>
 800f036:	9b00      	ldr	r3, [sp, #0]
 800f038:	3b01      	subs	r3, #1
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	9b00      	ldr	r3, [sp, #0]
 800f03e:	2b16      	cmp	r3, #22
 800f040:	d85a      	bhi.n	800f0f8 <_dtoa_r+0x240>
 800f042:	9a00      	ldr	r2, [sp, #0]
 800f044:	4b57      	ldr	r3, [pc, #348]	; (800f1a4 <_dtoa_r+0x2ec>)
 800f046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04e:	ec51 0b19 	vmov	r0, r1, d9
 800f052:	f7f1 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800f056:	2800      	cmp	r0, #0
 800f058:	d050      	beq.n	800f0fc <_dtoa_r+0x244>
 800f05a:	9b00      	ldr	r3, [sp, #0]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	2300      	movs	r3, #0
 800f062:	930b      	str	r3, [sp, #44]	; 0x2c
 800f064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f066:	1b5d      	subs	r5, r3, r5
 800f068:	1e6b      	subs	r3, r5, #1
 800f06a:	9305      	str	r3, [sp, #20]
 800f06c:	bf45      	ittet	mi
 800f06e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f072:	9304      	strmi	r3, [sp, #16]
 800f074:	2300      	movpl	r3, #0
 800f076:	2300      	movmi	r3, #0
 800f078:	bf4c      	ite	mi
 800f07a:	9305      	strmi	r3, [sp, #20]
 800f07c:	9304      	strpl	r3, [sp, #16]
 800f07e:	9b00      	ldr	r3, [sp, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	db3d      	blt.n	800f100 <_dtoa_r+0x248>
 800f084:	9b05      	ldr	r3, [sp, #20]
 800f086:	9a00      	ldr	r2, [sp, #0]
 800f088:	920a      	str	r2, [sp, #40]	; 0x28
 800f08a:	4413      	add	r3, r2
 800f08c:	9305      	str	r3, [sp, #20]
 800f08e:	2300      	movs	r3, #0
 800f090:	9307      	str	r3, [sp, #28]
 800f092:	9b06      	ldr	r3, [sp, #24]
 800f094:	2b09      	cmp	r3, #9
 800f096:	f200 8089 	bhi.w	800f1ac <_dtoa_r+0x2f4>
 800f09a:	2b05      	cmp	r3, #5
 800f09c:	bfc4      	itt	gt
 800f09e:	3b04      	subgt	r3, #4
 800f0a0:	9306      	strgt	r3, [sp, #24]
 800f0a2:	9b06      	ldr	r3, [sp, #24]
 800f0a4:	f1a3 0302 	sub.w	r3, r3, #2
 800f0a8:	bfcc      	ite	gt
 800f0aa:	2500      	movgt	r5, #0
 800f0ac:	2501      	movle	r5, #1
 800f0ae:	2b03      	cmp	r3, #3
 800f0b0:	f200 8087 	bhi.w	800f1c2 <_dtoa_r+0x30a>
 800f0b4:	e8df f003 	tbb	[pc, r3]
 800f0b8:	59383a2d 	.word	0x59383a2d
 800f0bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f0c0:	441d      	add	r5, r3
 800f0c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f0c6:	2b20      	cmp	r3, #32
 800f0c8:	bfc1      	itttt	gt
 800f0ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f0ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f0d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f0d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f0da:	bfda      	itte	le
 800f0dc:	f1c3 0320 	rsble	r3, r3, #32
 800f0e0:	fa06 f003 	lslle.w	r0, r6, r3
 800f0e4:	4318      	orrgt	r0, r3
 800f0e6:	f7f1 fa15 	bl	8000514 <__aeabi_ui2d>
 800f0ea:	2301      	movs	r3, #1
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f0f2:	3d01      	subs	r5, #1
 800f0f4:	930e      	str	r3, [sp, #56]	; 0x38
 800f0f6:	e76a      	b.n	800efce <_dtoa_r+0x116>
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	e7b2      	b.n	800f062 <_dtoa_r+0x1aa>
 800f0fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800f0fe:	e7b1      	b.n	800f064 <_dtoa_r+0x1ac>
 800f100:	9b04      	ldr	r3, [sp, #16]
 800f102:	9a00      	ldr	r2, [sp, #0]
 800f104:	1a9b      	subs	r3, r3, r2
 800f106:	9304      	str	r3, [sp, #16]
 800f108:	4253      	negs	r3, r2
 800f10a:	9307      	str	r3, [sp, #28]
 800f10c:	2300      	movs	r3, #0
 800f10e:	930a      	str	r3, [sp, #40]	; 0x28
 800f110:	e7bf      	b.n	800f092 <_dtoa_r+0x1da>
 800f112:	2300      	movs	r3, #0
 800f114:	9308      	str	r3, [sp, #32]
 800f116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f118:	2b00      	cmp	r3, #0
 800f11a:	dc55      	bgt.n	800f1c8 <_dtoa_r+0x310>
 800f11c:	2301      	movs	r3, #1
 800f11e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f122:	461a      	mov	r2, r3
 800f124:	9209      	str	r2, [sp, #36]	; 0x24
 800f126:	e00c      	b.n	800f142 <_dtoa_r+0x28a>
 800f128:	2301      	movs	r3, #1
 800f12a:	e7f3      	b.n	800f114 <_dtoa_r+0x25c>
 800f12c:	2300      	movs	r3, #0
 800f12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f130:	9308      	str	r3, [sp, #32]
 800f132:	9b00      	ldr	r3, [sp, #0]
 800f134:	4413      	add	r3, r2
 800f136:	9302      	str	r3, [sp, #8]
 800f138:	3301      	adds	r3, #1
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	9303      	str	r3, [sp, #12]
 800f13e:	bfb8      	it	lt
 800f140:	2301      	movlt	r3, #1
 800f142:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f144:	2200      	movs	r2, #0
 800f146:	6042      	str	r2, [r0, #4]
 800f148:	2204      	movs	r2, #4
 800f14a:	f102 0614 	add.w	r6, r2, #20
 800f14e:	429e      	cmp	r6, r3
 800f150:	6841      	ldr	r1, [r0, #4]
 800f152:	d93d      	bls.n	800f1d0 <_dtoa_r+0x318>
 800f154:	4620      	mov	r0, r4
 800f156:	f000 fcb7 	bl	800fac8 <_Balloc>
 800f15a:	9001      	str	r0, [sp, #4]
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d13b      	bne.n	800f1d8 <_dtoa_r+0x320>
 800f160:	4b11      	ldr	r3, [pc, #68]	; (800f1a8 <_dtoa_r+0x2f0>)
 800f162:	4602      	mov	r2, r0
 800f164:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f168:	e6c0      	b.n	800eeec <_dtoa_r+0x34>
 800f16a:	2301      	movs	r3, #1
 800f16c:	e7df      	b.n	800f12e <_dtoa_r+0x276>
 800f16e:	bf00      	nop
 800f170:	636f4361 	.word	0x636f4361
 800f174:	3fd287a7 	.word	0x3fd287a7
 800f178:	8b60c8b3 	.word	0x8b60c8b3
 800f17c:	3fc68a28 	.word	0x3fc68a28
 800f180:	509f79fb 	.word	0x509f79fb
 800f184:	3fd34413 	.word	0x3fd34413
 800f188:	08011f71 	.word	0x08011f71
 800f18c:	08011f88 	.word	0x08011f88
 800f190:	7ff00000 	.word	0x7ff00000
 800f194:	08011f6d 	.word	0x08011f6d
 800f198:	08011f64 	.word	0x08011f64
 800f19c:	08011f41 	.word	0x08011f41
 800f1a0:	3ff80000 	.word	0x3ff80000
 800f1a4:	08012078 	.word	0x08012078
 800f1a8:	08011fe3 	.word	0x08011fe3
 800f1ac:	2501      	movs	r5, #1
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	9306      	str	r3, [sp, #24]
 800f1b2:	9508      	str	r5, [sp, #32]
 800f1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	2312      	movs	r3, #18
 800f1c0:	e7b0      	b.n	800f124 <_dtoa_r+0x26c>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	9308      	str	r3, [sp, #32]
 800f1c6:	e7f5      	b.n	800f1b4 <_dtoa_r+0x2fc>
 800f1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1ce:	e7b8      	b.n	800f142 <_dtoa_r+0x28a>
 800f1d0:	3101      	adds	r1, #1
 800f1d2:	6041      	str	r1, [r0, #4]
 800f1d4:	0052      	lsls	r2, r2, #1
 800f1d6:	e7b8      	b.n	800f14a <_dtoa_r+0x292>
 800f1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1da:	9a01      	ldr	r2, [sp, #4]
 800f1dc:	601a      	str	r2, [r3, #0]
 800f1de:	9b03      	ldr	r3, [sp, #12]
 800f1e0:	2b0e      	cmp	r3, #14
 800f1e2:	f200 809d 	bhi.w	800f320 <_dtoa_r+0x468>
 800f1e6:	2d00      	cmp	r5, #0
 800f1e8:	f000 809a 	beq.w	800f320 <_dtoa_r+0x468>
 800f1ec:	9b00      	ldr	r3, [sp, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	dd32      	ble.n	800f258 <_dtoa_r+0x3a0>
 800f1f2:	4ab7      	ldr	r2, [pc, #732]	; (800f4d0 <_dtoa_r+0x618>)
 800f1f4:	f003 030f 	and.w	r3, r3, #15
 800f1f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f1fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f200:	9b00      	ldr	r3, [sp, #0]
 800f202:	05d8      	lsls	r0, r3, #23
 800f204:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f208:	d516      	bpl.n	800f238 <_dtoa_r+0x380>
 800f20a:	4bb2      	ldr	r3, [pc, #712]	; (800f4d4 <_dtoa_r+0x61c>)
 800f20c:	ec51 0b19 	vmov	r0, r1, d9
 800f210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f214:	f7f1 fb22 	bl	800085c <__aeabi_ddiv>
 800f218:	f007 070f 	and.w	r7, r7, #15
 800f21c:	4682      	mov	sl, r0
 800f21e:	468b      	mov	fp, r1
 800f220:	2503      	movs	r5, #3
 800f222:	4eac      	ldr	r6, [pc, #688]	; (800f4d4 <_dtoa_r+0x61c>)
 800f224:	b957      	cbnz	r7, 800f23c <_dtoa_r+0x384>
 800f226:	4642      	mov	r2, r8
 800f228:	464b      	mov	r3, r9
 800f22a:	4650      	mov	r0, sl
 800f22c:	4659      	mov	r1, fp
 800f22e:	f7f1 fb15 	bl	800085c <__aeabi_ddiv>
 800f232:	4682      	mov	sl, r0
 800f234:	468b      	mov	fp, r1
 800f236:	e028      	b.n	800f28a <_dtoa_r+0x3d2>
 800f238:	2502      	movs	r5, #2
 800f23a:	e7f2      	b.n	800f222 <_dtoa_r+0x36a>
 800f23c:	07f9      	lsls	r1, r7, #31
 800f23e:	d508      	bpl.n	800f252 <_dtoa_r+0x39a>
 800f240:	4640      	mov	r0, r8
 800f242:	4649      	mov	r1, r9
 800f244:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f248:	f7f1 f9de 	bl	8000608 <__aeabi_dmul>
 800f24c:	3501      	adds	r5, #1
 800f24e:	4680      	mov	r8, r0
 800f250:	4689      	mov	r9, r1
 800f252:	107f      	asrs	r7, r7, #1
 800f254:	3608      	adds	r6, #8
 800f256:	e7e5      	b.n	800f224 <_dtoa_r+0x36c>
 800f258:	f000 809b 	beq.w	800f392 <_dtoa_r+0x4da>
 800f25c:	9b00      	ldr	r3, [sp, #0]
 800f25e:	4f9d      	ldr	r7, [pc, #628]	; (800f4d4 <_dtoa_r+0x61c>)
 800f260:	425e      	negs	r6, r3
 800f262:	4b9b      	ldr	r3, [pc, #620]	; (800f4d0 <_dtoa_r+0x618>)
 800f264:	f006 020f 	and.w	r2, r6, #15
 800f268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f270:	ec51 0b19 	vmov	r0, r1, d9
 800f274:	f7f1 f9c8 	bl	8000608 <__aeabi_dmul>
 800f278:	1136      	asrs	r6, r6, #4
 800f27a:	4682      	mov	sl, r0
 800f27c:	468b      	mov	fp, r1
 800f27e:	2300      	movs	r3, #0
 800f280:	2502      	movs	r5, #2
 800f282:	2e00      	cmp	r6, #0
 800f284:	d17a      	bne.n	800f37c <_dtoa_r+0x4c4>
 800f286:	2b00      	cmp	r3, #0
 800f288:	d1d3      	bne.n	800f232 <_dtoa_r+0x37a>
 800f28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f000 8082 	beq.w	800f396 <_dtoa_r+0x4de>
 800f292:	4b91      	ldr	r3, [pc, #580]	; (800f4d8 <_dtoa_r+0x620>)
 800f294:	2200      	movs	r2, #0
 800f296:	4650      	mov	r0, sl
 800f298:	4659      	mov	r1, fp
 800f29a:	f7f1 fc27 	bl	8000aec <__aeabi_dcmplt>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d079      	beq.n	800f396 <_dtoa_r+0x4de>
 800f2a2:	9b03      	ldr	r3, [sp, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d076      	beq.n	800f396 <_dtoa_r+0x4de>
 800f2a8:	9b02      	ldr	r3, [sp, #8]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	dd36      	ble.n	800f31c <_dtoa_r+0x464>
 800f2ae:	9b00      	ldr	r3, [sp, #0]
 800f2b0:	4650      	mov	r0, sl
 800f2b2:	4659      	mov	r1, fp
 800f2b4:	1e5f      	subs	r7, r3, #1
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	4b88      	ldr	r3, [pc, #544]	; (800f4dc <_dtoa_r+0x624>)
 800f2ba:	f7f1 f9a5 	bl	8000608 <__aeabi_dmul>
 800f2be:	9e02      	ldr	r6, [sp, #8]
 800f2c0:	4682      	mov	sl, r0
 800f2c2:	468b      	mov	fp, r1
 800f2c4:	3501      	adds	r5, #1
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f7f1 f934 	bl	8000534 <__aeabi_i2d>
 800f2cc:	4652      	mov	r2, sl
 800f2ce:	465b      	mov	r3, fp
 800f2d0:	f7f1 f99a 	bl	8000608 <__aeabi_dmul>
 800f2d4:	4b82      	ldr	r3, [pc, #520]	; (800f4e0 <_dtoa_r+0x628>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f7f0 ffe0 	bl	800029c <__adddf3>
 800f2dc:	46d0      	mov	r8, sl
 800f2de:	46d9      	mov	r9, fp
 800f2e0:	4682      	mov	sl, r0
 800f2e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f2e6:	2e00      	cmp	r6, #0
 800f2e8:	d158      	bne.n	800f39c <_dtoa_r+0x4e4>
 800f2ea:	4b7e      	ldr	r3, [pc, #504]	; (800f4e4 <_dtoa_r+0x62c>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	4649      	mov	r1, r9
 800f2f2:	f7f0 ffd1 	bl	8000298 <__aeabi_dsub>
 800f2f6:	4652      	mov	r2, sl
 800f2f8:	465b      	mov	r3, fp
 800f2fa:	4680      	mov	r8, r0
 800f2fc:	4689      	mov	r9, r1
 800f2fe:	f7f1 fc13 	bl	8000b28 <__aeabi_dcmpgt>
 800f302:	2800      	cmp	r0, #0
 800f304:	f040 8295 	bne.w	800f832 <_dtoa_r+0x97a>
 800f308:	4652      	mov	r2, sl
 800f30a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f30e:	4640      	mov	r0, r8
 800f310:	4649      	mov	r1, r9
 800f312:	f7f1 fbeb 	bl	8000aec <__aeabi_dcmplt>
 800f316:	2800      	cmp	r0, #0
 800f318:	f040 8289 	bne.w	800f82e <_dtoa_r+0x976>
 800f31c:	ec5b ab19 	vmov	sl, fp, d9
 800f320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f322:	2b00      	cmp	r3, #0
 800f324:	f2c0 8148 	blt.w	800f5b8 <_dtoa_r+0x700>
 800f328:	9a00      	ldr	r2, [sp, #0]
 800f32a:	2a0e      	cmp	r2, #14
 800f32c:	f300 8144 	bgt.w	800f5b8 <_dtoa_r+0x700>
 800f330:	4b67      	ldr	r3, [pc, #412]	; (800f4d0 <_dtoa_r+0x618>)
 800f332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	f280 80d5 	bge.w	800f4ec <_dtoa_r+0x634>
 800f342:	9b03      	ldr	r3, [sp, #12]
 800f344:	2b00      	cmp	r3, #0
 800f346:	f300 80d1 	bgt.w	800f4ec <_dtoa_r+0x634>
 800f34a:	f040 826f 	bne.w	800f82c <_dtoa_r+0x974>
 800f34e:	4b65      	ldr	r3, [pc, #404]	; (800f4e4 <_dtoa_r+0x62c>)
 800f350:	2200      	movs	r2, #0
 800f352:	4640      	mov	r0, r8
 800f354:	4649      	mov	r1, r9
 800f356:	f7f1 f957 	bl	8000608 <__aeabi_dmul>
 800f35a:	4652      	mov	r2, sl
 800f35c:	465b      	mov	r3, fp
 800f35e:	f7f1 fbd9 	bl	8000b14 <__aeabi_dcmpge>
 800f362:	9e03      	ldr	r6, [sp, #12]
 800f364:	4637      	mov	r7, r6
 800f366:	2800      	cmp	r0, #0
 800f368:	f040 8245 	bne.w	800f7f6 <_dtoa_r+0x93e>
 800f36c:	9d01      	ldr	r5, [sp, #4]
 800f36e:	2331      	movs	r3, #49	; 0x31
 800f370:	f805 3b01 	strb.w	r3, [r5], #1
 800f374:	9b00      	ldr	r3, [sp, #0]
 800f376:	3301      	adds	r3, #1
 800f378:	9300      	str	r3, [sp, #0]
 800f37a:	e240      	b.n	800f7fe <_dtoa_r+0x946>
 800f37c:	07f2      	lsls	r2, r6, #31
 800f37e:	d505      	bpl.n	800f38c <_dtoa_r+0x4d4>
 800f380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f384:	f7f1 f940 	bl	8000608 <__aeabi_dmul>
 800f388:	3501      	adds	r5, #1
 800f38a:	2301      	movs	r3, #1
 800f38c:	1076      	asrs	r6, r6, #1
 800f38e:	3708      	adds	r7, #8
 800f390:	e777      	b.n	800f282 <_dtoa_r+0x3ca>
 800f392:	2502      	movs	r5, #2
 800f394:	e779      	b.n	800f28a <_dtoa_r+0x3d2>
 800f396:	9f00      	ldr	r7, [sp, #0]
 800f398:	9e03      	ldr	r6, [sp, #12]
 800f39a:	e794      	b.n	800f2c6 <_dtoa_r+0x40e>
 800f39c:	9901      	ldr	r1, [sp, #4]
 800f39e:	4b4c      	ldr	r3, [pc, #304]	; (800f4d0 <_dtoa_r+0x618>)
 800f3a0:	4431      	add	r1, r6
 800f3a2:	910d      	str	r1, [sp, #52]	; 0x34
 800f3a4:	9908      	ldr	r1, [sp, #32]
 800f3a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f3aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3ae:	2900      	cmp	r1, #0
 800f3b0:	d043      	beq.n	800f43a <_dtoa_r+0x582>
 800f3b2:	494d      	ldr	r1, [pc, #308]	; (800f4e8 <_dtoa_r+0x630>)
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	f7f1 fa51 	bl	800085c <__aeabi_ddiv>
 800f3ba:	4652      	mov	r2, sl
 800f3bc:	465b      	mov	r3, fp
 800f3be:	f7f0 ff6b 	bl	8000298 <__aeabi_dsub>
 800f3c2:	9d01      	ldr	r5, [sp, #4]
 800f3c4:	4682      	mov	sl, r0
 800f3c6:	468b      	mov	fp, r1
 800f3c8:	4649      	mov	r1, r9
 800f3ca:	4640      	mov	r0, r8
 800f3cc:	f7f1 fbcc 	bl	8000b68 <__aeabi_d2iz>
 800f3d0:	4606      	mov	r6, r0
 800f3d2:	f7f1 f8af 	bl	8000534 <__aeabi_i2d>
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	460b      	mov	r3, r1
 800f3da:	4640      	mov	r0, r8
 800f3dc:	4649      	mov	r1, r9
 800f3de:	f7f0 ff5b 	bl	8000298 <__aeabi_dsub>
 800f3e2:	3630      	adds	r6, #48	; 0x30
 800f3e4:	f805 6b01 	strb.w	r6, [r5], #1
 800f3e8:	4652      	mov	r2, sl
 800f3ea:	465b      	mov	r3, fp
 800f3ec:	4680      	mov	r8, r0
 800f3ee:	4689      	mov	r9, r1
 800f3f0:	f7f1 fb7c 	bl	8000aec <__aeabi_dcmplt>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	d163      	bne.n	800f4c0 <_dtoa_r+0x608>
 800f3f8:	4642      	mov	r2, r8
 800f3fa:	464b      	mov	r3, r9
 800f3fc:	4936      	ldr	r1, [pc, #216]	; (800f4d8 <_dtoa_r+0x620>)
 800f3fe:	2000      	movs	r0, #0
 800f400:	f7f0 ff4a 	bl	8000298 <__aeabi_dsub>
 800f404:	4652      	mov	r2, sl
 800f406:	465b      	mov	r3, fp
 800f408:	f7f1 fb70 	bl	8000aec <__aeabi_dcmplt>
 800f40c:	2800      	cmp	r0, #0
 800f40e:	f040 80b5 	bne.w	800f57c <_dtoa_r+0x6c4>
 800f412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f414:	429d      	cmp	r5, r3
 800f416:	d081      	beq.n	800f31c <_dtoa_r+0x464>
 800f418:	4b30      	ldr	r3, [pc, #192]	; (800f4dc <_dtoa_r+0x624>)
 800f41a:	2200      	movs	r2, #0
 800f41c:	4650      	mov	r0, sl
 800f41e:	4659      	mov	r1, fp
 800f420:	f7f1 f8f2 	bl	8000608 <__aeabi_dmul>
 800f424:	4b2d      	ldr	r3, [pc, #180]	; (800f4dc <_dtoa_r+0x624>)
 800f426:	4682      	mov	sl, r0
 800f428:	468b      	mov	fp, r1
 800f42a:	4640      	mov	r0, r8
 800f42c:	4649      	mov	r1, r9
 800f42e:	2200      	movs	r2, #0
 800f430:	f7f1 f8ea 	bl	8000608 <__aeabi_dmul>
 800f434:	4680      	mov	r8, r0
 800f436:	4689      	mov	r9, r1
 800f438:	e7c6      	b.n	800f3c8 <_dtoa_r+0x510>
 800f43a:	4650      	mov	r0, sl
 800f43c:	4659      	mov	r1, fp
 800f43e:	f7f1 f8e3 	bl	8000608 <__aeabi_dmul>
 800f442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f444:	9d01      	ldr	r5, [sp, #4]
 800f446:	930f      	str	r3, [sp, #60]	; 0x3c
 800f448:	4682      	mov	sl, r0
 800f44a:	468b      	mov	fp, r1
 800f44c:	4649      	mov	r1, r9
 800f44e:	4640      	mov	r0, r8
 800f450:	f7f1 fb8a 	bl	8000b68 <__aeabi_d2iz>
 800f454:	4606      	mov	r6, r0
 800f456:	f7f1 f86d 	bl	8000534 <__aeabi_i2d>
 800f45a:	3630      	adds	r6, #48	; 0x30
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4640      	mov	r0, r8
 800f462:	4649      	mov	r1, r9
 800f464:	f7f0 ff18 	bl	8000298 <__aeabi_dsub>
 800f468:	f805 6b01 	strb.w	r6, [r5], #1
 800f46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f46e:	429d      	cmp	r5, r3
 800f470:	4680      	mov	r8, r0
 800f472:	4689      	mov	r9, r1
 800f474:	f04f 0200 	mov.w	r2, #0
 800f478:	d124      	bne.n	800f4c4 <_dtoa_r+0x60c>
 800f47a:	4b1b      	ldr	r3, [pc, #108]	; (800f4e8 <_dtoa_r+0x630>)
 800f47c:	4650      	mov	r0, sl
 800f47e:	4659      	mov	r1, fp
 800f480:	f7f0 ff0c 	bl	800029c <__adddf3>
 800f484:	4602      	mov	r2, r0
 800f486:	460b      	mov	r3, r1
 800f488:	4640      	mov	r0, r8
 800f48a:	4649      	mov	r1, r9
 800f48c:	f7f1 fb4c 	bl	8000b28 <__aeabi_dcmpgt>
 800f490:	2800      	cmp	r0, #0
 800f492:	d173      	bne.n	800f57c <_dtoa_r+0x6c4>
 800f494:	4652      	mov	r2, sl
 800f496:	465b      	mov	r3, fp
 800f498:	4913      	ldr	r1, [pc, #76]	; (800f4e8 <_dtoa_r+0x630>)
 800f49a:	2000      	movs	r0, #0
 800f49c:	f7f0 fefc 	bl	8000298 <__aeabi_dsub>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	4640      	mov	r0, r8
 800f4a6:	4649      	mov	r1, r9
 800f4a8:	f7f1 fb20 	bl	8000aec <__aeabi_dcmplt>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	f43f af35 	beq.w	800f31c <_dtoa_r+0x464>
 800f4b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f4b4:	1e6b      	subs	r3, r5, #1
 800f4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f4b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f4bc:	2b30      	cmp	r3, #48	; 0x30
 800f4be:	d0f8      	beq.n	800f4b2 <_dtoa_r+0x5fa>
 800f4c0:	9700      	str	r7, [sp, #0]
 800f4c2:	e049      	b.n	800f558 <_dtoa_r+0x6a0>
 800f4c4:	4b05      	ldr	r3, [pc, #20]	; (800f4dc <_dtoa_r+0x624>)
 800f4c6:	f7f1 f89f 	bl	8000608 <__aeabi_dmul>
 800f4ca:	4680      	mov	r8, r0
 800f4cc:	4689      	mov	r9, r1
 800f4ce:	e7bd      	b.n	800f44c <_dtoa_r+0x594>
 800f4d0:	08012078 	.word	0x08012078
 800f4d4:	08012050 	.word	0x08012050
 800f4d8:	3ff00000 	.word	0x3ff00000
 800f4dc:	40240000 	.word	0x40240000
 800f4e0:	401c0000 	.word	0x401c0000
 800f4e4:	40140000 	.word	0x40140000
 800f4e8:	3fe00000 	.word	0x3fe00000
 800f4ec:	9d01      	ldr	r5, [sp, #4]
 800f4ee:	4656      	mov	r6, sl
 800f4f0:	465f      	mov	r7, fp
 800f4f2:	4642      	mov	r2, r8
 800f4f4:	464b      	mov	r3, r9
 800f4f6:	4630      	mov	r0, r6
 800f4f8:	4639      	mov	r1, r7
 800f4fa:	f7f1 f9af 	bl	800085c <__aeabi_ddiv>
 800f4fe:	f7f1 fb33 	bl	8000b68 <__aeabi_d2iz>
 800f502:	4682      	mov	sl, r0
 800f504:	f7f1 f816 	bl	8000534 <__aeabi_i2d>
 800f508:	4642      	mov	r2, r8
 800f50a:	464b      	mov	r3, r9
 800f50c:	f7f1 f87c 	bl	8000608 <__aeabi_dmul>
 800f510:	4602      	mov	r2, r0
 800f512:	460b      	mov	r3, r1
 800f514:	4630      	mov	r0, r6
 800f516:	4639      	mov	r1, r7
 800f518:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f51c:	f7f0 febc 	bl	8000298 <__aeabi_dsub>
 800f520:	f805 6b01 	strb.w	r6, [r5], #1
 800f524:	9e01      	ldr	r6, [sp, #4]
 800f526:	9f03      	ldr	r7, [sp, #12]
 800f528:	1bae      	subs	r6, r5, r6
 800f52a:	42b7      	cmp	r7, r6
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	d135      	bne.n	800f59e <_dtoa_r+0x6e6>
 800f532:	f7f0 feb3 	bl	800029c <__adddf3>
 800f536:	4642      	mov	r2, r8
 800f538:	464b      	mov	r3, r9
 800f53a:	4606      	mov	r6, r0
 800f53c:	460f      	mov	r7, r1
 800f53e:	f7f1 faf3 	bl	8000b28 <__aeabi_dcmpgt>
 800f542:	b9d0      	cbnz	r0, 800f57a <_dtoa_r+0x6c2>
 800f544:	4642      	mov	r2, r8
 800f546:	464b      	mov	r3, r9
 800f548:	4630      	mov	r0, r6
 800f54a:	4639      	mov	r1, r7
 800f54c:	f7f1 fac4 	bl	8000ad8 <__aeabi_dcmpeq>
 800f550:	b110      	cbz	r0, 800f558 <_dtoa_r+0x6a0>
 800f552:	f01a 0f01 	tst.w	sl, #1
 800f556:	d110      	bne.n	800f57a <_dtoa_r+0x6c2>
 800f558:	4620      	mov	r0, r4
 800f55a:	ee18 1a10 	vmov	r1, s16
 800f55e:	f000 faf3 	bl	800fb48 <_Bfree>
 800f562:	2300      	movs	r3, #0
 800f564:	9800      	ldr	r0, [sp, #0]
 800f566:	702b      	strb	r3, [r5, #0]
 800f568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f56a:	3001      	adds	r0, #1
 800f56c:	6018      	str	r0, [r3, #0]
 800f56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f570:	2b00      	cmp	r3, #0
 800f572:	f43f acf1 	beq.w	800ef58 <_dtoa_r+0xa0>
 800f576:	601d      	str	r5, [r3, #0]
 800f578:	e4ee      	b.n	800ef58 <_dtoa_r+0xa0>
 800f57a:	9f00      	ldr	r7, [sp, #0]
 800f57c:	462b      	mov	r3, r5
 800f57e:	461d      	mov	r5, r3
 800f580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f584:	2a39      	cmp	r2, #57	; 0x39
 800f586:	d106      	bne.n	800f596 <_dtoa_r+0x6de>
 800f588:	9a01      	ldr	r2, [sp, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d1f7      	bne.n	800f57e <_dtoa_r+0x6c6>
 800f58e:	9901      	ldr	r1, [sp, #4]
 800f590:	2230      	movs	r2, #48	; 0x30
 800f592:	3701      	adds	r7, #1
 800f594:	700a      	strb	r2, [r1, #0]
 800f596:	781a      	ldrb	r2, [r3, #0]
 800f598:	3201      	adds	r2, #1
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	e790      	b.n	800f4c0 <_dtoa_r+0x608>
 800f59e:	4ba6      	ldr	r3, [pc, #664]	; (800f838 <_dtoa_r+0x980>)
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	f7f1 f831 	bl	8000608 <__aeabi_dmul>
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	460f      	mov	r7, r1
 800f5ae:	f7f1 fa93 	bl	8000ad8 <__aeabi_dcmpeq>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	d09d      	beq.n	800f4f2 <_dtoa_r+0x63a>
 800f5b6:	e7cf      	b.n	800f558 <_dtoa_r+0x6a0>
 800f5b8:	9a08      	ldr	r2, [sp, #32]
 800f5ba:	2a00      	cmp	r2, #0
 800f5bc:	f000 80d7 	beq.w	800f76e <_dtoa_r+0x8b6>
 800f5c0:	9a06      	ldr	r2, [sp, #24]
 800f5c2:	2a01      	cmp	r2, #1
 800f5c4:	f300 80ba 	bgt.w	800f73c <_dtoa_r+0x884>
 800f5c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5ca:	2a00      	cmp	r2, #0
 800f5cc:	f000 80b2 	beq.w	800f734 <_dtoa_r+0x87c>
 800f5d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f5d4:	9e07      	ldr	r6, [sp, #28]
 800f5d6:	9d04      	ldr	r5, [sp, #16]
 800f5d8:	9a04      	ldr	r2, [sp, #16]
 800f5da:	441a      	add	r2, r3
 800f5dc:	9204      	str	r2, [sp, #16]
 800f5de:	9a05      	ldr	r2, [sp, #20]
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	441a      	add	r2, r3
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	9205      	str	r2, [sp, #20]
 800f5e8:	f000 fb66 	bl	800fcb8 <__i2b>
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	2d00      	cmp	r5, #0
 800f5f0:	dd0c      	ble.n	800f60c <_dtoa_r+0x754>
 800f5f2:	9b05      	ldr	r3, [sp, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	dd09      	ble.n	800f60c <_dtoa_r+0x754>
 800f5f8:	42ab      	cmp	r3, r5
 800f5fa:	9a04      	ldr	r2, [sp, #16]
 800f5fc:	bfa8      	it	ge
 800f5fe:	462b      	movge	r3, r5
 800f600:	1ad2      	subs	r2, r2, r3
 800f602:	9204      	str	r2, [sp, #16]
 800f604:	9a05      	ldr	r2, [sp, #20]
 800f606:	1aed      	subs	r5, r5, r3
 800f608:	1ad3      	subs	r3, r2, r3
 800f60a:	9305      	str	r3, [sp, #20]
 800f60c:	9b07      	ldr	r3, [sp, #28]
 800f60e:	b31b      	cbz	r3, 800f658 <_dtoa_r+0x7a0>
 800f610:	9b08      	ldr	r3, [sp, #32]
 800f612:	2b00      	cmp	r3, #0
 800f614:	f000 80af 	beq.w	800f776 <_dtoa_r+0x8be>
 800f618:	2e00      	cmp	r6, #0
 800f61a:	dd13      	ble.n	800f644 <_dtoa_r+0x78c>
 800f61c:	4639      	mov	r1, r7
 800f61e:	4632      	mov	r2, r6
 800f620:	4620      	mov	r0, r4
 800f622:	f000 fc09 	bl	800fe38 <__pow5mult>
 800f626:	ee18 2a10 	vmov	r2, s16
 800f62a:	4601      	mov	r1, r0
 800f62c:	4607      	mov	r7, r0
 800f62e:	4620      	mov	r0, r4
 800f630:	f000 fb58 	bl	800fce4 <__multiply>
 800f634:	ee18 1a10 	vmov	r1, s16
 800f638:	4680      	mov	r8, r0
 800f63a:	4620      	mov	r0, r4
 800f63c:	f000 fa84 	bl	800fb48 <_Bfree>
 800f640:	ee08 8a10 	vmov	s16, r8
 800f644:	9b07      	ldr	r3, [sp, #28]
 800f646:	1b9a      	subs	r2, r3, r6
 800f648:	d006      	beq.n	800f658 <_dtoa_r+0x7a0>
 800f64a:	ee18 1a10 	vmov	r1, s16
 800f64e:	4620      	mov	r0, r4
 800f650:	f000 fbf2 	bl	800fe38 <__pow5mult>
 800f654:	ee08 0a10 	vmov	s16, r0
 800f658:	2101      	movs	r1, #1
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 fb2c 	bl	800fcb8 <__i2b>
 800f660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f662:	2b00      	cmp	r3, #0
 800f664:	4606      	mov	r6, r0
 800f666:	f340 8088 	ble.w	800f77a <_dtoa_r+0x8c2>
 800f66a:	461a      	mov	r2, r3
 800f66c:	4601      	mov	r1, r0
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 fbe2 	bl	800fe38 <__pow5mult>
 800f674:	9b06      	ldr	r3, [sp, #24]
 800f676:	2b01      	cmp	r3, #1
 800f678:	4606      	mov	r6, r0
 800f67a:	f340 8081 	ble.w	800f780 <_dtoa_r+0x8c8>
 800f67e:	f04f 0800 	mov.w	r8, #0
 800f682:	6933      	ldr	r3, [r6, #16]
 800f684:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f688:	6918      	ldr	r0, [r3, #16]
 800f68a:	f000 fac5 	bl	800fc18 <__hi0bits>
 800f68e:	f1c0 0020 	rsb	r0, r0, #32
 800f692:	9b05      	ldr	r3, [sp, #20]
 800f694:	4418      	add	r0, r3
 800f696:	f010 001f 	ands.w	r0, r0, #31
 800f69a:	f000 8092 	beq.w	800f7c2 <_dtoa_r+0x90a>
 800f69e:	f1c0 0320 	rsb	r3, r0, #32
 800f6a2:	2b04      	cmp	r3, #4
 800f6a4:	f340 808a 	ble.w	800f7bc <_dtoa_r+0x904>
 800f6a8:	f1c0 001c 	rsb	r0, r0, #28
 800f6ac:	9b04      	ldr	r3, [sp, #16]
 800f6ae:	4403      	add	r3, r0
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	9b05      	ldr	r3, [sp, #20]
 800f6b4:	4403      	add	r3, r0
 800f6b6:	4405      	add	r5, r0
 800f6b8:	9305      	str	r3, [sp, #20]
 800f6ba:	9b04      	ldr	r3, [sp, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dd07      	ble.n	800f6d0 <_dtoa_r+0x818>
 800f6c0:	ee18 1a10 	vmov	r1, s16
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 fc10 	bl	800feec <__lshift>
 800f6cc:	ee08 0a10 	vmov	s16, r0
 800f6d0:	9b05      	ldr	r3, [sp, #20]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	dd05      	ble.n	800f6e2 <_dtoa_r+0x82a>
 800f6d6:	4631      	mov	r1, r6
 800f6d8:	461a      	mov	r2, r3
 800f6da:	4620      	mov	r0, r4
 800f6dc:	f000 fc06 	bl	800feec <__lshift>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d06e      	beq.n	800f7c6 <_dtoa_r+0x90e>
 800f6e8:	ee18 0a10 	vmov	r0, s16
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	f000 fc6d 	bl	800ffcc <__mcmp>
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	da67      	bge.n	800f7c6 <_dtoa_r+0x90e>
 800f6f6:	9b00      	ldr	r3, [sp, #0]
 800f6f8:	3b01      	subs	r3, #1
 800f6fa:	ee18 1a10 	vmov	r1, s16
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	220a      	movs	r2, #10
 800f702:	2300      	movs	r3, #0
 800f704:	4620      	mov	r0, r4
 800f706:	f000 fa41 	bl	800fb8c <__multadd>
 800f70a:	9b08      	ldr	r3, [sp, #32]
 800f70c:	ee08 0a10 	vmov	s16, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	f000 81b1 	beq.w	800fa78 <_dtoa_r+0xbc0>
 800f716:	2300      	movs	r3, #0
 800f718:	4639      	mov	r1, r7
 800f71a:	220a      	movs	r2, #10
 800f71c:	4620      	mov	r0, r4
 800f71e:	f000 fa35 	bl	800fb8c <__multadd>
 800f722:	9b02      	ldr	r3, [sp, #8]
 800f724:	2b00      	cmp	r3, #0
 800f726:	4607      	mov	r7, r0
 800f728:	f300 808e 	bgt.w	800f848 <_dtoa_r+0x990>
 800f72c:	9b06      	ldr	r3, [sp, #24]
 800f72e:	2b02      	cmp	r3, #2
 800f730:	dc51      	bgt.n	800f7d6 <_dtoa_r+0x91e>
 800f732:	e089      	b.n	800f848 <_dtoa_r+0x990>
 800f734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f73a:	e74b      	b.n	800f5d4 <_dtoa_r+0x71c>
 800f73c:	9b03      	ldr	r3, [sp, #12]
 800f73e:	1e5e      	subs	r6, r3, #1
 800f740:	9b07      	ldr	r3, [sp, #28]
 800f742:	42b3      	cmp	r3, r6
 800f744:	bfbf      	itttt	lt
 800f746:	9b07      	ldrlt	r3, [sp, #28]
 800f748:	9607      	strlt	r6, [sp, #28]
 800f74a:	1af2      	sublt	r2, r6, r3
 800f74c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f74e:	bfb6      	itet	lt
 800f750:	189b      	addlt	r3, r3, r2
 800f752:	1b9e      	subge	r6, r3, r6
 800f754:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f756:	9b03      	ldr	r3, [sp, #12]
 800f758:	bfb8      	it	lt
 800f75a:	2600      	movlt	r6, #0
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	bfb7      	itett	lt
 800f760:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f764:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f768:	1a9d      	sublt	r5, r3, r2
 800f76a:	2300      	movlt	r3, #0
 800f76c:	e734      	b.n	800f5d8 <_dtoa_r+0x720>
 800f76e:	9e07      	ldr	r6, [sp, #28]
 800f770:	9d04      	ldr	r5, [sp, #16]
 800f772:	9f08      	ldr	r7, [sp, #32]
 800f774:	e73b      	b.n	800f5ee <_dtoa_r+0x736>
 800f776:	9a07      	ldr	r2, [sp, #28]
 800f778:	e767      	b.n	800f64a <_dtoa_r+0x792>
 800f77a:	9b06      	ldr	r3, [sp, #24]
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	dc18      	bgt.n	800f7b2 <_dtoa_r+0x8fa>
 800f780:	f1ba 0f00 	cmp.w	sl, #0
 800f784:	d115      	bne.n	800f7b2 <_dtoa_r+0x8fa>
 800f786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f78a:	b993      	cbnz	r3, 800f7b2 <_dtoa_r+0x8fa>
 800f78c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f790:	0d1b      	lsrs	r3, r3, #20
 800f792:	051b      	lsls	r3, r3, #20
 800f794:	b183      	cbz	r3, 800f7b8 <_dtoa_r+0x900>
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	3301      	adds	r3, #1
 800f79a:	9304      	str	r3, [sp, #16]
 800f79c:	9b05      	ldr	r3, [sp, #20]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	9305      	str	r3, [sp, #20]
 800f7a2:	f04f 0801 	mov.w	r8, #1
 800f7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f47f af6a 	bne.w	800f682 <_dtoa_r+0x7ca>
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	e76f      	b.n	800f692 <_dtoa_r+0x7da>
 800f7b2:	f04f 0800 	mov.w	r8, #0
 800f7b6:	e7f6      	b.n	800f7a6 <_dtoa_r+0x8ee>
 800f7b8:	4698      	mov	r8, r3
 800f7ba:	e7f4      	b.n	800f7a6 <_dtoa_r+0x8ee>
 800f7bc:	f43f af7d 	beq.w	800f6ba <_dtoa_r+0x802>
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	301c      	adds	r0, #28
 800f7c4:	e772      	b.n	800f6ac <_dtoa_r+0x7f4>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	dc37      	bgt.n	800f83c <_dtoa_r+0x984>
 800f7cc:	9b06      	ldr	r3, [sp, #24]
 800f7ce:	2b02      	cmp	r3, #2
 800f7d0:	dd34      	ble.n	800f83c <_dtoa_r+0x984>
 800f7d2:	9b03      	ldr	r3, [sp, #12]
 800f7d4:	9302      	str	r3, [sp, #8]
 800f7d6:	9b02      	ldr	r3, [sp, #8]
 800f7d8:	b96b      	cbnz	r3, 800f7f6 <_dtoa_r+0x93e>
 800f7da:	4631      	mov	r1, r6
 800f7dc:	2205      	movs	r2, #5
 800f7de:	4620      	mov	r0, r4
 800f7e0:	f000 f9d4 	bl	800fb8c <__multadd>
 800f7e4:	4601      	mov	r1, r0
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	ee18 0a10 	vmov	r0, s16
 800f7ec:	f000 fbee 	bl	800ffcc <__mcmp>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	f73f adbb 	bgt.w	800f36c <_dtoa_r+0x4b4>
 800f7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7f8:	9d01      	ldr	r5, [sp, #4]
 800f7fa:	43db      	mvns	r3, r3
 800f7fc:	9300      	str	r3, [sp, #0]
 800f7fe:	f04f 0800 	mov.w	r8, #0
 800f802:	4631      	mov	r1, r6
 800f804:	4620      	mov	r0, r4
 800f806:	f000 f99f 	bl	800fb48 <_Bfree>
 800f80a:	2f00      	cmp	r7, #0
 800f80c:	f43f aea4 	beq.w	800f558 <_dtoa_r+0x6a0>
 800f810:	f1b8 0f00 	cmp.w	r8, #0
 800f814:	d005      	beq.n	800f822 <_dtoa_r+0x96a>
 800f816:	45b8      	cmp	r8, r7
 800f818:	d003      	beq.n	800f822 <_dtoa_r+0x96a>
 800f81a:	4641      	mov	r1, r8
 800f81c:	4620      	mov	r0, r4
 800f81e:	f000 f993 	bl	800fb48 <_Bfree>
 800f822:	4639      	mov	r1, r7
 800f824:	4620      	mov	r0, r4
 800f826:	f000 f98f 	bl	800fb48 <_Bfree>
 800f82a:	e695      	b.n	800f558 <_dtoa_r+0x6a0>
 800f82c:	2600      	movs	r6, #0
 800f82e:	4637      	mov	r7, r6
 800f830:	e7e1      	b.n	800f7f6 <_dtoa_r+0x93e>
 800f832:	9700      	str	r7, [sp, #0]
 800f834:	4637      	mov	r7, r6
 800f836:	e599      	b.n	800f36c <_dtoa_r+0x4b4>
 800f838:	40240000 	.word	0x40240000
 800f83c:	9b08      	ldr	r3, [sp, #32]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	f000 80ca 	beq.w	800f9d8 <_dtoa_r+0xb20>
 800f844:	9b03      	ldr	r3, [sp, #12]
 800f846:	9302      	str	r3, [sp, #8]
 800f848:	2d00      	cmp	r5, #0
 800f84a:	dd05      	ble.n	800f858 <_dtoa_r+0x9a0>
 800f84c:	4639      	mov	r1, r7
 800f84e:	462a      	mov	r2, r5
 800f850:	4620      	mov	r0, r4
 800f852:	f000 fb4b 	bl	800feec <__lshift>
 800f856:	4607      	mov	r7, r0
 800f858:	f1b8 0f00 	cmp.w	r8, #0
 800f85c:	d05b      	beq.n	800f916 <_dtoa_r+0xa5e>
 800f85e:	6879      	ldr	r1, [r7, #4]
 800f860:	4620      	mov	r0, r4
 800f862:	f000 f931 	bl	800fac8 <_Balloc>
 800f866:	4605      	mov	r5, r0
 800f868:	b928      	cbnz	r0, 800f876 <_dtoa_r+0x9be>
 800f86a:	4b87      	ldr	r3, [pc, #540]	; (800fa88 <_dtoa_r+0xbd0>)
 800f86c:	4602      	mov	r2, r0
 800f86e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f872:	f7ff bb3b 	b.w	800eeec <_dtoa_r+0x34>
 800f876:	693a      	ldr	r2, [r7, #16]
 800f878:	3202      	adds	r2, #2
 800f87a:	0092      	lsls	r2, r2, #2
 800f87c:	f107 010c 	add.w	r1, r7, #12
 800f880:	300c      	adds	r0, #12
 800f882:	f000 f913 	bl	800faac <memcpy>
 800f886:	2201      	movs	r2, #1
 800f888:	4629      	mov	r1, r5
 800f88a:	4620      	mov	r0, r4
 800f88c:	f000 fb2e 	bl	800feec <__lshift>
 800f890:	9b01      	ldr	r3, [sp, #4]
 800f892:	f103 0901 	add.w	r9, r3, #1
 800f896:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f89a:	4413      	add	r3, r2
 800f89c:	9305      	str	r3, [sp, #20]
 800f89e:	f00a 0301 	and.w	r3, sl, #1
 800f8a2:	46b8      	mov	r8, r7
 800f8a4:	9304      	str	r3, [sp, #16]
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	4631      	mov	r1, r6
 800f8aa:	ee18 0a10 	vmov	r0, s16
 800f8ae:	f7ff fa75 	bl	800ed9c <quorem>
 800f8b2:	4641      	mov	r1, r8
 800f8b4:	9002      	str	r0, [sp, #8]
 800f8b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f8ba:	ee18 0a10 	vmov	r0, s16
 800f8be:	f000 fb85 	bl	800ffcc <__mcmp>
 800f8c2:	463a      	mov	r2, r7
 800f8c4:	9003      	str	r0, [sp, #12]
 800f8c6:	4631      	mov	r1, r6
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	f000 fb9b 	bl	8010004 <__mdiff>
 800f8ce:	68c2      	ldr	r2, [r0, #12]
 800f8d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f8d4:	4605      	mov	r5, r0
 800f8d6:	bb02      	cbnz	r2, 800f91a <_dtoa_r+0xa62>
 800f8d8:	4601      	mov	r1, r0
 800f8da:	ee18 0a10 	vmov	r0, s16
 800f8de:	f000 fb75 	bl	800ffcc <__mcmp>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	9207      	str	r2, [sp, #28]
 800f8ea:	f000 f92d 	bl	800fb48 <_Bfree>
 800f8ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f8f2:	ea43 0102 	orr.w	r1, r3, r2
 800f8f6:	9b04      	ldr	r3, [sp, #16]
 800f8f8:	430b      	orrs	r3, r1
 800f8fa:	464d      	mov	r5, r9
 800f8fc:	d10f      	bne.n	800f91e <_dtoa_r+0xa66>
 800f8fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f902:	d02a      	beq.n	800f95a <_dtoa_r+0xaa2>
 800f904:	9b03      	ldr	r3, [sp, #12]
 800f906:	2b00      	cmp	r3, #0
 800f908:	dd02      	ble.n	800f910 <_dtoa_r+0xa58>
 800f90a:	9b02      	ldr	r3, [sp, #8]
 800f90c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f910:	f88b a000 	strb.w	sl, [fp]
 800f914:	e775      	b.n	800f802 <_dtoa_r+0x94a>
 800f916:	4638      	mov	r0, r7
 800f918:	e7ba      	b.n	800f890 <_dtoa_r+0x9d8>
 800f91a:	2201      	movs	r2, #1
 800f91c:	e7e2      	b.n	800f8e4 <_dtoa_r+0xa2c>
 800f91e:	9b03      	ldr	r3, [sp, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	db04      	blt.n	800f92e <_dtoa_r+0xa76>
 800f924:	9906      	ldr	r1, [sp, #24]
 800f926:	430b      	orrs	r3, r1
 800f928:	9904      	ldr	r1, [sp, #16]
 800f92a:	430b      	orrs	r3, r1
 800f92c:	d122      	bne.n	800f974 <_dtoa_r+0xabc>
 800f92e:	2a00      	cmp	r2, #0
 800f930:	ddee      	ble.n	800f910 <_dtoa_r+0xa58>
 800f932:	ee18 1a10 	vmov	r1, s16
 800f936:	2201      	movs	r2, #1
 800f938:	4620      	mov	r0, r4
 800f93a:	f000 fad7 	bl	800feec <__lshift>
 800f93e:	4631      	mov	r1, r6
 800f940:	ee08 0a10 	vmov	s16, r0
 800f944:	f000 fb42 	bl	800ffcc <__mcmp>
 800f948:	2800      	cmp	r0, #0
 800f94a:	dc03      	bgt.n	800f954 <_dtoa_r+0xa9c>
 800f94c:	d1e0      	bne.n	800f910 <_dtoa_r+0xa58>
 800f94e:	f01a 0f01 	tst.w	sl, #1
 800f952:	d0dd      	beq.n	800f910 <_dtoa_r+0xa58>
 800f954:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f958:	d1d7      	bne.n	800f90a <_dtoa_r+0xa52>
 800f95a:	2339      	movs	r3, #57	; 0x39
 800f95c:	f88b 3000 	strb.w	r3, [fp]
 800f960:	462b      	mov	r3, r5
 800f962:	461d      	mov	r5, r3
 800f964:	3b01      	subs	r3, #1
 800f966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f96a:	2a39      	cmp	r2, #57	; 0x39
 800f96c:	d071      	beq.n	800fa52 <_dtoa_r+0xb9a>
 800f96e:	3201      	adds	r2, #1
 800f970:	701a      	strb	r2, [r3, #0]
 800f972:	e746      	b.n	800f802 <_dtoa_r+0x94a>
 800f974:	2a00      	cmp	r2, #0
 800f976:	dd07      	ble.n	800f988 <_dtoa_r+0xad0>
 800f978:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f97c:	d0ed      	beq.n	800f95a <_dtoa_r+0xaa2>
 800f97e:	f10a 0301 	add.w	r3, sl, #1
 800f982:	f88b 3000 	strb.w	r3, [fp]
 800f986:	e73c      	b.n	800f802 <_dtoa_r+0x94a>
 800f988:	9b05      	ldr	r3, [sp, #20]
 800f98a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f98e:	4599      	cmp	r9, r3
 800f990:	d047      	beq.n	800fa22 <_dtoa_r+0xb6a>
 800f992:	ee18 1a10 	vmov	r1, s16
 800f996:	2300      	movs	r3, #0
 800f998:	220a      	movs	r2, #10
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 f8f6 	bl	800fb8c <__multadd>
 800f9a0:	45b8      	cmp	r8, r7
 800f9a2:	ee08 0a10 	vmov	s16, r0
 800f9a6:	f04f 0300 	mov.w	r3, #0
 800f9aa:	f04f 020a 	mov.w	r2, #10
 800f9ae:	4641      	mov	r1, r8
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	d106      	bne.n	800f9c2 <_dtoa_r+0xb0a>
 800f9b4:	f000 f8ea 	bl	800fb8c <__multadd>
 800f9b8:	4680      	mov	r8, r0
 800f9ba:	4607      	mov	r7, r0
 800f9bc:	f109 0901 	add.w	r9, r9, #1
 800f9c0:	e772      	b.n	800f8a8 <_dtoa_r+0x9f0>
 800f9c2:	f000 f8e3 	bl	800fb8c <__multadd>
 800f9c6:	4639      	mov	r1, r7
 800f9c8:	4680      	mov	r8, r0
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	220a      	movs	r2, #10
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f000 f8dc 	bl	800fb8c <__multadd>
 800f9d4:	4607      	mov	r7, r0
 800f9d6:	e7f1      	b.n	800f9bc <_dtoa_r+0xb04>
 800f9d8:	9b03      	ldr	r3, [sp, #12]
 800f9da:	9302      	str	r3, [sp, #8]
 800f9dc:	9d01      	ldr	r5, [sp, #4]
 800f9de:	ee18 0a10 	vmov	r0, s16
 800f9e2:	4631      	mov	r1, r6
 800f9e4:	f7ff f9da 	bl	800ed9c <quorem>
 800f9e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f9ec:	9b01      	ldr	r3, [sp, #4]
 800f9ee:	f805 ab01 	strb.w	sl, [r5], #1
 800f9f2:	1aea      	subs	r2, r5, r3
 800f9f4:	9b02      	ldr	r3, [sp, #8]
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	dd09      	ble.n	800fa0e <_dtoa_r+0xb56>
 800f9fa:	ee18 1a10 	vmov	r1, s16
 800f9fe:	2300      	movs	r3, #0
 800fa00:	220a      	movs	r2, #10
 800fa02:	4620      	mov	r0, r4
 800fa04:	f000 f8c2 	bl	800fb8c <__multadd>
 800fa08:	ee08 0a10 	vmov	s16, r0
 800fa0c:	e7e7      	b.n	800f9de <_dtoa_r+0xb26>
 800fa0e:	9b02      	ldr	r3, [sp, #8]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	bfc8      	it	gt
 800fa14:	461d      	movgt	r5, r3
 800fa16:	9b01      	ldr	r3, [sp, #4]
 800fa18:	bfd8      	it	le
 800fa1a:	2501      	movle	r5, #1
 800fa1c:	441d      	add	r5, r3
 800fa1e:	f04f 0800 	mov.w	r8, #0
 800fa22:	ee18 1a10 	vmov	r1, s16
 800fa26:	2201      	movs	r2, #1
 800fa28:	4620      	mov	r0, r4
 800fa2a:	f000 fa5f 	bl	800feec <__lshift>
 800fa2e:	4631      	mov	r1, r6
 800fa30:	ee08 0a10 	vmov	s16, r0
 800fa34:	f000 faca 	bl	800ffcc <__mcmp>
 800fa38:	2800      	cmp	r0, #0
 800fa3a:	dc91      	bgt.n	800f960 <_dtoa_r+0xaa8>
 800fa3c:	d102      	bne.n	800fa44 <_dtoa_r+0xb8c>
 800fa3e:	f01a 0f01 	tst.w	sl, #1
 800fa42:	d18d      	bne.n	800f960 <_dtoa_r+0xaa8>
 800fa44:	462b      	mov	r3, r5
 800fa46:	461d      	mov	r5, r3
 800fa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa4c:	2a30      	cmp	r2, #48	; 0x30
 800fa4e:	d0fa      	beq.n	800fa46 <_dtoa_r+0xb8e>
 800fa50:	e6d7      	b.n	800f802 <_dtoa_r+0x94a>
 800fa52:	9a01      	ldr	r2, [sp, #4]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d184      	bne.n	800f962 <_dtoa_r+0xaaa>
 800fa58:	9b00      	ldr	r3, [sp, #0]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	2331      	movs	r3, #49	; 0x31
 800fa60:	7013      	strb	r3, [r2, #0]
 800fa62:	e6ce      	b.n	800f802 <_dtoa_r+0x94a>
 800fa64:	4b09      	ldr	r3, [pc, #36]	; (800fa8c <_dtoa_r+0xbd4>)
 800fa66:	f7ff ba95 	b.w	800ef94 <_dtoa_r+0xdc>
 800fa6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f47f aa6e 	bne.w	800ef4e <_dtoa_r+0x96>
 800fa72:	4b07      	ldr	r3, [pc, #28]	; (800fa90 <_dtoa_r+0xbd8>)
 800fa74:	f7ff ba8e 	b.w	800ef94 <_dtoa_r+0xdc>
 800fa78:	9b02      	ldr	r3, [sp, #8]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	dcae      	bgt.n	800f9dc <_dtoa_r+0xb24>
 800fa7e:	9b06      	ldr	r3, [sp, #24]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	f73f aea8 	bgt.w	800f7d6 <_dtoa_r+0x91e>
 800fa86:	e7a9      	b.n	800f9dc <_dtoa_r+0xb24>
 800fa88:	08011fe3 	.word	0x08011fe3
 800fa8c:	08011f40 	.word	0x08011f40
 800fa90:	08011f64 	.word	0x08011f64

0800fa94 <_localeconv_r>:
 800fa94:	4800      	ldr	r0, [pc, #0]	; (800fa98 <_localeconv_r+0x4>)
 800fa96:	4770      	bx	lr
 800fa98:	20000178 	.word	0x20000178

0800fa9c <malloc>:
 800fa9c:	4b02      	ldr	r3, [pc, #8]	; (800faa8 <malloc+0xc>)
 800fa9e:	4601      	mov	r1, r0
 800faa0:	6818      	ldr	r0, [r3, #0]
 800faa2:	f000 bc17 	b.w	80102d4 <_malloc_r>
 800faa6:	bf00      	nop
 800faa8:	20000024 	.word	0x20000024

0800faac <memcpy>:
 800faac:	440a      	add	r2, r1
 800faae:	4291      	cmp	r1, r2
 800fab0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fab4:	d100      	bne.n	800fab8 <memcpy+0xc>
 800fab6:	4770      	bx	lr
 800fab8:	b510      	push	{r4, lr}
 800faba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fabe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fac2:	4291      	cmp	r1, r2
 800fac4:	d1f9      	bne.n	800faba <memcpy+0xe>
 800fac6:	bd10      	pop	{r4, pc}

0800fac8 <_Balloc>:
 800fac8:	b570      	push	{r4, r5, r6, lr}
 800faca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800facc:	4604      	mov	r4, r0
 800face:	460d      	mov	r5, r1
 800fad0:	b976      	cbnz	r6, 800faf0 <_Balloc+0x28>
 800fad2:	2010      	movs	r0, #16
 800fad4:	f7ff ffe2 	bl	800fa9c <malloc>
 800fad8:	4602      	mov	r2, r0
 800fada:	6260      	str	r0, [r4, #36]	; 0x24
 800fadc:	b920      	cbnz	r0, 800fae8 <_Balloc+0x20>
 800fade:	4b18      	ldr	r3, [pc, #96]	; (800fb40 <_Balloc+0x78>)
 800fae0:	4818      	ldr	r0, [pc, #96]	; (800fb44 <_Balloc+0x7c>)
 800fae2:	2166      	movs	r1, #102	; 0x66
 800fae4:	f000 fdd6 	bl	8010694 <__assert_func>
 800fae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800faec:	6006      	str	r6, [r0, #0]
 800faee:	60c6      	str	r6, [r0, #12]
 800faf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800faf2:	68f3      	ldr	r3, [r6, #12]
 800faf4:	b183      	cbz	r3, 800fb18 <_Balloc+0x50>
 800faf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fafe:	b9b8      	cbnz	r0, 800fb30 <_Balloc+0x68>
 800fb00:	2101      	movs	r1, #1
 800fb02:	fa01 f605 	lsl.w	r6, r1, r5
 800fb06:	1d72      	adds	r2, r6, #5
 800fb08:	0092      	lsls	r2, r2, #2
 800fb0a:	4620      	mov	r0, r4
 800fb0c:	f000 fb60 	bl	80101d0 <_calloc_r>
 800fb10:	b160      	cbz	r0, 800fb2c <_Balloc+0x64>
 800fb12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb16:	e00e      	b.n	800fb36 <_Balloc+0x6e>
 800fb18:	2221      	movs	r2, #33	; 0x21
 800fb1a:	2104      	movs	r1, #4
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 fb57 	bl	80101d0 <_calloc_r>
 800fb22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb24:	60f0      	str	r0, [r6, #12]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1e4      	bne.n	800faf6 <_Balloc+0x2e>
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	bd70      	pop	{r4, r5, r6, pc}
 800fb30:	6802      	ldr	r2, [r0, #0]
 800fb32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb36:	2300      	movs	r3, #0
 800fb38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fb3c:	e7f7      	b.n	800fb2e <_Balloc+0x66>
 800fb3e:	bf00      	nop
 800fb40:	08011f71 	.word	0x08011f71
 800fb44:	08011ff4 	.word	0x08011ff4

0800fb48 <_Bfree>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	460c      	mov	r4, r1
 800fb50:	b976      	cbnz	r6, 800fb70 <_Bfree+0x28>
 800fb52:	2010      	movs	r0, #16
 800fb54:	f7ff ffa2 	bl	800fa9c <malloc>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	6268      	str	r0, [r5, #36]	; 0x24
 800fb5c:	b920      	cbnz	r0, 800fb68 <_Bfree+0x20>
 800fb5e:	4b09      	ldr	r3, [pc, #36]	; (800fb84 <_Bfree+0x3c>)
 800fb60:	4809      	ldr	r0, [pc, #36]	; (800fb88 <_Bfree+0x40>)
 800fb62:	218a      	movs	r1, #138	; 0x8a
 800fb64:	f000 fd96 	bl	8010694 <__assert_func>
 800fb68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb6c:	6006      	str	r6, [r0, #0]
 800fb6e:	60c6      	str	r6, [r0, #12]
 800fb70:	b13c      	cbz	r4, 800fb82 <_Bfree+0x3a>
 800fb72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fb74:	6862      	ldr	r2, [r4, #4]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fb7c:	6021      	str	r1, [r4, #0]
 800fb7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fb82:	bd70      	pop	{r4, r5, r6, pc}
 800fb84:	08011f71 	.word	0x08011f71
 800fb88:	08011ff4 	.word	0x08011ff4

0800fb8c <__multadd>:
 800fb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb90:	690d      	ldr	r5, [r1, #16]
 800fb92:	4607      	mov	r7, r0
 800fb94:	460c      	mov	r4, r1
 800fb96:	461e      	mov	r6, r3
 800fb98:	f101 0c14 	add.w	ip, r1, #20
 800fb9c:	2000      	movs	r0, #0
 800fb9e:	f8dc 3000 	ldr.w	r3, [ip]
 800fba2:	b299      	uxth	r1, r3
 800fba4:	fb02 6101 	mla	r1, r2, r1, r6
 800fba8:	0c1e      	lsrs	r6, r3, #16
 800fbaa:	0c0b      	lsrs	r3, r1, #16
 800fbac:	fb02 3306 	mla	r3, r2, r6, r3
 800fbb0:	b289      	uxth	r1, r1
 800fbb2:	3001      	adds	r0, #1
 800fbb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fbb8:	4285      	cmp	r5, r0
 800fbba:	f84c 1b04 	str.w	r1, [ip], #4
 800fbbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fbc2:	dcec      	bgt.n	800fb9e <__multadd+0x12>
 800fbc4:	b30e      	cbz	r6, 800fc0a <__multadd+0x7e>
 800fbc6:	68a3      	ldr	r3, [r4, #8]
 800fbc8:	42ab      	cmp	r3, r5
 800fbca:	dc19      	bgt.n	800fc00 <__multadd+0x74>
 800fbcc:	6861      	ldr	r1, [r4, #4]
 800fbce:	4638      	mov	r0, r7
 800fbd0:	3101      	adds	r1, #1
 800fbd2:	f7ff ff79 	bl	800fac8 <_Balloc>
 800fbd6:	4680      	mov	r8, r0
 800fbd8:	b928      	cbnz	r0, 800fbe6 <__multadd+0x5a>
 800fbda:	4602      	mov	r2, r0
 800fbdc:	4b0c      	ldr	r3, [pc, #48]	; (800fc10 <__multadd+0x84>)
 800fbde:	480d      	ldr	r0, [pc, #52]	; (800fc14 <__multadd+0x88>)
 800fbe0:	21b5      	movs	r1, #181	; 0xb5
 800fbe2:	f000 fd57 	bl	8010694 <__assert_func>
 800fbe6:	6922      	ldr	r2, [r4, #16]
 800fbe8:	3202      	adds	r2, #2
 800fbea:	f104 010c 	add.w	r1, r4, #12
 800fbee:	0092      	lsls	r2, r2, #2
 800fbf0:	300c      	adds	r0, #12
 800fbf2:	f7ff ff5b 	bl	800faac <memcpy>
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4638      	mov	r0, r7
 800fbfa:	f7ff ffa5 	bl	800fb48 <_Bfree>
 800fbfe:	4644      	mov	r4, r8
 800fc00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fc04:	3501      	adds	r5, #1
 800fc06:	615e      	str	r6, [r3, #20]
 800fc08:	6125      	str	r5, [r4, #16]
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc10:	08011fe3 	.word	0x08011fe3
 800fc14:	08011ff4 	.word	0x08011ff4

0800fc18 <__hi0bits>:
 800fc18:	0c03      	lsrs	r3, r0, #16
 800fc1a:	041b      	lsls	r3, r3, #16
 800fc1c:	b9d3      	cbnz	r3, 800fc54 <__hi0bits+0x3c>
 800fc1e:	0400      	lsls	r0, r0, #16
 800fc20:	2310      	movs	r3, #16
 800fc22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc26:	bf04      	itt	eq
 800fc28:	0200      	lsleq	r0, r0, #8
 800fc2a:	3308      	addeq	r3, #8
 800fc2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc30:	bf04      	itt	eq
 800fc32:	0100      	lsleq	r0, r0, #4
 800fc34:	3304      	addeq	r3, #4
 800fc36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fc3a:	bf04      	itt	eq
 800fc3c:	0080      	lsleq	r0, r0, #2
 800fc3e:	3302      	addeq	r3, #2
 800fc40:	2800      	cmp	r0, #0
 800fc42:	db05      	blt.n	800fc50 <__hi0bits+0x38>
 800fc44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fc48:	f103 0301 	add.w	r3, r3, #1
 800fc4c:	bf08      	it	eq
 800fc4e:	2320      	moveq	r3, #32
 800fc50:	4618      	mov	r0, r3
 800fc52:	4770      	bx	lr
 800fc54:	2300      	movs	r3, #0
 800fc56:	e7e4      	b.n	800fc22 <__hi0bits+0xa>

0800fc58 <__lo0bits>:
 800fc58:	6803      	ldr	r3, [r0, #0]
 800fc5a:	f013 0207 	ands.w	r2, r3, #7
 800fc5e:	4601      	mov	r1, r0
 800fc60:	d00b      	beq.n	800fc7a <__lo0bits+0x22>
 800fc62:	07da      	lsls	r2, r3, #31
 800fc64:	d423      	bmi.n	800fcae <__lo0bits+0x56>
 800fc66:	0798      	lsls	r0, r3, #30
 800fc68:	bf49      	itett	mi
 800fc6a:	085b      	lsrmi	r3, r3, #1
 800fc6c:	089b      	lsrpl	r3, r3, #2
 800fc6e:	2001      	movmi	r0, #1
 800fc70:	600b      	strmi	r3, [r1, #0]
 800fc72:	bf5c      	itt	pl
 800fc74:	600b      	strpl	r3, [r1, #0]
 800fc76:	2002      	movpl	r0, #2
 800fc78:	4770      	bx	lr
 800fc7a:	b298      	uxth	r0, r3
 800fc7c:	b9a8      	cbnz	r0, 800fcaa <__lo0bits+0x52>
 800fc7e:	0c1b      	lsrs	r3, r3, #16
 800fc80:	2010      	movs	r0, #16
 800fc82:	b2da      	uxtb	r2, r3
 800fc84:	b90a      	cbnz	r2, 800fc8a <__lo0bits+0x32>
 800fc86:	3008      	adds	r0, #8
 800fc88:	0a1b      	lsrs	r3, r3, #8
 800fc8a:	071a      	lsls	r2, r3, #28
 800fc8c:	bf04      	itt	eq
 800fc8e:	091b      	lsreq	r3, r3, #4
 800fc90:	3004      	addeq	r0, #4
 800fc92:	079a      	lsls	r2, r3, #30
 800fc94:	bf04      	itt	eq
 800fc96:	089b      	lsreq	r3, r3, #2
 800fc98:	3002      	addeq	r0, #2
 800fc9a:	07da      	lsls	r2, r3, #31
 800fc9c:	d403      	bmi.n	800fca6 <__lo0bits+0x4e>
 800fc9e:	085b      	lsrs	r3, r3, #1
 800fca0:	f100 0001 	add.w	r0, r0, #1
 800fca4:	d005      	beq.n	800fcb2 <__lo0bits+0x5a>
 800fca6:	600b      	str	r3, [r1, #0]
 800fca8:	4770      	bx	lr
 800fcaa:	4610      	mov	r0, r2
 800fcac:	e7e9      	b.n	800fc82 <__lo0bits+0x2a>
 800fcae:	2000      	movs	r0, #0
 800fcb0:	4770      	bx	lr
 800fcb2:	2020      	movs	r0, #32
 800fcb4:	4770      	bx	lr
	...

0800fcb8 <__i2b>:
 800fcb8:	b510      	push	{r4, lr}
 800fcba:	460c      	mov	r4, r1
 800fcbc:	2101      	movs	r1, #1
 800fcbe:	f7ff ff03 	bl	800fac8 <_Balloc>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	b928      	cbnz	r0, 800fcd2 <__i2b+0x1a>
 800fcc6:	4b05      	ldr	r3, [pc, #20]	; (800fcdc <__i2b+0x24>)
 800fcc8:	4805      	ldr	r0, [pc, #20]	; (800fce0 <__i2b+0x28>)
 800fcca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fcce:	f000 fce1 	bl	8010694 <__assert_func>
 800fcd2:	2301      	movs	r3, #1
 800fcd4:	6144      	str	r4, [r0, #20]
 800fcd6:	6103      	str	r3, [r0, #16]
 800fcd8:	bd10      	pop	{r4, pc}
 800fcda:	bf00      	nop
 800fcdc:	08011fe3 	.word	0x08011fe3
 800fce0:	08011ff4 	.word	0x08011ff4

0800fce4 <__multiply>:
 800fce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce8:	4691      	mov	r9, r2
 800fcea:	690a      	ldr	r2, [r1, #16]
 800fcec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	bfb8      	it	lt
 800fcf4:	460b      	movlt	r3, r1
 800fcf6:	460c      	mov	r4, r1
 800fcf8:	bfbc      	itt	lt
 800fcfa:	464c      	movlt	r4, r9
 800fcfc:	4699      	movlt	r9, r3
 800fcfe:	6927      	ldr	r7, [r4, #16]
 800fd00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fd04:	68a3      	ldr	r3, [r4, #8]
 800fd06:	6861      	ldr	r1, [r4, #4]
 800fd08:	eb07 060a 	add.w	r6, r7, sl
 800fd0c:	42b3      	cmp	r3, r6
 800fd0e:	b085      	sub	sp, #20
 800fd10:	bfb8      	it	lt
 800fd12:	3101      	addlt	r1, #1
 800fd14:	f7ff fed8 	bl	800fac8 <_Balloc>
 800fd18:	b930      	cbnz	r0, 800fd28 <__multiply+0x44>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	4b44      	ldr	r3, [pc, #272]	; (800fe30 <__multiply+0x14c>)
 800fd1e:	4845      	ldr	r0, [pc, #276]	; (800fe34 <__multiply+0x150>)
 800fd20:	f240 115d 	movw	r1, #349	; 0x15d
 800fd24:	f000 fcb6 	bl	8010694 <__assert_func>
 800fd28:	f100 0514 	add.w	r5, r0, #20
 800fd2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fd30:	462b      	mov	r3, r5
 800fd32:	2200      	movs	r2, #0
 800fd34:	4543      	cmp	r3, r8
 800fd36:	d321      	bcc.n	800fd7c <__multiply+0x98>
 800fd38:	f104 0314 	add.w	r3, r4, #20
 800fd3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fd40:	f109 0314 	add.w	r3, r9, #20
 800fd44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fd48:	9202      	str	r2, [sp, #8]
 800fd4a:	1b3a      	subs	r2, r7, r4
 800fd4c:	3a15      	subs	r2, #21
 800fd4e:	f022 0203 	bic.w	r2, r2, #3
 800fd52:	3204      	adds	r2, #4
 800fd54:	f104 0115 	add.w	r1, r4, #21
 800fd58:	428f      	cmp	r7, r1
 800fd5a:	bf38      	it	cc
 800fd5c:	2204      	movcc	r2, #4
 800fd5e:	9201      	str	r2, [sp, #4]
 800fd60:	9a02      	ldr	r2, [sp, #8]
 800fd62:	9303      	str	r3, [sp, #12]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d80c      	bhi.n	800fd82 <__multiply+0x9e>
 800fd68:	2e00      	cmp	r6, #0
 800fd6a:	dd03      	ble.n	800fd74 <__multiply+0x90>
 800fd6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d05a      	beq.n	800fe2a <__multiply+0x146>
 800fd74:	6106      	str	r6, [r0, #16]
 800fd76:	b005      	add	sp, #20
 800fd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7c:	f843 2b04 	str.w	r2, [r3], #4
 800fd80:	e7d8      	b.n	800fd34 <__multiply+0x50>
 800fd82:	f8b3 a000 	ldrh.w	sl, [r3]
 800fd86:	f1ba 0f00 	cmp.w	sl, #0
 800fd8a:	d024      	beq.n	800fdd6 <__multiply+0xf2>
 800fd8c:	f104 0e14 	add.w	lr, r4, #20
 800fd90:	46a9      	mov	r9, r5
 800fd92:	f04f 0c00 	mov.w	ip, #0
 800fd96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fd9a:	f8d9 1000 	ldr.w	r1, [r9]
 800fd9e:	fa1f fb82 	uxth.w	fp, r2
 800fda2:	b289      	uxth	r1, r1
 800fda4:	fb0a 110b 	mla	r1, sl, fp, r1
 800fda8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fdac:	f8d9 2000 	ldr.w	r2, [r9]
 800fdb0:	4461      	add	r1, ip
 800fdb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fdb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800fdba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fdbe:	b289      	uxth	r1, r1
 800fdc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fdc4:	4577      	cmp	r7, lr
 800fdc6:	f849 1b04 	str.w	r1, [r9], #4
 800fdca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fdce:	d8e2      	bhi.n	800fd96 <__multiply+0xb2>
 800fdd0:	9a01      	ldr	r2, [sp, #4]
 800fdd2:	f845 c002 	str.w	ip, [r5, r2]
 800fdd6:	9a03      	ldr	r2, [sp, #12]
 800fdd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fddc:	3304      	adds	r3, #4
 800fdde:	f1b9 0f00 	cmp.w	r9, #0
 800fde2:	d020      	beq.n	800fe26 <__multiply+0x142>
 800fde4:	6829      	ldr	r1, [r5, #0]
 800fde6:	f104 0c14 	add.w	ip, r4, #20
 800fdea:	46ae      	mov	lr, r5
 800fdec:	f04f 0a00 	mov.w	sl, #0
 800fdf0:	f8bc b000 	ldrh.w	fp, [ip]
 800fdf4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fdf8:	fb09 220b 	mla	r2, r9, fp, r2
 800fdfc:	4492      	add	sl, r2
 800fdfe:	b289      	uxth	r1, r1
 800fe00:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fe04:	f84e 1b04 	str.w	r1, [lr], #4
 800fe08:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fe0c:	f8be 1000 	ldrh.w	r1, [lr]
 800fe10:	0c12      	lsrs	r2, r2, #16
 800fe12:	fb09 1102 	mla	r1, r9, r2, r1
 800fe16:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fe1a:	4567      	cmp	r7, ip
 800fe1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fe20:	d8e6      	bhi.n	800fdf0 <__multiply+0x10c>
 800fe22:	9a01      	ldr	r2, [sp, #4]
 800fe24:	50a9      	str	r1, [r5, r2]
 800fe26:	3504      	adds	r5, #4
 800fe28:	e79a      	b.n	800fd60 <__multiply+0x7c>
 800fe2a:	3e01      	subs	r6, #1
 800fe2c:	e79c      	b.n	800fd68 <__multiply+0x84>
 800fe2e:	bf00      	nop
 800fe30:	08011fe3 	.word	0x08011fe3
 800fe34:	08011ff4 	.word	0x08011ff4

0800fe38 <__pow5mult>:
 800fe38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe3c:	4615      	mov	r5, r2
 800fe3e:	f012 0203 	ands.w	r2, r2, #3
 800fe42:	4606      	mov	r6, r0
 800fe44:	460f      	mov	r7, r1
 800fe46:	d007      	beq.n	800fe58 <__pow5mult+0x20>
 800fe48:	4c25      	ldr	r4, [pc, #148]	; (800fee0 <__pow5mult+0xa8>)
 800fe4a:	3a01      	subs	r2, #1
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fe52:	f7ff fe9b 	bl	800fb8c <__multadd>
 800fe56:	4607      	mov	r7, r0
 800fe58:	10ad      	asrs	r5, r5, #2
 800fe5a:	d03d      	beq.n	800fed8 <__pow5mult+0xa0>
 800fe5c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fe5e:	b97c      	cbnz	r4, 800fe80 <__pow5mult+0x48>
 800fe60:	2010      	movs	r0, #16
 800fe62:	f7ff fe1b 	bl	800fa9c <malloc>
 800fe66:	4602      	mov	r2, r0
 800fe68:	6270      	str	r0, [r6, #36]	; 0x24
 800fe6a:	b928      	cbnz	r0, 800fe78 <__pow5mult+0x40>
 800fe6c:	4b1d      	ldr	r3, [pc, #116]	; (800fee4 <__pow5mult+0xac>)
 800fe6e:	481e      	ldr	r0, [pc, #120]	; (800fee8 <__pow5mult+0xb0>)
 800fe70:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fe74:	f000 fc0e 	bl	8010694 <__assert_func>
 800fe78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe7c:	6004      	str	r4, [r0, #0]
 800fe7e:	60c4      	str	r4, [r0, #12]
 800fe80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fe84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fe88:	b94c      	cbnz	r4, 800fe9e <__pow5mult+0x66>
 800fe8a:	f240 2171 	movw	r1, #625	; 0x271
 800fe8e:	4630      	mov	r0, r6
 800fe90:	f7ff ff12 	bl	800fcb8 <__i2b>
 800fe94:	2300      	movs	r3, #0
 800fe96:	f8c8 0008 	str.w	r0, [r8, #8]
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	6003      	str	r3, [r0, #0]
 800fe9e:	f04f 0900 	mov.w	r9, #0
 800fea2:	07eb      	lsls	r3, r5, #31
 800fea4:	d50a      	bpl.n	800febc <__pow5mult+0x84>
 800fea6:	4639      	mov	r1, r7
 800fea8:	4622      	mov	r2, r4
 800feaa:	4630      	mov	r0, r6
 800feac:	f7ff ff1a 	bl	800fce4 <__multiply>
 800feb0:	4639      	mov	r1, r7
 800feb2:	4680      	mov	r8, r0
 800feb4:	4630      	mov	r0, r6
 800feb6:	f7ff fe47 	bl	800fb48 <_Bfree>
 800feba:	4647      	mov	r7, r8
 800febc:	106d      	asrs	r5, r5, #1
 800febe:	d00b      	beq.n	800fed8 <__pow5mult+0xa0>
 800fec0:	6820      	ldr	r0, [r4, #0]
 800fec2:	b938      	cbnz	r0, 800fed4 <__pow5mult+0x9c>
 800fec4:	4622      	mov	r2, r4
 800fec6:	4621      	mov	r1, r4
 800fec8:	4630      	mov	r0, r6
 800feca:	f7ff ff0b 	bl	800fce4 <__multiply>
 800fece:	6020      	str	r0, [r4, #0]
 800fed0:	f8c0 9000 	str.w	r9, [r0]
 800fed4:	4604      	mov	r4, r0
 800fed6:	e7e4      	b.n	800fea2 <__pow5mult+0x6a>
 800fed8:	4638      	mov	r0, r7
 800feda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fede:	bf00      	nop
 800fee0:	08012140 	.word	0x08012140
 800fee4:	08011f71 	.word	0x08011f71
 800fee8:	08011ff4 	.word	0x08011ff4

0800feec <__lshift>:
 800feec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fef0:	460c      	mov	r4, r1
 800fef2:	6849      	ldr	r1, [r1, #4]
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	4607      	mov	r7, r0
 800fefe:	4691      	mov	r9, r2
 800ff00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff04:	f108 0601 	add.w	r6, r8, #1
 800ff08:	42b3      	cmp	r3, r6
 800ff0a:	db0b      	blt.n	800ff24 <__lshift+0x38>
 800ff0c:	4638      	mov	r0, r7
 800ff0e:	f7ff fddb 	bl	800fac8 <_Balloc>
 800ff12:	4605      	mov	r5, r0
 800ff14:	b948      	cbnz	r0, 800ff2a <__lshift+0x3e>
 800ff16:	4602      	mov	r2, r0
 800ff18:	4b2a      	ldr	r3, [pc, #168]	; (800ffc4 <__lshift+0xd8>)
 800ff1a:	482b      	ldr	r0, [pc, #172]	; (800ffc8 <__lshift+0xdc>)
 800ff1c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff20:	f000 fbb8 	bl	8010694 <__assert_func>
 800ff24:	3101      	adds	r1, #1
 800ff26:	005b      	lsls	r3, r3, #1
 800ff28:	e7ee      	b.n	800ff08 <__lshift+0x1c>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	f100 0114 	add.w	r1, r0, #20
 800ff30:	f100 0210 	add.w	r2, r0, #16
 800ff34:	4618      	mov	r0, r3
 800ff36:	4553      	cmp	r3, sl
 800ff38:	db37      	blt.n	800ffaa <__lshift+0xbe>
 800ff3a:	6920      	ldr	r0, [r4, #16]
 800ff3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ff40:	f104 0314 	add.w	r3, r4, #20
 800ff44:	f019 091f 	ands.w	r9, r9, #31
 800ff48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ff4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ff50:	d02f      	beq.n	800ffb2 <__lshift+0xc6>
 800ff52:	f1c9 0e20 	rsb	lr, r9, #32
 800ff56:	468a      	mov	sl, r1
 800ff58:	f04f 0c00 	mov.w	ip, #0
 800ff5c:	681a      	ldr	r2, [r3, #0]
 800ff5e:	fa02 f209 	lsl.w	r2, r2, r9
 800ff62:	ea42 020c 	orr.w	r2, r2, ip
 800ff66:	f84a 2b04 	str.w	r2, [sl], #4
 800ff6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff6e:	4298      	cmp	r0, r3
 800ff70:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ff74:	d8f2      	bhi.n	800ff5c <__lshift+0x70>
 800ff76:	1b03      	subs	r3, r0, r4
 800ff78:	3b15      	subs	r3, #21
 800ff7a:	f023 0303 	bic.w	r3, r3, #3
 800ff7e:	3304      	adds	r3, #4
 800ff80:	f104 0215 	add.w	r2, r4, #21
 800ff84:	4290      	cmp	r0, r2
 800ff86:	bf38      	it	cc
 800ff88:	2304      	movcc	r3, #4
 800ff8a:	f841 c003 	str.w	ip, [r1, r3]
 800ff8e:	f1bc 0f00 	cmp.w	ip, #0
 800ff92:	d001      	beq.n	800ff98 <__lshift+0xac>
 800ff94:	f108 0602 	add.w	r6, r8, #2
 800ff98:	3e01      	subs	r6, #1
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	612e      	str	r6, [r5, #16]
 800ff9e:	4621      	mov	r1, r4
 800ffa0:	f7ff fdd2 	bl	800fb48 <_Bfree>
 800ffa4:	4628      	mov	r0, r5
 800ffa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800ffae:	3301      	adds	r3, #1
 800ffb0:	e7c1      	b.n	800ff36 <__lshift+0x4a>
 800ffb2:	3904      	subs	r1, #4
 800ffb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ffbc:	4298      	cmp	r0, r3
 800ffbe:	d8f9      	bhi.n	800ffb4 <__lshift+0xc8>
 800ffc0:	e7ea      	b.n	800ff98 <__lshift+0xac>
 800ffc2:	bf00      	nop
 800ffc4:	08011fe3 	.word	0x08011fe3
 800ffc8:	08011ff4 	.word	0x08011ff4

0800ffcc <__mcmp>:
 800ffcc:	b530      	push	{r4, r5, lr}
 800ffce:	6902      	ldr	r2, [r0, #16]
 800ffd0:	690c      	ldr	r4, [r1, #16]
 800ffd2:	1b12      	subs	r2, r2, r4
 800ffd4:	d10e      	bne.n	800fff4 <__mcmp+0x28>
 800ffd6:	f100 0314 	add.w	r3, r0, #20
 800ffda:	3114      	adds	r1, #20
 800ffdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ffe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ffe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ffe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ffec:	42a5      	cmp	r5, r4
 800ffee:	d003      	beq.n	800fff8 <__mcmp+0x2c>
 800fff0:	d305      	bcc.n	800fffe <__mcmp+0x32>
 800fff2:	2201      	movs	r2, #1
 800fff4:	4610      	mov	r0, r2
 800fff6:	bd30      	pop	{r4, r5, pc}
 800fff8:	4283      	cmp	r3, r0
 800fffa:	d3f3      	bcc.n	800ffe4 <__mcmp+0x18>
 800fffc:	e7fa      	b.n	800fff4 <__mcmp+0x28>
 800fffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010002:	e7f7      	b.n	800fff4 <__mcmp+0x28>

08010004 <__mdiff>:
 8010004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010008:	460c      	mov	r4, r1
 801000a:	4606      	mov	r6, r0
 801000c:	4611      	mov	r1, r2
 801000e:	4620      	mov	r0, r4
 8010010:	4690      	mov	r8, r2
 8010012:	f7ff ffdb 	bl	800ffcc <__mcmp>
 8010016:	1e05      	subs	r5, r0, #0
 8010018:	d110      	bne.n	801003c <__mdiff+0x38>
 801001a:	4629      	mov	r1, r5
 801001c:	4630      	mov	r0, r6
 801001e:	f7ff fd53 	bl	800fac8 <_Balloc>
 8010022:	b930      	cbnz	r0, 8010032 <__mdiff+0x2e>
 8010024:	4b3a      	ldr	r3, [pc, #232]	; (8010110 <__mdiff+0x10c>)
 8010026:	4602      	mov	r2, r0
 8010028:	f240 2132 	movw	r1, #562	; 0x232
 801002c:	4839      	ldr	r0, [pc, #228]	; (8010114 <__mdiff+0x110>)
 801002e:	f000 fb31 	bl	8010694 <__assert_func>
 8010032:	2301      	movs	r3, #1
 8010034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801003c:	bfa4      	itt	ge
 801003e:	4643      	movge	r3, r8
 8010040:	46a0      	movge	r8, r4
 8010042:	4630      	mov	r0, r6
 8010044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010048:	bfa6      	itte	ge
 801004a:	461c      	movge	r4, r3
 801004c:	2500      	movge	r5, #0
 801004e:	2501      	movlt	r5, #1
 8010050:	f7ff fd3a 	bl	800fac8 <_Balloc>
 8010054:	b920      	cbnz	r0, 8010060 <__mdiff+0x5c>
 8010056:	4b2e      	ldr	r3, [pc, #184]	; (8010110 <__mdiff+0x10c>)
 8010058:	4602      	mov	r2, r0
 801005a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801005e:	e7e5      	b.n	801002c <__mdiff+0x28>
 8010060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010064:	6926      	ldr	r6, [r4, #16]
 8010066:	60c5      	str	r5, [r0, #12]
 8010068:	f104 0914 	add.w	r9, r4, #20
 801006c:	f108 0514 	add.w	r5, r8, #20
 8010070:	f100 0e14 	add.w	lr, r0, #20
 8010074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801007c:	f108 0210 	add.w	r2, r8, #16
 8010080:	46f2      	mov	sl, lr
 8010082:	2100      	movs	r1, #0
 8010084:	f859 3b04 	ldr.w	r3, [r9], #4
 8010088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801008c:	fa1f f883 	uxth.w	r8, r3
 8010090:	fa11 f18b 	uxtah	r1, r1, fp
 8010094:	0c1b      	lsrs	r3, r3, #16
 8010096:	eba1 0808 	sub.w	r8, r1, r8
 801009a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801009e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80100a2:	fa1f f888 	uxth.w	r8, r8
 80100a6:	1419      	asrs	r1, r3, #16
 80100a8:	454e      	cmp	r6, r9
 80100aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80100ae:	f84a 3b04 	str.w	r3, [sl], #4
 80100b2:	d8e7      	bhi.n	8010084 <__mdiff+0x80>
 80100b4:	1b33      	subs	r3, r6, r4
 80100b6:	3b15      	subs	r3, #21
 80100b8:	f023 0303 	bic.w	r3, r3, #3
 80100bc:	3304      	adds	r3, #4
 80100be:	3415      	adds	r4, #21
 80100c0:	42a6      	cmp	r6, r4
 80100c2:	bf38      	it	cc
 80100c4:	2304      	movcc	r3, #4
 80100c6:	441d      	add	r5, r3
 80100c8:	4473      	add	r3, lr
 80100ca:	469e      	mov	lr, r3
 80100cc:	462e      	mov	r6, r5
 80100ce:	4566      	cmp	r6, ip
 80100d0:	d30e      	bcc.n	80100f0 <__mdiff+0xec>
 80100d2:	f10c 0203 	add.w	r2, ip, #3
 80100d6:	1b52      	subs	r2, r2, r5
 80100d8:	f022 0203 	bic.w	r2, r2, #3
 80100dc:	3d03      	subs	r5, #3
 80100de:	45ac      	cmp	ip, r5
 80100e0:	bf38      	it	cc
 80100e2:	2200      	movcc	r2, #0
 80100e4:	441a      	add	r2, r3
 80100e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80100ea:	b17b      	cbz	r3, 801010c <__mdiff+0x108>
 80100ec:	6107      	str	r7, [r0, #16]
 80100ee:	e7a3      	b.n	8010038 <__mdiff+0x34>
 80100f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80100f4:	fa11 f288 	uxtah	r2, r1, r8
 80100f8:	1414      	asrs	r4, r2, #16
 80100fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80100fe:	b292      	uxth	r2, r2
 8010100:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010104:	f84e 2b04 	str.w	r2, [lr], #4
 8010108:	1421      	asrs	r1, r4, #16
 801010a:	e7e0      	b.n	80100ce <__mdiff+0xca>
 801010c:	3f01      	subs	r7, #1
 801010e:	e7ea      	b.n	80100e6 <__mdiff+0xe2>
 8010110:	08011fe3 	.word	0x08011fe3
 8010114:	08011ff4 	.word	0x08011ff4

08010118 <__d2b>:
 8010118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801011c:	4689      	mov	r9, r1
 801011e:	2101      	movs	r1, #1
 8010120:	ec57 6b10 	vmov	r6, r7, d0
 8010124:	4690      	mov	r8, r2
 8010126:	f7ff fccf 	bl	800fac8 <_Balloc>
 801012a:	4604      	mov	r4, r0
 801012c:	b930      	cbnz	r0, 801013c <__d2b+0x24>
 801012e:	4602      	mov	r2, r0
 8010130:	4b25      	ldr	r3, [pc, #148]	; (80101c8 <__d2b+0xb0>)
 8010132:	4826      	ldr	r0, [pc, #152]	; (80101cc <__d2b+0xb4>)
 8010134:	f240 310a 	movw	r1, #778	; 0x30a
 8010138:	f000 faac 	bl	8010694 <__assert_func>
 801013c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010144:	bb35      	cbnz	r5, 8010194 <__d2b+0x7c>
 8010146:	2e00      	cmp	r6, #0
 8010148:	9301      	str	r3, [sp, #4]
 801014a:	d028      	beq.n	801019e <__d2b+0x86>
 801014c:	4668      	mov	r0, sp
 801014e:	9600      	str	r6, [sp, #0]
 8010150:	f7ff fd82 	bl	800fc58 <__lo0bits>
 8010154:	9900      	ldr	r1, [sp, #0]
 8010156:	b300      	cbz	r0, 801019a <__d2b+0x82>
 8010158:	9a01      	ldr	r2, [sp, #4]
 801015a:	f1c0 0320 	rsb	r3, r0, #32
 801015e:	fa02 f303 	lsl.w	r3, r2, r3
 8010162:	430b      	orrs	r3, r1
 8010164:	40c2      	lsrs	r2, r0
 8010166:	6163      	str	r3, [r4, #20]
 8010168:	9201      	str	r2, [sp, #4]
 801016a:	9b01      	ldr	r3, [sp, #4]
 801016c:	61a3      	str	r3, [r4, #24]
 801016e:	2b00      	cmp	r3, #0
 8010170:	bf14      	ite	ne
 8010172:	2202      	movne	r2, #2
 8010174:	2201      	moveq	r2, #1
 8010176:	6122      	str	r2, [r4, #16]
 8010178:	b1d5      	cbz	r5, 80101b0 <__d2b+0x98>
 801017a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801017e:	4405      	add	r5, r0
 8010180:	f8c9 5000 	str.w	r5, [r9]
 8010184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010188:	f8c8 0000 	str.w	r0, [r8]
 801018c:	4620      	mov	r0, r4
 801018e:	b003      	add	sp, #12
 8010190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010198:	e7d5      	b.n	8010146 <__d2b+0x2e>
 801019a:	6161      	str	r1, [r4, #20]
 801019c:	e7e5      	b.n	801016a <__d2b+0x52>
 801019e:	a801      	add	r0, sp, #4
 80101a0:	f7ff fd5a 	bl	800fc58 <__lo0bits>
 80101a4:	9b01      	ldr	r3, [sp, #4]
 80101a6:	6163      	str	r3, [r4, #20]
 80101a8:	2201      	movs	r2, #1
 80101aa:	6122      	str	r2, [r4, #16]
 80101ac:	3020      	adds	r0, #32
 80101ae:	e7e3      	b.n	8010178 <__d2b+0x60>
 80101b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80101b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80101b8:	f8c9 0000 	str.w	r0, [r9]
 80101bc:	6918      	ldr	r0, [r3, #16]
 80101be:	f7ff fd2b 	bl	800fc18 <__hi0bits>
 80101c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80101c6:	e7df      	b.n	8010188 <__d2b+0x70>
 80101c8:	08011fe3 	.word	0x08011fe3
 80101cc:	08011ff4 	.word	0x08011ff4

080101d0 <_calloc_r>:
 80101d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101d2:	fba1 2402 	umull	r2, r4, r1, r2
 80101d6:	b94c      	cbnz	r4, 80101ec <_calloc_r+0x1c>
 80101d8:	4611      	mov	r1, r2
 80101da:	9201      	str	r2, [sp, #4]
 80101dc:	f000 f87a 	bl	80102d4 <_malloc_r>
 80101e0:	9a01      	ldr	r2, [sp, #4]
 80101e2:	4605      	mov	r5, r0
 80101e4:	b930      	cbnz	r0, 80101f4 <_calloc_r+0x24>
 80101e6:	4628      	mov	r0, r5
 80101e8:	b003      	add	sp, #12
 80101ea:	bd30      	pop	{r4, r5, pc}
 80101ec:	220c      	movs	r2, #12
 80101ee:	6002      	str	r2, [r0, #0]
 80101f0:	2500      	movs	r5, #0
 80101f2:	e7f8      	b.n	80101e6 <_calloc_r+0x16>
 80101f4:	4621      	mov	r1, r4
 80101f6:	f7fe f93f 	bl	800e478 <memset>
 80101fa:	e7f4      	b.n	80101e6 <_calloc_r+0x16>

080101fc <_free_r>:
 80101fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80101fe:	2900      	cmp	r1, #0
 8010200:	d044      	beq.n	801028c <_free_r+0x90>
 8010202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010206:	9001      	str	r0, [sp, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	f1a1 0404 	sub.w	r4, r1, #4
 801020e:	bfb8      	it	lt
 8010210:	18e4      	addlt	r4, r4, r3
 8010212:	f000 fa9b 	bl	801074c <__malloc_lock>
 8010216:	4a1e      	ldr	r2, [pc, #120]	; (8010290 <_free_r+0x94>)
 8010218:	9801      	ldr	r0, [sp, #4]
 801021a:	6813      	ldr	r3, [r2, #0]
 801021c:	b933      	cbnz	r3, 801022c <_free_r+0x30>
 801021e:	6063      	str	r3, [r4, #4]
 8010220:	6014      	str	r4, [r2, #0]
 8010222:	b003      	add	sp, #12
 8010224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010228:	f000 ba96 	b.w	8010758 <__malloc_unlock>
 801022c:	42a3      	cmp	r3, r4
 801022e:	d908      	bls.n	8010242 <_free_r+0x46>
 8010230:	6825      	ldr	r5, [r4, #0]
 8010232:	1961      	adds	r1, r4, r5
 8010234:	428b      	cmp	r3, r1
 8010236:	bf01      	itttt	eq
 8010238:	6819      	ldreq	r1, [r3, #0]
 801023a:	685b      	ldreq	r3, [r3, #4]
 801023c:	1949      	addeq	r1, r1, r5
 801023e:	6021      	streq	r1, [r4, #0]
 8010240:	e7ed      	b.n	801021e <_free_r+0x22>
 8010242:	461a      	mov	r2, r3
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	b10b      	cbz	r3, 801024c <_free_r+0x50>
 8010248:	42a3      	cmp	r3, r4
 801024a:	d9fa      	bls.n	8010242 <_free_r+0x46>
 801024c:	6811      	ldr	r1, [r2, #0]
 801024e:	1855      	adds	r5, r2, r1
 8010250:	42a5      	cmp	r5, r4
 8010252:	d10b      	bne.n	801026c <_free_r+0x70>
 8010254:	6824      	ldr	r4, [r4, #0]
 8010256:	4421      	add	r1, r4
 8010258:	1854      	adds	r4, r2, r1
 801025a:	42a3      	cmp	r3, r4
 801025c:	6011      	str	r1, [r2, #0]
 801025e:	d1e0      	bne.n	8010222 <_free_r+0x26>
 8010260:	681c      	ldr	r4, [r3, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	6053      	str	r3, [r2, #4]
 8010266:	4421      	add	r1, r4
 8010268:	6011      	str	r1, [r2, #0]
 801026a:	e7da      	b.n	8010222 <_free_r+0x26>
 801026c:	d902      	bls.n	8010274 <_free_r+0x78>
 801026e:	230c      	movs	r3, #12
 8010270:	6003      	str	r3, [r0, #0]
 8010272:	e7d6      	b.n	8010222 <_free_r+0x26>
 8010274:	6825      	ldr	r5, [r4, #0]
 8010276:	1961      	adds	r1, r4, r5
 8010278:	428b      	cmp	r3, r1
 801027a:	bf04      	itt	eq
 801027c:	6819      	ldreq	r1, [r3, #0]
 801027e:	685b      	ldreq	r3, [r3, #4]
 8010280:	6063      	str	r3, [r4, #4]
 8010282:	bf04      	itt	eq
 8010284:	1949      	addeq	r1, r1, r5
 8010286:	6021      	streq	r1, [r4, #0]
 8010288:	6054      	str	r4, [r2, #4]
 801028a:	e7ca      	b.n	8010222 <_free_r+0x26>
 801028c:	b003      	add	sp, #12
 801028e:	bd30      	pop	{r4, r5, pc}
 8010290:	20000624 	.word	0x20000624

08010294 <sbrk_aligned>:
 8010294:	b570      	push	{r4, r5, r6, lr}
 8010296:	4e0e      	ldr	r6, [pc, #56]	; (80102d0 <sbrk_aligned+0x3c>)
 8010298:	460c      	mov	r4, r1
 801029a:	6831      	ldr	r1, [r6, #0]
 801029c:	4605      	mov	r5, r0
 801029e:	b911      	cbnz	r1, 80102a6 <sbrk_aligned+0x12>
 80102a0:	f000 f9e8 	bl	8010674 <_sbrk_r>
 80102a4:	6030      	str	r0, [r6, #0]
 80102a6:	4621      	mov	r1, r4
 80102a8:	4628      	mov	r0, r5
 80102aa:	f000 f9e3 	bl	8010674 <_sbrk_r>
 80102ae:	1c43      	adds	r3, r0, #1
 80102b0:	d00a      	beq.n	80102c8 <sbrk_aligned+0x34>
 80102b2:	1cc4      	adds	r4, r0, #3
 80102b4:	f024 0403 	bic.w	r4, r4, #3
 80102b8:	42a0      	cmp	r0, r4
 80102ba:	d007      	beq.n	80102cc <sbrk_aligned+0x38>
 80102bc:	1a21      	subs	r1, r4, r0
 80102be:	4628      	mov	r0, r5
 80102c0:	f000 f9d8 	bl	8010674 <_sbrk_r>
 80102c4:	3001      	adds	r0, #1
 80102c6:	d101      	bne.n	80102cc <sbrk_aligned+0x38>
 80102c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80102cc:	4620      	mov	r0, r4
 80102ce:	bd70      	pop	{r4, r5, r6, pc}
 80102d0:	20000628 	.word	0x20000628

080102d4 <_malloc_r>:
 80102d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d8:	1ccd      	adds	r5, r1, #3
 80102da:	f025 0503 	bic.w	r5, r5, #3
 80102de:	3508      	adds	r5, #8
 80102e0:	2d0c      	cmp	r5, #12
 80102e2:	bf38      	it	cc
 80102e4:	250c      	movcc	r5, #12
 80102e6:	2d00      	cmp	r5, #0
 80102e8:	4607      	mov	r7, r0
 80102ea:	db01      	blt.n	80102f0 <_malloc_r+0x1c>
 80102ec:	42a9      	cmp	r1, r5
 80102ee:	d905      	bls.n	80102fc <_malloc_r+0x28>
 80102f0:	230c      	movs	r3, #12
 80102f2:	603b      	str	r3, [r7, #0]
 80102f4:	2600      	movs	r6, #0
 80102f6:	4630      	mov	r0, r6
 80102f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102fc:	4e2e      	ldr	r6, [pc, #184]	; (80103b8 <_malloc_r+0xe4>)
 80102fe:	f000 fa25 	bl	801074c <__malloc_lock>
 8010302:	6833      	ldr	r3, [r6, #0]
 8010304:	461c      	mov	r4, r3
 8010306:	bb34      	cbnz	r4, 8010356 <_malloc_r+0x82>
 8010308:	4629      	mov	r1, r5
 801030a:	4638      	mov	r0, r7
 801030c:	f7ff ffc2 	bl	8010294 <sbrk_aligned>
 8010310:	1c43      	adds	r3, r0, #1
 8010312:	4604      	mov	r4, r0
 8010314:	d14d      	bne.n	80103b2 <_malloc_r+0xde>
 8010316:	6834      	ldr	r4, [r6, #0]
 8010318:	4626      	mov	r6, r4
 801031a:	2e00      	cmp	r6, #0
 801031c:	d140      	bne.n	80103a0 <_malloc_r+0xcc>
 801031e:	6823      	ldr	r3, [r4, #0]
 8010320:	4631      	mov	r1, r6
 8010322:	4638      	mov	r0, r7
 8010324:	eb04 0803 	add.w	r8, r4, r3
 8010328:	f000 f9a4 	bl	8010674 <_sbrk_r>
 801032c:	4580      	cmp	r8, r0
 801032e:	d13a      	bne.n	80103a6 <_malloc_r+0xd2>
 8010330:	6821      	ldr	r1, [r4, #0]
 8010332:	3503      	adds	r5, #3
 8010334:	1a6d      	subs	r5, r5, r1
 8010336:	f025 0503 	bic.w	r5, r5, #3
 801033a:	3508      	adds	r5, #8
 801033c:	2d0c      	cmp	r5, #12
 801033e:	bf38      	it	cc
 8010340:	250c      	movcc	r5, #12
 8010342:	4629      	mov	r1, r5
 8010344:	4638      	mov	r0, r7
 8010346:	f7ff ffa5 	bl	8010294 <sbrk_aligned>
 801034a:	3001      	adds	r0, #1
 801034c:	d02b      	beq.n	80103a6 <_malloc_r+0xd2>
 801034e:	6823      	ldr	r3, [r4, #0]
 8010350:	442b      	add	r3, r5
 8010352:	6023      	str	r3, [r4, #0]
 8010354:	e00e      	b.n	8010374 <_malloc_r+0xa0>
 8010356:	6822      	ldr	r2, [r4, #0]
 8010358:	1b52      	subs	r2, r2, r5
 801035a:	d41e      	bmi.n	801039a <_malloc_r+0xc6>
 801035c:	2a0b      	cmp	r2, #11
 801035e:	d916      	bls.n	801038e <_malloc_r+0xba>
 8010360:	1961      	adds	r1, r4, r5
 8010362:	42a3      	cmp	r3, r4
 8010364:	6025      	str	r5, [r4, #0]
 8010366:	bf18      	it	ne
 8010368:	6059      	strne	r1, [r3, #4]
 801036a:	6863      	ldr	r3, [r4, #4]
 801036c:	bf08      	it	eq
 801036e:	6031      	streq	r1, [r6, #0]
 8010370:	5162      	str	r2, [r4, r5]
 8010372:	604b      	str	r3, [r1, #4]
 8010374:	4638      	mov	r0, r7
 8010376:	f104 060b 	add.w	r6, r4, #11
 801037a:	f000 f9ed 	bl	8010758 <__malloc_unlock>
 801037e:	f026 0607 	bic.w	r6, r6, #7
 8010382:	1d23      	adds	r3, r4, #4
 8010384:	1af2      	subs	r2, r6, r3
 8010386:	d0b6      	beq.n	80102f6 <_malloc_r+0x22>
 8010388:	1b9b      	subs	r3, r3, r6
 801038a:	50a3      	str	r3, [r4, r2]
 801038c:	e7b3      	b.n	80102f6 <_malloc_r+0x22>
 801038e:	6862      	ldr	r2, [r4, #4]
 8010390:	42a3      	cmp	r3, r4
 8010392:	bf0c      	ite	eq
 8010394:	6032      	streq	r2, [r6, #0]
 8010396:	605a      	strne	r2, [r3, #4]
 8010398:	e7ec      	b.n	8010374 <_malloc_r+0xa0>
 801039a:	4623      	mov	r3, r4
 801039c:	6864      	ldr	r4, [r4, #4]
 801039e:	e7b2      	b.n	8010306 <_malloc_r+0x32>
 80103a0:	4634      	mov	r4, r6
 80103a2:	6876      	ldr	r6, [r6, #4]
 80103a4:	e7b9      	b.n	801031a <_malloc_r+0x46>
 80103a6:	230c      	movs	r3, #12
 80103a8:	603b      	str	r3, [r7, #0]
 80103aa:	4638      	mov	r0, r7
 80103ac:	f000 f9d4 	bl	8010758 <__malloc_unlock>
 80103b0:	e7a1      	b.n	80102f6 <_malloc_r+0x22>
 80103b2:	6025      	str	r5, [r4, #0]
 80103b4:	e7de      	b.n	8010374 <_malloc_r+0xa0>
 80103b6:	bf00      	nop
 80103b8:	20000624 	.word	0x20000624

080103bc <__ssputs_r>:
 80103bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c0:	688e      	ldr	r6, [r1, #8]
 80103c2:	429e      	cmp	r6, r3
 80103c4:	4682      	mov	sl, r0
 80103c6:	460c      	mov	r4, r1
 80103c8:	4690      	mov	r8, r2
 80103ca:	461f      	mov	r7, r3
 80103cc:	d838      	bhi.n	8010440 <__ssputs_r+0x84>
 80103ce:	898a      	ldrh	r2, [r1, #12]
 80103d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103d4:	d032      	beq.n	801043c <__ssputs_r+0x80>
 80103d6:	6825      	ldr	r5, [r4, #0]
 80103d8:	6909      	ldr	r1, [r1, #16]
 80103da:	eba5 0901 	sub.w	r9, r5, r1
 80103de:	6965      	ldr	r5, [r4, #20]
 80103e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103e8:	3301      	adds	r3, #1
 80103ea:	444b      	add	r3, r9
 80103ec:	106d      	asrs	r5, r5, #1
 80103ee:	429d      	cmp	r5, r3
 80103f0:	bf38      	it	cc
 80103f2:	461d      	movcc	r5, r3
 80103f4:	0553      	lsls	r3, r2, #21
 80103f6:	d531      	bpl.n	801045c <__ssputs_r+0xa0>
 80103f8:	4629      	mov	r1, r5
 80103fa:	f7ff ff6b 	bl	80102d4 <_malloc_r>
 80103fe:	4606      	mov	r6, r0
 8010400:	b950      	cbnz	r0, 8010418 <__ssputs_r+0x5c>
 8010402:	230c      	movs	r3, #12
 8010404:	f8ca 3000 	str.w	r3, [sl]
 8010408:	89a3      	ldrh	r3, [r4, #12]
 801040a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801040e:	81a3      	strh	r3, [r4, #12]
 8010410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010418:	6921      	ldr	r1, [r4, #16]
 801041a:	464a      	mov	r2, r9
 801041c:	f7ff fb46 	bl	800faac <memcpy>
 8010420:	89a3      	ldrh	r3, [r4, #12]
 8010422:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801042a:	81a3      	strh	r3, [r4, #12]
 801042c:	6126      	str	r6, [r4, #16]
 801042e:	6165      	str	r5, [r4, #20]
 8010430:	444e      	add	r6, r9
 8010432:	eba5 0509 	sub.w	r5, r5, r9
 8010436:	6026      	str	r6, [r4, #0]
 8010438:	60a5      	str	r5, [r4, #8]
 801043a:	463e      	mov	r6, r7
 801043c:	42be      	cmp	r6, r7
 801043e:	d900      	bls.n	8010442 <__ssputs_r+0x86>
 8010440:	463e      	mov	r6, r7
 8010442:	6820      	ldr	r0, [r4, #0]
 8010444:	4632      	mov	r2, r6
 8010446:	4641      	mov	r1, r8
 8010448:	f000 f966 	bl	8010718 <memmove>
 801044c:	68a3      	ldr	r3, [r4, #8]
 801044e:	1b9b      	subs	r3, r3, r6
 8010450:	60a3      	str	r3, [r4, #8]
 8010452:	6823      	ldr	r3, [r4, #0]
 8010454:	4433      	add	r3, r6
 8010456:	6023      	str	r3, [r4, #0]
 8010458:	2000      	movs	r0, #0
 801045a:	e7db      	b.n	8010414 <__ssputs_r+0x58>
 801045c:	462a      	mov	r2, r5
 801045e:	f000 f981 	bl	8010764 <_realloc_r>
 8010462:	4606      	mov	r6, r0
 8010464:	2800      	cmp	r0, #0
 8010466:	d1e1      	bne.n	801042c <__ssputs_r+0x70>
 8010468:	6921      	ldr	r1, [r4, #16]
 801046a:	4650      	mov	r0, sl
 801046c:	f7ff fec6 	bl	80101fc <_free_r>
 8010470:	e7c7      	b.n	8010402 <__ssputs_r+0x46>
	...

08010474 <_svfiprintf_r>:
 8010474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010478:	4698      	mov	r8, r3
 801047a:	898b      	ldrh	r3, [r1, #12]
 801047c:	061b      	lsls	r3, r3, #24
 801047e:	b09d      	sub	sp, #116	; 0x74
 8010480:	4607      	mov	r7, r0
 8010482:	460d      	mov	r5, r1
 8010484:	4614      	mov	r4, r2
 8010486:	d50e      	bpl.n	80104a6 <_svfiprintf_r+0x32>
 8010488:	690b      	ldr	r3, [r1, #16]
 801048a:	b963      	cbnz	r3, 80104a6 <_svfiprintf_r+0x32>
 801048c:	2140      	movs	r1, #64	; 0x40
 801048e:	f7ff ff21 	bl	80102d4 <_malloc_r>
 8010492:	6028      	str	r0, [r5, #0]
 8010494:	6128      	str	r0, [r5, #16]
 8010496:	b920      	cbnz	r0, 80104a2 <_svfiprintf_r+0x2e>
 8010498:	230c      	movs	r3, #12
 801049a:	603b      	str	r3, [r7, #0]
 801049c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104a0:	e0d1      	b.n	8010646 <_svfiprintf_r+0x1d2>
 80104a2:	2340      	movs	r3, #64	; 0x40
 80104a4:	616b      	str	r3, [r5, #20]
 80104a6:	2300      	movs	r3, #0
 80104a8:	9309      	str	r3, [sp, #36]	; 0x24
 80104aa:	2320      	movs	r3, #32
 80104ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80104b4:	2330      	movs	r3, #48	; 0x30
 80104b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010660 <_svfiprintf_r+0x1ec>
 80104ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104be:	f04f 0901 	mov.w	r9, #1
 80104c2:	4623      	mov	r3, r4
 80104c4:	469a      	mov	sl, r3
 80104c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ca:	b10a      	cbz	r2, 80104d0 <_svfiprintf_r+0x5c>
 80104cc:	2a25      	cmp	r2, #37	; 0x25
 80104ce:	d1f9      	bne.n	80104c4 <_svfiprintf_r+0x50>
 80104d0:	ebba 0b04 	subs.w	fp, sl, r4
 80104d4:	d00b      	beq.n	80104ee <_svfiprintf_r+0x7a>
 80104d6:	465b      	mov	r3, fp
 80104d8:	4622      	mov	r2, r4
 80104da:	4629      	mov	r1, r5
 80104dc:	4638      	mov	r0, r7
 80104de:	f7ff ff6d 	bl	80103bc <__ssputs_r>
 80104e2:	3001      	adds	r0, #1
 80104e4:	f000 80aa 	beq.w	801063c <_svfiprintf_r+0x1c8>
 80104e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ea:	445a      	add	r2, fp
 80104ec:	9209      	str	r2, [sp, #36]	; 0x24
 80104ee:	f89a 3000 	ldrb.w	r3, [sl]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f000 80a2 	beq.w	801063c <_svfiprintf_r+0x1c8>
 80104f8:	2300      	movs	r3, #0
 80104fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010502:	f10a 0a01 	add.w	sl, sl, #1
 8010506:	9304      	str	r3, [sp, #16]
 8010508:	9307      	str	r3, [sp, #28]
 801050a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801050e:	931a      	str	r3, [sp, #104]	; 0x68
 8010510:	4654      	mov	r4, sl
 8010512:	2205      	movs	r2, #5
 8010514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010518:	4851      	ldr	r0, [pc, #324]	; (8010660 <_svfiprintf_r+0x1ec>)
 801051a:	f7ef fe69 	bl	80001f0 <memchr>
 801051e:	9a04      	ldr	r2, [sp, #16]
 8010520:	b9d8      	cbnz	r0, 801055a <_svfiprintf_r+0xe6>
 8010522:	06d0      	lsls	r0, r2, #27
 8010524:	bf44      	itt	mi
 8010526:	2320      	movmi	r3, #32
 8010528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801052c:	0711      	lsls	r1, r2, #28
 801052e:	bf44      	itt	mi
 8010530:	232b      	movmi	r3, #43	; 0x2b
 8010532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010536:	f89a 3000 	ldrb.w	r3, [sl]
 801053a:	2b2a      	cmp	r3, #42	; 0x2a
 801053c:	d015      	beq.n	801056a <_svfiprintf_r+0xf6>
 801053e:	9a07      	ldr	r2, [sp, #28]
 8010540:	4654      	mov	r4, sl
 8010542:	2000      	movs	r0, #0
 8010544:	f04f 0c0a 	mov.w	ip, #10
 8010548:	4621      	mov	r1, r4
 801054a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801054e:	3b30      	subs	r3, #48	; 0x30
 8010550:	2b09      	cmp	r3, #9
 8010552:	d94e      	bls.n	80105f2 <_svfiprintf_r+0x17e>
 8010554:	b1b0      	cbz	r0, 8010584 <_svfiprintf_r+0x110>
 8010556:	9207      	str	r2, [sp, #28]
 8010558:	e014      	b.n	8010584 <_svfiprintf_r+0x110>
 801055a:	eba0 0308 	sub.w	r3, r0, r8
 801055e:	fa09 f303 	lsl.w	r3, r9, r3
 8010562:	4313      	orrs	r3, r2
 8010564:	9304      	str	r3, [sp, #16]
 8010566:	46a2      	mov	sl, r4
 8010568:	e7d2      	b.n	8010510 <_svfiprintf_r+0x9c>
 801056a:	9b03      	ldr	r3, [sp, #12]
 801056c:	1d19      	adds	r1, r3, #4
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	9103      	str	r1, [sp, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	bfbb      	ittet	lt
 8010576:	425b      	neglt	r3, r3
 8010578:	f042 0202 	orrlt.w	r2, r2, #2
 801057c:	9307      	strge	r3, [sp, #28]
 801057e:	9307      	strlt	r3, [sp, #28]
 8010580:	bfb8      	it	lt
 8010582:	9204      	strlt	r2, [sp, #16]
 8010584:	7823      	ldrb	r3, [r4, #0]
 8010586:	2b2e      	cmp	r3, #46	; 0x2e
 8010588:	d10c      	bne.n	80105a4 <_svfiprintf_r+0x130>
 801058a:	7863      	ldrb	r3, [r4, #1]
 801058c:	2b2a      	cmp	r3, #42	; 0x2a
 801058e:	d135      	bne.n	80105fc <_svfiprintf_r+0x188>
 8010590:	9b03      	ldr	r3, [sp, #12]
 8010592:	1d1a      	adds	r2, r3, #4
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	9203      	str	r2, [sp, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	bfb8      	it	lt
 801059c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80105a0:	3402      	adds	r4, #2
 80105a2:	9305      	str	r3, [sp, #20]
 80105a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010670 <_svfiprintf_r+0x1fc>
 80105a8:	7821      	ldrb	r1, [r4, #0]
 80105aa:	2203      	movs	r2, #3
 80105ac:	4650      	mov	r0, sl
 80105ae:	f7ef fe1f 	bl	80001f0 <memchr>
 80105b2:	b140      	cbz	r0, 80105c6 <_svfiprintf_r+0x152>
 80105b4:	2340      	movs	r3, #64	; 0x40
 80105b6:	eba0 000a 	sub.w	r0, r0, sl
 80105ba:	fa03 f000 	lsl.w	r0, r3, r0
 80105be:	9b04      	ldr	r3, [sp, #16]
 80105c0:	4303      	orrs	r3, r0
 80105c2:	3401      	adds	r4, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ca:	4826      	ldr	r0, [pc, #152]	; (8010664 <_svfiprintf_r+0x1f0>)
 80105cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105d0:	2206      	movs	r2, #6
 80105d2:	f7ef fe0d 	bl	80001f0 <memchr>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	d038      	beq.n	801064c <_svfiprintf_r+0x1d8>
 80105da:	4b23      	ldr	r3, [pc, #140]	; (8010668 <_svfiprintf_r+0x1f4>)
 80105dc:	bb1b      	cbnz	r3, 8010626 <_svfiprintf_r+0x1b2>
 80105de:	9b03      	ldr	r3, [sp, #12]
 80105e0:	3307      	adds	r3, #7
 80105e2:	f023 0307 	bic.w	r3, r3, #7
 80105e6:	3308      	adds	r3, #8
 80105e8:	9303      	str	r3, [sp, #12]
 80105ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ec:	4433      	add	r3, r6
 80105ee:	9309      	str	r3, [sp, #36]	; 0x24
 80105f0:	e767      	b.n	80104c2 <_svfiprintf_r+0x4e>
 80105f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80105f6:	460c      	mov	r4, r1
 80105f8:	2001      	movs	r0, #1
 80105fa:	e7a5      	b.n	8010548 <_svfiprintf_r+0xd4>
 80105fc:	2300      	movs	r3, #0
 80105fe:	3401      	adds	r4, #1
 8010600:	9305      	str	r3, [sp, #20]
 8010602:	4619      	mov	r1, r3
 8010604:	f04f 0c0a 	mov.w	ip, #10
 8010608:	4620      	mov	r0, r4
 801060a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801060e:	3a30      	subs	r2, #48	; 0x30
 8010610:	2a09      	cmp	r2, #9
 8010612:	d903      	bls.n	801061c <_svfiprintf_r+0x1a8>
 8010614:	2b00      	cmp	r3, #0
 8010616:	d0c5      	beq.n	80105a4 <_svfiprintf_r+0x130>
 8010618:	9105      	str	r1, [sp, #20]
 801061a:	e7c3      	b.n	80105a4 <_svfiprintf_r+0x130>
 801061c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010620:	4604      	mov	r4, r0
 8010622:	2301      	movs	r3, #1
 8010624:	e7f0      	b.n	8010608 <_svfiprintf_r+0x194>
 8010626:	ab03      	add	r3, sp, #12
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	462a      	mov	r2, r5
 801062c:	4b0f      	ldr	r3, [pc, #60]	; (801066c <_svfiprintf_r+0x1f8>)
 801062e:	a904      	add	r1, sp, #16
 8010630:	4638      	mov	r0, r7
 8010632:	f7fd ffc9 	bl	800e5c8 <_printf_float>
 8010636:	1c42      	adds	r2, r0, #1
 8010638:	4606      	mov	r6, r0
 801063a:	d1d6      	bne.n	80105ea <_svfiprintf_r+0x176>
 801063c:	89ab      	ldrh	r3, [r5, #12]
 801063e:	065b      	lsls	r3, r3, #25
 8010640:	f53f af2c 	bmi.w	801049c <_svfiprintf_r+0x28>
 8010644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010646:	b01d      	add	sp, #116	; 0x74
 8010648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801064c:	ab03      	add	r3, sp, #12
 801064e:	9300      	str	r3, [sp, #0]
 8010650:	462a      	mov	r2, r5
 8010652:	4b06      	ldr	r3, [pc, #24]	; (801066c <_svfiprintf_r+0x1f8>)
 8010654:	a904      	add	r1, sp, #16
 8010656:	4638      	mov	r0, r7
 8010658:	f7fe fa5a 	bl	800eb10 <_printf_i>
 801065c:	e7eb      	b.n	8010636 <_svfiprintf_r+0x1c2>
 801065e:	bf00      	nop
 8010660:	0801214c 	.word	0x0801214c
 8010664:	08012156 	.word	0x08012156
 8010668:	0800e5c9 	.word	0x0800e5c9
 801066c:	080103bd 	.word	0x080103bd
 8010670:	08012152 	.word	0x08012152

08010674 <_sbrk_r>:
 8010674:	b538      	push	{r3, r4, r5, lr}
 8010676:	4d06      	ldr	r5, [pc, #24]	; (8010690 <_sbrk_r+0x1c>)
 8010678:	2300      	movs	r3, #0
 801067a:	4604      	mov	r4, r0
 801067c:	4608      	mov	r0, r1
 801067e:	602b      	str	r3, [r5, #0]
 8010680:	f7f4 fefe 	bl	8005480 <_sbrk>
 8010684:	1c43      	adds	r3, r0, #1
 8010686:	d102      	bne.n	801068e <_sbrk_r+0x1a>
 8010688:	682b      	ldr	r3, [r5, #0]
 801068a:	b103      	cbz	r3, 801068e <_sbrk_r+0x1a>
 801068c:	6023      	str	r3, [r4, #0]
 801068e:	bd38      	pop	{r3, r4, r5, pc}
 8010690:	2000062c 	.word	0x2000062c

08010694 <__assert_func>:
 8010694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010696:	4614      	mov	r4, r2
 8010698:	461a      	mov	r2, r3
 801069a:	4b09      	ldr	r3, [pc, #36]	; (80106c0 <__assert_func+0x2c>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	4605      	mov	r5, r0
 80106a0:	68d8      	ldr	r0, [r3, #12]
 80106a2:	b14c      	cbz	r4, 80106b8 <__assert_func+0x24>
 80106a4:	4b07      	ldr	r3, [pc, #28]	; (80106c4 <__assert_func+0x30>)
 80106a6:	9100      	str	r1, [sp, #0]
 80106a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106ac:	4906      	ldr	r1, [pc, #24]	; (80106c8 <__assert_func+0x34>)
 80106ae:	462b      	mov	r3, r5
 80106b0:	f000 f80e 	bl	80106d0 <fiprintf>
 80106b4:	f000 faac 	bl	8010c10 <abort>
 80106b8:	4b04      	ldr	r3, [pc, #16]	; (80106cc <__assert_func+0x38>)
 80106ba:	461c      	mov	r4, r3
 80106bc:	e7f3      	b.n	80106a6 <__assert_func+0x12>
 80106be:	bf00      	nop
 80106c0:	20000024 	.word	0x20000024
 80106c4:	0801215d 	.word	0x0801215d
 80106c8:	0801216a 	.word	0x0801216a
 80106cc:	08012198 	.word	0x08012198

080106d0 <fiprintf>:
 80106d0:	b40e      	push	{r1, r2, r3}
 80106d2:	b503      	push	{r0, r1, lr}
 80106d4:	4601      	mov	r1, r0
 80106d6:	ab03      	add	r3, sp, #12
 80106d8:	4805      	ldr	r0, [pc, #20]	; (80106f0 <fiprintf+0x20>)
 80106da:	f853 2b04 	ldr.w	r2, [r3], #4
 80106de:	6800      	ldr	r0, [r0, #0]
 80106e0:	9301      	str	r3, [sp, #4]
 80106e2:	f000 f897 	bl	8010814 <_vfiprintf_r>
 80106e6:	b002      	add	sp, #8
 80106e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80106ec:	b003      	add	sp, #12
 80106ee:	4770      	bx	lr
 80106f0:	20000024 	.word	0x20000024

080106f4 <__ascii_mbtowc>:
 80106f4:	b082      	sub	sp, #8
 80106f6:	b901      	cbnz	r1, 80106fa <__ascii_mbtowc+0x6>
 80106f8:	a901      	add	r1, sp, #4
 80106fa:	b142      	cbz	r2, 801070e <__ascii_mbtowc+0x1a>
 80106fc:	b14b      	cbz	r3, 8010712 <__ascii_mbtowc+0x1e>
 80106fe:	7813      	ldrb	r3, [r2, #0]
 8010700:	600b      	str	r3, [r1, #0]
 8010702:	7812      	ldrb	r2, [r2, #0]
 8010704:	1e10      	subs	r0, r2, #0
 8010706:	bf18      	it	ne
 8010708:	2001      	movne	r0, #1
 801070a:	b002      	add	sp, #8
 801070c:	4770      	bx	lr
 801070e:	4610      	mov	r0, r2
 8010710:	e7fb      	b.n	801070a <__ascii_mbtowc+0x16>
 8010712:	f06f 0001 	mvn.w	r0, #1
 8010716:	e7f8      	b.n	801070a <__ascii_mbtowc+0x16>

08010718 <memmove>:
 8010718:	4288      	cmp	r0, r1
 801071a:	b510      	push	{r4, lr}
 801071c:	eb01 0402 	add.w	r4, r1, r2
 8010720:	d902      	bls.n	8010728 <memmove+0x10>
 8010722:	4284      	cmp	r4, r0
 8010724:	4623      	mov	r3, r4
 8010726:	d807      	bhi.n	8010738 <memmove+0x20>
 8010728:	1e43      	subs	r3, r0, #1
 801072a:	42a1      	cmp	r1, r4
 801072c:	d008      	beq.n	8010740 <memmove+0x28>
 801072e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010732:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010736:	e7f8      	b.n	801072a <memmove+0x12>
 8010738:	4402      	add	r2, r0
 801073a:	4601      	mov	r1, r0
 801073c:	428a      	cmp	r2, r1
 801073e:	d100      	bne.n	8010742 <memmove+0x2a>
 8010740:	bd10      	pop	{r4, pc}
 8010742:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010746:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801074a:	e7f7      	b.n	801073c <memmove+0x24>

0801074c <__malloc_lock>:
 801074c:	4801      	ldr	r0, [pc, #4]	; (8010754 <__malloc_lock+0x8>)
 801074e:	f000 bc1f 	b.w	8010f90 <__retarget_lock_acquire_recursive>
 8010752:	bf00      	nop
 8010754:	20000630 	.word	0x20000630

08010758 <__malloc_unlock>:
 8010758:	4801      	ldr	r0, [pc, #4]	; (8010760 <__malloc_unlock+0x8>)
 801075a:	f000 bc1a 	b.w	8010f92 <__retarget_lock_release_recursive>
 801075e:	bf00      	nop
 8010760:	20000630 	.word	0x20000630

08010764 <_realloc_r>:
 8010764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010768:	4680      	mov	r8, r0
 801076a:	4614      	mov	r4, r2
 801076c:	460e      	mov	r6, r1
 801076e:	b921      	cbnz	r1, 801077a <_realloc_r+0x16>
 8010770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010774:	4611      	mov	r1, r2
 8010776:	f7ff bdad 	b.w	80102d4 <_malloc_r>
 801077a:	b92a      	cbnz	r2, 8010788 <_realloc_r+0x24>
 801077c:	f7ff fd3e 	bl	80101fc <_free_r>
 8010780:	4625      	mov	r5, r4
 8010782:	4628      	mov	r0, r5
 8010784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010788:	f000 fc6a 	bl	8011060 <_malloc_usable_size_r>
 801078c:	4284      	cmp	r4, r0
 801078e:	4607      	mov	r7, r0
 8010790:	d802      	bhi.n	8010798 <_realloc_r+0x34>
 8010792:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010796:	d812      	bhi.n	80107be <_realloc_r+0x5a>
 8010798:	4621      	mov	r1, r4
 801079a:	4640      	mov	r0, r8
 801079c:	f7ff fd9a 	bl	80102d4 <_malloc_r>
 80107a0:	4605      	mov	r5, r0
 80107a2:	2800      	cmp	r0, #0
 80107a4:	d0ed      	beq.n	8010782 <_realloc_r+0x1e>
 80107a6:	42bc      	cmp	r4, r7
 80107a8:	4622      	mov	r2, r4
 80107aa:	4631      	mov	r1, r6
 80107ac:	bf28      	it	cs
 80107ae:	463a      	movcs	r2, r7
 80107b0:	f7ff f97c 	bl	800faac <memcpy>
 80107b4:	4631      	mov	r1, r6
 80107b6:	4640      	mov	r0, r8
 80107b8:	f7ff fd20 	bl	80101fc <_free_r>
 80107bc:	e7e1      	b.n	8010782 <_realloc_r+0x1e>
 80107be:	4635      	mov	r5, r6
 80107c0:	e7df      	b.n	8010782 <_realloc_r+0x1e>

080107c2 <__sfputc_r>:
 80107c2:	6893      	ldr	r3, [r2, #8]
 80107c4:	3b01      	subs	r3, #1
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	b410      	push	{r4}
 80107ca:	6093      	str	r3, [r2, #8]
 80107cc:	da08      	bge.n	80107e0 <__sfputc_r+0x1e>
 80107ce:	6994      	ldr	r4, [r2, #24]
 80107d0:	42a3      	cmp	r3, r4
 80107d2:	db01      	blt.n	80107d8 <__sfputc_r+0x16>
 80107d4:	290a      	cmp	r1, #10
 80107d6:	d103      	bne.n	80107e0 <__sfputc_r+0x1e>
 80107d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107dc:	f000 b94a 	b.w	8010a74 <__swbuf_r>
 80107e0:	6813      	ldr	r3, [r2, #0]
 80107e2:	1c58      	adds	r0, r3, #1
 80107e4:	6010      	str	r0, [r2, #0]
 80107e6:	7019      	strb	r1, [r3, #0]
 80107e8:	4608      	mov	r0, r1
 80107ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <__sfputs_r>:
 80107f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f2:	4606      	mov	r6, r0
 80107f4:	460f      	mov	r7, r1
 80107f6:	4614      	mov	r4, r2
 80107f8:	18d5      	adds	r5, r2, r3
 80107fa:	42ac      	cmp	r4, r5
 80107fc:	d101      	bne.n	8010802 <__sfputs_r+0x12>
 80107fe:	2000      	movs	r0, #0
 8010800:	e007      	b.n	8010812 <__sfputs_r+0x22>
 8010802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010806:	463a      	mov	r2, r7
 8010808:	4630      	mov	r0, r6
 801080a:	f7ff ffda 	bl	80107c2 <__sfputc_r>
 801080e:	1c43      	adds	r3, r0, #1
 8010810:	d1f3      	bne.n	80107fa <__sfputs_r+0xa>
 8010812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010814 <_vfiprintf_r>:
 8010814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010818:	460d      	mov	r5, r1
 801081a:	b09d      	sub	sp, #116	; 0x74
 801081c:	4614      	mov	r4, r2
 801081e:	4698      	mov	r8, r3
 8010820:	4606      	mov	r6, r0
 8010822:	b118      	cbz	r0, 801082c <_vfiprintf_r+0x18>
 8010824:	6983      	ldr	r3, [r0, #24]
 8010826:	b90b      	cbnz	r3, 801082c <_vfiprintf_r+0x18>
 8010828:	f000 fb14 	bl	8010e54 <__sinit>
 801082c:	4b89      	ldr	r3, [pc, #548]	; (8010a54 <_vfiprintf_r+0x240>)
 801082e:	429d      	cmp	r5, r3
 8010830:	d11b      	bne.n	801086a <_vfiprintf_r+0x56>
 8010832:	6875      	ldr	r5, [r6, #4]
 8010834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010836:	07d9      	lsls	r1, r3, #31
 8010838:	d405      	bmi.n	8010846 <_vfiprintf_r+0x32>
 801083a:	89ab      	ldrh	r3, [r5, #12]
 801083c:	059a      	lsls	r2, r3, #22
 801083e:	d402      	bmi.n	8010846 <_vfiprintf_r+0x32>
 8010840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010842:	f000 fba5 	bl	8010f90 <__retarget_lock_acquire_recursive>
 8010846:	89ab      	ldrh	r3, [r5, #12]
 8010848:	071b      	lsls	r3, r3, #28
 801084a:	d501      	bpl.n	8010850 <_vfiprintf_r+0x3c>
 801084c:	692b      	ldr	r3, [r5, #16]
 801084e:	b9eb      	cbnz	r3, 801088c <_vfiprintf_r+0x78>
 8010850:	4629      	mov	r1, r5
 8010852:	4630      	mov	r0, r6
 8010854:	f000 f96e 	bl	8010b34 <__swsetup_r>
 8010858:	b1c0      	cbz	r0, 801088c <_vfiprintf_r+0x78>
 801085a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801085c:	07dc      	lsls	r4, r3, #31
 801085e:	d50e      	bpl.n	801087e <_vfiprintf_r+0x6a>
 8010860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010864:	b01d      	add	sp, #116	; 0x74
 8010866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801086a:	4b7b      	ldr	r3, [pc, #492]	; (8010a58 <_vfiprintf_r+0x244>)
 801086c:	429d      	cmp	r5, r3
 801086e:	d101      	bne.n	8010874 <_vfiprintf_r+0x60>
 8010870:	68b5      	ldr	r5, [r6, #8]
 8010872:	e7df      	b.n	8010834 <_vfiprintf_r+0x20>
 8010874:	4b79      	ldr	r3, [pc, #484]	; (8010a5c <_vfiprintf_r+0x248>)
 8010876:	429d      	cmp	r5, r3
 8010878:	bf08      	it	eq
 801087a:	68f5      	ldreq	r5, [r6, #12]
 801087c:	e7da      	b.n	8010834 <_vfiprintf_r+0x20>
 801087e:	89ab      	ldrh	r3, [r5, #12]
 8010880:	0598      	lsls	r0, r3, #22
 8010882:	d4ed      	bmi.n	8010860 <_vfiprintf_r+0x4c>
 8010884:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010886:	f000 fb84 	bl	8010f92 <__retarget_lock_release_recursive>
 801088a:	e7e9      	b.n	8010860 <_vfiprintf_r+0x4c>
 801088c:	2300      	movs	r3, #0
 801088e:	9309      	str	r3, [sp, #36]	; 0x24
 8010890:	2320      	movs	r3, #32
 8010892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010896:	f8cd 800c 	str.w	r8, [sp, #12]
 801089a:	2330      	movs	r3, #48	; 0x30
 801089c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010a60 <_vfiprintf_r+0x24c>
 80108a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80108a4:	f04f 0901 	mov.w	r9, #1
 80108a8:	4623      	mov	r3, r4
 80108aa:	469a      	mov	sl, r3
 80108ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108b0:	b10a      	cbz	r2, 80108b6 <_vfiprintf_r+0xa2>
 80108b2:	2a25      	cmp	r2, #37	; 0x25
 80108b4:	d1f9      	bne.n	80108aa <_vfiprintf_r+0x96>
 80108b6:	ebba 0b04 	subs.w	fp, sl, r4
 80108ba:	d00b      	beq.n	80108d4 <_vfiprintf_r+0xc0>
 80108bc:	465b      	mov	r3, fp
 80108be:	4622      	mov	r2, r4
 80108c0:	4629      	mov	r1, r5
 80108c2:	4630      	mov	r0, r6
 80108c4:	f7ff ff94 	bl	80107f0 <__sfputs_r>
 80108c8:	3001      	adds	r0, #1
 80108ca:	f000 80aa 	beq.w	8010a22 <_vfiprintf_r+0x20e>
 80108ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108d0:	445a      	add	r2, fp
 80108d2:	9209      	str	r2, [sp, #36]	; 0x24
 80108d4:	f89a 3000 	ldrb.w	r3, [sl]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 80a2 	beq.w	8010a22 <_vfiprintf_r+0x20e>
 80108de:	2300      	movs	r3, #0
 80108e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108e8:	f10a 0a01 	add.w	sl, sl, #1
 80108ec:	9304      	str	r3, [sp, #16]
 80108ee:	9307      	str	r3, [sp, #28]
 80108f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108f4:	931a      	str	r3, [sp, #104]	; 0x68
 80108f6:	4654      	mov	r4, sl
 80108f8:	2205      	movs	r2, #5
 80108fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108fe:	4858      	ldr	r0, [pc, #352]	; (8010a60 <_vfiprintf_r+0x24c>)
 8010900:	f7ef fc76 	bl	80001f0 <memchr>
 8010904:	9a04      	ldr	r2, [sp, #16]
 8010906:	b9d8      	cbnz	r0, 8010940 <_vfiprintf_r+0x12c>
 8010908:	06d1      	lsls	r1, r2, #27
 801090a:	bf44      	itt	mi
 801090c:	2320      	movmi	r3, #32
 801090e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010912:	0713      	lsls	r3, r2, #28
 8010914:	bf44      	itt	mi
 8010916:	232b      	movmi	r3, #43	; 0x2b
 8010918:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801091c:	f89a 3000 	ldrb.w	r3, [sl]
 8010920:	2b2a      	cmp	r3, #42	; 0x2a
 8010922:	d015      	beq.n	8010950 <_vfiprintf_r+0x13c>
 8010924:	9a07      	ldr	r2, [sp, #28]
 8010926:	4654      	mov	r4, sl
 8010928:	2000      	movs	r0, #0
 801092a:	f04f 0c0a 	mov.w	ip, #10
 801092e:	4621      	mov	r1, r4
 8010930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010934:	3b30      	subs	r3, #48	; 0x30
 8010936:	2b09      	cmp	r3, #9
 8010938:	d94e      	bls.n	80109d8 <_vfiprintf_r+0x1c4>
 801093a:	b1b0      	cbz	r0, 801096a <_vfiprintf_r+0x156>
 801093c:	9207      	str	r2, [sp, #28]
 801093e:	e014      	b.n	801096a <_vfiprintf_r+0x156>
 8010940:	eba0 0308 	sub.w	r3, r0, r8
 8010944:	fa09 f303 	lsl.w	r3, r9, r3
 8010948:	4313      	orrs	r3, r2
 801094a:	9304      	str	r3, [sp, #16]
 801094c:	46a2      	mov	sl, r4
 801094e:	e7d2      	b.n	80108f6 <_vfiprintf_r+0xe2>
 8010950:	9b03      	ldr	r3, [sp, #12]
 8010952:	1d19      	adds	r1, r3, #4
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	9103      	str	r1, [sp, #12]
 8010958:	2b00      	cmp	r3, #0
 801095a:	bfbb      	ittet	lt
 801095c:	425b      	neglt	r3, r3
 801095e:	f042 0202 	orrlt.w	r2, r2, #2
 8010962:	9307      	strge	r3, [sp, #28]
 8010964:	9307      	strlt	r3, [sp, #28]
 8010966:	bfb8      	it	lt
 8010968:	9204      	strlt	r2, [sp, #16]
 801096a:	7823      	ldrb	r3, [r4, #0]
 801096c:	2b2e      	cmp	r3, #46	; 0x2e
 801096e:	d10c      	bne.n	801098a <_vfiprintf_r+0x176>
 8010970:	7863      	ldrb	r3, [r4, #1]
 8010972:	2b2a      	cmp	r3, #42	; 0x2a
 8010974:	d135      	bne.n	80109e2 <_vfiprintf_r+0x1ce>
 8010976:	9b03      	ldr	r3, [sp, #12]
 8010978:	1d1a      	adds	r2, r3, #4
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	9203      	str	r2, [sp, #12]
 801097e:	2b00      	cmp	r3, #0
 8010980:	bfb8      	it	lt
 8010982:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010986:	3402      	adds	r4, #2
 8010988:	9305      	str	r3, [sp, #20]
 801098a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010a70 <_vfiprintf_r+0x25c>
 801098e:	7821      	ldrb	r1, [r4, #0]
 8010990:	2203      	movs	r2, #3
 8010992:	4650      	mov	r0, sl
 8010994:	f7ef fc2c 	bl	80001f0 <memchr>
 8010998:	b140      	cbz	r0, 80109ac <_vfiprintf_r+0x198>
 801099a:	2340      	movs	r3, #64	; 0x40
 801099c:	eba0 000a 	sub.w	r0, r0, sl
 80109a0:	fa03 f000 	lsl.w	r0, r3, r0
 80109a4:	9b04      	ldr	r3, [sp, #16]
 80109a6:	4303      	orrs	r3, r0
 80109a8:	3401      	adds	r4, #1
 80109aa:	9304      	str	r3, [sp, #16]
 80109ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109b0:	482c      	ldr	r0, [pc, #176]	; (8010a64 <_vfiprintf_r+0x250>)
 80109b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80109b6:	2206      	movs	r2, #6
 80109b8:	f7ef fc1a 	bl	80001f0 <memchr>
 80109bc:	2800      	cmp	r0, #0
 80109be:	d03f      	beq.n	8010a40 <_vfiprintf_r+0x22c>
 80109c0:	4b29      	ldr	r3, [pc, #164]	; (8010a68 <_vfiprintf_r+0x254>)
 80109c2:	bb1b      	cbnz	r3, 8010a0c <_vfiprintf_r+0x1f8>
 80109c4:	9b03      	ldr	r3, [sp, #12]
 80109c6:	3307      	adds	r3, #7
 80109c8:	f023 0307 	bic.w	r3, r3, #7
 80109cc:	3308      	adds	r3, #8
 80109ce:	9303      	str	r3, [sp, #12]
 80109d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d2:	443b      	add	r3, r7
 80109d4:	9309      	str	r3, [sp, #36]	; 0x24
 80109d6:	e767      	b.n	80108a8 <_vfiprintf_r+0x94>
 80109d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80109dc:	460c      	mov	r4, r1
 80109de:	2001      	movs	r0, #1
 80109e0:	e7a5      	b.n	801092e <_vfiprintf_r+0x11a>
 80109e2:	2300      	movs	r3, #0
 80109e4:	3401      	adds	r4, #1
 80109e6:	9305      	str	r3, [sp, #20]
 80109e8:	4619      	mov	r1, r3
 80109ea:	f04f 0c0a 	mov.w	ip, #10
 80109ee:	4620      	mov	r0, r4
 80109f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109f4:	3a30      	subs	r2, #48	; 0x30
 80109f6:	2a09      	cmp	r2, #9
 80109f8:	d903      	bls.n	8010a02 <_vfiprintf_r+0x1ee>
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d0c5      	beq.n	801098a <_vfiprintf_r+0x176>
 80109fe:	9105      	str	r1, [sp, #20]
 8010a00:	e7c3      	b.n	801098a <_vfiprintf_r+0x176>
 8010a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a06:	4604      	mov	r4, r0
 8010a08:	2301      	movs	r3, #1
 8010a0a:	e7f0      	b.n	80109ee <_vfiprintf_r+0x1da>
 8010a0c:	ab03      	add	r3, sp, #12
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	462a      	mov	r2, r5
 8010a12:	4b16      	ldr	r3, [pc, #88]	; (8010a6c <_vfiprintf_r+0x258>)
 8010a14:	a904      	add	r1, sp, #16
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7fd fdd6 	bl	800e5c8 <_printf_float>
 8010a1c:	4607      	mov	r7, r0
 8010a1e:	1c78      	adds	r0, r7, #1
 8010a20:	d1d6      	bne.n	80109d0 <_vfiprintf_r+0x1bc>
 8010a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010a24:	07d9      	lsls	r1, r3, #31
 8010a26:	d405      	bmi.n	8010a34 <_vfiprintf_r+0x220>
 8010a28:	89ab      	ldrh	r3, [r5, #12]
 8010a2a:	059a      	lsls	r2, r3, #22
 8010a2c:	d402      	bmi.n	8010a34 <_vfiprintf_r+0x220>
 8010a2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010a30:	f000 faaf 	bl	8010f92 <__retarget_lock_release_recursive>
 8010a34:	89ab      	ldrh	r3, [r5, #12]
 8010a36:	065b      	lsls	r3, r3, #25
 8010a38:	f53f af12 	bmi.w	8010860 <_vfiprintf_r+0x4c>
 8010a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a3e:	e711      	b.n	8010864 <_vfiprintf_r+0x50>
 8010a40:	ab03      	add	r3, sp, #12
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	462a      	mov	r2, r5
 8010a46:	4b09      	ldr	r3, [pc, #36]	; (8010a6c <_vfiprintf_r+0x258>)
 8010a48:	a904      	add	r1, sp, #16
 8010a4a:	4630      	mov	r0, r6
 8010a4c:	f7fe f860 	bl	800eb10 <_printf_i>
 8010a50:	e7e4      	b.n	8010a1c <_vfiprintf_r+0x208>
 8010a52:	bf00      	nop
 8010a54:	080122c4 	.word	0x080122c4
 8010a58:	080122e4 	.word	0x080122e4
 8010a5c:	080122a4 	.word	0x080122a4
 8010a60:	0801214c 	.word	0x0801214c
 8010a64:	08012156 	.word	0x08012156
 8010a68:	0800e5c9 	.word	0x0800e5c9
 8010a6c:	080107f1 	.word	0x080107f1
 8010a70:	08012152 	.word	0x08012152

08010a74 <__swbuf_r>:
 8010a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a76:	460e      	mov	r6, r1
 8010a78:	4614      	mov	r4, r2
 8010a7a:	4605      	mov	r5, r0
 8010a7c:	b118      	cbz	r0, 8010a86 <__swbuf_r+0x12>
 8010a7e:	6983      	ldr	r3, [r0, #24]
 8010a80:	b90b      	cbnz	r3, 8010a86 <__swbuf_r+0x12>
 8010a82:	f000 f9e7 	bl	8010e54 <__sinit>
 8010a86:	4b21      	ldr	r3, [pc, #132]	; (8010b0c <__swbuf_r+0x98>)
 8010a88:	429c      	cmp	r4, r3
 8010a8a:	d12b      	bne.n	8010ae4 <__swbuf_r+0x70>
 8010a8c:	686c      	ldr	r4, [r5, #4]
 8010a8e:	69a3      	ldr	r3, [r4, #24]
 8010a90:	60a3      	str	r3, [r4, #8]
 8010a92:	89a3      	ldrh	r3, [r4, #12]
 8010a94:	071a      	lsls	r2, r3, #28
 8010a96:	d52f      	bpl.n	8010af8 <__swbuf_r+0x84>
 8010a98:	6923      	ldr	r3, [r4, #16]
 8010a9a:	b36b      	cbz	r3, 8010af8 <__swbuf_r+0x84>
 8010a9c:	6923      	ldr	r3, [r4, #16]
 8010a9e:	6820      	ldr	r0, [r4, #0]
 8010aa0:	1ac0      	subs	r0, r0, r3
 8010aa2:	6963      	ldr	r3, [r4, #20]
 8010aa4:	b2f6      	uxtb	r6, r6
 8010aa6:	4283      	cmp	r3, r0
 8010aa8:	4637      	mov	r7, r6
 8010aaa:	dc04      	bgt.n	8010ab6 <__swbuf_r+0x42>
 8010aac:	4621      	mov	r1, r4
 8010aae:	4628      	mov	r0, r5
 8010ab0:	f000 f93c 	bl	8010d2c <_fflush_r>
 8010ab4:	bb30      	cbnz	r0, 8010b04 <__swbuf_r+0x90>
 8010ab6:	68a3      	ldr	r3, [r4, #8]
 8010ab8:	3b01      	subs	r3, #1
 8010aba:	60a3      	str	r3, [r4, #8]
 8010abc:	6823      	ldr	r3, [r4, #0]
 8010abe:	1c5a      	adds	r2, r3, #1
 8010ac0:	6022      	str	r2, [r4, #0]
 8010ac2:	701e      	strb	r6, [r3, #0]
 8010ac4:	6963      	ldr	r3, [r4, #20]
 8010ac6:	3001      	adds	r0, #1
 8010ac8:	4283      	cmp	r3, r0
 8010aca:	d004      	beq.n	8010ad6 <__swbuf_r+0x62>
 8010acc:	89a3      	ldrh	r3, [r4, #12]
 8010ace:	07db      	lsls	r3, r3, #31
 8010ad0:	d506      	bpl.n	8010ae0 <__swbuf_r+0x6c>
 8010ad2:	2e0a      	cmp	r6, #10
 8010ad4:	d104      	bne.n	8010ae0 <__swbuf_r+0x6c>
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f000 f927 	bl	8010d2c <_fflush_r>
 8010ade:	b988      	cbnz	r0, 8010b04 <__swbuf_r+0x90>
 8010ae0:	4638      	mov	r0, r7
 8010ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ae4:	4b0a      	ldr	r3, [pc, #40]	; (8010b10 <__swbuf_r+0x9c>)
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d101      	bne.n	8010aee <__swbuf_r+0x7a>
 8010aea:	68ac      	ldr	r4, [r5, #8]
 8010aec:	e7cf      	b.n	8010a8e <__swbuf_r+0x1a>
 8010aee:	4b09      	ldr	r3, [pc, #36]	; (8010b14 <__swbuf_r+0xa0>)
 8010af0:	429c      	cmp	r4, r3
 8010af2:	bf08      	it	eq
 8010af4:	68ec      	ldreq	r4, [r5, #12]
 8010af6:	e7ca      	b.n	8010a8e <__swbuf_r+0x1a>
 8010af8:	4621      	mov	r1, r4
 8010afa:	4628      	mov	r0, r5
 8010afc:	f000 f81a 	bl	8010b34 <__swsetup_r>
 8010b00:	2800      	cmp	r0, #0
 8010b02:	d0cb      	beq.n	8010a9c <__swbuf_r+0x28>
 8010b04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010b08:	e7ea      	b.n	8010ae0 <__swbuf_r+0x6c>
 8010b0a:	bf00      	nop
 8010b0c:	080122c4 	.word	0x080122c4
 8010b10:	080122e4 	.word	0x080122e4
 8010b14:	080122a4 	.word	0x080122a4

08010b18 <__ascii_wctomb>:
 8010b18:	b149      	cbz	r1, 8010b2e <__ascii_wctomb+0x16>
 8010b1a:	2aff      	cmp	r2, #255	; 0xff
 8010b1c:	bf85      	ittet	hi
 8010b1e:	238a      	movhi	r3, #138	; 0x8a
 8010b20:	6003      	strhi	r3, [r0, #0]
 8010b22:	700a      	strbls	r2, [r1, #0]
 8010b24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010b28:	bf98      	it	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	4770      	bx	lr
 8010b2e:	4608      	mov	r0, r1
 8010b30:	4770      	bx	lr
	...

08010b34 <__swsetup_r>:
 8010b34:	4b32      	ldr	r3, [pc, #200]	; (8010c00 <__swsetup_r+0xcc>)
 8010b36:	b570      	push	{r4, r5, r6, lr}
 8010b38:	681d      	ldr	r5, [r3, #0]
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	460c      	mov	r4, r1
 8010b3e:	b125      	cbz	r5, 8010b4a <__swsetup_r+0x16>
 8010b40:	69ab      	ldr	r3, [r5, #24]
 8010b42:	b913      	cbnz	r3, 8010b4a <__swsetup_r+0x16>
 8010b44:	4628      	mov	r0, r5
 8010b46:	f000 f985 	bl	8010e54 <__sinit>
 8010b4a:	4b2e      	ldr	r3, [pc, #184]	; (8010c04 <__swsetup_r+0xd0>)
 8010b4c:	429c      	cmp	r4, r3
 8010b4e:	d10f      	bne.n	8010b70 <__swsetup_r+0x3c>
 8010b50:	686c      	ldr	r4, [r5, #4]
 8010b52:	89a3      	ldrh	r3, [r4, #12]
 8010b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b58:	0719      	lsls	r1, r3, #28
 8010b5a:	d42c      	bmi.n	8010bb6 <__swsetup_r+0x82>
 8010b5c:	06dd      	lsls	r5, r3, #27
 8010b5e:	d411      	bmi.n	8010b84 <__swsetup_r+0x50>
 8010b60:	2309      	movs	r3, #9
 8010b62:	6033      	str	r3, [r6, #0]
 8010b64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b68:	81a3      	strh	r3, [r4, #12]
 8010b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b6e:	e03e      	b.n	8010bee <__swsetup_r+0xba>
 8010b70:	4b25      	ldr	r3, [pc, #148]	; (8010c08 <__swsetup_r+0xd4>)
 8010b72:	429c      	cmp	r4, r3
 8010b74:	d101      	bne.n	8010b7a <__swsetup_r+0x46>
 8010b76:	68ac      	ldr	r4, [r5, #8]
 8010b78:	e7eb      	b.n	8010b52 <__swsetup_r+0x1e>
 8010b7a:	4b24      	ldr	r3, [pc, #144]	; (8010c0c <__swsetup_r+0xd8>)
 8010b7c:	429c      	cmp	r4, r3
 8010b7e:	bf08      	it	eq
 8010b80:	68ec      	ldreq	r4, [r5, #12]
 8010b82:	e7e6      	b.n	8010b52 <__swsetup_r+0x1e>
 8010b84:	0758      	lsls	r0, r3, #29
 8010b86:	d512      	bpl.n	8010bae <__swsetup_r+0x7a>
 8010b88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b8a:	b141      	cbz	r1, 8010b9e <__swsetup_r+0x6a>
 8010b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b90:	4299      	cmp	r1, r3
 8010b92:	d002      	beq.n	8010b9a <__swsetup_r+0x66>
 8010b94:	4630      	mov	r0, r6
 8010b96:	f7ff fb31 	bl	80101fc <_free_r>
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	6363      	str	r3, [r4, #52]	; 0x34
 8010b9e:	89a3      	ldrh	r3, [r4, #12]
 8010ba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010ba4:	81a3      	strh	r3, [r4, #12]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	6063      	str	r3, [r4, #4]
 8010baa:	6923      	ldr	r3, [r4, #16]
 8010bac:	6023      	str	r3, [r4, #0]
 8010bae:	89a3      	ldrh	r3, [r4, #12]
 8010bb0:	f043 0308 	orr.w	r3, r3, #8
 8010bb4:	81a3      	strh	r3, [r4, #12]
 8010bb6:	6923      	ldr	r3, [r4, #16]
 8010bb8:	b94b      	cbnz	r3, 8010bce <__swsetup_r+0x9a>
 8010bba:	89a3      	ldrh	r3, [r4, #12]
 8010bbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010bc4:	d003      	beq.n	8010bce <__swsetup_r+0x9a>
 8010bc6:	4621      	mov	r1, r4
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f000 fa09 	bl	8010fe0 <__smakebuf_r>
 8010bce:	89a0      	ldrh	r0, [r4, #12]
 8010bd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010bd4:	f010 0301 	ands.w	r3, r0, #1
 8010bd8:	d00a      	beq.n	8010bf0 <__swsetup_r+0xbc>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	60a3      	str	r3, [r4, #8]
 8010bde:	6963      	ldr	r3, [r4, #20]
 8010be0:	425b      	negs	r3, r3
 8010be2:	61a3      	str	r3, [r4, #24]
 8010be4:	6923      	ldr	r3, [r4, #16]
 8010be6:	b943      	cbnz	r3, 8010bfa <__swsetup_r+0xc6>
 8010be8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bec:	d1ba      	bne.n	8010b64 <__swsetup_r+0x30>
 8010bee:	bd70      	pop	{r4, r5, r6, pc}
 8010bf0:	0781      	lsls	r1, r0, #30
 8010bf2:	bf58      	it	pl
 8010bf4:	6963      	ldrpl	r3, [r4, #20]
 8010bf6:	60a3      	str	r3, [r4, #8]
 8010bf8:	e7f4      	b.n	8010be4 <__swsetup_r+0xb0>
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	e7f7      	b.n	8010bee <__swsetup_r+0xba>
 8010bfe:	bf00      	nop
 8010c00:	20000024 	.word	0x20000024
 8010c04:	080122c4 	.word	0x080122c4
 8010c08:	080122e4 	.word	0x080122e4
 8010c0c:	080122a4 	.word	0x080122a4

08010c10 <abort>:
 8010c10:	b508      	push	{r3, lr}
 8010c12:	2006      	movs	r0, #6
 8010c14:	f000 fa54 	bl	80110c0 <raise>
 8010c18:	2001      	movs	r0, #1
 8010c1a:	f7f4 fbb9 	bl	8005390 <_exit>
	...

08010c20 <__sflush_r>:
 8010c20:	898a      	ldrh	r2, [r1, #12]
 8010c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c26:	4605      	mov	r5, r0
 8010c28:	0710      	lsls	r0, r2, #28
 8010c2a:	460c      	mov	r4, r1
 8010c2c:	d458      	bmi.n	8010ce0 <__sflush_r+0xc0>
 8010c2e:	684b      	ldr	r3, [r1, #4]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dc05      	bgt.n	8010c40 <__sflush_r+0x20>
 8010c34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	dc02      	bgt.n	8010c40 <__sflush_r+0x20>
 8010c3a:	2000      	movs	r0, #0
 8010c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c42:	2e00      	cmp	r6, #0
 8010c44:	d0f9      	beq.n	8010c3a <__sflush_r+0x1a>
 8010c46:	2300      	movs	r3, #0
 8010c48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c4c:	682f      	ldr	r7, [r5, #0]
 8010c4e:	602b      	str	r3, [r5, #0]
 8010c50:	d032      	beq.n	8010cb8 <__sflush_r+0x98>
 8010c52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c54:	89a3      	ldrh	r3, [r4, #12]
 8010c56:	075a      	lsls	r2, r3, #29
 8010c58:	d505      	bpl.n	8010c66 <__sflush_r+0x46>
 8010c5a:	6863      	ldr	r3, [r4, #4]
 8010c5c:	1ac0      	subs	r0, r0, r3
 8010c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c60:	b10b      	cbz	r3, 8010c66 <__sflush_r+0x46>
 8010c62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c64:	1ac0      	subs	r0, r0, r3
 8010c66:	2300      	movs	r3, #0
 8010c68:	4602      	mov	r2, r0
 8010c6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c6c:	6a21      	ldr	r1, [r4, #32]
 8010c6e:	4628      	mov	r0, r5
 8010c70:	47b0      	blx	r6
 8010c72:	1c43      	adds	r3, r0, #1
 8010c74:	89a3      	ldrh	r3, [r4, #12]
 8010c76:	d106      	bne.n	8010c86 <__sflush_r+0x66>
 8010c78:	6829      	ldr	r1, [r5, #0]
 8010c7a:	291d      	cmp	r1, #29
 8010c7c:	d82c      	bhi.n	8010cd8 <__sflush_r+0xb8>
 8010c7e:	4a2a      	ldr	r2, [pc, #168]	; (8010d28 <__sflush_r+0x108>)
 8010c80:	40ca      	lsrs	r2, r1
 8010c82:	07d6      	lsls	r6, r2, #31
 8010c84:	d528      	bpl.n	8010cd8 <__sflush_r+0xb8>
 8010c86:	2200      	movs	r2, #0
 8010c88:	6062      	str	r2, [r4, #4]
 8010c8a:	04d9      	lsls	r1, r3, #19
 8010c8c:	6922      	ldr	r2, [r4, #16]
 8010c8e:	6022      	str	r2, [r4, #0]
 8010c90:	d504      	bpl.n	8010c9c <__sflush_r+0x7c>
 8010c92:	1c42      	adds	r2, r0, #1
 8010c94:	d101      	bne.n	8010c9a <__sflush_r+0x7a>
 8010c96:	682b      	ldr	r3, [r5, #0]
 8010c98:	b903      	cbnz	r3, 8010c9c <__sflush_r+0x7c>
 8010c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8010c9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c9e:	602f      	str	r7, [r5, #0]
 8010ca0:	2900      	cmp	r1, #0
 8010ca2:	d0ca      	beq.n	8010c3a <__sflush_r+0x1a>
 8010ca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ca8:	4299      	cmp	r1, r3
 8010caa:	d002      	beq.n	8010cb2 <__sflush_r+0x92>
 8010cac:	4628      	mov	r0, r5
 8010cae:	f7ff faa5 	bl	80101fc <_free_r>
 8010cb2:	2000      	movs	r0, #0
 8010cb4:	6360      	str	r0, [r4, #52]	; 0x34
 8010cb6:	e7c1      	b.n	8010c3c <__sflush_r+0x1c>
 8010cb8:	6a21      	ldr	r1, [r4, #32]
 8010cba:	2301      	movs	r3, #1
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	47b0      	blx	r6
 8010cc0:	1c41      	adds	r1, r0, #1
 8010cc2:	d1c7      	bne.n	8010c54 <__sflush_r+0x34>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d0c4      	beq.n	8010c54 <__sflush_r+0x34>
 8010cca:	2b1d      	cmp	r3, #29
 8010ccc:	d001      	beq.n	8010cd2 <__sflush_r+0xb2>
 8010cce:	2b16      	cmp	r3, #22
 8010cd0:	d101      	bne.n	8010cd6 <__sflush_r+0xb6>
 8010cd2:	602f      	str	r7, [r5, #0]
 8010cd4:	e7b1      	b.n	8010c3a <__sflush_r+0x1a>
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cdc:	81a3      	strh	r3, [r4, #12]
 8010cde:	e7ad      	b.n	8010c3c <__sflush_r+0x1c>
 8010ce0:	690f      	ldr	r7, [r1, #16]
 8010ce2:	2f00      	cmp	r7, #0
 8010ce4:	d0a9      	beq.n	8010c3a <__sflush_r+0x1a>
 8010ce6:	0793      	lsls	r3, r2, #30
 8010ce8:	680e      	ldr	r6, [r1, #0]
 8010cea:	bf08      	it	eq
 8010cec:	694b      	ldreq	r3, [r1, #20]
 8010cee:	600f      	str	r7, [r1, #0]
 8010cf0:	bf18      	it	ne
 8010cf2:	2300      	movne	r3, #0
 8010cf4:	eba6 0807 	sub.w	r8, r6, r7
 8010cf8:	608b      	str	r3, [r1, #8]
 8010cfa:	f1b8 0f00 	cmp.w	r8, #0
 8010cfe:	dd9c      	ble.n	8010c3a <__sflush_r+0x1a>
 8010d00:	6a21      	ldr	r1, [r4, #32]
 8010d02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010d04:	4643      	mov	r3, r8
 8010d06:	463a      	mov	r2, r7
 8010d08:	4628      	mov	r0, r5
 8010d0a:	47b0      	blx	r6
 8010d0c:	2800      	cmp	r0, #0
 8010d0e:	dc06      	bgt.n	8010d1e <__sflush_r+0xfe>
 8010d10:	89a3      	ldrh	r3, [r4, #12]
 8010d12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d16:	81a3      	strh	r3, [r4, #12]
 8010d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d1c:	e78e      	b.n	8010c3c <__sflush_r+0x1c>
 8010d1e:	4407      	add	r7, r0
 8010d20:	eba8 0800 	sub.w	r8, r8, r0
 8010d24:	e7e9      	b.n	8010cfa <__sflush_r+0xda>
 8010d26:	bf00      	nop
 8010d28:	20400001 	.word	0x20400001

08010d2c <_fflush_r>:
 8010d2c:	b538      	push	{r3, r4, r5, lr}
 8010d2e:	690b      	ldr	r3, [r1, #16]
 8010d30:	4605      	mov	r5, r0
 8010d32:	460c      	mov	r4, r1
 8010d34:	b913      	cbnz	r3, 8010d3c <_fflush_r+0x10>
 8010d36:	2500      	movs	r5, #0
 8010d38:	4628      	mov	r0, r5
 8010d3a:	bd38      	pop	{r3, r4, r5, pc}
 8010d3c:	b118      	cbz	r0, 8010d46 <_fflush_r+0x1a>
 8010d3e:	6983      	ldr	r3, [r0, #24]
 8010d40:	b90b      	cbnz	r3, 8010d46 <_fflush_r+0x1a>
 8010d42:	f000 f887 	bl	8010e54 <__sinit>
 8010d46:	4b14      	ldr	r3, [pc, #80]	; (8010d98 <_fflush_r+0x6c>)
 8010d48:	429c      	cmp	r4, r3
 8010d4a:	d11b      	bne.n	8010d84 <_fflush_r+0x58>
 8010d4c:	686c      	ldr	r4, [r5, #4]
 8010d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d0ef      	beq.n	8010d36 <_fflush_r+0xa>
 8010d56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d58:	07d0      	lsls	r0, r2, #31
 8010d5a:	d404      	bmi.n	8010d66 <_fflush_r+0x3a>
 8010d5c:	0599      	lsls	r1, r3, #22
 8010d5e:	d402      	bmi.n	8010d66 <_fflush_r+0x3a>
 8010d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d62:	f000 f915 	bl	8010f90 <__retarget_lock_acquire_recursive>
 8010d66:	4628      	mov	r0, r5
 8010d68:	4621      	mov	r1, r4
 8010d6a:	f7ff ff59 	bl	8010c20 <__sflush_r>
 8010d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d70:	07da      	lsls	r2, r3, #31
 8010d72:	4605      	mov	r5, r0
 8010d74:	d4e0      	bmi.n	8010d38 <_fflush_r+0xc>
 8010d76:	89a3      	ldrh	r3, [r4, #12]
 8010d78:	059b      	lsls	r3, r3, #22
 8010d7a:	d4dd      	bmi.n	8010d38 <_fflush_r+0xc>
 8010d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d7e:	f000 f908 	bl	8010f92 <__retarget_lock_release_recursive>
 8010d82:	e7d9      	b.n	8010d38 <_fflush_r+0xc>
 8010d84:	4b05      	ldr	r3, [pc, #20]	; (8010d9c <_fflush_r+0x70>)
 8010d86:	429c      	cmp	r4, r3
 8010d88:	d101      	bne.n	8010d8e <_fflush_r+0x62>
 8010d8a:	68ac      	ldr	r4, [r5, #8]
 8010d8c:	e7df      	b.n	8010d4e <_fflush_r+0x22>
 8010d8e:	4b04      	ldr	r3, [pc, #16]	; (8010da0 <_fflush_r+0x74>)
 8010d90:	429c      	cmp	r4, r3
 8010d92:	bf08      	it	eq
 8010d94:	68ec      	ldreq	r4, [r5, #12]
 8010d96:	e7da      	b.n	8010d4e <_fflush_r+0x22>
 8010d98:	080122c4 	.word	0x080122c4
 8010d9c:	080122e4 	.word	0x080122e4
 8010da0:	080122a4 	.word	0x080122a4

08010da4 <std>:
 8010da4:	2300      	movs	r3, #0
 8010da6:	b510      	push	{r4, lr}
 8010da8:	4604      	mov	r4, r0
 8010daa:	e9c0 3300 	strd	r3, r3, [r0]
 8010dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010db2:	6083      	str	r3, [r0, #8]
 8010db4:	8181      	strh	r1, [r0, #12]
 8010db6:	6643      	str	r3, [r0, #100]	; 0x64
 8010db8:	81c2      	strh	r2, [r0, #14]
 8010dba:	6183      	str	r3, [r0, #24]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	2208      	movs	r2, #8
 8010dc0:	305c      	adds	r0, #92	; 0x5c
 8010dc2:	f7fd fb59 	bl	800e478 <memset>
 8010dc6:	4b05      	ldr	r3, [pc, #20]	; (8010ddc <std+0x38>)
 8010dc8:	6263      	str	r3, [r4, #36]	; 0x24
 8010dca:	4b05      	ldr	r3, [pc, #20]	; (8010de0 <std+0x3c>)
 8010dcc:	62a3      	str	r3, [r4, #40]	; 0x28
 8010dce:	4b05      	ldr	r3, [pc, #20]	; (8010de4 <std+0x40>)
 8010dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010dd2:	4b05      	ldr	r3, [pc, #20]	; (8010de8 <std+0x44>)
 8010dd4:	6224      	str	r4, [r4, #32]
 8010dd6:	6323      	str	r3, [r4, #48]	; 0x30
 8010dd8:	bd10      	pop	{r4, pc}
 8010dda:	bf00      	nop
 8010ddc:	080110f9 	.word	0x080110f9
 8010de0:	0801111b 	.word	0x0801111b
 8010de4:	08011153 	.word	0x08011153
 8010de8:	08011177 	.word	0x08011177

08010dec <_cleanup_r>:
 8010dec:	4901      	ldr	r1, [pc, #4]	; (8010df4 <_cleanup_r+0x8>)
 8010dee:	f000 b8af 	b.w	8010f50 <_fwalk_reent>
 8010df2:	bf00      	nop
 8010df4:	08010d2d 	.word	0x08010d2d

08010df8 <__sfmoreglue>:
 8010df8:	b570      	push	{r4, r5, r6, lr}
 8010dfa:	2268      	movs	r2, #104	; 0x68
 8010dfc:	1e4d      	subs	r5, r1, #1
 8010dfe:	4355      	muls	r5, r2
 8010e00:	460e      	mov	r6, r1
 8010e02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010e06:	f7ff fa65 	bl	80102d4 <_malloc_r>
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	b140      	cbz	r0, 8010e20 <__sfmoreglue+0x28>
 8010e0e:	2100      	movs	r1, #0
 8010e10:	e9c0 1600 	strd	r1, r6, [r0]
 8010e14:	300c      	adds	r0, #12
 8010e16:	60a0      	str	r0, [r4, #8]
 8010e18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010e1c:	f7fd fb2c 	bl	800e478 <memset>
 8010e20:	4620      	mov	r0, r4
 8010e22:	bd70      	pop	{r4, r5, r6, pc}

08010e24 <__sfp_lock_acquire>:
 8010e24:	4801      	ldr	r0, [pc, #4]	; (8010e2c <__sfp_lock_acquire+0x8>)
 8010e26:	f000 b8b3 	b.w	8010f90 <__retarget_lock_acquire_recursive>
 8010e2a:	bf00      	nop
 8010e2c:	20000631 	.word	0x20000631

08010e30 <__sfp_lock_release>:
 8010e30:	4801      	ldr	r0, [pc, #4]	; (8010e38 <__sfp_lock_release+0x8>)
 8010e32:	f000 b8ae 	b.w	8010f92 <__retarget_lock_release_recursive>
 8010e36:	bf00      	nop
 8010e38:	20000631 	.word	0x20000631

08010e3c <__sinit_lock_acquire>:
 8010e3c:	4801      	ldr	r0, [pc, #4]	; (8010e44 <__sinit_lock_acquire+0x8>)
 8010e3e:	f000 b8a7 	b.w	8010f90 <__retarget_lock_acquire_recursive>
 8010e42:	bf00      	nop
 8010e44:	20000632 	.word	0x20000632

08010e48 <__sinit_lock_release>:
 8010e48:	4801      	ldr	r0, [pc, #4]	; (8010e50 <__sinit_lock_release+0x8>)
 8010e4a:	f000 b8a2 	b.w	8010f92 <__retarget_lock_release_recursive>
 8010e4e:	bf00      	nop
 8010e50:	20000632 	.word	0x20000632

08010e54 <__sinit>:
 8010e54:	b510      	push	{r4, lr}
 8010e56:	4604      	mov	r4, r0
 8010e58:	f7ff fff0 	bl	8010e3c <__sinit_lock_acquire>
 8010e5c:	69a3      	ldr	r3, [r4, #24]
 8010e5e:	b11b      	cbz	r3, 8010e68 <__sinit+0x14>
 8010e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e64:	f7ff bff0 	b.w	8010e48 <__sinit_lock_release>
 8010e68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e6c:	6523      	str	r3, [r4, #80]	; 0x50
 8010e6e:	4b13      	ldr	r3, [pc, #76]	; (8010ebc <__sinit+0x68>)
 8010e70:	4a13      	ldr	r2, [pc, #76]	; (8010ec0 <__sinit+0x6c>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e76:	42a3      	cmp	r3, r4
 8010e78:	bf04      	itt	eq
 8010e7a:	2301      	moveq	r3, #1
 8010e7c:	61a3      	streq	r3, [r4, #24]
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f000 f820 	bl	8010ec4 <__sfp>
 8010e84:	6060      	str	r0, [r4, #4]
 8010e86:	4620      	mov	r0, r4
 8010e88:	f000 f81c 	bl	8010ec4 <__sfp>
 8010e8c:	60a0      	str	r0, [r4, #8]
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f000 f818 	bl	8010ec4 <__sfp>
 8010e94:	2200      	movs	r2, #0
 8010e96:	60e0      	str	r0, [r4, #12]
 8010e98:	2104      	movs	r1, #4
 8010e9a:	6860      	ldr	r0, [r4, #4]
 8010e9c:	f7ff ff82 	bl	8010da4 <std>
 8010ea0:	68a0      	ldr	r0, [r4, #8]
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	2109      	movs	r1, #9
 8010ea6:	f7ff ff7d 	bl	8010da4 <std>
 8010eaa:	68e0      	ldr	r0, [r4, #12]
 8010eac:	2202      	movs	r2, #2
 8010eae:	2112      	movs	r1, #18
 8010eb0:	f7ff ff78 	bl	8010da4 <std>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	61a3      	str	r3, [r4, #24]
 8010eb8:	e7d2      	b.n	8010e60 <__sinit+0xc>
 8010eba:	bf00      	nop
 8010ebc:	08011f2c 	.word	0x08011f2c
 8010ec0:	08010ded 	.word	0x08010ded

08010ec4 <__sfp>:
 8010ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ec6:	4607      	mov	r7, r0
 8010ec8:	f7ff ffac 	bl	8010e24 <__sfp_lock_acquire>
 8010ecc:	4b1e      	ldr	r3, [pc, #120]	; (8010f48 <__sfp+0x84>)
 8010ece:	681e      	ldr	r6, [r3, #0]
 8010ed0:	69b3      	ldr	r3, [r6, #24]
 8010ed2:	b913      	cbnz	r3, 8010eda <__sfp+0x16>
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f7ff ffbd 	bl	8010e54 <__sinit>
 8010eda:	3648      	adds	r6, #72	; 0x48
 8010edc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	d503      	bpl.n	8010eec <__sfp+0x28>
 8010ee4:	6833      	ldr	r3, [r6, #0]
 8010ee6:	b30b      	cbz	r3, 8010f2c <__sfp+0x68>
 8010ee8:	6836      	ldr	r6, [r6, #0]
 8010eea:	e7f7      	b.n	8010edc <__sfp+0x18>
 8010eec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010ef0:	b9d5      	cbnz	r5, 8010f28 <__sfp+0x64>
 8010ef2:	4b16      	ldr	r3, [pc, #88]	; (8010f4c <__sfp+0x88>)
 8010ef4:	60e3      	str	r3, [r4, #12]
 8010ef6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010efa:	6665      	str	r5, [r4, #100]	; 0x64
 8010efc:	f000 f847 	bl	8010f8e <__retarget_lock_init_recursive>
 8010f00:	f7ff ff96 	bl	8010e30 <__sfp_lock_release>
 8010f04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010f08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010f0c:	6025      	str	r5, [r4, #0]
 8010f0e:	61a5      	str	r5, [r4, #24]
 8010f10:	2208      	movs	r2, #8
 8010f12:	4629      	mov	r1, r5
 8010f14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010f18:	f7fd faae 	bl	800e478 <memset>
 8010f1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010f20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010f24:	4620      	mov	r0, r4
 8010f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f28:	3468      	adds	r4, #104	; 0x68
 8010f2a:	e7d9      	b.n	8010ee0 <__sfp+0x1c>
 8010f2c:	2104      	movs	r1, #4
 8010f2e:	4638      	mov	r0, r7
 8010f30:	f7ff ff62 	bl	8010df8 <__sfmoreglue>
 8010f34:	4604      	mov	r4, r0
 8010f36:	6030      	str	r0, [r6, #0]
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d1d5      	bne.n	8010ee8 <__sfp+0x24>
 8010f3c:	f7ff ff78 	bl	8010e30 <__sfp_lock_release>
 8010f40:	230c      	movs	r3, #12
 8010f42:	603b      	str	r3, [r7, #0]
 8010f44:	e7ee      	b.n	8010f24 <__sfp+0x60>
 8010f46:	bf00      	nop
 8010f48:	08011f2c 	.word	0x08011f2c
 8010f4c:	ffff0001 	.word	0xffff0001

08010f50 <_fwalk_reent>:
 8010f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f54:	4606      	mov	r6, r0
 8010f56:	4688      	mov	r8, r1
 8010f58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f5c:	2700      	movs	r7, #0
 8010f5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f62:	f1b9 0901 	subs.w	r9, r9, #1
 8010f66:	d505      	bpl.n	8010f74 <_fwalk_reent+0x24>
 8010f68:	6824      	ldr	r4, [r4, #0]
 8010f6a:	2c00      	cmp	r4, #0
 8010f6c:	d1f7      	bne.n	8010f5e <_fwalk_reent+0xe>
 8010f6e:	4638      	mov	r0, r7
 8010f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f74:	89ab      	ldrh	r3, [r5, #12]
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d907      	bls.n	8010f8a <_fwalk_reent+0x3a>
 8010f7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f7e:	3301      	adds	r3, #1
 8010f80:	d003      	beq.n	8010f8a <_fwalk_reent+0x3a>
 8010f82:	4629      	mov	r1, r5
 8010f84:	4630      	mov	r0, r6
 8010f86:	47c0      	blx	r8
 8010f88:	4307      	orrs	r7, r0
 8010f8a:	3568      	adds	r5, #104	; 0x68
 8010f8c:	e7e9      	b.n	8010f62 <_fwalk_reent+0x12>

08010f8e <__retarget_lock_init_recursive>:
 8010f8e:	4770      	bx	lr

08010f90 <__retarget_lock_acquire_recursive>:
 8010f90:	4770      	bx	lr

08010f92 <__retarget_lock_release_recursive>:
 8010f92:	4770      	bx	lr

08010f94 <__swhatbuf_r>:
 8010f94:	b570      	push	{r4, r5, r6, lr}
 8010f96:	460e      	mov	r6, r1
 8010f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f9c:	2900      	cmp	r1, #0
 8010f9e:	b096      	sub	sp, #88	; 0x58
 8010fa0:	4614      	mov	r4, r2
 8010fa2:	461d      	mov	r5, r3
 8010fa4:	da08      	bge.n	8010fb8 <__swhatbuf_r+0x24>
 8010fa6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010faa:	2200      	movs	r2, #0
 8010fac:	602a      	str	r2, [r5, #0]
 8010fae:	061a      	lsls	r2, r3, #24
 8010fb0:	d410      	bmi.n	8010fd4 <__swhatbuf_r+0x40>
 8010fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fb6:	e00e      	b.n	8010fd6 <__swhatbuf_r+0x42>
 8010fb8:	466a      	mov	r2, sp
 8010fba:	f000 f903 	bl	80111c4 <_fstat_r>
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	dbf1      	blt.n	8010fa6 <__swhatbuf_r+0x12>
 8010fc2:	9a01      	ldr	r2, [sp, #4]
 8010fc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010fc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010fcc:	425a      	negs	r2, r3
 8010fce:	415a      	adcs	r2, r3
 8010fd0:	602a      	str	r2, [r5, #0]
 8010fd2:	e7ee      	b.n	8010fb2 <__swhatbuf_r+0x1e>
 8010fd4:	2340      	movs	r3, #64	; 0x40
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	6023      	str	r3, [r4, #0]
 8010fda:	b016      	add	sp, #88	; 0x58
 8010fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08010fe0 <__smakebuf_r>:
 8010fe0:	898b      	ldrh	r3, [r1, #12]
 8010fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fe4:	079d      	lsls	r5, r3, #30
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	460c      	mov	r4, r1
 8010fea:	d507      	bpl.n	8010ffc <__smakebuf_r+0x1c>
 8010fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ff0:	6023      	str	r3, [r4, #0]
 8010ff2:	6123      	str	r3, [r4, #16]
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	6163      	str	r3, [r4, #20]
 8010ff8:	b002      	add	sp, #8
 8010ffa:	bd70      	pop	{r4, r5, r6, pc}
 8010ffc:	ab01      	add	r3, sp, #4
 8010ffe:	466a      	mov	r2, sp
 8011000:	f7ff ffc8 	bl	8010f94 <__swhatbuf_r>
 8011004:	9900      	ldr	r1, [sp, #0]
 8011006:	4605      	mov	r5, r0
 8011008:	4630      	mov	r0, r6
 801100a:	f7ff f963 	bl	80102d4 <_malloc_r>
 801100e:	b948      	cbnz	r0, 8011024 <__smakebuf_r+0x44>
 8011010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011014:	059a      	lsls	r2, r3, #22
 8011016:	d4ef      	bmi.n	8010ff8 <__smakebuf_r+0x18>
 8011018:	f023 0303 	bic.w	r3, r3, #3
 801101c:	f043 0302 	orr.w	r3, r3, #2
 8011020:	81a3      	strh	r3, [r4, #12]
 8011022:	e7e3      	b.n	8010fec <__smakebuf_r+0xc>
 8011024:	4b0d      	ldr	r3, [pc, #52]	; (801105c <__smakebuf_r+0x7c>)
 8011026:	62b3      	str	r3, [r6, #40]	; 0x28
 8011028:	89a3      	ldrh	r3, [r4, #12]
 801102a:	6020      	str	r0, [r4, #0]
 801102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011030:	81a3      	strh	r3, [r4, #12]
 8011032:	9b00      	ldr	r3, [sp, #0]
 8011034:	6163      	str	r3, [r4, #20]
 8011036:	9b01      	ldr	r3, [sp, #4]
 8011038:	6120      	str	r0, [r4, #16]
 801103a:	b15b      	cbz	r3, 8011054 <__smakebuf_r+0x74>
 801103c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011040:	4630      	mov	r0, r6
 8011042:	f000 f8d1 	bl	80111e8 <_isatty_r>
 8011046:	b128      	cbz	r0, 8011054 <__smakebuf_r+0x74>
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	f023 0303 	bic.w	r3, r3, #3
 801104e:	f043 0301 	orr.w	r3, r3, #1
 8011052:	81a3      	strh	r3, [r4, #12]
 8011054:	89a0      	ldrh	r0, [r4, #12]
 8011056:	4305      	orrs	r5, r0
 8011058:	81a5      	strh	r5, [r4, #12]
 801105a:	e7cd      	b.n	8010ff8 <__smakebuf_r+0x18>
 801105c:	08010ded 	.word	0x08010ded

08011060 <_malloc_usable_size_r>:
 8011060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011064:	1f18      	subs	r0, r3, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	bfbc      	itt	lt
 801106a:	580b      	ldrlt	r3, [r1, r0]
 801106c:	18c0      	addlt	r0, r0, r3
 801106e:	4770      	bx	lr

08011070 <_raise_r>:
 8011070:	291f      	cmp	r1, #31
 8011072:	b538      	push	{r3, r4, r5, lr}
 8011074:	4604      	mov	r4, r0
 8011076:	460d      	mov	r5, r1
 8011078:	d904      	bls.n	8011084 <_raise_r+0x14>
 801107a:	2316      	movs	r3, #22
 801107c:	6003      	str	r3, [r0, #0]
 801107e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011082:	bd38      	pop	{r3, r4, r5, pc}
 8011084:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011086:	b112      	cbz	r2, 801108e <_raise_r+0x1e>
 8011088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801108c:	b94b      	cbnz	r3, 80110a2 <_raise_r+0x32>
 801108e:	4620      	mov	r0, r4
 8011090:	f000 f830 	bl	80110f4 <_getpid_r>
 8011094:	462a      	mov	r2, r5
 8011096:	4601      	mov	r1, r0
 8011098:	4620      	mov	r0, r4
 801109a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801109e:	f000 b817 	b.w	80110d0 <_kill_r>
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d00a      	beq.n	80110bc <_raise_r+0x4c>
 80110a6:	1c59      	adds	r1, r3, #1
 80110a8:	d103      	bne.n	80110b2 <_raise_r+0x42>
 80110aa:	2316      	movs	r3, #22
 80110ac:	6003      	str	r3, [r0, #0]
 80110ae:	2001      	movs	r0, #1
 80110b0:	e7e7      	b.n	8011082 <_raise_r+0x12>
 80110b2:	2400      	movs	r4, #0
 80110b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110b8:	4628      	mov	r0, r5
 80110ba:	4798      	blx	r3
 80110bc:	2000      	movs	r0, #0
 80110be:	e7e0      	b.n	8011082 <_raise_r+0x12>

080110c0 <raise>:
 80110c0:	4b02      	ldr	r3, [pc, #8]	; (80110cc <raise+0xc>)
 80110c2:	4601      	mov	r1, r0
 80110c4:	6818      	ldr	r0, [r3, #0]
 80110c6:	f7ff bfd3 	b.w	8011070 <_raise_r>
 80110ca:	bf00      	nop
 80110cc:	20000024 	.word	0x20000024

080110d0 <_kill_r>:
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4d07      	ldr	r5, [pc, #28]	; (80110f0 <_kill_r+0x20>)
 80110d4:	2300      	movs	r3, #0
 80110d6:	4604      	mov	r4, r0
 80110d8:	4608      	mov	r0, r1
 80110da:	4611      	mov	r1, r2
 80110dc:	602b      	str	r3, [r5, #0]
 80110de:	f7f4 f947 	bl	8005370 <_kill>
 80110e2:	1c43      	adds	r3, r0, #1
 80110e4:	d102      	bne.n	80110ec <_kill_r+0x1c>
 80110e6:	682b      	ldr	r3, [r5, #0]
 80110e8:	b103      	cbz	r3, 80110ec <_kill_r+0x1c>
 80110ea:	6023      	str	r3, [r4, #0]
 80110ec:	bd38      	pop	{r3, r4, r5, pc}
 80110ee:	bf00      	nop
 80110f0:	2000062c 	.word	0x2000062c

080110f4 <_getpid_r>:
 80110f4:	f7f4 b934 	b.w	8005360 <_getpid>

080110f8 <__sread>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	460c      	mov	r4, r1
 80110fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011100:	f000 f894 	bl	801122c <_read_r>
 8011104:	2800      	cmp	r0, #0
 8011106:	bfab      	itete	ge
 8011108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801110a:	89a3      	ldrhlt	r3, [r4, #12]
 801110c:	181b      	addge	r3, r3, r0
 801110e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011112:	bfac      	ite	ge
 8011114:	6563      	strge	r3, [r4, #84]	; 0x54
 8011116:	81a3      	strhlt	r3, [r4, #12]
 8011118:	bd10      	pop	{r4, pc}

0801111a <__swrite>:
 801111a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801111e:	461f      	mov	r7, r3
 8011120:	898b      	ldrh	r3, [r1, #12]
 8011122:	05db      	lsls	r3, r3, #23
 8011124:	4605      	mov	r5, r0
 8011126:	460c      	mov	r4, r1
 8011128:	4616      	mov	r6, r2
 801112a:	d505      	bpl.n	8011138 <__swrite+0x1e>
 801112c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011130:	2302      	movs	r3, #2
 8011132:	2200      	movs	r2, #0
 8011134:	f000 f868 	bl	8011208 <_lseek_r>
 8011138:	89a3      	ldrh	r3, [r4, #12]
 801113a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801113e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011142:	81a3      	strh	r3, [r4, #12]
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	4628      	mov	r0, r5
 801114a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801114e:	f000 b817 	b.w	8011180 <_write_r>

08011152 <__sseek>:
 8011152:	b510      	push	{r4, lr}
 8011154:	460c      	mov	r4, r1
 8011156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801115a:	f000 f855 	bl	8011208 <_lseek_r>
 801115e:	1c43      	adds	r3, r0, #1
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	bf15      	itete	ne
 8011164:	6560      	strne	r0, [r4, #84]	; 0x54
 8011166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801116a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801116e:	81a3      	strheq	r3, [r4, #12]
 8011170:	bf18      	it	ne
 8011172:	81a3      	strhne	r3, [r4, #12]
 8011174:	bd10      	pop	{r4, pc}

08011176 <__sclose>:
 8011176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801117a:	f000 b813 	b.w	80111a4 <_close_r>
	...

08011180 <_write_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4d07      	ldr	r5, [pc, #28]	; (80111a0 <_write_r+0x20>)
 8011184:	4604      	mov	r4, r0
 8011186:	4608      	mov	r0, r1
 8011188:	4611      	mov	r1, r2
 801118a:	2200      	movs	r2, #0
 801118c:	602a      	str	r2, [r5, #0]
 801118e:	461a      	mov	r2, r3
 8011190:	f7f4 f925 	bl	80053de <_write>
 8011194:	1c43      	adds	r3, r0, #1
 8011196:	d102      	bne.n	801119e <_write_r+0x1e>
 8011198:	682b      	ldr	r3, [r5, #0]
 801119a:	b103      	cbz	r3, 801119e <_write_r+0x1e>
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	bd38      	pop	{r3, r4, r5, pc}
 80111a0:	2000062c 	.word	0x2000062c

080111a4 <_close_r>:
 80111a4:	b538      	push	{r3, r4, r5, lr}
 80111a6:	4d06      	ldr	r5, [pc, #24]	; (80111c0 <_close_r+0x1c>)
 80111a8:	2300      	movs	r3, #0
 80111aa:	4604      	mov	r4, r0
 80111ac:	4608      	mov	r0, r1
 80111ae:	602b      	str	r3, [r5, #0]
 80111b0:	f7f4 f931 	bl	8005416 <_close>
 80111b4:	1c43      	adds	r3, r0, #1
 80111b6:	d102      	bne.n	80111be <_close_r+0x1a>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	b103      	cbz	r3, 80111be <_close_r+0x1a>
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	bd38      	pop	{r3, r4, r5, pc}
 80111c0:	2000062c 	.word	0x2000062c

080111c4 <_fstat_r>:
 80111c4:	b538      	push	{r3, r4, r5, lr}
 80111c6:	4d07      	ldr	r5, [pc, #28]	; (80111e4 <_fstat_r+0x20>)
 80111c8:	2300      	movs	r3, #0
 80111ca:	4604      	mov	r4, r0
 80111cc:	4608      	mov	r0, r1
 80111ce:	4611      	mov	r1, r2
 80111d0:	602b      	str	r3, [r5, #0]
 80111d2:	f7f4 f92c 	bl	800542e <_fstat>
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	d102      	bne.n	80111e0 <_fstat_r+0x1c>
 80111da:	682b      	ldr	r3, [r5, #0]
 80111dc:	b103      	cbz	r3, 80111e0 <_fstat_r+0x1c>
 80111de:	6023      	str	r3, [r4, #0]
 80111e0:	bd38      	pop	{r3, r4, r5, pc}
 80111e2:	bf00      	nop
 80111e4:	2000062c 	.word	0x2000062c

080111e8 <_isatty_r>:
 80111e8:	b538      	push	{r3, r4, r5, lr}
 80111ea:	4d06      	ldr	r5, [pc, #24]	; (8011204 <_isatty_r+0x1c>)
 80111ec:	2300      	movs	r3, #0
 80111ee:	4604      	mov	r4, r0
 80111f0:	4608      	mov	r0, r1
 80111f2:	602b      	str	r3, [r5, #0]
 80111f4:	f7f4 f92b 	bl	800544e <_isatty>
 80111f8:	1c43      	adds	r3, r0, #1
 80111fa:	d102      	bne.n	8011202 <_isatty_r+0x1a>
 80111fc:	682b      	ldr	r3, [r5, #0]
 80111fe:	b103      	cbz	r3, 8011202 <_isatty_r+0x1a>
 8011200:	6023      	str	r3, [r4, #0]
 8011202:	bd38      	pop	{r3, r4, r5, pc}
 8011204:	2000062c 	.word	0x2000062c

08011208 <_lseek_r>:
 8011208:	b538      	push	{r3, r4, r5, lr}
 801120a:	4d07      	ldr	r5, [pc, #28]	; (8011228 <_lseek_r+0x20>)
 801120c:	4604      	mov	r4, r0
 801120e:	4608      	mov	r0, r1
 8011210:	4611      	mov	r1, r2
 8011212:	2200      	movs	r2, #0
 8011214:	602a      	str	r2, [r5, #0]
 8011216:	461a      	mov	r2, r3
 8011218:	f7f4 f924 	bl	8005464 <_lseek>
 801121c:	1c43      	adds	r3, r0, #1
 801121e:	d102      	bne.n	8011226 <_lseek_r+0x1e>
 8011220:	682b      	ldr	r3, [r5, #0]
 8011222:	b103      	cbz	r3, 8011226 <_lseek_r+0x1e>
 8011224:	6023      	str	r3, [r4, #0]
 8011226:	bd38      	pop	{r3, r4, r5, pc}
 8011228:	2000062c 	.word	0x2000062c

0801122c <_read_r>:
 801122c:	b538      	push	{r3, r4, r5, lr}
 801122e:	4d07      	ldr	r5, [pc, #28]	; (801124c <_read_r+0x20>)
 8011230:	4604      	mov	r4, r0
 8011232:	4608      	mov	r0, r1
 8011234:	4611      	mov	r1, r2
 8011236:	2200      	movs	r2, #0
 8011238:	602a      	str	r2, [r5, #0]
 801123a:	461a      	mov	r2, r3
 801123c:	f7f4 f8b2 	bl	80053a4 <_read>
 8011240:	1c43      	adds	r3, r0, #1
 8011242:	d102      	bne.n	801124a <_read_r+0x1e>
 8011244:	682b      	ldr	r3, [r5, #0]
 8011246:	b103      	cbz	r3, 801124a <_read_r+0x1e>
 8011248:	6023      	str	r3, [r4, #0]
 801124a:	bd38      	pop	{r3, r4, r5, pc}
 801124c:	2000062c 	.word	0x2000062c

08011250 <log>:
 8011250:	b538      	push	{r3, r4, r5, lr}
 8011252:	ed2d 8b02 	vpush	{d8}
 8011256:	ec55 4b10 	vmov	r4, r5, d0
 801125a:	f000 f885 	bl	8011368 <__ieee754_log>
 801125e:	4622      	mov	r2, r4
 8011260:	462b      	mov	r3, r5
 8011262:	4620      	mov	r0, r4
 8011264:	4629      	mov	r1, r5
 8011266:	eeb0 8a40 	vmov.f32	s16, s0
 801126a:	eef0 8a60 	vmov.f32	s17, s1
 801126e:	f7ef fc65 	bl	8000b3c <__aeabi_dcmpun>
 8011272:	b998      	cbnz	r0, 801129c <log+0x4c>
 8011274:	2200      	movs	r2, #0
 8011276:	2300      	movs	r3, #0
 8011278:	4620      	mov	r0, r4
 801127a:	4629      	mov	r1, r5
 801127c:	f7ef fc54 	bl	8000b28 <__aeabi_dcmpgt>
 8011280:	b960      	cbnz	r0, 801129c <log+0x4c>
 8011282:	2200      	movs	r2, #0
 8011284:	2300      	movs	r3, #0
 8011286:	4620      	mov	r0, r4
 8011288:	4629      	mov	r1, r5
 801128a:	f7ef fc25 	bl	8000ad8 <__aeabi_dcmpeq>
 801128e:	b160      	cbz	r0, 80112aa <log+0x5a>
 8011290:	f7fd f8c8 	bl	800e424 <__errno>
 8011294:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80112c0 <log+0x70>
 8011298:	2322      	movs	r3, #34	; 0x22
 801129a:	6003      	str	r3, [r0, #0]
 801129c:	eeb0 0a48 	vmov.f32	s0, s16
 80112a0:	eef0 0a68 	vmov.f32	s1, s17
 80112a4:	ecbd 8b02 	vpop	{d8}
 80112a8:	bd38      	pop	{r3, r4, r5, pc}
 80112aa:	f7fd f8bb 	bl	800e424 <__errno>
 80112ae:	ecbd 8b02 	vpop	{d8}
 80112b2:	2321      	movs	r3, #33	; 0x21
 80112b4:	6003      	str	r3, [r0, #0]
 80112b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80112ba:	4803      	ldr	r0, [pc, #12]	; (80112c8 <log+0x78>)
 80112bc:	f000 bb98 	b.w	80119f0 <nan>
 80112c0:	00000000 	.word	0x00000000
 80112c4:	fff00000 	.word	0xfff00000
 80112c8:	08012198 	.word	0x08012198

080112cc <asinf>:
 80112cc:	b508      	push	{r3, lr}
 80112ce:	ed2d 8b02 	vpush	{d8}
 80112d2:	eeb0 8a40 	vmov.f32	s16, s0
 80112d6:	f000 fa01 	bl	80116dc <__ieee754_asinf>
 80112da:	eeb4 8a48 	vcmp.f32	s16, s16
 80112de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112e2:	eef0 8a40 	vmov.f32	s17, s0
 80112e6:	d615      	bvs.n	8011314 <asinf+0x48>
 80112e8:	eeb0 0a48 	vmov.f32	s0, s16
 80112ec:	f000 fc5c 	bl	8011ba8 <fabsf>
 80112f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80112f4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80112f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fc:	dd0a      	ble.n	8011314 <asinf+0x48>
 80112fe:	f7fd f891 	bl	800e424 <__errno>
 8011302:	ecbd 8b02 	vpop	{d8}
 8011306:	2321      	movs	r3, #33	; 0x21
 8011308:	6003      	str	r3, [r0, #0]
 801130a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801130e:	4804      	ldr	r0, [pc, #16]	; (8011320 <asinf+0x54>)
 8011310:	f000 bc52 	b.w	8011bb8 <nanf>
 8011314:	eeb0 0a68 	vmov.f32	s0, s17
 8011318:	ecbd 8b02 	vpop	{d8}
 801131c:	bd08      	pop	{r3, pc}
 801131e:	bf00      	nop
 8011320:	08012198 	.word	0x08012198

08011324 <atan2f>:
 8011324:	f000 bac0 	b.w	80118a8 <__ieee754_atan2f>

08011328 <sqrtf>:
 8011328:	b508      	push	{r3, lr}
 801132a:	ed2d 8b02 	vpush	{d8}
 801132e:	eeb0 8a40 	vmov.f32	s16, s0
 8011332:	f000 fb59 	bl	80119e8 <__ieee754_sqrtf>
 8011336:	eeb4 8a48 	vcmp.f32	s16, s16
 801133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801133e:	d60c      	bvs.n	801135a <sqrtf+0x32>
 8011340:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011360 <sqrtf+0x38>
 8011344:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134c:	d505      	bpl.n	801135a <sqrtf+0x32>
 801134e:	f7fd f869 	bl	800e424 <__errno>
 8011352:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011356:	2321      	movs	r3, #33	; 0x21
 8011358:	6003      	str	r3, [r0, #0]
 801135a:	ecbd 8b02 	vpop	{d8}
 801135e:	bd08      	pop	{r3, pc}
	...

08011368 <__ieee754_log>:
 8011368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	ec51 0b10 	vmov	r0, r1, d0
 8011370:	ed2d 8b04 	vpush	{d8-d9}
 8011374:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8011378:	b083      	sub	sp, #12
 801137a:	460d      	mov	r5, r1
 801137c:	da29      	bge.n	80113d2 <__ieee754_log+0x6a>
 801137e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011382:	4303      	orrs	r3, r0
 8011384:	ee10 2a10 	vmov	r2, s0
 8011388:	d10c      	bne.n	80113a4 <__ieee754_log+0x3c>
 801138a:	49cf      	ldr	r1, [pc, #828]	; (80116c8 <__ieee754_log+0x360>)
 801138c:	2200      	movs	r2, #0
 801138e:	2300      	movs	r3, #0
 8011390:	2000      	movs	r0, #0
 8011392:	f7ef fa63 	bl	800085c <__aeabi_ddiv>
 8011396:	ec41 0b10 	vmov	d0, r0, r1
 801139a:	b003      	add	sp, #12
 801139c:	ecbd 8b04 	vpop	{d8-d9}
 80113a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a4:	2900      	cmp	r1, #0
 80113a6:	da05      	bge.n	80113b4 <__ieee754_log+0x4c>
 80113a8:	460b      	mov	r3, r1
 80113aa:	f7ee ff75 	bl	8000298 <__aeabi_dsub>
 80113ae:	2200      	movs	r2, #0
 80113b0:	2300      	movs	r3, #0
 80113b2:	e7ee      	b.n	8011392 <__ieee754_log+0x2a>
 80113b4:	4bc5      	ldr	r3, [pc, #788]	; (80116cc <__ieee754_log+0x364>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	f7ef f926 	bl	8000608 <__aeabi_dmul>
 80113bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80113c0:	460d      	mov	r5, r1
 80113c2:	4ac3      	ldr	r2, [pc, #780]	; (80116d0 <__ieee754_log+0x368>)
 80113c4:	4295      	cmp	r5, r2
 80113c6:	dd06      	ble.n	80113d6 <__ieee754_log+0x6e>
 80113c8:	4602      	mov	r2, r0
 80113ca:	460b      	mov	r3, r1
 80113cc:	f7ee ff66 	bl	800029c <__adddf3>
 80113d0:	e7e1      	b.n	8011396 <__ieee754_log+0x2e>
 80113d2:	2300      	movs	r3, #0
 80113d4:	e7f5      	b.n	80113c2 <__ieee754_log+0x5a>
 80113d6:	152c      	asrs	r4, r5, #20
 80113d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80113dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80113e0:	441c      	add	r4, r3
 80113e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80113e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80113ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80113ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80113f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80113f6:	ea42 0105 	orr.w	r1, r2, r5
 80113fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80113fe:	2200      	movs	r2, #0
 8011400:	4bb4      	ldr	r3, [pc, #720]	; (80116d4 <__ieee754_log+0x36c>)
 8011402:	f7ee ff49 	bl	8000298 <__aeabi_dsub>
 8011406:	1cab      	adds	r3, r5, #2
 8011408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801140c:	2b02      	cmp	r3, #2
 801140e:	4682      	mov	sl, r0
 8011410:	468b      	mov	fp, r1
 8011412:	f04f 0200 	mov.w	r2, #0
 8011416:	dc53      	bgt.n	80114c0 <__ieee754_log+0x158>
 8011418:	2300      	movs	r3, #0
 801141a:	f7ef fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 801141e:	b1d0      	cbz	r0, 8011456 <__ieee754_log+0xee>
 8011420:	2c00      	cmp	r4, #0
 8011422:	f000 8122 	beq.w	801166a <__ieee754_log+0x302>
 8011426:	4620      	mov	r0, r4
 8011428:	f7ef f884 	bl	8000534 <__aeabi_i2d>
 801142c:	a390      	add	r3, pc, #576	; (adr r3, 8011670 <__ieee754_log+0x308>)
 801142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011432:	4606      	mov	r6, r0
 8011434:	460f      	mov	r7, r1
 8011436:	f7ef f8e7 	bl	8000608 <__aeabi_dmul>
 801143a:	a38f      	add	r3, pc, #572	; (adr r3, 8011678 <__ieee754_log+0x310>)
 801143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011440:	4604      	mov	r4, r0
 8011442:	460d      	mov	r5, r1
 8011444:	4630      	mov	r0, r6
 8011446:	4639      	mov	r1, r7
 8011448:	f7ef f8de 	bl	8000608 <__aeabi_dmul>
 801144c:	4602      	mov	r2, r0
 801144e:	460b      	mov	r3, r1
 8011450:	4620      	mov	r0, r4
 8011452:	4629      	mov	r1, r5
 8011454:	e7ba      	b.n	80113cc <__ieee754_log+0x64>
 8011456:	a38a      	add	r3, pc, #552	; (adr r3, 8011680 <__ieee754_log+0x318>)
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	4650      	mov	r0, sl
 801145e:	4659      	mov	r1, fp
 8011460:	f7ef f8d2 	bl	8000608 <__aeabi_dmul>
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	2000      	movs	r0, #0
 801146a:	499b      	ldr	r1, [pc, #620]	; (80116d8 <__ieee754_log+0x370>)
 801146c:	f7ee ff14 	bl	8000298 <__aeabi_dsub>
 8011470:	4652      	mov	r2, sl
 8011472:	4606      	mov	r6, r0
 8011474:	460f      	mov	r7, r1
 8011476:	465b      	mov	r3, fp
 8011478:	4650      	mov	r0, sl
 801147a:	4659      	mov	r1, fp
 801147c:	f7ef f8c4 	bl	8000608 <__aeabi_dmul>
 8011480:	4602      	mov	r2, r0
 8011482:	460b      	mov	r3, r1
 8011484:	4630      	mov	r0, r6
 8011486:	4639      	mov	r1, r7
 8011488:	f7ef f8be 	bl	8000608 <__aeabi_dmul>
 801148c:	4606      	mov	r6, r0
 801148e:	460f      	mov	r7, r1
 8011490:	b914      	cbnz	r4, 8011498 <__ieee754_log+0x130>
 8011492:	4632      	mov	r2, r6
 8011494:	463b      	mov	r3, r7
 8011496:	e0a2      	b.n	80115de <__ieee754_log+0x276>
 8011498:	4620      	mov	r0, r4
 801149a:	f7ef f84b 	bl	8000534 <__aeabi_i2d>
 801149e:	a374      	add	r3, pc, #464	; (adr r3, 8011670 <__ieee754_log+0x308>)
 80114a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a4:	4680      	mov	r8, r0
 80114a6:	4689      	mov	r9, r1
 80114a8:	f7ef f8ae 	bl	8000608 <__aeabi_dmul>
 80114ac:	a372      	add	r3, pc, #456	; (adr r3, 8011678 <__ieee754_log+0x310>)
 80114ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b2:	4604      	mov	r4, r0
 80114b4:	460d      	mov	r5, r1
 80114b6:	4640      	mov	r0, r8
 80114b8:	4649      	mov	r1, r9
 80114ba:	f7ef f8a5 	bl	8000608 <__aeabi_dmul>
 80114be:	e0a7      	b.n	8011610 <__ieee754_log+0x2a8>
 80114c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80114c4:	f7ee feea 	bl	800029c <__adddf3>
 80114c8:	4602      	mov	r2, r0
 80114ca:	460b      	mov	r3, r1
 80114cc:	4650      	mov	r0, sl
 80114ce:	4659      	mov	r1, fp
 80114d0:	f7ef f9c4 	bl	800085c <__aeabi_ddiv>
 80114d4:	ec41 0b18 	vmov	d8, r0, r1
 80114d8:	4620      	mov	r0, r4
 80114da:	f7ef f82b 	bl	8000534 <__aeabi_i2d>
 80114de:	ec53 2b18 	vmov	r2, r3, d8
 80114e2:	ec41 0b19 	vmov	d9, r0, r1
 80114e6:	ec51 0b18 	vmov	r0, r1, d8
 80114ea:	f7ef f88d 	bl	8000608 <__aeabi_dmul>
 80114ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80114f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	4602      	mov	r2, r0
 80114fa:	460b      	mov	r3, r1
 80114fc:	4680      	mov	r8, r0
 80114fe:	4689      	mov	r9, r1
 8011500:	f7ef f882 	bl	8000608 <__aeabi_dmul>
 8011504:	a360      	add	r3, pc, #384	; (adr r3, 8011688 <__ieee754_log+0x320>)
 8011506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150a:	4606      	mov	r6, r0
 801150c:	460f      	mov	r7, r1
 801150e:	f7ef f87b 	bl	8000608 <__aeabi_dmul>
 8011512:	a35f      	add	r3, pc, #380	; (adr r3, 8011690 <__ieee754_log+0x328>)
 8011514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011518:	f7ee fec0 	bl	800029c <__adddf3>
 801151c:	4632      	mov	r2, r6
 801151e:	463b      	mov	r3, r7
 8011520:	f7ef f872 	bl	8000608 <__aeabi_dmul>
 8011524:	a35c      	add	r3, pc, #368	; (adr r3, 8011698 <__ieee754_log+0x330>)
 8011526:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152a:	f7ee feb7 	bl	800029c <__adddf3>
 801152e:	4632      	mov	r2, r6
 8011530:	463b      	mov	r3, r7
 8011532:	f7ef f869 	bl	8000608 <__aeabi_dmul>
 8011536:	a35a      	add	r3, pc, #360	; (adr r3, 80116a0 <__ieee754_log+0x338>)
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	f7ee feae 	bl	800029c <__adddf3>
 8011540:	4642      	mov	r2, r8
 8011542:	464b      	mov	r3, r9
 8011544:	f7ef f860 	bl	8000608 <__aeabi_dmul>
 8011548:	a357      	add	r3, pc, #348	; (adr r3, 80116a8 <__ieee754_log+0x340>)
 801154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154e:	4680      	mov	r8, r0
 8011550:	4689      	mov	r9, r1
 8011552:	4630      	mov	r0, r6
 8011554:	4639      	mov	r1, r7
 8011556:	f7ef f857 	bl	8000608 <__aeabi_dmul>
 801155a:	a355      	add	r3, pc, #340	; (adr r3, 80116b0 <__ieee754_log+0x348>)
 801155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011560:	f7ee fe9c 	bl	800029c <__adddf3>
 8011564:	4632      	mov	r2, r6
 8011566:	463b      	mov	r3, r7
 8011568:	f7ef f84e 	bl	8000608 <__aeabi_dmul>
 801156c:	a352      	add	r3, pc, #328	; (adr r3, 80116b8 <__ieee754_log+0x350>)
 801156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011572:	f7ee fe93 	bl	800029c <__adddf3>
 8011576:	4632      	mov	r2, r6
 8011578:	463b      	mov	r3, r7
 801157a:	f7ef f845 	bl	8000608 <__aeabi_dmul>
 801157e:	460b      	mov	r3, r1
 8011580:	4602      	mov	r2, r0
 8011582:	4649      	mov	r1, r9
 8011584:	4640      	mov	r0, r8
 8011586:	f7ee fe89 	bl	800029c <__adddf3>
 801158a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801158e:	9b01      	ldr	r3, [sp, #4]
 8011590:	3551      	adds	r5, #81	; 0x51
 8011592:	431d      	orrs	r5, r3
 8011594:	2d00      	cmp	r5, #0
 8011596:	4680      	mov	r8, r0
 8011598:	4689      	mov	r9, r1
 801159a:	dd48      	ble.n	801162e <__ieee754_log+0x2c6>
 801159c:	4b4e      	ldr	r3, [pc, #312]	; (80116d8 <__ieee754_log+0x370>)
 801159e:	2200      	movs	r2, #0
 80115a0:	4650      	mov	r0, sl
 80115a2:	4659      	mov	r1, fp
 80115a4:	f7ef f830 	bl	8000608 <__aeabi_dmul>
 80115a8:	4652      	mov	r2, sl
 80115aa:	465b      	mov	r3, fp
 80115ac:	f7ef f82c 	bl	8000608 <__aeabi_dmul>
 80115b0:	4602      	mov	r2, r0
 80115b2:	460b      	mov	r3, r1
 80115b4:	4606      	mov	r6, r0
 80115b6:	460f      	mov	r7, r1
 80115b8:	4640      	mov	r0, r8
 80115ba:	4649      	mov	r1, r9
 80115bc:	f7ee fe6e 	bl	800029c <__adddf3>
 80115c0:	ec53 2b18 	vmov	r2, r3, d8
 80115c4:	f7ef f820 	bl	8000608 <__aeabi_dmul>
 80115c8:	4680      	mov	r8, r0
 80115ca:	4689      	mov	r9, r1
 80115cc:	b964      	cbnz	r4, 80115e8 <__ieee754_log+0x280>
 80115ce:	4602      	mov	r2, r0
 80115d0:	460b      	mov	r3, r1
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7ee fe5f 	bl	8000298 <__aeabi_dsub>
 80115da:	4602      	mov	r2, r0
 80115dc:	460b      	mov	r3, r1
 80115de:	4650      	mov	r0, sl
 80115e0:	4659      	mov	r1, fp
 80115e2:	f7ee fe59 	bl	8000298 <__aeabi_dsub>
 80115e6:	e6d6      	b.n	8011396 <__ieee754_log+0x2e>
 80115e8:	a321      	add	r3, pc, #132	; (adr r3, 8011670 <__ieee754_log+0x308>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	ec51 0b19 	vmov	r0, r1, d9
 80115f2:	f7ef f809 	bl	8000608 <__aeabi_dmul>
 80115f6:	a320      	add	r3, pc, #128	; (adr r3, 8011678 <__ieee754_log+0x310>)
 80115f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115fc:	4604      	mov	r4, r0
 80115fe:	460d      	mov	r5, r1
 8011600:	ec51 0b19 	vmov	r0, r1, d9
 8011604:	f7ef f800 	bl	8000608 <__aeabi_dmul>
 8011608:	4642      	mov	r2, r8
 801160a:	464b      	mov	r3, r9
 801160c:	f7ee fe46 	bl	800029c <__adddf3>
 8011610:	4602      	mov	r2, r0
 8011612:	460b      	mov	r3, r1
 8011614:	4630      	mov	r0, r6
 8011616:	4639      	mov	r1, r7
 8011618:	f7ee fe3e 	bl	8000298 <__aeabi_dsub>
 801161c:	4652      	mov	r2, sl
 801161e:	465b      	mov	r3, fp
 8011620:	f7ee fe3a 	bl	8000298 <__aeabi_dsub>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	4620      	mov	r0, r4
 801162a:	4629      	mov	r1, r5
 801162c:	e7d9      	b.n	80115e2 <__ieee754_log+0x27a>
 801162e:	4602      	mov	r2, r0
 8011630:	460b      	mov	r3, r1
 8011632:	4650      	mov	r0, sl
 8011634:	4659      	mov	r1, fp
 8011636:	f7ee fe2f 	bl	8000298 <__aeabi_dsub>
 801163a:	ec53 2b18 	vmov	r2, r3, d8
 801163e:	f7ee ffe3 	bl	8000608 <__aeabi_dmul>
 8011642:	4606      	mov	r6, r0
 8011644:	460f      	mov	r7, r1
 8011646:	2c00      	cmp	r4, #0
 8011648:	f43f af23 	beq.w	8011492 <__ieee754_log+0x12a>
 801164c:	a308      	add	r3, pc, #32	; (adr r3, 8011670 <__ieee754_log+0x308>)
 801164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011652:	ec51 0b19 	vmov	r0, r1, d9
 8011656:	f7ee ffd7 	bl	8000608 <__aeabi_dmul>
 801165a:	a307      	add	r3, pc, #28	; (adr r3, 8011678 <__ieee754_log+0x310>)
 801165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011660:	4604      	mov	r4, r0
 8011662:	460d      	mov	r5, r1
 8011664:	ec51 0b19 	vmov	r0, r1, d9
 8011668:	e727      	b.n	80114ba <__ieee754_log+0x152>
 801166a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80116c0 <__ieee754_log+0x358>
 801166e:	e694      	b.n	801139a <__ieee754_log+0x32>
 8011670:	fee00000 	.word	0xfee00000
 8011674:	3fe62e42 	.word	0x3fe62e42
 8011678:	35793c76 	.word	0x35793c76
 801167c:	3dea39ef 	.word	0x3dea39ef
 8011680:	55555555 	.word	0x55555555
 8011684:	3fd55555 	.word	0x3fd55555
 8011688:	df3e5244 	.word	0xdf3e5244
 801168c:	3fc2f112 	.word	0x3fc2f112
 8011690:	96cb03de 	.word	0x96cb03de
 8011694:	3fc74664 	.word	0x3fc74664
 8011698:	94229359 	.word	0x94229359
 801169c:	3fd24924 	.word	0x3fd24924
 80116a0:	55555593 	.word	0x55555593
 80116a4:	3fe55555 	.word	0x3fe55555
 80116a8:	d078c69f 	.word	0xd078c69f
 80116ac:	3fc39a09 	.word	0x3fc39a09
 80116b0:	1d8e78af 	.word	0x1d8e78af
 80116b4:	3fcc71c5 	.word	0x3fcc71c5
 80116b8:	9997fa04 	.word	0x9997fa04
 80116bc:	3fd99999 	.word	0x3fd99999
	...
 80116c8:	c3500000 	.word	0xc3500000
 80116cc:	43500000 	.word	0x43500000
 80116d0:	7fefffff 	.word	0x7fefffff
 80116d4:	3ff00000 	.word	0x3ff00000
 80116d8:	3fe00000 	.word	0x3fe00000

080116dc <__ieee754_asinf>:
 80116dc:	b538      	push	{r3, r4, r5, lr}
 80116de:	ee10 5a10 	vmov	r5, s0
 80116e2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80116e6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80116ea:	ed2d 8b04 	vpush	{d8-d9}
 80116ee:	d10c      	bne.n	801170a <__ieee754_asinf+0x2e>
 80116f0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8011868 <__ieee754_asinf+0x18c>
 80116f4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 801186c <__ieee754_asinf+0x190>
 80116f8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80116fc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011700:	eeb0 0a67 	vmov.f32	s0, s15
 8011704:	ecbd 8b04 	vpop	{d8-d9}
 8011708:	bd38      	pop	{r3, r4, r5, pc}
 801170a:	dd04      	ble.n	8011716 <__ieee754_asinf+0x3a>
 801170c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011710:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011714:	e7f6      	b.n	8011704 <__ieee754_asinf+0x28>
 8011716:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801171a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801171e:	da0b      	bge.n	8011738 <__ieee754_asinf+0x5c>
 8011720:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8011724:	da52      	bge.n	80117cc <__ieee754_asinf+0xf0>
 8011726:	eddf 7a52 	vldr	s15, [pc, #328]	; 8011870 <__ieee754_asinf+0x194>
 801172a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801172e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011736:	dce5      	bgt.n	8011704 <__ieee754_asinf+0x28>
 8011738:	f000 fa36 	bl	8011ba8 <fabsf>
 801173c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8011740:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8011744:	ee20 8a08 	vmul.f32	s16, s0, s16
 8011748:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8011874 <__ieee754_asinf+0x198>
 801174c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8011878 <__ieee754_asinf+0x19c>
 8011750:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 801187c <__ieee754_asinf+0x1a0>
 8011754:	eea8 7a27 	vfma.f32	s14, s16, s15
 8011758:	eddf 7a49 	vldr	s15, [pc, #292]	; 8011880 <__ieee754_asinf+0x1a4>
 801175c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011760:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011884 <__ieee754_asinf+0x1a8>
 8011764:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011768:	eddf 7a47 	vldr	s15, [pc, #284]	; 8011888 <__ieee754_asinf+0x1ac>
 801176c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011770:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801188c <__ieee754_asinf+0x1b0>
 8011774:	eea7 9a88 	vfma.f32	s18, s15, s16
 8011778:	eddf 7a45 	vldr	s15, [pc, #276]	; 8011890 <__ieee754_asinf+0x1b4>
 801177c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8011780:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8011894 <__ieee754_asinf+0x1b8>
 8011784:	eea7 7a88 	vfma.f32	s14, s15, s16
 8011788:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011898 <__ieee754_asinf+0x1bc>
 801178c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011790:	eeb0 0a48 	vmov.f32	s0, s16
 8011794:	eee7 8a88 	vfma.f32	s17, s15, s16
 8011798:	f000 f926 	bl	80119e8 <__ieee754_sqrtf>
 801179c:	4b3f      	ldr	r3, [pc, #252]	; (801189c <__ieee754_asinf+0x1c0>)
 801179e:	ee29 9a08 	vmul.f32	s18, s18, s16
 80117a2:	429c      	cmp	r4, r3
 80117a4:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80117a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80117ac:	dd3d      	ble.n	801182a <__ieee754_asinf+0x14e>
 80117ae:	eea0 0a06 	vfma.f32	s0, s0, s12
 80117b2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80118a0 <__ieee754_asinf+0x1c4>
 80117b6:	eee0 7a26 	vfma.f32	s15, s0, s13
 80117ba:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801186c <__ieee754_asinf+0x190>
 80117be:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117c2:	2d00      	cmp	r5, #0
 80117c4:	bfd8      	it	le
 80117c6:	eeb1 0a40 	vnegle.f32	s0, s0
 80117ca:	e79b      	b.n	8011704 <__ieee754_asinf+0x28>
 80117cc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80117d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 8011874 <__ieee754_asinf+0x198>
 80117d4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8011878 <__ieee754_asinf+0x19c>
 80117d8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 801188c <__ieee754_asinf+0x1b0>
 80117dc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80117e0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8011880 <__ieee754_asinf+0x1a4>
 80117e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8011884 <__ieee754_asinf+0x1a8>
 80117ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80117f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8011888 <__ieee754_asinf+0x1ac>
 80117f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117f8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801187c <__ieee754_asinf+0x1a0>
 80117fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011800:	eddf 6a23 	vldr	s13, [pc, #140]	; 8011890 <__ieee754_asinf+0x1b4>
 8011804:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011808:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8011894 <__ieee754_asinf+0x1b8>
 801180c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011810:	eddf 6a21 	vldr	s13, [pc, #132]	; 8011898 <__ieee754_asinf+0x1bc>
 8011814:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011818:	ee27 7a27 	vmul.f32	s14, s14, s15
 801181c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011820:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011824:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011828:	e76c      	b.n	8011704 <__ieee754_asinf+0x28>
 801182a:	ee10 3a10 	vmov	r3, s0
 801182e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011832:	f023 030f 	bic.w	r3, r3, #15
 8011836:	ee07 3a10 	vmov	s14, r3
 801183a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801183e:	ee70 7a07 	vadd.f32	s15, s0, s14
 8011842:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011846:	eec8 5a27 	vdiv.f32	s11, s16, s15
 801184a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8011868 <__ieee754_asinf+0x18c>
 801184e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8011852:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8011856:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80118a4 <__ieee754_asinf+0x1c8>
 801185a:	eeb0 6a40 	vmov.f32	s12, s0
 801185e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011862:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011866:	e7aa      	b.n	80117be <__ieee754_asinf+0xe2>
 8011868:	b33bbd2e 	.word	0xb33bbd2e
 801186c:	3fc90fdb 	.word	0x3fc90fdb
 8011870:	7149f2ca 	.word	0x7149f2ca
 8011874:	3811ef08 	.word	0x3811ef08
 8011878:	3a4f7f04 	.word	0x3a4f7f04
 801187c:	3e2aaaab 	.word	0x3e2aaaab
 8011880:	bd241146 	.word	0xbd241146
 8011884:	3e4e0aa8 	.word	0x3e4e0aa8
 8011888:	bea6b090 	.word	0xbea6b090
 801188c:	3d9dc62e 	.word	0x3d9dc62e
 8011890:	bf303361 	.word	0xbf303361
 8011894:	4001572d 	.word	0x4001572d
 8011898:	c019d139 	.word	0xc019d139
 801189c:	3f799999 	.word	0x3f799999
 80118a0:	333bbd2e 	.word	0x333bbd2e
 80118a4:	3f490fdb 	.word	0x3f490fdb

080118a8 <__ieee754_atan2f>:
 80118a8:	ee10 2a90 	vmov	r2, s1
 80118ac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80118b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80118b4:	b510      	push	{r4, lr}
 80118b6:	eef0 7a40 	vmov.f32	s15, s0
 80118ba:	dc06      	bgt.n	80118ca <__ieee754_atan2f+0x22>
 80118bc:	ee10 0a10 	vmov	r0, s0
 80118c0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80118c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80118c8:	dd04      	ble.n	80118d4 <__ieee754_atan2f+0x2c>
 80118ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80118ce:	eeb0 0a67 	vmov.f32	s0, s15
 80118d2:	bd10      	pop	{r4, pc}
 80118d4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80118d8:	d103      	bne.n	80118e2 <__ieee754_atan2f+0x3a>
 80118da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118de:	f000 b88f 	b.w	8011a00 <atanf>
 80118e2:	1794      	asrs	r4, r2, #30
 80118e4:	f004 0402 	and.w	r4, r4, #2
 80118e8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80118ec:	b943      	cbnz	r3, 8011900 <__ieee754_atan2f+0x58>
 80118ee:	2c02      	cmp	r4, #2
 80118f0:	d05e      	beq.n	80119b0 <__ieee754_atan2f+0x108>
 80118f2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80119c4 <__ieee754_atan2f+0x11c>
 80118f6:	2c03      	cmp	r4, #3
 80118f8:	bf08      	it	eq
 80118fa:	eef0 7a47 	vmoveq.f32	s15, s14
 80118fe:	e7e6      	b.n	80118ce <__ieee754_atan2f+0x26>
 8011900:	b941      	cbnz	r1, 8011914 <__ieee754_atan2f+0x6c>
 8011902:	eddf 7a31 	vldr	s15, [pc, #196]	; 80119c8 <__ieee754_atan2f+0x120>
 8011906:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80119cc <__ieee754_atan2f+0x124>
 801190a:	2800      	cmp	r0, #0
 801190c:	bfb8      	it	lt
 801190e:	eef0 7a40 	vmovlt.f32	s15, s0
 8011912:	e7dc      	b.n	80118ce <__ieee754_atan2f+0x26>
 8011914:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8011918:	d110      	bne.n	801193c <__ieee754_atan2f+0x94>
 801191a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801191e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8011922:	d107      	bne.n	8011934 <__ieee754_atan2f+0x8c>
 8011924:	2c02      	cmp	r4, #2
 8011926:	d846      	bhi.n	80119b6 <__ieee754_atan2f+0x10e>
 8011928:	4b29      	ldr	r3, [pc, #164]	; (80119d0 <__ieee754_atan2f+0x128>)
 801192a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801192e:	edd4 7a00 	vldr	s15, [r4]
 8011932:	e7cc      	b.n	80118ce <__ieee754_atan2f+0x26>
 8011934:	2c02      	cmp	r4, #2
 8011936:	d841      	bhi.n	80119bc <__ieee754_atan2f+0x114>
 8011938:	4b26      	ldr	r3, [pc, #152]	; (80119d4 <__ieee754_atan2f+0x12c>)
 801193a:	e7f6      	b.n	801192a <__ieee754_atan2f+0x82>
 801193c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011940:	d0df      	beq.n	8011902 <__ieee754_atan2f+0x5a>
 8011942:	1a5b      	subs	r3, r3, r1
 8011944:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8011948:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801194c:	da1a      	bge.n	8011984 <__ieee754_atan2f+0xdc>
 801194e:	2a00      	cmp	r2, #0
 8011950:	da01      	bge.n	8011956 <__ieee754_atan2f+0xae>
 8011952:	313c      	adds	r1, #60	; 0x3c
 8011954:	db19      	blt.n	801198a <__ieee754_atan2f+0xe2>
 8011956:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801195a:	f000 f925 	bl	8011ba8 <fabsf>
 801195e:	f000 f84f 	bl	8011a00 <atanf>
 8011962:	eef0 7a40 	vmov.f32	s15, s0
 8011966:	2c01      	cmp	r4, #1
 8011968:	d012      	beq.n	8011990 <__ieee754_atan2f+0xe8>
 801196a:	2c02      	cmp	r4, #2
 801196c:	d017      	beq.n	801199e <__ieee754_atan2f+0xf6>
 801196e:	2c00      	cmp	r4, #0
 8011970:	d0ad      	beq.n	80118ce <__ieee754_atan2f+0x26>
 8011972:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80119d8 <__ieee754_atan2f+0x130>
 8011976:	ee77 7a80 	vadd.f32	s15, s15, s0
 801197a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80119dc <__ieee754_atan2f+0x134>
 801197e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011982:	e7a4      	b.n	80118ce <__ieee754_atan2f+0x26>
 8011984:	eddf 7a10 	vldr	s15, [pc, #64]	; 80119c8 <__ieee754_atan2f+0x120>
 8011988:	e7ed      	b.n	8011966 <__ieee754_atan2f+0xbe>
 801198a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80119e0 <__ieee754_atan2f+0x138>
 801198e:	e7ea      	b.n	8011966 <__ieee754_atan2f+0xbe>
 8011990:	ee17 3a90 	vmov	r3, s15
 8011994:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011998:	ee07 3a90 	vmov	s15, r3
 801199c:	e797      	b.n	80118ce <__ieee754_atan2f+0x26>
 801199e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80119d8 <__ieee754_atan2f+0x130>
 80119a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80119a6:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80119dc <__ieee754_atan2f+0x134>
 80119aa:	ee70 7a67 	vsub.f32	s15, s0, s15
 80119ae:	e78e      	b.n	80118ce <__ieee754_atan2f+0x26>
 80119b0:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80119dc <__ieee754_atan2f+0x134>
 80119b4:	e78b      	b.n	80118ce <__ieee754_atan2f+0x26>
 80119b6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80119e4 <__ieee754_atan2f+0x13c>
 80119ba:	e788      	b.n	80118ce <__ieee754_atan2f+0x26>
 80119bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80119e0 <__ieee754_atan2f+0x138>
 80119c0:	e785      	b.n	80118ce <__ieee754_atan2f+0x26>
 80119c2:	bf00      	nop
 80119c4:	c0490fdb 	.word	0xc0490fdb
 80119c8:	3fc90fdb 	.word	0x3fc90fdb
 80119cc:	bfc90fdb 	.word	0xbfc90fdb
 80119d0:	08012304 	.word	0x08012304
 80119d4:	08012310 	.word	0x08012310
 80119d8:	33bbbd2e 	.word	0x33bbbd2e
 80119dc:	40490fdb 	.word	0x40490fdb
 80119e0:	00000000 	.word	0x00000000
 80119e4:	3f490fdb 	.word	0x3f490fdb

080119e8 <__ieee754_sqrtf>:
 80119e8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80119ec:	4770      	bx	lr
	...

080119f0 <nan>:
 80119f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80119f8 <nan+0x8>
 80119f4:	4770      	bx	lr
 80119f6:	bf00      	nop
 80119f8:	00000000 	.word	0x00000000
 80119fc:	7ff80000 	.word	0x7ff80000

08011a00 <atanf>:
 8011a00:	b538      	push	{r3, r4, r5, lr}
 8011a02:	ee10 5a10 	vmov	r5, s0
 8011a06:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011a0a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011a0e:	eef0 7a40 	vmov.f32	s15, s0
 8011a12:	db10      	blt.n	8011a36 <atanf+0x36>
 8011a14:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011a18:	dd04      	ble.n	8011a24 <atanf+0x24>
 8011a1a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8011a22:	bd38      	pop	{r3, r4, r5, pc}
 8011a24:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011b5c <atanf+0x15c>
 8011a28:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8011b60 <atanf+0x160>
 8011a2c:	2d00      	cmp	r5, #0
 8011a2e:	bfd8      	it	le
 8011a30:	eef0 7a40 	vmovle.f32	s15, s0
 8011a34:	e7f3      	b.n	8011a1e <atanf+0x1e>
 8011a36:	4b4b      	ldr	r3, [pc, #300]	; (8011b64 <atanf+0x164>)
 8011a38:	429c      	cmp	r4, r3
 8011a3a:	dc10      	bgt.n	8011a5e <atanf+0x5e>
 8011a3c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011a40:	da0a      	bge.n	8011a58 <atanf+0x58>
 8011a42:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011b68 <atanf+0x168>
 8011a46:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011a4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a4e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a56:	dce2      	bgt.n	8011a1e <atanf+0x1e>
 8011a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a5c:	e013      	b.n	8011a86 <atanf+0x86>
 8011a5e:	f000 f8a3 	bl	8011ba8 <fabsf>
 8011a62:	4b42      	ldr	r3, [pc, #264]	; (8011b6c <atanf+0x16c>)
 8011a64:	429c      	cmp	r4, r3
 8011a66:	dc4f      	bgt.n	8011b08 <atanf+0x108>
 8011a68:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8011a6c:	429c      	cmp	r4, r3
 8011a6e:	dc41      	bgt.n	8011af4 <atanf+0xf4>
 8011a70:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011a74:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011a78:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011a82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011a86:	1c5a      	adds	r2, r3, #1
 8011a88:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011a8c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011b70 <atanf+0x170>
 8011a90:	eddf 5a38 	vldr	s11, [pc, #224]	; 8011b74 <atanf+0x174>
 8011a94:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8011b78 <atanf+0x178>
 8011a98:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011a9c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011aa0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011b7c <atanf+0x17c>
 8011aa4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011aa8:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011b80 <atanf+0x180>
 8011aac:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011ab0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011b84 <atanf+0x184>
 8011ab4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011ab8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011b88 <atanf+0x188>
 8011abc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011ac0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011b8c <atanf+0x18c>
 8011ac4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011ac8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011b90 <atanf+0x190>
 8011acc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011ad0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8011b94 <atanf+0x194>
 8011ad4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011ad8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8011b98 <atanf+0x198>
 8011adc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011ae0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011ae4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011ae8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011aec:	d121      	bne.n	8011b32 <atanf+0x132>
 8011aee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011af2:	e794      	b.n	8011a1e <atanf+0x1e>
 8011af4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011af8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011afc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011b00:	2301      	movs	r3, #1
 8011b02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011b06:	e7be      	b.n	8011a86 <atanf+0x86>
 8011b08:	4b24      	ldr	r3, [pc, #144]	; (8011b9c <atanf+0x19c>)
 8011b0a:	429c      	cmp	r4, r3
 8011b0c:	dc0b      	bgt.n	8011b26 <atanf+0x126>
 8011b0e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b16:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011b1a:	2302      	movs	r3, #2
 8011b1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b24:	e7af      	b.n	8011a86 <atanf+0x86>
 8011b26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011b2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011b2e:	2303      	movs	r3, #3
 8011b30:	e7a9      	b.n	8011a86 <atanf+0x86>
 8011b32:	4a1b      	ldr	r2, [pc, #108]	; (8011ba0 <atanf+0x1a0>)
 8011b34:	491b      	ldr	r1, [pc, #108]	; (8011ba4 <atanf+0x1a4>)
 8011b36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011b3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011b3e:	ed93 0a00 	vldr	s0, [r3]
 8011b42:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011b46:	ed92 0a00 	vldr	s0, [r2]
 8011b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b4e:	2d00      	cmp	r5, #0
 8011b50:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011b54:	bfb8      	it	lt
 8011b56:	eef1 7a67 	vneglt.f32	s15, s15
 8011b5a:	e760      	b.n	8011a1e <atanf+0x1e>
 8011b5c:	3fc90fdb 	.word	0x3fc90fdb
 8011b60:	bfc90fdb 	.word	0xbfc90fdb
 8011b64:	3edfffff 	.word	0x3edfffff
 8011b68:	7149f2ca 	.word	0x7149f2ca
 8011b6c:	3f97ffff 	.word	0x3f97ffff
 8011b70:	3c8569d7 	.word	0x3c8569d7
 8011b74:	3d4bda59 	.word	0x3d4bda59
 8011b78:	bd6ef16b 	.word	0xbd6ef16b
 8011b7c:	3d886b35 	.word	0x3d886b35
 8011b80:	3dba2e6e 	.word	0x3dba2e6e
 8011b84:	3e124925 	.word	0x3e124925
 8011b88:	3eaaaaab 	.word	0x3eaaaaab
 8011b8c:	bd15a221 	.word	0xbd15a221
 8011b90:	bd9d8795 	.word	0xbd9d8795
 8011b94:	bde38e38 	.word	0xbde38e38
 8011b98:	be4ccccd 	.word	0xbe4ccccd
 8011b9c:	401bffff 	.word	0x401bffff
 8011ba0:	0801231c 	.word	0x0801231c
 8011ba4:	0801232c 	.word	0x0801232c

08011ba8 <fabsf>:
 8011ba8:	ee10 3a10 	vmov	r3, s0
 8011bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011bb0:	ee00 3a10 	vmov	s0, r3
 8011bb4:	4770      	bx	lr
	...

08011bb8 <nanf>:
 8011bb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011bc0 <nanf+0x8>
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop
 8011bc0:	7fc00000 	.word	0x7fc00000

08011bc4 <_init>:
 8011bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bc6:	bf00      	nop
 8011bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bca:	bc08      	pop	{r3}
 8011bcc:	469e      	mov	lr, r3
 8011bce:	4770      	bx	lr

08011bd0 <_fini>:
 8011bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bd2:	bf00      	nop
 8011bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011bd6:	bc08      	pop	{r3}
 8011bd8:	469e      	mov	lr, r3
 8011bda:	4770      	bx	lr
