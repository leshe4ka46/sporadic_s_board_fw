
sporadic_s_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aac0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800ac60  0800ac60  0001ac60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1c4  0800b1c4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1cc  0800b1cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1cc  0800b1cc  0001b1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1d0  0800b1d0  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001e8  0800b3b8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  0800b3b8  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110b3  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028a5  00000000  00000000  000312c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  000348f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189ac  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e54  00000000  00000000  0004df2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b9de  00000000  00000000  00060d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec75e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b58  00000000  00000000  000ec7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac48 	.word	0x0800ac48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800ac48 	.word	0x0800ac48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADXL_init>:
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_adxl_i2c;
readings *_adxl_data;
uint16_t scale=0;
void ADXL_init(I2C_HandleTypeDef *i2c,readings *data){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	_adxl_i2c=i2c;
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <ADXL_init+0x54>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
	_adxl_data=data;
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <ADXL_init+0x58>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6013      	str	r3, [r2, #0]
	log_s_wnl("ADXL345 started---");
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADXL_init+0x5c>)
 8000f74:	f002 f86e 	bl	8003054 <log_s_wnl>
	if(ADXL_ReadReg(ADXL345_DEVID)==229){
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f841 	bl	8001000 <ADXL_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2be5      	cmp	r3, #229	; 0xe5
 8000f82:	d103      	bne.n	8000f8c <ADXL_init+0x30>
		log_s("ok");
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <ADXL_init+0x60>)
 8000f86:	f002 f843 	bl	8003010 <log_s>
 8000f8a:	e002      	b.n	8000f92 <ADXL_init+0x36>
	}
	else{
		log_s("ERROR");
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <ADXL_init+0x64>)
 8000f8e:	f002 f83f 	bl	8003010 <log_s>
	}
	_adxl_data->adxl345.scale=2*(1<<(7-ADXL_get_range()));
 8000f92:	f000 f873 	bl	800107c <ADXL_get_range>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f1c3 0307 	rsb	r3, r3, #7
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <ADXL_init+0x58>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	81da      	strh	r2, [r3, #14]
	//log_s_int("dev id=",ADXL_ReadReg(ADXL345_DEVID));
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000204 	.word	0x20000204
 8000fb4:	20000208 	.word	0x20000208
 8000fb8:	0800ac60 	.word	0x0800ac60
 8000fbc:	0800ac74 	.word	0x0800ac74
 8000fc0:	0800ac78 	.word	0x0800ac78

08000fc4 <ADXL_WriteReg>:




void ADXL_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, arr, 2, 1000);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <ADXL_WriteReg+0x38>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	21a6      	movs	r1, #166	; 0xa6
 8000fee:	f003 fe6b 	bl	8004cc8 <HAL_I2C_Master_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000204 	.word	0x20000204

08001000 <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, &reg, 1, 1000);
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <ADXL_ReadReg+0x40>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	21a6      	movs	r1, #166	; 0xa6
 800101a:	f003 fe55 	bl	8004cc8 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_adxl_i2c, ADXL_ADDR<<1, &result, 1, 1000);
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <ADXL_ReadReg+0x40>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 020f 	add.w	r2, r7, #15
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	21a6      	movs	r1, #166	; 0xa6
 8001030:	f003 ff48 	bl	8004ec4 <HAL_I2C_Master_Receive>
	return result;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
	/*uint8_t result;
	HAL_I2C_Mem_Read (_adxl_i2c, ADXL_ADDR<<1, reg, 1, (uint8_t *)result, 1, 100);
	return result;*/
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000204 	.word	0x20000204

08001044 <ADXL_set_range>:
void ADXL_set_range(ADXLRANGE rng){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0x3)| rng);
 800104e:	2031      	movs	r0, #49	; 0x31
 8001050:	f7ff ffd6 	bl	8001000 <ADXL_ReadReg>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4619      	mov	r1, r3
 8001058:	2031      	movs	r0, #49	; 0x31
 800105a:	f7ff ffb3 	bl	8000fc4 <ADXL_WriteReg>
	_adxl_data->adxl345.scale=2*(1<<(7-rng));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f1c3 0307 	rsb	r3, r3, #7
 8001064:	2202      	movs	r2, #2
 8001066:	409a      	lsls	r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <ADXL_set_range+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	81da      	strh	r2, [r3, #14]
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000208 	.word	0x20000208

0800107c <ADXL_get_range>:

uint8_t ADXL_get_range(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)%4;
 8001080:	2031      	movs	r0, #49	; 0x31
 8001082:	f7ff ffbd 	bl	8001000 <ADXL_ReadReg>
 8001086:	4603      	mov	r3, r0
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}

08001092 <ADXL_set_rate>:

void ADXL_set_rate(ADXLBITRATE rate){
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_BW_RATE,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0b111)| rate);
 800109c:	2031      	movs	r0, #49	; 0x31
 800109e:	f7ff ffaf 	bl	8001000 <ADXL_ReadReg>
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	202c      	movs	r0, #44	; 0x2c
 80010a8:	f7ff ff8c 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ADXL_power>:
		case HZ3200:
			return 3200;
	}
}

void ADXL_power(uint8_t pw){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	if(pw==1){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10b      	bne.n	80010dc <ADXL_power+0x28>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL)| ADXL345_BIT_PWR_REG_MEASURE);
 80010c4:	202d      	movs	r0, #45	; 0x2d
 80010c6:	f7ff ff9b 	bl	8001000 <ADXL_ReadReg>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	202d      	movs	r0, #45	; 0x2d
 80010d6:	f7ff ff75 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
	}
}
 80010da:	e006      	b.n	80010ea <ADXL_power+0x36>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
 80010dc:	202d      	movs	r0, #45	; 0x2d
 80010de:	f7ff ff8f 	bl	8001000 <ADXL_ReadReg>
 80010e2:	2100      	movs	r1, #0
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff ff6d 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <ADXL_full_res>:
void ADXL_full_res(uint8_t res){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
	if(res==1){
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <ADXL_full_res+0x22>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)| ADXL345_BIT_FULL_RES_SET);
 8001102:	2031      	movs	r0, #49	; 0x31
 8001104:	f7ff ff7c 	bl	8001000 <ADXL_ReadReg>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	2031      	movs	r0, #49	; 0x31
 800110e:	f7ff ff59 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
	}
}
 8001112:	e00a      	b.n	800112a <ADXL_full_res+0x38>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
 8001114:	2031      	movs	r0, #49	; 0x31
 8001116:	f7ff ff73 	bl	8001000 <ADXL_ReadReg>
 800111a:	4603      	mov	r3, r0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	2031      	movs	r0, #49	; 0x31
 8001126:	f7ff ff4d 	bl	8000fc4 <ADXL_WriteReg>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MadgwickAHRSupdate>:
#define betaDef    0.2f    // 2 * proportional gain //0.3

volatile float beta = betaDef; // 2 * proportional gain (Kp)
volatile float q0 = 1.0f, q1 = 0.0f, q2 = 0.0f, q3 = 0.0f;  // quaternion of sensor frame relative to auxiliary frame

void MadgwickAHRSupdate(float tdelta, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001138:	b0b4      	sub	sp, #208	; 0xd0
 800113a:	af00      	add	r7, sp, #0
 800113c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
 8001140:	edc7 0a0c 	vstr	s1, [r7, #48]	; 0x30
 8001144:	ed87 1a0b 	vstr	s2, [r7, #44]	; 0x2c
 8001148:	edc7 1a0a 	vstr	s3, [r7, #40]	; 0x28
 800114c:	ed87 2a09 	vstr	s4, [r7, #36]	; 0x24
 8001150:	edc7 2a08 	vstr	s5, [r7, #32]
 8001154:	ed87 3a07 	vstr	s6, [r7, #28]
 8001158:	edc7 3a06 	vstr	s7, [r7, #24]
 800115c:	ed87 4a05 	vstr	s8, [r7, #20]
 8001160:	edc7 4a04 	vstr	s9, [r7, #16]
  float hx, hy;
  float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;
  float _8bx, _8bz;

  // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
  if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001164:	edd7 7a06 	vldr	s15, [r7, #24]
 8001168:	eef5 7a40 	vcmp.f32	s15, #0.0
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d11f      	bne.n	80011b2 <MadgwickAHRSupdate+0x7e>
 8001172:	edd7 7a05 	vldr	s15, [r7, #20]
 8001176:	eef5 7a40 	vcmp.f32	s15, #0.0
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d118      	bne.n	80011b2 <MadgwickAHRSupdate+0x7e>
 8001180:	edd7 7a04 	vldr	s15, [r7, #16]
 8001184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d111      	bne.n	80011b2 <MadgwickAHRSupdate+0x7e>
    MadgwickAHRSupdateIMU(tdelta, gx, gy, gz, ax, ay, az);
 800118e:	ed97 3a07 	vldr	s6, [r7, #28]
 8001192:	edd7 2a08 	vldr	s5, [r7, #32]
 8001196:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 800119a:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 800119e:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80011a2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80011a6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80011aa:	f001 f975 	bl	8002498 <MadgwickAHRSupdateIMU>
    return;
 80011ae:	f001 b963 	b.w	8002478 <MadgwickAHRSupdate+0x1344>
  }

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80011b2:	4be4      	ldr	r3, [pc, #912]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	eeb1 7a67 	vneg.f32	s14, s15
 80011bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c4:	4be0      	ldr	r3, [pc, #896]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80011c6:	edd3 6a00 	vldr	s13, [r3]
 80011ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d6:	4bdd      	ldr	r3, [pc, #884]	; (800154c <MadgwickAHRSupdate+0x418>)
 80011d8:	edd3 6a00 	vldr	s13, [r3]
 80011dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80011ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f0:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80011f4:	4bd6      	ldr	r3, [pc, #856]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80011f6:	ed93 7a00 	vldr	s14, [r3]
 80011fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80011fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001202:	4bd1      	ldr	r3, [pc, #836]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001204:	edd3 6a00 	vldr	s13, [r3]
 8001208:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800120c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001210:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001214:	4bcd      	ldr	r3, [pc, #820]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001216:	edd3 6a00 	vldr	s13, [r3]
 800121a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800121e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001226:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001232:	4bc7      	ldr	r3, [pc, #796]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800123c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001240:	4bc0      	ldr	r3, [pc, #768]	; (8001544 <MadgwickAHRSupdate+0x410>)
 8001242:	edd3 6a00 	vldr	s13, [r3]
 8001246:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800124a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800124e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001252:	4bbe      	ldr	r3, [pc, #760]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001254:	edd3 6a00 	vldr	s13, [r3]
 8001258:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800125c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001270:	4bb7      	ldr	r3, [pc, #732]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001272:	ed93 7a00 	vldr	s14, [r3]
 8001276:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	4bb1      	ldr	r3, [pc, #708]	; (8001544 <MadgwickAHRSupdate+0x410>)
 8001280:	edd3 6a00 	vldr	s13, [r3]
 8001284:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001290:	4bad      	ldr	r3, [pc, #692]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001292:	edd3 6a00 	vldr	s13, [r3]
 8001296:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800129a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80012ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	d10e      	bne.n	80012da <MadgwickAHRSupdate+0x1a6>
 80012bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80012c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c8:	d107      	bne.n	80012da <MadgwickAHRSupdate+0x1a6>
 80012ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	f001 8043 	beq.w	8002360 <MadgwickAHRSupdate+0x122c>

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80012da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80012e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fa:	eeb0 0a67 	vmov.f32	s0, s15
 80012fe:	f001 fbef 	bl	8002ae0 <invSqrt>
 8001302:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
    ax *= recipNorm;
 8001306:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800130a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    ay *= recipNorm;
 8001316:	ed97 7a08 	vldr	s14, [r7, #32]
 800131a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc7 7a08 	vstr	s15, [r7, #32]
    az *= recipNorm;
 8001326:	ed97 7a07 	vldr	s14, [r7, #28]
 800132a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalise magnetometer measurement
    recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001336:	edd7 7a06 	vldr	s15, [r7, #24]
 800133a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800133e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001342:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134a:	edd7 7a04 	vldr	s15, [r7, #16]
 800134e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f001 fbc1 	bl	8002ae0 <invSqrt>
 800135e:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
    mx *= recipNorm;
 8001362:	ed97 7a06 	vldr	s14, [r7, #24]
 8001366:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800136a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136e:	edc7 7a06 	vstr	s15, [r7, #24]
    my *= recipNorm;
 8001372:	ed97 7a05 	vldr	s14, [r7, #20]
 8001376:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	edc7 7a05 	vstr	s15, [r7, #20]
    mz *= recipNorm;
 8001382:	ed97 7a04 	vldr	s14, [r7, #16]
 8001386:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800138a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800138e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0mx = 2.0f * q0 * mx;
 8001392:	4b6f      	ldr	r3, [pc, #444]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800139c:	ed97 7a06 	vldr	s14, [r7, #24]
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
    _2q0my = 2.0f * q0 * my;
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80013b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ba:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
    _2q0mz = 2.0f * q0 * mz;
 80013be:	4b64      	ldr	r3, [pc, #400]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d0:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
    _2q1mx = 2.0f * q1 * mx;
 80013d4:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013de:	ed97 7a06 	vldr	s14, [r7, #24]
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
    _2q0 = 2.0f * q0;
 80013ea:	4b59      	ldr	r3, [pc, #356]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 80013ec:	edd3 7a00 	vldr	s15, [r3]
 80013f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013f4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
    _2q1 = 2.0f * q1;
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001402:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
    _2q2 = 2.0f * q2;
 8001406:	4b50      	ldr	r3, [pc, #320]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001410:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
    _2q3 = 2.0f * q3;
 8001414:	4b4d      	ldr	r3, [pc, #308]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001416:	edd3 7a00 	vldr	s15, [r3]
 800141a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    _2q0q2 = 2.0f * q0 * q2;
 8001422:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001424:	edd3 7a00 	vldr	s15, [r3]
 8001428:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800142c:	4b46      	ldr	r3, [pc, #280]	; (8001548 <MadgwickAHRSupdate+0x414>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001436:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    _2q2q3 = 2.0f * q2 * q3;
 800143a:	4b43      	ldr	r3, [pc, #268]	; (8001548 <MadgwickAHRSupdate+0x414>)
 800143c:	edd3 7a00 	vldr	s15, [r3]
 8001440:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001444:	4b41      	ldr	r3, [pc, #260]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    q0q0 = q0 * q0;
 8001452:	4b3f      	ldr	r3, [pc, #252]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	4b3d      	ldr	r3, [pc, #244]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001462:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    q0q1 = q0 * q1;
 8001466:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001468:	ed93 7a00 	vldr	s14, [r3]
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MadgwickAHRSupdate+0x410>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001476:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    q0q2 = q0 * q2;
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 800147c:	ed93 7a00 	vldr	s14, [r3]
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <MadgwickAHRSupdate+0x414>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
    q0q3 = q0 * q3;
 800148e:	4b30      	ldr	r3, [pc, #192]	; (8001550 <MadgwickAHRSupdate+0x41c>)
 8001490:	ed93 7a00 	vldr	s14, [r3]
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800149e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
    q1q1 = q1 * q1;
 80014a2:	4b28      	ldr	r3, [pc, #160]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014a4:	ed93 7a00 	vldr	s14, [r3]
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    q1q2 = q1 * q2;
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014b8:	ed93 7a00 	vldr	s14, [r3]
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    q1q3 = q1 * q3;
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <MadgwickAHRSupdate+0x410>)
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <MadgwickAHRSupdate+0x418>)
 80014d2:	edd3 7a00 	vldr	s15, [r3]
 80014d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014da:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    q2q2 = q2 * q2;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ee:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    q2q3 = q2 * q3;
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MadgwickAHRSupdate+0x414>)
 80014f4:	ed93 7a00 	vldr	s14, [r3]
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <MadgwickAHRSupdate+0x418>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001502:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    q3q3 = q3 * q3;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001508:	ed93 7a00 	vldr	s14, [r3]
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MadgwickAHRSupdate+0x418>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

    // Reference direction of Earth's magnetic field
    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800151a:	ed97 7a06 	vldr	s14, [r7, #24]
 800151e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	4b09      	ldr	r3, [pc, #36]	; (800154c <MadgwickAHRSupdate+0x418>)
 8001528:	edd3 6a00 	vldr	s13, [r3]
 800152c:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8001530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <MadgwickAHRSupdate+0x414>)
 800153a:	edd3 6a00 	vldr	s13, [r3]
 800153e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8001542:	e007      	b.n	8001554 <MadgwickAHRSupdate+0x420>
 8001544:	2000020c 	.word	0x2000020c
 8001548:	20000210 	.word	0x20000210
 800154c:	20000214 	.word	0x20000214
 8001550:	20000004 	.word	0x20000004
 8001554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800155c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001560:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001568:	ee37 7a27 	vadd.f32	s14, s14, s15
 800156c:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8001570:	edd7 7a05 	vldr	s15, [r7, #20]
 8001574:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001578:	4bef      	ldr	r3, [pc, #956]	; (8001938 <MadgwickAHRSupdate+0x804>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001582:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001586:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800158a:	edd7 7a04 	vldr	s15, [r7, #16]
 800158e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001592:	4bea      	ldr	r3, [pc, #936]	; (800193c <MadgwickAHRSupdate+0x808>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015a4:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b0:	edd7 6a06 	vldr	s13, [r7, #24]
 80015b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80015b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80015c4:	4bdd      	ldr	r3, [pc, #884]	; (800193c <MadgwickAHRSupdate+0x808>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80015ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015d2:	edd7 6a05 	vldr	s13, [r7, #20]
 80015d6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80015da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e2:	4bd7      	ldr	r3, [pc, #860]	; (8001940 <MadgwickAHRSupdate+0x80c>)
 80015e4:	edd3 6a00 	vldr	s13, [r3]
 80015e8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80015ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015f4:	4bd0      	ldr	r3, [pc, #832]	; (8001938 <MadgwickAHRSupdate+0x804>)
 80015f6:	edd3 6a00 	vldr	s13, [r3]
 80015fa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80015fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001606:	edd7 6a05 	vldr	s13, [r7, #20]
 800160a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800160e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001616:	edd7 6a05 	vldr	s13, [r7, #20]
 800161a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800161e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001626:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 800162a:	edd7 7a04 	vldr	s15, [r7, #16]
 800162e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001632:	4bc2      	ldr	r3, [pc, #776]	; (800193c <MadgwickAHRSupdate+0x808>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800163c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001640:	edd7 6a05 	vldr	s13, [r7, #20]
 8001644:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001650:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    _2bx = sqrt(hx * hx + hy * hy);
 8001654:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001658:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800165c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001660:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001668:	ee17 0a90 	vmov	r0, s15
 800166c:	f7fe ff74 	bl	8000558 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b10 	vmov	d0, r2, r3
 8001678:	f008 ff6e 	bl	800a558 <sqrt>
 800167c:	ec53 2b10 	vmov	r2, r3, d0
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa98 	bl	8000bb8 <__aeabi_d2f>
 8001688:	4603      	mov	r3, r0
 800168a:	663b      	str	r3, [r7, #96]	; 0x60
    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 800168c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001690:	eeb1 7a67 	vneg.f32	s14, s15
 8001694:	4ba8      	ldr	r3, [pc, #672]	; (8001938 <MadgwickAHRSupdate+0x804>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800169e:	4ba8      	ldr	r3, [pc, #672]	; (8001940 <MadgwickAHRSupdate+0x80c>)
 80016a0:	edd3 6a00 	vldr	s13, [r3]
 80016a4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016b0:	edd7 6a04 	vldr	s13, [r7, #16]
 80016b4:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c0:	4b9e      	ldr	r3, [pc, #632]	; (800193c <MadgwickAHRSupdate+0x808>)
 80016c2:	edd3 6a00 	vldr	s13, [r3]
 80016c6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80016ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80016d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e2:	edd7 6a28 	vldr	s13, [r7, #160]	; 0xa0
 80016e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016ee:	4b93      	ldr	r3, [pc, #588]	; (800193c <MadgwickAHRSupdate+0x808>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016fc:	edd7 6a04 	vldr	s13, [r7, #16]
 8001700:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001704:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001708:	ee37 7a67 	vsub.f32	s14, s14, s15
 800170c:	edd7 6a04 	vldr	s13, [r7, #16]
 8001710:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _4bx = 2.0f * _2bx;
 8001720:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001724:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001728:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    _4bz = 2.0f * _2bz;
 800172c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001730:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001734:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _8bx = 2.0f * _4bx;
 8001738:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800173c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001740:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _8bz = 2.0f * _4bz;
 8001744:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

    // Gradient decent algorithm corrective step
    s0 = -_2q2 * (2.0f * (q1q3 - q0q2) - ax) + _2q1 * (2.0f * (q0q1 + q2q3) - ay) - _4bz * q2 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (-_4bx * q3 + _4bz * q1) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + _4bx * q2 * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 8001750:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001754:	eeb1 7a67 	vneg.f32	s14, s15
 8001758:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800175c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001760:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001764:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001768:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800176c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001774:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001778:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800177c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001780:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001784:	edd7 7a08 	vldr	s15, [r7, #32]
 8001788:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800178c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	ee17 0a90 	vmov	r0, s15
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	4604      	mov	r4, r0
 80017a2:	460d      	mov	r5, r1
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <MadgwickAHRSupdate+0x804>)
 80017a6:	ed93 7a00 	vldr	s14, [r3]
 80017aa:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b2:	ee17 0a90 	vmov	r0, s15
 80017b6:	f7fe fecf 	bl	8000558 <__aeabi_f2d>
 80017ba:	4680      	mov	r8, r0
 80017bc:	4689      	mov	r9, r1
 80017be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017c0:	f7fe feca 	bl	8000558 <__aeabi_f2d>
 80017c4:	4682      	mov	sl, r0
 80017c6:	468b      	mov	fp, r1
 80017c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017ca:	f7fe fec5 	bl	8000558 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	495b      	ldr	r1, [pc, #364]	; (8001944 <MadgwickAHRSupdate+0x810>)
 80017d8:	f7fe fd5e 	bl	8000298 <__aeabi_dsub>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80017e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80017e6:	f7fe feb7 	bl	8000558 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f2:	f7fe fd51 	bl	8000298 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4650      	mov	r0, sl
 80017fc:	4659      	mov	r1, fp
 80017fe:	f7fe ff03 	bl	8000608 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4692      	mov	sl, r2
 8001808:	469b      	mov	fp, r3
 800180a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800180e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001812:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001816:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800181a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe fe99 	bl	8000558 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4650      	mov	r0, sl
 800182c:	4659      	mov	r1, fp
 800182e:	f7fe fd35 	bl	800029c <__adddf3>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4692      	mov	sl, r2
 8001838:	469b      	mov	fp, r3
 800183a:	69b8      	ldr	r0, [r7, #24]
 800183c:	f7fe fe8c 	bl	8000558 <__aeabi_f2d>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4650      	mov	r0, sl
 8001846:	4659      	mov	r1, fp
 8001848:	f7fe fd26 	bl	8000298 <__aeabi_dsub>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4640      	mov	r0, r8
 8001852:	4649      	mov	r1, r9
 8001854:	f7fe fed8 	bl	8000608 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fd1a 	bl	8000298 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4614      	mov	r4, r2
 800186a:	461d      	mov	r5, r3
 800186c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001870:	eeb1 7a67 	vneg.f32	s14, s15
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <MadgwickAHRSupdate+0x808>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187e:	4b30      	ldr	r3, [pc, #192]	; (8001940 <MadgwickAHRSupdate+0x80c>)
 8001880:	edd3 6a00 	vldr	s13, [r3]
 8001884:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800188c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001890:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001894:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001898:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800189c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a4:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 80018a8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80018ac:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80018b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80018c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	ee17 0a90 	vmov	r0, s15
 80018cc:	f7fe fe44 	bl	8000558 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fce0 	bl	800029c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80018e4:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MadgwickAHRSupdate+0x804>)
 80018e6:	ed93 7a00 	vldr	s14, [r3]
 80018ea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	ee17 0a90 	vmov	r0, s15
 80018f6:	f7fe fe2f 	bl	8000558 <__aeabi_f2d>
 80018fa:	4680      	mov	r8, r0
 80018fc:	4689      	mov	r9, r1
 80018fe:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001902:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001906:	ee37 7a27 	vadd.f32	s14, s14, s15
 800190a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	ee17 0a90 	vmov	r0, s15
 8001916:	f7fe fe1f 	bl	8000558 <__aeabi_f2d>
 800191a:	4682      	mov	sl, r0
 800191c:	468b      	mov	fp, r1
 800191e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001920:	f7fe fe1a 	bl	8000558 <__aeabi_f2d>
 8001924:	e9c7 0100 	strd	r0, r1, [r7]
 8001928:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800192c:	f7fe fe14 	bl	8000558 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	e008      	b.n	8001948 <MadgwickAHRSupdate+0x814>
 8001936:	bf00      	nop
 8001938:	20000210 	.word	0x20000210
 800193c:	20000214 	.word	0x20000214
 8001940:	2000020c 	.word	0x2000020c
 8001944:	3fe00000 	.word	0x3fe00000
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	49e9      	ldr	r1, [pc, #932]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 800194e:	f7fe fca3 	bl	8000298 <__aeabi_dsub>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4614      	mov	r4, r2
 8001958:	461d      	mov	r5, r3
 800195a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800195c:	f7fe fdfc 	bl	8000558 <__aeabi_f2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4620      	mov	r0, r4
 8001966:	4629      	mov	r1, r5
 8001968:	f7fe fc96 	bl	8000298 <__aeabi_dsub>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001974:	f7fe fe48 	bl	8000608 <__aeabi_dmul>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4650      	mov	r0, sl
 800197e:	4659      	mov	r1, fp
 8001980:	f7fe fc8c 	bl	800029c <__adddf3>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	6938      	ldr	r0, [r7, #16]
 800198e:	f7fe fde3 	bl	8000558 <__aeabi_f2d>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fc7d 	bl	8000298 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4640      	mov	r0, r8
 80019a4:	4649      	mov	r1, r9
 80019a6:	f7fe fe2f 	bl	8000608 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019b2:	f7fe fc73 	bl	800029c <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8fb 	bl	8000bb8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
    s1 = _2q3 * (2.0f * (q1q3 - q0q2) - ax) + _2q0 * (2.0f * (q0q1 + q2q3) - ay) - 4.0f * q1 * (2.0f * (0.5 - q1q1 - q2q2) - az) + _4bz * q3 * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (_4bx * q2 + _4bz * q0) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q3 - _8bz * q1) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 80019c6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80019ca:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019d6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80019e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e6:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80019ea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80019ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019f2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80019fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0a:	ee17 0a90 	vmov	r0, s15
 8001a0e:	f7fe fda3 	bl	8000558 <__aeabi_f2d>
 8001a12:	4604      	mov	r4, r0
 8001a14:	460d      	mov	r5, r1
 8001a16:	4bb8      	ldr	r3, [pc, #736]	; (8001cf8 <MadgwickAHRSupdate+0xbc4>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	ee17 0a90 	vmov	r0, s15
 8001a28:	f7fe fd96 	bl	8000558 <__aeabi_f2d>
 8001a2c:	4680      	mov	r8, r0
 8001a2e:	4689      	mov	r9, r1
 8001a30:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a34:	f7fe fd90 	bl	8000558 <__aeabi_f2d>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	49ac      	ldr	r1, [pc, #688]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 8001a42:	f7fe fc29 	bl	8000298 <__aeabi_dsub>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4692      	mov	sl, r2
 8001a4c:	469b      	mov	fp, r3
 8001a4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4650      	mov	r0, sl
 8001a5a:	4659      	mov	r1, fp
 8001a5c:	f7fe fc1c 	bl	8000298 <__aeabi_dsub>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	f7fe fc16 	bl	800029c <__adddf3>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4692      	mov	sl, r2
 8001a76:	469b      	mov	fp, r3
 8001a78:	69f8      	ldr	r0, [r7, #28]
 8001a7a:	f7fe fd6d 	bl	8000558 <__aeabi_f2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4650      	mov	r0, sl
 8001a84:	4659      	mov	r1, fp
 8001a86:	f7fe fc07 	bl	8000298 <__aeabi_dsub>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f7fe fdb9 	bl	8000608 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	f7fe fbfb 	bl	8000298 <__aeabi_dsub>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4692      	mov	sl, r2
 8001aa8:	469b      	mov	fp, r3
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <MadgwickAHRSupdate+0xbc8>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd4c 	bl	8000558 <__aeabi_f2d>
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
 8001ac4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001ac6:	f7fe fd47 	bl	8000558 <__aeabi_f2d>
 8001aca:	4680      	mov	r8, r0
 8001acc:	4689      	mov	r9, r1
 8001ace:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	f04f 0000 	mov.w	r0, #0
 8001adc:	4985      	ldr	r1, [pc, #532]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 8001ade:	f7fe fbdb 	bl	8000298 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001aea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001aec:	f7fe fd34 	bl	8000558 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001af8:	f7fe fbce 	bl	8000298 <__aeabi_dsub>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4640      	mov	r0, r8
 8001b02:	4649      	mov	r1, r9
 8001b04:	f7fe fd80 	bl	8000608 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4690      	mov	r8, r2
 8001b0e:	4699      	mov	r9, r3
 8001b10:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001b14:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b1c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	ee17 0a90 	vmov	r0, s15
 8001b28:	f7fe fd16 	bl	8000558 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4640      	mov	r0, r8
 8001b32:	4649      	mov	r1, r9
 8001b34:	f7fe fbb2 	bl	800029c <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4690      	mov	r8, r2
 8001b3e:	4699      	mov	r9, r3
 8001b40:	69b8      	ldr	r0, [r7, #24]
 8001b42:	f7fe fd09 	bl	8000558 <__aeabi_f2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f7fe fba3 	bl	8000298 <__aeabi_dsub>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fd55 	bl	8000608 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4650      	mov	r0, sl
 8001b64:	4659      	mov	r1, fp
 8001b66:	f7fe fb99 	bl	800029c <__adddf3>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	4b63      	ldr	r3, [pc, #396]	; (8001d00 <MadgwickAHRSupdate+0xbcc>)
 8001b74:	ed93 7a00 	vldr	s14, [r3]
 8001b78:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b80:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <MadgwickAHRSupdate+0xbd0>)
 8001b82:	edd3 6a00 	vldr	s13, [r3]
 8001b86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b92:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001b96:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001b9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b9e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ba2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba6:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001baa:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001bae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bb2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001bb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bca:	ee17 0a90 	vmov	r0, s15
 8001bce:	f7fe fcc3 	bl	8000558 <__aeabi_f2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	4629      	mov	r1, r5
 8001bda:	f7fe fb5f 	bl	800029c <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <MadgwickAHRSupdate+0xbc8>)
 8001be8:	ed93 7a00 	vldr	s14, [r3]
 8001bec:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf4:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <MadgwickAHRSupdate+0xbc4>)
 8001bf6:	edd3 6a00 	vldr	s13, [r3]
 8001bfa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	ee17 0a90 	vmov	r0, s15
 8001c0a:	f7fe fca5 	bl	8000558 <__aeabi_f2d>
 8001c0e:	4680      	mov	r8, r0
 8001c10:	4689      	mov	r9, r1
 8001c12:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001c16:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001c1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c26:	ee17 0a90 	vmov	r0, s15
 8001c2a:	f7fe fc95 	bl	8000558 <__aeabi_f2d>
 8001c2e:	4682      	mov	sl, r0
 8001c30:	468b      	mov	fp, r1
 8001c32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001c34:	f7fe fc90 	bl	8000558 <__aeabi_f2d>
 8001c38:	e9c7 0100 	strd	r0, r1, [r7]
 8001c3c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c40:	f7fe fc8a 	bl	8000558 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	f04f 0000 	mov.w	r0, #0
 8001c4c:	4929      	ldr	r1, [pc, #164]	; (8001cf4 <MadgwickAHRSupdate+0xbc0>)
 8001c4e:	f7fe fb23 	bl	8000298 <__aeabi_dsub>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4614      	mov	r4, r2
 8001c58:	461d      	mov	r5, r3
 8001c5a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c5c:	f7fe fc7c 	bl	8000558 <__aeabi_f2d>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4620      	mov	r0, r4
 8001c66:	4629      	mov	r1, r5
 8001c68:	f7fe fb16 	bl	8000298 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c74:	f7fe fcc8 	bl	8000608 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4650      	mov	r0, sl
 8001c7e:	4659      	mov	r1, fp
 8001c80:	f7fe fb0c 	bl	800029c <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	6938      	ldr	r0, [r7, #16]
 8001c8e:	f7fe fc63 	bl	8000558 <__aeabi_f2d>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fafd 	bl	8000298 <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4640      	mov	r0, r8
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	f7fe fcaf 	bl	8000608 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cb2:	f7fe faf3 	bl	800029c <__adddf3>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4610      	mov	r0, r2
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	f7fe ff7b 	bl	8000bb8 <__aeabi_d2f>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	647b      	str	r3, [r7, #68]	; 0x44
    s2 = -_2q0 * (2.0f * (q1q3 - q0q2) - ax) + _2q3 * (2.0f * (q0q1 + q2q3) - ay) + (-4.0f * q2) * (2.0f * (0.5 - q1q1 - q2q2) - az) + (-_8bx * q2 - _4bz * q0) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (_4bx * q1 + _4bz * q3) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q0 - _8bz * q2) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 8001cc6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8001cca:	eeb1 7a67 	vneg.f32	s14, s15
 8001cce:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001cd2:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001cd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001cda:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001cde:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ce2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ce6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cea:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001cee:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001cf2:	e009      	b.n	8001d08 <MadgwickAHRSupdate+0xbd4>
 8001cf4:	3fe00000 	.word	0x3fe00000
 8001cf8:	2000020c 	.word	0x2000020c
 8001cfc:	20000214 	.word	0x20000214
 8001d00:	20000210 	.word	0x20000210
 8001d04:	20000004 	.word	0x20000004
 8001d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d0c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d10:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d18:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	ee17 0a90 	vmov	r0, s15
 8001d28:	f7fe fc16 	bl	8000558 <__aeabi_f2d>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
 8001d30:	4be8      	ldr	r3, [pc, #928]	; (80020d4 <MadgwickAHRSupdate+0xfa0>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	ee17 0a90 	vmov	r0, s15
 8001d42:	f7fe fc09 	bl	8000558 <__aeabi_f2d>
 8001d46:	4680      	mov	r8, r0
 8001d48:	4689      	mov	r9, r1
 8001d4a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d4e:	f7fe fc03 	bl	8000558 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f04f 0000 	mov.w	r0, #0
 8001d5a:	49df      	ldr	r1, [pc, #892]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8001d5c:	f7fe fa9c 	bl	8000298 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4692      	mov	sl, r2
 8001d66:	469b      	mov	fp, r3
 8001d68:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d6a:	f7fe fbf5 	bl	8000558 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4650      	mov	r0, sl
 8001d74:	4659      	mov	r1, fp
 8001d76:	f7fe fa8f 	bl	8000298 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	f7fe fa89 	bl	800029c <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4692      	mov	sl, r2
 8001d90:	469b      	mov	fp, r3
 8001d92:	69f8      	ldr	r0, [r7, #28]
 8001d94:	f7fe fbe0 	bl	8000558 <__aeabi_f2d>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4650      	mov	r0, sl
 8001d9e:	4659      	mov	r1, fp
 8001da0:	f7fe fa7a 	bl	8000298 <__aeabi_dsub>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4640      	mov	r0, r8
 8001daa:	4649      	mov	r1, r9
 8001dac:	f7fe fc2c 	bl	8000608 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4620      	mov	r0, r4
 8001db6:	4629      	mov	r1, r5
 8001db8:	f7fe fa70 	bl	800029c <__adddf3>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4692      	mov	sl, r2
 8001dc2:	469b      	mov	fp, r3
 8001dc4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001dc8:	eeb1 7a67 	vneg.f32	s14, s15
 8001dcc:	4bc1      	ldr	r3, [pc, #772]	; (80020d4 <MadgwickAHRSupdate+0xfa0>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd6:	4bc1      	ldr	r3, [pc, #772]	; (80020dc <MadgwickAHRSupdate+0xfa8>)
 8001dd8:	edd3 6a00 	vldr	s13, [r3]
 8001ddc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de8:	ee17 0a90 	vmov	r0, s15
 8001dec:	f7fe fbb4 	bl	8000558 <__aeabi_f2d>
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
 8001df4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001df6:	f7fe fbaf 	bl	8000558 <__aeabi_f2d>
 8001dfa:	4680      	mov	r8, r0
 8001dfc:	4689      	mov	r9, r1
 8001dfe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e00:	f7fe fbaa 	bl	8000558 <__aeabi_f2d>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	49b2      	ldr	r1, [pc, #712]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8001e0e:	f7fe fa43 	bl	8000298 <__aeabi_dsub>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001e1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e1c:	f7fe fb9c 	bl	8000558 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e28:	f7fe fa36 	bl	8000298 <__aeabi_dsub>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4640      	mov	r0, r8
 8001e32:	4649      	mov	r1, r9
 8001e34:	f7fe fbe8 	bl	8000608 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4690      	mov	r8, r2
 8001e3e:	4699      	mov	r9, r3
 8001e40:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001e44:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e4c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e54:	ee17 0a90 	vmov	r0, s15
 8001e58:	f7fe fb7e 	bl	8000558 <__aeabi_f2d>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4640      	mov	r0, r8
 8001e62:	4649      	mov	r1, r9
 8001e64:	f7fe fa1a 	bl	800029c <__adddf3>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	4690      	mov	r8, r2
 8001e6e:	4699      	mov	r9, r3
 8001e70:	69b8      	ldr	r0, [r7, #24]
 8001e72:	f7fe fb71 	bl	8000558 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	4649      	mov	r1, r9
 8001e7e:	f7fe fa0b 	bl	8000298 <__aeabi_dsub>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4620      	mov	r0, r4
 8001e88:	4629      	mov	r1, r5
 8001e8a:	f7fe fbbd 	bl	8000608 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4650      	mov	r0, sl
 8001e94:	4659      	mov	r1, fp
 8001e96:	f7fe fa01 	bl	800029c <__adddf3>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4614      	mov	r4, r2
 8001ea0:	461d      	mov	r5, r3
 8001ea2:	4b8f      	ldr	r3, [pc, #572]	; (80020e0 <MadgwickAHRSupdate+0xfac>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb0:	4b8c      	ldr	r3, [pc, #560]	; (80020e4 <MadgwickAHRSupdate+0xfb0>)
 8001eb2:	edd3 6a00 	vldr	s13, [r3]
 8001eb6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec2:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001ec6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001eca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ece:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001ed2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ed6:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8001eda:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001ede:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ee2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001ee6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	ee17 0a90 	vmov	r0, s15
 8001efe:	f7fe fb2b 	bl	8000558 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7fe f9c7 	bl	800029c <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <MadgwickAHRSupdate+0xfa8>)
 8001f18:	ed93 7a00 	vldr	s14, [r3]
 8001f1c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f24:	4b6b      	ldr	r3, [pc, #428]	; (80020d4 <MadgwickAHRSupdate+0xfa0>)
 8001f26:	edd3 6a00 	vldr	s13, [r3]
 8001f2a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001f2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f36:	ee17 0a90 	vmov	r0, s15
 8001f3a:	f7fe fb0d 	bl	8000558 <__aeabi_f2d>
 8001f3e:	4680      	mov	r8, r0
 8001f40:	4689      	mov	r9, r1
 8001f42:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001f46:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8001f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f56:	ee17 0a90 	vmov	r0, s15
 8001f5a:	f7fe fafd 	bl	8000558 <__aeabi_f2d>
 8001f5e:	4682      	mov	sl, r0
 8001f60:	468b      	mov	fp, r1
 8001f62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001f64:	f7fe faf8 	bl	8000558 <__aeabi_f2d>
 8001f68:	e9c7 0100 	strd	r0, r1, [r7]
 8001f6c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f70:	f7fe faf2 	bl	8000558 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	f04f 0000 	mov.w	r0, #0
 8001f7c:	4956      	ldr	r1, [pc, #344]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8001f7e:	f7fe f98b 	bl	8000298 <__aeabi_dsub>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4614      	mov	r4, r2
 8001f88:	461d      	mov	r5, r3
 8001f8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f8c:	f7fe fae4 	bl	8000558 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe f97e 	bl	8000298 <__aeabi_dsub>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa4:	f7fe fb30 	bl	8000608 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4650      	mov	r0, sl
 8001fae:	4659      	mov	r1, fp
 8001fb0:	f7fe f974 	bl	800029c <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4614      	mov	r4, r2
 8001fba:	461d      	mov	r5, r3
 8001fbc:	6938      	ldr	r0, [r7, #16]
 8001fbe:	f7fe facb 	bl	8000558 <__aeabi_f2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe f965 	bl	8000298 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe fb17 	bl	8000608 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe2:	f7fe f95b 	bl	800029c <__adddf3>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	f7fe fde3 	bl	8000bb8 <__aeabi_d2f>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
    s3 = _2q1 * (2.0f * (q1q3 - q0q2) - ax) + _2q2 * (2.0f * (q0q1 + q2q3) - ay) + (-_8bx * q3 + _4bz * q1) * (_4bx * (0.5 - q2q2 - q3q3) + _4bz * (q1q3 - q0q2) - mx) + (-_4bx * q0 + _4bz * q2) * (_4bx * (q1q2 - q0q3) + _4bz * (q0q1 + q2q3) - my) + (_4bx * q1) * (_4bx * (q0q2 + q1q3) + _4bz * (0.5 - q1q1 - q2q2) - mz);
 8001ff6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001ffa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002002:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002006:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800200a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800200e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002012:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002016:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 800201a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800201e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002022:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002026:	edd7 7a08 	vldr	s15, [r7, #32]
 800202a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800202e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	ee17 0a90 	vmov	r0, s15
 800203e:	f7fe fa8b 	bl	8000558 <__aeabi_f2d>
 8002042:	4604      	mov	r4, r0
 8002044:	460d      	mov	r5, r1
 8002046:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800204a:	eeb1 7a67 	vneg.f32	s14, s15
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <MadgwickAHRSupdate+0xfb0>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002058:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <MadgwickAHRSupdate+0xfac>)
 800205a:	edd3 6a00 	vldr	s13, [r3]
 800205e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800206a:	ee17 0a90 	vmov	r0, s15
 800206e:	f7fe fa73 	bl	8000558 <__aeabi_f2d>
 8002072:	4680      	mov	r8, r0
 8002074:	4689      	mov	r9, r1
 8002076:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002078:	f7fe fa6e 	bl	8000558 <__aeabi_f2d>
 800207c:	4682      	mov	sl, r0
 800207e:	468b      	mov	fp, r1
 8002080:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002082:	f7fe fa69 	bl	8000558 <__aeabi_f2d>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	f04f 0000 	mov.w	r0, #0
 800208e:	4912      	ldr	r1, [pc, #72]	; (80020d8 <MadgwickAHRSupdate+0xfa4>)
 8002090:	f7fe f902 	bl	8000298 <__aeabi_dsub>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800209c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800209e:	f7fe fa5b 	bl	8000558 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020aa:	f7fe f8f5 	bl	8000298 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4650      	mov	r0, sl
 80020b4:	4659      	mov	r1, fp
 80020b6:	f7fe faa7 	bl	8000608 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4692      	mov	sl, r2
 80020c0:	469b      	mov	fp, r3
 80020c2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80020c6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ce:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020d2:	e009      	b.n	80020e8 <MadgwickAHRSupdate+0xfb4>
 80020d4:	20000210 	.word	0x20000210
 80020d8:	3fe00000 	.word	0x3fe00000
 80020dc:	20000004 	.word	0x20000004
 80020e0:	2000020c 	.word	0x2000020c
 80020e4:	20000214 	.word	0x20000214
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	ee17 0a90 	vmov	r0, s15
 80020f0:	f7fe fa32 	bl	8000558 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4650      	mov	r0, sl
 80020fa:	4659      	mov	r1, fp
 80020fc:	f7fe f8ce 	bl	800029c <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4692      	mov	sl, r2
 8002106:	469b      	mov	fp, r3
 8002108:	69b8      	ldr	r0, [r7, #24]
 800210a:	f7fe fa25 	bl	8000558 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4650      	mov	r0, sl
 8002114:	4659      	mov	r1, fp
 8002116:	f7fe f8bf 	bl	8000298 <__aeabi_dsub>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4640      	mov	r0, r8
 8002120:	4649      	mov	r1, r9
 8002122:	f7fe fa71 	bl	8000608 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4620      	mov	r0, r4
 800212c:	4629      	mov	r1, r5
 800212e:	f7fe f8b5 	bl	800029c <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	461d      	mov	r5, r3
 800213a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800213e:	eeb1 7a67 	vneg.f32	s14, s15
 8002142:	4bcf      	ldr	r3, [pc, #828]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214c:	4bcd      	ldr	r3, [pc, #820]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 800214e:	edd3 6a00 	vldr	s13, [r3]
 8002152:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800215e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002162:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002166:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800216a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800216e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002172:	ed97 6a23 	vldr	s12, [r7, #140]	; 0x8c
 8002176:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800217a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800217e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002182:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002186:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800218a:	edd7 7a05 	vldr	s15, [r7, #20]
 800218e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002196:	ee17 0a90 	vmov	r0, s15
 800219a:	f7fe f9dd 	bl	8000558 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe f879 	bl	800029c <__adddf3>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80021b2:	4bb5      	ldr	r3, [pc, #724]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c0:	ee17 0a90 	vmov	r0, s15
 80021c4:	f7fe f9c8 	bl	8000558 <__aeabi_f2d>
 80021c8:	4680      	mov	r8, r0
 80021ca:	4689      	mov	r9, r1
 80021cc:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80021d0:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80021d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	ee17 0a90 	vmov	r0, s15
 80021e4:	f7fe f9b8 	bl	8000558 <__aeabi_f2d>
 80021e8:	4682      	mov	sl, r0
 80021ea:	468b      	mov	fp, r1
 80021ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80021ee:	f7fe f9b3 	bl	8000558 <__aeabi_f2d>
 80021f2:	e9c7 0100 	strd	r0, r1, [r7]
 80021f6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80021fa:	f7fe f9ad 	bl	8000558 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	49a1      	ldr	r1, [pc, #644]	; (800248c <MadgwickAHRSupdate+0x1358>)
 8002208:	f7fe f846 	bl	8000298 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002216:	f7fe f99f 	bl	8000558 <__aeabi_f2d>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4620      	mov	r0, r4
 8002220:	4629      	mov	r1, r5
 8002222:	f7fe f839 	bl	8000298 <__aeabi_dsub>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800222e:	f7fe f9eb 	bl	8000608 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4650      	mov	r0, sl
 8002238:	4659      	mov	r1, fp
 800223a:	f7fe f82f 	bl	800029c <__adddf3>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	6938      	ldr	r0, [r7, #16]
 8002248:	f7fe f986 	bl	8000558 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fe f820 	bl	8000298 <__aeabi_dsub>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4640      	mov	r0, r8
 800225e:	4649      	mov	r1, r9
 8002260:	f7fe f9d2 	bl	8000608 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800226c:	f7fe f816 	bl	800029c <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc9e 	bl	8000bb8 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	63fb      	str	r3, [r7, #60]	; 0x3c
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3);
 8002280:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002284:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002288:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800228c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002294:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800229c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	f000 fc16 	bl	8002ae0 <invSqrt>
 80022b4:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc

    // normalise step magnitude
    s0 *= recipNorm;
 80022b8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80022bc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    s1 *= recipNorm;
 80022c8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80022cc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    s2 *= recipNorm;
 80022d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80022dc:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    s3 *= recipNorm;
 80022e8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80022ec:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 80022f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    // Apply feedback step
    qDot1 -= beta * s0;
 80022f8:	4b65      	ldr	r3, [pc, #404]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 800230a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800230e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
    qDot2 -= beta * s1;
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 8002314:	ed93 7a00 	vldr	s14, [r3]
 8002318:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800231c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002320:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002328:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
    qDot3 -= beta * s2;
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 800232e:	ed93 7a00 	vldr	s14, [r3]
 8002332:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
    qDot4 -= beta * s3;
 8002346:	4b52      	ldr	r3, [pc, #328]	; (8002490 <MadgwickAHRSupdate+0x135c>)
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002350:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002354:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8002358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * tdelta;
 8002360:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8002364:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	4b44      	ldr	r3, [pc, #272]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 800236e:	edd3 7a00 	vldr	s15, [r3]
 8002372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 8002378:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * tdelta;
 800237c:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8002380:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002388:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 8002394:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * tdelta;
 8002398:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 800239c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	4b35      	ldr	r3, [pc, #212]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023b0:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * tdelta;
 80023b4:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 80023b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80023bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 80023c2:	edd3 7a00 	vldr	s15, [r3]
 80023c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ca:	4b32      	ldr	r3, [pc, #200]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 80023cc:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 80023d2:	ed93 7a00 	vldr	s14, [r3]
 80023d6:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e0:	4b29      	ldr	r3, [pc, #164]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 80023e2:	edd3 6a00 	vldr	s13, [r3]
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023f6:	edd3 6a00 	vldr	s13, [r3]
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 80023fc:	edd3 7a00 	vldr	s15, [r3]
 8002400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002408:	4b22      	ldr	r3, [pc, #136]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 800240a:	edd3 6a00 	vldr	s13, [r3]
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800241c:	eeb0 0a67 	vmov.f32	s0, s15
 8002420:	f000 fb5e 	bl	8002ae0 <invSqrt>
 8002424:	ed87 0a2f 	vstr	s0, [r7, #188]	; 0xbc
  q0 *= recipNorm;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 800242a:	ed93 7a00 	vldr	s14, [r3]
 800242e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MadgwickAHRSupdate+0x134c>)
 8002438:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8002446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MadgwickAHRSupdate+0x1354>)
 800244c:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 8002452:	ed93 7a00 	vldr	s14, [r3]
 8002456:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <MadgwickAHRSupdate+0x1350>)
 8002460:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 8002466:	ed93 7a00 	vldr	s14, [r3]
 800246a:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <MadgwickAHRSupdate+0x1360>)
 8002474:	edc3 7a00 	vstr	s15, [r3]
}
 8002478:	37d0      	adds	r7, #208	; 0xd0
 800247a:	46bd      	mov	sp, r7
 800247c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002480:	20000004 	.word	0x20000004
 8002484:	20000210 	.word	0x20000210
 8002488:	2000020c 	.word	0x2000020c
 800248c:	3fe00000 	.word	0x3fe00000
 8002490:	20000000 	.word	0x20000000
 8002494:	20000214 	.word	0x20000214

08002498 <MadgwickAHRSupdateIMU>:

void MadgwickAHRSupdateIMU(float tdelta, float gx, float gy, float gz, float ax, float ay, float az) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b09e      	sub	sp, #120	; 0x78
 800249c:	af00      	add	r7, sp, #0
 800249e:	ed87 0a07 	vstr	s0, [r7, #28]
 80024a2:	edc7 0a06 	vstr	s1, [r7, #24]
 80024a6:	ed87 1a05 	vstr	s2, [r7, #20]
 80024aa:	edc7 1a04 	vstr	s3, [r7, #16]
 80024ae:	ed87 2a03 	vstr	s4, [r7, #12]
 80024b2:	edc7 2a02 	vstr	s5, [r7, #8]
 80024b6:	ed87 3a01 	vstr	s6, [r7, #4]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 , _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80024ba:	4bec      	ldr	r3, [pc, #944]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	eeb1 7a67 	vneg.f32	s14, s15
 80024c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024cc:	4be8      	ldr	r3, [pc, #928]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024de:	4be5      	ldr	r3, [pc, #916]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 80024e0:	edd3 6a00 	vldr	s13, [r3]
 80024e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f8:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80024fc:	4bde      	ldr	r3, [pc, #888]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 80024fe:	ed93 7a00 	vldr	s14, [r3]
 8002502:	edd7 7a06 	vldr	s15, [r7, #24]
 8002506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250a:	4bd9      	ldr	r3, [pc, #868]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800250c:	edd3 6a00 	vldr	s13, [r3]
 8002510:	edd7 7a04 	vldr	s15, [r7, #16]
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee37 7a27 	vadd.f32	s14, s14, s15
 800251c:	4bd5      	ldr	r3, [pc, #852]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800251e:	edd3 6a00 	vldr	s13, [r3]
 8002522:	edd7 7a05 	vldr	s15, [r7, #20]
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002536:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800253a:	4bcf      	ldr	r3, [pc, #828]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	edd7 7a05 	vldr	s15, [r7, #20]
 8002544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002548:	4bc8      	ldr	r3, [pc, #800]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800254a:	edd3 6a00 	vldr	s13, [r3]
 800254e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002556:	ee37 7a67 	vsub.f32	s14, s14, s15
 800255a:	4bc6      	ldr	r3, [pc, #792]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	edd7 7a06 	vldr	s15, [r7, #24]
 8002564:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002570:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002574:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002578:	4bbf      	ldr	r3, [pc, #764]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 800257a:	ed93 7a00 	vldr	s14, [r3]
 800257e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002586:	4bb9      	ldr	r3, [pc, #740]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 8002588:	edd3 6a00 	vldr	s13, [r3]
 800258c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002598:	4bb5      	ldr	r3, [pc, #724]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800259a:	edd3 6a00 	vldr	s13, [r3]
 800259e:	edd7 7a06 	vldr	s15, [r7, #24]
 80025a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80025b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c2:	d10e      	bne.n	80025e2 <MadgwickAHRSupdateIMU+0x14a>
 80025c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d0:	d107      	bne.n	80025e2 <MadgwickAHRSupdateIMU+0x14a>
 80025d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	f000 81e5 	beq.w	80029ac <MadgwickAHRSupdateIMU+0x514>
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80025e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	eeb0 0a67 	vmov.f32	s0, s15
 8002606:	f000 fa6b 	bl	8002ae0 <invSqrt>
 800260a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    ax *= recipNorm;
 800260e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002612:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNorm;
 800261e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002622:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNorm;
 800262e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002632:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	edc7 7a01 	vstr	s15, [r7, #4]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0 = 2.0f * q0;
 800263e:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 8002640:	edd3 7a00 	vldr	s15, [r3]
 8002644:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002648:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    _2q1 = 2.0f * q1;
 800264c:	4b87      	ldr	r3, [pc, #540]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002656:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    _2q2 = 2.0f * q2;
 800265a:	4b85      	ldr	r3, [pc, #532]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002664:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    _2q3 = 2.0f * q3;
 8002668:	4b82      	ldr	r3, [pc, #520]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002672:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    _4q0 = 4.0f * q0;
 8002676:	4b80      	ldr	r3, [pc, #512]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002684:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    _4q1 = 4.0f * q1;
 8002688:	4b78      	ldr	r3, [pc, #480]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800268a:	edd3 7a00 	vldr	s15, [r3]
 800268e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002692:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002696:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    _4q2 = 4.0f * q2;
 800269a:	4b75      	ldr	r3, [pc, #468]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80026a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    _8q1 = 8.0f * q1;
 80026ac:	4b6f      	ldr	r3, [pc, #444]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    _8q2 = 8.0f * q2;
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80026c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026cc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    q0q0 = q0 * q0;
 80026d0:	4b69      	ldr	r3, [pc, #420]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 80026d2:	ed93 7a00 	vldr	s14, [r3]
 80026d6:	4b68      	ldr	r3, [pc, #416]	; (8002878 <MadgwickAHRSupdateIMU+0x3e0>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q1q1 = q1 * q1;
 80026e4:	4b61      	ldr	r3, [pc, #388]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	4b60      	ldr	r3, [pc, #384]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q2q2 = q2 * q2;
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80026fa:	ed93 7a00 	vldr	s14, [r3]
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002708:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    q3q3 = q3 * q3;
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 800270e:	ed93 7a00 	vldr	s14, [r3]
 8002712:	4b58      	ldr	r3, [pc, #352]	; (8002874 <MadgwickAHRSupdateIMU+0x3dc>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Gradient decent algorithm corrective step
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002720:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002724:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272c:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 8002730:	edd7 7a03 	vldr	s15, [r7, #12]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee37 7a27 	vadd.f32	s14, s14, s15
 800273c:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002740:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002750:	edd7 7a02 	vldr	s15, [r7, #8]
 8002754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002760:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002764:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276c:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002770:	edd7 7a03 	vldr	s15, [r7, #12]
 8002774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002778:	ee37 7a67 	vsub.f32	s14, s14, s15
 800277c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002780:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002784:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002788:	4b38      	ldr	r3, [pc, #224]	; (800286c <MadgwickAHRSupdateIMU+0x3d4>)
 800278a:	edd3 7a00 	vldr	s15, [r3]
 800278e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002796:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800279a:	edd7 7a02 	vldr	s15, [r7, #8]
 800279e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80027aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ae:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80027b2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80027c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80027d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80027d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80027e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80027e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80027ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <MadgwickAHRSupdateIMU+0x3d8>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f8:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80027fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002804:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002808:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800280c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002810:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002814:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002818:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800281c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002824:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002828:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800282c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002830:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002834:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002838:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800283c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002840:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8002844:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002850:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8002854:	edd7 7a01 	vldr	s15, [r7, #4]
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002860:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002864:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002868:	e008      	b.n	800287c <MadgwickAHRSupdateIMU+0x3e4>
 800286a:	bf00      	nop
 800286c:	2000020c 	.word	0x2000020c
 8002870:	20000210 	.word	0x20000210
 8002874:	20000214 	.word	0x20000214
 8002878:	20000004 	.word	0x20000004
 800287c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002880:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002884:	4b91      	ldr	r3, [pc, #580]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800288e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8002892:	edd7 7a03 	vldr	s15, [r7, #12]
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800289e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80028a2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80028a6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028aa:	4b88      	ldr	r3, [pc, #544]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028b8:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 80028bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c8:	edc7 7a08 	vstr	s15, [r7, #32]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80028cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80028d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80028f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f8:	eeb0 0a67 	vmov.f32	s0, s15
 80028fc:	f000 f8f0 	bl	8002ae0 <invSqrt>
 8002900:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
    s0 *= recipNorm;
 8002904:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002908:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800290c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002910:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    s1 *= recipNorm;
 8002914:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002918:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800291c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002920:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    s2 *= recipNorm;
 8002924:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002928:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800292c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002930:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    s3 *= recipNorm;
 8002934:	ed97 7a08 	vldr	s14, [r7, #32]
 8002938:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800293c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002940:	edc7 7a08 	vstr	s15, [r7, #32]
    // Apply feedback step
    qDot1 -= beta * s0;
 8002944:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    qDot2 -= beta * s1;
 800295e:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296c:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8002970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002974:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    qDot3 -= beta * s2;
 8002978:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002986:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800298a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    qDot4 -= beta * s3;
 8002992:	4b4f      	ldr	r3, [pc, #316]	; (8002ad0 <MadgwickAHRSupdateIMU+0x638>)
 8002994:	ed93 7a00 	vldr	s14, [r3]
 8002998:	edd7 7a08 	vldr	s15, [r7, #32]
 800299c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a0:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80029a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * tdelta;
 80029ac:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80029b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 80029ba:	edd3 7a00 	vldr	s15, [r3]
 80029be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c2:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 80029c4:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * tdelta;
 80029c8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80029cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80029d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d4:	4b40      	ldr	r3, [pc, #256]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 80029e0:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * tdelta;
 80029e4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80029e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80029ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fa:	4b38      	ldr	r3, [pc, #224]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * tdelta;
 8002a00:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8002a04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a0e:	edd3 7a00 	vldr	s15, [r3]
 8002a12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a16:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a2e:	edd3 6a00 	vldr	s13, [r3]
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a34:	edd3 7a00 	vldr	s15, [r3]
 8002a38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a40:	4b26      	ldr	r3, [pc, #152]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002a42:	edd3 6a00 	vldr	s13, [r3]
 8002a46:	4b25      	ldr	r3, [pc, #148]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a56:	edd3 6a00 	vldr	s13, [r3]
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002a5c:	edd3 7a00 	vldr	s15, [r3]
 8002a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a68:	eeb0 0a67 	vmov.f32	s0, s15
 8002a6c:	f000 f838 	bl	8002ae0 <invSqrt>
 8002a70:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
  q0 *= recipNorm;
 8002a74:	4b17      	ldr	r3, [pc, #92]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a76:	ed93 7a00 	vldr	s14, [r3]
 8002a7a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <MadgwickAHRSupdateIMU+0x63c>)
 8002a84:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 8002a88:	4b13      	ldr	r3, [pc, #76]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a8a:	ed93 7a00 	vldr	s14, [r3]
 8002a8e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a96:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <MadgwickAHRSupdateIMU+0x640>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002a9e:	ed93 7a00 	vldr	s14, [r3]
 8002aa2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <MadgwickAHRSupdateIMU+0x644>)
 8002aac:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002ab2:	ed93 7a00 	vldr	s14, [r3]
 8002ab6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	4b03      	ldr	r3, [pc, #12]	; (8002acc <MadgwickAHRSupdateIMU+0x634>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
}
 8002ac4:	bf00      	nop
 8002ac6:	3778      	adds	r7, #120	; 0x78
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000214 	.word	0x20000214
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	2000020c 	.word	0x2000020c
 8002adc:	20000210 	.word	0x20000210

08002ae0 <invSqrt>:

float invSqrt(float x) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 8002aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af6:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	105a      	asrs	r2, r3, #1
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <invSqrt+0x9c>)
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8002b18:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	edc7 7a04 	vstr	s15, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8002b40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b54:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002b58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b64:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	ee07 3a90 	vmov	s15, r3
}
 8002b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	5f3759df 	.word	0x5f3759df

08002b80 <quat2Euler>:

void quat2Euler( float q[4], float e[3] ) {
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	ed2d 8b02 	vpush	{d8}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  double sqx = q[1] * q[1];
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba2:	ee17 0a90 	vmov	r0, s15
 8002ba6:	f7fd fcd7 	bl	8000558 <__aeabi_f2d>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	e9c7 2306 	strd	r2, r3, [r7, #24]
  double sqy = q[2] * q[2];
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	ed93 7a00 	vldr	s14, [r3]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc6:	ee17 0a90 	vmov	r0, s15
 8002bca:	f7fd fcc5 	bl	8000558 <__aeabi_f2d>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double sqz = q[3] * q[3];
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	330c      	adds	r3, #12
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bea:	ee17 0a90 	vmov	r0, s15
 8002bee:	f7fd fcb3 	bl	8000558 <__aeabi_f2d>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  e[0] = atan2f(2.f * (q[2] * q[3] + q[1] * q[0]), 1 - 2.f * (sqx + sqy)); // -sqx - sqy + sqz + sqw);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	ed93 7a00 	vldr	s14, [r3]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	330c      	adds	r3, #12
 8002c06:	edd3 7a00 	vldr	s15, [r3]
 8002c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	edd3 6a00 	vldr	s13, [r3]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8002c28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c30:	f7fd fb34 	bl	800029c <__adddf3>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	f7fd fb2c 	bl	800029c <__adddf3>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	493e      	ldr	r1, [pc, #248]	; (8002d48 <quat2Euler+0x1c8>)
 8002c4e:	f7fd fb23 	bl	8000298 <__aeabi_dsub>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7fd ffad 	bl	8000bb8 <__aeabi_d2f>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	ee00 3a90 	vmov	s1, r3
 8002c64:	eeb0 0a48 	vmov.f32	s0, s16
 8002c68:	f007 fcce 	bl	800a608 <atan2f>
 8002c6c:	eef0 7a40 	vmov.f32	s15, s0
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	edc3 7a00 	vstr	s15, [r3]
  e[1] = asinf(-2.f * (q[1] * q[3] - q[2] * q[0]));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	ed93 7a00 	vldr	s14, [r3]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	330c      	adds	r3, #12
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	edd3 6a00 	vldr	s13, [r3]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	1d1c      	adds	r4, r3, #4
 8002cac:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb0:	f007 fc7e 	bl	800a5b0 <asinf>
 8002cb4:	eef0 7a40 	vmov.f32	s15, s0
 8002cb8:	edc4 7a00 	vstr	s15, [r4]
  e[2] = atan2f(2.f * (q[1] * q[2] + q[3] * q[0]), 1 - 2.f * (sqy + sqz)); //sqx - sqy - sqz + sqw);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	ed93 7a00 	vldr	s14, [r3]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	edd3 6a00 	vldr	s13, [r3]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce6:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8002cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cf2:	f7fd fad3 	bl	800029c <__adddf3>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	f7fd facb 	bl	800029c <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	f04f 0000 	mov.w	r0, #0
 8002d0e:	490e      	ldr	r1, [pc, #56]	; (8002d48 <quat2Euler+0x1c8>)
 8002d10:	f7fd fac2 	bl	8000298 <__aeabi_dsub>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff4c 	bl	8000bb8 <__aeabi_d2f>
 8002d20:	4602      	mov	r2, r0
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	f103 0408 	add.w	r4, r3, #8
 8002d28:	ee00 2a90 	vmov	s1, r2
 8002d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d30:	f007 fc6a 	bl	800a608 <atan2f>
 8002d34:	eef0 7a40 	vmov.f32	s15, s0
 8002d38:	edc4 7a00 	vstr	s15, [r4]
}
 8002d3c:	bf00      	nop
 8002d3e:	3724      	adds	r7, #36	; 0x24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	ecbd 8b02 	vpop	{d8}
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	3ff00000 	.word	0x3ff00000

08002d4c <BMP180_init>:
const uint8_t BMP180_EEPROM_ADDR_LSB[11] = { 0xab, 0xad, 0xaf, 0xb1, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

BMP180_SETTINGS _calib_data;
BMP180_REGS _regs;

void BMP180_init(I2C_HandleTypeDef *i2c,readings *data){
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	_bmp_i2c=i2c;
 8002d56:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <BMP180_init+0x40>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6013      	str	r3, [r2, #0]
	_bmp_data=data;
 8002d5c:	4a0c      	ldr	r2, [pc, #48]	; (8002d90 <BMP180_init+0x44>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6013      	str	r3, [r2, #0]
	log_s_wnl("BMP180 started---");
 8002d62:	480c      	ldr	r0, [pc, #48]	; (8002d94 <BMP180_init+0x48>)
 8002d64:	f000 f976 	bl	8003054 <log_s_wnl>
	if (BMP180_ReadReg(BMP180_GET_ID_REG)==BMP180_CHIP_ID){
 8002d68:	20d0      	movs	r0, #208	; 0xd0
 8002d6a:	f000 f819 	bl	8002da0 <BMP180_ReadReg>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b55      	cmp	r3, #85	; 0x55
 8002d72:	d103      	bne.n	8002d7c <BMP180_init+0x30>
		log_s("ok");
 8002d74:	4808      	ldr	r0, [pc, #32]	; (8002d98 <BMP180_init+0x4c>)
 8002d76:	f000 f94b 	bl	8003010 <log_s>
	}
	else{
		log_s("ERROR");
	}
}
 8002d7a:	e002      	b.n	8002d82 <BMP180_init+0x36>
		log_s("ERROR");
 8002d7c:	4807      	ldr	r0, [pc, #28]	; (8002d9c <BMP180_init+0x50>)
 8002d7e:	f000 f947 	bl	8003010 <log_s>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000218 	.word	0x20000218
 8002d90:	2000021c 	.word	0x2000021c
 8002d94:	0800ac80 	.word	0x0800ac80
 8002d98:	0800ac94 	.word	0x0800ac94
 8002d9c:	0800ac98 	.word	0x0800ac98

08002da0 <BMP180_ReadReg>:
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
	uint8_t arr[2] = { reg, cmd };
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, arr, 2, 1000);
}

uint8_t BMP180_ReadReg(uint8_t reg) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, &reg, 1, 1000);
 8002daa:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <BMP180_ReadReg+0x40>)
 8002dac:	6818      	ldr	r0, [r3, #0]
 8002dae:	1dfa      	adds	r2, r7, #7
 8002db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2301      	movs	r3, #1
 8002db8:	21ee      	movs	r1, #238	; 0xee
 8002dba:	f001 ff85 	bl	8004cc8 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp_i2c, BMP180_ADDR << 1, &result, 1, 1000);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <BMP180_ReadReg+0x40>)
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f107 020f 	add.w	r2, r7, #15
 8002dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	21ee      	movs	r1, #238	; 0xee
 8002dd0:	f002 f878 	bl	8004ec4 <HAL_I2C_Master_Receive>
	return result;
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000218 	.word	0x20000218

08002de4 <BMP180_set_oss>:

int16_t _raw_t;
uint32_t _raw_p;

uint8_t _oss=0;
void BMP180_set_oss(uint8_t oss){
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
	_oss=oss;
 8002dee:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <BMP180_set_oss+0x1c>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	7013      	strb	r3, [r2, #0]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	20000236 	.word	0x20000236

08002e04 <BMP180_get_calibration_coefficients>:
		HAL_Delay (26);
	}
}

void BMP180_get_calibration_coefficients()
{
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 8002e0a:	af0a      	add	r7, sp, #40	; 0x28
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8) | BMP180_ReadReg(BMP180_AC1_LSB);
 8002e0c:	20aa      	movs	r0, #170	; 0xaa
 8002e0e:	f7ff ffc7 	bl	8002da0 <BMP180_ReadReg>
 8002e12:	4603      	mov	r3, r0
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	b21c      	sxth	r4, r3
 8002e18:	20ab      	movs	r0, #171	; 0xab
 8002e1a:	f7ff ffc1 	bl	8002da0 <BMP180_ReadReg>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	b21b      	sxth	r3, r3
 8002e22:	4323      	orrs	r3, r4
 8002e24:	b21a      	sxth	r2, r3
 8002e26:	4b70      	ldr	r3, [pc, #448]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e28:	801a      	strh	r2, [r3, #0]
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8) | BMP180_ReadReg(BMP180_AC2_LSB);
 8002e2a:	20ac      	movs	r0, #172	; 0xac
 8002e2c:	f7ff ffb8 	bl	8002da0 <BMP180_ReadReg>
 8002e30:	4603      	mov	r3, r0
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	b21c      	sxth	r4, r3
 8002e36:	20ad      	movs	r0, #173	; 0xad
 8002e38:	f7ff ffb2 	bl	8002da0 <BMP180_ReadReg>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	b21b      	sxth	r3, r3
 8002e40:	4323      	orrs	r3, r4
 8002e42:	b21a      	sxth	r2, r3
 8002e44:	4b68      	ldr	r3, [pc, #416]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e46:	805a      	strh	r2, [r3, #2]
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8) | BMP180_ReadReg(BMP180_AC3_LSB);
 8002e48:	20ae      	movs	r0, #174	; 0xae
 8002e4a:	f7ff ffa9 	bl	8002da0 <BMP180_ReadReg>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	021b      	lsls	r3, r3, #8
 8002e52:	b21c      	sxth	r4, r3
 8002e54:	20af      	movs	r0, #175	; 0xaf
 8002e56:	f7ff ffa3 	bl	8002da0 <BMP180_ReadReg>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	b21b      	sxth	r3, r3
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	4b61      	ldr	r3, [pc, #388]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e64:	809a      	strh	r2, [r3, #4]
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8) | BMP180_ReadReg(BMP180_AC4_LSB);
 8002e66:	20b0      	movs	r0, #176	; 0xb0
 8002e68:	f7ff ff9a 	bl	8002da0 <BMP180_ReadReg>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	021b      	lsls	r3, r3, #8
 8002e70:	b21c      	sxth	r4, r3
 8002e72:	20b1      	movs	r0, #177	; 0xb1
 8002e74:	f7ff ff94 	bl	8002da0 <BMP180_ReadReg>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	b21b      	sxth	r3, r3
 8002e7c:	4323      	orrs	r3, r4
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002e84:	80da      	strh	r2, [r3, #6]
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8) | BMP180_ReadReg(BMP180_AC5_LSB);
 8002e86:	20b2      	movs	r0, #178	; 0xb2
 8002e88:	f7ff ff8a 	bl	8002da0 <BMP180_ReadReg>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	b21c      	sxth	r4, r3
 8002e92:	20b3      	movs	r0, #179	; 0xb3
 8002e94:	f7ff ff84 	bl	8002da0 <BMP180_ReadReg>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4323      	orrs	r3, r4
 8002e9e:	b21b      	sxth	r3, r3
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002ea4:	811a      	strh	r2, [r3, #8]
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8) | BMP180_ReadReg(BMP180_AC6_LSB);
 8002ea6:	20b4      	movs	r0, #180	; 0xb4
 8002ea8:	f7ff ff7a 	bl	8002da0 <BMP180_ReadReg>
 8002eac:	4603      	mov	r3, r0
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	b21c      	sxth	r4, r3
 8002eb2:	20b5      	movs	r0, #181	; 0xb5
 8002eb4:	f7ff ff74 	bl	8002da0 <BMP180_ReadReg>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4323      	orrs	r3, r4
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b49      	ldr	r3, [pc, #292]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002ec4:	815a      	strh	r2, [r3, #10]
	_calib_data.B1 =  (BMP180_ReadReg(BMP180_B1_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 8002ec6:	20b6      	movs	r0, #182	; 0xb6
 8002ec8:	f7ff ff6a 	bl	8002da0 <BMP180_ReadReg>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b21c      	sxth	r4, r3
 8002ed2:	20b7      	movs	r0, #183	; 0xb7
 8002ed4:	f7ff ff64 	bl	8002da0 <BMP180_ReadReg>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	4323      	orrs	r3, r4
 8002ede:	b21a      	sxth	r2, r3
 8002ee0:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002ee2:	819a      	strh	r2, [r3, #12]
	_calib_data.B2 =  (BMP180_ReadReg(BMP180_B2_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 8002ee4:	20b8      	movs	r0, #184	; 0xb8
 8002ee6:	f7ff ff5b 	bl	8002da0 <BMP180_ReadReg>
 8002eea:	4603      	mov	r3, r0
 8002eec:	021b      	lsls	r3, r3, #8
 8002eee:	b21c      	sxth	r4, r3
 8002ef0:	20b7      	movs	r0, #183	; 0xb7
 8002ef2:	f7ff ff55 	bl	8002da0 <BMP180_ReadReg>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	b21b      	sxth	r3, r3
 8002efa:	4323      	orrs	r3, r4
 8002efc:	b21a      	sxth	r2, r3
 8002efe:	4b3a      	ldr	r3, [pc, #232]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f00:	81da      	strh	r2, [r3, #14]
	_calib_data.MB =  (BMP180_ReadReg(BMP180_MB_MSB) << 8)  | BMP180_ReadReg(BMP180_MB_LSB);
 8002f02:	20ba      	movs	r0, #186	; 0xba
 8002f04:	f7ff ff4c 	bl	8002da0 <BMP180_ReadReg>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	b21c      	sxth	r4, r3
 8002f0e:	20bb      	movs	r0, #187	; 0xbb
 8002f10:	f7ff ff46 	bl	8002da0 <BMP180_ReadReg>
 8002f14:	4603      	mov	r3, r0
 8002f16:	b21b      	sxth	r3, r3
 8002f18:	4323      	orrs	r3, r4
 8002f1a:	b21a      	sxth	r2, r3
 8002f1c:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f1e:	821a      	strh	r2, [r3, #16]
	_calib_data.MC =  (BMP180_ReadReg(BMP180_MC_MSB) << 8)  | BMP180_ReadReg(BMP180_MC_LSB);
 8002f20:	20bc      	movs	r0, #188	; 0xbc
 8002f22:	f7ff ff3d 	bl	8002da0 <BMP180_ReadReg>
 8002f26:	4603      	mov	r3, r0
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	b21c      	sxth	r4, r3
 8002f2c:	20bd      	movs	r0, #189	; 0xbd
 8002f2e:	f7ff ff37 	bl	8002da0 <BMP180_ReadReg>
 8002f32:	4603      	mov	r3, r0
 8002f34:	b21b      	sxth	r3, r3
 8002f36:	4323      	orrs	r3, r4
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f3c:	825a      	strh	r2, [r3, #18]
	_calib_data.MD =  (BMP180_ReadReg(BMP180_MD_MSB) << 8)  | BMP180_ReadReg(BMP180_MD_LSB);
 8002f3e:	20be      	movs	r0, #190	; 0xbe
 8002f40:	f7ff ff2e 	bl	8002da0 <BMP180_ReadReg>
 8002f44:	4603      	mov	r3, r0
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	b21c      	sxth	r4, r3
 8002f4a:	20bf      	movs	r0, #191	; 0xbf
 8002f4c:	f7ff ff28 	bl	8002da0 <BMP180_ReadReg>
 8002f50:	4603      	mov	r3, r0
 8002f52:	b21b      	sxth	r3, r3
 8002f54:	4323      	orrs	r3, r4
 8002f56:	b21a      	sxth	r2, r3
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f5a:	829a      	strh	r2, [r3, #20]
	char* test[200];
	sprintf((char*)test,"Calib coef:%d %d %d %d %d %d %d %d %d %d %d",_calib_data.AC1,_calib_data.AC2,_calib_data.AC3,_calib_data.AC4,_calib_data.AC5,_calib_data.AC6,_calib_data.B1,_calib_data.B1,_calib_data.MB,_calib_data.MC,_calib_data.MD);
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f62:	469c      	mov	ip, r3
 8002f64:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002f6a:	469e      	mov	lr, r3
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f76:	88db      	ldrh	r3, [r3, #6]
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f7c:	891b      	ldrh	r3, [r3, #8]
 8002f7e:	461c      	mov	r4, r3
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f82:	895b      	ldrh	r3, [r3, #10]
 8002f84:	461d      	mov	r5, r3
 8002f86:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f88:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f8c:	461e      	mov	r6, r3
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f90:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002f98:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002fa0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <BMP180_get_calibration_coefficients+0x1e4>)
 8002fa8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fac:	f107 0010 	add.w	r0, r7, #16
 8002fb0:	9308      	str	r3, [sp, #32]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	9307      	str	r3, [sp, #28]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	9306      	str	r3, [sp, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	9305      	str	r3, [sp, #20]
 8002fbe:	9604      	str	r6, [sp, #16]
 8002fc0:	9503      	str	r5, [sp, #12]
 8002fc2:	9402      	str	r4, [sp, #8]
 8002fc4:	9101      	str	r1, [sp, #4]
 8002fc6:	9200      	str	r2, [sp, #0]
 8002fc8:	4673      	mov	r3, lr
 8002fca:	4662      	mov	r2, ip
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <BMP180_get_calibration_coefficients+0x1e8>)
 8002fce:	f005 f849 	bl	8008064 <siprintf>
	log_s(test);
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 f81a 	bl	8003010 <log_s>
}
 8002fdc:	bf00      	nop
 8002fde:	f507 774d 	add.w	r7, r7, #820	; 0x334
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000220 	.word	0x20000220
 8002fec:	0800aca0 	.word	0x0800aca0

08002ff0 <debug_init>:
#include "debug.h"
#include <stdio.h>
UART_HandleTypeDef *_dbg_uart;

void debug_init(UART_HandleTypeDef *uart){
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	_dbg_uart=uart;
 8002ff8:	4a04      	ldr	r2, [pc, #16]	; (800300c <debug_init+0x1c>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6013      	str	r3, [r2, #0]
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000238 	.word	0x20000238

08003010 <log_s>:



void log_s(const char *str){
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <log_s+0x3c>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd f8df 	bl	80001e0 <strlen>
 8003022:	4603      	mov	r3, r0
 8003024:	b29a      	uxth	r2, r3
 8003026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4620      	mov	r0, r4
 800302e:	f003 ffd5 	bl	8006fdc <HAL_UART_Transmit>
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)"\r\n",2,1000);
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <log_s+0x3c>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303a:	2202      	movs	r2, #2
 800303c:	4904      	ldr	r1, [pc, #16]	; (8003050 <log_s+0x40>)
 800303e:	f003 ffcd 	bl	8006fdc <HAL_UART_Transmit>
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bd90      	pop	{r4, r7, pc}
 800304a:	bf00      	nop
 800304c:	20000238 	.word	0x20000238
 8003050:	0800accc 	.word	0x0800accc

08003054 <log_s_wnl>:

void log_s_wnl(const char *str){
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <log_s_wnl+0x2c>)
 800305e:	681c      	ldr	r4, [r3, #0]
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f7fd f8bd 	bl	80001e0 <strlen>
 8003066:	4603      	mov	r3, r0
 8003068:	b29a      	uxth	r2, r3
 800306a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4620      	mov	r0, r4
 8003072:	f003 ffb3 	bl	8006fdc <HAL_UART_Transmit>
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	20000238 	.word	0x20000238

08003084 <log_s_int>:
char* char_log[50];
void log_s_int(const char *str,int32_t i){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
	sprintf((char*)char_log,"%s %ld\r\n",str,i);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	4905      	ldr	r1, [pc, #20]	; (80030a8 <log_s_int+0x24>)
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <log_s_int+0x28>)
 8003096:	f004 ffe5 	bl	8008064 <siprintf>
	log_s_wnl((const char*)char_log);
 800309a:	4804      	ldr	r0, [pc, #16]	; (80030ac <log_s_int+0x28>)
 800309c:	f7ff ffda 	bl	8003054 <log_s_wnl>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	0800acd0 	.word	0x0800acd0
 80030ac:	2000023c 	.word	0x2000023c

080030b0 <log_p>:
void log_p(float *data_p){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
	sprintf((char*)char_log,"%p %p %p\r\n",data_p,data_p+4,data_p+4*2);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f103 0210 	add.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3320      	adds	r3, #32
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4905      	ldr	r1, [pc, #20]	; (80030e0 <log_p+0x30>)
 80030ca:	4806      	ldr	r0, [pc, #24]	; (80030e4 <log_p+0x34>)
 80030cc:	f004 ffca 	bl	8008064 <siprintf>
	log_s_wnl((const char*)char_log);
 80030d0:	4804      	ldr	r0, [pc, #16]	; (80030e4 <log_p+0x34>)
 80030d2:	f7ff ffbf 	bl	8003054 <log_s_wnl>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	0800acdc 	.word	0x0800acdc
 80030e4:	2000023c 	.word	0x2000023c

080030e8 <GY801_init>:
#include "gy801.h"
#include <stdio.h>
#include <math.h>
readings *_data_gy;
void GY801_init(I2C_HandleTypeDef *i2c,readings *data){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
	//_i2c=i2c;
	_data_gy=data;
 80030f2:	4a15      	ldr	r2, [pc, #84]	; (8003148 <GY801_init+0x60>)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	6013      	str	r3, [r2, #0]
	ADXL_init(i2c,data);
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd ff2e 	bl	8000f5c <ADXL_init>
	ADXL_set_range(RANGE_2G);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fd ff9f 	bl	8001044 <ADXL_set_range>
	ADXL_full_res(1);
 8003106:	2001      	movs	r0, #1
 8003108:	f7fd fff3 	bl	80010f2 <ADXL_full_res>
	ADXL_set_rate(HZ100);
 800310c:	200a      	movs	r0, #10
 800310e:	f7fd ffc0 	bl	8001092 <ADXL_set_rate>
	ADXL_power(1);
 8003112:	2001      	movs	r0, #1
 8003114:	f7fd ffce 	bl	80010b4 <ADXL_power>
	BMP180_init(i2c,data);
 8003118:	6839      	ldr	r1, [r7, #0]
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff fe16 	bl	8002d4c <BMP180_init>
	BMP180_set_oss(1);
 8003120:	2001      	movs	r0, #1
 8003122:	f7ff fe5f 	bl	8002de4 <BMP180_set_oss>
	BMP180_get_calibration_coefficients();
 8003126:	f7ff fe6d 	bl	8002e04 <BMP180_get_calibration_coefficients>
	GYRO_init(i2c,data);
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f817 	bl	8003160 <GYRO_init>
	GYRO_power(1);
 8003132:	2001      	movs	r0, #1
 8003134:	f000 f88a 	bl	800324c <GYRO_power>
	mag_init(i2c,data);
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f8e2 	bl	8003304 <mag_init>


}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000304 	.word	0x20000304

0800314c <GY801_update_data>:

void GY801_update_data(){
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
	/*BMP180_get_data();
	BMP180_upd_data();
	ADXL_get_data();*/
	GYRO_get_data();
 8003150:	f000 f890 	bl	8003274 <GYRO_get_data>
	//mag_get_data();
	lsm303dlhc_get_acc();
 8003154:	f000 f970 	bl	8003438 <lsm303dlhc_get_acc>
	lsm303dlhc_get_mag();
 8003158:	f000 f9be 	bl	80034d8 <lsm303dlhc_get_mag>
	//sprintf((char*)gy_data,"X:%06d Y:%06d Z:%06d",_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	//sprintf((char*)gy_data,"%ld;%ld;%ld.%ld;%d;%d;%d;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),_data_gy->bmp180.pressure,_data_gy->bmp180.temp/10,_data_gy->bmp180.temp%10,_data_gy->adxl345.ax,_data_gy->adxl345.ay,_data_gy->adxl345.az,(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	sprintf((char*)gy_data,"%ld;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	log_s((char*)gy_data);*/

}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <GYRO_init>:
#include "math.h"
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_gyro_i2c;
readings *_gyro_data;
void GYRO_init(I2C_HandleTypeDef *i2c,readings *data){
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	_gyro_i2c=i2c;
 800316a:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <GYRO_init+0x58>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6013      	str	r3, [r2, #0]
	_gyro_data=data;
 8003170:	4a12      	ldr	r2, [pc, #72]	; (80031bc <GYRO_init+0x5c>)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6013      	str	r3, [r2, #0]
	log_s_wnl("L3G4200D started---");
 8003176:	4812      	ldr	r0, [pc, #72]	; (80031c0 <GYRO_init+0x60>)
 8003178:	f7ff ff6c 	bl	8003054 <log_s_wnl>
	if(GYRO_ReadReg(GYRO_REG_DEVID)==211){
 800317c:	200f      	movs	r0, #15
 800317e:	f000 f843 	bl	8003208 <GYRO_ReadReg>
 8003182:	4603      	mov	r3, r0
 8003184:	2bd3      	cmp	r3, #211	; 0xd3
 8003186:	d103      	bne.n	8003190 <GYRO_init+0x30>
		log_s("ok");
 8003188:	480e      	ldr	r0, [pc, #56]	; (80031c4 <GYRO_init+0x64>)
 800318a:	f7ff ff41 	bl	8003010 <log_s>
 800318e:	e002      	b.n	8003196 <GYRO_init+0x36>
	}
	else{
		log_s("ERROR");
 8003190:	480d      	ldr	r0, [pc, #52]	; (80031c8 <GYRO_init+0x68>)
 8003192:	f7ff ff3d 	bl	8003010 <log_s>
	}
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,0b10111111);
 8003196:	21bf      	movs	r1, #191	; 0xbf
 8003198:	2020      	movs	r0, #32
 800319a:	f000 f817 	bl	80031cc <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG2,0b00100000);
 800319e:	2120      	movs	r1, #32
 80031a0:	2021      	movs	r0, #33	; 0x21
 80031a2:	f000 f813 	bl	80031cc <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG4,0b00110000);
 80031a6:	2130      	movs	r1, #48	; 0x30
 80031a8:	2023      	movs	r0, #35	; 0x23
 80031aa:	f000 f80f 	bl	80031cc <GYRO_WriteReg>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000308 	.word	0x20000308
 80031bc:	2000030c 	.word	0x2000030c
 80031c0:	0800ad00 	.word	0x0800ad00
 80031c4:	0800ad14 	.word	0x0800ad14
 80031c8:	0800ad18 	.word	0x0800ad18

080031cc <GYRO_WriteReg>:

void GYRO_WriteReg(uint8_t reg, uint8_t cmd) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	4603      	mov	r3, r0
 80031d4:	460a      	mov	r2, r1
 80031d6:	71fb      	strb	r3, [r7, #7]
 80031d8:	4613      	mov	r3, r2
 80031da:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	733b      	strb	r3, [r7, #12]
 80031e0:	79bb      	ldrb	r3, [r7, #6]
 80031e2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, arr, 2, 1000);
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <GYRO_WriteReg+0x38>)
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	f107 020c 	add.w	r2, r7, #12
 80031ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	2302      	movs	r3, #2
 80031f4:	21d2      	movs	r1, #210	; 0xd2
 80031f6:	f001 fd67 	bl	8004cc8 <HAL_I2C_Master_Transmit>
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000308 	.word	0x20000308

08003208 <GYRO_ReadReg>:

uint8_t GYRO_ReadReg(uint8_t reg) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af02      	add	r7, sp, #8
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, &reg, 1, 1000);
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <GYRO_ReadReg+0x40>)
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	1dfa      	adds	r2, r7, #7
 8003218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2301      	movs	r3, #1
 8003220:	21d2      	movs	r1, #210	; 0xd2
 8003222:	f001 fd51 	bl	8004cc8 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_gyro_i2c, GYRO_ADDR<<1, &result, 1, 1000);
 8003226:	4b08      	ldr	r3, [pc, #32]	; (8003248 <GYRO_ReadReg+0x40>)
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	f107 020f 	add.w	r2, r7, #15
 800322e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2301      	movs	r3, #1
 8003236:	21d2      	movs	r1, #210	; 0xd2
 8003238:	f001 fe44 	bl	8004ec4 <HAL_I2C_Master_Receive>
	return result;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000308 	.word	0x20000308

0800324c <GYRO_power>:

void GYRO_power(uint8_t pwr){
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,pwr?0x0F:0x00);
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <GYRO_power+0x14>
 800325c:	230f      	movs	r3, #15
 800325e:	e000      	b.n	8003262 <GYRO_power+0x16>
 8003260:	2300      	movs	r3, #0
 8003262:	4619      	mov	r1, r3
 8003264:	2020      	movs	r0, #32
 8003266:	f7ff ffb1 	bl	80031cc <GYRO_WriteReg>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <GYRO_get_data>:

void GYRO_get_data(){
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
	uint32_t gyro_t=HAL_GetTick();
 800327a:	f001 f913 	bl	80044a4 <HAL_GetTick>
 800327e:	6078      	str	r0, [r7, #4]
	_gyro_data->l3g4200d.gx=((GYRO_ReadReg(0x29)<<8)|GYRO_ReadReg(0x28));
 8003280:	2029      	movs	r0, #41	; 0x29
 8003282:	f7ff ffc1 	bl	8003208 <GYRO_ReadReg>
 8003286:	4603      	mov	r3, r0
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21c      	sxth	r4, r3
 800328c:	2028      	movs	r0, #40	; 0x28
 800328e:	f7ff ffbb 	bl	8003208 <GYRO_ReadReg>
 8003292:	4603      	mov	r3, r0
 8003294:	b21a      	sxth	r2, r3
 8003296:	4b19      	ldr	r3, [pc, #100]	; (80032fc <GYRO_get_data+0x88>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4322      	orrs	r2, r4
 800329c:	b212      	sxth	r2, r2
 800329e:	831a      	strh	r2, [r3, #24]
	_gyro_data->l3g4200d.gy=((GYRO_ReadReg(0x2B)<<8)|GYRO_ReadReg(0x2A));
 80032a0:	202b      	movs	r0, #43	; 0x2b
 80032a2:	f7ff ffb1 	bl	8003208 <GYRO_ReadReg>
 80032a6:	4603      	mov	r3, r0
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	b21c      	sxth	r4, r3
 80032ac:	202a      	movs	r0, #42	; 0x2a
 80032ae:	f7ff ffab 	bl	8003208 <GYRO_ReadReg>
 80032b2:	4603      	mov	r3, r0
 80032b4:	b21a      	sxth	r2, r3
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <GYRO_get_data+0x88>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4322      	orrs	r2, r4
 80032bc:	b212      	sxth	r2, r2
 80032be:	835a      	strh	r2, [r3, #26]
	_gyro_data->l3g4200d.gz=((GYRO_ReadReg(0x2D)<<8)|GYRO_ReadReg(0x2C));
 80032c0:	202d      	movs	r0, #45	; 0x2d
 80032c2:	f7ff ffa1 	bl	8003208 <GYRO_ReadReg>
 80032c6:	4603      	mov	r3, r0
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	b21c      	sxth	r4, r3
 80032cc:	202c      	movs	r0, #44	; 0x2c
 80032ce:	f7ff ff9b 	bl	8003208 <GYRO_ReadReg>
 80032d2:	4603      	mov	r3, r0
 80032d4:	b21a      	sxth	r2, r3
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <GYRO_get_data+0x88>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4322      	orrs	r2, r4
 80032dc:	b212      	sxth	r2, r2
 80032de:	839a      	strh	r2, [r3, #28]
	log_s_int("GYRO",HAL_GetTick()-gyro_t);
 80032e0:	f001 f8e0 	bl	80044a4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	4619      	mov	r1, r3
 80032ec:	4804      	ldr	r0, [pc, #16]	; (8003300 <GYRO_get_data+0x8c>)
 80032ee:	f7ff fec9 	bl	8003084 <log_s_int>
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000030c 	.word	0x2000030c
 8003300:	0800ad20 	.word	0x0800ad20

08003304 <mag_init>:
#include "lsm303dlhc.h"
I2C_HandleTypeDef *_mag_i2c;
readings *_mag_data;
void mag_init(I2C_HandleTypeDef *i2c,readings *data){
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	_mag_i2c=i2c;
 800330e:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <mag_init+0x7c>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6013      	str	r3, [r2, #0]
	_mag_data=data;
 8003314:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <mag_init+0x80>)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6013      	str	r3, [r2, #0]
	log_s_wnl("LSM303DLHC started---");
 800331a:	481b      	ldr	r0, [pc, #108]	; (8003388 <mag_init+0x84>)
 800331c:	f7ff fe9a 	bl	8003054 <log_s_wnl>
	if(mag_read_data(1,LSM303DLHC_REG_WHOAMI)==0x33){
 8003320:	210f      	movs	r1, #15
 8003322:	2001      	movs	r0, #1
 8003324:	f000 f836 	bl	8003394 <mag_read_data>
 8003328:	4603      	mov	r3, r0
 800332a:	2b33      	cmp	r3, #51	; 0x33
 800332c:	d121      	bne.n	8003372 <mag_init+0x6e>
		log_s("ok");
 800332e:	4817      	ldr	r0, [pc, #92]	; (800338c <mag_init+0x88>)
 8003330:	f7ff fe6e 	bl	8003010 <log_s>
	else{
		log_s("ERROR");
		return;
	}
	/* accel config */
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG1_A,0b01000111);
 8003334:	2247      	movs	r2, #71	; 0x47
 8003336:	2120      	movs	r1, #32
 8003338:	2001      	movs	r0, #1
 800333a:	f000 f859 	bl	80033f0 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG2_A,0b10010000);
 800333e:	2290      	movs	r2, #144	; 0x90
 8003340:	2121      	movs	r1, #33	; 0x21
 8003342:	2001      	movs	r0, #1
 8003344:	f000 f854 	bl	80033f0 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG4_A,0b00111000);
 8003348:	2238      	movs	r2, #56	; 0x38
 800334a:	2123      	movs	r1, #35	; 0x23
 800334c:	2001      	movs	r0, #1
 800334e:	f000 f84f 	bl	80033f0 <mag_write_data>
	/* mag config */
	mag_write_data(0,LSM303DLHC_REG_CRA_REG_M,0b00010000);
 8003352:	2210      	movs	r2, #16
 8003354:	2100      	movs	r1, #0
 8003356:	2000      	movs	r0, #0
 8003358:	f000 f84a 	bl	80033f0 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_CRB_REG_M,0b10000000);
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	2101      	movs	r1, #1
 8003360:	2000      	movs	r0, #0
 8003362:	f000 f845 	bl	80033f0 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_MR_REG_M,0b00000000);
 8003366:	2200      	movs	r2, #0
 8003368:	2102      	movs	r1, #2
 800336a:	2000      	movs	r0, #0
 800336c:	f000 f840 	bl	80033f0 <mag_write_data>
 8003370:	e003      	b.n	800337a <mag_init+0x76>
		log_s("ERROR");
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <mag_init+0x8c>)
 8003374:	f7ff fe4c 	bl	8003010 <log_s>
		return;
 8003378:	bf00      	nop
}
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000310 	.word	0x20000310
 8003384:	20000314 	.word	0x20000314
 8003388:	0800ad28 	.word	0x0800ad28
 800338c:	0800ad40 	.word	0x0800ad40
 8003390:	0800ad44 	.word	0x0800ad44

08003394 <mag_read_data>:


uint8_t mag_read_data(uint8_t type,uint8_t reg){
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af04      	add	r7, sp, #16
 800339a:	4603      	mov	r3, r0
 800339c:	460a      	mov	r2, r1
 800339e:	71fb      	strb	r3, [r7, #7]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71bb      	strb	r3, [r7, #6]
	//log_s_int("addr",((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1);
	uint8_t result;
	HAL_I2C_Mem_Read(_mag_i2c, (((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1)+!type, reg, I2C_MEMADD_SIZE_8BIT, &result, 1, 1000);
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <mag_read_data+0x58>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <mag_read_data+0x1e>
 80033ae:	2232      	movs	r2, #50	; 0x32
 80033b0:	e000      	b.n	80033b4 <mag_read_data+0x20>
 80033b2:	223c      	movs	r2, #60	; 0x3c
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	bf0c      	ite	eq
 80033ba:	2301      	moveq	r3, #1
 80033bc:	2300      	movne	r3, #0
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	4413      	add	r3, r2
 80033c4:	b299      	uxth	r1, r3
 80033c6:	79bb      	ldrb	r3, [r7, #6]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033ce:	9302      	str	r3, [sp, #8]
 80033d0:	2301      	movs	r3, #1
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	f107 030f 	add.w	r3, r7, #15
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	2301      	movs	r3, #1
 80033dc:	f002 f892 	bl	8005504 <HAL_I2C_Mem_Read>
	return result;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000310 	.word	0x20000310

080033f0 <mag_write_data>:
void mag_write_data(uint8_t type,uint8_t reg, uint8_t cmd){
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af04      	add	r7, sp, #16
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	460b      	mov	r3, r1
 80033fc:	71bb      	strb	r3, [r7, #6]
 80033fe:	4613      	mov	r3, r2
 8003400:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(_mag_i2c, ((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 1000);
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <mag_write_data+0x44>)
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <mag_write_data+0x20>
 800340c:	2132      	movs	r1, #50	; 0x32
 800340e:	e000      	b.n	8003412 <mag_write_data+0x22>
 8003410:	213c      	movs	r1, #60	; 0x3c
 8003412:	79bb      	ldrb	r3, [r7, #6]
 8003414:	b29a      	uxth	r2, r3
 8003416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800341a:	9302      	str	r3, [sp, #8]
 800341c:	2301      	movs	r3, #1
 800341e:	9301      	str	r3, [sp, #4]
 8003420:	1d7b      	adds	r3, r7, #5
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2301      	movs	r3, #1
 8003426:	f001 ff73 	bl	8005310 <HAL_I2C_Mem_Write>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000310 	.word	0x20000310

08003438 <lsm303dlhc_get_acc>:

void lsm303dlhc_get_acc(){
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
	uint32_t tm=HAL_GetTick();
 800343e:	f001 f831 	bl	80044a4 <HAL_GetTick>
 8003442:	6078      	str	r0, [r7, #4]
	_mag_data->lsm303dlhc.ax=((mag_read_data(1,LSM303DLHC_REG_OUT_X_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_X_L_A));
 8003444:	2129      	movs	r1, #41	; 0x29
 8003446:	2001      	movs	r0, #1
 8003448:	f7ff ffa4 	bl	8003394 <mag_read_data>
 800344c:	4603      	mov	r3, r0
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	b21c      	sxth	r4, r3
 8003452:	2128      	movs	r1, #40	; 0x28
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff ff9d 	bl	8003394 <mag_read_data>
 800345a:	4603      	mov	r3, r0
 800345c:	b21a      	sxth	r2, r3
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <lsm303dlhc_get_acc+0x94>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4322      	orrs	r2, r4
 8003464:	b212      	sxth	r2, r2
 8003466:	821a      	strh	r2, [r3, #16]
	_mag_data->lsm303dlhc.ay=((mag_read_data(1,LSM303DLHC_REG_OUT_Y_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Y_L_A));
 8003468:	212b      	movs	r1, #43	; 0x2b
 800346a:	2001      	movs	r0, #1
 800346c:	f7ff ff92 	bl	8003394 <mag_read_data>
 8003470:	4603      	mov	r3, r0
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	b21c      	sxth	r4, r3
 8003476:	212a      	movs	r1, #42	; 0x2a
 8003478:	2001      	movs	r0, #1
 800347a:	f7ff ff8b 	bl	8003394 <mag_read_data>
 800347e:	4603      	mov	r3, r0
 8003480:	b21a      	sxth	r2, r3
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <lsm303dlhc_get_acc+0x94>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4322      	orrs	r2, r4
 8003488:	b212      	sxth	r2, r2
 800348a:	825a      	strh	r2, [r3, #18]
	_mag_data->lsm303dlhc.az=((mag_read_data(1,LSM303DLHC_REG_OUT_Z_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Z_L_A));
 800348c:	212d      	movs	r1, #45	; 0x2d
 800348e:	2001      	movs	r0, #1
 8003490:	f7ff ff80 	bl	8003394 <mag_read_data>
 8003494:	4603      	mov	r3, r0
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	b21c      	sxth	r4, r3
 800349a:	212c      	movs	r1, #44	; 0x2c
 800349c:	2001      	movs	r0, #1
 800349e:	f7ff ff79 	bl	8003394 <mag_read_data>
 80034a2:	4603      	mov	r3, r0
 80034a4:	b21a      	sxth	r2, r3
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <lsm303dlhc_get_acc+0x94>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4322      	orrs	r2, r4
 80034ac:	b212      	sxth	r2, r2
 80034ae:	829a      	strh	r2, [r3, #20]
	log_s_int("ACCEL",HAL_GetTick()-tm);
 80034b0:	f000 fff8 	bl	80044a4 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	4804      	ldr	r0, [pc, #16]	; (80034d0 <lsm303dlhc_get_acc+0x98>)
 80034be:	f7ff fde1 	bl	8003084 <log_s_int>
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000314 	.word	0x20000314
 80034d0:	0800ad4c 	.word	0x0800ad4c
 80034d4:	00000000 	.word	0x00000000

080034d8 <lsm303dlhc_get_mag>:
void lsm303dlhc_get_mag(){
 80034d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0

		for(i=0;i<3;i++)
		{
			log_s_int("v",((uint16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]));
		}*/
	uint32_t tb=HAL_GetTick();
 80034e0:	f000 ffe0 	bl	80044a4 <HAL_GetTick>
 80034e4:	6078      	str	r0, [r7, #4]
	_mag_data->lsm303dlhc_mag.mx_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_X_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_X_L_M));
 80034e6:	2103      	movs	r1, #3
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7ff ff53 	bl	8003394 <mag_read_data>
 80034ee:	4603      	mov	r3, r0
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	b29c      	uxth	r4, r3
 80034f6:	2104      	movs	r1, #4
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7ff ff4b 	bl	8003394 <mag_read_data>
 80034fe:	4603      	mov	r3, r0
 8003500:	b29b      	uxth	r3, r3
 8003502:	4323      	orrs	r3, r4
 8003504:	b29a      	uxth	r2, r3
 8003506:	4bb6      	ldr	r3, [pc, #728]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	b212      	sxth	r2, r2
 800350c:	841a      	strh	r2, [r3, #32]
	_mag_data->lsm303dlhc_mag.my_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Y_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Y_L_M));
 800350e:	2107      	movs	r1, #7
 8003510:	2000      	movs	r0, #0
 8003512:	f7ff ff3f 	bl	8003394 <mag_read_data>
 8003516:	4603      	mov	r3, r0
 8003518:	b29b      	uxth	r3, r3
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	b29c      	uxth	r4, r3
 800351e:	2108      	movs	r1, #8
 8003520:	2000      	movs	r0, #0
 8003522:	f7ff ff37 	bl	8003394 <mag_read_data>
 8003526:	4603      	mov	r3, r0
 8003528:	b29b      	uxth	r3, r3
 800352a:	4323      	orrs	r3, r4
 800352c:	b29a      	uxth	r2, r3
 800352e:	4bac      	ldr	r3, [pc, #688]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b212      	sxth	r2, r2
 8003534:	845a      	strh	r2, [r3, #34]	; 0x22
	_mag_data->lsm303dlhc_mag.mz_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Z_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Z_L_M));
 8003536:	2105      	movs	r1, #5
 8003538:	2000      	movs	r0, #0
 800353a:	f7ff ff2b 	bl	8003394 <mag_read_data>
 800353e:	4603      	mov	r3, r0
 8003540:	b29b      	uxth	r3, r3
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	b29c      	uxth	r4, r3
 8003546:	2106      	movs	r1, #6
 8003548:	2000      	movs	r0, #0
 800354a:	f7ff ff23 	bl	8003394 <mag_read_data>
 800354e:	4603      	mov	r3, r0
 8003550:	b29b      	uxth	r3, r3
 8003552:	4323      	orrs	r3, r4
 8003554:	b29a      	uxth	r2, r3
 8003556:	4ba2      	ldr	r3, [pc, #648]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b212      	sxth	r2, r2
 800355c:	849a      	strh	r2, [r3, #36]	; 0x24
	_mag_data->lsm303dlhc_mag.mx=4.383713*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.021545*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+-0.077899*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 800355e:	4ba0      	ldr	r3, [pc, #640]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc ffe4 	bl	8000534 <__aeabi_i2d>
 800356c:	a388      	add	r3, pc, #544	; (adr r3, 8003790 <lsm303dlhc_get_mag+0x2b8>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f7fc fe93 	bl	800029c <__adddf3>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	a386      	add	r3, pc, #536	; (adr r3, 8003798 <lsm303dlhc_get_mag+0x2c0>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fd f840 	bl	8000608 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	4b93      	ldr	r3, [pc, #588]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc ffcb 	bl	8000534 <__aeabi_i2d>
 800359e:	a380      	add	r3, pc, #512	; (adr r3, 80037a0 <lsm303dlhc_get_mag+0x2c8>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fc fe78 	bl	8000298 <__aeabi_dsub>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4610      	mov	r0, r2
 80035ae:	4619      	mov	r1, r3
 80035b0:	a37d      	add	r3, pc, #500	; (adr r3, 80037a8 <lsm303dlhc_get_mag+0x2d0>)
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f7fd f827 	bl	8000608 <__aeabi_dmul>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4620      	mov	r0, r4
 80035c0:	4629      	mov	r1, r5
 80035c2:	f7fc fe6b 	bl	800029c <__adddf3>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4690      	mov	r8, r2
 80035cc:	4699      	mov	r9, r3
 80035ce:	4b84      	ldr	r3, [pc, #528]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fc ffac 	bl	8000534 <__aeabi_i2d>
 80035dc:	a374      	add	r3, pc, #464	; (adr r3, 80037b0 <lsm303dlhc_get_mag+0x2d8>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fc fe59 	bl	8000298 <__aeabi_dsub>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	a372      	add	r3, pc, #456	; (adr r3, 80037b8 <lsm303dlhc_get_mag+0x2e0>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fd f808 	bl	8000608 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4978      	ldr	r1, [pc, #480]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 80035fe:	680c      	ldr	r4, [r1, #0]
 8003600:	4640      	mov	r0, r8
 8003602:	4649      	mov	r1, r9
 8003604:	f7fc fe4a 	bl	800029c <__adddf3>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	_mag_data->lsm303dlhc_mag.my=0.021545*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+4.431516*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+0.225705*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8003610:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ff8b 	bl	8000534 <__aeabi_i2d>
 800361e:	a35c      	add	r3, pc, #368	; (adr r3, 8003790 <lsm303dlhc_get_mag+0x2b8>)
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f7fc fe3a 	bl	800029c <__adddf3>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4610      	mov	r0, r2
 800362e:	4619      	mov	r1, r3
 8003630:	a35d      	add	r3, pc, #372	; (adr r3, 80037a8 <lsm303dlhc_get_mag+0x2d0>)
 8003632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003636:	f7fc ffe7 	bl	8000608 <__aeabi_dmul>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4614      	mov	r4, r2
 8003640:	461d      	mov	r5, r3
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff72 	bl	8000534 <__aeabi_i2d>
 8003650:	a353      	add	r3, pc, #332	; (adr r3, 80037a0 <lsm303dlhc_get_mag+0x2c8>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f7fc fe1f 	bl	8000298 <__aeabi_dsub>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	a357      	add	r3, pc, #348	; (adr r3, 80037c0 <lsm303dlhc_get_mag+0x2e8>)
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	f7fc ffce 	bl	8000608 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4620      	mov	r0, r4
 8003672:	4629      	mov	r1, r5
 8003674:	f7fc fe12 	bl	800029c <__adddf3>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4690      	mov	r8, r2
 800367e:	4699      	mov	r9, r3
 8003680:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc ff53 	bl	8000534 <__aeabi_i2d>
 800368e:	a348      	add	r3, pc, #288	; (adr r3, 80037b0 <lsm303dlhc_get_mag+0x2d8>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fc fe00 	bl	8000298 <__aeabi_dsub>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	a349      	add	r3, pc, #292	; (adr r3, 80037c8 <lsm303dlhc_get_mag+0x2f0>)
 80036a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a6:	f7fc ffaf 	bl	8000608 <__aeabi_dmul>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	494c      	ldr	r1, [pc, #304]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 80036b0:	680c      	ldr	r4, [r1, #0]
 80036b2:	4640      	mov	r0, r8
 80036b4:	4649      	mov	r1, r9
 80036b6:	f7fc fdf1 	bl	800029c <__adddf3>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	_mag_data->lsm303dlhc_mag.mz=-0.077899*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.066753*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+5.335236*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc ff32 	bl	8000534 <__aeabi_i2d>
 80036d0:	a32f      	add	r3, pc, #188	; (adr r3, 8003790 <lsm303dlhc_get_mag+0x2b8>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fc fde1 	bl	800029c <__adddf3>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	a335      	add	r3, pc, #212	; (adr r3, 80037b8 <lsm303dlhc_get_mag+0x2e0>)
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f7fc ff8e 	bl	8000608 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4b3a      	ldr	r3, [pc, #232]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7fc ff19 	bl	8000534 <__aeabi_i2d>
 8003702:	a327      	add	r3, pc, #156	; (adr r3, 80037a0 <lsm303dlhc_get_mag+0x2c8>)
 8003704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003708:	f7fc fdc6 	bl	8000298 <__aeabi_dsub>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4610      	mov	r0, r2
 8003712:	4619      	mov	r1, r3
 8003714:	a32e      	add	r3, pc, #184	; (adr r3, 80037d0 <lsm303dlhc_get_mag+0x2f8>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f7fc ff75 	bl	8000608 <__aeabi_dmul>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f7fc fdb9 	bl	800029c <__adddf3>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4690      	mov	r8, r2
 8003730:	4699      	mov	r9, r3
 8003732:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc fefa 	bl	8000534 <__aeabi_i2d>
 8003740:	a31b      	add	r3, pc, #108	; (adr r3, 80037b0 <lsm303dlhc_get_mag+0x2d8>)
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f7fc fda7 	bl	8000298 <__aeabi_dsub>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4610      	mov	r0, r2
 8003750:	4619      	mov	r1, r3
 8003752:	a321      	add	r3, pc, #132	; (adr r3, 80037d8 <lsm303dlhc_get_mag+0x300>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	f7fc ff56 	bl	8000608 <__aeabi_dmul>
 800375c:	4602      	mov	r2, r0
 800375e:	460b      	mov	r3, r1
 8003760:	491f      	ldr	r1, [pc, #124]	; (80037e0 <lsm303dlhc_get_mag+0x308>)
 8003762:	680c      	ldr	r4, [r1, #0]
 8003764:	4640      	mov	r0, r8
 8003766:	4649      	mov	r1, r9
 8003768:	f7fc fd98 	bl	800029c <__adddf3>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	log_s_int("MAG",HAL_GetTick()-tb);
 8003774:	f000 fe96 	bl	80044a4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	4619      	mov	r1, r3
 8003780:	4818      	ldr	r0, [pc, #96]	; (80037e4 <lsm303dlhc_get_mag+0x30c>)
 8003782:	f7ff fc7f 	bl	8003084 <log_s_int>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003790:	6fe2e6eb 	.word	0x6fe2e6eb
 8003794:	40459a7b 	.word	0x40459a7b
 8003798:	0f883340 	.word	0x0f883340
 800379c:	401188ec 	.word	0x401188ec
 80037a0:	0ad46f58 	.word	0x0ad46f58
 80037a4:	4039a7d3 	.word	0x4039a7d3
 80037a8:	7991bc56 	.word	0x7991bc56
 80037ac:	3f960fe4 	.word	0x3f960fe4
 80037b0:	fbce4218 	.word	0xfbce4218
 80037b4:	3fe238ff 	.word	0x3fe238ff
 80037b8:	59641f64 	.word	0x59641f64
 80037bc:	bfb3f130 	.word	0xbfb3f130
 80037c0:	548ecd8e 	.word	0x548ecd8e
 80037c4:	4011b9df 	.word	0x4011b9df
 80037c8:	c4c5974e 	.word	0xc4c5974e
 80037cc:	3fcce3e6 	.word	0x3fcce3e6
 80037d0:	7fe8ee6c 	.word	0x7fe8ee6c
 80037d4:	3fb116b9 	.word	0x3fb116b9
 80037d8:	1b21c476 	.word	0x1b21c476
 80037dc:	40155748 	.word	0x40155748
 80037e0:	20000314 	.word	0x20000314
 80037e4:	0800ad54 	.word	0x0800ad54

080037e8 <I2C_Scan>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void I2C_Scan ()
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b098      	sub	sp, #96	; 0x60
 80037ec:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res;
	char info[] = "Scanning I2C bus...\r\n";
 80037ee:	4b2e      	ldr	r3, [pc, #184]	; (80038a8 <I2C_Scan+0xc0>)
 80037f0:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80037f4:	461d      	mov	r5, r3
 80037f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80037fe:	6020      	str	r0, [r4, #0]
 8003800:	3404      	adds	r4, #4
 8003802:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8003804:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003808:	4618      	mov	r0, r3
 800380a:	f7fc fce9 	bl	80001e0 <strlen>
 800380e:	4603      	mov	r3, r0
 8003810:	b29a      	uxth	r2, r3
 8003812:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8003816:	f04f 33ff 	mov.w	r3, #4294967295
 800381a:	4824      	ldr	r0, [pc, #144]	; (80038ac <I2C_Scan+0xc4>)
 800381c:	f003 fbde 	bl	8006fdc <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++)
 8003820:	2300      	movs	r3, #0
 8003822:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003826:	e02f      	b.n	8003888 <I2C_Scan+0xa0>
	{
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, HAL_MAX_DELAY);
 8003828:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	b299      	uxth	r1, r3
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	2201      	movs	r2, #1
 8003836:	481e      	ldr	r0, [pc, #120]	; (80038b0 <I2C_Scan+0xc8>)
 8003838:	f002 f88a 	bl	8005950 <HAL_I2C_IsDeviceReady>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK){
 8003842:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003846:	2b00      	cmp	r3, #0
 8003848:	d119      	bne.n	800387e <I2C_Scan+0x96>
	    	char msg[64];
	    	snprintf(msg, sizeof(msg), "0x%02X", i);
 800384a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800384e:	1d38      	adds	r0, r7, #4
 8003850:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <I2C_Scan+0xcc>)
 8003852:	2140      	movs	r1, #64	; 0x40
 8003854:	f004 fbd2 	bl	8007ffc <sniprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	4618      	mov	r0, r3
 800385c:	f7fc fcc0 	bl	80001e0 <strlen>
 8003860:	4603      	mov	r3, r0
 8003862:	b29a      	uxth	r2, r3
 8003864:	1d39      	adds	r1, r7, #4
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	4810      	ldr	r0, [pc, #64]	; (80038ac <I2C_Scan+0xc4>)
 800386c:	f003 fbb6 	bl	8006fdc <HAL_UART_Transmit>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
 8003874:	2202      	movs	r2, #2
 8003876:	4910      	ldr	r1, [pc, #64]	; (80038b8 <I2C_Scan+0xd0>)
 8003878:	480c      	ldr	r0, [pc, #48]	; (80038ac <I2C_Scan+0xc4>)
 800387a:	f003 fbaf 	bl	8006fdc <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++)
 800387e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003882:	3301      	adds	r3, #1
 8003884:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003888:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800388c:	2b7f      	cmp	r3, #127	; 0x7f
 800388e:	d9cb      	bls.n	8003828 <I2C_Scan+0x40>
	    }
	    //else HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nend\r\n", 7, HAL_MAX_DELAY);
 8003890:	f04f 33ff 	mov.w	r3, #4294967295
 8003894:	2207      	movs	r2, #7
 8003896:	4909      	ldr	r1, [pc, #36]	; (80038bc <I2C_Scan+0xd4>)
 8003898:	4804      	ldr	r0, [pc, #16]	; (80038ac <I2C_Scan+0xc4>)
 800389a:	f003 fb9f 	bl	8006fdc <HAL_UART_Transmit>
}
 800389e:	bf00      	nop
 80038a0:	3760      	adds	r7, #96	; 0x60
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdb0      	pop	{r4, r5, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	0800ad6c 	.word	0x0800ad6c
 80038ac:	200003c4 	.word	0x200003c4
 80038b0:	20000318 	.word	0x20000318
 80038b4:	0800ad58 	.word	0x0800ad58
 80038b8:	0800ad60 	.word	0x0800ad60
 80038bc:	0800ad64 	.word	0x0800ad64

080038c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c4:	ed2d 8b04 	vpush	{d8-d9}
 80038c8:	b08c      	sub	sp, #48	; 0x30
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038cc:	f000 fd84 	bl	80043d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038d0:	f000 f9c4 	bl	8003c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038d4:	f000 faba 	bl	8003e4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80038d8:	f000 fa2a 	bl	8003d30 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80038dc:	f000 fa8c 	bl	8003df8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80038e0:	f000 fa54 	bl	8003d8c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  blink_stmled();
 80038e4:	f000 fb34 	bl	8003f50 <blink_stmled>
  I2C_Scan();
 80038e8:	f7ff ff7e 	bl	80037e8 <I2C_Scan>
  debug_init(&huart1);
 80038ec:	48ce      	ldr	r0, [pc, #824]	; (8003c28 <main+0x368>)
 80038ee:	f7ff fb7f 	bl	8002ff0 <debug_init>
  log_s("Start");
 80038f2:	48ce      	ldr	r0, [pc, #824]	; (8003c2c <main+0x36c>)
 80038f4:	f7ff fb8c 	bl	8003010 <log_s>
  GY801_init(&hi2c1,&data);
 80038f8:	49cd      	ldr	r1, [pc, #820]	; (8003c30 <main+0x370>)
 80038fa:	48ce      	ldr	r0, [pc, #824]	; (8003c34 <main+0x374>)
 80038fc:	f7ff fbf4 	bl	80030e8 <GY801_init>
  //NRF_init(&hspi1,&data);
  uint8_t cc=0;
 8003900:	2300      	movs	r3, #0
 8003902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  HAL_Delay(500);
 8003906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800390a:	f000 fdd7 	bl	80044bc <HAL_Delay>
  uint32_t last_t, time_t;

  // madgwick
  uint32_t ahrs_t;
  float imu[3];
  log_p(&imu[0]);
 800390e:	f107 0314 	add.w	r3, r7, #20
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fbcc 	bl	80030b0 <log_p>
  float quat[4];
  ahrs_t=HAL_GetTick();
 8003918:	f000 fdc4 	bl	80044a4 <HAL_GetTick>
 800391c:	62b8      	str	r0, [r7, #40]	; 0x28
	  sprintf(ms_data,"data:%d %d",BMP180_UT(),BMP180_UT());
	  log_s(ms_data);*/
	  //nrf_send_data[0]=cc;
	  //nrf24l01p_write_tx_fifo(&nrf_send_data);
	  //cc+=1;
	  if(HAL_GetTick()-last_t>=5){
 800391e:	f000 fdc1 	bl	80044a4 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b04      	cmp	r3, #4
 800392a:	d9f8      	bls.n	800391e <main+0x5e>
		  last_t=HAL_GetTick();
 800392c:	f000 fdba 	bl	80044a4 <HAL_GetTick>
 8003930:	62f8      	str	r0, [r7, #44]	; 0x2c
		  time_t=HAL_GetTick();
 8003932:	f000 fdb7 	bl	80044a4 <HAL_GetTick>
 8003936:	6238      	str	r0, [r7, #32]
		  GY801_update_data();
 8003938:	f7ff fc08 	bl	800314c <GY801_update_data>
		  log_s_int("READ",HAL_GetTick()-time_t);
 800393c:	f000 fdb2 	bl	80044a4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	4619      	mov	r1, r3
 8003948:	48bb      	ldr	r0, [pc, #748]	; (8003c38 <main+0x378>)
 800394a:	f7ff fb9b 	bl	8003084 <log_s_int>
		  time_t=HAL_GetTick();
 800394e:	f000 fda9 	bl	80044a4 <HAL_GetTick>
 8003952:	6238      	str	r0, [r7, #32]
		  MadgwickAHRSupdate((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625,(float)data.lsm303dlhc_mag.mx*0.1388,(float)data.lsm303dlhc_mag.my*0.1388,(float)data.lsm303dlhc_mag.mz*0.1388);
 8003954:	f000 fda6 	bl	80044a4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	ee17 0a90 	vmov	r0, s15
 800396a:	f7fc fdf5 	bl	8000558 <__aeabi_f2d>
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	4bb2      	ldr	r3, [pc, #712]	; (8003c3c <main+0x37c>)
 8003974:	f7fc ff72 	bl	800085c <__aeabi_ddiv>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	f7fd f91a 	bl	8000bb8 <__aeabi_d2f>
 8003984:	4604      	mov	r4, r0
 8003986:	4baa      	ldr	r3, [pc, #680]	; (8003c30 <main+0x370>)
 8003988:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003994:	ee17 0a90 	vmov	r0, s15
 8003998:	f7fc fdde 	bl	8000558 <__aeabi_f2d>
 800399c:	a39a      	add	r3, pc, #616	; (adr r3, 8003c08 <main+0x348>)
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f7fc fe31 	bl	8000608 <__aeabi_dmul>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4610      	mov	r0, r2
 80039ac:	4619      	mov	r1, r3
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	4ba3      	ldr	r3, [pc, #652]	; (8003c40 <main+0x380>)
 80039b4:	f7fc ff52 	bl	800085c <__aeabi_ddiv>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4610      	mov	r0, r2
 80039be:	4619      	mov	r1, r3
 80039c0:	a393      	add	r3, pc, #588	; (adr r3, 8003c10 <main+0x350>)
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	f7fc ff49 	bl	800085c <__aeabi_ddiv>
 80039ca:	4602      	mov	r2, r0
 80039cc:	460b      	mov	r3, r1
 80039ce:	4610      	mov	r0, r2
 80039d0:	4619      	mov	r1, r3
 80039d2:	f7fd f8f1 	bl	8000bb8 <__aeabi_d2f>
 80039d6:	4605      	mov	r5, r0
 80039d8:	4b95      	ldr	r3, [pc, #596]	; (8003c30 <main+0x370>)
 80039da:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e6:	ee17 0a90 	vmov	r0, s15
 80039ea:	f7fc fdb5 	bl	8000558 <__aeabi_f2d>
 80039ee:	a386      	add	r3, pc, #536	; (adr r3, 8003c08 <main+0x348>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fc fe08 	bl	8000608 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	4b8e      	ldr	r3, [pc, #568]	; (8003c40 <main+0x380>)
 8003a06:	f7fc ff29 	bl	800085c <__aeabi_ddiv>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	a37f      	add	r3, pc, #508	; (adr r3, 8003c10 <main+0x350>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc ff20 	bl	800085c <__aeabi_ddiv>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	f7fd f8c8 	bl	8000bb8 <__aeabi_d2f>
 8003a28:	4606      	mov	r6, r0
 8003a2a:	4b81      	ldr	r3, [pc, #516]	; (8003c30 <main+0x370>)
 8003a2c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a38:	ee17 0a90 	vmov	r0, s15
 8003a3c:	f7fc fd8c 	bl	8000558 <__aeabi_f2d>
 8003a40:	a371      	add	r3, pc, #452	; (adr r3, 8003c08 <main+0x348>)
 8003a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a46:	f7fc fddf 	bl	8000608 <__aeabi_dmul>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	4b7a      	ldr	r3, [pc, #488]	; (8003c40 <main+0x380>)
 8003a58:	f7fc ff00 	bl	800085c <__aeabi_ddiv>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4610      	mov	r0, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	a36a      	add	r3, pc, #424	; (adr r3, 8003c10 <main+0x350>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f7fc fef7 	bl	800085c <__aeabi_ddiv>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4610      	mov	r0, r2
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7fd f89f 	bl	8000bb8 <__aeabi_d2f>
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <main+0x370>)
 8003a7e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a8a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8003c44 <main+0x384>
 8003a8e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003a92:	4b67      	ldr	r3, [pc, #412]	; (8003c30 <main+0x370>)
 8003a94:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003c44 <main+0x384>
 8003aa4:	ee67 8a87 	vmul.f32	s17, s15, s14
 8003aa8:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <main+0x370>)
 8003aaa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8003c44 <main+0x384>
 8003aba:	ee27 9a87 	vmul.f32	s18, s15, s14
 8003abe:	4b5c      	ldr	r3, [pc, #368]	; (8003c30 <main+0x370>)
 8003ac0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7fd f876 	bl	8000bb8 <__aeabi_d2f>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fc fd42 	bl	8000558 <__aeabi_f2d>
 8003ad4:	a350      	add	r3, pc, #320	; (adr r3, 8003c18 <main+0x358>)
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	f7fc fd95 	bl	8000608 <__aeabi_dmul>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f7fd f867 	bl	8000bb8 <__aeabi_d2f>
 8003aea:	4681      	mov	r9, r0
 8003aec:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <main+0x370>)
 8003aee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003af2:	4610      	mov	r0, r2
 8003af4:	4619      	mov	r1, r3
 8003af6:	f7fd f85f 	bl	8000bb8 <__aeabi_d2f>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fd2b 	bl	8000558 <__aeabi_f2d>
 8003b02:	a345      	add	r3, pc, #276	; (adr r3, 8003c18 <main+0x358>)
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f7fc fd7e 	bl	8000608 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	f7fd f850 	bl	8000bb8 <__aeabi_d2f>
 8003b18:	4682      	mov	sl, r0
 8003b1a:	4b45      	ldr	r3, [pc, #276]	; (8003c30 <main+0x370>)
 8003b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003b20:	4610      	mov	r0, r2
 8003b22:	4619      	mov	r1, r3
 8003b24:	f7fd f848 	bl	8000bb8 <__aeabi_d2f>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fd14 	bl	8000558 <__aeabi_f2d>
 8003b30:	a339      	add	r3, pc, #228	; (adr r3, 8003c18 <main+0x358>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f7fc fd67 	bl	8000608 <__aeabi_dmul>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4610      	mov	r0, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	f7fd f839 	bl	8000bb8 <__aeabi_d2f>
 8003b46:	4603      	mov	r3, r0
 8003b48:	ee04 3a90 	vmov	s9, r3
 8003b4c:	ee04 aa10 	vmov	s8, sl
 8003b50:	ee03 9a90 	vmov	s7, r9
 8003b54:	eeb0 3a49 	vmov.f32	s6, s18
 8003b58:	eef0 2a68 	vmov.f32	s5, s17
 8003b5c:	eeb0 2a48 	vmov.f32	s4, s16
 8003b60:	ee01 8a90 	vmov	s3, r8
 8003b64:	ee01 6a10 	vmov	s2, r6
 8003b68:	ee00 5a90 	vmov	s1, r5
 8003b6c:	ee00 4a10 	vmov	s0, r4
 8003b70:	f7fd fae0 	bl	8001134 <MadgwickAHRSupdate>
		  //MadgwickAHRSupdateIMU((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625);
		  //MadgwickAHRSupdateIMU(0.02,-0.01,-0.02,-0.01,3200,8900,17600);
		  ahrs_t=HAL_GetTick();
 8003b74:	f000 fc96 	bl	80044a4 <HAL_GetTick>
 8003b78:	62b8      	str	r0, [r7, #40]	; 0x28

		  log_s_int("AHRS",HAL_GetTick()-time_t);
 8003b7a:	f000 fc93 	bl	80044a4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	4619      	mov	r1, r3
 8003b86:	4830      	ldr	r0, [pc, #192]	; (8003c48 <main+0x388>)
 8003b88:	f7ff fa7c 	bl	8003084 <log_s_int>
		  quat[0] = q0; quat[1] = q1; quat[2] = q2; quat[3] = q3;
 8003b8c:	4b2f      	ldr	r3, [pc, #188]	; (8003c4c <main+0x38c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <main+0x390>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <main+0x394>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <main+0x398>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	613b      	str	r3, [r7, #16]
		  quat2Euler(&quat[0], &imu[0]);
 8003ba4:	f107 0214 	add.w	r2, r7, #20
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	4611      	mov	r1, r2
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe ffe7 	bl	8002b80 <quat2Euler>
		  for(uint8_t i=0;i<3;i++){
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bb8:	e021      	b.n	8003bfe <main+0x33e>
			  imu[i]/=0.01745329252;
 8003bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	3330      	adds	r3, #48	; 0x30
 8003bc2:	443b      	add	r3, r7
 8003bc4:	3b1c      	subs	r3, #28
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fcc5 	bl	8000558 <__aeabi_f2d>
 8003bce:	a314      	add	r3, pc, #80	; (adr r3, 8003c20 <main+0x360>)
 8003bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd4:	f7fc fe42 	bl	800085c <__aeabi_ddiv>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	f7fc ffe8 	bl	8000bb8 <__aeabi_d2f>
 8003be8:	4602      	mov	r2, r0
 8003bea:	00a3      	lsls	r3, r4, #2
 8003bec:	3330      	adds	r3, #48	; 0x30
 8003bee:	443b      	add	r3, r7
 8003bf0:	3b1c      	subs	r3, #28
 8003bf2:	601a      	str	r2, [r3, #0]
		  for(uint8_t i=0;i<3;i++){
 8003bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d9d9      	bls.n	8003bba <main+0x2fa>
	  if(HAL_GetTick()-last_t>=5){
 8003c06:	e68a      	b.n	800391e <main+0x5e>
 8003c08:	54442d18 	.word	0x54442d18
 8003c0c:	400921fb 	.word	0x400921fb
 8003c10:	00000000 	.word	0x00000000
 8003c14:	40606000 	.word	0x40606000
 8003c18:	ca57a787 	.word	0xca57a787
 8003c1c:	3fc1c432 	.word	0x3fc1c432
 8003c20:	a252dd11 	.word	0xa252dd11
 8003c24:	3f91df46 	.word	0x3f91df46
 8003c28:	200003c4 	.word	0x200003c4
 8003c2c:	0800ad84 	.word	0x0800ad84
 8003c30:	20000408 	.word	0x20000408
 8003c34:	20000318 	.word	0x20000318
 8003c38:	0800ad8c 	.word	0x0800ad8c
 8003c3c:	408f4000 	.word	0x408f4000
 8003c40:	40668000 	.word	0x40668000
 8003c44:	41ac8000 	.word	0x41ac8000
 8003c48:	0800ad94 	.word	0x0800ad94
 8003c4c:	20000004 	.word	0x20000004
 8003c50:	2000020c 	.word	0x2000020c
 8003c54:	20000210 	.word	0x20000210
 8003c58:	20000214 	.word	0x20000214

08003c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b094      	sub	sp, #80	; 0x50
 8003c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c62:	f107 0320 	add.w	r3, r7, #32
 8003c66:	2230      	movs	r2, #48	; 0x30
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f003 fd54 	bl	8007718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c70:	f107 030c 	add.w	r3, r7, #12
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
 8003c84:	4b28      	ldr	r3, [pc, #160]	; (8003d28 <SystemClock_Config+0xcc>)
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	4a27      	ldr	r2, [pc, #156]	; (8003d28 <SystemClock_Config+0xcc>)
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <SystemClock_Config+0xcc>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <SystemClock_Config+0xd0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <SystemClock_Config+0xd0>)
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <SystemClock_Config+0xd0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cb8:	607b      	str	r3, [r7, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003cd4:	2354      	movs	r3, #84	; 0x54
 8003cd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce0:	f107 0320 	add.w	r3, r7, #32
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f002 fc0d 	bl	8006504 <HAL_RCC_OscConfig>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003cf0:	f000 f940 	bl	8003f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cf4:	230f      	movs	r3, #15
 8003cf6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d0a:	f107 030c 	add.w	r3, r7, #12
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f002 fe6f 	bl	80069f4 <HAL_RCC_ClockConfig>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003d1c:	f000 f92a 	bl	8003f74 <Error_Handler>
  }
}
 8003d20:	bf00      	nop
 8003d22:	3750      	adds	r7, #80	; 0x50
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40007000 	.word	0x40007000

08003d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d34:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <MX_I2C1_Init+0x54>)
 8003d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003d3a:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d3c:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <MX_I2C1_Init+0x58>)
 8003d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d6c:	4804      	ldr	r0, [pc, #16]	; (8003d80 <MX_I2C1_Init+0x50>)
 8003d6e:	f000 fe67 	bl	8004a40 <HAL_I2C_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003d78:	f000 f8fc 	bl	8003f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000318 	.word	0x20000318
 8003d84:	40005400 	.word	0x40005400
 8003d88:	00061a80 	.word	0x00061a80

08003d8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003d90:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003d92:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <MX_SPI1_Init+0x68>)
 8003d94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003d98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003da4:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003daa:	4b11      	ldr	r3, [pc, #68]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003db0:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003db6:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dd8:	220a      	movs	r2, #10
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ddc:	4804      	ldr	r0, [pc, #16]	; (8003df0 <MX_SPI1_Init+0x64>)
 8003dde:	f003 f827 	bl	8006e30 <HAL_SPI_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003de8:	f000 f8c4 	bl	8003f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	2000036c 	.word	0x2000036c
 8003df4:	40013000 	.word	0x40013000

08003df8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <MX_USART1_UART_Init+0x50>)
 8003e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e0a:	4b0e      	ldr	r3, [pc, #56]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e1e:	220c      	movs	r2, #12
 8003e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e28:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e2e:	4805      	ldr	r0, [pc, #20]	; (8003e44 <MX_USART1_UART_Init+0x4c>)
 8003e30:	f003 f887 	bl	8006f42 <HAL_UART_Init>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003e3a:	f000 f89b 	bl	8003f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	200003c4 	.word	0x200003c4
 8003e48:	40011000 	.word	0x40011000

08003e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e52:	f107 0314 	add.w	r3, r7, #20
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
 8003e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	613b      	str	r3, [r7, #16]
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a35      	ldr	r2, [pc, #212]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a2e      	ldr	r2, [pc, #184]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	60bb      	str	r3, [r7, #8]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a20      	ldr	r2, [pc, #128]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <MX_GPIO_Init+0xf4>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	607b      	str	r3, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2111      	movs	r1, #17
 8003ed6:	481b      	ldr	r0, [pc, #108]	; (8003f44 <MX_GPIO_Init+0xf8>)
 8003ed8:	f000 fd7e 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003edc:	2200      	movs	r2, #0
 8003ede:	2110      	movs	r1, #16
 8003ee0:	4819      	ldr	r0, [pc, #100]	; (8003f48 <MX_GPIO_Init+0xfc>)
 8003ee2:	f000 fd79 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003ee6:	2311      	movs	r3, #17
 8003ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eea:	2301      	movs	r3, #1
 8003eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ef6:	f107 0314 	add.w	r3, r7, #20
 8003efa:	4619      	mov	r1, r3
 8003efc:	4811      	ldr	r0, [pc, #68]	; (8003f44 <MX_GPIO_Init+0xf8>)
 8003efe:	f000 fbe7 	bl	80046d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003f02:	2310      	movs	r3, #16
 8003f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f06:	2301      	movs	r3, #1
 8003f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f12:	f107 0314 	add.w	r3, r7, #20
 8003f16:	4619      	mov	r1, r3
 8003f18:	480b      	ldr	r0, [pc, #44]	; (8003f48 <MX_GPIO_Init+0xfc>)
 8003f1a:	f000 fbd9 	bl	80046d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	4619      	mov	r1, r3
 8003f32:	4806      	ldr	r0, [pc, #24]	; (8003f4c <MX_GPIO_Init+0x100>)
 8003f34:	f000 fbcc 	bl	80046d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f38:	bf00      	nop
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020800 	.word	0x40020800
 8003f48:	40020000 	.word	0x40020000
 8003f4c:	40020400 	.word	0x40020400

08003f50 <blink_stmled>:

/* USER CODE BEGIN 4 */
void blink_stmled(){
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8003f54:	2101      	movs	r1, #1
 8003f56:	4806      	ldr	r0, [pc, #24]	; (8003f70 <blink_stmled+0x20>)
 8003f58:	f000 fd57 	bl	8004a0a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003f5c:	2064      	movs	r0, #100	; 0x64
 8003f5e:	f000 faad 	bl	80044bc <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8003f62:	2101      	movs	r1, #1
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <blink_stmled+0x20>)
 8003f66:	f000 fd50 	bl	8004a0a <HAL_GPIO_TogglePin>
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40020800 	.word	0x40020800

08003f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f78:	b672      	cpsid	i
}
 8003f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f7c:	e7fe      	b.n	8003f7c <Error_Handler+0x8>
	...

08003f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_MspInit+0x4c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <HAL_MspInit+0x4c>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_MspInit+0x4c>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	607b      	str	r3, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	603b      	str	r3, [r7, #0]
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_MspInit+0x4c>)
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <HAL_MspInit+0x4c>)
 8003fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_MspInit+0x4c>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800

08003fd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_I2C_MspInit+0x84>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d12b      	bne.n	800404a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	613b      	str	r3, [r7, #16]
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_I2C_MspInit+0x88>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	4a17      	ldr	r2, [pc, #92]	; (8004058 <HAL_I2C_MspInit+0x88>)
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	6313      	str	r3, [r2, #48]	; 0x30
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <HAL_I2C_MspInit+0x88>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800400e:	23c0      	movs	r3, #192	; 0xc0
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004012:	2312      	movs	r3, #18
 8004014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401a:	2303      	movs	r3, #3
 800401c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800401e:	2304      	movs	r3, #4
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	4619      	mov	r1, r3
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <HAL_I2C_MspInit+0x8c>)
 800402a:	f000 fb51 	bl	80046d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_I2C_MspInit+0x88>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a08      	ldr	r2, [pc, #32]	; (8004058 <HAL_I2C_MspInit+0x88>)
 8004038:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <HAL_I2C_MspInit+0x88>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004046:	60fb      	str	r3, [r7, #12]
 8004048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800404a:	bf00      	nop
 800404c:	3728      	adds	r7, #40	; 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40005400 	.word	0x40005400
 8004058:	40023800 	.word	0x40023800
 800405c:	40020400 	.word	0x40020400

08004060 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_SPI_MspInit+0x84>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d12b      	bne.n	80040da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <HAL_SPI_MspInit+0x88>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_SPI_MspInit+0x88>)
 800408c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004090:	6453      	str	r3, [r2, #68]	; 0x44
 8004092:	4b15      	ldr	r3, [pc, #84]	; (80040e8 <HAL_SPI_MspInit+0x88>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_SPI_MspInit+0x88>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_SPI_MspInit+0x88>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <HAL_SPI_MspInit+0x88>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80040ba:	23e0      	movs	r3, #224	; 0xe0
 80040bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	2302      	movs	r3, #2
 80040c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c6:	2303      	movs	r3, #3
 80040c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040ca:	2305      	movs	r3, #5
 80040cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ce:	f107 0314 	add.w	r3, r7, #20
 80040d2:	4619      	mov	r1, r3
 80040d4:	4805      	ldr	r0, [pc, #20]	; (80040ec <HAL_SPI_MspInit+0x8c>)
 80040d6:	f000 fafb 	bl	80046d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040da:	bf00      	nop
 80040dc:	3728      	adds	r7, #40	; 0x28
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40013000 	.word	0x40013000
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020000 	.word	0x40020000

080040f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <HAL_UART_MspInit+0x84>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12c      	bne.n	800416c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_UART_MspInit+0x88>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_UART_MspInit+0x88>)
 800411c:	f043 0310 	orr.w	r3, r3, #16
 8004120:	6453      	str	r3, [r2, #68]	; 0x44
 8004122:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_UART_MspInit+0x88>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f003 0310 	and.w	r3, r3, #16
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_UART_MspInit+0x88>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a10      	ldr	r2, [pc, #64]	; (8004178 <HAL_UART_MspInit+0x88>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_UART_MspInit+0x88>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800414a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800414e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004150:	2302      	movs	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004158:	2303      	movs	r3, #3
 800415a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800415c:	2307      	movs	r3, #7
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4619      	mov	r1, r3
 8004166:	4805      	ldr	r0, [pc, #20]	; (800417c <HAL_UART_MspInit+0x8c>)
 8004168:	f000 fab2 	bl	80046d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800416c:	bf00      	nop
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40011000 	.word	0x40011000
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000

08004180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <NMI_Handler+0x4>

08004186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800418a:	e7fe      	b.n	800418a <HardFault_Handler+0x4>

0800418c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004190:	e7fe      	b.n	8004190 <MemManage_Handler+0x4>

08004192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004196:	e7fe      	b.n	8004196 <BusFault_Handler+0x4>

08004198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800419c:	e7fe      	b.n	800419c <UsageFault_Handler+0x4>

0800419e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041cc:	f000 f956 	bl	800447c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
	return 1;
 80041d8:	2301      	movs	r3, #1
}
 80041da:	4618      	mov	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_kill>:

int _kill(int pid, int sig)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041ee:	f003 fa69 	bl	80076c4 <__errno>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2216      	movs	r2, #22
 80041f6:	601a      	str	r2, [r3, #0]
	return -1;
 80041f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_exit>:

void _exit (int status)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ffe7 	bl	80041e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004216:	e7fe      	b.n	8004216 <_exit+0x12>

08004218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004224:	2300      	movs	r3, #0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e00a      	b.n	8004240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800422a:	f3af 8000 	nop.w
 800422e:	4601      	mov	r1, r0
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60ba      	str	r2, [r7, #8]
 8004236:	b2ca      	uxtb	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3301      	adds	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	dbf0      	blt.n	800422a <_read+0x12>
	}

return len;
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e009      	b.n	8004278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	60ba      	str	r2, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3301      	adds	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	dbf1      	blt.n	8004264 <_write+0x12>
	}
	return len;
 8004280:	687b      	ldr	r3, [r7, #4]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <_close>:

int _close(int file)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
	return -1;
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b2:	605a      	str	r2, [r3, #4]
	return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <_isatty>:

int _isatty(int file)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b083      	sub	sp, #12
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
	return 1;
 80042ca:	2301      	movs	r3, #1
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
	return 0;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042fc:	4a14      	ldr	r2, [pc, #80]	; (8004350 <_sbrk+0x5c>)
 80042fe:	4b15      	ldr	r3, [pc, #84]	; (8004354 <_sbrk+0x60>)
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d102      	bne.n	8004316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <_sbrk+0x64>)
 8004312:	4a12      	ldr	r2, [pc, #72]	; (800435c <_sbrk+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004316:	4b10      	ldr	r3, [pc, #64]	; (8004358 <_sbrk+0x64>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d207      	bcs.n	8004334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004324:	f003 f9ce 	bl	80076c4 <__errno>
 8004328:	4603      	mov	r3, r0
 800432a:	220c      	movs	r2, #12
 800432c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	e009      	b.n	8004348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004334:	4b08      	ldr	r3, [pc, #32]	; (8004358 <_sbrk+0x64>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <_sbrk+0x64>)
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	4a05      	ldr	r2, [pc, #20]	; (8004358 <_sbrk+0x64>)
 8004344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004346:	68fb      	ldr	r3, [r7, #12]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20018000 	.word	0x20018000
 8004354:	00000400 	.word	0x00000400
 8004358:	20000448 	.word	0x20000448
 800435c:	20000460 	.word	0x20000460

08004360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <SystemInit+0x20>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <SystemInit+0x20>)
 800436c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004388:	480d      	ldr	r0, [pc, #52]	; (80043c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800438a:	490e      	ldr	r1, [pc, #56]	; (80043c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800438c:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800438e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004390:	e002      	b.n	8004398 <LoopCopyDataInit>

08004392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004396:	3304      	adds	r3, #4

08004398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800439a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800439c:	d3f9      	bcc.n	8004392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800439e:	4a0b      	ldr	r2, [pc, #44]	; (80043cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043a0:	4c0b      	ldr	r4, [pc, #44]	; (80043d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043a4:	e001      	b.n	80043aa <LoopFillZerobss>

080043a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a8:	3204      	adds	r2, #4

080043aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043ac:	d3fb      	bcc.n	80043a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043ae:	f7ff ffd7 	bl	8004360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043b2:	f003 f98d 	bl	80076d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043b6:	f7ff fa83 	bl	80038c0 <main>
  bx  lr    
 80043ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80043c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043c4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80043c8:	0800b1d4 	.word	0x0800b1d4
  ldr r2, =_sbss
 80043cc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80043d0:	20000460 	.word	0x20000460

080043d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043d4:	e7fe      	b.n	80043d4 <ADC_IRQHandler>
	...

080043d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <HAL_Init+0x40>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <HAL_Init+0x40>)
 80043e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_Init+0x40>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a0a      	ldr	r2, [pc, #40]	; (8004418 <HAL_Init+0x40>)
 80043ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HAL_Init+0x40>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a07      	ldr	r2, [pc, #28]	; (8004418 <HAL_Init+0x40>)
 80043fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004400:	2003      	movs	r0, #3
 8004402:	f000 f931 	bl	8004668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004406:	200f      	movs	r0, #15
 8004408:	f000 f808 	bl	800441c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800440c:	f7ff fdb8 	bl	8003f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023c00 	.word	0x40023c00

0800441c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_InitTick+0x54>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	4b12      	ldr	r3, [pc, #72]	; (8004474 <HAL_InitTick+0x58>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004432:	fbb3 f3f1 	udiv	r3, r3, r1
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f93b 	bl	80046b6 <HAL_SYSTICK_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e00e      	b.n	8004468 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d80a      	bhi.n	8004466 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004450:	2200      	movs	r2, #0
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	f000 f911 	bl	800467e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800445c:	4a06      	ldr	r2, [pc, #24]	; (8004478 <HAL_InitTick+0x5c>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
}
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000008 	.word	0x20000008
 8004474:	20000010 	.word	0x20000010
 8004478:	2000000c 	.word	0x2000000c

0800447c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <HAL_IncTick+0x20>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_IncTick+0x24>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4413      	add	r3, r2
 800448c:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <HAL_IncTick+0x24>)
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000010 	.word	0x20000010
 80044a0:	2000044c 	.word	0x2000044c

080044a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return uwTick;
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <HAL_GetTick+0x14>)
 80044aa:	681b      	ldr	r3, [r3, #0]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	2000044c 	.word	0x2000044c

080044bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7ff ffee 	bl	80044a4 <HAL_GetTick>
 80044c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d005      	beq.n	80044e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <HAL_Delay+0x44>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4413      	add	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044e2:	bf00      	nop
 80044e4:	f7ff ffde 	bl	80044a4 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d8f7      	bhi.n	80044e4 <HAL_Delay+0x28>
  {
  }
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	3710      	adds	r7, #16
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000010 	.word	0x20000010

08004504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <__NVIC_SetPriorityGrouping+0x44>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004520:	4013      	ands	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800452c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004536:	4a04      	ldr	r2, [pc, #16]	; (8004548 <__NVIC_SetPriorityGrouping+0x44>)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	60d3      	str	r3, [r2, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004550:	4b04      	ldr	r3, [pc, #16]	; (8004564 <__NVIC_GetPriorityGrouping+0x18>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	0a1b      	lsrs	r3, r3, #8
 8004556:	f003 0307 	and.w	r3, r3, #7
}
 800455a:	4618      	mov	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000ed00 	.word	0xe000ed00

08004568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db0a      	blt.n	8004592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	b2da      	uxtb	r2, r3
 8004580:	490c      	ldr	r1, [pc, #48]	; (80045b4 <__NVIC_SetPriority+0x4c>)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	0112      	lsls	r2, r2, #4
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	440b      	add	r3, r1
 800458c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004590:	e00a      	b.n	80045a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4908      	ldr	r1, [pc, #32]	; (80045b8 <__NVIC_SetPriority+0x50>)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	3b04      	subs	r3, #4
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	440b      	add	r3, r1
 80045a6:	761a      	strb	r2, [r3, #24]
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	e000e100 	.word	0xe000e100
 80045b8:	e000ed00 	.word	0xe000ed00

080045bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	; 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	bf28      	it	cs
 80045da:	2304      	movcs	r3, #4
 80045dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	3304      	adds	r3, #4
 80045e2:	2b06      	cmp	r3, #6
 80045e4:	d902      	bls.n	80045ec <NVIC_EncodePriority+0x30>
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	3b03      	subs	r3, #3
 80045ea:	e000      	b.n	80045ee <NVIC_EncodePriority+0x32>
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	f04f 32ff 	mov.w	r2, #4294967295
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	401a      	ands	r2, r3
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004604:	f04f 31ff 	mov.w	r1, #4294967295
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	43d9      	mvns	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	4313      	orrs	r3, r2
         );
}
 8004616:	4618      	mov	r0, r3
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3b01      	subs	r3, #1
 8004630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004634:	d301      	bcc.n	800463a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004636:	2301      	movs	r3, #1
 8004638:	e00f      	b.n	800465a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <SysTick_Config+0x40>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3b01      	subs	r3, #1
 8004640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004642:	210f      	movs	r1, #15
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	f7ff ff8e 	bl	8004568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <SysTick_Config+0x40>)
 800464e:	2200      	movs	r2, #0
 8004650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004652:	4b04      	ldr	r3, [pc, #16]	; (8004664 <SysTick_Config+0x40>)
 8004654:	2207      	movs	r2, #7
 8004656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000e010 	.word	0xe000e010

08004668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ff47 	bl	8004504 <__NVIC_SetPriorityGrouping>
}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800467e:	b580      	push	{r7, lr}
 8004680:	b086      	sub	sp, #24
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
 800468a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004690:	f7ff ff5c 	bl	800454c <__NVIC_GetPriorityGrouping>
 8004694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ff8e 	bl	80045bc <NVIC_EncodePriority>
 80046a0:	4602      	mov	r2, r0
 80046a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff5d 	bl	8004568 <__NVIC_SetPriority>
}
 80046ae:	bf00      	nop
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7ff ffb0 	bl	8004624 <SysTick_Config>
 80046c4:	4603      	mov	r3, r0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b089      	sub	sp, #36	; 0x24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e6:	2300      	movs	r3, #0
 80046e8:	61fb      	str	r3, [r7, #28]
 80046ea:	e159      	b.n	80049a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046ec:	2201      	movs	r2, #1
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	4013      	ands	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	f040 8148 	bne.w	800499a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b01      	cmp	r3, #1
 8004714:	d005      	beq.n	8004722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800471e:	2b02      	cmp	r3, #2
 8004720:	d130      	bne.n	8004784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	2203      	movs	r2, #3
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43db      	mvns	r3, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4013      	ands	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004758:	2201      	movs	r2, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 0201 	and.w	r2, r3, #1
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b03      	cmp	r3, #3
 800478e:	d017      	beq.n	80047c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f003 0303 	and.w	r3, r3, #3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d123      	bne.n	8004814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	08da      	lsrs	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3208      	adds	r2, #8
 80047d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	220f      	movs	r2, #15
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	08da      	lsrs	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3208      	adds	r2, #8
 800480e:	69b9      	ldr	r1, [r7, #24]
 8004810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2203      	movs	r2, #3
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 0203 	and.w	r2, r3, #3
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4313      	orrs	r3, r2
 8004840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 80a2 	beq.w	800499a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4b57      	ldr	r3, [pc, #348]	; (80049b8 <HAL_GPIO_Init+0x2e8>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4a56      	ldr	r2, [pc, #344]	; (80049b8 <HAL_GPIO_Init+0x2e8>)
 8004860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004864:	6453      	str	r3, [r2, #68]	; 0x44
 8004866:	4b54      	ldr	r3, [pc, #336]	; (80049b8 <HAL_GPIO_Init+0x2e8>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004872:	4a52      	ldr	r2, [pc, #328]	; (80049bc <HAL_GPIO_Init+0x2ec>)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	089b      	lsrs	r3, r3, #2
 8004878:	3302      	adds	r3, #2
 800487a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800487e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	220f      	movs	r2, #15
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	4013      	ands	r3, r2
 8004894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a49      	ldr	r2, [pc, #292]	; (80049c0 <HAL_GPIO_Init+0x2f0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d019      	beq.n	80048d2 <HAL_GPIO_Init+0x202>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a48      	ldr	r2, [pc, #288]	; (80049c4 <HAL_GPIO_Init+0x2f4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_GPIO_Init+0x1fe>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a47      	ldr	r2, [pc, #284]	; (80049c8 <HAL_GPIO_Init+0x2f8>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00d      	beq.n	80048ca <HAL_GPIO_Init+0x1fa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a46      	ldr	r2, [pc, #280]	; (80049cc <HAL_GPIO_Init+0x2fc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d007      	beq.n	80048c6 <HAL_GPIO_Init+0x1f6>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a45      	ldr	r2, [pc, #276]	; (80049d0 <HAL_GPIO_Init+0x300>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_GPIO_Init+0x1f2>
 80048be:	2304      	movs	r3, #4
 80048c0:	e008      	b.n	80048d4 <HAL_GPIO_Init+0x204>
 80048c2:	2307      	movs	r3, #7
 80048c4:	e006      	b.n	80048d4 <HAL_GPIO_Init+0x204>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e004      	b.n	80048d4 <HAL_GPIO_Init+0x204>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_Init+0x204>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x204>
 80048d2:	2300      	movs	r3, #0
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	f002 0203 	and.w	r2, r2, #3
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4093      	lsls	r3, r2
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_GPIO_Init+0x2ec>)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_GPIO_Init+0x304>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004916:	4a2f      	ldr	r2, [pc, #188]	; (80049d4 <HAL_GPIO_Init+0x304>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800491c:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_GPIO_Init+0x304>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004940:	4a24      	ldr	r2, [pc, #144]	; (80049d4 <HAL_GPIO_Init+0x304>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004946:	4b23      	ldr	r3, [pc, #140]	; (80049d4 <HAL_GPIO_Init+0x304>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496a:	4a1a      	ldr	r2, [pc, #104]	; (80049d4 <HAL_GPIO_Init+0x304>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004970:	4b18      	ldr	r3, [pc, #96]	; (80049d4 <HAL_GPIO_Init+0x304>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004994:	4a0f      	ldr	r2, [pc, #60]	; (80049d4 <HAL_GPIO_Init+0x304>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	f67f aea2 	bls.w	80046ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40020000 	.word	0x40020000
 80049c4:	40020400 	.word	0x40020400
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40013c00 	.word	0x40013c00

080049d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
 80049e4:	4613      	mov	r3, r2
 80049e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049e8:	787b      	ldrb	r3, [r7, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049f4:	e003      	b.n	80049fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	041a      	lsls	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	619a      	str	r2, [r3, #24]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b085      	sub	sp, #20
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	460b      	mov	r3, r1
 8004a14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a1c:	887a      	ldrh	r2, [r7, #2]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4013      	ands	r3, r2
 8004a22:	041a      	lsls	r2, r3, #16
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43d9      	mvns	r1, r3
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	400b      	ands	r3, r1
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e12b      	b.n	8004caa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fab2 	bl	8003fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2224      	movs	r2, #36	; 0x24
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f002 f99c 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4a81      	ldr	r2, [pc, #516]	; (8004cb4 <HAL_I2C_Init+0x274>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d807      	bhi.n	8004ac4 <HAL_I2C_Init+0x84>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a80      	ldr	r2, [pc, #512]	; (8004cb8 <HAL_I2C_Init+0x278>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e006      	b.n	8004ad2 <HAL_I2C_Init+0x92>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4a7d      	ldr	r2, [pc, #500]	; (8004cbc <HAL_I2C_Init+0x27c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	bf94      	ite	ls
 8004acc:	2301      	movls	r3, #1
 8004ace:	2300      	movhi	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e0e7      	b.n	8004caa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a78      	ldr	r2, [pc, #480]	; (8004cc0 <HAL_I2C_Init+0x280>)
 8004ade:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae2:	0c9b      	lsrs	r3, r3, #18
 8004ae4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4a6a      	ldr	r2, [pc, #424]	; (8004cb4 <HAL_I2C_Init+0x274>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d802      	bhi.n	8004b14 <HAL_I2C_Init+0xd4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	3301      	adds	r3, #1
 8004b12:	e009      	b.n	8004b28 <HAL_I2C_Init+0xe8>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	4a69      	ldr	r2, [pc, #420]	; (8004cc4 <HAL_I2C_Init+0x284>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	099b      	lsrs	r3, r3, #6
 8004b26:	3301      	adds	r3, #1
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	495c      	ldr	r1, [pc, #368]	; (8004cb4 <HAL_I2C_Init+0x274>)
 8004b44:	428b      	cmp	r3, r1
 8004b46:	d819      	bhi.n	8004b7c <HAL_I2C_Init+0x13c>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1e59      	subs	r1, r3, #1
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b56:	1c59      	adds	r1, r3, #1
 8004b58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b5c:	400b      	ands	r3, r1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_I2C_Init+0x138>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e59      	subs	r1, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	005b      	lsls	r3, r3, #1
 8004b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b76:	e051      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	e04f      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d111      	bne.n	8004ba8 <HAL_I2C_Init+0x168>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e58      	subs	r0, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e012      	b.n	8004bce <HAL_I2C_Init+0x18e>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1e58      	subs	r0, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	0099      	lsls	r1, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_I2C_Init+0x196>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e022      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10e      	bne.n	8004bfc <HAL_I2C_Init+0x1bc>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1e58      	subs	r0, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6859      	ldr	r1, [r3, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	440b      	add	r3, r1
 8004bec:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	e00f      	b.n	8004c1c <HAL_I2C_Init+0x1dc>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e58      	subs	r0, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	0099      	lsls	r1, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c12:	3301      	adds	r3, #1
 8004c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	6809      	ldr	r1, [r1, #0]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69da      	ldr	r2, [r3, #28]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6911      	ldr	r1, [r2, #16]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68d2      	ldr	r2, [r2, #12]
 8004c56:	4311      	orrs	r1, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695a      	ldr	r2, [r3, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f042 0201 	orr.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	000186a0 	.word	0x000186a0
 8004cb8:	001e847f 	.word	0x001e847f
 8004cbc:	003d08ff 	.word	0x003d08ff
 8004cc0:	431bde83 	.word	0x431bde83
 8004cc4:	10624dd3 	.word	0x10624dd3

08004cc8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af02      	add	r7, sp, #8
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	817b      	strh	r3, [r7, #10]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cdc:	f7ff fbe2 	bl	80044a4 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	f040 80e0 	bne.w	8004eb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2319      	movs	r3, #25
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	4970      	ldr	r1, [pc, #448]	; (8004ebc <HAL_I2C_Master_Transmit+0x1f4>)
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f001 fa24 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d06:	2302      	movs	r3, #2
 8004d08:	e0d3      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_I2C_Master_Transmit+0x50>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0cc      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x1ea>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d007      	beq.n	8004d3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2221      	movs	r2, #33	; 0x21
 8004d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2210      	movs	r2, #16
 8004d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	893a      	ldrh	r2, [r7, #8]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4a50      	ldr	r2, [pc, #320]	; (8004ec0 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d80:	8979      	ldrh	r1, [r7, #10]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	6a3a      	ldr	r2, [r7, #32]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 ff10 	bl	8005bac <I2C_MasterRequestWrite>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e08d      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d96:	2300      	movs	r3, #0
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004dac:	e066      	b.n	8004e7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6a39      	ldr	r1, [r7, #32]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f001 fa9e 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_I2C_Master_Transmit+0x188>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	6a39      	ldr	r1, [r7, #32]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f001 fa8e 	bl	8006376 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d107      	bne.n	8004e78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e01a      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d194      	bne.n	8004dae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00100002 	.word	0x00100002
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	817b      	strh	r3, [r7, #10]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ed8:	f7ff fae4 	bl	80044a4 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	f040 820b 	bne.w	8005302 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	2319      	movs	r3, #25
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	497c      	ldr	r1, [pc, #496]	; (80050e8 <HAL_I2C_Master_Receive+0x224>)
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f001 f926 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
 8004f04:	e1fe      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2C_Master_Receive+0x50>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e1f7      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d007      	beq.n	8004f3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2222      	movs	r2, #34	; 0x22
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2210      	movs	r2, #16
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	893a      	ldrh	r2, [r7, #8]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a5c      	ldr	r2, [pc, #368]	; (80050ec <HAL_I2C_Master_Receive+0x228>)
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f7c:	8979      	ldrh	r1, [r7, #10]
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fe94 	bl	8005cb0 <I2C_MasterRequestRead>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e1b8      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d113      	bne.n	8004fc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	623b      	str	r3, [r7, #32]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	623b      	str	r3, [r7, #32]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	e18c      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d11b      	bne.n	8005002 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	61fb      	str	r3, [r7, #28]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e16c      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	2b02      	cmp	r3, #2
 8005008:	d11b      	bne.n	8005042 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	e14c      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005050:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005068:	e138      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b03      	cmp	r3, #3
 8005070:	f200 80f1 	bhi.w	8005256 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f001 f9b9 	bl	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e139      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c2:	e10b      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d14e      	bne.n	800516a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2200      	movs	r2, #0
 80050d4:	4906      	ldr	r1, [pc, #24]	; (80050f0 <HAL_I2C_Master_Receive+0x22c>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f001 f836 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e10e      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
 80050e6:	bf00      	nop
 80050e8:	00100002 	.word	0x00100002
 80050ec:	ffff0000 	.word	0xffff0000
 80050f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005168:	e0b8      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005170:	2200      	movs	r2, #0
 8005172:	4966      	ldr	r1, [pc, #408]	; (800530c <HAL_I2C_Master_Receive+0x448>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 ffe7 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0bf      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2200      	movs	r2, #0
 80051ce:	494f      	ldr	r1, [pc, #316]	; (800530c <HAL_I2C_Master_Receive+0x448>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 ffb9 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e091      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005254:	e042      	b.n	80052dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f001 f8cc 	bl	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e04c      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d118      	bne.n	80052dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f47f aec2 	bne.w	800506a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	e000      	b.n	8005304 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005302:	2302      	movs	r3, #2
  }
}
 8005304:	4618      	mov	r0, r3
 8005306:	3728      	adds	r7, #40	; 0x28
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	00010004 	.word	0x00010004

08005310 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4603      	mov	r3, r0
 8005320:	817b      	strh	r3, [r7, #10]
 8005322:	460b      	mov	r3, r1
 8005324:	813b      	strh	r3, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800532a:	f7ff f8bb 	bl	80044a4 <HAL_GetTick>
 800532e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b20      	cmp	r3, #32
 800533a:	f040 80d9 	bne.w	80054f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	2319      	movs	r3, #25
 8005344:	2201      	movs	r2, #1
 8005346:	496d      	ldr	r1, [pc, #436]	; (80054fc <HAL_I2C_Mem_Write+0x1ec>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 fefd 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
 8005356:	e0cc      	b.n	80054f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_I2C_Mem_Write+0x56>
 8005362:	2302      	movs	r3, #2
 8005364:	e0c5      	b.n	80054f2 <HAL_I2C_Mem_Write+0x1e2>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d007      	beq.n	800538c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2221      	movs	r2, #33	; 0x21
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2240      	movs	r2, #64	; 0x40
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a3a      	ldr	r2, [r7, #32]
 80053b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80053bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4a4d      	ldr	r2, [pc, #308]	; (8005500 <HAL_I2C_Mem_Write+0x1f0>)
 80053cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80053ce:	88f8      	ldrh	r0, [r7, #6]
 80053d0:	893a      	ldrh	r2, [r7, #8]
 80053d2:	8979      	ldrh	r1, [r7, #10]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	4603      	mov	r3, r0
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 fd34 	bl	8005e4c <I2C_RequestMemoryWrite>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d052      	beq.n	8005490 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e081      	b.n	80054f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 ff7e 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00d      	beq.n	800541a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	2b04      	cmp	r3, #4
 8005404:	d107      	bne.n	8005416 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005414:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e06b      	b.n	80054f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d11b      	bne.n	8005490 <HAL_I2C_Mem_Write+0x180>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545c:	2b00      	cmp	r3, #0
 800545e:	d017      	beq.n	8005490 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	781a      	ldrb	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1aa      	bne.n	80053ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 ff6a 	bl	8006376 <I2C_WaitOnBTFFlagUntilTimeout>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00d      	beq.n	80054c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d107      	bne.n	80054c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e016      	b.n	80054f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	e000      	b.n	80054f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	00100002 	.word	0x00100002
 8005500:	ffff0000 	.word	0xffff0000

08005504 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af02      	add	r7, sp, #8
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	4608      	mov	r0, r1
 800550e:	4611      	mov	r1, r2
 8005510:	461a      	mov	r2, r3
 8005512:	4603      	mov	r3, r0
 8005514:	817b      	strh	r3, [r7, #10]
 8005516:	460b      	mov	r3, r1
 8005518:	813b      	strh	r3, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800551e:	f7fe ffc1 	bl	80044a4 <HAL_GetTick>
 8005522:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	f040 8208 	bne.w	8005942 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	2319      	movs	r3, #25
 8005538:	2201      	movs	r2, #1
 800553a:	497b      	ldr	r1, [pc, #492]	; (8005728 <HAL_I2C_Mem_Read+0x224>)
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 fe03 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
 800554a:	e1fb      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_I2C_Mem_Read+0x56>
 8005556:	2302      	movs	r3, #2
 8005558:	e1f4      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d007      	beq.n	8005580 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2222      	movs	r2, #34	; 0x22
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2240      	movs	r2, #64	; 0x40
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80055b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4a5b      	ldr	r2, [pc, #364]	; (800572c <HAL_I2C_Mem_Read+0x228>)
 80055c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055c2:	88f8      	ldrh	r0, [r7, #6]
 80055c4:	893a      	ldrh	r2, [r7, #8]
 80055c6:	8979      	ldrh	r1, [r7, #10]
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	4603      	mov	r3, r0
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fcd0 	bl	8005f78 <I2C_RequestMemoryRead>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e1b0      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d113      	bne.n	8005612 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	623b      	str	r3, [r7, #32]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	623b      	str	r3, [r7, #32]
 80055fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	601a      	str	r2, [r3, #0]
 8005610:	e184      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005616:	2b01      	cmp	r3, #1
 8005618:	d11b      	bne.n	8005652 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005628:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	61fb      	str	r3, [r7, #28]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e164      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005656:	2b02      	cmp	r3, #2
 8005658:	d11b      	bne.n	8005692 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005678:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	61bb      	str	r3, [r7, #24]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	e144      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	617b      	str	r3, [r7, #20]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056a8:	e138      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	f200 80f1 	bhi.w	8005896 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d123      	bne.n	8005704 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fe99 	bl	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e139      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056ec:	3b01      	subs	r3, #1
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005702:	e10b      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005708:	2b02      	cmp	r3, #2
 800570a:	d14e      	bne.n	80057aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005712:	2200      	movs	r2, #0
 8005714:	4906      	ldr	r1, [pc, #24]	; (8005730 <HAL_I2C_Mem_Read+0x22c>)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fd16 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e10e      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
 8005726:	bf00      	nop
 8005728:	00100002 	.word	0x00100002
 800572c:	ffff0000 	.word	0xffff0000
 8005730:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005742:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057a8:	e0b8      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2200      	movs	r2, #0
 80057b2:	4966      	ldr	r1, [pc, #408]	; (800594c <HAL_I2C_Mem_Read+0x448>)
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fcc7 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d001      	beq.n	80057c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0bf      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	1c5a      	adds	r2, r3, #1
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2200      	movs	r2, #0
 800580e:	494f      	ldr	r1, [pc, #316]	; (800594c <HAL_I2C_Mem_Read+0x448>)
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 fc99 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e091      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	691a      	ldr	r2, [r3, #16]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005894:	e042      	b.n	800591c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005898:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f000 fdac 	bl	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e04c      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d118      	bne.n	800591c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005920:	2b00      	cmp	r3, #0
 8005922:	f47f aec2 	bne.w	80056aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3728      	adds	r7, #40	; 0x28
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	00010004 	.word	0x00010004

08005950 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	460b      	mov	r3, r1
 800595e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005960:	f7fe fda0 	bl	80044a4 <HAL_GetTick>
 8005964:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005966:	2300      	movs	r3, #0
 8005968:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b20      	cmp	r3, #32
 8005974:	f040 8111 	bne.w	8005b9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	2319      	movs	r3, #25
 800597e:	2201      	movs	r2, #1
 8005980:	4988      	ldr	r1, [pc, #544]	; (8005ba4 <HAL_I2C_IsDeviceReady+0x254>)
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fbe0 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800598e:	2302      	movs	r3, #2
 8005990:	e104      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_I2C_IsDeviceReady+0x50>
 800599c:	2302      	movs	r3, #2
 800599e:	e0fd      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d007      	beq.n	80059c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2224      	movs	r2, #36	; 0x24
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a70      	ldr	r2, [pc, #448]	; (8005ba8 <HAL_I2C_IsDeviceReady+0x258>)
 80059e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fb9e 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00d      	beq.n	8005a2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a20:	d103      	bne.n	8005a2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0b6      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005a3e:	f7fe fd31 	bl	80044a4 <HAL_GetTick>
 8005a42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	bf0c      	ite	eq
 8005a52:	2301      	moveq	r3, #1
 8005a54:	2300      	movne	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005a72:	e025      	b.n	8005ac0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a74:	f7fe fd16 	bl	80044a4 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d302      	bcc.n	8005a8a <HAL_I2C_IsDeviceReady+0x13a>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	22a0      	movs	r2, #160	; 0xa0
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2ba0      	cmp	r3, #160	; 0xa0
 8005aca:	d005      	beq.n	8005ad8 <HAL_I2C_IsDeviceReady+0x188>
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <HAL_I2C_IsDeviceReady+0x188>
 8005ad2:	7dbb      	ldrb	r3, [r7, #22]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0cd      	beq.n	8005a74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d129      	bne.n	8005b42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005afc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	2319      	movs	r3, #25
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4921      	ldr	r1, [pc, #132]	; (8005ba4 <HAL_I2C_IsDeviceReady+0x254>)
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fb12 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e036      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e02c      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	2319      	movs	r3, #25
 8005b62:	2201      	movs	r2, #1
 8005b64:	490f      	ldr	r1, [pc, #60]	; (8005ba4 <HAL_I2C_IsDeviceReady+0x254>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 faee 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e012      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	f4ff af32 	bcc.w	80059ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005b9a:	2302      	movs	r3, #2
  }
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3720      	adds	r7, #32
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	00100002 	.word	0x00100002
 8005ba8:	ffff0000 	.word	0xffff0000

08005bac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d006      	beq.n	8005bd6 <I2C_MasterRequestWrite+0x2a>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d003      	beq.n	8005bd6 <I2C_MasterRequestWrite+0x2a>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bd4:	d108      	bne.n	8005be8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e00b      	b.n	8005c00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bec:	2b12      	cmp	r3, #18
 8005bee:	d107      	bne.n	8005c00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fa9b 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00d      	beq.n	8005c34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c26:	d103      	bne.n	8005c30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e035      	b.n	8005ca0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c3c:	d108      	bne.n	8005c50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c3e:	897b      	ldrh	r3, [r7, #10]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c4c:	611a      	str	r2, [r3, #16]
 8005c4e:	e01b      	b.n	8005c88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c50:	897b      	ldrh	r3, [r7, #10]
 8005c52:	11db      	asrs	r3, r3, #7
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 0306 	and.w	r3, r3, #6
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	f063 030f 	orn	r3, r3, #15
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	490e      	ldr	r1, [pc, #56]	; (8005ca8 <I2C_MasterRequestWrite+0xfc>)
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fac1 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e010      	b.n	8005ca0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c7e:	897b      	ldrh	r3, [r7, #10]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	4907      	ldr	r1, [pc, #28]	; (8005cac <I2C_MasterRequestWrite+0x100>)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fab1 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	00010008 	.word	0x00010008
 8005cac:	00010002 	.word	0x00010002

08005cb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	607a      	str	r2, [r7, #4]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d006      	beq.n	8005cea <I2C_MasterRequestRead+0x3a>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d003      	beq.n	8005cea <I2C_MasterRequestRead+0x3a>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ce8:	d108      	bne.n	8005cfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e00b      	b.n	8005d14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	2b11      	cmp	r3, #17
 8005d02:	d107      	bne.n	8005d14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fa11 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00d      	beq.n	8005d48 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	d103      	bne.n	8005d44 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e079      	b.n	8005e3c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d50:	d108      	bne.n	8005d64 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d52:	897b      	ldrh	r3, [r7, #10]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	611a      	str	r2, [r3, #16]
 8005d62:	e05f      	b.n	8005e24 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d64:	897b      	ldrh	r3, [r7, #10]
 8005d66:	11db      	asrs	r3, r3, #7
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	f003 0306 	and.w	r3, r3, #6
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f063 030f 	orn	r3, r3, #15
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4930      	ldr	r1, [pc, #192]	; (8005e44 <I2C_MasterRequestRead+0x194>)
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 fa37 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e054      	b.n	8005e3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4929      	ldr	r1, [pc, #164]	; (8005e48 <I2C_MasterRequestRead+0x198>)
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fa27 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e044      	b.n	8005e3c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f9af 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dfe:	d103      	bne.n	8005e08 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e017      	b.n	8005e3c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e0c:	897b      	ldrh	r3, [r7, #10]
 8005e0e:	11db      	asrs	r3, r3, #7
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	f003 0306 	and.w	r3, r3, #6
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	f063 030e 	orn	r3, r3, #14
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4907      	ldr	r1, [pc, #28]	; (8005e48 <I2C_MasterRequestRead+0x198>)
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f9e3 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d001      	beq.n	8005e3a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e000      	b.n	8005e3c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	00010008 	.word	0x00010008
 8005e48:	00010002 	.word	0x00010002

08005e4c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	4608      	mov	r0, r1
 8005e56:	4611      	mov	r1, r2
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	817b      	strh	r3, [r7, #10]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	813b      	strh	r3, [r7, #8]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f960 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e9c:	d103      	bne.n	8005ea6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e05f      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	6a3a      	ldr	r2, [r7, #32]
 8005ebe:	492d      	ldr	r1, [pc, #180]	; (8005f74 <I2C_RequestMemoryWrite+0x128>)
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f000 f998 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e04c      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee8:	6a39      	ldr	r1, [r7, #32]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 fa02 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00d      	beq.n	8005f12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b04      	cmp	r3, #4
 8005efc:	d107      	bne.n	8005f0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02b      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d105      	bne.n	8005f24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f18:	893b      	ldrh	r3, [r7, #8]
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	e021      	b.n	8005f68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f24:	893b      	ldrh	r3, [r7, #8]
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f34:	6a39      	ldr	r1, [r7, #32]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f9dc 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d107      	bne.n	8005f5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e005      	b.n	8005f6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f5e:	893b      	ldrh	r3, [r7, #8]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	00010002 	.word	0x00010002

08005f78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b088      	sub	sp, #32
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	813b      	strh	r3, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 f8c2 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fd8:	d103      	bne.n	8005fe2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e0aa      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fe6:	897b      	ldrh	r3, [r7, #10]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	461a      	mov	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ff4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	4952      	ldr	r1, [pc, #328]	; (8006144 <I2C_RequestMemoryRead+0x1cc>)
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 f8fa 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e097      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800600c:	2300      	movs	r3, #0
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	6a39      	ldr	r1, [r7, #32]
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f964 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00d      	beq.n	800604e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	2b04      	cmp	r3, #4
 8006038:	d107      	bne.n	800604a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006048:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e076      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d105      	bne.n	8006060 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006054:	893b      	ldrh	r3, [r7, #8]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	611a      	str	r2, [r3, #16]
 800605e:	e021      	b.n	80060a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006060:	893b      	ldrh	r3, [r7, #8]
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	b29b      	uxth	r3, r3
 8006066:	b2da      	uxtb	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006070:	6a39      	ldr	r1, [r7, #32]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f93e 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00d      	beq.n	800609a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	2b04      	cmp	r3, #4
 8006084:	d107      	bne.n	8006096 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006094:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e050      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800609a:	893b      	ldrh	r3, [r7, #8]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a6:	6a39      	ldr	r1, [r7, #32]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 f923 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00d      	beq.n	80060d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d107      	bne.n	80060cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e035      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f82b 	bl	8006148 <I2C_WaitOnFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006106:	d103      	bne.n	8006110 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e013      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006114:	897b      	ldrh	r3, [r7, #10]
 8006116:	b2db      	uxtb	r3, r3
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	b2da      	uxtb	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	6a3a      	ldr	r2, [r7, #32]
 8006128:	4906      	ldr	r1, [pc, #24]	; (8006144 <I2C_RequestMemoryRead+0x1cc>)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f863 	bl	80061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3718      	adds	r7, #24
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	00010002 	.word	0x00010002

08006148 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006158:	e025      	b.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d021      	beq.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006162:	f7fe f99f 	bl	80044a4 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d302      	bcc.n	8006178 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d116      	bne.n	80061a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e023      	b.n	80061ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	0c1b      	lsrs	r3, r3, #16
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d10d      	bne.n	80061cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	43da      	mvns	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bf0c      	ite	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	2300      	movne	r3, #0
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
 80061ca:	e00c      	b.n	80061e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	43da      	mvns	r2, r3
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	4013      	ands	r3, r2
 80061d8:	b29b      	uxth	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	79fb      	ldrb	r3, [r7, #7]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d0b6      	beq.n	800615a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	60f8      	str	r0, [r7, #12]
 80061fe:	60b9      	str	r1, [r7, #8]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006204:	e051      	b.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	d123      	bne.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006224:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800622e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f043 0204 	orr.w	r2, r3, #4
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e046      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d021      	beq.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006266:	f7fe f91d 	bl	80044a4 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	429a      	cmp	r2, r3
 8006274:	d302      	bcc.n	800627c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d116      	bne.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2220      	movs	r2, #32
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006296:	f043 0220 	orr.w	r2, r3, #32
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e020      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10c      	bne.n	80062ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	43da      	mvns	r2, r3
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	4013      	ands	r3, r2
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	bf14      	ite	ne
 80062c6:	2301      	movne	r3, #1
 80062c8:	2300      	moveq	r3, #0
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	e00b      	b.n	80062e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	43da      	mvns	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4013      	ands	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	bf14      	ite	ne
 80062e0:	2301      	movne	r3, #1
 80062e2:	2300      	moveq	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d18d      	bne.n	8006206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006300:	e02d      	b.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f8ce 	bl	80064a4 <I2C_IsAcknowledgeFailed>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02d      	b.n	800636e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d021      	beq.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fe f8c3 	bl	80044a4 <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d116      	bne.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	f043 0220 	orr.w	r2, r3, #32
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e007      	b.n	800636e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b80      	cmp	r3, #128	; 0x80
 800636a:	d1ca      	bne.n	8006302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006382:	e02d      	b.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 f88d 	bl	80064a4 <I2C_IsAcknowledgeFailed>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e02d      	b.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639a:	d021      	beq.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639c:	f7fe f882 	bl	80044a4 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d116      	bne.n	80063e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	f043 0220 	orr.w	r2, r3, #32
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e007      	b.n	80063f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	f003 0304 	and.w	r3, r3, #4
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d1ca      	bne.n	8006384 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006404:	e042      	b.n	800648c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b10      	cmp	r3, #16
 8006412:	d119      	bne.n	8006448 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f06f 0210 	mvn.w	r2, #16
 800641c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e029      	b.n	800649c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006448:	f7fe f82c 	bl	80044a4 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	429a      	cmp	r2, r3
 8006456:	d302      	bcc.n	800645e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d116      	bne.n	800648c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	e007      	b.n	800649c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b40      	cmp	r3, #64	; 0x40
 8006498:	d1b5      	bne.n	8006406 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ba:	d11b      	bne.n	80064f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	f043 0204 	orr.w	r2, r3, #4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
	...

08006504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e267      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d075      	beq.n	800660e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006522:	4b88      	ldr	r3, [pc, #544]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f003 030c 	and.w	r3, r3, #12
 800652a:	2b04      	cmp	r3, #4
 800652c:	d00c      	beq.n	8006548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800652e:	4b85      	ldr	r3, [pc, #532]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006536:	2b08      	cmp	r3, #8
 8006538:	d112      	bne.n	8006560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653a:	4b82      	ldr	r3, [pc, #520]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006546:	d10b      	bne.n	8006560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006548:	4b7e      	ldr	r3, [pc, #504]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05b      	beq.n	800660c <HAL_RCC_OscConfig+0x108>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d157      	bne.n	800660c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e242      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	d106      	bne.n	8006578 <HAL_RCC_OscConfig+0x74>
 800656a:	4b76      	ldr	r3, [pc, #472]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a75      	ldr	r2, [pc, #468]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	e01d      	b.n	80065b4 <HAL_RCC_OscConfig+0xb0>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006580:	d10c      	bne.n	800659c <HAL_RCC_OscConfig+0x98>
 8006582:	4b70      	ldr	r3, [pc, #448]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a6f      	ldr	r2, [pc, #444]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b6d      	ldr	r3, [pc, #436]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a6c      	ldr	r2, [pc, #432]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e00b      	b.n	80065b4 <HAL_RCC_OscConfig+0xb0>
 800659c:	4b69      	ldr	r3, [pc, #420]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a68      	ldr	r2, [pc, #416]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065a6:	6013      	str	r3, [r2, #0]
 80065a8:	4b66      	ldr	r3, [pc, #408]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a65      	ldr	r2, [pc, #404]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d013      	beq.n	80065e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fd ff72 	bl	80044a4 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065c4:	f7fd ff6e 	bl	80044a4 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b64      	cmp	r3, #100	; 0x64
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e207      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065d6:	4b5b      	ldr	r3, [pc, #364]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f0      	beq.n	80065c4 <HAL_RCC_OscConfig+0xc0>
 80065e2:	e014      	b.n	800660e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065e4:	f7fd ff5e 	bl	80044a4 <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065ec:	f7fd ff5a 	bl	80044a4 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e1f3      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065fe:	4b51      	ldr	r3, [pc, #324]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1f0      	bne.n	80065ec <HAL_RCC_OscConfig+0xe8>
 800660a:	e000      	b.n	800660e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800660c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d063      	beq.n	80066e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800661a:	4b4a      	ldr	r3, [pc, #296]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f003 030c 	and.w	r3, r3, #12
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00b      	beq.n	800663e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006626:	4b47      	ldr	r3, [pc, #284]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800662e:	2b08      	cmp	r3, #8
 8006630:	d11c      	bne.n	800666c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006632:	4b44      	ldr	r3, [pc, #272]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d116      	bne.n	800666c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800663e:	4b41      	ldr	r3, [pc, #260]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <HAL_RCC_OscConfig+0x152>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d001      	beq.n	8006656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e1c7      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006656:	4b3b      	ldr	r3, [pc, #236]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4937      	ldr	r1, [pc, #220]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006666:	4313      	orrs	r3, r2
 8006668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800666a:	e03a      	b.n	80066e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d020      	beq.n	80066b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006674:	4b34      	ldr	r3, [pc, #208]	; (8006748 <HAL_RCC_OscConfig+0x244>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800667a:	f7fd ff13 	bl	80044a4 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006682:	f7fd ff0f 	bl	80044a4 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e1a8      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006694:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a0:	4b28      	ldr	r3, [pc, #160]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	00db      	lsls	r3, r3, #3
 80066ae:	4925      	ldr	r1, [pc, #148]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]
 80066b4:	e015      	b.n	80066e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066b6:	4b24      	ldr	r3, [pc, #144]	; (8006748 <HAL_RCC_OscConfig+0x244>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fd fef2 	bl	80044a4 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c4:	f7fd feee 	bl	80044a4 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e187      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066d6:	4b1b      	ldr	r3, [pc, #108]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d036      	beq.n	800675c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d016      	beq.n	8006724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <HAL_RCC_OscConfig+0x248>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fd fed2 	bl	80044a4 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006704:	f7fd fece 	bl	80044a4 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e167      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006716:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <HAL_RCC_OscConfig+0x240>)
 8006718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0f0      	beq.n	8006704 <HAL_RCC_OscConfig+0x200>
 8006722:	e01b      	b.n	800675c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006724:	4b09      	ldr	r3, [pc, #36]	; (800674c <HAL_RCC_OscConfig+0x248>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800672a:	f7fd febb 	bl	80044a4 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006730:	e00e      	b.n	8006750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006732:	f7fd feb7 	bl	80044a4 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d907      	bls.n	8006750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e150      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
 8006744:	40023800 	.word	0x40023800
 8006748:	42470000 	.word	0x42470000
 800674c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006750:	4b88      	ldr	r3, [pc, #544]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ea      	bne.n	8006732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8097 	beq.w	8006898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676e:	4b81      	ldr	r3, [pc, #516]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10f      	bne.n	800679a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800677a:	2300      	movs	r3, #0
 800677c:	60bb      	str	r3, [r7, #8]
 800677e:	4b7d      	ldr	r3, [pc, #500]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	4a7c      	ldr	r2, [pc, #496]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006788:	6413      	str	r3, [r2, #64]	; 0x40
 800678a:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006792:	60bb      	str	r3, [r7, #8]
 8006794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800679a:	4b77      	ldr	r3, [pc, #476]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d118      	bne.n	80067d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a6:	4b74      	ldr	r3, [pc, #464]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a73      	ldr	r2, [pc, #460]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 80067ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067b2:	f7fd fe77 	bl	80044a4 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ba:	f7fd fe73 	bl	80044a4 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e10c      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067cc:	4b6a      	ldr	r3, [pc, #424]	; (8006978 <HAL_RCC_OscConfig+0x474>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d106      	bne.n	80067ee <HAL_RCC_OscConfig+0x2ea>
 80067e0:	4b64      	ldr	r3, [pc, #400]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e4:	4a63      	ldr	r2, [pc, #396]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	6713      	str	r3, [r2, #112]	; 0x70
 80067ec:	e01c      	b.n	8006828 <HAL_RCC_OscConfig+0x324>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	2b05      	cmp	r3, #5
 80067f4:	d10c      	bne.n	8006810 <HAL_RCC_OscConfig+0x30c>
 80067f6:	4b5f      	ldr	r3, [pc, #380]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	4a5e      	ldr	r2, [pc, #376]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80067fc:	f043 0304 	orr.w	r3, r3, #4
 8006800:	6713      	str	r3, [r2, #112]	; 0x70
 8006802:	4b5c      	ldr	r3, [pc, #368]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006806:	4a5b      	ldr	r2, [pc, #364]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	6713      	str	r3, [r2, #112]	; 0x70
 800680e:	e00b      	b.n	8006828 <HAL_RCC_OscConfig+0x324>
 8006810:	4b58      	ldr	r3, [pc, #352]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a57      	ldr	r2, [pc, #348]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
 800681c:	4b55      	ldr	r3, [pc, #340]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006820:	4a54      	ldr	r2, [pc, #336]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006822:	f023 0304 	bic.w	r3, r3, #4
 8006826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d015      	beq.n	800685c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006830:	f7fd fe38 	bl	80044a4 <HAL_GetTick>
 8006834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006836:	e00a      	b.n	800684e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006838:	f7fd fe34 	bl	80044a4 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	; 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e0cb      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800684e:	4b49      	ldr	r3, [pc, #292]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0ee      	beq.n	8006838 <HAL_RCC_OscConfig+0x334>
 800685a:	e014      	b.n	8006886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800685c:	f7fd fe22 	bl	80044a4 <HAL_GetTick>
 8006860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006862:	e00a      	b.n	800687a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006864:	f7fd fe1e 	bl	80044a4 <HAL_GetTick>
 8006868:	4602      	mov	r2, r0
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006872:	4293      	cmp	r3, r2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e0b5      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800687a:	4b3e      	ldr	r3, [pc, #248]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1ee      	bne.n	8006864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b39      	ldr	r3, [pc, #228]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	4a38      	ldr	r2, [pc, #224]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80a1 	beq.w	80069e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068a2:	4b34      	ldr	r3, [pc, #208]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d05c      	beq.n	8006968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d141      	bne.n	800693a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068b6:	4b31      	ldr	r3, [pc, #196]	; (800697c <HAL_RCC_OscConfig+0x478>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068bc:	f7fd fdf2 	bl	80044a4 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c4:	f7fd fdee 	bl	80044a4 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e087      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80068d6:	4b27      	ldr	r3, [pc, #156]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1f0      	bne.n	80068c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69da      	ldr	r2, [r3, #28]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	019b      	lsls	r3, r3, #6
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	3b01      	subs	r3, #1
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	061b      	lsls	r3, r3, #24
 8006906:	491b      	ldr	r1, [pc, #108]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 8006908:	4313      	orrs	r3, r2
 800690a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800690c:	4b1b      	ldr	r3, [pc, #108]	; (800697c <HAL_RCC_OscConfig+0x478>)
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006912:	f7fd fdc7 	bl	80044a4 <HAL_GetTick>
 8006916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006918:	e008      	b.n	800692c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800691a:	f7fd fdc3 	bl	80044a4 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e05c      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800692c:	4b11      	ldr	r3, [pc, #68]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f0      	beq.n	800691a <HAL_RCC_OscConfig+0x416>
 8006938:	e054      	b.n	80069e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_RCC_OscConfig+0x478>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006940:	f7fd fdb0 	bl	80044a4 <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006946:	e008      	b.n	800695a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006948:	f7fd fdac 	bl	80044a4 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e045      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800695a:	4b06      	ldr	r3, [pc, #24]	; (8006974 <HAL_RCC_OscConfig+0x470>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f0      	bne.n	8006948 <HAL_RCC_OscConfig+0x444>
 8006966:	e03d      	b.n	80069e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d107      	bne.n	8006980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e038      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
 8006974:	40023800 	.word	0x40023800
 8006978:	40007000 	.word	0x40007000
 800697c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006980:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <HAL_RCC_OscConfig+0x4ec>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d028      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006998:	429a      	cmp	r2, r3
 800699a:	d121      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d11a      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069b0:	4013      	ands	r3, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d111      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	085b      	lsrs	r3, r3, #1
 80069c8:	3b01      	subs	r3, #1
 80069ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	40023800 	.word	0x40023800

080069f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0cc      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a08:	4b68      	ldr	r3, [pc, #416]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d90c      	bls.n	8006a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a16:	4b65      	ldr	r3, [pc, #404]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a1e:	4b63      	ldr	r3, [pc, #396]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0307 	and.w	r3, r3, #7
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d001      	beq.n	8006a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0b8      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d020      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a48:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4a58      	ldr	r2, [pc, #352]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0308 	and.w	r3, r3, #8
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a60:	4b53      	ldr	r3, [pc, #332]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	4a52      	ldr	r2, [pc, #328]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a6c:	4b50      	ldr	r3, [pc, #320]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	494d      	ldr	r1, [pc, #308]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d044      	beq.n	8006b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d119      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e07f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d003      	beq.n	8006ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab2:	4b3f      	ldr	r3, [pc, #252]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e06f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ac2:	4b3b      	ldr	r3, [pc, #236]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e067      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ad2:	4b37      	ldr	r3, [pc, #220]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f023 0203 	bic.w	r2, r3, #3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4934      	ldr	r1, [pc, #208]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ae4:	f7fd fcde 	bl	80044a4 <HAL_GetTick>
 8006ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aea:	e00a      	b.n	8006b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aec:	f7fd fcda 	bl	80044a4 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e04f      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b02:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 020c 	and.w	r2, r3, #12
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d1eb      	bne.n	8006aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b14:	4b25      	ldr	r3, [pc, #148]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d20c      	bcs.n	8006b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b22:	4b22      	ldr	r3, [pc, #136]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b20      	ldr	r3, [pc, #128]	; (8006bac <HAL_RCC_ClockConfig+0x1b8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e032      	b.n	8006ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b48:	4b19      	ldr	r3, [pc, #100]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	4916      	ldr	r1, [pc, #88]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0308 	and.w	r3, r3, #8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b66:	4b12      	ldr	r3, [pc, #72]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	00db      	lsls	r3, r3, #3
 8006b74:	490e      	ldr	r1, [pc, #56]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b7a:	f000 f821 	bl	8006bc0 <HAL_RCC_GetSysClockFreq>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	091b      	lsrs	r3, r3, #4
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	490a      	ldr	r1, [pc, #40]	; (8006bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b8c:	5ccb      	ldrb	r3, [r1, r3]
 8006b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b96:	4b09      	ldr	r3, [pc, #36]	; (8006bbc <HAL_RCC_ClockConfig+0x1c8>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fd fc3e 	bl	800441c <HAL_InitTick>

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023c00 	.word	0x40023c00
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	0800ad9c 	.word	0x0800ad9c
 8006bb8:	20000008 	.word	0x20000008
 8006bbc:	2000000c 	.word	0x2000000c

08006bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bc4:	b094      	sub	sp, #80	; 0x50
 8006bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	647b      	str	r3, [r7, #68]	; 0x44
 8006bcc:	2300      	movs	r3, #0
 8006bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bd8:	4b79      	ldr	r3, [pc, #484]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d00d      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x40>
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	f200 80e1 	bhi.w	8006dac <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d003      	beq.n	8006bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8006bf2:	e0db      	b.n	8006dac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006bf4:	4b73      	ldr	r3, [pc, #460]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bf6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006bf8:	e0db      	b.n	8006db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006bfa:	4b72      	ldr	r3, [pc, #456]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bfe:	e0d8      	b.n	8006db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c00:	4b6f      	ldr	r3, [pc, #444]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c0a:	4b6d      	ldr	r3, [pc, #436]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d063      	beq.n	8006cde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c16:	4b6a      	ldr	r3, [pc, #424]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	099b      	lsrs	r3, r3, #6
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c28:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c32:	4622      	mov	r2, r4
 8006c34:	462b      	mov	r3, r5
 8006c36:	f04f 0000 	mov.w	r0, #0
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	0159      	lsls	r1, r3, #5
 8006c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c44:	0150      	lsls	r0, r2, #5
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4621      	mov	r1, r4
 8006c4c:	1a51      	subs	r1, r2, r1
 8006c4e:	6139      	str	r1, [r7, #16]
 8006c50:	4629      	mov	r1, r5
 8006c52:	eb63 0301 	sbc.w	r3, r3, r1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c64:	4659      	mov	r1, fp
 8006c66:	018b      	lsls	r3, r1, #6
 8006c68:	4651      	mov	r1, sl
 8006c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006c6e:	4651      	mov	r1, sl
 8006c70:	018a      	lsls	r2, r1, #6
 8006c72:	4651      	mov	r1, sl
 8006c74:	ebb2 0801 	subs.w	r8, r2, r1
 8006c78:	4659      	mov	r1, fp
 8006c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8006c7e:	f04f 0200 	mov.w	r2, #0
 8006c82:	f04f 0300 	mov.w	r3, #0
 8006c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c92:	4690      	mov	r8, r2
 8006c94:	4699      	mov	r9, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	eb18 0303 	adds.w	r3, r8, r3
 8006c9c:	60bb      	str	r3, [r7, #8]
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	eb49 0303 	adc.w	r3, r9, r3
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	028b      	lsls	r3, r1, #10
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	028a      	lsls	r2, r1, #10
 8006cc0:	4610      	mov	r0, r2
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ccc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006cd0:	f7f9 ffc2 	bl	8000c58 <__aeabi_uldivmod>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4613      	mov	r3, r2
 8006cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cdc:	e058      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cde:	4b38      	ldr	r3, [pc, #224]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	099b      	lsrs	r3, r3, #6
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	4611      	mov	r1, r2
 8006cea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006cee:	623b      	str	r3, [r7, #32]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	f04f 0000 	mov.w	r0, #0
 8006d00:	f04f 0100 	mov.w	r1, #0
 8006d04:	0159      	lsls	r1, r3, #5
 8006d06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d0a:	0150      	lsls	r0, r2, #5
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4641      	mov	r1, r8
 8006d12:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d16:	4649      	mov	r1, r9
 8006d18:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d30:	ebb2 040a 	subs.w	r4, r2, sl
 8006d34:	eb63 050b 	sbc.w	r5, r3, fp
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	00eb      	lsls	r3, r5, #3
 8006d42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d46:	00e2      	lsls	r2, r4, #3
 8006d48:	4614      	mov	r4, r2
 8006d4a:	461d      	mov	r5, r3
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	18e3      	adds	r3, r4, r3
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	464b      	mov	r3, r9
 8006d54:	eb45 0303 	adc.w	r3, r5, r3
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	f04f 0200 	mov.w	r2, #0
 8006d5e:	f04f 0300 	mov.w	r3, #0
 8006d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d66:	4629      	mov	r1, r5
 8006d68:	028b      	lsls	r3, r1, #10
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d70:	4621      	mov	r1, r4
 8006d72:	028a      	lsls	r2, r1, #10
 8006d74:	4610      	mov	r0, r2
 8006d76:	4619      	mov	r1, r3
 8006d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	61fa      	str	r2, [r7, #28]
 8006d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d84:	f7f9 ff68 	bl	8000c58 <__aeabi_uldivmod>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4613      	mov	r3, r2
 8006d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006d90:	4b0b      	ldr	r3, [pc, #44]	; (8006dc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	0c1b      	lsrs	r3, r3, #16
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006da0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006daa:	e002      	b.n	8006db2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3750      	adds	r7, #80	; 0x50
 8006db8:	46bd      	mov	sp, r7
 8006dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	00f42400 	.word	0x00f42400

08006dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	; (8006ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8006dce:	681b      	ldr	r3, [r3, #0]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	20000008 	.word	0x20000008

08006de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006de4:	f7ff fff0 	bl	8006dc8 <HAL_RCC_GetHCLKFreq>
 8006de8:	4602      	mov	r2, r0
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	0a9b      	lsrs	r3, r3, #10
 8006df0:	f003 0307 	and.w	r3, r3, #7
 8006df4:	4903      	ldr	r1, [pc, #12]	; (8006e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006df6:	5ccb      	ldrb	r3, [r1, r3]
 8006df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40023800 	.word	0x40023800
 8006e04:	0800adac 	.word	0x0800adac

08006e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e0c:	f7ff ffdc 	bl	8006dc8 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	0b5b      	lsrs	r3, r3, #13
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4903      	ldr	r1, [pc, #12]	; (8006e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	0800adac 	.word	0x0800adac

08006e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e07b      	b.n	8006f3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d108      	bne.n	8006e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d009      	beq.n	8006e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	61da      	str	r2, [r3, #28]
 8006e5a:	e005      	b.n	8006e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fd f8ec 	bl	8004060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eec:	ea42 0103 	orr.w	r1, r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	f003 0104 	and.w	r1, r3, #4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	f003 0210 	and.w	r2, r3, #16
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e03f      	b.n	8006fd4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d106      	bne.n	8006f6e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7fd f8c1 	bl	80040f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2224      	movs	r2, #36	; 0x24
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68da      	ldr	r2, [r3, #12]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f928 	bl	80071dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691a      	ldr	r2, [r3, #16]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695a      	ldr	r2, [r3, #20]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006faa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08a      	sub	sp, #40	; 0x28
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d17c      	bne.n	80070f6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_UART_Transmit+0x2c>
 8007002:	88fb      	ldrh	r3, [r7, #6]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e075      	b.n	80070f8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007012:	2b01      	cmp	r3, #1
 8007014:	d101      	bne.n	800701a <HAL_UART_Transmit+0x3e>
 8007016:	2302      	movs	r3, #2
 8007018:	e06e      	b.n	80070f8 <HAL_UART_Transmit+0x11c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2221      	movs	r2, #33	; 0x21
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007030:	f7fd fa38 	bl	80044a4 <HAL_GetTick>
 8007034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	88fa      	ldrh	r2, [r7, #6]
 800703a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704a:	d108      	bne.n	800705e <HAL_UART_Transmit+0x82>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	e003      	b.n	8007066 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800706e:	e02a      	b.n	80070c6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2200      	movs	r2, #0
 8007078:	2180      	movs	r1, #128	; 0x80
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 f840 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e036      	b.n	80070f8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800709e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	3302      	adds	r3, #2
 80070a4:	61bb      	str	r3, [r7, #24]
 80070a6:	e007      	b.n	80070b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	781a      	ldrb	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	3301      	adds	r3, #1
 80070b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070bc:	b29b      	uxth	r3, r3
 80070be:	3b01      	subs	r3, #1
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d1cf      	bne.n	8007070 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	9300      	str	r3, [sp, #0]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2140      	movs	r1, #64	; 0x40
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f810 	bl	8007100 <UART_WaitOnFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e006      	b.n	80070f8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b090      	sub	sp, #64	; 0x40
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4613      	mov	r3, r2
 800710e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007110:	e050      	b.n	80071b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007118:	d04c      	beq.n	80071b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800711a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800711c:	2b00      	cmp	r3, #0
 800711e:	d007      	beq.n	8007130 <UART_WaitOnFlagUntilTimeout+0x30>
 8007120:	f7fd f9c0 	bl	80044a4 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800712c:	429a      	cmp	r2, r3
 800712e:	d241      	bcs.n	80071b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007150:	637a      	str	r2, [r7, #52]	; 0x34
 8007152:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e5      	bne.n	8007130 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3314      	adds	r3, #20
 800716a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	e853 3f00 	ldrex	r3, [r3]
 8007172:	613b      	str	r3, [r7, #16]
   return(result);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007184:	623a      	str	r2, [r7, #32]
 8007186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	6a3a      	ldr	r2, [r7, #32]
 800718c:	e841 2300 	strex	r3, r2, [r1]
 8007190:	61bb      	str	r3, [r7, #24]
   return(result);
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1e5      	bne.n	8007164 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e00f      	b.n	80071d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	4013      	ands	r3, r2
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	bf0c      	ite	eq
 80071c4:	2301      	moveq	r3, #1
 80071c6:	2300      	movne	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	461a      	mov	r2, r3
 80071cc:	79fb      	ldrb	r3, [r7, #7]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d09f      	beq.n	8007112 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3740      	adds	r7, #64	; 0x40
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e0:	b0c0      	sub	sp, #256	; 0x100
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f8:	68d9      	ldr	r1, [r3, #12]
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	ea40 0301 	orr.w	r3, r0, r1
 8007204:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	431a      	orrs	r2, r3
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	431a      	orrs	r2, r3
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	4313      	orrs	r3, r2
 8007224:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007234:	f021 010c 	bic.w	r1, r1, #12
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007242:	430b      	orrs	r3, r1
 8007244:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	6999      	ldr	r1, [r3, #24]
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	ea40 0301 	orr.w	r3, r0, r1
 8007262:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b8f      	ldr	r3, [pc, #572]	; (80074a8 <UART_SetConfig+0x2cc>)
 800726c:	429a      	cmp	r2, r3
 800726e:	d005      	beq.n	800727c <UART_SetConfig+0xa0>
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	4b8d      	ldr	r3, [pc, #564]	; (80074ac <UART_SetConfig+0x2d0>)
 8007278:	429a      	cmp	r2, r3
 800727a:	d104      	bne.n	8007286 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800727c:	f7ff fdc4 	bl	8006e08 <HAL_RCC_GetPCLK2Freq>
 8007280:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007284:	e003      	b.n	800728e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007286:	f7ff fdab 	bl	8006de0 <HAL_RCC_GetPCLK1Freq>
 800728a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800728e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007298:	f040 810c 	bne.w	80074b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800729c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a0:	2200      	movs	r2, #0
 80072a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072ae:	4622      	mov	r2, r4
 80072b0:	462b      	mov	r3, r5
 80072b2:	1891      	adds	r1, r2, r2
 80072b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80072b6:	415b      	adcs	r3, r3
 80072b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072be:	4621      	mov	r1, r4
 80072c0:	eb12 0801 	adds.w	r8, r2, r1
 80072c4:	4629      	mov	r1, r5
 80072c6:	eb43 0901 	adc.w	r9, r3, r1
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072de:	4690      	mov	r8, r2
 80072e0:	4699      	mov	r9, r3
 80072e2:	4623      	mov	r3, r4
 80072e4:	eb18 0303 	adds.w	r3, r8, r3
 80072e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072ec:	462b      	mov	r3, r5
 80072ee:	eb49 0303 	adc.w	r3, r9, r3
 80072f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007302:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007306:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800730a:	460b      	mov	r3, r1
 800730c:	18db      	adds	r3, r3, r3
 800730e:	653b      	str	r3, [r7, #80]	; 0x50
 8007310:	4613      	mov	r3, r2
 8007312:	eb42 0303 	adc.w	r3, r2, r3
 8007316:	657b      	str	r3, [r7, #84]	; 0x54
 8007318:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800731c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007320:	f7f9 fc9a 	bl	8000c58 <__aeabi_uldivmod>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4b61      	ldr	r3, [pc, #388]	; (80074b0 <UART_SetConfig+0x2d4>)
 800732a:	fba3 2302 	umull	r2, r3, r3, r2
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	011c      	lsls	r4, r3, #4
 8007332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007336:	2200      	movs	r2, #0
 8007338:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800733c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007340:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007344:	4642      	mov	r2, r8
 8007346:	464b      	mov	r3, r9
 8007348:	1891      	adds	r1, r2, r2
 800734a:	64b9      	str	r1, [r7, #72]	; 0x48
 800734c:	415b      	adcs	r3, r3
 800734e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007350:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007354:	4641      	mov	r1, r8
 8007356:	eb12 0a01 	adds.w	sl, r2, r1
 800735a:	4649      	mov	r1, r9
 800735c:	eb43 0b01 	adc.w	fp, r3, r1
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800736c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007374:	4692      	mov	sl, r2
 8007376:	469b      	mov	fp, r3
 8007378:	4643      	mov	r3, r8
 800737a:	eb1a 0303 	adds.w	r3, sl, r3
 800737e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007382:	464b      	mov	r3, r9
 8007384:	eb4b 0303 	adc.w	r3, fp, r3
 8007388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007398:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800739c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073a0:	460b      	mov	r3, r1
 80073a2:	18db      	adds	r3, r3, r3
 80073a4:	643b      	str	r3, [r7, #64]	; 0x40
 80073a6:	4613      	mov	r3, r2
 80073a8:	eb42 0303 	adc.w	r3, r2, r3
 80073ac:	647b      	str	r3, [r7, #68]	; 0x44
 80073ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073b6:	f7f9 fc4f 	bl	8000c58 <__aeabi_uldivmod>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4611      	mov	r1, r2
 80073c0:	4b3b      	ldr	r3, [pc, #236]	; (80074b0 <UART_SetConfig+0x2d4>)
 80073c2:	fba3 2301 	umull	r2, r3, r3, r1
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	2264      	movs	r2, #100	; 0x64
 80073ca:	fb02 f303 	mul.w	r3, r2, r3
 80073ce:	1acb      	subs	r3, r1, r3
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073d6:	4b36      	ldr	r3, [pc, #216]	; (80074b0 <UART_SetConfig+0x2d4>)
 80073d8:	fba3 2302 	umull	r2, r3, r3, r2
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073e4:	441c      	add	r4, r3
 80073e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073f8:	4642      	mov	r2, r8
 80073fa:	464b      	mov	r3, r9
 80073fc:	1891      	adds	r1, r2, r2
 80073fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007400:	415b      	adcs	r3, r3
 8007402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007404:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007408:	4641      	mov	r1, r8
 800740a:	1851      	adds	r1, r2, r1
 800740c:	6339      	str	r1, [r7, #48]	; 0x30
 800740e:	4649      	mov	r1, r9
 8007410:	414b      	adcs	r3, r1
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007420:	4659      	mov	r1, fp
 8007422:	00cb      	lsls	r3, r1, #3
 8007424:	4651      	mov	r1, sl
 8007426:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800742a:	4651      	mov	r1, sl
 800742c:	00ca      	lsls	r2, r1, #3
 800742e:	4610      	mov	r0, r2
 8007430:	4619      	mov	r1, r3
 8007432:	4603      	mov	r3, r0
 8007434:	4642      	mov	r2, r8
 8007436:	189b      	adds	r3, r3, r2
 8007438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800743c:	464b      	mov	r3, r9
 800743e:	460a      	mov	r2, r1
 8007440:	eb42 0303 	adc.w	r3, r2, r3
 8007444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007454:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007458:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800745c:	460b      	mov	r3, r1
 800745e:	18db      	adds	r3, r3, r3
 8007460:	62bb      	str	r3, [r7, #40]	; 0x28
 8007462:	4613      	mov	r3, r2
 8007464:	eb42 0303 	adc.w	r3, r2, r3
 8007468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800746a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800746e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007472:	f7f9 fbf1 	bl	8000c58 <__aeabi_uldivmod>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4b0d      	ldr	r3, [pc, #52]	; (80074b0 <UART_SetConfig+0x2d4>)
 800747c:	fba3 1302 	umull	r1, r3, r3, r2
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	2164      	movs	r1, #100	; 0x64
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	3332      	adds	r3, #50	; 0x32
 800748e:	4a08      	ldr	r2, [pc, #32]	; (80074b0 <UART_SetConfig+0x2d4>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	095b      	lsrs	r3, r3, #5
 8007496:	f003 0207 	and.w	r2, r3, #7
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4422      	add	r2, r4
 80074a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074a4:	e105      	b.n	80076b2 <UART_SetConfig+0x4d6>
 80074a6:	bf00      	nop
 80074a8:	40011000 	.word	0x40011000
 80074ac:	40011400 	.word	0x40011400
 80074b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074c6:	4642      	mov	r2, r8
 80074c8:	464b      	mov	r3, r9
 80074ca:	1891      	adds	r1, r2, r2
 80074cc:	6239      	str	r1, [r7, #32]
 80074ce:	415b      	adcs	r3, r3
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
 80074d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074d6:	4641      	mov	r1, r8
 80074d8:	1854      	adds	r4, r2, r1
 80074da:	4649      	mov	r1, r9
 80074dc:	eb43 0501 	adc.w	r5, r3, r1
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	00eb      	lsls	r3, r5, #3
 80074ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074ee:	00e2      	lsls	r2, r4, #3
 80074f0:	4614      	mov	r4, r2
 80074f2:	461d      	mov	r5, r3
 80074f4:	4643      	mov	r3, r8
 80074f6:	18e3      	adds	r3, r4, r3
 80074f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074fc:	464b      	mov	r3, r9
 80074fe:	eb45 0303 	adc.w	r3, r5, r3
 8007502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007512:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007522:	4629      	mov	r1, r5
 8007524:	008b      	lsls	r3, r1, #2
 8007526:	4621      	mov	r1, r4
 8007528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800752c:	4621      	mov	r1, r4
 800752e:	008a      	lsls	r2, r1, #2
 8007530:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007534:	f7f9 fb90 	bl	8000c58 <__aeabi_uldivmod>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	4b60      	ldr	r3, [pc, #384]	; (80076c0 <UART_SetConfig+0x4e4>)
 800753e:	fba3 2302 	umull	r2, r3, r3, r2
 8007542:	095b      	lsrs	r3, r3, #5
 8007544:	011c      	lsls	r4, r3, #4
 8007546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800754a:	2200      	movs	r2, #0
 800754c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007550:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007554:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007558:	4642      	mov	r2, r8
 800755a:	464b      	mov	r3, r9
 800755c:	1891      	adds	r1, r2, r2
 800755e:	61b9      	str	r1, [r7, #24]
 8007560:	415b      	adcs	r3, r3
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007568:	4641      	mov	r1, r8
 800756a:	1851      	adds	r1, r2, r1
 800756c:	6139      	str	r1, [r7, #16]
 800756e:	4649      	mov	r1, r9
 8007570:	414b      	adcs	r3, r1
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	f04f 0200 	mov.w	r2, #0
 8007578:	f04f 0300 	mov.w	r3, #0
 800757c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007580:	4659      	mov	r1, fp
 8007582:	00cb      	lsls	r3, r1, #3
 8007584:	4651      	mov	r1, sl
 8007586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800758a:	4651      	mov	r1, sl
 800758c:	00ca      	lsls	r2, r1, #3
 800758e:	4610      	mov	r0, r2
 8007590:	4619      	mov	r1, r3
 8007592:	4603      	mov	r3, r0
 8007594:	4642      	mov	r2, r8
 8007596:	189b      	adds	r3, r3, r2
 8007598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800759c:	464b      	mov	r3, r9
 800759e:	460a      	mov	r2, r1
 80075a0:	eb42 0303 	adc.w	r3, r2, r3
 80075a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075c0:	4649      	mov	r1, r9
 80075c2:	008b      	lsls	r3, r1, #2
 80075c4:	4641      	mov	r1, r8
 80075c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ca:	4641      	mov	r1, r8
 80075cc:	008a      	lsls	r2, r1, #2
 80075ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075d2:	f7f9 fb41 	bl	8000c58 <__aeabi_uldivmod>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4b39      	ldr	r3, [pc, #228]	; (80076c0 <UART_SetConfig+0x4e4>)
 80075dc:	fba3 1302 	umull	r1, r3, r3, r2
 80075e0:	095b      	lsrs	r3, r3, #5
 80075e2:	2164      	movs	r1, #100	; 0x64
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	3332      	adds	r3, #50	; 0x32
 80075ee:	4a34      	ldr	r2, [pc, #208]	; (80076c0 <UART_SetConfig+0x4e4>)
 80075f0:	fba2 2303 	umull	r2, r3, r2, r3
 80075f4:	095b      	lsrs	r3, r3, #5
 80075f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075fa:	441c      	add	r4, r3
 80075fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007600:	2200      	movs	r2, #0
 8007602:	673b      	str	r3, [r7, #112]	; 0x70
 8007604:	677a      	str	r2, [r7, #116]	; 0x74
 8007606:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800760a:	4642      	mov	r2, r8
 800760c:	464b      	mov	r3, r9
 800760e:	1891      	adds	r1, r2, r2
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	415b      	adcs	r3, r3
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800761a:	4641      	mov	r1, r8
 800761c:	1851      	adds	r1, r2, r1
 800761e:	6039      	str	r1, [r7, #0]
 8007620:	4649      	mov	r1, r9
 8007622:	414b      	adcs	r3, r1
 8007624:	607b      	str	r3, [r7, #4]
 8007626:	f04f 0200 	mov.w	r2, #0
 800762a:	f04f 0300 	mov.w	r3, #0
 800762e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007632:	4659      	mov	r1, fp
 8007634:	00cb      	lsls	r3, r1, #3
 8007636:	4651      	mov	r1, sl
 8007638:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800763c:	4651      	mov	r1, sl
 800763e:	00ca      	lsls	r2, r1, #3
 8007640:	4610      	mov	r0, r2
 8007642:	4619      	mov	r1, r3
 8007644:	4603      	mov	r3, r0
 8007646:	4642      	mov	r2, r8
 8007648:	189b      	adds	r3, r3, r2
 800764a:	66bb      	str	r3, [r7, #104]	; 0x68
 800764c:	464b      	mov	r3, r9
 800764e:	460a      	mov	r2, r1
 8007650:	eb42 0303 	adc.w	r3, r2, r3
 8007654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	663b      	str	r3, [r7, #96]	; 0x60
 8007660:	667a      	str	r2, [r7, #100]	; 0x64
 8007662:	f04f 0200 	mov.w	r2, #0
 8007666:	f04f 0300 	mov.w	r3, #0
 800766a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800766e:	4649      	mov	r1, r9
 8007670:	008b      	lsls	r3, r1, #2
 8007672:	4641      	mov	r1, r8
 8007674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007678:	4641      	mov	r1, r8
 800767a:	008a      	lsls	r2, r1, #2
 800767c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007680:	f7f9 faea 	bl	8000c58 <__aeabi_uldivmod>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <UART_SetConfig+0x4e4>)
 800768a:	fba3 1302 	umull	r1, r3, r3, r2
 800768e:	095b      	lsrs	r3, r3, #5
 8007690:	2164      	movs	r1, #100	; 0x64
 8007692:	fb01 f303 	mul.w	r3, r1, r3
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	3332      	adds	r3, #50	; 0x32
 800769c:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <UART_SetConfig+0x4e4>)
 800769e:	fba2 2303 	umull	r2, r3, r2, r3
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	f003 020f 	and.w	r2, r3, #15
 80076a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4422      	add	r2, r4
 80076b0:	609a      	str	r2, [r3, #8]
}
 80076b2:	bf00      	nop
 80076b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076b8:	46bd      	mov	sp, r7
 80076ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076be:	bf00      	nop
 80076c0:	51eb851f 	.word	0x51eb851f

080076c4 <__errno>:
 80076c4:	4b01      	ldr	r3, [pc, #4]	; (80076cc <__errno+0x8>)
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	20000014 	.word	0x20000014

080076d0 <__libc_init_array>:
 80076d0:	b570      	push	{r4, r5, r6, lr}
 80076d2:	4d0d      	ldr	r5, [pc, #52]	; (8007708 <__libc_init_array+0x38>)
 80076d4:	4c0d      	ldr	r4, [pc, #52]	; (800770c <__libc_init_array+0x3c>)
 80076d6:	1b64      	subs	r4, r4, r5
 80076d8:	10a4      	asrs	r4, r4, #2
 80076da:	2600      	movs	r6, #0
 80076dc:	42a6      	cmp	r6, r4
 80076de:	d109      	bne.n	80076f4 <__libc_init_array+0x24>
 80076e0:	4d0b      	ldr	r5, [pc, #44]	; (8007710 <__libc_init_array+0x40>)
 80076e2:	4c0c      	ldr	r4, [pc, #48]	; (8007714 <__libc_init_array+0x44>)
 80076e4:	f003 fab0 	bl	800ac48 <_init>
 80076e8:	1b64      	subs	r4, r4, r5
 80076ea:	10a4      	asrs	r4, r4, #2
 80076ec:	2600      	movs	r6, #0
 80076ee:	42a6      	cmp	r6, r4
 80076f0:	d105      	bne.n	80076fe <__libc_init_array+0x2e>
 80076f2:	bd70      	pop	{r4, r5, r6, pc}
 80076f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f8:	4798      	blx	r3
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7ee      	b.n	80076dc <__libc_init_array+0xc>
 80076fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007702:	4798      	blx	r3
 8007704:	3601      	adds	r6, #1
 8007706:	e7f2      	b.n	80076ee <__libc_init_array+0x1e>
 8007708:	0800b1cc 	.word	0x0800b1cc
 800770c:	0800b1cc 	.word	0x0800b1cc
 8007710:	0800b1cc 	.word	0x0800b1cc
 8007714:	0800b1d0 	.word	0x0800b1d0

08007718 <memset>:
 8007718:	4402      	add	r2, r0
 800771a:	4603      	mov	r3, r0
 800771c:	4293      	cmp	r3, r2
 800771e:	d100      	bne.n	8007722 <memset+0xa>
 8007720:	4770      	bx	lr
 8007722:	f803 1b01 	strb.w	r1, [r3], #1
 8007726:	e7f9      	b.n	800771c <memset+0x4>

08007728 <__cvt>:
 8007728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	ec55 4b10 	vmov	r4, r5, d0
 8007730:	2d00      	cmp	r5, #0
 8007732:	460e      	mov	r6, r1
 8007734:	4619      	mov	r1, r3
 8007736:	462b      	mov	r3, r5
 8007738:	bfbb      	ittet	lt
 800773a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800773e:	461d      	movlt	r5, r3
 8007740:	2300      	movge	r3, #0
 8007742:	232d      	movlt	r3, #45	; 0x2d
 8007744:	700b      	strb	r3, [r1, #0]
 8007746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007748:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800774c:	4691      	mov	r9, r2
 800774e:	f023 0820 	bic.w	r8, r3, #32
 8007752:	bfbc      	itt	lt
 8007754:	4622      	movlt	r2, r4
 8007756:	4614      	movlt	r4, r2
 8007758:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800775c:	d005      	beq.n	800776a <__cvt+0x42>
 800775e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007762:	d100      	bne.n	8007766 <__cvt+0x3e>
 8007764:	3601      	adds	r6, #1
 8007766:	2102      	movs	r1, #2
 8007768:	e000      	b.n	800776c <__cvt+0x44>
 800776a:	2103      	movs	r1, #3
 800776c:	ab03      	add	r3, sp, #12
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	ab02      	add	r3, sp, #8
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	ec45 4b10 	vmov	d0, r4, r5
 8007778:	4653      	mov	r3, sl
 800777a:	4632      	mov	r2, r6
 800777c:	f000 fd20 	bl	80081c0 <_dtoa_r>
 8007780:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007784:	4607      	mov	r7, r0
 8007786:	d102      	bne.n	800778e <__cvt+0x66>
 8007788:	f019 0f01 	tst.w	r9, #1
 800778c:	d022      	beq.n	80077d4 <__cvt+0xac>
 800778e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007792:	eb07 0906 	add.w	r9, r7, r6
 8007796:	d110      	bne.n	80077ba <__cvt+0x92>
 8007798:	783b      	ldrb	r3, [r7, #0]
 800779a:	2b30      	cmp	r3, #48	; 0x30
 800779c:	d10a      	bne.n	80077b4 <__cvt+0x8c>
 800779e:	2200      	movs	r2, #0
 80077a0:	2300      	movs	r3, #0
 80077a2:	4620      	mov	r0, r4
 80077a4:	4629      	mov	r1, r5
 80077a6:	f7f9 f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80077aa:	b918      	cbnz	r0, 80077b4 <__cvt+0x8c>
 80077ac:	f1c6 0601 	rsb	r6, r6, #1
 80077b0:	f8ca 6000 	str.w	r6, [sl]
 80077b4:	f8da 3000 	ldr.w	r3, [sl]
 80077b8:	4499      	add	r9, r3
 80077ba:	2200      	movs	r2, #0
 80077bc:	2300      	movs	r3, #0
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f9 f989 	bl	8000ad8 <__aeabi_dcmpeq>
 80077c6:	b108      	cbz	r0, 80077cc <__cvt+0xa4>
 80077c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80077cc:	2230      	movs	r2, #48	; 0x30
 80077ce:	9b03      	ldr	r3, [sp, #12]
 80077d0:	454b      	cmp	r3, r9
 80077d2:	d307      	bcc.n	80077e4 <__cvt+0xbc>
 80077d4:	9b03      	ldr	r3, [sp, #12]
 80077d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d8:	1bdb      	subs	r3, r3, r7
 80077da:	4638      	mov	r0, r7
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	b004      	add	sp, #16
 80077e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e4:	1c59      	adds	r1, r3, #1
 80077e6:	9103      	str	r1, [sp, #12]
 80077e8:	701a      	strb	r2, [r3, #0]
 80077ea:	e7f0      	b.n	80077ce <__cvt+0xa6>

080077ec <__exponent>:
 80077ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ee:	4603      	mov	r3, r0
 80077f0:	2900      	cmp	r1, #0
 80077f2:	bfb8      	it	lt
 80077f4:	4249      	neglt	r1, r1
 80077f6:	f803 2b02 	strb.w	r2, [r3], #2
 80077fa:	bfb4      	ite	lt
 80077fc:	222d      	movlt	r2, #45	; 0x2d
 80077fe:	222b      	movge	r2, #43	; 0x2b
 8007800:	2909      	cmp	r1, #9
 8007802:	7042      	strb	r2, [r0, #1]
 8007804:	dd2a      	ble.n	800785c <__exponent+0x70>
 8007806:	f10d 0407 	add.w	r4, sp, #7
 800780a:	46a4      	mov	ip, r4
 800780c:	270a      	movs	r7, #10
 800780e:	46a6      	mov	lr, r4
 8007810:	460a      	mov	r2, r1
 8007812:	fb91 f6f7 	sdiv	r6, r1, r7
 8007816:	fb07 1516 	mls	r5, r7, r6, r1
 800781a:	3530      	adds	r5, #48	; 0x30
 800781c:	2a63      	cmp	r2, #99	; 0x63
 800781e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007822:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007826:	4631      	mov	r1, r6
 8007828:	dcf1      	bgt.n	800780e <__exponent+0x22>
 800782a:	3130      	adds	r1, #48	; 0x30
 800782c:	f1ae 0502 	sub.w	r5, lr, #2
 8007830:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007834:	1c44      	adds	r4, r0, #1
 8007836:	4629      	mov	r1, r5
 8007838:	4561      	cmp	r1, ip
 800783a:	d30a      	bcc.n	8007852 <__exponent+0x66>
 800783c:	f10d 0209 	add.w	r2, sp, #9
 8007840:	eba2 020e 	sub.w	r2, r2, lr
 8007844:	4565      	cmp	r5, ip
 8007846:	bf88      	it	hi
 8007848:	2200      	movhi	r2, #0
 800784a:	4413      	add	r3, r2
 800784c:	1a18      	subs	r0, r3, r0
 800784e:	b003      	add	sp, #12
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007856:	f804 2f01 	strb.w	r2, [r4, #1]!
 800785a:	e7ed      	b.n	8007838 <__exponent+0x4c>
 800785c:	2330      	movs	r3, #48	; 0x30
 800785e:	3130      	adds	r1, #48	; 0x30
 8007860:	7083      	strb	r3, [r0, #2]
 8007862:	70c1      	strb	r1, [r0, #3]
 8007864:	1d03      	adds	r3, r0, #4
 8007866:	e7f1      	b.n	800784c <__exponent+0x60>

08007868 <_printf_float>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	ed2d 8b02 	vpush	{d8}
 8007870:	b08d      	sub	sp, #52	; 0x34
 8007872:	460c      	mov	r4, r1
 8007874:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007878:	4616      	mov	r6, r2
 800787a:	461f      	mov	r7, r3
 800787c:	4605      	mov	r5, r0
 800787e:	f001 fa8d 	bl	8008d9c <_localeconv_r>
 8007882:	f8d0 a000 	ldr.w	sl, [r0]
 8007886:	4650      	mov	r0, sl
 8007888:	f7f8 fcaa 	bl	80001e0 <strlen>
 800788c:	2300      	movs	r3, #0
 800788e:	930a      	str	r3, [sp, #40]	; 0x28
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	f8d8 3000 	ldr.w	r3, [r8]
 8007898:	f894 b018 	ldrb.w	fp, [r4, #24]
 800789c:	3307      	adds	r3, #7
 800789e:	f023 0307 	bic.w	r3, r3, #7
 80078a2:	f103 0208 	add.w	r2, r3, #8
 80078a6:	f8c8 2000 	str.w	r2, [r8]
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078ba:	9307      	str	r3, [sp, #28]
 80078bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80078c0:	ee08 0a10 	vmov	s16, r0
 80078c4:	4b9f      	ldr	r3, [pc, #636]	; (8007b44 <_printf_float+0x2dc>)
 80078c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295
 80078ce:	f7f9 f935 	bl	8000b3c <__aeabi_dcmpun>
 80078d2:	bb88      	cbnz	r0, 8007938 <_printf_float+0xd0>
 80078d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078d8:	4b9a      	ldr	r3, [pc, #616]	; (8007b44 <_printf_float+0x2dc>)
 80078da:	f04f 32ff 	mov.w	r2, #4294967295
 80078de:	f7f9 f90f 	bl	8000b00 <__aeabi_dcmple>
 80078e2:	bb48      	cbnz	r0, 8007938 <_printf_float+0xd0>
 80078e4:	2200      	movs	r2, #0
 80078e6:	2300      	movs	r3, #0
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f9 f8fe 	bl	8000aec <__aeabi_dcmplt>
 80078f0:	b110      	cbz	r0, 80078f8 <_printf_float+0x90>
 80078f2:	232d      	movs	r3, #45	; 0x2d
 80078f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f8:	4b93      	ldr	r3, [pc, #588]	; (8007b48 <_printf_float+0x2e0>)
 80078fa:	4894      	ldr	r0, [pc, #592]	; (8007b4c <_printf_float+0x2e4>)
 80078fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007900:	bf94      	ite	ls
 8007902:	4698      	movls	r8, r3
 8007904:	4680      	movhi	r8, r0
 8007906:	2303      	movs	r3, #3
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	f023 0204 	bic.w	r2, r3, #4
 8007910:	6022      	str	r2, [r4, #0]
 8007912:	f04f 0900 	mov.w	r9, #0
 8007916:	9700      	str	r7, [sp, #0]
 8007918:	4633      	mov	r3, r6
 800791a:	aa0b      	add	r2, sp, #44	; 0x2c
 800791c:	4621      	mov	r1, r4
 800791e:	4628      	mov	r0, r5
 8007920:	f000 f9d8 	bl	8007cd4 <_printf_common>
 8007924:	3001      	adds	r0, #1
 8007926:	f040 8090 	bne.w	8007a4a <_printf_float+0x1e2>
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	b00d      	add	sp, #52	; 0x34
 8007930:	ecbd 8b02 	vpop	{d8}
 8007934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007938:	4642      	mov	r2, r8
 800793a:	464b      	mov	r3, r9
 800793c:	4640      	mov	r0, r8
 800793e:	4649      	mov	r1, r9
 8007940:	f7f9 f8fc 	bl	8000b3c <__aeabi_dcmpun>
 8007944:	b140      	cbz	r0, 8007958 <_printf_float+0xf0>
 8007946:	464b      	mov	r3, r9
 8007948:	2b00      	cmp	r3, #0
 800794a:	bfbc      	itt	lt
 800794c:	232d      	movlt	r3, #45	; 0x2d
 800794e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007952:	487f      	ldr	r0, [pc, #508]	; (8007b50 <_printf_float+0x2e8>)
 8007954:	4b7f      	ldr	r3, [pc, #508]	; (8007b54 <_printf_float+0x2ec>)
 8007956:	e7d1      	b.n	80078fc <_printf_float+0x94>
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800795e:	9206      	str	r2, [sp, #24]
 8007960:	1c5a      	adds	r2, r3, #1
 8007962:	d13f      	bne.n	80079e4 <_printf_float+0x17c>
 8007964:	2306      	movs	r3, #6
 8007966:	6063      	str	r3, [r4, #4]
 8007968:	9b05      	ldr	r3, [sp, #20]
 800796a:	6861      	ldr	r1, [r4, #4]
 800796c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007970:	2300      	movs	r3, #0
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	ab0a      	add	r3, sp, #40	; 0x28
 8007976:	e9cd b301 	strd	fp, r3, [sp, #4]
 800797a:	ab09      	add	r3, sp, #36	; 0x24
 800797c:	ec49 8b10 	vmov	d0, r8, r9
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	6022      	str	r2, [r4, #0]
 8007984:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007988:	4628      	mov	r0, r5
 800798a:	f7ff fecd 	bl	8007728 <__cvt>
 800798e:	9b06      	ldr	r3, [sp, #24]
 8007990:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007992:	2b47      	cmp	r3, #71	; 0x47
 8007994:	4680      	mov	r8, r0
 8007996:	d108      	bne.n	80079aa <_printf_float+0x142>
 8007998:	1cc8      	adds	r0, r1, #3
 800799a:	db02      	blt.n	80079a2 <_printf_float+0x13a>
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	4299      	cmp	r1, r3
 80079a0:	dd41      	ble.n	8007a26 <_printf_float+0x1be>
 80079a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80079a6:	fa5f fb8b 	uxtb.w	fp, fp
 80079aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079ae:	d820      	bhi.n	80079f2 <_printf_float+0x18a>
 80079b0:	3901      	subs	r1, #1
 80079b2:	465a      	mov	r2, fp
 80079b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079b8:	9109      	str	r1, [sp, #36]	; 0x24
 80079ba:	f7ff ff17 	bl	80077ec <__exponent>
 80079be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079c0:	1813      	adds	r3, r2, r0
 80079c2:	2a01      	cmp	r2, #1
 80079c4:	4681      	mov	r9, r0
 80079c6:	6123      	str	r3, [r4, #16]
 80079c8:	dc02      	bgt.n	80079d0 <_printf_float+0x168>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	07d2      	lsls	r2, r2, #31
 80079ce:	d501      	bpl.n	80079d4 <_printf_float+0x16c>
 80079d0:	3301      	adds	r3, #1
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d09c      	beq.n	8007916 <_printf_float+0xae>
 80079dc:	232d      	movs	r3, #45	; 0x2d
 80079de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e2:	e798      	b.n	8007916 <_printf_float+0xae>
 80079e4:	9a06      	ldr	r2, [sp, #24]
 80079e6:	2a47      	cmp	r2, #71	; 0x47
 80079e8:	d1be      	bne.n	8007968 <_printf_float+0x100>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d1bc      	bne.n	8007968 <_printf_float+0x100>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e7b9      	b.n	8007966 <_printf_float+0xfe>
 80079f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079f6:	d118      	bne.n	8007a2a <_printf_float+0x1c2>
 80079f8:	2900      	cmp	r1, #0
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	dd0b      	ble.n	8007a16 <_printf_float+0x1ae>
 80079fe:	6121      	str	r1, [r4, #16]
 8007a00:	b913      	cbnz	r3, 8007a08 <_printf_float+0x1a0>
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	07d0      	lsls	r0, r2, #31
 8007a06:	d502      	bpl.n	8007a0e <_printf_float+0x1a6>
 8007a08:	3301      	adds	r3, #1
 8007a0a:	440b      	add	r3, r1
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a10:	f04f 0900 	mov.w	r9, #0
 8007a14:	e7de      	b.n	80079d4 <_printf_float+0x16c>
 8007a16:	b913      	cbnz	r3, 8007a1e <_printf_float+0x1b6>
 8007a18:	6822      	ldr	r2, [r4, #0]
 8007a1a:	07d2      	lsls	r2, r2, #31
 8007a1c:	d501      	bpl.n	8007a22 <_printf_float+0x1ba>
 8007a1e:	3302      	adds	r3, #2
 8007a20:	e7f4      	b.n	8007a0c <_printf_float+0x1a4>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e7f2      	b.n	8007a0c <_printf_float+0x1a4>
 8007a26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a2c:	4299      	cmp	r1, r3
 8007a2e:	db05      	blt.n	8007a3c <_printf_float+0x1d4>
 8007a30:	6823      	ldr	r3, [r4, #0]
 8007a32:	6121      	str	r1, [r4, #16]
 8007a34:	07d8      	lsls	r0, r3, #31
 8007a36:	d5ea      	bpl.n	8007a0e <_printf_float+0x1a6>
 8007a38:	1c4b      	adds	r3, r1, #1
 8007a3a:	e7e7      	b.n	8007a0c <_printf_float+0x1a4>
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	bfd4      	ite	le
 8007a40:	f1c1 0202 	rsble	r2, r1, #2
 8007a44:	2201      	movgt	r2, #1
 8007a46:	4413      	add	r3, r2
 8007a48:	e7e0      	b.n	8007a0c <_printf_float+0x1a4>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	055a      	lsls	r2, r3, #21
 8007a4e:	d407      	bmi.n	8007a60 <_printf_float+0x1f8>
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	4642      	mov	r2, r8
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d12c      	bne.n	8007ab8 <_printf_float+0x250>
 8007a5e:	e764      	b.n	800792a <_printf_float+0xc2>
 8007a60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a64:	f240 80e0 	bls.w	8007c28 <_printf_float+0x3c0>
 8007a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f7f9 f832 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	d034      	beq.n	8007ae2 <_printf_float+0x27a>
 8007a78:	4a37      	ldr	r2, [pc, #220]	; (8007b58 <_printf_float+0x2f0>)
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af51 	beq.w	800792a <_printf_float+0xc2>
 8007a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	db02      	blt.n	8007a96 <_printf_float+0x22e>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	07d8      	lsls	r0, r3, #31
 8007a94:	d510      	bpl.n	8007ab8 <_printf_float+0x250>
 8007a96:	ee18 3a10 	vmov	r3, s16
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f af41 	beq.w	800792a <_printf_float+0xc2>
 8007aa8:	f04f 0800 	mov.w	r8, #0
 8007aac:	f104 091a 	add.w	r9, r4, #26
 8007ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	4543      	cmp	r3, r8
 8007ab6:	dc09      	bgt.n	8007acc <_printf_float+0x264>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	079b      	lsls	r3, r3, #30
 8007abc:	f100 8105 	bmi.w	8007cca <_printf_float+0x462>
 8007ac0:	68e0      	ldr	r0, [r4, #12]
 8007ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ac4:	4298      	cmp	r0, r3
 8007ac6:	bfb8      	it	lt
 8007ac8:	4618      	movlt	r0, r3
 8007aca:	e730      	b.n	800792e <_printf_float+0xc6>
 8007acc:	2301      	movs	r3, #1
 8007ace:	464a      	mov	r2, r9
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f af27 	beq.w	800792a <_printf_float+0xc2>
 8007adc:	f108 0801 	add.w	r8, r8, #1
 8007ae0:	e7e6      	b.n	8007ab0 <_printf_float+0x248>
 8007ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dc39      	bgt.n	8007b5c <_printf_float+0x2f4>
 8007ae8:	4a1b      	ldr	r2, [pc, #108]	; (8007b58 <_printf_float+0x2f0>)
 8007aea:	2301      	movs	r3, #1
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af19 	beq.w	800792a <_printf_float+0xc2>
 8007af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007afc:	4313      	orrs	r3, r2
 8007afe:	d102      	bne.n	8007b06 <_printf_float+0x29e>
 8007b00:	6823      	ldr	r3, [r4, #0]
 8007b02:	07d9      	lsls	r1, r3, #31
 8007b04:	d5d8      	bpl.n	8007ab8 <_printf_float+0x250>
 8007b06:	ee18 3a10 	vmov	r3, s16
 8007b0a:	4652      	mov	r2, sl
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	f43f af09 	beq.w	800792a <_printf_float+0xc2>
 8007b18:	f04f 0900 	mov.w	r9, #0
 8007b1c:	f104 0a1a 	add.w	sl, r4, #26
 8007b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b22:	425b      	negs	r3, r3
 8007b24:	454b      	cmp	r3, r9
 8007b26:	dc01      	bgt.n	8007b2c <_printf_float+0x2c4>
 8007b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b2a:	e792      	b.n	8007a52 <_printf_float+0x1ea>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4652      	mov	r2, sl
 8007b30:	4631      	mov	r1, r6
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	f43f aef7 	beq.w	800792a <_printf_float+0xc2>
 8007b3c:	f109 0901 	add.w	r9, r9, #1
 8007b40:	e7ee      	b.n	8007b20 <_printf_float+0x2b8>
 8007b42:	bf00      	nop
 8007b44:	7fefffff 	.word	0x7fefffff
 8007b48:	0800adb8 	.word	0x0800adb8
 8007b4c:	0800adbc 	.word	0x0800adbc
 8007b50:	0800adc4 	.word	0x0800adc4
 8007b54:	0800adc0 	.word	0x0800adc0
 8007b58:	0800adc8 	.word	0x0800adc8
 8007b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b60:	429a      	cmp	r2, r3
 8007b62:	bfa8      	it	ge
 8007b64:	461a      	movge	r2, r3
 8007b66:	2a00      	cmp	r2, #0
 8007b68:	4691      	mov	r9, r2
 8007b6a:	dc37      	bgt.n	8007bdc <_printf_float+0x374>
 8007b6c:	f04f 0b00 	mov.w	fp, #0
 8007b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b74:	f104 021a 	add.w	r2, r4, #26
 8007b78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	eba3 0309 	sub.w	r3, r3, r9
 8007b80:	455b      	cmp	r3, fp
 8007b82:	dc33      	bgt.n	8007bec <_printf_float+0x384>
 8007b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	db3b      	blt.n	8007c04 <_printf_float+0x39c>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	07da      	lsls	r2, r3, #31
 8007b90:	d438      	bmi.n	8007c04 <_printf_float+0x39c>
 8007b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b94:	9a05      	ldr	r2, [sp, #20]
 8007b96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b98:	1a9a      	subs	r2, r3, r2
 8007b9a:	eba3 0901 	sub.w	r9, r3, r1
 8007b9e:	4591      	cmp	r9, r2
 8007ba0:	bfa8      	it	ge
 8007ba2:	4691      	movge	r9, r2
 8007ba4:	f1b9 0f00 	cmp.w	r9, #0
 8007ba8:	dc35      	bgt.n	8007c16 <_printf_float+0x3ae>
 8007baa:	f04f 0800 	mov.w	r8, #0
 8007bae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bb2:	f104 0a1a 	add.w	sl, r4, #26
 8007bb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bba:	1a9b      	subs	r3, r3, r2
 8007bbc:	eba3 0309 	sub.w	r3, r3, r9
 8007bc0:	4543      	cmp	r3, r8
 8007bc2:	f77f af79 	ble.w	8007ab8 <_printf_float+0x250>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f aeaa 	beq.w	800792a <_printf_float+0xc2>
 8007bd6:	f108 0801 	add.w	r8, r8, #1
 8007bda:	e7ec      	b.n	8007bb6 <_printf_float+0x34e>
 8007bdc:	4613      	mov	r3, r2
 8007bde:	4631      	mov	r1, r6
 8007be0:	4642      	mov	r2, r8
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	d1c0      	bne.n	8007b6c <_printf_float+0x304>
 8007bea:	e69e      	b.n	800792a <_printf_float+0xc2>
 8007bec:	2301      	movs	r3, #1
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	9205      	str	r2, [sp, #20]
 8007bf4:	47b8      	blx	r7
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f43f ae97 	beq.w	800792a <_printf_float+0xc2>
 8007bfc:	9a05      	ldr	r2, [sp, #20]
 8007bfe:	f10b 0b01 	add.w	fp, fp, #1
 8007c02:	e7b9      	b.n	8007b78 <_printf_float+0x310>
 8007c04:	ee18 3a10 	vmov	r3, s16
 8007c08:	4652      	mov	r2, sl
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	d1be      	bne.n	8007b92 <_printf_float+0x32a>
 8007c14:	e689      	b.n	800792a <_printf_float+0xc2>
 8007c16:	9a05      	ldr	r2, [sp, #20]
 8007c18:	464b      	mov	r3, r9
 8007c1a:	4442      	add	r2, r8
 8007c1c:	4631      	mov	r1, r6
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b8      	blx	r7
 8007c22:	3001      	adds	r0, #1
 8007c24:	d1c1      	bne.n	8007baa <_printf_float+0x342>
 8007c26:	e680      	b.n	800792a <_printf_float+0xc2>
 8007c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c2a:	2a01      	cmp	r2, #1
 8007c2c:	dc01      	bgt.n	8007c32 <_printf_float+0x3ca>
 8007c2e:	07db      	lsls	r3, r3, #31
 8007c30:	d538      	bpl.n	8007ca4 <_printf_float+0x43c>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4642      	mov	r2, r8
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	f43f ae74 	beq.w	800792a <_printf_float+0xc2>
 8007c42:	ee18 3a10 	vmov	r3, s16
 8007c46:	4652      	mov	r2, sl
 8007c48:	4631      	mov	r1, r6
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	47b8      	blx	r7
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f43f ae6b 	beq.w	800792a <_printf_float+0xc2>
 8007c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f7f8 ff3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c60:	b9d8      	cbnz	r0, 8007c9a <_printf_float+0x432>
 8007c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c64:	f108 0201 	add.w	r2, r8, #1
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b8      	blx	r7
 8007c70:	3001      	adds	r0, #1
 8007c72:	d10e      	bne.n	8007c92 <_printf_float+0x42a>
 8007c74:	e659      	b.n	800792a <_printf_float+0xc2>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b8      	blx	r7
 8007c80:	3001      	adds	r0, #1
 8007c82:	f43f ae52 	beq.w	800792a <_printf_float+0xc2>
 8007c86:	f108 0801 	add.w	r8, r8, #1
 8007c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	4543      	cmp	r3, r8
 8007c90:	dcf1      	bgt.n	8007c76 <_printf_float+0x40e>
 8007c92:	464b      	mov	r3, r9
 8007c94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c98:	e6dc      	b.n	8007a54 <_printf_float+0x1ec>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	f104 0a1a 	add.w	sl, r4, #26
 8007ca2:	e7f2      	b.n	8007c8a <_printf_float+0x422>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	e7df      	b.n	8007c6a <_printf_float+0x402>
 8007caa:	2301      	movs	r3, #1
 8007cac:	464a      	mov	r2, r9
 8007cae:	4631      	mov	r1, r6
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	47b8      	blx	r7
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f43f ae38 	beq.w	800792a <_printf_float+0xc2>
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	4543      	cmp	r3, r8
 8007cc6:	dcf0      	bgt.n	8007caa <_printf_float+0x442>
 8007cc8:	e6fa      	b.n	8007ac0 <_printf_float+0x258>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	f104 0919 	add.w	r9, r4, #25
 8007cd2:	e7f4      	b.n	8007cbe <_printf_float+0x456>

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f92a 	bl	80001f0 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	0800adca 	.word	0x0800adca
 8007ff8:	0800addb 	.word	0x0800addb

08007ffc <sniprintf>:
 8007ffc:	b40c      	push	{r2, r3}
 8007ffe:	b530      	push	{r4, r5, lr}
 8008000:	4b17      	ldr	r3, [pc, #92]	; (8008060 <sniprintf+0x64>)
 8008002:	1e0c      	subs	r4, r1, #0
 8008004:	681d      	ldr	r5, [r3, #0]
 8008006:	b09d      	sub	sp, #116	; 0x74
 8008008:	da08      	bge.n	800801c <sniprintf+0x20>
 800800a:	238b      	movs	r3, #139	; 0x8b
 800800c:	602b      	str	r3, [r5, #0]
 800800e:	f04f 30ff 	mov.w	r0, #4294967295
 8008012:	b01d      	add	sp, #116	; 0x74
 8008014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008018:	b002      	add	sp, #8
 800801a:	4770      	bx	lr
 800801c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008020:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008024:	bf14      	ite	ne
 8008026:	f104 33ff 	addne.w	r3, r4, #4294967295
 800802a:	4623      	moveq	r3, r4
 800802c:	9304      	str	r3, [sp, #16]
 800802e:	9307      	str	r3, [sp, #28]
 8008030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008034:	9002      	str	r0, [sp, #8]
 8008036:	9006      	str	r0, [sp, #24]
 8008038:	f8ad 3016 	strh.w	r3, [sp, #22]
 800803c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800803e:	ab21      	add	r3, sp, #132	; 0x84
 8008040:	a902      	add	r1, sp, #8
 8008042:	4628      	mov	r0, r5
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	f001 fb99 	bl	800977c <_svfiprintf_r>
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	bfbc      	itt	lt
 800804e:	238b      	movlt	r3, #139	; 0x8b
 8008050:	602b      	strlt	r3, [r5, #0]
 8008052:	2c00      	cmp	r4, #0
 8008054:	d0dd      	beq.n	8008012 <sniprintf+0x16>
 8008056:	9b02      	ldr	r3, [sp, #8]
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	e7d9      	b.n	8008012 <sniprintf+0x16>
 800805e:	bf00      	nop
 8008060:	20000014 	.word	0x20000014

08008064 <siprintf>:
 8008064:	b40e      	push	{r1, r2, r3}
 8008066:	b500      	push	{lr}
 8008068:	b09c      	sub	sp, #112	; 0x70
 800806a:	ab1d      	add	r3, sp, #116	; 0x74
 800806c:	9002      	str	r0, [sp, #8]
 800806e:	9006      	str	r0, [sp, #24]
 8008070:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008074:	4809      	ldr	r0, [pc, #36]	; (800809c <siprintf+0x38>)
 8008076:	9107      	str	r1, [sp, #28]
 8008078:	9104      	str	r1, [sp, #16]
 800807a:	4909      	ldr	r1, [pc, #36]	; (80080a0 <siprintf+0x3c>)
 800807c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008080:	9105      	str	r1, [sp, #20]
 8008082:	6800      	ldr	r0, [r0, #0]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	a902      	add	r1, sp, #8
 8008088:	f001 fb78 	bl	800977c <_svfiprintf_r>
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
 8008092:	b01c      	add	sp, #112	; 0x70
 8008094:	f85d eb04 	ldr.w	lr, [sp], #4
 8008098:	b003      	add	sp, #12
 800809a:	4770      	bx	lr
 800809c:	20000014 	.word	0x20000014
 80080a0:	ffff0208 	.word	0xffff0208

080080a4 <quorem>:
 80080a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	6903      	ldr	r3, [r0, #16]
 80080aa:	690c      	ldr	r4, [r1, #16]
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	4607      	mov	r7, r0
 80080b0:	f2c0 8081 	blt.w	80081b6 <quorem+0x112>
 80080b4:	3c01      	subs	r4, #1
 80080b6:	f101 0814 	add.w	r8, r1, #20
 80080ba:	f100 0514 	add.w	r5, r0, #20
 80080be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c2:	9301      	str	r3, [sp, #4]
 80080c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080cc:	3301      	adds	r3, #1
 80080ce:	429a      	cmp	r2, r3
 80080d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80080dc:	d331      	bcc.n	8008142 <quorem+0x9e>
 80080de:	f04f 0e00 	mov.w	lr, #0
 80080e2:	4640      	mov	r0, r8
 80080e4:	46ac      	mov	ip, r5
 80080e6:	46f2      	mov	sl, lr
 80080e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80080ec:	b293      	uxth	r3, r2
 80080ee:	fb06 e303 	mla	r3, r6, r3, lr
 80080f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ebaa 0303 	sub.w	r3, sl, r3
 80080fc:	f8dc a000 	ldr.w	sl, [ip]
 8008100:	0c12      	lsrs	r2, r2, #16
 8008102:	fa13 f38a 	uxtah	r3, r3, sl
 8008106:	fb06 e202 	mla	r2, r6, r2, lr
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008112:	b292      	uxth	r2, r2
 8008114:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800811c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008120:	4581      	cmp	r9, r0
 8008122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008126:	f84c 3b04 	str.w	r3, [ip], #4
 800812a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800812e:	d2db      	bcs.n	80080e8 <quorem+0x44>
 8008130:	f855 300b 	ldr.w	r3, [r5, fp]
 8008134:	b92b      	cbnz	r3, 8008142 <quorem+0x9e>
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	3b04      	subs	r3, #4
 800813a:	429d      	cmp	r5, r3
 800813c:	461a      	mov	r2, r3
 800813e:	d32e      	bcc.n	800819e <quorem+0xfa>
 8008140:	613c      	str	r4, [r7, #16]
 8008142:	4638      	mov	r0, r7
 8008144:	f001 f8c6 	bl	80092d4 <__mcmp>
 8008148:	2800      	cmp	r0, #0
 800814a:	db24      	blt.n	8008196 <quorem+0xf2>
 800814c:	3601      	adds	r6, #1
 800814e:	4628      	mov	r0, r5
 8008150:	f04f 0c00 	mov.w	ip, #0
 8008154:	f858 2b04 	ldr.w	r2, [r8], #4
 8008158:	f8d0 e000 	ldr.w	lr, [r0]
 800815c:	b293      	uxth	r3, r2
 800815e:	ebac 0303 	sub.w	r3, ip, r3
 8008162:	0c12      	lsrs	r2, r2, #16
 8008164:	fa13 f38e 	uxtah	r3, r3, lr
 8008168:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800816c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008170:	b29b      	uxth	r3, r3
 8008172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008176:	45c1      	cmp	r9, r8
 8008178:	f840 3b04 	str.w	r3, [r0], #4
 800817c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008180:	d2e8      	bcs.n	8008154 <quorem+0xb0>
 8008182:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008186:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800818a:	b922      	cbnz	r2, 8008196 <quorem+0xf2>
 800818c:	3b04      	subs	r3, #4
 800818e:	429d      	cmp	r5, r3
 8008190:	461a      	mov	r2, r3
 8008192:	d30a      	bcc.n	80081aa <quorem+0x106>
 8008194:	613c      	str	r4, [r7, #16]
 8008196:	4630      	mov	r0, r6
 8008198:	b003      	add	sp, #12
 800819a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819e:	6812      	ldr	r2, [r2, #0]
 80081a0:	3b04      	subs	r3, #4
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	d1cc      	bne.n	8008140 <quorem+0x9c>
 80081a6:	3c01      	subs	r4, #1
 80081a8:	e7c7      	b.n	800813a <quorem+0x96>
 80081aa:	6812      	ldr	r2, [r2, #0]
 80081ac:	3b04      	subs	r3, #4
 80081ae:	2a00      	cmp	r2, #0
 80081b0:	d1f0      	bne.n	8008194 <quorem+0xf0>
 80081b2:	3c01      	subs	r4, #1
 80081b4:	e7eb      	b.n	800818e <quorem+0xea>
 80081b6:	2000      	movs	r0, #0
 80081b8:	e7ee      	b.n	8008198 <quorem+0xf4>
 80081ba:	0000      	movs	r0, r0
 80081bc:	0000      	movs	r0, r0
	...

080081c0 <_dtoa_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	ed2d 8b04 	vpush	{d8-d9}
 80081c8:	ec57 6b10 	vmov	r6, r7, d0
 80081cc:	b093      	sub	sp, #76	; 0x4c
 80081ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081d4:	9106      	str	r1, [sp, #24]
 80081d6:	ee10 aa10 	vmov	sl, s0
 80081da:	4604      	mov	r4, r0
 80081dc:	9209      	str	r2, [sp, #36]	; 0x24
 80081de:	930c      	str	r3, [sp, #48]	; 0x30
 80081e0:	46bb      	mov	fp, r7
 80081e2:	b975      	cbnz	r5, 8008202 <_dtoa_r+0x42>
 80081e4:	2010      	movs	r0, #16
 80081e6:	f000 fddd 	bl	8008da4 <malloc>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6260      	str	r0, [r4, #36]	; 0x24
 80081ee:	b920      	cbnz	r0, 80081fa <_dtoa_r+0x3a>
 80081f0:	4ba7      	ldr	r3, [pc, #668]	; (8008490 <_dtoa_r+0x2d0>)
 80081f2:	21ea      	movs	r1, #234	; 0xea
 80081f4:	48a7      	ldr	r0, [pc, #668]	; (8008494 <_dtoa_r+0x2d4>)
 80081f6:	f001 fbd1 	bl	800999c <__assert_func>
 80081fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081fe:	6005      	str	r5, [r0, #0]
 8008200:	60c5      	str	r5, [r0, #12]
 8008202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	b151      	cbz	r1, 800821e <_dtoa_r+0x5e>
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	604a      	str	r2, [r1, #4]
 800820c:	2301      	movs	r3, #1
 800820e:	4093      	lsls	r3, r2
 8008210:	608b      	str	r3, [r1, #8]
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fe1c 	bl	8008e50 <_Bfree>
 8008218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	1e3b      	subs	r3, r7, #0
 8008220:	bfaa      	itet	ge
 8008222:	2300      	movge	r3, #0
 8008224:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008228:	f8c8 3000 	strge.w	r3, [r8]
 800822c:	4b9a      	ldr	r3, [pc, #616]	; (8008498 <_dtoa_r+0x2d8>)
 800822e:	bfbc      	itt	lt
 8008230:	2201      	movlt	r2, #1
 8008232:	f8c8 2000 	strlt.w	r2, [r8]
 8008236:	ea33 030b 	bics.w	r3, r3, fp
 800823a:	d11b      	bne.n	8008274 <_dtoa_r+0xb4>
 800823c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800823e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008248:	4333      	orrs	r3, r6
 800824a:	f000 8592 	beq.w	8008d72 <_dtoa_r+0xbb2>
 800824e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008250:	b963      	cbnz	r3, 800826c <_dtoa_r+0xac>
 8008252:	4b92      	ldr	r3, [pc, #584]	; (800849c <_dtoa_r+0x2dc>)
 8008254:	e022      	b.n	800829c <_dtoa_r+0xdc>
 8008256:	4b92      	ldr	r3, [pc, #584]	; (80084a0 <_dtoa_r+0x2e0>)
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	3308      	adds	r3, #8
 800825c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	9801      	ldr	r0, [sp, #4]
 8008262:	b013      	add	sp, #76	; 0x4c
 8008264:	ecbd 8b04 	vpop	{d8-d9}
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	4b8b      	ldr	r3, [pc, #556]	; (800849c <_dtoa_r+0x2dc>)
 800826e:	9301      	str	r3, [sp, #4]
 8008270:	3303      	adds	r3, #3
 8008272:	e7f3      	b.n	800825c <_dtoa_r+0x9c>
 8008274:	2200      	movs	r2, #0
 8008276:	2300      	movs	r3, #0
 8008278:	4650      	mov	r0, sl
 800827a:	4659      	mov	r1, fp
 800827c:	f7f8 fc2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008280:	ec4b ab19 	vmov	d9, sl, fp
 8008284:	4680      	mov	r8, r0
 8008286:	b158      	cbz	r0, 80082a0 <_dtoa_r+0xe0>
 8008288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800828a:	2301      	movs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 856b 	beq.w	8008d6c <_dtoa_r+0xbac>
 8008296:	4883      	ldr	r0, [pc, #524]	; (80084a4 <_dtoa_r+0x2e4>)
 8008298:	6018      	str	r0, [r3, #0]
 800829a:	1e43      	subs	r3, r0, #1
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	e7df      	b.n	8008260 <_dtoa_r+0xa0>
 80082a0:	ec4b ab10 	vmov	d0, sl, fp
 80082a4:	aa10      	add	r2, sp, #64	; 0x40
 80082a6:	a911      	add	r1, sp, #68	; 0x44
 80082a8:	4620      	mov	r0, r4
 80082aa:	f001 f8b9 	bl	8009420 <__d2b>
 80082ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80082b2:	ee08 0a10 	vmov	s16, r0
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	f000 8084 	beq.w	80083c4 <_dtoa_r+0x204>
 80082bc:	ee19 3a90 	vmov	r3, s19
 80082c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082c8:	4656      	mov	r6, sl
 80082ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80082d6:	4b74      	ldr	r3, [pc, #464]	; (80084a8 <_dtoa_r+0x2e8>)
 80082d8:	2200      	movs	r2, #0
 80082da:	4630      	mov	r0, r6
 80082dc:	4639      	mov	r1, r7
 80082de:	f7f7 ffdb 	bl	8000298 <__aeabi_dsub>
 80082e2:	a365      	add	r3, pc, #404	; (adr r3, 8008478 <_dtoa_r+0x2b8>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f8 f98e 	bl	8000608 <__aeabi_dmul>
 80082ec:	a364      	add	r3, pc, #400	; (adr r3, 8008480 <_dtoa_r+0x2c0>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f7f7 ffd3 	bl	800029c <__adddf3>
 80082f6:	4606      	mov	r6, r0
 80082f8:	4628      	mov	r0, r5
 80082fa:	460f      	mov	r7, r1
 80082fc:	f7f8 f91a 	bl	8000534 <__aeabi_i2d>
 8008300:	a361      	add	r3, pc, #388	; (adr r3, 8008488 <_dtoa_r+0x2c8>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f8 f97f 	bl	8000608 <__aeabi_dmul>
 800830a:	4602      	mov	r2, r0
 800830c:	460b      	mov	r3, r1
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	f7f7 ffc3 	bl	800029c <__adddf3>
 8008316:	4606      	mov	r6, r0
 8008318:	460f      	mov	r7, r1
 800831a:	f7f8 fc25 	bl	8000b68 <__aeabi_d2iz>
 800831e:	2200      	movs	r2, #0
 8008320:	9000      	str	r0, [sp, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	4630      	mov	r0, r6
 8008326:	4639      	mov	r1, r7
 8008328:	f7f8 fbe0 	bl	8000aec <__aeabi_dcmplt>
 800832c:	b150      	cbz	r0, 8008344 <_dtoa_r+0x184>
 800832e:	9800      	ldr	r0, [sp, #0]
 8008330:	f7f8 f900 	bl	8000534 <__aeabi_i2d>
 8008334:	4632      	mov	r2, r6
 8008336:	463b      	mov	r3, r7
 8008338:	f7f8 fbce 	bl	8000ad8 <__aeabi_dcmpeq>
 800833c:	b910      	cbnz	r0, 8008344 <_dtoa_r+0x184>
 800833e:	9b00      	ldr	r3, [sp, #0]
 8008340:	3b01      	subs	r3, #1
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	9b00      	ldr	r3, [sp, #0]
 8008346:	2b16      	cmp	r3, #22
 8008348:	d85a      	bhi.n	8008400 <_dtoa_r+0x240>
 800834a:	9a00      	ldr	r2, [sp, #0]
 800834c:	4b57      	ldr	r3, [pc, #348]	; (80084ac <_dtoa_r+0x2ec>)
 800834e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	ec51 0b19 	vmov	r0, r1, d9
 800835a:	f7f8 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d050      	beq.n	8008404 <_dtoa_r+0x244>
 8008362:	9b00      	ldr	r3, [sp, #0]
 8008364:	3b01      	subs	r3, #1
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	2300      	movs	r3, #0
 800836a:	930b      	str	r3, [sp, #44]	; 0x2c
 800836c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800836e:	1b5d      	subs	r5, r3, r5
 8008370:	1e6b      	subs	r3, r5, #1
 8008372:	9305      	str	r3, [sp, #20]
 8008374:	bf45      	ittet	mi
 8008376:	f1c5 0301 	rsbmi	r3, r5, #1
 800837a:	9304      	strmi	r3, [sp, #16]
 800837c:	2300      	movpl	r3, #0
 800837e:	2300      	movmi	r3, #0
 8008380:	bf4c      	ite	mi
 8008382:	9305      	strmi	r3, [sp, #20]
 8008384:	9304      	strpl	r3, [sp, #16]
 8008386:	9b00      	ldr	r3, [sp, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	db3d      	blt.n	8008408 <_dtoa_r+0x248>
 800838c:	9b05      	ldr	r3, [sp, #20]
 800838e:	9a00      	ldr	r2, [sp, #0]
 8008390:	920a      	str	r2, [sp, #40]	; 0x28
 8008392:	4413      	add	r3, r2
 8008394:	9305      	str	r3, [sp, #20]
 8008396:	2300      	movs	r3, #0
 8008398:	9307      	str	r3, [sp, #28]
 800839a:	9b06      	ldr	r3, [sp, #24]
 800839c:	2b09      	cmp	r3, #9
 800839e:	f200 8089 	bhi.w	80084b4 <_dtoa_r+0x2f4>
 80083a2:	2b05      	cmp	r3, #5
 80083a4:	bfc4      	itt	gt
 80083a6:	3b04      	subgt	r3, #4
 80083a8:	9306      	strgt	r3, [sp, #24]
 80083aa:	9b06      	ldr	r3, [sp, #24]
 80083ac:	f1a3 0302 	sub.w	r3, r3, #2
 80083b0:	bfcc      	ite	gt
 80083b2:	2500      	movgt	r5, #0
 80083b4:	2501      	movle	r5, #1
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	f200 8087 	bhi.w	80084ca <_dtoa_r+0x30a>
 80083bc:	e8df f003 	tbb	[pc, r3]
 80083c0:	59383a2d 	.word	0x59383a2d
 80083c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083c8:	441d      	add	r5, r3
 80083ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	bfc1      	itttt	gt
 80083d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083da:	fa0b f303 	lslgt.w	r3, fp, r3
 80083de:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083e2:	bfda      	itte	le
 80083e4:	f1c3 0320 	rsble	r3, r3, #32
 80083e8:	fa06 f003 	lslle.w	r0, r6, r3
 80083ec:	4318      	orrgt	r0, r3
 80083ee:	f7f8 f891 	bl	8000514 <__aeabi_ui2d>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4606      	mov	r6, r0
 80083f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083fa:	3d01      	subs	r5, #1
 80083fc:	930e      	str	r3, [sp, #56]	; 0x38
 80083fe:	e76a      	b.n	80082d6 <_dtoa_r+0x116>
 8008400:	2301      	movs	r3, #1
 8008402:	e7b2      	b.n	800836a <_dtoa_r+0x1aa>
 8008404:	900b      	str	r0, [sp, #44]	; 0x2c
 8008406:	e7b1      	b.n	800836c <_dtoa_r+0x1ac>
 8008408:	9b04      	ldr	r3, [sp, #16]
 800840a:	9a00      	ldr	r2, [sp, #0]
 800840c:	1a9b      	subs	r3, r3, r2
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	4253      	negs	r3, r2
 8008412:	9307      	str	r3, [sp, #28]
 8008414:	2300      	movs	r3, #0
 8008416:	930a      	str	r3, [sp, #40]	; 0x28
 8008418:	e7bf      	b.n	800839a <_dtoa_r+0x1da>
 800841a:	2300      	movs	r3, #0
 800841c:	9308      	str	r3, [sp, #32]
 800841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	dc55      	bgt.n	80084d0 <_dtoa_r+0x310>
 8008424:	2301      	movs	r3, #1
 8008426:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800842a:	461a      	mov	r2, r3
 800842c:	9209      	str	r2, [sp, #36]	; 0x24
 800842e:	e00c      	b.n	800844a <_dtoa_r+0x28a>
 8008430:	2301      	movs	r3, #1
 8008432:	e7f3      	b.n	800841c <_dtoa_r+0x25c>
 8008434:	2300      	movs	r3, #0
 8008436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008438:	9308      	str	r3, [sp, #32]
 800843a:	9b00      	ldr	r3, [sp, #0]
 800843c:	4413      	add	r3, r2
 800843e:	9302      	str	r3, [sp, #8]
 8008440:	3301      	adds	r3, #1
 8008442:	2b01      	cmp	r3, #1
 8008444:	9303      	str	r3, [sp, #12]
 8008446:	bfb8      	it	lt
 8008448:	2301      	movlt	r3, #1
 800844a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800844c:	2200      	movs	r2, #0
 800844e:	6042      	str	r2, [r0, #4]
 8008450:	2204      	movs	r2, #4
 8008452:	f102 0614 	add.w	r6, r2, #20
 8008456:	429e      	cmp	r6, r3
 8008458:	6841      	ldr	r1, [r0, #4]
 800845a:	d93d      	bls.n	80084d8 <_dtoa_r+0x318>
 800845c:	4620      	mov	r0, r4
 800845e:	f000 fcb7 	bl	8008dd0 <_Balloc>
 8008462:	9001      	str	r0, [sp, #4]
 8008464:	2800      	cmp	r0, #0
 8008466:	d13b      	bne.n	80084e0 <_dtoa_r+0x320>
 8008468:	4b11      	ldr	r3, [pc, #68]	; (80084b0 <_dtoa_r+0x2f0>)
 800846a:	4602      	mov	r2, r0
 800846c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008470:	e6c0      	b.n	80081f4 <_dtoa_r+0x34>
 8008472:	2301      	movs	r3, #1
 8008474:	e7df      	b.n	8008436 <_dtoa_r+0x276>
 8008476:	bf00      	nop
 8008478:	636f4361 	.word	0x636f4361
 800847c:	3fd287a7 	.word	0x3fd287a7
 8008480:	8b60c8b3 	.word	0x8b60c8b3
 8008484:	3fc68a28 	.word	0x3fc68a28
 8008488:	509f79fb 	.word	0x509f79fb
 800848c:	3fd34413 	.word	0x3fd34413
 8008490:	0800adf9 	.word	0x0800adf9
 8008494:	0800ae10 	.word	0x0800ae10
 8008498:	7ff00000 	.word	0x7ff00000
 800849c:	0800adf5 	.word	0x0800adf5
 80084a0:	0800adec 	.word	0x0800adec
 80084a4:	0800adc9 	.word	0x0800adc9
 80084a8:	3ff80000 	.word	0x3ff80000
 80084ac:	0800af00 	.word	0x0800af00
 80084b0:	0800ae6b 	.word	0x0800ae6b
 80084b4:	2501      	movs	r5, #1
 80084b6:	2300      	movs	r3, #0
 80084b8:	9306      	str	r3, [sp, #24]
 80084ba:	9508      	str	r5, [sp, #32]
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295
 80084c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084c4:	2200      	movs	r2, #0
 80084c6:	2312      	movs	r3, #18
 80084c8:	e7b0      	b.n	800842c <_dtoa_r+0x26c>
 80084ca:	2301      	movs	r3, #1
 80084cc:	9308      	str	r3, [sp, #32]
 80084ce:	e7f5      	b.n	80084bc <_dtoa_r+0x2fc>
 80084d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084d6:	e7b8      	b.n	800844a <_dtoa_r+0x28a>
 80084d8:	3101      	adds	r1, #1
 80084da:	6041      	str	r1, [r0, #4]
 80084dc:	0052      	lsls	r2, r2, #1
 80084de:	e7b8      	b.n	8008452 <_dtoa_r+0x292>
 80084e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e2:	9a01      	ldr	r2, [sp, #4]
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	2b0e      	cmp	r3, #14
 80084ea:	f200 809d 	bhi.w	8008628 <_dtoa_r+0x468>
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	f000 809a 	beq.w	8008628 <_dtoa_r+0x468>
 80084f4:	9b00      	ldr	r3, [sp, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd32      	ble.n	8008560 <_dtoa_r+0x3a0>
 80084fa:	4ab7      	ldr	r2, [pc, #732]	; (80087d8 <_dtoa_r+0x618>)
 80084fc:	f003 030f 	and.w	r3, r3, #15
 8008500:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008504:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008508:	9b00      	ldr	r3, [sp, #0]
 800850a:	05d8      	lsls	r0, r3, #23
 800850c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008510:	d516      	bpl.n	8008540 <_dtoa_r+0x380>
 8008512:	4bb2      	ldr	r3, [pc, #712]	; (80087dc <_dtoa_r+0x61c>)
 8008514:	ec51 0b19 	vmov	r0, r1, d9
 8008518:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800851c:	f7f8 f99e 	bl	800085c <__aeabi_ddiv>
 8008520:	f007 070f 	and.w	r7, r7, #15
 8008524:	4682      	mov	sl, r0
 8008526:	468b      	mov	fp, r1
 8008528:	2503      	movs	r5, #3
 800852a:	4eac      	ldr	r6, [pc, #688]	; (80087dc <_dtoa_r+0x61c>)
 800852c:	b957      	cbnz	r7, 8008544 <_dtoa_r+0x384>
 800852e:	4642      	mov	r2, r8
 8008530:	464b      	mov	r3, r9
 8008532:	4650      	mov	r0, sl
 8008534:	4659      	mov	r1, fp
 8008536:	f7f8 f991 	bl	800085c <__aeabi_ddiv>
 800853a:	4682      	mov	sl, r0
 800853c:	468b      	mov	fp, r1
 800853e:	e028      	b.n	8008592 <_dtoa_r+0x3d2>
 8008540:	2502      	movs	r5, #2
 8008542:	e7f2      	b.n	800852a <_dtoa_r+0x36a>
 8008544:	07f9      	lsls	r1, r7, #31
 8008546:	d508      	bpl.n	800855a <_dtoa_r+0x39a>
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008550:	f7f8 f85a 	bl	8000608 <__aeabi_dmul>
 8008554:	3501      	adds	r5, #1
 8008556:	4680      	mov	r8, r0
 8008558:	4689      	mov	r9, r1
 800855a:	107f      	asrs	r7, r7, #1
 800855c:	3608      	adds	r6, #8
 800855e:	e7e5      	b.n	800852c <_dtoa_r+0x36c>
 8008560:	f000 809b 	beq.w	800869a <_dtoa_r+0x4da>
 8008564:	9b00      	ldr	r3, [sp, #0]
 8008566:	4f9d      	ldr	r7, [pc, #628]	; (80087dc <_dtoa_r+0x61c>)
 8008568:	425e      	negs	r6, r3
 800856a:	4b9b      	ldr	r3, [pc, #620]	; (80087d8 <_dtoa_r+0x618>)
 800856c:	f006 020f 	and.w	r2, r6, #15
 8008570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	ec51 0b19 	vmov	r0, r1, d9
 800857c:	f7f8 f844 	bl	8000608 <__aeabi_dmul>
 8008580:	1136      	asrs	r6, r6, #4
 8008582:	4682      	mov	sl, r0
 8008584:	468b      	mov	fp, r1
 8008586:	2300      	movs	r3, #0
 8008588:	2502      	movs	r5, #2
 800858a:	2e00      	cmp	r6, #0
 800858c:	d17a      	bne.n	8008684 <_dtoa_r+0x4c4>
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1d3      	bne.n	800853a <_dtoa_r+0x37a>
 8008592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 8082 	beq.w	800869e <_dtoa_r+0x4de>
 800859a:	4b91      	ldr	r3, [pc, #580]	; (80087e0 <_dtoa_r+0x620>)
 800859c:	2200      	movs	r2, #0
 800859e:	4650      	mov	r0, sl
 80085a0:	4659      	mov	r1, fp
 80085a2:	f7f8 faa3 	bl	8000aec <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d079      	beq.n	800869e <_dtoa_r+0x4de>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d076      	beq.n	800869e <_dtoa_r+0x4de>
 80085b0:	9b02      	ldr	r3, [sp, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	dd36      	ble.n	8008624 <_dtoa_r+0x464>
 80085b6:	9b00      	ldr	r3, [sp, #0]
 80085b8:	4650      	mov	r0, sl
 80085ba:	4659      	mov	r1, fp
 80085bc:	1e5f      	subs	r7, r3, #1
 80085be:	2200      	movs	r2, #0
 80085c0:	4b88      	ldr	r3, [pc, #544]	; (80087e4 <_dtoa_r+0x624>)
 80085c2:	f7f8 f821 	bl	8000608 <__aeabi_dmul>
 80085c6:	9e02      	ldr	r6, [sp, #8]
 80085c8:	4682      	mov	sl, r0
 80085ca:	468b      	mov	fp, r1
 80085cc:	3501      	adds	r5, #1
 80085ce:	4628      	mov	r0, r5
 80085d0:	f7f7 ffb0 	bl	8000534 <__aeabi_i2d>
 80085d4:	4652      	mov	r2, sl
 80085d6:	465b      	mov	r3, fp
 80085d8:	f7f8 f816 	bl	8000608 <__aeabi_dmul>
 80085dc:	4b82      	ldr	r3, [pc, #520]	; (80087e8 <_dtoa_r+0x628>)
 80085de:	2200      	movs	r2, #0
 80085e0:	f7f7 fe5c 	bl	800029c <__adddf3>
 80085e4:	46d0      	mov	r8, sl
 80085e6:	46d9      	mov	r9, fp
 80085e8:	4682      	mov	sl, r0
 80085ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80085ee:	2e00      	cmp	r6, #0
 80085f0:	d158      	bne.n	80086a4 <_dtoa_r+0x4e4>
 80085f2:	4b7e      	ldr	r3, [pc, #504]	; (80087ec <_dtoa_r+0x62c>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	4640      	mov	r0, r8
 80085f8:	4649      	mov	r1, r9
 80085fa:	f7f7 fe4d 	bl	8000298 <__aeabi_dsub>
 80085fe:	4652      	mov	r2, sl
 8008600:	465b      	mov	r3, fp
 8008602:	4680      	mov	r8, r0
 8008604:	4689      	mov	r9, r1
 8008606:	f7f8 fa8f 	bl	8000b28 <__aeabi_dcmpgt>
 800860a:	2800      	cmp	r0, #0
 800860c:	f040 8295 	bne.w	8008b3a <_dtoa_r+0x97a>
 8008610:	4652      	mov	r2, sl
 8008612:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008616:	4640      	mov	r0, r8
 8008618:	4649      	mov	r1, r9
 800861a:	f7f8 fa67 	bl	8000aec <__aeabi_dcmplt>
 800861e:	2800      	cmp	r0, #0
 8008620:	f040 8289 	bne.w	8008b36 <_dtoa_r+0x976>
 8008624:	ec5b ab19 	vmov	sl, fp, d9
 8008628:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800862a:	2b00      	cmp	r3, #0
 800862c:	f2c0 8148 	blt.w	80088c0 <_dtoa_r+0x700>
 8008630:	9a00      	ldr	r2, [sp, #0]
 8008632:	2a0e      	cmp	r2, #14
 8008634:	f300 8144 	bgt.w	80088c0 <_dtoa_r+0x700>
 8008638:	4b67      	ldr	r3, [pc, #412]	; (80087d8 <_dtoa_r+0x618>)
 800863a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	f280 80d5 	bge.w	80087f4 <_dtoa_r+0x634>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f300 80d1 	bgt.w	80087f4 <_dtoa_r+0x634>
 8008652:	f040 826f 	bne.w	8008b34 <_dtoa_r+0x974>
 8008656:	4b65      	ldr	r3, [pc, #404]	; (80087ec <_dtoa_r+0x62c>)
 8008658:	2200      	movs	r2, #0
 800865a:	4640      	mov	r0, r8
 800865c:	4649      	mov	r1, r9
 800865e:	f7f7 ffd3 	bl	8000608 <__aeabi_dmul>
 8008662:	4652      	mov	r2, sl
 8008664:	465b      	mov	r3, fp
 8008666:	f7f8 fa55 	bl	8000b14 <__aeabi_dcmpge>
 800866a:	9e03      	ldr	r6, [sp, #12]
 800866c:	4637      	mov	r7, r6
 800866e:	2800      	cmp	r0, #0
 8008670:	f040 8245 	bne.w	8008afe <_dtoa_r+0x93e>
 8008674:	9d01      	ldr	r5, [sp, #4]
 8008676:	2331      	movs	r3, #49	; 0x31
 8008678:	f805 3b01 	strb.w	r3, [r5], #1
 800867c:	9b00      	ldr	r3, [sp, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	e240      	b.n	8008b06 <_dtoa_r+0x946>
 8008684:	07f2      	lsls	r2, r6, #31
 8008686:	d505      	bpl.n	8008694 <_dtoa_r+0x4d4>
 8008688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800868c:	f7f7 ffbc 	bl	8000608 <__aeabi_dmul>
 8008690:	3501      	adds	r5, #1
 8008692:	2301      	movs	r3, #1
 8008694:	1076      	asrs	r6, r6, #1
 8008696:	3708      	adds	r7, #8
 8008698:	e777      	b.n	800858a <_dtoa_r+0x3ca>
 800869a:	2502      	movs	r5, #2
 800869c:	e779      	b.n	8008592 <_dtoa_r+0x3d2>
 800869e:	9f00      	ldr	r7, [sp, #0]
 80086a0:	9e03      	ldr	r6, [sp, #12]
 80086a2:	e794      	b.n	80085ce <_dtoa_r+0x40e>
 80086a4:	9901      	ldr	r1, [sp, #4]
 80086a6:	4b4c      	ldr	r3, [pc, #304]	; (80087d8 <_dtoa_r+0x618>)
 80086a8:	4431      	add	r1, r6
 80086aa:	910d      	str	r1, [sp, #52]	; 0x34
 80086ac:	9908      	ldr	r1, [sp, #32]
 80086ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086b6:	2900      	cmp	r1, #0
 80086b8:	d043      	beq.n	8008742 <_dtoa_r+0x582>
 80086ba:	494d      	ldr	r1, [pc, #308]	; (80087f0 <_dtoa_r+0x630>)
 80086bc:	2000      	movs	r0, #0
 80086be:	f7f8 f8cd 	bl	800085c <__aeabi_ddiv>
 80086c2:	4652      	mov	r2, sl
 80086c4:	465b      	mov	r3, fp
 80086c6:	f7f7 fde7 	bl	8000298 <__aeabi_dsub>
 80086ca:	9d01      	ldr	r5, [sp, #4]
 80086cc:	4682      	mov	sl, r0
 80086ce:	468b      	mov	fp, r1
 80086d0:	4649      	mov	r1, r9
 80086d2:	4640      	mov	r0, r8
 80086d4:	f7f8 fa48 	bl	8000b68 <__aeabi_d2iz>
 80086d8:	4606      	mov	r6, r0
 80086da:	f7f7 ff2b 	bl	8000534 <__aeabi_i2d>
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	4640      	mov	r0, r8
 80086e4:	4649      	mov	r1, r9
 80086e6:	f7f7 fdd7 	bl	8000298 <__aeabi_dsub>
 80086ea:	3630      	adds	r6, #48	; 0x30
 80086ec:	f805 6b01 	strb.w	r6, [r5], #1
 80086f0:	4652      	mov	r2, sl
 80086f2:	465b      	mov	r3, fp
 80086f4:	4680      	mov	r8, r0
 80086f6:	4689      	mov	r9, r1
 80086f8:	f7f8 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	d163      	bne.n	80087c8 <_dtoa_r+0x608>
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	4936      	ldr	r1, [pc, #216]	; (80087e0 <_dtoa_r+0x620>)
 8008706:	2000      	movs	r0, #0
 8008708:	f7f7 fdc6 	bl	8000298 <__aeabi_dsub>
 800870c:	4652      	mov	r2, sl
 800870e:	465b      	mov	r3, fp
 8008710:	f7f8 f9ec 	bl	8000aec <__aeabi_dcmplt>
 8008714:	2800      	cmp	r0, #0
 8008716:	f040 80b5 	bne.w	8008884 <_dtoa_r+0x6c4>
 800871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800871c:	429d      	cmp	r5, r3
 800871e:	d081      	beq.n	8008624 <_dtoa_r+0x464>
 8008720:	4b30      	ldr	r3, [pc, #192]	; (80087e4 <_dtoa_r+0x624>)
 8008722:	2200      	movs	r2, #0
 8008724:	4650      	mov	r0, sl
 8008726:	4659      	mov	r1, fp
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	4b2d      	ldr	r3, [pc, #180]	; (80087e4 <_dtoa_r+0x624>)
 800872e:	4682      	mov	sl, r0
 8008730:	468b      	mov	fp, r1
 8008732:	4640      	mov	r0, r8
 8008734:	4649      	mov	r1, r9
 8008736:	2200      	movs	r2, #0
 8008738:	f7f7 ff66 	bl	8000608 <__aeabi_dmul>
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	e7c6      	b.n	80086d0 <_dtoa_r+0x510>
 8008742:	4650      	mov	r0, sl
 8008744:	4659      	mov	r1, fp
 8008746:	f7f7 ff5f 	bl	8000608 <__aeabi_dmul>
 800874a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800874c:	9d01      	ldr	r5, [sp, #4]
 800874e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008750:	4682      	mov	sl, r0
 8008752:	468b      	mov	fp, r1
 8008754:	4649      	mov	r1, r9
 8008756:	4640      	mov	r0, r8
 8008758:	f7f8 fa06 	bl	8000b68 <__aeabi_d2iz>
 800875c:	4606      	mov	r6, r0
 800875e:	f7f7 fee9 	bl	8000534 <__aeabi_i2d>
 8008762:	3630      	adds	r6, #48	; 0x30
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4640      	mov	r0, r8
 800876a:	4649      	mov	r1, r9
 800876c:	f7f7 fd94 	bl	8000298 <__aeabi_dsub>
 8008770:	f805 6b01 	strb.w	r6, [r5], #1
 8008774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008776:	429d      	cmp	r5, r3
 8008778:	4680      	mov	r8, r0
 800877a:	4689      	mov	r9, r1
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	d124      	bne.n	80087cc <_dtoa_r+0x60c>
 8008782:	4b1b      	ldr	r3, [pc, #108]	; (80087f0 <_dtoa_r+0x630>)
 8008784:	4650      	mov	r0, sl
 8008786:	4659      	mov	r1, fp
 8008788:	f7f7 fd88 	bl	800029c <__adddf3>
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	4640      	mov	r0, r8
 8008792:	4649      	mov	r1, r9
 8008794:	f7f8 f9c8 	bl	8000b28 <__aeabi_dcmpgt>
 8008798:	2800      	cmp	r0, #0
 800879a:	d173      	bne.n	8008884 <_dtoa_r+0x6c4>
 800879c:	4652      	mov	r2, sl
 800879e:	465b      	mov	r3, fp
 80087a0:	4913      	ldr	r1, [pc, #76]	; (80087f0 <_dtoa_r+0x630>)
 80087a2:	2000      	movs	r0, #0
 80087a4:	f7f7 fd78 	bl	8000298 <__aeabi_dsub>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4640      	mov	r0, r8
 80087ae:	4649      	mov	r1, r9
 80087b0:	f7f8 f99c 	bl	8000aec <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	f43f af35 	beq.w	8008624 <_dtoa_r+0x464>
 80087ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087bc:	1e6b      	subs	r3, r5, #1
 80087be:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	d0f8      	beq.n	80087ba <_dtoa_r+0x5fa>
 80087c8:	9700      	str	r7, [sp, #0]
 80087ca:	e049      	b.n	8008860 <_dtoa_r+0x6a0>
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <_dtoa_r+0x624>)
 80087ce:	f7f7 ff1b 	bl	8000608 <__aeabi_dmul>
 80087d2:	4680      	mov	r8, r0
 80087d4:	4689      	mov	r9, r1
 80087d6:	e7bd      	b.n	8008754 <_dtoa_r+0x594>
 80087d8:	0800af00 	.word	0x0800af00
 80087dc:	0800aed8 	.word	0x0800aed8
 80087e0:	3ff00000 	.word	0x3ff00000
 80087e4:	40240000 	.word	0x40240000
 80087e8:	401c0000 	.word	0x401c0000
 80087ec:	40140000 	.word	0x40140000
 80087f0:	3fe00000 	.word	0x3fe00000
 80087f4:	9d01      	ldr	r5, [sp, #4]
 80087f6:	4656      	mov	r6, sl
 80087f8:	465f      	mov	r7, fp
 80087fa:	4642      	mov	r2, r8
 80087fc:	464b      	mov	r3, r9
 80087fe:	4630      	mov	r0, r6
 8008800:	4639      	mov	r1, r7
 8008802:	f7f8 f82b 	bl	800085c <__aeabi_ddiv>
 8008806:	f7f8 f9af 	bl	8000b68 <__aeabi_d2iz>
 800880a:	4682      	mov	sl, r0
 800880c:	f7f7 fe92 	bl	8000534 <__aeabi_i2d>
 8008810:	4642      	mov	r2, r8
 8008812:	464b      	mov	r3, r9
 8008814:	f7f7 fef8 	bl	8000608 <__aeabi_dmul>
 8008818:	4602      	mov	r2, r0
 800881a:	460b      	mov	r3, r1
 800881c:	4630      	mov	r0, r6
 800881e:	4639      	mov	r1, r7
 8008820:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008824:	f7f7 fd38 	bl	8000298 <__aeabi_dsub>
 8008828:	f805 6b01 	strb.w	r6, [r5], #1
 800882c:	9e01      	ldr	r6, [sp, #4]
 800882e:	9f03      	ldr	r7, [sp, #12]
 8008830:	1bae      	subs	r6, r5, r6
 8008832:	42b7      	cmp	r7, r6
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	d135      	bne.n	80088a6 <_dtoa_r+0x6e6>
 800883a:	f7f7 fd2f 	bl	800029c <__adddf3>
 800883e:	4642      	mov	r2, r8
 8008840:	464b      	mov	r3, r9
 8008842:	4606      	mov	r6, r0
 8008844:	460f      	mov	r7, r1
 8008846:	f7f8 f96f 	bl	8000b28 <__aeabi_dcmpgt>
 800884a:	b9d0      	cbnz	r0, 8008882 <_dtoa_r+0x6c2>
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f8 f940 	bl	8000ad8 <__aeabi_dcmpeq>
 8008858:	b110      	cbz	r0, 8008860 <_dtoa_r+0x6a0>
 800885a:	f01a 0f01 	tst.w	sl, #1
 800885e:	d110      	bne.n	8008882 <_dtoa_r+0x6c2>
 8008860:	4620      	mov	r0, r4
 8008862:	ee18 1a10 	vmov	r1, s16
 8008866:	f000 faf3 	bl	8008e50 <_Bfree>
 800886a:	2300      	movs	r3, #0
 800886c:	9800      	ldr	r0, [sp, #0]
 800886e:	702b      	strb	r3, [r5, #0]
 8008870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008872:	3001      	adds	r0, #1
 8008874:	6018      	str	r0, [r3, #0]
 8008876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008878:	2b00      	cmp	r3, #0
 800887a:	f43f acf1 	beq.w	8008260 <_dtoa_r+0xa0>
 800887e:	601d      	str	r5, [r3, #0]
 8008880:	e4ee      	b.n	8008260 <_dtoa_r+0xa0>
 8008882:	9f00      	ldr	r7, [sp, #0]
 8008884:	462b      	mov	r3, r5
 8008886:	461d      	mov	r5, r3
 8008888:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800888c:	2a39      	cmp	r2, #57	; 0x39
 800888e:	d106      	bne.n	800889e <_dtoa_r+0x6de>
 8008890:	9a01      	ldr	r2, [sp, #4]
 8008892:	429a      	cmp	r2, r3
 8008894:	d1f7      	bne.n	8008886 <_dtoa_r+0x6c6>
 8008896:	9901      	ldr	r1, [sp, #4]
 8008898:	2230      	movs	r2, #48	; 0x30
 800889a:	3701      	adds	r7, #1
 800889c:	700a      	strb	r2, [r1, #0]
 800889e:	781a      	ldrb	r2, [r3, #0]
 80088a0:	3201      	adds	r2, #1
 80088a2:	701a      	strb	r2, [r3, #0]
 80088a4:	e790      	b.n	80087c8 <_dtoa_r+0x608>
 80088a6:	4ba6      	ldr	r3, [pc, #664]	; (8008b40 <_dtoa_r+0x980>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	f7f7 fead 	bl	8000608 <__aeabi_dmul>
 80088ae:	2200      	movs	r2, #0
 80088b0:	2300      	movs	r3, #0
 80088b2:	4606      	mov	r6, r0
 80088b4:	460f      	mov	r7, r1
 80088b6:	f7f8 f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d09d      	beq.n	80087fa <_dtoa_r+0x63a>
 80088be:	e7cf      	b.n	8008860 <_dtoa_r+0x6a0>
 80088c0:	9a08      	ldr	r2, [sp, #32]
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	f000 80d7 	beq.w	8008a76 <_dtoa_r+0x8b6>
 80088c8:	9a06      	ldr	r2, [sp, #24]
 80088ca:	2a01      	cmp	r2, #1
 80088cc:	f300 80ba 	bgt.w	8008a44 <_dtoa_r+0x884>
 80088d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	f000 80b2 	beq.w	8008a3c <_dtoa_r+0x87c>
 80088d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80088dc:	9e07      	ldr	r6, [sp, #28]
 80088de:	9d04      	ldr	r5, [sp, #16]
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	441a      	add	r2, r3
 80088e4:	9204      	str	r2, [sp, #16]
 80088e6:	9a05      	ldr	r2, [sp, #20]
 80088e8:	2101      	movs	r1, #1
 80088ea:	441a      	add	r2, r3
 80088ec:	4620      	mov	r0, r4
 80088ee:	9205      	str	r2, [sp, #20]
 80088f0:	f000 fb66 	bl	8008fc0 <__i2b>
 80088f4:	4607      	mov	r7, r0
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	dd0c      	ble.n	8008914 <_dtoa_r+0x754>
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dd09      	ble.n	8008914 <_dtoa_r+0x754>
 8008900:	42ab      	cmp	r3, r5
 8008902:	9a04      	ldr	r2, [sp, #16]
 8008904:	bfa8      	it	ge
 8008906:	462b      	movge	r3, r5
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	9204      	str	r2, [sp, #16]
 800890c:	9a05      	ldr	r2, [sp, #20]
 800890e:	1aed      	subs	r5, r5, r3
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	b31b      	cbz	r3, 8008960 <_dtoa_r+0x7a0>
 8008918:	9b08      	ldr	r3, [sp, #32]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 80af 	beq.w	8008a7e <_dtoa_r+0x8be>
 8008920:	2e00      	cmp	r6, #0
 8008922:	dd13      	ble.n	800894c <_dtoa_r+0x78c>
 8008924:	4639      	mov	r1, r7
 8008926:	4632      	mov	r2, r6
 8008928:	4620      	mov	r0, r4
 800892a:	f000 fc09 	bl	8009140 <__pow5mult>
 800892e:	ee18 2a10 	vmov	r2, s16
 8008932:	4601      	mov	r1, r0
 8008934:	4607      	mov	r7, r0
 8008936:	4620      	mov	r0, r4
 8008938:	f000 fb58 	bl	8008fec <__multiply>
 800893c:	ee18 1a10 	vmov	r1, s16
 8008940:	4680      	mov	r8, r0
 8008942:	4620      	mov	r0, r4
 8008944:	f000 fa84 	bl	8008e50 <_Bfree>
 8008948:	ee08 8a10 	vmov	s16, r8
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	1b9a      	subs	r2, r3, r6
 8008950:	d006      	beq.n	8008960 <_dtoa_r+0x7a0>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	4620      	mov	r0, r4
 8008958:	f000 fbf2 	bl	8009140 <__pow5mult>
 800895c:	ee08 0a10 	vmov	s16, r0
 8008960:	2101      	movs	r1, #1
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fb2c 	bl	8008fc0 <__i2b>
 8008968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896a:	2b00      	cmp	r3, #0
 800896c:	4606      	mov	r6, r0
 800896e:	f340 8088 	ble.w	8008a82 <_dtoa_r+0x8c2>
 8008972:	461a      	mov	r2, r3
 8008974:	4601      	mov	r1, r0
 8008976:	4620      	mov	r0, r4
 8008978:	f000 fbe2 	bl	8009140 <__pow5mult>
 800897c:	9b06      	ldr	r3, [sp, #24]
 800897e:	2b01      	cmp	r3, #1
 8008980:	4606      	mov	r6, r0
 8008982:	f340 8081 	ble.w	8008a88 <_dtoa_r+0x8c8>
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	6933      	ldr	r3, [r6, #16]
 800898c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008990:	6918      	ldr	r0, [r3, #16]
 8008992:	f000 fac5 	bl	8008f20 <__hi0bits>
 8008996:	f1c0 0020 	rsb	r0, r0, #32
 800899a:	9b05      	ldr	r3, [sp, #20]
 800899c:	4418      	add	r0, r3
 800899e:	f010 001f 	ands.w	r0, r0, #31
 80089a2:	f000 8092 	beq.w	8008aca <_dtoa_r+0x90a>
 80089a6:	f1c0 0320 	rsb	r3, r0, #32
 80089aa:	2b04      	cmp	r3, #4
 80089ac:	f340 808a 	ble.w	8008ac4 <_dtoa_r+0x904>
 80089b0:	f1c0 001c 	rsb	r0, r0, #28
 80089b4:	9b04      	ldr	r3, [sp, #16]
 80089b6:	4403      	add	r3, r0
 80089b8:	9304      	str	r3, [sp, #16]
 80089ba:	9b05      	ldr	r3, [sp, #20]
 80089bc:	4403      	add	r3, r0
 80089be:	4405      	add	r5, r0
 80089c0:	9305      	str	r3, [sp, #20]
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	dd07      	ble.n	80089d8 <_dtoa_r+0x818>
 80089c8:	ee18 1a10 	vmov	r1, s16
 80089cc:	461a      	mov	r2, r3
 80089ce:	4620      	mov	r0, r4
 80089d0:	f000 fc10 	bl	80091f4 <__lshift>
 80089d4:	ee08 0a10 	vmov	s16, r0
 80089d8:	9b05      	ldr	r3, [sp, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	dd05      	ble.n	80089ea <_dtoa_r+0x82a>
 80089de:	4631      	mov	r1, r6
 80089e0:	461a      	mov	r2, r3
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fc06 	bl	80091f4 <__lshift>
 80089e8:	4606      	mov	r6, r0
 80089ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d06e      	beq.n	8008ace <_dtoa_r+0x90e>
 80089f0:	ee18 0a10 	vmov	r0, s16
 80089f4:	4631      	mov	r1, r6
 80089f6:	f000 fc6d 	bl	80092d4 <__mcmp>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	da67      	bge.n	8008ace <_dtoa_r+0x90e>
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	ee18 1a10 	vmov	r1, s16
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	220a      	movs	r2, #10
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f000 fa41 	bl	8008e94 <__multadd>
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	ee08 0a10 	vmov	s16, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 81b1 	beq.w	8008d80 <_dtoa_r+0xbc0>
 8008a1e:	2300      	movs	r3, #0
 8008a20:	4639      	mov	r1, r7
 8008a22:	220a      	movs	r2, #10
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fa35 	bl	8008e94 <__multadd>
 8008a2a:	9b02      	ldr	r3, [sp, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	4607      	mov	r7, r0
 8008a30:	f300 808e 	bgt.w	8008b50 <_dtoa_r+0x990>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	dc51      	bgt.n	8008ade <_dtoa_r+0x91e>
 8008a3a:	e089      	b.n	8008b50 <_dtoa_r+0x990>
 8008a3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a3e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a42:	e74b      	b.n	80088dc <_dtoa_r+0x71c>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	1e5e      	subs	r6, r3, #1
 8008a48:	9b07      	ldr	r3, [sp, #28]
 8008a4a:	42b3      	cmp	r3, r6
 8008a4c:	bfbf      	itttt	lt
 8008a4e:	9b07      	ldrlt	r3, [sp, #28]
 8008a50:	9607      	strlt	r6, [sp, #28]
 8008a52:	1af2      	sublt	r2, r6, r3
 8008a54:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a56:	bfb6      	itet	lt
 8008a58:	189b      	addlt	r3, r3, r2
 8008a5a:	1b9e      	subge	r6, r3, r6
 8008a5c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008a5e:	9b03      	ldr	r3, [sp, #12]
 8008a60:	bfb8      	it	lt
 8008a62:	2600      	movlt	r6, #0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bfb7      	itett	lt
 8008a68:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008a6c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008a70:	1a9d      	sublt	r5, r3, r2
 8008a72:	2300      	movlt	r3, #0
 8008a74:	e734      	b.n	80088e0 <_dtoa_r+0x720>
 8008a76:	9e07      	ldr	r6, [sp, #28]
 8008a78:	9d04      	ldr	r5, [sp, #16]
 8008a7a:	9f08      	ldr	r7, [sp, #32]
 8008a7c:	e73b      	b.n	80088f6 <_dtoa_r+0x736>
 8008a7e:	9a07      	ldr	r2, [sp, #28]
 8008a80:	e767      	b.n	8008952 <_dtoa_r+0x792>
 8008a82:	9b06      	ldr	r3, [sp, #24]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	dc18      	bgt.n	8008aba <_dtoa_r+0x8fa>
 8008a88:	f1ba 0f00 	cmp.w	sl, #0
 8008a8c:	d115      	bne.n	8008aba <_dtoa_r+0x8fa>
 8008a8e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a92:	b993      	cbnz	r3, 8008aba <_dtoa_r+0x8fa>
 8008a94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a98:	0d1b      	lsrs	r3, r3, #20
 8008a9a:	051b      	lsls	r3, r3, #20
 8008a9c:	b183      	cbz	r3, 8008ac0 <_dtoa_r+0x900>
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	9304      	str	r3, [sp, #16]
 8008aa4:	9b05      	ldr	r3, [sp, #20]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	9305      	str	r3, [sp, #20]
 8008aaa:	f04f 0801 	mov.w	r8, #1
 8008aae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f af6a 	bne.w	800898a <_dtoa_r+0x7ca>
 8008ab6:	2001      	movs	r0, #1
 8008ab8:	e76f      	b.n	800899a <_dtoa_r+0x7da>
 8008aba:	f04f 0800 	mov.w	r8, #0
 8008abe:	e7f6      	b.n	8008aae <_dtoa_r+0x8ee>
 8008ac0:	4698      	mov	r8, r3
 8008ac2:	e7f4      	b.n	8008aae <_dtoa_r+0x8ee>
 8008ac4:	f43f af7d 	beq.w	80089c2 <_dtoa_r+0x802>
 8008ac8:	4618      	mov	r0, r3
 8008aca:	301c      	adds	r0, #28
 8008acc:	e772      	b.n	80089b4 <_dtoa_r+0x7f4>
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	dc37      	bgt.n	8008b44 <_dtoa_r+0x984>
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	dd34      	ble.n	8008b44 <_dtoa_r+0x984>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	9302      	str	r3, [sp, #8]
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	b96b      	cbnz	r3, 8008afe <_dtoa_r+0x93e>
 8008ae2:	4631      	mov	r1, r6
 8008ae4:	2205      	movs	r2, #5
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 f9d4 	bl	8008e94 <__multadd>
 8008aec:	4601      	mov	r1, r0
 8008aee:	4606      	mov	r6, r0
 8008af0:	ee18 0a10 	vmov	r0, s16
 8008af4:	f000 fbee 	bl	80092d4 <__mcmp>
 8008af8:	2800      	cmp	r0, #0
 8008afa:	f73f adbb 	bgt.w	8008674 <_dtoa_r+0x4b4>
 8008afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b00:	9d01      	ldr	r5, [sp, #4]
 8008b02:	43db      	mvns	r3, r3
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	f04f 0800 	mov.w	r8, #0
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f000 f99f 	bl	8008e50 <_Bfree>
 8008b12:	2f00      	cmp	r7, #0
 8008b14:	f43f aea4 	beq.w	8008860 <_dtoa_r+0x6a0>
 8008b18:	f1b8 0f00 	cmp.w	r8, #0
 8008b1c:	d005      	beq.n	8008b2a <_dtoa_r+0x96a>
 8008b1e:	45b8      	cmp	r8, r7
 8008b20:	d003      	beq.n	8008b2a <_dtoa_r+0x96a>
 8008b22:	4641      	mov	r1, r8
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f993 	bl	8008e50 <_Bfree>
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 f98f 	bl	8008e50 <_Bfree>
 8008b32:	e695      	b.n	8008860 <_dtoa_r+0x6a0>
 8008b34:	2600      	movs	r6, #0
 8008b36:	4637      	mov	r7, r6
 8008b38:	e7e1      	b.n	8008afe <_dtoa_r+0x93e>
 8008b3a:	9700      	str	r7, [sp, #0]
 8008b3c:	4637      	mov	r7, r6
 8008b3e:	e599      	b.n	8008674 <_dtoa_r+0x4b4>
 8008b40:	40240000 	.word	0x40240000
 8008b44:	9b08      	ldr	r3, [sp, #32]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 80ca 	beq.w	8008ce0 <_dtoa_r+0xb20>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	dd05      	ble.n	8008b60 <_dtoa_r+0x9a0>
 8008b54:	4639      	mov	r1, r7
 8008b56:	462a      	mov	r2, r5
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fb4b 	bl	80091f4 <__lshift>
 8008b5e:	4607      	mov	r7, r0
 8008b60:	f1b8 0f00 	cmp.w	r8, #0
 8008b64:	d05b      	beq.n	8008c1e <_dtoa_r+0xa5e>
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 f931 	bl	8008dd0 <_Balloc>
 8008b6e:	4605      	mov	r5, r0
 8008b70:	b928      	cbnz	r0, 8008b7e <_dtoa_r+0x9be>
 8008b72:	4b87      	ldr	r3, [pc, #540]	; (8008d90 <_dtoa_r+0xbd0>)
 8008b74:	4602      	mov	r2, r0
 8008b76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b7a:	f7ff bb3b 	b.w	80081f4 <_dtoa_r+0x34>
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	3202      	adds	r2, #2
 8008b82:	0092      	lsls	r2, r2, #2
 8008b84:	f107 010c 	add.w	r1, r7, #12
 8008b88:	300c      	adds	r0, #12
 8008b8a:	f000 f913 	bl	8008db4 <memcpy>
 8008b8e:	2201      	movs	r2, #1
 8008b90:	4629      	mov	r1, r5
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 fb2e 	bl	80091f4 <__lshift>
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	f103 0901 	add.w	r9, r3, #1
 8008b9e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	9305      	str	r3, [sp, #20]
 8008ba6:	f00a 0301 	and.w	r3, sl, #1
 8008baa:	46b8      	mov	r8, r7
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	4607      	mov	r7, r0
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	ee18 0a10 	vmov	r0, s16
 8008bb6:	f7ff fa75 	bl	80080a4 <quorem>
 8008bba:	4641      	mov	r1, r8
 8008bbc:	9002      	str	r0, [sp, #8]
 8008bbe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008bc2:	ee18 0a10 	vmov	r0, s16
 8008bc6:	f000 fb85 	bl	80092d4 <__mcmp>
 8008bca:	463a      	mov	r2, r7
 8008bcc:	9003      	str	r0, [sp, #12]
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f000 fb9b 	bl	800930c <__mdiff>
 8008bd6:	68c2      	ldr	r2, [r0, #12]
 8008bd8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008bdc:	4605      	mov	r5, r0
 8008bde:	bb02      	cbnz	r2, 8008c22 <_dtoa_r+0xa62>
 8008be0:	4601      	mov	r1, r0
 8008be2:	ee18 0a10 	vmov	r0, s16
 8008be6:	f000 fb75 	bl	80092d4 <__mcmp>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	9207      	str	r2, [sp, #28]
 8008bf2:	f000 f92d 	bl	8008e50 <_Bfree>
 8008bf6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008bfa:	ea43 0102 	orr.w	r1, r3, r2
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	430b      	orrs	r3, r1
 8008c02:	464d      	mov	r5, r9
 8008c04:	d10f      	bne.n	8008c26 <_dtoa_r+0xa66>
 8008c06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c0a:	d02a      	beq.n	8008c62 <_dtoa_r+0xaa2>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dd02      	ble.n	8008c18 <_dtoa_r+0xa58>
 8008c12:	9b02      	ldr	r3, [sp, #8]
 8008c14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c18:	f88b a000 	strb.w	sl, [fp]
 8008c1c:	e775      	b.n	8008b0a <_dtoa_r+0x94a>
 8008c1e:	4638      	mov	r0, r7
 8008c20:	e7ba      	b.n	8008b98 <_dtoa_r+0x9d8>
 8008c22:	2201      	movs	r2, #1
 8008c24:	e7e2      	b.n	8008bec <_dtoa_r+0xa2c>
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	db04      	blt.n	8008c36 <_dtoa_r+0xa76>
 8008c2c:	9906      	ldr	r1, [sp, #24]
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	9904      	ldr	r1, [sp, #16]
 8008c32:	430b      	orrs	r3, r1
 8008c34:	d122      	bne.n	8008c7c <_dtoa_r+0xabc>
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	ddee      	ble.n	8008c18 <_dtoa_r+0xa58>
 8008c3a:	ee18 1a10 	vmov	r1, s16
 8008c3e:	2201      	movs	r2, #1
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 fad7 	bl	80091f4 <__lshift>
 8008c46:	4631      	mov	r1, r6
 8008c48:	ee08 0a10 	vmov	s16, r0
 8008c4c:	f000 fb42 	bl	80092d4 <__mcmp>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	dc03      	bgt.n	8008c5c <_dtoa_r+0xa9c>
 8008c54:	d1e0      	bne.n	8008c18 <_dtoa_r+0xa58>
 8008c56:	f01a 0f01 	tst.w	sl, #1
 8008c5a:	d0dd      	beq.n	8008c18 <_dtoa_r+0xa58>
 8008c5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c60:	d1d7      	bne.n	8008c12 <_dtoa_r+0xa52>
 8008c62:	2339      	movs	r3, #57	; 0x39
 8008c64:	f88b 3000 	strb.w	r3, [fp]
 8008c68:	462b      	mov	r3, r5
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c72:	2a39      	cmp	r2, #57	; 0x39
 8008c74:	d071      	beq.n	8008d5a <_dtoa_r+0xb9a>
 8008c76:	3201      	adds	r2, #1
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	e746      	b.n	8008b0a <_dtoa_r+0x94a>
 8008c7c:	2a00      	cmp	r2, #0
 8008c7e:	dd07      	ble.n	8008c90 <_dtoa_r+0xad0>
 8008c80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c84:	d0ed      	beq.n	8008c62 <_dtoa_r+0xaa2>
 8008c86:	f10a 0301 	add.w	r3, sl, #1
 8008c8a:	f88b 3000 	strb.w	r3, [fp]
 8008c8e:	e73c      	b.n	8008b0a <_dtoa_r+0x94a>
 8008c90:	9b05      	ldr	r3, [sp, #20]
 8008c92:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008c96:	4599      	cmp	r9, r3
 8008c98:	d047      	beq.n	8008d2a <_dtoa_r+0xb6a>
 8008c9a:	ee18 1a10 	vmov	r1, s16
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	220a      	movs	r2, #10
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f000 f8f6 	bl	8008e94 <__multadd>
 8008ca8:	45b8      	cmp	r8, r7
 8008caa:	ee08 0a10 	vmov	s16, r0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	f04f 020a 	mov.w	r2, #10
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	4620      	mov	r0, r4
 8008cba:	d106      	bne.n	8008cca <_dtoa_r+0xb0a>
 8008cbc:	f000 f8ea 	bl	8008e94 <__multadd>
 8008cc0:	4680      	mov	r8, r0
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	f109 0901 	add.w	r9, r9, #1
 8008cc8:	e772      	b.n	8008bb0 <_dtoa_r+0x9f0>
 8008cca:	f000 f8e3 	bl	8008e94 <__multadd>
 8008cce:	4639      	mov	r1, r7
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	220a      	movs	r2, #10
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 f8dc 	bl	8008e94 <__multadd>
 8008cdc:	4607      	mov	r7, r0
 8008cde:	e7f1      	b.n	8008cc4 <_dtoa_r+0xb04>
 8008ce0:	9b03      	ldr	r3, [sp, #12]
 8008ce2:	9302      	str	r3, [sp, #8]
 8008ce4:	9d01      	ldr	r5, [sp, #4]
 8008ce6:	ee18 0a10 	vmov	r0, s16
 8008cea:	4631      	mov	r1, r6
 8008cec:	f7ff f9da 	bl	80080a4 <quorem>
 8008cf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	f805 ab01 	strb.w	sl, [r5], #1
 8008cfa:	1aea      	subs	r2, r5, r3
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	dd09      	ble.n	8008d16 <_dtoa_r+0xb56>
 8008d02:	ee18 1a10 	vmov	r1, s16
 8008d06:	2300      	movs	r3, #0
 8008d08:	220a      	movs	r2, #10
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 f8c2 	bl	8008e94 <__multadd>
 8008d10:	ee08 0a10 	vmov	s16, r0
 8008d14:	e7e7      	b.n	8008ce6 <_dtoa_r+0xb26>
 8008d16:	9b02      	ldr	r3, [sp, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	bfc8      	it	gt
 8008d1c:	461d      	movgt	r5, r3
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	bfd8      	it	le
 8008d22:	2501      	movle	r5, #1
 8008d24:	441d      	add	r5, r3
 8008d26:	f04f 0800 	mov.w	r8, #0
 8008d2a:	ee18 1a10 	vmov	r1, s16
 8008d2e:	2201      	movs	r2, #1
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fa5f 	bl	80091f4 <__lshift>
 8008d36:	4631      	mov	r1, r6
 8008d38:	ee08 0a10 	vmov	s16, r0
 8008d3c:	f000 faca 	bl	80092d4 <__mcmp>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	dc91      	bgt.n	8008c68 <_dtoa_r+0xaa8>
 8008d44:	d102      	bne.n	8008d4c <_dtoa_r+0xb8c>
 8008d46:	f01a 0f01 	tst.w	sl, #1
 8008d4a:	d18d      	bne.n	8008c68 <_dtoa_r+0xaa8>
 8008d4c:	462b      	mov	r3, r5
 8008d4e:	461d      	mov	r5, r3
 8008d50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d54:	2a30      	cmp	r2, #48	; 0x30
 8008d56:	d0fa      	beq.n	8008d4e <_dtoa_r+0xb8e>
 8008d58:	e6d7      	b.n	8008b0a <_dtoa_r+0x94a>
 8008d5a:	9a01      	ldr	r2, [sp, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d184      	bne.n	8008c6a <_dtoa_r+0xaaa>
 8008d60:	9b00      	ldr	r3, [sp, #0]
 8008d62:	3301      	adds	r3, #1
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	2331      	movs	r3, #49	; 0x31
 8008d68:	7013      	strb	r3, [r2, #0]
 8008d6a:	e6ce      	b.n	8008b0a <_dtoa_r+0x94a>
 8008d6c:	4b09      	ldr	r3, [pc, #36]	; (8008d94 <_dtoa_r+0xbd4>)
 8008d6e:	f7ff ba95 	b.w	800829c <_dtoa_r+0xdc>
 8008d72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f47f aa6e 	bne.w	8008256 <_dtoa_r+0x96>
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <_dtoa_r+0xbd8>)
 8008d7c:	f7ff ba8e 	b.w	800829c <_dtoa_r+0xdc>
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dcae      	bgt.n	8008ce4 <_dtoa_r+0xb24>
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	f73f aea8 	bgt.w	8008ade <_dtoa_r+0x91e>
 8008d8e:	e7a9      	b.n	8008ce4 <_dtoa_r+0xb24>
 8008d90:	0800ae6b 	.word	0x0800ae6b
 8008d94:	0800adc8 	.word	0x0800adc8
 8008d98:	0800adec 	.word	0x0800adec

08008d9c <_localeconv_r>:
 8008d9c:	4800      	ldr	r0, [pc, #0]	; (8008da0 <_localeconv_r+0x4>)
 8008d9e:	4770      	bx	lr
 8008da0:	20000168 	.word	0x20000168

08008da4 <malloc>:
 8008da4:	4b02      	ldr	r3, [pc, #8]	; (8008db0 <malloc+0xc>)
 8008da6:	4601      	mov	r1, r0
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	f000 bc17 	b.w	80095dc <_malloc_r>
 8008dae:	bf00      	nop
 8008db0:	20000014 	.word	0x20000014

08008db4 <memcpy>:
 8008db4:	440a      	add	r2, r1
 8008db6:	4291      	cmp	r1, r2
 8008db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008dbc:	d100      	bne.n	8008dc0 <memcpy+0xc>
 8008dbe:	4770      	bx	lr
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	d1f9      	bne.n	8008dc2 <memcpy+0xe>
 8008dce:	bd10      	pop	{r4, pc}

08008dd0 <_Balloc>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dd4:	4604      	mov	r4, r0
 8008dd6:	460d      	mov	r5, r1
 8008dd8:	b976      	cbnz	r6, 8008df8 <_Balloc+0x28>
 8008dda:	2010      	movs	r0, #16
 8008ddc:	f7ff ffe2 	bl	8008da4 <malloc>
 8008de0:	4602      	mov	r2, r0
 8008de2:	6260      	str	r0, [r4, #36]	; 0x24
 8008de4:	b920      	cbnz	r0, 8008df0 <_Balloc+0x20>
 8008de6:	4b18      	ldr	r3, [pc, #96]	; (8008e48 <_Balloc+0x78>)
 8008de8:	4818      	ldr	r0, [pc, #96]	; (8008e4c <_Balloc+0x7c>)
 8008dea:	2166      	movs	r1, #102	; 0x66
 8008dec:	f000 fdd6 	bl	800999c <__assert_func>
 8008df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008df4:	6006      	str	r6, [r0, #0]
 8008df6:	60c6      	str	r6, [r0, #12]
 8008df8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dfa:	68f3      	ldr	r3, [r6, #12]
 8008dfc:	b183      	cbz	r3, 8008e20 <_Balloc+0x50>
 8008dfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e06:	b9b8      	cbnz	r0, 8008e38 <_Balloc+0x68>
 8008e08:	2101      	movs	r1, #1
 8008e0a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e0e:	1d72      	adds	r2, r6, #5
 8008e10:	0092      	lsls	r2, r2, #2
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fb60 	bl	80094d8 <_calloc_r>
 8008e18:	b160      	cbz	r0, 8008e34 <_Balloc+0x64>
 8008e1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e1e:	e00e      	b.n	8008e3e <_Balloc+0x6e>
 8008e20:	2221      	movs	r2, #33	; 0x21
 8008e22:	2104      	movs	r1, #4
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 fb57 	bl	80094d8 <_calloc_r>
 8008e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e2c:	60f0      	str	r0, [r6, #12]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e4      	bne.n	8008dfe <_Balloc+0x2e>
 8008e34:	2000      	movs	r0, #0
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	6802      	ldr	r2, [r0, #0]
 8008e3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e44:	e7f7      	b.n	8008e36 <_Balloc+0x66>
 8008e46:	bf00      	nop
 8008e48:	0800adf9 	.word	0x0800adf9
 8008e4c:	0800ae7c 	.word	0x0800ae7c

08008e50 <_Bfree>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e54:	4605      	mov	r5, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b976      	cbnz	r6, 8008e78 <_Bfree+0x28>
 8008e5a:	2010      	movs	r0, #16
 8008e5c:	f7ff ffa2 	bl	8008da4 <malloc>
 8008e60:	4602      	mov	r2, r0
 8008e62:	6268      	str	r0, [r5, #36]	; 0x24
 8008e64:	b920      	cbnz	r0, 8008e70 <_Bfree+0x20>
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <_Bfree+0x3c>)
 8008e68:	4809      	ldr	r0, [pc, #36]	; (8008e90 <_Bfree+0x40>)
 8008e6a:	218a      	movs	r1, #138	; 0x8a
 8008e6c:	f000 fd96 	bl	800999c <__assert_func>
 8008e70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e74:	6006      	str	r6, [r0, #0]
 8008e76:	60c6      	str	r6, [r0, #12]
 8008e78:	b13c      	cbz	r4, 8008e8a <_Bfree+0x3a>
 8008e7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e84:	6021      	str	r1, [r4, #0]
 8008e86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	0800adf9 	.word	0x0800adf9
 8008e90:	0800ae7c 	.word	0x0800ae7c

08008e94 <__multadd>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	690d      	ldr	r5, [r1, #16]
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	460c      	mov	r4, r1
 8008e9e:	461e      	mov	r6, r3
 8008ea0:	f101 0c14 	add.w	ip, r1, #20
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eaa:	b299      	uxth	r1, r3
 8008eac:	fb02 6101 	mla	r1, r2, r1, r6
 8008eb0:	0c1e      	lsrs	r6, r3, #16
 8008eb2:	0c0b      	lsrs	r3, r1, #16
 8008eb4:	fb02 3306 	mla	r3, r2, r6, r3
 8008eb8:	b289      	uxth	r1, r1
 8008eba:	3001      	adds	r0, #1
 8008ebc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ec0:	4285      	cmp	r5, r0
 8008ec2:	f84c 1b04 	str.w	r1, [ip], #4
 8008ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008eca:	dcec      	bgt.n	8008ea6 <__multadd+0x12>
 8008ecc:	b30e      	cbz	r6, 8008f12 <__multadd+0x7e>
 8008ece:	68a3      	ldr	r3, [r4, #8]
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dc19      	bgt.n	8008f08 <__multadd+0x74>
 8008ed4:	6861      	ldr	r1, [r4, #4]
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	3101      	adds	r1, #1
 8008eda:	f7ff ff79 	bl	8008dd0 <_Balloc>
 8008ede:	4680      	mov	r8, r0
 8008ee0:	b928      	cbnz	r0, 8008eee <__multadd+0x5a>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <__multadd+0x84>)
 8008ee6:	480d      	ldr	r0, [pc, #52]	; (8008f1c <__multadd+0x88>)
 8008ee8:	21b5      	movs	r1, #181	; 0xb5
 8008eea:	f000 fd57 	bl	800999c <__assert_func>
 8008eee:	6922      	ldr	r2, [r4, #16]
 8008ef0:	3202      	adds	r2, #2
 8008ef2:	f104 010c 	add.w	r1, r4, #12
 8008ef6:	0092      	lsls	r2, r2, #2
 8008ef8:	300c      	adds	r0, #12
 8008efa:	f7ff ff5b 	bl	8008db4 <memcpy>
 8008efe:	4621      	mov	r1, r4
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ffa5 	bl	8008e50 <_Bfree>
 8008f06:	4644      	mov	r4, r8
 8008f08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	615e      	str	r6, [r3, #20]
 8008f10:	6125      	str	r5, [r4, #16]
 8008f12:	4620      	mov	r0, r4
 8008f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f18:	0800ae6b 	.word	0x0800ae6b
 8008f1c:	0800ae7c 	.word	0x0800ae7c

08008f20 <__hi0bits>:
 8008f20:	0c03      	lsrs	r3, r0, #16
 8008f22:	041b      	lsls	r3, r3, #16
 8008f24:	b9d3      	cbnz	r3, 8008f5c <__hi0bits+0x3c>
 8008f26:	0400      	lsls	r0, r0, #16
 8008f28:	2310      	movs	r3, #16
 8008f2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008f2e:	bf04      	itt	eq
 8008f30:	0200      	lsleq	r0, r0, #8
 8008f32:	3308      	addeq	r3, #8
 8008f34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008f38:	bf04      	itt	eq
 8008f3a:	0100      	lsleq	r0, r0, #4
 8008f3c:	3304      	addeq	r3, #4
 8008f3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008f42:	bf04      	itt	eq
 8008f44:	0080      	lsleq	r0, r0, #2
 8008f46:	3302      	addeq	r3, #2
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	db05      	blt.n	8008f58 <__hi0bits+0x38>
 8008f4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008f50:	f103 0301 	add.w	r3, r3, #1
 8008f54:	bf08      	it	eq
 8008f56:	2320      	moveq	r3, #32
 8008f58:	4618      	mov	r0, r3
 8008f5a:	4770      	bx	lr
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	e7e4      	b.n	8008f2a <__hi0bits+0xa>

08008f60 <__lo0bits>:
 8008f60:	6803      	ldr	r3, [r0, #0]
 8008f62:	f013 0207 	ands.w	r2, r3, #7
 8008f66:	4601      	mov	r1, r0
 8008f68:	d00b      	beq.n	8008f82 <__lo0bits+0x22>
 8008f6a:	07da      	lsls	r2, r3, #31
 8008f6c:	d423      	bmi.n	8008fb6 <__lo0bits+0x56>
 8008f6e:	0798      	lsls	r0, r3, #30
 8008f70:	bf49      	itett	mi
 8008f72:	085b      	lsrmi	r3, r3, #1
 8008f74:	089b      	lsrpl	r3, r3, #2
 8008f76:	2001      	movmi	r0, #1
 8008f78:	600b      	strmi	r3, [r1, #0]
 8008f7a:	bf5c      	itt	pl
 8008f7c:	600b      	strpl	r3, [r1, #0]
 8008f7e:	2002      	movpl	r0, #2
 8008f80:	4770      	bx	lr
 8008f82:	b298      	uxth	r0, r3
 8008f84:	b9a8      	cbnz	r0, 8008fb2 <__lo0bits+0x52>
 8008f86:	0c1b      	lsrs	r3, r3, #16
 8008f88:	2010      	movs	r0, #16
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	b90a      	cbnz	r2, 8008f92 <__lo0bits+0x32>
 8008f8e:	3008      	adds	r0, #8
 8008f90:	0a1b      	lsrs	r3, r3, #8
 8008f92:	071a      	lsls	r2, r3, #28
 8008f94:	bf04      	itt	eq
 8008f96:	091b      	lsreq	r3, r3, #4
 8008f98:	3004      	addeq	r0, #4
 8008f9a:	079a      	lsls	r2, r3, #30
 8008f9c:	bf04      	itt	eq
 8008f9e:	089b      	lsreq	r3, r3, #2
 8008fa0:	3002      	addeq	r0, #2
 8008fa2:	07da      	lsls	r2, r3, #31
 8008fa4:	d403      	bmi.n	8008fae <__lo0bits+0x4e>
 8008fa6:	085b      	lsrs	r3, r3, #1
 8008fa8:	f100 0001 	add.w	r0, r0, #1
 8008fac:	d005      	beq.n	8008fba <__lo0bits+0x5a>
 8008fae:	600b      	str	r3, [r1, #0]
 8008fb0:	4770      	bx	lr
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	e7e9      	b.n	8008f8a <__lo0bits+0x2a>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	4770      	bx	lr
 8008fba:	2020      	movs	r0, #32
 8008fbc:	4770      	bx	lr
	...

08008fc0 <__i2b>:
 8008fc0:	b510      	push	{r4, lr}
 8008fc2:	460c      	mov	r4, r1
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	f7ff ff03 	bl	8008dd0 <_Balloc>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	b928      	cbnz	r0, 8008fda <__i2b+0x1a>
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <__i2b+0x24>)
 8008fd0:	4805      	ldr	r0, [pc, #20]	; (8008fe8 <__i2b+0x28>)
 8008fd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008fd6:	f000 fce1 	bl	800999c <__assert_func>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	6144      	str	r4, [r0, #20]
 8008fde:	6103      	str	r3, [r0, #16]
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	bf00      	nop
 8008fe4:	0800ae6b 	.word	0x0800ae6b
 8008fe8:	0800ae7c 	.word	0x0800ae7c

08008fec <__multiply>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	4691      	mov	r9, r2
 8008ff2:	690a      	ldr	r2, [r1, #16]
 8008ff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	bfb8      	it	lt
 8008ffc:	460b      	movlt	r3, r1
 8008ffe:	460c      	mov	r4, r1
 8009000:	bfbc      	itt	lt
 8009002:	464c      	movlt	r4, r9
 8009004:	4699      	movlt	r9, r3
 8009006:	6927      	ldr	r7, [r4, #16]
 8009008:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800900c:	68a3      	ldr	r3, [r4, #8]
 800900e:	6861      	ldr	r1, [r4, #4]
 8009010:	eb07 060a 	add.w	r6, r7, sl
 8009014:	42b3      	cmp	r3, r6
 8009016:	b085      	sub	sp, #20
 8009018:	bfb8      	it	lt
 800901a:	3101      	addlt	r1, #1
 800901c:	f7ff fed8 	bl	8008dd0 <_Balloc>
 8009020:	b930      	cbnz	r0, 8009030 <__multiply+0x44>
 8009022:	4602      	mov	r2, r0
 8009024:	4b44      	ldr	r3, [pc, #272]	; (8009138 <__multiply+0x14c>)
 8009026:	4845      	ldr	r0, [pc, #276]	; (800913c <__multiply+0x150>)
 8009028:	f240 115d 	movw	r1, #349	; 0x15d
 800902c:	f000 fcb6 	bl	800999c <__assert_func>
 8009030:	f100 0514 	add.w	r5, r0, #20
 8009034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009038:	462b      	mov	r3, r5
 800903a:	2200      	movs	r2, #0
 800903c:	4543      	cmp	r3, r8
 800903e:	d321      	bcc.n	8009084 <__multiply+0x98>
 8009040:	f104 0314 	add.w	r3, r4, #20
 8009044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009048:	f109 0314 	add.w	r3, r9, #20
 800904c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009050:	9202      	str	r2, [sp, #8]
 8009052:	1b3a      	subs	r2, r7, r4
 8009054:	3a15      	subs	r2, #21
 8009056:	f022 0203 	bic.w	r2, r2, #3
 800905a:	3204      	adds	r2, #4
 800905c:	f104 0115 	add.w	r1, r4, #21
 8009060:	428f      	cmp	r7, r1
 8009062:	bf38      	it	cc
 8009064:	2204      	movcc	r2, #4
 8009066:	9201      	str	r2, [sp, #4]
 8009068:	9a02      	ldr	r2, [sp, #8]
 800906a:	9303      	str	r3, [sp, #12]
 800906c:	429a      	cmp	r2, r3
 800906e:	d80c      	bhi.n	800908a <__multiply+0x9e>
 8009070:	2e00      	cmp	r6, #0
 8009072:	dd03      	ble.n	800907c <__multiply+0x90>
 8009074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05a      	beq.n	8009132 <__multiply+0x146>
 800907c:	6106      	str	r6, [r0, #16]
 800907e:	b005      	add	sp, #20
 8009080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009084:	f843 2b04 	str.w	r2, [r3], #4
 8009088:	e7d8      	b.n	800903c <__multiply+0x50>
 800908a:	f8b3 a000 	ldrh.w	sl, [r3]
 800908e:	f1ba 0f00 	cmp.w	sl, #0
 8009092:	d024      	beq.n	80090de <__multiply+0xf2>
 8009094:	f104 0e14 	add.w	lr, r4, #20
 8009098:	46a9      	mov	r9, r5
 800909a:	f04f 0c00 	mov.w	ip, #0
 800909e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80090a2:	f8d9 1000 	ldr.w	r1, [r9]
 80090a6:	fa1f fb82 	uxth.w	fp, r2
 80090aa:	b289      	uxth	r1, r1
 80090ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80090b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80090b4:	f8d9 2000 	ldr.w	r2, [r9]
 80090b8:	4461      	add	r1, ip
 80090ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090be:	fb0a c20b 	mla	r2, sl, fp, ip
 80090c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090c6:	b289      	uxth	r1, r1
 80090c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80090cc:	4577      	cmp	r7, lr
 80090ce:	f849 1b04 	str.w	r1, [r9], #4
 80090d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80090d6:	d8e2      	bhi.n	800909e <__multiply+0xb2>
 80090d8:	9a01      	ldr	r2, [sp, #4]
 80090da:	f845 c002 	str.w	ip, [r5, r2]
 80090de:	9a03      	ldr	r2, [sp, #12]
 80090e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80090e4:	3304      	adds	r3, #4
 80090e6:	f1b9 0f00 	cmp.w	r9, #0
 80090ea:	d020      	beq.n	800912e <__multiply+0x142>
 80090ec:	6829      	ldr	r1, [r5, #0]
 80090ee:	f104 0c14 	add.w	ip, r4, #20
 80090f2:	46ae      	mov	lr, r5
 80090f4:	f04f 0a00 	mov.w	sl, #0
 80090f8:	f8bc b000 	ldrh.w	fp, [ip]
 80090fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009100:	fb09 220b 	mla	r2, r9, fp, r2
 8009104:	4492      	add	sl, r2
 8009106:	b289      	uxth	r1, r1
 8009108:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800910c:	f84e 1b04 	str.w	r1, [lr], #4
 8009110:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009114:	f8be 1000 	ldrh.w	r1, [lr]
 8009118:	0c12      	lsrs	r2, r2, #16
 800911a:	fb09 1102 	mla	r1, r9, r2, r1
 800911e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009122:	4567      	cmp	r7, ip
 8009124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009128:	d8e6      	bhi.n	80090f8 <__multiply+0x10c>
 800912a:	9a01      	ldr	r2, [sp, #4]
 800912c:	50a9      	str	r1, [r5, r2]
 800912e:	3504      	adds	r5, #4
 8009130:	e79a      	b.n	8009068 <__multiply+0x7c>
 8009132:	3e01      	subs	r6, #1
 8009134:	e79c      	b.n	8009070 <__multiply+0x84>
 8009136:	bf00      	nop
 8009138:	0800ae6b 	.word	0x0800ae6b
 800913c:	0800ae7c 	.word	0x0800ae7c

08009140 <__pow5mult>:
 8009140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009144:	4615      	mov	r5, r2
 8009146:	f012 0203 	ands.w	r2, r2, #3
 800914a:	4606      	mov	r6, r0
 800914c:	460f      	mov	r7, r1
 800914e:	d007      	beq.n	8009160 <__pow5mult+0x20>
 8009150:	4c25      	ldr	r4, [pc, #148]	; (80091e8 <__pow5mult+0xa8>)
 8009152:	3a01      	subs	r2, #1
 8009154:	2300      	movs	r3, #0
 8009156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800915a:	f7ff fe9b 	bl	8008e94 <__multadd>
 800915e:	4607      	mov	r7, r0
 8009160:	10ad      	asrs	r5, r5, #2
 8009162:	d03d      	beq.n	80091e0 <__pow5mult+0xa0>
 8009164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009166:	b97c      	cbnz	r4, 8009188 <__pow5mult+0x48>
 8009168:	2010      	movs	r0, #16
 800916a:	f7ff fe1b 	bl	8008da4 <malloc>
 800916e:	4602      	mov	r2, r0
 8009170:	6270      	str	r0, [r6, #36]	; 0x24
 8009172:	b928      	cbnz	r0, 8009180 <__pow5mult+0x40>
 8009174:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <__pow5mult+0xac>)
 8009176:	481e      	ldr	r0, [pc, #120]	; (80091f0 <__pow5mult+0xb0>)
 8009178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800917c:	f000 fc0e 	bl	800999c <__assert_func>
 8009180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009184:	6004      	str	r4, [r0, #0]
 8009186:	60c4      	str	r4, [r0, #12]
 8009188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800918c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009190:	b94c      	cbnz	r4, 80091a6 <__pow5mult+0x66>
 8009192:	f240 2171 	movw	r1, #625	; 0x271
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ff12 	bl	8008fc0 <__i2b>
 800919c:	2300      	movs	r3, #0
 800919e:	f8c8 0008 	str.w	r0, [r8, #8]
 80091a2:	4604      	mov	r4, r0
 80091a4:	6003      	str	r3, [r0, #0]
 80091a6:	f04f 0900 	mov.w	r9, #0
 80091aa:	07eb      	lsls	r3, r5, #31
 80091ac:	d50a      	bpl.n	80091c4 <__pow5mult+0x84>
 80091ae:	4639      	mov	r1, r7
 80091b0:	4622      	mov	r2, r4
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7ff ff1a 	bl	8008fec <__multiply>
 80091b8:	4639      	mov	r1, r7
 80091ba:	4680      	mov	r8, r0
 80091bc:	4630      	mov	r0, r6
 80091be:	f7ff fe47 	bl	8008e50 <_Bfree>
 80091c2:	4647      	mov	r7, r8
 80091c4:	106d      	asrs	r5, r5, #1
 80091c6:	d00b      	beq.n	80091e0 <__pow5mult+0xa0>
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	b938      	cbnz	r0, 80091dc <__pow5mult+0x9c>
 80091cc:	4622      	mov	r2, r4
 80091ce:	4621      	mov	r1, r4
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff ff0b 	bl	8008fec <__multiply>
 80091d6:	6020      	str	r0, [r4, #0]
 80091d8:	f8c0 9000 	str.w	r9, [r0]
 80091dc:	4604      	mov	r4, r0
 80091de:	e7e4      	b.n	80091aa <__pow5mult+0x6a>
 80091e0:	4638      	mov	r0, r7
 80091e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e6:	bf00      	nop
 80091e8:	0800afc8 	.word	0x0800afc8
 80091ec:	0800adf9 	.word	0x0800adf9
 80091f0:	0800ae7c 	.word	0x0800ae7c

080091f4 <__lshift>:
 80091f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	460c      	mov	r4, r1
 80091fa:	6849      	ldr	r1, [r1, #4]
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009202:	68a3      	ldr	r3, [r4, #8]
 8009204:	4607      	mov	r7, r0
 8009206:	4691      	mov	r9, r2
 8009208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800920c:	f108 0601 	add.w	r6, r8, #1
 8009210:	42b3      	cmp	r3, r6
 8009212:	db0b      	blt.n	800922c <__lshift+0x38>
 8009214:	4638      	mov	r0, r7
 8009216:	f7ff fddb 	bl	8008dd0 <_Balloc>
 800921a:	4605      	mov	r5, r0
 800921c:	b948      	cbnz	r0, 8009232 <__lshift+0x3e>
 800921e:	4602      	mov	r2, r0
 8009220:	4b2a      	ldr	r3, [pc, #168]	; (80092cc <__lshift+0xd8>)
 8009222:	482b      	ldr	r0, [pc, #172]	; (80092d0 <__lshift+0xdc>)
 8009224:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009228:	f000 fbb8 	bl	800999c <__assert_func>
 800922c:	3101      	adds	r1, #1
 800922e:	005b      	lsls	r3, r3, #1
 8009230:	e7ee      	b.n	8009210 <__lshift+0x1c>
 8009232:	2300      	movs	r3, #0
 8009234:	f100 0114 	add.w	r1, r0, #20
 8009238:	f100 0210 	add.w	r2, r0, #16
 800923c:	4618      	mov	r0, r3
 800923e:	4553      	cmp	r3, sl
 8009240:	db37      	blt.n	80092b2 <__lshift+0xbe>
 8009242:	6920      	ldr	r0, [r4, #16]
 8009244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009248:	f104 0314 	add.w	r3, r4, #20
 800924c:	f019 091f 	ands.w	r9, r9, #31
 8009250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009258:	d02f      	beq.n	80092ba <__lshift+0xc6>
 800925a:	f1c9 0e20 	rsb	lr, r9, #32
 800925e:	468a      	mov	sl, r1
 8009260:	f04f 0c00 	mov.w	ip, #0
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	fa02 f209 	lsl.w	r2, r2, r9
 800926a:	ea42 020c 	orr.w	r2, r2, ip
 800926e:	f84a 2b04 	str.w	r2, [sl], #4
 8009272:	f853 2b04 	ldr.w	r2, [r3], #4
 8009276:	4298      	cmp	r0, r3
 8009278:	fa22 fc0e 	lsr.w	ip, r2, lr
 800927c:	d8f2      	bhi.n	8009264 <__lshift+0x70>
 800927e:	1b03      	subs	r3, r0, r4
 8009280:	3b15      	subs	r3, #21
 8009282:	f023 0303 	bic.w	r3, r3, #3
 8009286:	3304      	adds	r3, #4
 8009288:	f104 0215 	add.w	r2, r4, #21
 800928c:	4290      	cmp	r0, r2
 800928e:	bf38      	it	cc
 8009290:	2304      	movcc	r3, #4
 8009292:	f841 c003 	str.w	ip, [r1, r3]
 8009296:	f1bc 0f00 	cmp.w	ip, #0
 800929a:	d001      	beq.n	80092a0 <__lshift+0xac>
 800929c:	f108 0602 	add.w	r6, r8, #2
 80092a0:	3e01      	subs	r6, #1
 80092a2:	4638      	mov	r0, r7
 80092a4:	612e      	str	r6, [r5, #16]
 80092a6:	4621      	mov	r1, r4
 80092a8:	f7ff fdd2 	bl	8008e50 <_Bfree>
 80092ac:	4628      	mov	r0, r5
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80092b6:	3301      	adds	r3, #1
 80092b8:	e7c1      	b.n	800923e <__lshift+0x4a>
 80092ba:	3904      	subs	r1, #4
 80092bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80092c4:	4298      	cmp	r0, r3
 80092c6:	d8f9      	bhi.n	80092bc <__lshift+0xc8>
 80092c8:	e7ea      	b.n	80092a0 <__lshift+0xac>
 80092ca:	bf00      	nop
 80092cc:	0800ae6b 	.word	0x0800ae6b
 80092d0:	0800ae7c 	.word	0x0800ae7c

080092d4 <__mcmp>:
 80092d4:	b530      	push	{r4, r5, lr}
 80092d6:	6902      	ldr	r2, [r0, #16]
 80092d8:	690c      	ldr	r4, [r1, #16]
 80092da:	1b12      	subs	r2, r2, r4
 80092dc:	d10e      	bne.n	80092fc <__mcmp+0x28>
 80092de:	f100 0314 	add.w	r3, r0, #20
 80092e2:	3114      	adds	r1, #20
 80092e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80092e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80092ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80092f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80092f4:	42a5      	cmp	r5, r4
 80092f6:	d003      	beq.n	8009300 <__mcmp+0x2c>
 80092f8:	d305      	bcc.n	8009306 <__mcmp+0x32>
 80092fa:	2201      	movs	r2, #1
 80092fc:	4610      	mov	r0, r2
 80092fe:	bd30      	pop	{r4, r5, pc}
 8009300:	4283      	cmp	r3, r0
 8009302:	d3f3      	bcc.n	80092ec <__mcmp+0x18>
 8009304:	e7fa      	b.n	80092fc <__mcmp+0x28>
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	e7f7      	b.n	80092fc <__mcmp+0x28>

0800930c <__mdiff>:
 800930c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	4606      	mov	r6, r0
 8009314:	4611      	mov	r1, r2
 8009316:	4620      	mov	r0, r4
 8009318:	4690      	mov	r8, r2
 800931a:	f7ff ffdb 	bl	80092d4 <__mcmp>
 800931e:	1e05      	subs	r5, r0, #0
 8009320:	d110      	bne.n	8009344 <__mdiff+0x38>
 8009322:	4629      	mov	r1, r5
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff fd53 	bl	8008dd0 <_Balloc>
 800932a:	b930      	cbnz	r0, 800933a <__mdiff+0x2e>
 800932c:	4b3a      	ldr	r3, [pc, #232]	; (8009418 <__mdiff+0x10c>)
 800932e:	4602      	mov	r2, r0
 8009330:	f240 2132 	movw	r1, #562	; 0x232
 8009334:	4839      	ldr	r0, [pc, #228]	; (800941c <__mdiff+0x110>)
 8009336:	f000 fb31 	bl	800999c <__assert_func>
 800933a:	2301      	movs	r3, #1
 800933c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009344:	bfa4      	itt	ge
 8009346:	4643      	movge	r3, r8
 8009348:	46a0      	movge	r8, r4
 800934a:	4630      	mov	r0, r6
 800934c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009350:	bfa6      	itte	ge
 8009352:	461c      	movge	r4, r3
 8009354:	2500      	movge	r5, #0
 8009356:	2501      	movlt	r5, #1
 8009358:	f7ff fd3a 	bl	8008dd0 <_Balloc>
 800935c:	b920      	cbnz	r0, 8009368 <__mdiff+0x5c>
 800935e:	4b2e      	ldr	r3, [pc, #184]	; (8009418 <__mdiff+0x10c>)
 8009360:	4602      	mov	r2, r0
 8009362:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009366:	e7e5      	b.n	8009334 <__mdiff+0x28>
 8009368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800936c:	6926      	ldr	r6, [r4, #16]
 800936e:	60c5      	str	r5, [r0, #12]
 8009370:	f104 0914 	add.w	r9, r4, #20
 8009374:	f108 0514 	add.w	r5, r8, #20
 8009378:	f100 0e14 	add.w	lr, r0, #20
 800937c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009384:	f108 0210 	add.w	r2, r8, #16
 8009388:	46f2      	mov	sl, lr
 800938a:	2100      	movs	r1, #0
 800938c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009394:	fa1f f883 	uxth.w	r8, r3
 8009398:	fa11 f18b 	uxtah	r1, r1, fp
 800939c:	0c1b      	lsrs	r3, r3, #16
 800939e:	eba1 0808 	sub.w	r8, r1, r8
 80093a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80093a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80093aa:	fa1f f888 	uxth.w	r8, r8
 80093ae:	1419      	asrs	r1, r3, #16
 80093b0:	454e      	cmp	r6, r9
 80093b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80093b6:	f84a 3b04 	str.w	r3, [sl], #4
 80093ba:	d8e7      	bhi.n	800938c <__mdiff+0x80>
 80093bc:	1b33      	subs	r3, r6, r4
 80093be:	3b15      	subs	r3, #21
 80093c0:	f023 0303 	bic.w	r3, r3, #3
 80093c4:	3304      	adds	r3, #4
 80093c6:	3415      	adds	r4, #21
 80093c8:	42a6      	cmp	r6, r4
 80093ca:	bf38      	it	cc
 80093cc:	2304      	movcc	r3, #4
 80093ce:	441d      	add	r5, r3
 80093d0:	4473      	add	r3, lr
 80093d2:	469e      	mov	lr, r3
 80093d4:	462e      	mov	r6, r5
 80093d6:	4566      	cmp	r6, ip
 80093d8:	d30e      	bcc.n	80093f8 <__mdiff+0xec>
 80093da:	f10c 0203 	add.w	r2, ip, #3
 80093de:	1b52      	subs	r2, r2, r5
 80093e0:	f022 0203 	bic.w	r2, r2, #3
 80093e4:	3d03      	subs	r5, #3
 80093e6:	45ac      	cmp	ip, r5
 80093e8:	bf38      	it	cc
 80093ea:	2200      	movcc	r2, #0
 80093ec:	441a      	add	r2, r3
 80093ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80093f2:	b17b      	cbz	r3, 8009414 <__mdiff+0x108>
 80093f4:	6107      	str	r7, [r0, #16]
 80093f6:	e7a3      	b.n	8009340 <__mdiff+0x34>
 80093f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80093fc:	fa11 f288 	uxtah	r2, r1, r8
 8009400:	1414      	asrs	r4, r2, #16
 8009402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009406:	b292      	uxth	r2, r2
 8009408:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800940c:	f84e 2b04 	str.w	r2, [lr], #4
 8009410:	1421      	asrs	r1, r4, #16
 8009412:	e7e0      	b.n	80093d6 <__mdiff+0xca>
 8009414:	3f01      	subs	r7, #1
 8009416:	e7ea      	b.n	80093ee <__mdiff+0xe2>
 8009418:	0800ae6b 	.word	0x0800ae6b
 800941c:	0800ae7c 	.word	0x0800ae7c

08009420 <__d2b>:
 8009420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009424:	4689      	mov	r9, r1
 8009426:	2101      	movs	r1, #1
 8009428:	ec57 6b10 	vmov	r6, r7, d0
 800942c:	4690      	mov	r8, r2
 800942e:	f7ff fccf 	bl	8008dd0 <_Balloc>
 8009432:	4604      	mov	r4, r0
 8009434:	b930      	cbnz	r0, 8009444 <__d2b+0x24>
 8009436:	4602      	mov	r2, r0
 8009438:	4b25      	ldr	r3, [pc, #148]	; (80094d0 <__d2b+0xb0>)
 800943a:	4826      	ldr	r0, [pc, #152]	; (80094d4 <__d2b+0xb4>)
 800943c:	f240 310a 	movw	r1, #778	; 0x30a
 8009440:	f000 faac 	bl	800999c <__assert_func>
 8009444:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800944c:	bb35      	cbnz	r5, 800949c <__d2b+0x7c>
 800944e:	2e00      	cmp	r6, #0
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	d028      	beq.n	80094a6 <__d2b+0x86>
 8009454:	4668      	mov	r0, sp
 8009456:	9600      	str	r6, [sp, #0]
 8009458:	f7ff fd82 	bl	8008f60 <__lo0bits>
 800945c:	9900      	ldr	r1, [sp, #0]
 800945e:	b300      	cbz	r0, 80094a2 <__d2b+0x82>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	f1c0 0320 	rsb	r3, r0, #32
 8009466:	fa02 f303 	lsl.w	r3, r2, r3
 800946a:	430b      	orrs	r3, r1
 800946c:	40c2      	lsrs	r2, r0
 800946e:	6163      	str	r3, [r4, #20]
 8009470:	9201      	str	r2, [sp, #4]
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	61a3      	str	r3, [r4, #24]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bf14      	ite	ne
 800947a:	2202      	movne	r2, #2
 800947c:	2201      	moveq	r2, #1
 800947e:	6122      	str	r2, [r4, #16]
 8009480:	b1d5      	cbz	r5, 80094b8 <__d2b+0x98>
 8009482:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009486:	4405      	add	r5, r0
 8009488:	f8c9 5000 	str.w	r5, [r9]
 800948c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009490:	f8c8 0000 	str.w	r0, [r8]
 8009494:	4620      	mov	r0, r4
 8009496:	b003      	add	sp, #12
 8009498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800949c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094a0:	e7d5      	b.n	800944e <__d2b+0x2e>
 80094a2:	6161      	str	r1, [r4, #20]
 80094a4:	e7e5      	b.n	8009472 <__d2b+0x52>
 80094a6:	a801      	add	r0, sp, #4
 80094a8:	f7ff fd5a 	bl	8008f60 <__lo0bits>
 80094ac:	9b01      	ldr	r3, [sp, #4]
 80094ae:	6163      	str	r3, [r4, #20]
 80094b0:	2201      	movs	r2, #1
 80094b2:	6122      	str	r2, [r4, #16]
 80094b4:	3020      	adds	r0, #32
 80094b6:	e7e3      	b.n	8009480 <__d2b+0x60>
 80094b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80094c0:	f8c9 0000 	str.w	r0, [r9]
 80094c4:	6918      	ldr	r0, [r3, #16]
 80094c6:	f7ff fd2b 	bl	8008f20 <__hi0bits>
 80094ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094ce:	e7df      	b.n	8009490 <__d2b+0x70>
 80094d0:	0800ae6b 	.word	0x0800ae6b
 80094d4:	0800ae7c 	.word	0x0800ae7c

080094d8 <_calloc_r>:
 80094d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094da:	fba1 2402 	umull	r2, r4, r1, r2
 80094de:	b94c      	cbnz	r4, 80094f4 <_calloc_r+0x1c>
 80094e0:	4611      	mov	r1, r2
 80094e2:	9201      	str	r2, [sp, #4]
 80094e4:	f000 f87a 	bl	80095dc <_malloc_r>
 80094e8:	9a01      	ldr	r2, [sp, #4]
 80094ea:	4605      	mov	r5, r0
 80094ec:	b930      	cbnz	r0, 80094fc <_calloc_r+0x24>
 80094ee:	4628      	mov	r0, r5
 80094f0:	b003      	add	sp, #12
 80094f2:	bd30      	pop	{r4, r5, pc}
 80094f4:	220c      	movs	r2, #12
 80094f6:	6002      	str	r2, [r0, #0]
 80094f8:	2500      	movs	r5, #0
 80094fa:	e7f8      	b.n	80094ee <_calloc_r+0x16>
 80094fc:	4621      	mov	r1, r4
 80094fe:	f7fe f90b 	bl	8007718 <memset>
 8009502:	e7f4      	b.n	80094ee <_calloc_r+0x16>

08009504 <_free_r>:
 8009504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009506:	2900      	cmp	r1, #0
 8009508:	d044      	beq.n	8009594 <_free_r+0x90>
 800950a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800950e:	9001      	str	r0, [sp, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f1a1 0404 	sub.w	r4, r1, #4
 8009516:	bfb8      	it	lt
 8009518:	18e4      	addlt	r4, r4, r3
 800951a:	f000 fa9b 	bl	8009a54 <__malloc_lock>
 800951e:	4a1e      	ldr	r2, [pc, #120]	; (8009598 <_free_r+0x94>)
 8009520:	9801      	ldr	r0, [sp, #4]
 8009522:	6813      	ldr	r3, [r2, #0]
 8009524:	b933      	cbnz	r3, 8009534 <_free_r+0x30>
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	6014      	str	r4, [r2, #0]
 800952a:	b003      	add	sp, #12
 800952c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009530:	f000 ba96 	b.w	8009a60 <__malloc_unlock>
 8009534:	42a3      	cmp	r3, r4
 8009536:	d908      	bls.n	800954a <_free_r+0x46>
 8009538:	6825      	ldr	r5, [r4, #0]
 800953a:	1961      	adds	r1, r4, r5
 800953c:	428b      	cmp	r3, r1
 800953e:	bf01      	itttt	eq
 8009540:	6819      	ldreq	r1, [r3, #0]
 8009542:	685b      	ldreq	r3, [r3, #4]
 8009544:	1949      	addeq	r1, r1, r5
 8009546:	6021      	streq	r1, [r4, #0]
 8009548:	e7ed      	b.n	8009526 <_free_r+0x22>
 800954a:	461a      	mov	r2, r3
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	b10b      	cbz	r3, 8009554 <_free_r+0x50>
 8009550:	42a3      	cmp	r3, r4
 8009552:	d9fa      	bls.n	800954a <_free_r+0x46>
 8009554:	6811      	ldr	r1, [r2, #0]
 8009556:	1855      	adds	r5, r2, r1
 8009558:	42a5      	cmp	r5, r4
 800955a:	d10b      	bne.n	8009574 <_free_r+0x70>
 800955c:	6824      	ldr	r4, [r4, #0]
 800955e:	4421      	add	r1, r4
 8009560:	1854      	adds	r4, r2, r1
 8009562:	42a3      	cmp	r3, r4
 8009564:	6011      	str	r1, [r2, #0]
 8009566:	d1e0      	bne.n	800952a <_free_r+0x26>
 8009568:	681c      	ldr	r4, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	6053      	str	r3, [r2, #4]
 800956e:	4421      	add	r1, r4
 8009570:	6011      	str	r1, [r2, #0]
 8009572:	e7da      	b.n	800952a <_free_r+0x26>
 8009574:	d902      	bls.n	800957c <_free_r+0x78>
 8009576:	230c      	movs	r3, #12
 8009578:	6003      	str	r3, [r0, #0]
 800957a:	e7d6      	b.n	800952a <_free_r+0x26>
 800957c:	6825      	ldr	r5, [r4, #0]
 800957e:	1961      	adds	r1, r4, r5
 8009580:	428b      	cmp	r3, r1
 8009582:	bf04      	itt	eq
 8009584:	6819      	ldreq	r1, [r3, #0]
 8009586:	685b      	ldreq	r3, [r3, #4]
 8009588:	6063      	str	r3, [r4, #4]
 800958a:	bf04      	itt	eq
 800958c:	1949      	addeq	r1, r1, r5
 800958e:	6021      	streq	r1, [r4, #0]
 8009590:	6054      	str	r4, [r2, #4]
 8009592:	e7ca      	b.n	800952a <_free_r+0x26>
 8009594:	b003      	add	sp, #12
 8009596:	bd30      	pop	{r4, r5, pc}
 8009598:	20000450 	.word	0x20000450

0800959c <sbrk_aligned>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4e0e      	ldr	r6, [pc, #56]	; (80095d8 <sbrk_aligned+0x3c>)
 80095a0:	460c      	mov	r4, r1
 80095a2:	6831      	ldr	r1, [r6, #0]
 80095a4:	4605      	mov	r5, r0
 80095a6:	b911      	cbnz	r1, 80095ae <sbrk_aligned+0x12>
 80095a8:	f000 f9e8 	bl	800997c <_sbrk_r>
 80095ac:	6030      	str	r0, [r6, #0]
 80095ae:	4621      	mov	r1, r4
 80095b0:	4628      	mov	r0, r5
 80095b2:	f000 f9e3 	bl	800997c <_sbrk_r>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d00a      	beq.n	80095d0 <sbrk_aligned+0x34>
 80095ba:	1cc4      	adds	r4, r0, #3
 80095bc:	f024 0403 	bic.w	r4, r4, #3
 80095c0:	42a0      	cmp	r0, r4
 80095c2:	d007      	beq.n	80095d4 <sbrk_aligned+0x38>
 80095c4:	1a21      	subs	r1, r4, r0
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 f9d8 	bl	800997c <_sbrk_r>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d101      	bne.n	80095d4 <sbrk_aligned+0x38>
 80095d0:	f04f 34ff 	mov.w	r4, #4294967295
 80095d4:	4620      	mov	r0, r4
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	20000454 	.word	0x20000454

080095dc <_malloc_r>:
 80095dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095e0:	1ccd      	adds	r5, r1, #3
 80095e2:	f025 0503 	bic.w	r5, r5, #3
 80095e6:	3508      	adds	r5, #8
 80095e8:	2d0c      	cmp	r5, #12
 80095ea:	bf38      	it	cc
 80095ec:	250c      	movcc	r5, #12
 80095ee:	2d00      	cmp	r5, #0
 80095f0:	4607      	mov	r7, r0
 80095f2:	db01      	blt.n	80095f8 <_malloc_r+0x1c>
 80095f4:	42a9      	cmp	r1, r5
 80095f6:	d905      	bls.n	8009604 <_malloc_r+0x28>
 80095f8:	230c      	movs	r3, #12
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	2600      	movs	r6, #0
 80095fe:	4630      	mov	r0, r6
 8009600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009604:	4e2e      	ldr	r6, [pc, #184]	; (80096c0 <_malloc_r+0xe4>)
 8009606:	f000 fa25 	bl	8009a54 <__malloc_lock>
 800960a:	6833      	ldr	r3, [r6, #0]
 800960c:	461c      	mov	r4, r3
 800960e:	bb34      	cbnz	r4, 800965e <_malloc_r+0x82>
 8009610:	4629      	mov	r1, r5
 8009612:	4638      	mov	r0, r7
 8009614:	f7ff ffc2 	bl	800959c <sbrk_aligned>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	4604      	mov	r4, r0
 800961c:	d14d      	bne.n	80096ba <_malloc_r+0xde>
 800961e:	6834      	ldr	r4, [r6, #0]
 8009620:	4626      	mov	r6, r4
 8009622:	2e00      	cmp	r6, #0
 8009624:	d140      	bne.n	80096a8 <_malloc_r+0xcc>
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	4631      	mov	r1, r6
 800962a:	4638      	mov	r0, r7
 800962c:	eb04 0803 	add.w	r8, r4, r3
 8009630:	f000 f9a4 	bl	800997c <_sbrk_r>
 8009634:	4580      	cmp	r8, r0
 8009636:	d13a      	bne.n	80096ae <_malloc_r+0xd2>
 8009638:	6821      	ldr	r1, [r4, #0]
 800963a:	3503      	adds	r5, #3
 800963c:	1a6d      	subs	r5, r5, r1
 800963e:	f025 0503 	bic.w	r5, r5, #3
 8009642:	3508      	adds	r5, #8
 8009644:	2d0c      	cmp	r5, #12
 8009646:	bf38      	it	cc
 8009648:	250c      	movcc	r5, #12
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ffa5 	bl	800959c <sbrk_aligned>
 8009652:	3001      	adds	r0, #1
 8009654:	d02b      	beq.n	80096ae <_malloc_r+0xd2>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	442b      	add	r3, r5
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	e00e      	b.n	800967c <_malloc_r+0xa0>
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	1b52      	subs	r2, r2, r5
 8009662:	d41e      	bmi.n	80096a2 <_malloc_r+0xc6>
 8009664:	2a0b      	cmp	r2, #11
 8009666:	d916      	bls.n	8009696 <_malloc_r+0xba>
 8009668:	1961      	adds	r1, r4, r5
 800966a:	42a3      	cmp	r3, r4
 800966c:	6025      	str	r5, [r4, #0]
 800966e:	bf18      	it	ne
 8009670:	6059      	strne	r1, [r3, #4]
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	bf08      	it	eq
 8009676:	6031      	streq	r1, [r6, #0]
 8009678:	5162      	str	r2, [r4, r5]
 800967a:	604b      	str	r3, [r1, #4]
 800967c:	4638      	mov	r0, r7
 800967e:	f104 060b 	add.w	r6, r4, #11
 8009682:	f000 f9ed 	bl	8009a60 <__malloc_unlock>
 8009686:	f026 0607 	bic.w	r6, r6, #7
 800968a:	1d23      	adds	r3, r4, #4
 800968c:	1af2      	subs	r2, r6, r3
 800968e:	d0b6      	beq.n	80095fe <_malloc_r+0x22>
 8009690:	1b9b      	subs	r3, r3, r6
 8009692:	50a3      	str	r3, [r4, r2]
 8009694:	e7b3      	b.n	80095fe <_malloc_r+0x22>
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	42a3      	cmp	r3, r4
 800969a:	bf0c      	ite	eq
 800969c:	6032      	streq	r2, [r6, #0]
 800969e:	605a      	strne	r2, [r3, #4]
 80096a0:	e7ec      	b.n	800967c <_malloc_r+0xa0>
 80096a2:	4623      	mov	r3, r4
 80096a4:	6864      	ldr	r4, [r4, #4]
 80096a6:	e7b2      	b.n	800960e <_malloc_r+0x32>
 80096a8:	4634      	mov	r4, r6
 80096aa:	6876      	ldr	r6, [r6, #4]
 80096ac:	e7b9      	b.n	8009622 <_malloc_r+0x46>
 80096ae:	230c      	movs	r3, #12
 80096b0:	603b      	str	r3, [r7, #0]
 80096b2:	4638      	mov	r0, r7
 80096b4:	f000 f9d4 	bl	8009a60 <__malloc_unlock>
 80096b8:	e7a1      	b.n	80095fe <_malloc_r+0x22>
 80096ba:	6025      	str	r5, [r4, #0]
 80096bc:	e7de      	b.n	800967c <_malloc_r+0xa0>
 80096be:	bf00      	nop
 80096c0:	20000450 	.word	0x20000450

080096c4 <__ssputs_r>:
 80096c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c8:	688e      	ldr	r6, [r1, #8]
 80096ca:	429e      	cmp	r6, r3
 80096cc:	4682      	mov	sl, r0
 80096ce:	460c      	mov	r4, r1
 80096d0:	4690      	mov	r8, r2
 80096d2:	461f      	mov	r7, r3
 80096d4:	d838      	bhi.n	8009748 <__ssputs_r+0x84>
 80096d6:	898a      	ldrh	r2, [r1, #12]
 80096d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096dc:	d032      	beq.n	8009744 <__ssputs_r+0x80>
 80096de:	6825      	ldr	r5, [r4, #0]
 80096e0:	6909      	ldr	r1, [r1, #16]
 80096e2:	eba5 0901 	sub.w	r9, r5, r1
 80096e6:	6965      	ldr	r5, [r4, #20]
 80096e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096f0:	3301      	adds	r3, #1
 80096f2:	444b      	add	r3, r9
 80096f4:	106d      	asrs	r5, r5, #1
 80096f6:	429d      	cmp	r5, r3
 80096f8:	bf38      	it	cc
 80096fa:	461d      	movcc	r5, r3
 80096fc:	0553      	lsls	r3, r2, #21
 80096fe:	d531      	bpl.n	8009764 <__ssputs_r+0xa0>
 8009700:	4629      	mov	r1, r5
 8009702:	f7ff ff6b 	bl	80095dc <_malloc_r>
 8009706:	4606      	mov	r6, r0
 8009708:	b950      	cbnz	r0, 8009720 <__ssputs_r+0x5c>
 800970a:	230c      	movs	r3, #12
 800970c:	f8ca 3000 	str.w	r3, [sl]
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	f04f 30ff 	mov.w	r0, #4294967295
 800971c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009720:	6921      	ldr	r1, [r4, #16]
 8009722:	464a      	mov	r2, r9
 8009724:	f7ff fb46 	bl	8008db4 <memcpy>
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800972e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	6126      	str	r6, [r4, #16]
 8009736:	6165      	str	r5, [r4, #20]
 8009738:	444e      	add	r6, r9
 800973a:	eba5 0509 	sub.w	r5, r5, r9
 800973e:	6026      	str	r6, [r4, #0]
 8009740:	60a5      	str	r5, [r4, #8]
 8009742:	463e      	mov	r6, r7
 8009744:	42be      	cmp	r6, r7
 8009746:	d900      	bls.n	800974a <__ssputs_r+0x86>
 8009748:	463e      	mov	r6, r7
 800974a:	6820      	ldr	r0, [r4, #0]
 800974c:	4632      	mov	r2, r6
 800974e:	4641      	mov	r1, r8
 8009750:	f000 f966 	bl	8009a20 <memmove>
 8009754:	68a3      	ldr	r3, [r4, #8]
 8009756:	1b9b      	subs	r3, r3, r6
 8009758:	60a3      	str	r3, [r4, #8]
 800975a:	6823      	ldr	r3, [r4, #0]
 800975c:	4433      	add	r3, r6
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	2000      	movs	r0, #0
 8009762:	e7db      	b.n	800971c <__ssputs_r+0x58>
 8009764:	462a      	mov	r2, r5
 8009766:	f000 f981 	bl	8009a6c <_realloc_r>
 800976a:	4606      	mov	r6, r0
 800976c:	2800      	cmp	r0, #0
 800976e:	d1e1      	bne.n	8009734 <__ssputs_r+0x70>
 8009770:	6921      	ldr	r1, [r4, #16]
 8009772:	4650      	mov	r0, sl
 8009774:	f7ff fec6 	bl	8009504 <_free_r>
 8009778:	e7c7      	b.n	800970a <__ssputs_r+0x46>
	...

0800977c <_svfiprintf_r>:
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	4698      	mov	r8, r3
 8009782:	898b      	ldrh	r3, [r1, #12]
 8009784:	061b      	lsls	r3, r3, #24
 8009786:	b09d      	sub	sp, #116	; 0x74
 8009788:	4607      	mov	r7, r0
 800978a:	460d      	mov	r5, r1
 800978c:	4614      	mov	r4, r2
 800978e:	d50e      	bpl.n	80097ae <_svfiprintf_r+0x32>
 8009790:	690b      	ldr	r3, [r1, #16]
 8009792:	b963      	cbnz	r3, 80097ae <_svfiprintf_r+0x32>
 8009794:	2140      	movs	r1, #64	; 0x40
 8009796:	f7ff ff21 	bl	80095dc <_malloc_r>
 800979a:	6028      	str	r0, [r5, #0]
 800979c:	6128      	str	r0, [r5, #16]
 800979e:	b920      	cbnz	r0, 80097aa <_svfiprintf_r+0x2e>
 80097a0:	230c      	movs	r3, #12
 80097a2:	603b      	str	r3, [r7, #0]
 80097a4:	f04f 30ff 	mov.w	r0, #4294967295
 80097a8:	e0d1      	b.n	800994e <_svfiprintf_r+0x1d2>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	616b      	str	r3, [r5, #20]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9309      	str	r3, [sp, #36]	; 0x24
 80097b2:	2320      	movs	r3, #32
 80097b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80097bc:	2330      	movs	r3, #48	; 0x30
 80097be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009968 <_svfiprintf_r+0x1ec>
 80097c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c6:	f04f 0901 	mov.w	r9, #1
 80097ca:	4623      	mov	r3, r4
 80097cc:	469a      	mov	sl, r3
 80097ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d2:	b10a      	cbz	r2, 80097d8 <_svfiprintf_r+0x5c>
 80097d4:	2a25      	cmp	r2, #37	; 0x25
 80097d6:	d1f9      	bne.n	80097cc <_svfiprintf_r+0x50>
 80097d8:	ebba 0b04 	subs.w	fp, sl, r4
 80097dc:	d00b      	beq.n	80097f6 <_svfiprintf_r+0x7a>
 80097de:	465b      	mov	r3, fp
 80097e0:	4622      	mov	r2, r4
 80097e2:	4629      	mov	r1, r5
 80097e4:	4638      	mov	r0, r7
 80097e6:	f7ff ff6d 	bl	80096c4 <__ssputs_r>
 80097ea:	3001      	adds	r0, #1
 80097ec:	f000 80aa 	beq.w	8009944 <_svfiprintf_r+0x1c8>
 80097f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f2:	445a      	add	r2, fp
 80097f4:	9209      	str	r2, [sp, #36]	; 0x24
 80097f6:	f89a 3000 	ldrb.w	r3, [sl]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 80a2 	beq.w	8009944 <_svfiprintf_r+0x1c8>
 8009800:	2300      	movs	r3, #0
 8009802:	f04f 32ff 	mov.w	r2, #4294967295
 8009806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800980a:	f10a 0a01 	add.w	sl, sl, #1
 800980e:	9304      	str	r3, [sp, #16]
 8009810:	9307      	str	r3, [sp, #28]
 8009812:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009816:	931a      	str	r3, [sp, #104]	; 0x68
 8009818:	4654      	mov	r4, sl
 800981a:	2205      	movs	r2, #5
 800981c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009820:	4851      	ldr	r0, [pc, #324]	; (8009968 <_svfiprintf_r+0x1ec>)
 8009822:	f7f6 fce5 	bl	80001f0 <memchr>
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	b9d8      	cbnz	r0, 8009862 <_svfiprintf_r+0xe6>
 800982a:	06d0      	lsls	r0, r2, #27
 800982c:	bf44      	itt	mi
 800982e:	2320      	movmi	r3, #32
 8009830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009834:	0711      	lsls	r1, r2, #28
 8009836:	bf44      	itt	mi
 8009838:	232b      	movmi	r3, #43	; 0x2b
 800983a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800983e:	f89a 3000 	ldrb.w	r3, [sl]
 8009842:	2b2a      	cmp	r3, #42	; 0x2a
 8009844:	d015      	beq.n	8009872 <_svfiprintf_r+0xf6>
 8009846:	9a07      	ldr	r2, [sp, #28]
 8009848:	4654      	mov	r4, sl
 800984a:	2000      	movs	r0, #0
 800984c:	f04f 0c0a 	mov.w	ip, #10
 8009850:	4621      	mov	r1, r4
 8009852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009856:	3b30      	subs	r3, #48	; 0x30
 8009858:	2b09      	cmp	r3, #9
 800985a:	d94e      	bls.n	80098fa <_svfiprintf_r+0x17e>
 800985c:	b1b0      	cbz	r0, 800988c <_svfiprintf_r+0x110>
 800985e:	9207      	str	r2, [sp, #28]
 8009860:	e014      	b.n	800988c <_svfiprintf_r+0x110>
 8009862:	eba0 0308 	sub.w	r3, r0, r8
 8009866:	fa09 f303 	lsl.w	r3, r9, r3
 800986a:	4313      	orrs	r3, r2
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	46a2      	mov	sl, r4
 8009870:	e7d2      	b.n	8009818 <_svfiprintf_r+0x9c>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	1d19      	adds	r1, r3, #4
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	9103      	str	r1, [sp, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	bfbb      	ittet	lt
 800987e:	425b      	neglt	r3, r3
 8009880:	f042 0202 	orrlt.w	r2, r2, #2
 8009884:	9307      	strge	r3, [sp, #28]
 8009886:	9307      	strlt	r3, [sp, #28]
 8009888:	bfb8      	it	lt
 800988a:	9204      	strlt	r2, [sp, #16]
 800988c:	7823      	ldrb	r3, [r4, #0]
 800988e:	2b2e      	cmp	r3, #46	; 0x2e
 8009890:	d10c      	bne.n	80098ac <_svfiprintf_r+0x130>
 8009892:	7863      	ldrb	r3, [r4, #1]
 8009894:	2b2a      	cmp	r3, #42	; 0x2a
 8009896:	d135      	bne.n	8009904 <_svfiprintf_r+0x188>
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	1d1a      	adds	r2, r3, #4
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	9203      	str	r2, [sp, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfb8      	it	lt
 80098a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80098a8:	3402      	adds	r4, #2
 80098aa:	9305      	str	r3, [sp, #20]
 80098ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009978 <_svfiprintf_r+0x1fc>
 80098b0:	7821      	ldrb	r1, [r4, #0]
 80098b2:	2203      	movs	r2, #3
 80098b4:	4650      	mov	r0, sl
 80098b6:	f7f6 fc9b 	bl	80001f0 <memchr>
 80098ba:	b140      	cbz	r0, 80098ce <_svfiprintf_r+0x152>
 80098bc:	2340      	movs	r3, #64	; 0x40
 80098be:	eba0 000a 	sub.w	r0, r0, sl
 80098c2:	fa03 f000 	lsl.w	r0, r3, r0
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	4303      	orrs	r3, r0
 80098ca:	3401      	adds	r4, #1
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d2:	4826      	ldr	r0, [pc, #152]	; (800996c <_svfiprintf_r+0x1f0>)
 80098d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098d8:	2206      	movs	r2, #6
 80098da:	f7f6 fc89 	bl	80001f0 <memchr>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d038      	beq.n	8009954 <_svfiprintf_r+0x1d8>
 80098e2:	4b23      	ldr	r3, [pc, #140]	; (8009970 <_svfiprintf_r+0x1f4>)
 80098e4:	bb1b      	cbnz	r3, 800992e <_svfiprintf_r+0x1b2>
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	3307      	adds	r3, #7
 80098ea:	f023 0307 	bic.w	r3, r3, #7
 80098ee:	3308      	adds	r3, #8
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f4:	4433      	add	r3, r6
 80098f6:	9309      	str	r3, [sp, #36]	; 0x24
 80098f8:	e767      	b.n	80097ca <_svfiprintf_r+0x4e>
 80098fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80098fe:	460c      	mov	r4, r1
 8009900:	2001      	movs	r0, #1
 8009902:	e7a5      	b.n	8009850 <_svfiprintf_r+0xd4>
 8009904:	2300      	movs	r3, #0
 8009906:	3401      	adds	r4, #1
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	4619      	mov	r1, r3
 800990c:	f04f 0c0a 	mov.w	ip, #10
 8009910:	4620      	mov	r0, r4
 8009912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009916:	3a30      	subs	r2, #48	; 0x30
 8009918:	2a09      	cmp	r2, #9
 800991a:	d903      	bls.n	8009924 <_svfiprintf_r+0x1a8>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0c5      	beq.n	80098ac <_svfiprintf_r+0x130>
 8009920:	9105      	str	r1, [sp, #20]
 8009922:	e7c3      	b.n	80098ac <_svfiprintf_r+0x130>
 8009924:	fb0c 2101 	mla	r1, ip, r1, r2
 8009928:	4604      	mov	r4, r0
 800992a:	2301      	movs	r3, #1
 800992c:	e7f0      	b.n	8009910 <_svfiprintf_r+0x194>
 800992e:	ab03      	add	r3, sp, #12
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	462a      	mov	r2, r5
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <_svfiprintf_r+0x1f8>)
 8009936:	a904      	add	r1, sp, #16
 8009938:	4638      	mov	r0, r7
 800993a:	f7fd ff95 	bl	8007868 <_printf_float>
 800993e:	1c42      	adds	r2, r0, #1
 8009940:	4606      	mov	r6, r0
 8009942:	d1d6      	bne.n	80098f2 <_svfiprintf_r+0x176>
 8009944:	89ab      	ldrh	r3, [r5, #12]
 8009946:	065b      	lsls	r3, r3, #25
 8009948:	f53f af2c 	bmi.w	80097a4 <_svfiprintf_r+0x28>
 800994c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800994e:	b01d      	add	sp, #116	; 0x74
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	ab03      	add	r3, sp, #12
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	462a      	mov	r2, r5
 800995a:	4b06      	ldr	r3, [pc, #24]	; (8009974 <_svfiprintf_r+0x1f8>)
 800995c:	a904      	add	r1, sp, #16
 800995e:	4638      	mov	r0, r7
 8009960:	f7fe fa26 	bl	8007db0 <_printf_i>
 8009964:	e7eb      	b.n	800993e <_svfiprintf_r+0x1c2>
 8009966:	bf00      	nop
 8009968:	0800afd4 	.word	0x0800afd4
 800996c:	0800afde 	.word	0x0800afde
 8009970:	08007869 	.word	0x08007869
 8009974:	080096c5 	.word	0x080096c5
 8009978:	0800afda 	.word	0x0800afda

0800997c <_sbrk_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	; (8009998 <_sbrk_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7fa fcb4 	bl	80042f4 <_sbrk>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_sbrk_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_sbrk_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20000458 	.word	0x20000458

0800999c <__assert_func>:
 800999c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800999e:	4614      	mov	r4, r2
 80099a0:	461a      	mov	r2, r3
 80099a2:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <__assert_func+0x2c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4605      	mov	r5, r0
 80099a8:	68d8      	ldr	r0, [r3, #12]
 80099aa:	b14c      	cbz	r4, 80099c0 <__assert_func+0x24>
 80099ac:	4b07      	ldr	r3, [pc, #28]	; (80099cc <__assert_func+0x30>)
 80099ae:	9100      	str	r1, [sp, #0]
 80099b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099b4:	4906      	ldr	r1, [pc, #24]	; (80099d0 <__assert_func+0x34>)
 80099b6:	462b      	mov	r3, r5
 80099b8:	f000 f80e 	bl	80099d8 <fiprintf>
 80099bc:	f000 faac 	bl	8009f18 <abort>
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <__assert_func+0x38>)
 80099c2:	461c      	mov	r4, r3
 80099c4:	e7f3      	b.n	80099ae <__assert_func+0x12>
 80099c6:	bf00      	nop
 80099c8:	20000014 	.word	0x20000014
 80099cc:	0800afe5 	.word	0x0800afe5
 80099d0:	0800aff2 	.word	0x0800aff2
 80099d4:	0800b020 	.word	0x0800b020

080099d8 <fiprintf>:
 80099d8:	b40e      	push	{r1, r2, r3}
 80099da:	b503      	push	{r0, r1, lr}
 80099dc:	4601      	mov	r1, r0
 80099de:	ab03      	add	r3, sp, #12
 80099e0:	4805      	ldr	r0, [pc, #20]	; (80099f8 <fiprintf+0x20>)
 80099e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099e6:	6800      	ldr	r0, [r0, #0]
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	f000 f897 	bl	8009b1c <_vfiprintf_r>
 80099ee:	b002      	add	sp, #8
 80099f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099f4:	b003      	add	sp, #12
 80099f6:	4770      	bx	lr
 80099f8:	20000014 	.word	0x20000014

080099fc <__ascii_mbtowc>:
 80099fc:	b082      	sub	sp, #8
 80099fe:	b901      	cbnz	r1, 8009a02 <__ascii_mbtowc+0x6>
 8009a00:	a901      	add	r1, sp, #4
 8009a02:	b142      	cbz	r2, 8009a16 <__ascii_mbtowc+0x1a>
 8009a04:	b14b      	cbz	r3, 8009a1a <__ascii_mbtowc+0x1e>
 8009a06:	7813      	ldrb	r3, [r2, #0]
 8009a08:	600b      	str	r3, [r1, #0]
 8009a0a:	7812      	ldrb	r2, [r2, #0]
 8009a0c:	1e10      	subs	r0, r2, #0
 8009a0e:	bf18      	it	ne
 8009a10:	2001      	movne	r0, #1
 8009a12:	b002      	add	sp, #8
 8009a14:	4770      	bx	lr
 8009a16:	4610      	mov	r0, r2
 8009a18:	e7fb      	b.n	8009a12 <__ascii_mbtowc+0x16>
 8009a1a:	f06f 0001 	mvn.w	r0, #1
 8009a1e:	e7f8      	b.n	8009a12 <__ascii_mbtowc+0x16>

08009a20 <memmove>:
 8009a20:	4288      	cmp	r0, r1
 8009a22:	b510      	push	{r4, lr}
 8009a24:	eb01 0402 	add.w	r4, r1, r2
 8009a28:	d902      	bls.n	8009a30 <memmove+0x10>
 8009a2a:	4284      	cmp	r4, r0
 8009a2c:	4623      	mov	r3, r4
 8009a2e:	d807      	bhi.n	8009a40 <memmove+0x20>
 8009a30:	1e43      	subs	r3, r0, #1
 8009a32:	42a1      	cmp	r1, r4
 8009a34:	d008      	beq.n	8009a48 <memmove+0x28>
 8009a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a3e:	e7f8      	b.n	8009a32 <memmove+0x12>
 8009a40:	4402      	add	r2, r0
 8009a42:	4601      	mov	r1, r0
 8009a44:	428a      	cmp	r2, r1
 8009a46:	d100      	bne.n	8009a4a <memmove+0x2a>
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a52:	e7f7      	b.n	8009a44 <memmove+0x24>

08009a54 <__malloc_lock>:
 8009a54:	4801      	ldr	r0, [pc, #4]	; (8009a5c <__malloc_lock+0x8>)
 8009a56:	f000 bc1f 	b.w	800a298 <__retarget_lock_acquire_recursive>
 8009a5a:	bf00      	nop
 8009a5c:	2000045c 	.word	0x2000045c

08009a60 <__malloc_unlock>:
 8009a60:	4801      	ldr	r0, [pc, #4]	; (8009a68 <__malloc_unlock+0x8>)
 8009a62:	f000 bc1a 	b.w	800a29a <__retarget_lock_release_recursive>
 8009a66:	bf00      	nop
 8009a68:	2000045c 	.word	0x2000045c

08009a6c <_realloc_r>:
 8009a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a70:	4680      	mov	r8, r0
 8009a72:	4614      	mov	r4, r2
 8009a74:	460e      	mov	r6, r1
 8009a76:	b921      	cbnz	r1, 8009a82 <_realloc_r+0x16>
 8009a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	f7ff bdad 	b.w	80095dc <_malloc_r>
 8009a82:	b92a      	cbnz	r2, 8009a90 <_realloc_r+0x24>
 8009a84:	f7ff fd3e 	bl	8009504 <_free_r>
 8009a88:	4625      	mov	r5, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a90:	f000 fc6a 	bl	800a368 <_malloc_usable_size_r>
 8009a94:	4284      	cmp	r4, r0
 8009a96:	4607      	mov	r7, r0
 8009a98:	d802      	bhi.n	8009aa0 <_realloc_r+0x34>
 8009a9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a9e:	d812      	bhi.n	8009ac6 <_realloc_r+0x5a>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f7ff fd9a 	bl	80095dc <_malloc_r>
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0ed      	beq.n	8009a8a <_realloc_r+0x1e>
 8009aae:	42bc      	cmp	r4, r7
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	bf28      	it	cs
 8009ab6:	463a      	movcs	r2, r7
 8009ab8:	f7ff f97c 	bl	8008db4 <memcpy>
 8009abc:	4631      	mov	r1, r6
 8009abe:	4640      	mov	r0, r8
 8009ac0:	f7ff fd20 	bl	8009504 <_free_r>
 8009ac4:	e7e1      	b.n	8009a8a <_realloc_r+0x1e>
 8009ac6:	4635      	mov	r5, r6
 8009ac8:	e7df      	b.n	8009a8a <_realloc_r+0x1e>

08009aca <__sfputc_r>:
 8009aca:	6893      	ldr	r3, [r2, #8]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	b410      	push	{r4}
 8009ad2:	6093      	str	r3, [r2, #8]
 8009ad4:	da08      	bge.n	8009ae8 <__sfputc_r+0x1e>
 8009ad6:	6994      	ldr	r4, [r2, #24]
 8009ad8:	42a3      	cmp	r3, r4
 8009ada:	db01      	blt.n	8009ae0 <__sfputc_r+0x16>
 8009adc:	290a      	cmp	r1, #10
 8009ade:	d103      	bne.n	8009ae8 <__sfputc_r+0x1e>
 8009ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae4:	f000 b94a 	b.w	8009d7c <__swbuf_r>
 8009ae8:	6813      	ldr	r3, [r2, #0]
 8009aea:	1c58      	adds	r0, r3, #1
 8009aec:	6010      	str	r0, [r2, #0]
 8009aee:	7019      	strb	r1, [r3, #0]
 8009af0:	4608      	mov	r0, r1
 8009af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <__sfputs_r>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	4606      	mov	r6, r0
 8009afc:	460f      	mov	r7, r1
 8009afe:	4614      	mov	r4, r2
 8009b00:	18d5      	adds	r5, r2, r3
 8009b02:	42ac      	cmp	r4, r5
 8009b04:	d101      	bne.n	8009b0a <__sfputs_r+0x12>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e007      	b.n	8009b1a <__sfputs_r+0x22>
 8009b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0e:	463a      	mov	r2, r7
 8009b10:	4630      	mov	r0, r6
 8009b12:	f7ff ffda 	bl	8009aca <__sfputc_r>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d1f3      	bne.n	8009b02 <__sfputs_r+0xa>
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b1c <_vfiprintf_r>:
 8009b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b20:	460d      	mov	r5, r1
 8009b22:	b09d      	sub	sp, #116	; 0x74
 8009b24:	4614      	mov	r4, r2
 8009b26:	4698      	mov	r8, r3
 8009b28:	4606      	mov	r6, r0
 8009b2a:	b118      	cbz	r0, 8009b34 <_vfiprintf_r+0x18>
 8009b2c:	6983      	ldr	r3, [r0, #24]
 8009b2e:	b90b      	cbnz	r3, 8009b34 <_vfiprintf_r+0x18>
 8009b30:	f000 fb14 	bl	800a15c <__sinit>
 8009b34:	4b89      	ldr	r3, [pc, #548]	; (8009d5c <_vfiprintf_r+0x240>)
 8009b36:	429d      	cmp	r5, r3
 8009b38:	d11b      	bne.n	8009b72 <_vfiprintf_r+0x56>
 8009b3a:	6875      	ldr	r5, [r6, #4]
 8009b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b3e:	07d9      	lsls	r1, r3, #31
 8009b40:	d405      	bmi.n	8009b4e <_vfiprintf_r+0x32>
 8009b42:	89ab      	ldrh	r3, [r5, #12]
 8009b44:	059a      	lsls	r2, r3, #22
 8009b46:	d402      	bmi.n	8009b4e <_vfiprintf_r+0x32>
 8009b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b4a:	f000 fba5 	bl	800a298 <__retarget_lock_acquire_recursive>
 8009b4e:	89ab      	ldrh	r3, [r5, #12]
 8009b50:	071b      	lsls	r3, r3, #28
 8009b52:	d501      	bpl.n	8009b58 <_vfiprintf_r+0x3c>
 8009b54:	692b      	ldr	r3, [r5, #16]
 8009b56:	b9eb      	cbnz	r3, 8009b94 <_vfiprintf_r+0x78>
 8009b58:	4629      	mov	r1, r5
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	f000 f96e 	bl	8009e3c <__swsetup_r>
 8009b60:	b1c0      	cbz	r0, 8009b94 <_vfiprintf_r+0x78>
 8009b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b64:	07dc      	lsls	r4, r3, #31
 8009b66:	d50e      	bpl.n	8009b86 <_vfiprintf_r+0x6a>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	b01d      	add	sp, #116	; 0x74
 8009b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b72:	4b7b      	ldr	r3, [pc, #492]	; (8009d60 <_vfiprintf_r+0x244>)
 8009b74:	429d      	cmp	r5, r3
 8009b76:	d101      	bne.n	8009b7c <_vfiprintf_r+0x60>
 8009b78:	68b5      	ldr	r5, [r6, #8]
 8009b7a:	e7df      	b.n	8009b3c <_vfiprintf_r+0x20>
 8009b7c:	4b79      	ldr	r3, [pc, #484]	; (8009d64 <_vfiprintf_r+0x248>)
 8009b7e:	429d      	cmp	r5, r3
 8009b80:	bf08      	it	eq
 8009b82:	68f5      	ldreq	r5, [r6, #12]
 8009b84:	e7da      	b.n	8009b3c <_vfiprintf_r+0x20>
 8009b86:	89ab      	ldrh	r3, [r5, #12]
 8009b88:	0598      	lsls	r0, r3, #22
 8009b8a:	d4ed      	bmi.n	8009b68 <_vfiprintf_r+0x4c>
 8009b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8e:	f000 fb84 	bl	800a29a <__retarget_lock_release_recursive>
 8009b92:	e7e9      	b.n	8009b68 <_vfiprintf_r+0x4c>
 8009b94:	2300      	movs	r3, #0
 8009b96:	9309      	str	r3, [sp, #36]	; 0x24
 8009b98:	2320      	movs	r3, #32
 8009b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba2:	2330      	movs	r3, #48	; 0x30
 8009ba4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d68 <_vfiprintf_r+0x24c>
 8009ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bac:	f04f 0901 	mov.w	r9, #1
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	469a      	mov	sl, r3
 8009bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb8:	b10a      	cbz	r2, 8009bbe <_vfiprintf_r+0xa2>
 8009bba:	2a25      	cmp	r2, #37	; 0x25
 8009bbc:	d1f9      	bne.n	8009bb2 <_vfiprintf_r+0x96>
 8009bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc2:	d00b      	beq.n	8009bdc <_vfiprintf_r+0xc0>
 8009bc4:	465b      	mov	r3, fp
 8009bc6:	4622      	mov	r2, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4630      	mov	r0, r6
 8009bcc:	f7ff ff94 	bl	8009af8 <__sfputs_r>
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	f000 80aa 	beq.w	8009d2a <_vfiprintf_r+0x20e>
 8009bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd8:	445a      	add	r2, fp
 8009bda:	9209      	str	r2, [sp, #36]	; 0x24
 8009bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80a2 	beq.w	8009d2a <_vfiprintf_r+0x20e>
 8009be6:	2300      	movs	r3, #0
 8009be8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf0:	f10a 0a01 	add.w	sl, sl, #1
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfe:	4654      	mov	r4, sl
 8009c00:	2205      	movs	r2, #5
 8009c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c06:	4858      	ldr	r0, [pc, #352]	; (8009d68 <_vfiprintf_r+0x24c>)
 8009c08:	f7f6 faf2 	bl	80001f0 <memchr>
 8009c0c:	9a04      	ldr	r2, [sp, #16]
 8009c0e:	b9d8      	cbnz	r0, 8009c48 <_vfiprintf_r+0x12c>
 8009c10:	06d1      	lsls	r1, r2, #27
 8009c12:	bf44      	itt	mi
 8009c14:	2320      	movmi	r3, #32
 8009c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1a:	0713      	lsls	r3, r2, #28
 8009c1c:	bf44      	itt	mi
 8009c1e:	232b      	movmi	r3, #43	; 0x2b
 8009c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c24:	f89a 3000 	ldrb.w	r3, [sl]
 8009c28:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2a:	d015      	beq.n	8009c58 <_vfiprintf_r+0x13c>
 8009c2c:	9a07      	ldr	r2, [sp, #28]
 8009c2e:	4654      	mov	r4, sl
 8009c30:	2000      	movs	r0, #0
 8009c32:	f04f 0c0a 	mov.w	ip, #10
 8009c36:	4621      	mov	r1, r4
 8009c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c3c:	3b30      	subs	r3, #48	; 0x30
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	d94e      	bls.n	8009ce0 <_vfiprintf_r+0x1c4>
 8009c42:	b1b0      	cbz	r0, 8009c72 <_vfiprintf_r+0x156>
 8009c44:	9207      	str	r2, [sp, #28]
 8009c46:	e014      	b.n	8009c72 <_vfiprintf_r+0x156>
 8009c48:	eba0 0308 	sub.w	r3, r0, r8
 8009c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	46a2      	mov	sl, r4
 8009c56:	e7d2      	b.n	8009bfe <_vfiprintf_r+0xe2>
 8009c58:	9b03      	ldr	r3, [sp, #12]
 8009c5a:	1d19      	adds	r1, r3, #4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	9103      	str	r1, [sp, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	bfbb      	ittet	lt
 8009c64:	425b      	neglt	r3, r3
 8009c66:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6a:	9307      	strge	r3, [sp, #28]
 8009c6c:	9307      	strlt	r3, [sp, #28]
 8009c6e:	bfb8      	it	lt
 8009c70:	9204      	strlt	r2, [sp, #16]
 8009c72:	7823      	ldrb	r3, [r4, #0]
 8009c74:	2b2e      	cmp	r3, #46	; 0x2e
 8009c76:	d10c      	bne.n	8009c92 <_vfiprintf_r+0x176>
 8009c78:	7863      	ldrb	r3, [r4, #1]
 8009c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009c7c:	d135      	bne.n	8009cea <_vfiprintf_r+0x1ce>
 8009c7e:	9b03      	ldr	r3, [sp, #12]
 8009c80:	1d1a      	adds	r2, r3, #4
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	9203      	str	r2, [sp, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	bfb8      	it	lt
 8009c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c8e:	3402      	adds	r4, #2
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d78 <_vfiprintf_r+0x25c>
 8009c96:	7821      	ldrb	r1, [r4, #0]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7f6 faa8 	bl	80001f0 <memchr>
 8009ca0:	b140      	cbz	r0, 8009cb4 <_vfiprintf_r+0x198>
 8009ca2:	2340      	movs	r3, #64	; 0x40
 8009ca4:	eba0 000a 	sub.w	r0, r0, sl
 8009ca8:	fa03 f000 	lsl.w	r0, r3, r0
 8009cac:	9b04      	ldr	r3, [sp, #16]
 8009cae:	4303      	orrs	r3, r0
 8009cb0:	3401      	adds	r4, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	482c      	ldr	r0, [pc, #176]	; (8009d6c <_vfiprintf_r+0x250>)
 8009cba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	f7f6 fa96 	bl	80001f0 <memchr>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d03f      	beq.n	8009d48 <_vfiprintf_r+0x22c>
 8009cc8:	4b29      	ldr	r3, [pc, #164]	; (8009d70 <_vfiprintf_r+0x254>)
 8009cca:	bb1b      	cbnz	r3, 8009d14 <_vfiprintf_r+0x1f8>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	3307      	adds	r3, #7
 8009cd0:	f023 0307 	bic.w	r3, r3, #7
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	443b      	add	r3, r7
 8009cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cde:	e767      	b.n	8009bb0 <_vfiprintf_r+0x94>
 8009ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7a5      	b.n	8009c36 <_vfiprintf_r+0x11a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	3401      	adds	r4, #1
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	3a30      	subs	r2, #48	; 0x30
 8009cfe:	2a09      	cmp	r2, #9
 8009d00:	d903      	bls.n	8009d0a <_vfiprintf_r+0x1ee>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c5      	beq.n	8009c92 <_vfiprintf_r+0x176>
 8009d06:	9105      	str	r1, [sp, #20]
 8009d08:	e7c3      	b.n	8009c92 <_vfiprintf_r+0x176>
 8009d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0e:	4604      	mov	r4, r0
 8009d10:	2301      	movs	r3, #1
 8009d12:	e7f0      	b.n	8009cf6 <_vfiprintf_r+0x1da>
 8009d14:	ab03      	add	r3, sp, #12
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4b16      	ldr	r3, [pc, #88]	; (8009d74 <_vfiprintf_r+0x258>)
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7fd fda2 	bl	8007868 <_printf_float>
 8009d24:	4607      	mov	r7, r0
 8009d26:	1c78      	adds	r0, r7, #1
 8009d28:	d1d6      	bne.n	8009cd8 <_vfiprintf_r+0x1bc>
 8009d2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d2c:	07d9      	lsls	r1, r3, #31
 8009d2e:	d405      	bmi.n	8009d3c <_vfiprintf_r+0x220>
 8009d30:	89ab      	ldrh	r3, [r5, #12]
 8009d32:	059a      	lsls	r2, r3, #22
 8009d34:	d402      	bmi.n	8009d3c <_vfiprintf_r+0x220>
 8009d36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d38:	f000 faaf 	bl	800a29a <__retarget_lock_release_recursive>
 8009d3c:	89ab      	ldrh	r3, [r5, #12]
 8009d3e:	065b      	lsls	r3, r3, #25
 8009d40:	f53f af12 	bmi.w	8009b68 <_vfiprintf_r+0x4c>
 8009d44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d46:	e711      	b.n	8009b6c <_vfiprintf_r+0x50>
 8009d48:	ab03      	add	r3, sp, #12
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <_vfiprintf_r+0x258>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	4630      	mov	r0, r6
 8009d54:	f7fe f82c 	bl	8007db0 <_printf_i>
 8009d58:	e7e4      	b.n	8009d24 <_vfiprintf_r+0x208>
 8009d5a:	bf00      	nop
 8009d5c:	0800b14c 	.word	0x0800b14c
 8009d60:	0800b16c 	.word	0x0800b16c
 8009d64:	0800b12c 	.word	0x0800b12c
 8009d68:	0800afd4 	.word	0x0800afd4
 8009d6c:	0800afde 	.word	0x0800afde
 8009d70:	08007869 	.word	0x08007869
 8009d74:	08009af9 	.word	0x08009af9
 8009d78:	0800afda 	.word	0x0800afda

08009d7c <__swbuf_r>:
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	460e      	mov	r6, r1
 8009d80:	4614      	mov	r4, r2
 8009d82:	4605      	mov	r5, r0
 8009d84:	b118      	cbz	r0, 8009d8e <__swbuf_r+0x12>
 8009d86:	6983      	ldr	r3, [r0, #24]
 8009d88:	b90b      	cbnz	r3, 8009d8e <__swbuf_r+0x12>
 8009d8a:	f000 f9e7 	bl	800a15c <__sinit>
 8009d8e:	4b21      	ldr	r3, [pc, #132]	; (8009e14 <__swbuf_r+0x98>)
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d12b      	bne.n	8009dec <__swbuf_r+0x70>
 8009d94:	686c      	ldr	r4, [r5, #4]
 8009d96:	69a3      	ldr	r3, [r4, #24]
 8009d98:	60a3      	str	r3, [r4, #8]
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	071a      	lsls	r2, r3, #28
 8009d9e:	d52f      	bpl.n	8009e00 <__swbuf_r+0x84>
 8009da0:	6923      	ldr	r3, [r4, #16]
 8009da2:	b36b      	cbz	r3, 8009e00 <__swbuf_r+0x84>
 8009da4:	6923      	ldr	r3, [r4, #16]
 8009da6:	6820      	ldr	r0, [r4, #0]
 8009da8:	1ac0      	subs	r0, r0, r3
 8009daa:	6963      	ldr	r3, [r4, #20]
 8009dac:	b2f6      	uxtb	r6, r6
 8009dae:	4283      	cmp	r3, r0
 8009db0:	4637      	mov	r7, r6
 8009db2:	dc04      	bgt.n	8009dbe <__swbuf_r+0x42>
 8009db4:	4621      	mov	r1, r4
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 f93c 	bl	800a034 <_fflush_r>
 8009dbc:	bb30      	cbnz	r0, 8009e0c <__swbuf_r+0x90>
 8009dbe:	68a3      	ldr	r3, [r4, #8]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	60a3      	str	r3, [r4, #8]
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	6022      	str	r2, [r4, #0]
 8009dca:	701e      	strb	r6, [r3, #0]
 8009dcc:	6963      	ldr	r3, [r4, #20]
 8009dce:	3001      	adds	r0, #1
 8009dd0:	4283      	cmp	r3, r0
 8009dd2:	d004      	beq.n	8009dde <__swbuf_r+0x62>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	07db      	lsls	r3, r3, #31
 8009dd8:	d506      	bpl.n	8009de8 <__swbuf_r+0x6c>
 8009dda:	2e0a      	cmp	r6, #10
 8009ddc:	d104      	bne.n	8009de8 <__swbuf_r+0x6c>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f927 	bl	800a034 <_fflush_r>
 8009de6:	b988      	cbnz	r0, 8009e0c <__swbuf_r+0x90>
 8009de8:	4638      	mov	r0, r7
 8009dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dec:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <__swbuf_r+0x9c>)
 8009dee:	429c      	cmp	r4, r3
 8009df0:	d101      	bne.n	8009df6 <__swbuf_r+0x7a>
 8009df2:	68ac      	ldr	r4, [r5, #8]
 8009df4:	e7cf      	b.n	8009d96 <__swbuf_r+0x1a>
 8009df6:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <__swbuf_r+0xa0>)
 8009df8:	429c      	cmp	r4, r3
 8009dfa:	bf08      	it	eq
 8009dfc:	68ec      	ldreq	r4, [r5, #12]
 8009dfe:	e7ca      	b.n	8009d96 <__swbuf_r+0x1a>
 8009e00:	4621      	mov	r1, r4
 8009e02:	4628      	mov	r0, r5
 8009e04:	f000 f81a 	bl	8009e3c <__swsetup_r>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	d0cb      	beq.n	8009da4 <__swbuf_r+0x28>
 8009e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8009e10:	e7ea      	b.n	8009de8 <__swbuf_r+0x6c>
 8009e12:	bf00      	nop
 8009e14:	0800b14c 	.word	0x0800b14c
 8009e18:	0800b16c 	.word	0x0800b16c
 8009e1c:	0800b12c 	.word	0x0800b12c

08009e20 <__ascii_wctomb>:
 8009e20:	b149      	cbz	r1, 8009e36 <__ascii_wctomb+0x16>
 8009e22:	2aff      	cmp	r2, #255	; 0xff
 8009e24:	bf85      	ittet	hi
 8009e26:	238a      	movhi	r3, #138	; 0x8a
 8009e28:	6003      	strhi	r3, [r0, #0]
 8009e2a:	700a      	strbls	r2, [r1, #0]
 8009e2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e30:	bf98      	it	ls
 8009e32:	2001      	movls	r0, #1
 8009e34:	4770      	bx	lr
 8009e36:	4608      	mov	r0, r1
 8009e38:	4770      	bx	lr
	...

08009e3c <__swsetup_r>:
 8009e3c:	4b32      	ldr	r3, [pc, #200]	; (8009f08 <__swsetup_r+0xcc>)
 8009e3e:	b570      	push	{r4, r5, r6, lr}
 8009e40:	681d      	ldr	r5, [r3, #0]
 8009e42:	4606      	mov	r6, r0
 8009e44:	460c      	mov	r4, r1
 8009e46:	b125      	cbz	r5, 8009e52 <__swsetup_r+0x16>
 8009e48:	69ab      	ldr	r3, [r5, #24]
 8009e4a:	b913      	cbnz	r3, 8009e52 <__swsetup_r+0x16>
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f000 f985 	bl	800a15c <__sinit>
 8009e52:	4b2e      	ldr	r3, [pc, #184]	; (8009f0c <__swsetup_r+0xd0>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	d10f      	bne.n	8009e78 <__swsetup_r+0x3c>
 8009e58:	686c      	ldr	r4, [r5, #4]
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e60:	0719      	lsls	r1, r3, #28
 8009e62:	d42c      	bmi.n	8009ebe <__swsetup_r+0x82>
 8009e64:	06dd      	lsls	r5, r3, #27
 8009e66:	d411      	bmi.n	8009e8c <__swsetup_r+0x50>
 8009e68:	2309      	movs	r3, #9
 8009e6a:	6033      	str	r3, [r6, #0]
 8009e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e70:	81a3      	strh	r3, [r4, #12]
 8009e72:	f04f 30ff 	mov.w	r0, #4294967295
 8009e76:	e03e      	b.n	8009ef6 <__swsetup_r+0xba>
 8009e78:	4b25      	ldr	r3, [pc, #148]	; (8009f10 <__swsetup_r+0xd4>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d101      	bne.n	8009e82 <__swsetup_r+0x46>
 8009e7e:	68ac      	ldr	r4, [r5, #8]
 8009e80:	e7eb      	b.n	8009e5a <__swsetup_r+0x1e>
 8009e82:	4b24      	ldr	r3, [pc, #144]	; (8009f14 <__swsetup_r+0xd8>)
 8009e84:	429c      	cmp	r4, r3
 8009e86:	bf08      	it	eq
 8009e88:	68ec      	ldreq	r4, [r5, #12]
 8009e8a:	e7e6      	b.n	8009e5a <__swsetup_r+0x1e>
 8009e8c:	0758      	lsls	r0, r3, #29
 8009e8e:	d512      	bpl.n	8009eb6 <__swsetup_r+0x7a>
 8009e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e92:	b141      	cbz	r1, 8009ea6 <__swsetup_r+0x6a>
 8009e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e98:	4299      	cmp	r1, r3
 8009e9a:	d002      	beq.n	8009ea2 <__swsetup_r+0x66>
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7ff fb31 	bl	8009504 <_free_r>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	2300      	movs	r3, #0
 8009eb0:	6063      	str	r3, [r4, #4]
 8009eb2:	6923      	ldr	r3, [r4, #16]
 8009eb4:	6023      	str	r3, [r4, #0]
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	f043 0308 	orr.w	r3, r3, #8
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	6923      	ldr	r3, [r4, #16]
 8009ec0:	b94b      	cbnz	r3, 8009ed6 <__swsetup_r+0x9a>
 8009ec2:	89a3      	ldrh	r3, [r4, #12]
 8009ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ecc:	d003      	beq.n	8009ed6 <__swsetup_r+0x9a>
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f000 fa09 	bl	800a2e8 <__smakebuf_r>
 8009ed6:	89a0      	ldrh	r0, [r4, #12]
 8009ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009edc:	f010 0301 	ands.w	r3, r0, #1
 8009ee0:	d00a      	beq.n	8009ef8 <__swsetup_r+0xbc>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60a3      	str	r3, [r4, #8]
 8009ee6:	6963      	ldr	r3, [r4, #20]
 8009ee8:	425b      	negs	r3, r3
 8009eea:	61a3      	str	r3, [r4, #24]
 8009eec:	6923      	ldr	r3, [r4, #16]
 8009eee:	b943      	cbnz	r3, 8009f02 <__swsetup_r+0xc6>
 8009ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ef4:	d1ba      	bne.n	8009e6c <__swsetup_r+0x30>
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}
 8009ef8:	0781      	lsls	r1, r0, #30
 8009efa:	bf58      	it	pl
 8009efc:	6963      	ldrpl	r3, [r4, #20]
 8009efe:	60a3      	str	r3, [r4, #8]
 8009f00:	e7f4      	b.n	8009eec <__swsetup_r+0xb0>
 8009f02:	2000      	movs	r0, #0
 8009f04:	e7f7      	b.n	8009ef6 <__swsetup_r+0xba>
 8009f06:	bf00      	nop
 8009f08:	20000014 	.word	0x20000014
 8009f0c:	0800b14c 	.word	0x0800b14c
 8009f10:	0800b16c 	.word	0x0800b16c
 8009f14:	0800b12c 	.word	0x0800b12c

08009f18 <abort>:
 8009f18:	b508      	push	{r3, lr}
 8009f1a:	2006      	movs	r0, #6
 8009f1c:	f000 fa54 	bl	800a3c8 <raise>
 8009f20:	2001      	movs	r0, #1
 8009f22:	f7fa f96f 	bl	8004204 <_exit>
	...

08009f28 <__sflush_r>:
 8009f28:	898a      	ldrh	r2, [r1, #12]
 8009f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2e:	4605      	mov	r5, r0
 8009f30:	0710      	lsls	r0, r2, #28
 8009f32:	460c      	mov	r4, r1
 8009f34:	d458      	bmi.n	8009fe8 <__sflush_r+0xc0>
 8009f36:	684b      	ldr	r3, [r1, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	dc05      	bgt.n	8009f48 <__sflush_r+0x20>
 8009f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	dc02      	bgt.n	8009f48 <__sflush_r+0x20>
 8009f42:	2000      	movs	r0, #0
 8009f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f4a:	2e00      	cmp	r6, #0
 8009f4c:	d0f9      	beq.n	8009f42 <__sflush_r+0x1a>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f54:	682f      	ldr	r7, [r5, #0]
 8009f56:	602b      	str	r3, [r5, #0]
 8009f58:	d032      	beq.n	8009fc0 <__sflush_r+0x98>
 8009f5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	075a      	lsls	r2, r3, #29
 8009f60:	d505      	bpl.n	8009f6e <__sflush_r+0x46>
 8009f62:	6863      	ldr	r3, [r4, #4]
 8009f64:	1ac0      	subs	r0, r0, r3
 8009f66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f68:	b10b      	cbz	r3, 8009f6e <__sflush_r+0x46>
 8009f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f6c:	1ac0      	subs	r0, r0, r3
 8009f6e:	2300      	movs	r3, #0
 8009f70:	4602      	mov	r2, r0
 8009f72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f74:	6a21      	ldr	r1, [r4, #32]
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b0      	blx	r6
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	d106      	bne.n	8009f8e <__sflush_r+0x66>
 8009f80:	6829      	ldr	r1, [r5, #0]
 8009f82:	291d      	cmp	r1, #29
 8009f84:	d82c      	bhi.n	8009fe0 <__sflush_r+0xb8>
 8009f86:	4a2a      	ldr	r2, [pc, #168]	; (800a030 <__sflush_r+0x108>)
 8009f88:	40ca      	lsrs	r2, r1
 8009f8a:	07d6      	lsls	r6, r2, #31
 8009f8c:	d528      	bpl.n	8009fe0 <__sflush_r+0xb8>
 8009f8e:	2200      	movs	r2, #0
 8009f90:	6062      	str	r2, [r4, #4]
 8009f92:	04d9      	lsls	r1, r3, #19
 8009f94:	6922      	ldr	r2, [r4, #16]
 8009f96:	6022      	str	r2, [r4, #0]
 8009f98:	d504      	bpl.n	8009fa4 <__sflush_r+0x7c>
 8009f9a:	1c42      	adds	r2, r0, #1
 8009f9c:	d101      	bne.n	8009fa2 <__sflush_r+0x7a>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b903      	cbnz	r3, 8009fa4 <__sflush_r+0x7c>
 8009fa2:	6560      	str	r0, [r4, #84]	; 0x54
 8009fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa6:	602f      	str	r7, [r5, #0]
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	d0ca      	beq.n	8009f42 <__sflush_r+0x1a>
 8009fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fb0:	4299      	cmp	r1, r3
 8009fb2:	d002      	beq.n	8009fba <__sflush_r+0x92>
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f7ff faa5 	bl	8009504 <_free_r>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	6360      	str	r0, [r4, #52]	; 0x34
 8009fbe:	e7c1      	b.n	8009f44 <__sflush_r+0x1c>
 8009fc0:	6a21      	ldr	r1, [r4, #32]
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	47b0      	blx	r6
 8009fc8:	1c41      	adds	r1, r0, #1
 8009fca:	d1c7      	bne.n	8009f5c <__sflush_r+0x34>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0c4      	beq.n	8009f5c <__sflush_r+0x34>
 8009fd2:	2b1d      	cmp	r3, #29
 8009fd4:	d001      	beq.n	8009fda <__sflush_r+0xb2>
 8009fd6:	2b16      	cmp	r3, #22
 8009fd8:	d101      	bne.n	8009fde <__sflush_r+0xb6>
 8009fda:	602f      	str	r7, [r5, #0]
 8009fdc:	e7b1      	b.n	8009f42 <__sflush_r+0x1a>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	e7ad      	b.n	8009f44 <__sflush_r+0x1c>
 8009fe8:	690f      	ldr	r7, [r1, #16]
 8009fea:	2f00      	cmp	r7, #0
 8009fec:	d0a9      	beq.n	8009f42 <__sflush_r+0x1a>
 8009fee:	0793      	lsls	r3, r2, #30
 8009ff0:	680e      	ldr	r6, [r1, #0]
 8009ff2:	bf08      	it	eq
 8009ff4:	694b      	ldreq	r3, [r1, #20]
 8009ff6:	600f      	str	r7, [r1, #0]
 8009ff8:	bf18      	it	ne
 8009ffa:	2300      	movne	r3, #0
 8009ffc:	eba6 0807 	sub.w	r8, r6, r7
 800a000:	608b      	str	r3, [r1, #8]
 800a002:	f1b8 0f00 	cmp.w	r8, #0
 800a006:	dd9c      	ble.n	8009f42 <__sflush_r+0x1a>
 800a008:	6a21      	ldr	r1, [r4, #32]
 800a00a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a00c:	4643      	mov	r3, r8
 800a00e:	463a      	mov	r2, r7
 800a010:	4628      	mov	r0, r5
 800a012:	47b0      	blx	r6
 800a014:	2800      	cmp	r0, #0
 800a016:	dc06      	bgt.n	800a026 <__sflush_r+0xfe>
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a01e:	81a3      	strh	r3, [r4, #12]
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e78e      	b.n	8009f44 <__sflush_r+0x1c>
 800a026:	4407      	add	r7, r0
 800a028:	eba8 0800 	sub.w	r8, r8, r0
 800a02c:	e7e9      	b.n	800a002 <__sflush_r+0xda>
 800a02e:	bf00      	nop
 800a030:	20400001 	.word	0x20400001

0800a034 <_fflush_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	690b      	ldr	r3, [r1, #16]
 800a038:	4605      	mov	r5, r0
 800a03a:	460c      	mov	r4, r1
 800a03c:	b913      	cbnz	r3, 800a044 <_fflush_r+0x10>
 800a03e:	2500      	movs	r5, #0
 800a040:	4628      	mov	r0, r5
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	b118      	cbz	r0, 800a04e <_fflush_r+0x1a>
 800a046:	6983      	ldr	r3, [r0, #24]
 800a048:	b90b      	cbnz	r3, 800a04e <_fflush_r+0x1a>
 800a04a:	f000 f887 	bl	800a15c <__sinit>
 800a04e:	4b14      	ldr	r3, [pc, #80]	; (800a0a0 <_fflush_r+0x6c>)
 800a050:	429c      	cmp	r4, r3
 800a052:	d11b      	bne.n	800a08c <_fflush_r+0x58>
 800a054:	686c      	ldr	r4, [r5, #4]
 800a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d0ef      	beq.n	800a03e <_fflush_r+0xa>
 800a05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a060:	07d0      	lsls	r0, r2, #31
 800a062:	d404      	bmi.n	800a06e <_fflush_r+0x3a>
 800a064:	0599      	lsls	r1, r3, #22
 800a066:	d402      	bmi.n	800a06e <_fflush_r+0x3a>
 800a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a06a:	f000 f915 	bl	800a298 <__retarget_lock_acquire_recursive>
 800a06e:	4628      	mov	r0, r5
 800a070:	4621      	mov	r1, r4
 800a072:	f7ff ff59 	bl	8009f28 <__sflush_r>
 800a076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a078:	07da      	lsls	r2, r3, #31
 800a07a:	4605      	mov	r5, r0
 800a07c:	d4e0      	bmi.n	800a040 <_fflush_r+0xc>
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	059b      	lsls	r3, r3, #22
 800a082:	d4dd      	bmi.n	800a040 <_fflush_r+0xc>
 800a084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a086:	f000 f908 	bl	800a29a <__retarget_lock_release_recursive>
 800a08a:	e7d9      	b.n	800a040 <_fflush_r+0xc>
 800a08c:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <_fflush_r+0x70>)
 800a08e:	429c      	cmp	r4, r3
 800a090:	d101      	bne.n	800a096 <_fflush_r+0x62>
 800a092:	68ac      	ldr	r4, [r5, #8]
 800a094:	e7df      	b.n	800a056 <_fflush_r+0x22>
 800a096:	4b04      	ldr	r3, [pc, #16]	; (800a0a8 <_fflush_r+0x74>)
 800a098:	429c      	cmp	r4, r3
 800a09a:	bf08      	it	eq
 800a09c:	68ec      	ldreq	r4, [r5, #12]
 800a09e:	e7da      	b.n	800a056 <_fflush_r+0x22>
 800a0a0:	0800b14c 	.word	0x0800b14c
 800a0a4:	0800b16c 	.word	0x0800b16c
 800a0a8:	0800b12c 	.word	0x0800b12c

0800a0ac <std>:
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	b510      	push	{r4, lr}
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a0b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0ba:	6083      	str	r3, [r0, #8]
 800a0bc:	8181      	strh	r1, [r0, #12]
 800a0be:	6643      	str	r3, [r0, #100]	; 0x64
 800a0c0:	81c2      	strh	r2, [r0, #14]
 800a0c2:	6183      	str	r3, [r0, #24]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	2208      	movs	r2, #8
 800a0c8:	305c      	adds	r0, #92	; 0x5c
 800a0ca:	f7fd fb25 	bl	8007718 <memset>
 800a0ce:	4b05      	ldr	r3, [pc, #20]	; (800a0e4 <std+0x38>)
 800a0d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a0d2:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <std+0x3c>)
 800a0d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0d6:	4b05      	ldr	r3, [pc, #20]	; (800a0ec <std+0x40>)
 800a0d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a0da:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <std+0x44>)
 800a0dc:	6224      	str	r4, [r4, #32]
 800a0de:	6323      	str	r3, [r4, #48]	; 0x30
 800a0e0:	bd10      	pop	{r4, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800a401 	.word	0x0800a401
 800a0e8:	0800a423 	.word	0x0800a423
 800a0ec:	0800a45b 	.word	0x0800a45b
 800a0f0:	0800a47f 	.word	0x0800a47f

0800a0f4 <_cleanup_r>:
 800a0f4:	4901      	ldr	r1, [pc, #4]	; (800a0fc <_cleanup_r+0x8>)
 800a0f6:	f000 b8af 	b.w	800a258 <_fwalk_reent>
 800a0fa:	bf00      	nop
 800a0fc:	0800a035 	.word	0x0800a035

0800a100 <__sfmoreglue>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	2268      	movs	r2, #104	; 0x68
 800a104:	1e4d      	subs	r5, r1, #1
 800a106:	4355      	muls	r5, r2
 800a108:	460e      	mov	r6, r1
 800a10a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a10e:	f7ff fa65 	bl	80095dc <_malloc_r>
 800a112:	4604      	mov	r4, r0
 800a114:	b140      	cbz	r0, 800a128 <__sfmoreglue+0x28>
 800a116:	2100      	movs	r1, #0
 800a118:	e9c0 1600 	strd	r1, r6, [r0]
 800a11c:	300c      	adds	r0, #12
 800a11e:	60a0      	str	r0, [r4, #8]
 800a120:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a124:	f7fd faf8 	bl	8007718 <memset>
 800a128:	4620      	mov	r0, r4
 800a12a:	bd70      	pop	{r4, r5, r6, pc}

0800a12c <__sfp_lock_acquire>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__sfp_lock_acquire+0x8>)
 800a12e:	f000 b8b3 	b.w	800a298 <__retarget_lock_acquire_recursive>
 800a132:	bf00      	nop
 800a134:	2000045d 	.word	0x2000045d

0800a138 <__sfp_lock_release>:
 800a138:	4801      	ldr	r0, [pc, #4]	; (800a140 <__sfp_lock_release+0x8>)
 800a13a:	f000 b8ae 	b.w	800a29a <__retarget_lock_release_recursive>
 800a13e:	bf00      	nop
 800a140:	2000045d 	.word	0x2000045d

0800a144 <__sinit_lock_acquire>:
 800a144:	4801      	ldr	r0, [pc, #4]	; (800a14c <__sinit_lock_acquire+0x8>)
 800a146:	f000 b8a7 	b.w	800a298 <__retarget_lock_acquire_recursive>
 800a14a:	bf00      	nop
 800a14c:	2000045e 	.word	0x2000045e

0800a150 <__sinit_lock_release>:
 800a150:	4801      	ldr	r0, [pc, #4]	; (800a158 <__sinit_lock_release+0x8>)
 800a152:	f000 b8a2 	b.w	800a29a <__retarget_lock_release_recursive>
 800a156:	bf00      	nop
 800a158:	2000045e 	.word	0x2000045e

0800a15c <__sinit>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	4604      	mov	r4, r0
 800a160:	f7ff fff0 	bl	800a144 <__sinit_lock_acquire>
 800a164:	69a3      	ldr	r3, [r4, #24]
 800a166:	b11b      	cbz	r3, 800a170 <__sinit+0x14>
 800a168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16c:	f7ff bff0 	b.w	800a150 <__sinit_lock_release>
 800a170:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a174:	6523      	str	r3, [r4, #80]	; 0x50
 800a176:	4b13      	ldr	r3, [pc, #76]	; (800a1c4 <__sinit+0x68>)
 800a178:	4a13      	ldr	r2, [pc, #76]	; (800a1c8 <__sinit+0x6c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a17e:	42a3      	cmp	r3, r4
 800a180:	bf04      	itt	eq
 800a182:	2301      	moveq	r3, #1
 800a184:	61a3      	streq	r3, [r4, #24]
 800a186:	4620      	mov	r0, r4
 800a188:	f000 f820 	bl	800a1cc <__sfp>
 800a18c:	6060      	str	r0, [r4, #4]
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 f81c 	bl	800a1cc <__sfp>
 800a194:	60a0      	str	r0, [r4, #8]
 800a196:	4620      	mov	r0, r4
 800a198:	f000 f818 	bl	800a1cc <__sfp>
 800a19c:	2200      	movs	r2, #0
 800a19e:	60e0      	str	r0, [r4, #12]
 800a1a0:	2104      	movs	r1, #4
 800a1a2:	6860      	ldr	r0, [r4, #4]
 800a1a4:	f7ff ff82 	bl	800a0ac <std>
 800a1a8:	68a0      	ldr	r0, [r4, #8]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	2109      	movs	r1, #9
 800a1ae:	f7ff ff7d 	bl	800a0ac <std>
 800a1b2:	68e0      	ldr	r0, [r4, #12]
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	2112      	movs	r1, #18
 800a1b8:	f7ff ff78 	bl	800a0ac <std>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	61a3      	str	r3, [r4, #24]
 800a1c0:	e7d2      	b.n	800a168 <__sinit+0xc>
 800a1c2:	bf00      	nop
 800a1c4:	0800adb4 	.word	0x0800adb4
 800a1c8:	0800a0f5 	.word	0x0800a0f5

0800a1cc <__sfp>:
 800a1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ce:	4607      	mov	r7, r0
 800a1d0:	f7ff ffac 	bl	800a12c <__sfp_lock_acquire>
 800a1d4:	4b1e      	ldr	r3, [pc, #120]	; (800a250 <__sfp+0x84>)
 800a1d6:	681e      	ldr	r6, [r3, #0]
 800a1d8:	69b3      	ldr	r3, [r6, #24]
 800a1da:	b913      	cbnz	r3, 800a1e2 <__sfp+0x16>
 800a1dc:	4630      	mov	r0, r6
 800a1de:	f7ff ffbd 	bl	800a15c <__sinit>
 800a1e2:	3648      	adds	r6, #72	; 0x48
 800a1e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a1e8:	3b01      	subs	r3, #1
 800a1ea:	d503      	bpl.n	800a1f4 <__sfp+0x28>
 800a1ec:	6833      	ldr	r3, [r6, #0]
 800a1ee:	b30b      	cbz	r3, 800a234 <__sfp+0x68>
 800a1f0:	6836      	ldr	r6, [r6, #0]
 800a1f2:	e7f7      	b.n	800a1e4 <__sfp+0x18>
 800a1f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a1f8:	b9d5      	cbnz	r5, 800a230 <__sfp+0x64>
 800a1fa:	4b16      	ldr	r3, [pc, #88]	; (800a254 <__sfp+0x88>)
 800a1fc:	60e3      	str	r3, [r4, #12]
 800a1fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a202:	6665      	str	r5, [r4, #100]	; 0x64
 800a204:	f000 f847 	bl	800a296 <__retarget_lock_init_recursive>
 800a208:	f7ff ff96 	bl	800a138 <__sfp_lock_release>
 800a20c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a210:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a214:	6025      	str	r5, [r4, #0]
 800a216:	61a5      	str	r5, [r4, #24]
 800a218:	2208      	movs	r2, #8
 800a21a:	4629      	mov	r1, r5
 800a21c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a220:	f7fd fa7a 	bl	8007718 <memset>
 800a224:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a228:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a22c:	4620      	mov	r0, r4
 800a22e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a230:	3468      	adds	r4, #104	; 0x68
 800a232:	e7d9      	b.n	800a1e8 <__sfp+0x1c>
 800a234:	2104      	movs	r1, #4
 800a236:	4638      	mov	r0, r7
 800a238:	f7ff ff62 	bl	800a100 <__sfmoreglue>
 800a23c:	4604      	mov	r4, r0
 800a23e:	6030      	str	r0, [r6, #0]
 800a240:	2800      	cmp	r0, #0
 800a242:	d1d5      	bne.n	800a1f0 <__sfp+0x24>
 800a244:	f7ff ff78 	bl	800a138 <__sfp_lock_release>
 800a248:	230c      	movs	r3, #12
 800a24a:	603b      	str	r3, [r7, #0]
 800a24c:	e7ee      	b.n	800a22c <__sfp+0x60>
 800a24e:	bf00      	nop
 800a250:	0800adb4 	.word	0x0800adb4
 800a254:	ffff0001 	.word	0xffff0001

0800a258 <_fwalk_reent>:
 800a258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a25c:	4606      	mov	r6, r0
 800a25e:	4688      	mov	r8, r1
 800a260:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a264:	2700      	movs	r7, #0
 800a266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a26a:	f1b9 0901 	subs.w	r9, r9, #1
 800a26e:	d505      	bpl.n	800a27c <_fwalk_reent+0x24>
 800a270:	6824      	ldr	r4, [r4, #0]
 800a272:	2c00      	cmp	r4, #0
 800a274:	d1f7      	bne.n	800a266 <_fwalk_reent+0xe>
 800a276:	4638      	mov	r0, r7
 800a278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a27c:	89ab      	ldrh	r3, [r5, #12]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d907      	bls.n	800a292 <_fwalk_reent+0x3a>
 800a282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a286:	3301      	adds	r3, #1
 800a288:	d003      	beq.n	800a292 <_fwalk_reent+0x3a>
 800a28a:	4629      	mov	r1, r5
 800a28c:	4630      	mov	r0, r6
 800a28e:	47c0      	blx	r8
 800a290:	4307      	orrs	r7, r0
 800a292:	3568      	adds	r5, #104	; 0x68
 800a294:	e7e9      	b.n	800a26a <_fwalk_reent+0x12>

0800a296 <__retarget_lock_init_recursive>:
 800a296:	4770      	bx	lr

0800a298 <__retarget_lock_acquire_recursive>:
 800a298:	4770      	bx	lr

0800a29a <__retarget_lock_release_recursive>:
 800a29a:	4770      	bx	lr

0800a29c <__swhatbuf_r>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	460e      	mov	r6, r1
 800a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a4:	2900      	cmp	r1, #0
 800a2a6:	b096      	sub	sp, #88	; 0x58
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	da08      	bge.n	800a2c0 <__swhatbuf_r+0x24>
 800a2ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	602a      	str	r2, [r5, #0]
 800a2b6:	061a      	lsls	r2, r3, #24
 800a2b8:	d410      	bmi.n	800a2dc <__swhatbuf_r+0x40>
 800a2ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2be:	e00e      	b.n	800a2de <__swhatbuf_r+0x42>
 800a2c0:	466a      	mov	r2, sp
 800a2c2:	f000 f903 	bl	800a4cc <_fstat_r>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	dbf1      	blt.n	800a2ae <__swhatbuf_r+0x12>
 800a2ca:	9a01      	ldr	r2, [sp, #4]
 800a2cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a2d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a2d4:	425a      	negs	r2, r3
 800a2d6:	415a      	adcs	r2, r3
 800a2d8:	602a      	str	r2, [r5, #0]
 800a2da:	e7ee      	b.n	800a2ba <__swhatbuf_r+0x1e>
 800a2dc:	2340      	movs	r3, #64	; 0x40
 800a2de:	2000      	movs	r0, #0
 800a2e0:	6023      	str	r3, [r4, #0]
 800a2e2:	b016      	add	sp, #88	; 0x58
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2e8 <__smakebuf_r>:
 800a2e8:	898b      	ldrh	r3, [r1, #12]
 800a2ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2ec:	079d      	lsls	r5, r3, #30
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	d507      	bpl.n	800a304 <__smakebuf_r+0x1c>
 800a2f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a2f8:	6023      	str	r3, [r4, #0]
 800a2fa:	6123      	str	r3, [r4, #16]
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	6163      	str	r3, [r4, #20]
 800a300:	b002      	add	sp, #8
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	ab01      	add	r3, sp, #4
 800a306:	466a      	mov	r2, sp
 800a308:	f7ff ffc8 	bl	800a29c <__swhatbuf_r>
 800a30c:	9900      	ldr	r1, [sp, #0]
 800a30e:	4605      	mov	r5, r0
 800a310:	4630      	mov	r0, r6
 800a312:	f7ff f963 	bl	80095dc <_malloc_r>
 800a316:	b948      	cbnz	r0, 800a32c <__smakebuf_r+0x44>
 800a318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31c:	059a      	lsls	r2, r3, #22
 800a31e:	d4ef      	bmi.n	800a300 <__smakebuf_r+0x18>
 800a320:	f023 0303 	bic.w	r3, r3, #3
 800a324:	f043 0302 	orr.w	r3, r3, #2
 800a328:	81a3      	strh	r3, [r4, #12]
 800a32a:	e7e3      	b.n	800a2f4 <__smakebuf_r+0xc>
 800a32c:	4b0d      	ldr	r3, [pc, #52]	; (800a364 <__smakebuf_r+0x7c>)
 800a32e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a330:	89a3      	ldrh	r3, [r4, #12]
 800a332:	6020      	str	r0, [r4, #0]
 800a334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	9b00      	ldr	r3, [sp, #0]
 800a33c:	6163      	str	r3, [r4, #20]
 800a33e:	9b01      	ldr	r3, [sp, #4]
 800a340:	6120      	str	r0, [r4, #16]
 800a342:	b15b      	cbz	r3, 800a35c <__smakebuf_r+0x74>
 800a344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a348:	4630      	mov	r0, r6
 800a34a:	f000 f8d1 	bl	800a4f0 <_isatty_r>
 800a34e:	b128      	cbz	r0, 800a35c <__smakebuf_r+0x74>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f023 0303 	bic.w	r3, r3, #3
 800a356:	f043 0301 	orr.w	r3, r3, #1
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	89a0      	ldrh	r0, [r4, #12]
 800a35e:	4305      	orrs	r5, r0
 800a360:	81a5      	strh	r5, [r4, #12]
 800a362:	e7cd      	b.n	800a300 <__smakebuf_r+0x18>
 800a364:	0800a0f5 	.word	0x0800a0f5

0800a368 <_malloc_usable_size_r>:
 800a368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a36c:	1f18      	subs	r0, r3, #4
 800a36e:	2b00      	cmp	r3, #0
 800a370:	bfbc      	itt	lt
 800a372:	580b      	ldrlt	r3, [r1, r0]
 800a374:	18c0      	addlt	r0, r0, r3
 800a376:	4770      	bx	lr

0800a378 <_raise_r>:
 800a378:	291f      	cmp	r1, #31
 800a37a:	b538      	push	{r3, r4, r5, lr}
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	d904      	bls.n	800a38c <_raise_r+0x14>
 800a382:	2316      	movs	r3, #22
 800a384:	6003      	str	r3, [r0, #0]
 800a386:	f04f 30ff 	mov.w	r0, #4294967295
 800a38a:	bd38      	pop	{r3, r4, r5, pc}
 800a38c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a38e:	b112      	cbz	r2, 800a396 <_raise_r+0x1e>
 800a390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a394:	b94b      	cbnz	r3, 800a3aa <_raise_r+0x32>
 800a396:	4620      	mov	r0, r4
 800a398:	f000 f830 	bl	800a3fc <_getpid_r>
 800a39c:	462a      	mov	r2, r5
 800a39e:	4601      	mov	r1, r0
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3a6:	f000 b817 	b.w	800a3d8 <_kill_r>
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d00a      	beq.n	800a3c4 <_raise_r+0x4c>
 800a3ae:	1c59      	adds	r1, r3, #1
 800a3b0:	d103      	bne.n	800a3ba <_raise_r+0x42>
 800a3b2:	2316      	movs	r3, #22
 800a3b4:	6003      	str	r3, [r0, #0]
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	e7e7      	b.n	800a38a <_raise_r+0x12>
 800a3ba:	2400      	movs	r4, #0
 800a3bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	4798      	blx	r3
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	e7e0      	b.n	800a38a <_raise_r+0x12>

0800a3c8 <raise>:
 800a3c8:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <raise+0xc>)
 800a3ca:	4601      	mov	r1, r0
 800a3cc:	6818      	ldr	r0, [r3, #0]
 800a3ce:	f7ff bfd3 	b.w	800a378 <_raise_r>
 800a3d2:	bf00      	nop
 800a3d4:	20000014 	.word	0x20000014

0800a3d8 <_kill_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d07      	ldr	r5, [pc, #28]	; (800a3f8 <_kill_r+0x20>)
 800a3dc:	2300      	movs	r3, #0
 800a3de:	4604      	mov	r4, r0
 800a3e0:	4608      	mov	r0, r1
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	602b      	str	r3, [r5, #0]
 800a3e6:	f7f9 fefd 	bl	80041e4 <_kill>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	d102      	bne.n	800a3f4 <_kill_r+0x1c>
 800a3ee:	682b      	ldr	r3, [r5, #0]
 800a3f0:	b103      	cbz	r3, 800a3f4 <_kill_r+0x1c>
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	bd38      	pop	{r3, r4, r5, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000458 	.word	0x20000458

0800a3fc <_getpid_r>:
 800a3fc:	f7f9 beea 	b.w	80041d4 <_getpid>

0800a400 <__sread>:
 800a400:	b510      	push	{r4, lr}
 800a402:	460c      	mov	r4, r1
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	f000 f894 	bl	800a534 <_read_r>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	bfab      	itete	ge
 800a410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a412:	89a3      	ldrhlt	r3, [r4, #12]
 800a414:	181b      	addge	r3, r3, r0
 800a416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a41a:	bfac      	ite	ge
 800a41c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a41e:	81a3      	strhlt	r3, [r4, #12]
 800a420:	bd10      	pop	{r4, pc}

0800a422 <__swrite>:
 800a422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	461f      	mov	r7, r3
 800a428:	898b      	ldrh	r3, [r1, #12]
 800a42a:	05db      	lsls	r3, r3, #23
 800a42c:	4605      	mov	r5, r0
 800a42e:	460c      	mov	r4, r1
 800a430:	4616      	mov	r6, r2
 800a432:	d505      	bpl.n	800a440 <__swrite+0x1e>
 800a434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a438:	2302      	movs	r3, #2
 800a43a:	2200      	movs	r2, #0
 800a43c:	f000 f868 	bl	800a510 <_lseek_r>
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a44a:	81a3      	strh	r3, [r4, #12]
 800a44c:	4632      	mov	r2, r6
 800a44e:	463b      	mov	r3, r7
 800a450:	4628      	mov	r0, r5
 800a452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a456:	f000 b817 	b.w	800a488 <_write_r>

0800a45a <__sseek>:
 800a45a:	b510      	push	{r4, lr}
 800a45c:	460c      	mov	r4, r1
 800a45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a462:	f000 f855 	bl	800a510 <_lseek_r>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	89a3      	ldrh	r3, [r4, #12]
 800a46a:	bf15      	itete	ne
 800a46c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a476:	81a3      	strheq	r3, [r4, #12]
 800a478:	bf18      	it	ne
 800a47a:	81a3      	strhne	r3, [r4, #12]
 800a47c:	bd10      	pop	{r4, pc}

0800a47e <__sclose>:
 800a47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a482:	f000 b813 	b.w	800a4ac <_close_r>
	...

0800a488 <_write_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d07      	ldr	r5, [pc, #28]	; (800a4a8 <_write_r+0x20>)
 800a48c:	4604      	mov	r4, r0
 800a48e:	4608      	mov	r0, r1
 800a490:	4611      	mov	r1, r2
 800a492:	2200      	movs	r2, #0
 800a494:	602a      	str	r2, [r5, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	f7f9 fedb 	bl	8004252 <_write>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_write_r+0x1e>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_write_r+0x1e>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	20000458 	.word	0x20000458

0800a4ac <_close_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d06      	ldr	r5, [pc, #24]	; (800a4c8 <_close_r+0x1c>)
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	4608      	mov	r0, r1
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	f7f9 fee7 	bl	800428a <_close>
 800a4bc:	1c43      	adds	r3, r0, #1
 800a4be:	d102      	bne.n	800a4c6 <_close_r+0x1a>
 800a4c0:	682b      	ldr	r3, [r5, #0]
 800a4c2:	b103      	cbz	r3, 800a4c6 <_close_r+0x1a>
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	bd38      	pop	{r3, r4, r5, pc}
 800a4c8:	20000458 	.word	0x20000458

0800a4cc <_fstat_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	4d07      	ldr	r5, [pc, #28]	; (800a4ec <_fstat_r+0x20>)
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	602b      	str	r3, [r5, #0]
 800a4da:	f7f9 fee2 	bl	80042a2 <_fstat>
 800a4de:	1c43      	adds	r3, r0, #1
 800a4e0:	d102      	bne.n	800a4e8 <_fstat_r+0x1c>
 800a4e2:	682b      	ldr	r3, [r5, #0]
 800a4e4:	b103      	cbz	r3, 800a4e8 <_fstat_r+0x1c>
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	bd38      	pop	{r3, r4, r5, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000458 	.word	0x20000458

0800a4f0 <_isatty_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4d06      	ldr	r5, [pc, #24]	; (800a50c <_isatty_r+0x1c>)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	f7f9 fee1 	bl	80042c2 <_isatty>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_isatty_r+0x1a>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_isatty_r+0x1a>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	20000458 	.word	0x20000458

0800a510 <_lseek_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4d07      	ldr	r5, [pc, #28]	; (800a530 <_lseek_r+0x20>)
 800a514:	4604      	mov	r4, r0
 800a516:	4608      	mov	r0, r1
 800a518:	4611      	mov	r1, r2
 800a51a:	2200      	movs	r2, #0
 800a51c:	602a      	str	r2, [r5, #0]
 800a51e:	461a      	mov	r2, r3
 800a520:	f7f9 feda 	bl	80042d8 <_lseek>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_lseek_r+0x1e>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_lseek_r+0x1e>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20000458 	.word	0x20000458

0800a534 <_read_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d07      	ldr	r5, [pc, #28]	; (800a554 <_read_r+0x20>)
 800a538:	4604      	mov	r4, r0
 800a53a:	4608      	mov	r0, r1
 800a53c:	4611      	mov	r1, r2
 800a53e:	2200      	movs	r2, #0
 800a540:	602a      	str	r2, [r5, #0]
 800a542:	461a      	mov	r2, r3
 800a544:	f7f9 fe68 	bl	8004218 <_read>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_read_r+0x1e>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_read_r+0x1e>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	20000458 	.word	0x20000458

0800a558 <sqrt>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	ed2d 8b02 	vpush	{d8}
 800a55e:	ec55 4b10 	vmov	r4, r5, d0
 800a562:	f000 f853 	bl	800a60c <__ieee754_sqrt>
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	eeb0 8a40 	vmov.f32	s16, s0
 800a572:	eef0 8a60 	vmov.f32	s17, s1
 800a576:	f7f6 fae1 	bl	8000b3c <__aeabi_dcmpun>
 800a57a:	b990      	cbnz	r0, 800a5a2 <sqrt+0x4a>
 800a57c:	2200      	movs	r2, #0
 800a57e:	2300      	movs	r3, #0
 800a580:	4620      	mov	r0, r4
 800a582:	4629      	mov	r1, r5
 800a584:	f7f6 fab2 	bl	8000aec <__aeabi_dcmplt>
 800a588:	b158      	cbz	r0, 800a5a2 <sqrt+0x4a>
 800a58a:	f7fd f89b 	bl	80076c4 <__errno>
 800a58e:	2321      	movs	r3, #33	; 0x21
 800a590:	6003      	str	r3, [r0, #0]
 800a592:	2200      	movs	r2, #0
 800a594:	2300      	movs	r3, #0
 800a596:	4610      	mov	r0, r2
 800a598:	4619      	mov	r1, r3
 800a59a:	f7f6 f95f 	bl	800085c <__aeabi_ddiv>
 800a59e:	ec41 0b18 	vmov	d8, r0, r1
 800a5a2:	eeb0 0a48 	vmov.f32	s0, s16
 800a5a6:	eef0 0a68 	vmov.f32	s1, s17
 800a5aa:	ecbd 8b02 	vpop	{d8}
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}

0800a5b0 <asinf>:
 800a5b0:	b508      	push	{r3, lr}
 800a5b2:	ed2d 8b02 	vpush	{d8}
 800a5b6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5ba:	f000 f8d9 	bl	800a770 <__ieee754_asinf>
 800a5be:	eeb4 8a48 	vcmp.f32	s16, s16
 800a5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c6:	eef0 8a40 	vmov.f32	s17, s0
 800a5ca:	d615      	bvs.n	800a5f8 <asinf+0x48>
 800a5cc:	eeb0 0a48 	vmov.f32	s0, s16
 800a5d0:	f000 fb2c 	bl	800ac2c <fabsf>
 800a5d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a5d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e0:	dd0a      	ble.n	800a5f8 <asinf+0x48>
 800a5e2:	f7fd f86f 	bl	80076c4 <__errno>
 800a5e6:	ecbd 8b02 	vpop	{d8}
 800a5ea:	2321      	movs	r3, #33	; 0x21
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a5f2:	4804      	ldr	r0, [pc, #16]	; (800a604 <asinf+0x54>)
 800a5f4:	f000 bb22 	b.w	800ac3c <nanf>
 800a5f8:	eeb0 0a68 	vmov.f32	s0, s17
 800a5fc:	ecbd 8b02 	vpop	{d8}
 800a600:	bd08      	pop	{r3, pc}
 800a602:	bf00      	nop
 800a604:	0800b020 	.word	0x0800b020

0800a608 <atan2f>:
 800a608:	f000 b998 	b.w	800a93c <__ieee754_atan2f>

0800a60c <__ieee754_sqrt>:
 800a60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a610:	ec55 4b10 	vmov	r4, r5, d0
 800a614:	4e55      	ldr	r6, [pc, #340]	; (800a76c <__ieee754_sqrt+0x160>)
 800a616:	43ae      	bics	r6, r5
 800a618:	ee10 0a10 	vmov	r0, s0
 800a61c:	ee10 3a10 	vmov	r3, s0
 800a620:	462a      	mov	r2, r5
 800a622:	4629      	mov	r1, r5
 800a624:	d110      	bne.n	800a648 <__ieee754_sqrt+0x3c>
 800a626:	ee10 2a10 	vmov	r2, s0
 800a62a:	462b      	mov	r3, r5
 800a62c:	f7f5 ffec 	bl	8000608 <__aeabi_dmul>
 800a630:	4602      	mov	r2, r0
 800a632:	460b      	mov	r3, r1
 800a634:	4620      	mov	r0, r4
 800a636:	4629      	mov	r1, r5
 800a638:	f7f5 fe30 	bl	800029c <__adddf3>
 800a63c:	4604      	mov	r4, r0
 800a63e:	460d      	mov	r5, r1
 800a640:	ec45 4b10 	vmov	d0, r4, r5
 800a644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a648:	2d00      	cmp	r5, #0
 800a64a:	dc10      	bgt.n	800a66e <__ieee754_sqrt+0x62>
 800a64c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a650:	4330      	orrs	r0, r6
 800a652:	d0f5      	beq.n	800a640 <__ieee754_sqrt+0x34>
 800a654:	b15d      	cbz	r5, 800a66e <__ieee754_sqrt+0x62>
 800a656:	ee10 2a10 	vmov	r2, s0
 800a65a:	462b      	mov	r3, r5
 800a65c:	ee10 0a10 	vmov	r0, s0
 800a660:	f7f5 fe1a 	bl	8000298 <__aeabi_dsub>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	f7f6 f8f8 	bl	800085c <__aeabi_ddiv>
 800a66c:	e7e6      	b.n	800a63c <__ieee754_sqrt+0x30>
 800a66e:	1512      	asrs	r2, r2, #20
 800a670:	d074      	beq.n	800a75c <__ieee754_sqrt+0x150>
 800a672:	07d4      	lsls	r4, r2, #31
 800a674:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a678:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a67c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a680:	bf5e      	ittt	pl
 800a682:	0fda      	lsrpl	r2, r3, #31
 800a684:	005b      	lslpl	r3, r3, #1
 800a686:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a68a:	2400      	movs	r4, #0
 800a68c:	0fda      	lsrs	r2, r3, #31
 800a68e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a692:	107f      	asrs	r7, r7, #1
 800a694:	005b      	lsls	r3, r3, #1
 800a696:	2516      	movs	r5, #22
 800a698:	4620      	mov	r0, r4
 800a69a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a69e:	1886      	adds	r6, r0, r2
 800a6a0:	428e      	cmp	r6, r1
 800a6a2:	bfde      	ittt	le
 800a6a4:	1b89      	suble	r1, r1, r6
 800a6a6:	18b0      	addle	r0, r6, r2
 800a6a8:	18a4      	addle	r4, r4, r2
 800a6aa:	0049      	lsls	r1, r1, #1
 800a6ac:	3d01      	subs	r5, #1
 800a6ae:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a6b2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a6b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6ba:	d1f0      	bne.n	800a69e <__ieee754_sqrt+0x92>
 800a6bc:	462a      	mov	r2, r5
 800a6be:	f04f 0e20 	mov.w	lr, #32
 800a6c2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a6c6:	4281      	cmp	r1, r0
 800a6c8:	eb06 0c05 	add.w	ip, r6, r5
 800a6cc:	dc02      	bgt.n	800a6d4 <__ieee754_sqrt+0xc8>
 800a6ce:	d113      	bne.n	800a6f8 <__ieee754_sqrt+0xec>
 800a6d0:	459c      	cmp	ip, r3
 800a6d2:	d811      	bhi.n	800a6f8 <__ieee754_sqrt+0xec>
 800a6d4:	f1bc 0f00 	cmp.w	ip, #0
 800a6d8:	eb0c 0506 	add.w	r5, ip, r6
 800a6dc:	da43      	bge.n	800a766 <__ieee754_sqrt+0x15a>
 800a6de:	2d00      	cmp	r5, #0
 800a6e0:	db41      	blt.n	800a766 <__ieee754_sqrt+0x15a>
 800a6e2:	f100 0801 	add.w	r8, r0, #1
 800a6e6:	1a09      	subs	r1, r1, r0
 800a6e8:	459c      	cmp	ip, r3
 800a6ea:	bf88      	it	hi
 800a6ec:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a6f0:	eba3 030c 	sub.w	r3, r3, ip
 800a6f4:	4432      	add	r2, r6
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a6fc:	f1be 0e01 	subs.w	lr, lr, #1
 800a700:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a704:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a708:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a70c:	d1db      	bne.n	800a6c6 <__ieee754_sqrt+0xba>
 800a70e:	430b      	orrs	r3, r1
 800a710:	d006      	beq.n	800a720 <__ieee754_sqrt+0x114>
 800a712:	1c50      	adds	r0, r2, #1
 800a714:	bf13      	iteet	ne
 800a716:	3201      	addne	r2, #1
 800a718:	3401      	addeq	r4, #1
 800a71a:	4672      	moveq	r2, lr
 800a71c:	f022 0201 	bicne.w	r2, r2, #1
 800a720:	1063      	asrs	r3, r4, #1
 800a722:	0852      	lsrs	r2, r2, #1
 800a724:	07e1      	lsls	r1, r4, #31
 800a726:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a72a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a72e:	bf48      	it	mi
 800a730:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a734:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a738:	4614      	mov	r4, r2
 800a73a:	e781      	b.n	800a640 <__ieee754_sqrt+0x34>
 800a73c:	0ad9      	lsrs	r1, r3, #11
 800a73e:	3815      	subs	r0, #21
 800a740:	055b      	lsls	r3, r3, #21
 800a742:	2900      	cmp	r1, #0
 800a744:	d0fa      	beq.n	800a73c <__ieee754_sqrt+0x130>
 800a746:	02cd      	lsls	r5, r1, #11
 800a748:	d50a      	bpl.n	800a760 <__ieee754_sqrt+0x154>
 800a74a:	f1c2 0420 	rsb	r4, r2, #32
 800a74e:	fa23 f404 	lsr.w	r4, r3, r4
 800a752:	1e55      	subs	r5, r2, #1
 800a754:	4093      	lsls	r3, r2
 800a756:	4321      	orrs	r1, r4
 800a758:	1b42      	subs	r2, r0, r5
 800a75a:	e78a      	b.n	800a672 <__ieee754_sqrt+0x66>
 800a75c:	4610      	mov	r0, r2
 800a75e:	e7f0      	b.n	800a742 <__ieee754_sqrt+0x136>
 800a760:	0049      	lsls	r1, r1, #1
 800a762:	3201      	adds	r2, #1
 800a764:	e7ef      	b.n	800a746 <__ieee754_sqrt+0x13a>
 800a766:	4680      	mov	r8, r0
 800a768:	e7bd      	b.n	800a6e6 <__ieee754_sqrt+0xda>
 800a76a:	bf00      	nop
 800a76c:	7ff00000 	.word	0x7ff00000

0800a770 <__ieee754_asinf>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	ee10 5a10 	vmov	r5, s0
 800a776:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a77a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a77e:	ed2d 8b04 	vpush	{d8-d9}
 800a782:	d10c      	bne.n	800a79e <__ieee754_asinf+0x2e>
 800a784:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a8fc <__ieee754_asinf+0x18c>
 800a788:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a900 <__ieee754_asinf+0x190>
 800a78c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a790:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a794:	eeb0 0a67 	vmov.f32	s0, s15
 800a798:	ecbd 8b04 	vpop	{d8-d9}
 800a79c:	bd38      	pop	{r3, r4, r5, pc}
 800a79e:	dd04      	ble.n	800a7aa <__ieee754_asinf+0x3a>
 800a7a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a7a4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a7a8:	e7f6      	b.n	800a798 <__ieee754_asinf+0x28>
 800a7aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a7ae:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a7b2:	da0b      	bge.n	800a7cc <__ieee754_asinf+0x5c>
 800a7b4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a7b8:	da52      	bge.n	800a860 <__ieee754_asinf+0xf0>
 800a7ba:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a904 <__ieee754_asinf+0x194>
 800a7be:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a7c2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	dce5      	bgt.n	800a798 <__ieee754_asinf+0x28>
 800a7cc:	f000 fa2e 	bl	800ac2c <fabsf>
 800a7d0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a7d4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a7d8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a7dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a908 <__ieee754_asinf+0x198>
 800a7e0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a90c <__ieee754_asinf+0x19c>
 800a7e4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a910 <__ieee754_asinf+0x1a0>
 800a7e8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a7ec:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a914 <__ieee754_asinf+0x1a4>
 800a7f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a7f4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a918 <__ieee754_asinf+0x1a8>
 800a7f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a7fc:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a91c <__ieee754_asinf+0x1ac>
 800a800:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a804:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a920 <__ieee754_asinf+0x1b0>
 800a808:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a80c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a924 <__ieee754_asinf+0x1b4>
 800a810:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a814:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a928 <__ieee754_asinf+0x1b8>
 800a818:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a81c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a92c <__ieee754_asinf+0x1bc>
 800a820:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a824:	eeb0 0a48 	vmov.f32	s0, s16
 800a828:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a82c:	f000 f926 	bl	800aa7c <__ieee754_sqrtf>
 800a830:	4b3f      	ldr	r3, [pc, #252]	; (800a930 <__ieee754_asinf+0x1c0>)
 800a832:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a836:	429c      	cmp	r4, r3
 800a838:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a83c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a840:	dd3d      	ble.n	800a8be <__ieee754_asinf+0x14e>
 800a842:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a846:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a934 <__ieee754_asinf+0x1c4>
 800a84a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a84e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a900 <__ieee754_asinf+0x190>
 800a852:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a856:	2d00      	cmp	r5, #0
 800a858:	bfd8      	it	le
 800a85a:	eeb1 0a40 	vnegle.f32	s0, s0
 800a85e:	e79b      	b.n	800a798 <__ieee754_asinf+0x28>
 800a860:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a864:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a908 <__ieee754_asinf+0x198>
 800a868:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a90c <__ieee754_asinf+0x19c>
 800a86c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a920 <__ieee754_asinf+0x1b0>
 800a870:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a874:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a914 <__ieee754_asinf+0x1a4>
 800a878:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a87c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a918 <__ieee754_asinf+0x1a8>
 800a880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a884:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a91c <__ieee754_asinf+0x1ac>
 800a888:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a88c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a910 <__ieee754_asinf+0x1a0>
 800a890:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a894:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a924 <__ieee754_asinf+0x1b4>
 800a898:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a89c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a928 <__ieee754_asinf+0x1b8>
 800a8a0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a8a4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a92c <__ieee754_asinf+0x1bc>
 800a8a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a8ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8b0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a8b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a8b8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a8bc:	e76c      	b.n	800a798 <__ieee754_asinf+0x28>
 800a8be:	ee10 3a10 	vmov	r3, s0
 800a8c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a8c6:	f023 030f 	bic.w	r3, r3, #15
 800a8ca:	ee07 3a10 	vmov	s14, r3
 800a8ce:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a8d2:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a8d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a8da:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a8de:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a8fc <__ieee754_asinf+0x18c>
 800a8e2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a8e6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a8ea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a938 <__ieee754_asinf+0x1c8>
 800a8ee:	eeb0 6a40 	vmov.f32	s12, s0
 800a8f2:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a8f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a8fa:	e7aa      	b.n	800a852 <__ieee754_asinf+0xe2>
 800a8fc:	b33bbd2e 	.word	0xb33bbd2e
 800a900:	3fc90fdb 	.word	0x3fc90fdb
 800a904:	7149f2ca 	.word	0x7149f2ca
 800a908:	3811ef08 	.word	0x3811ef08
 800a90c:	3a4f7f04 	.word	0x3a4f7f04
 800a910:	3e2aaaab 	.word	0x3e2aaaab
 800a914:	bd241146 	.word	0xbd241146
 800a918:	3e4e0aa8 	.word	0x3e4e0aa8
 800a91c:	bea6b090 	.word	0xbea6b090
 800a920:	3d9dc62e 	.word	0x3d9dc62e
 800a924:	bf303361 	.word	0xbf303361
 800a928:	4001572d 	.word	0x4001572d
 800a92c:	c019d139 	.word	0xc019d139
 800a930:	3f799999 	.word	0x3f799999
 800a934:	333bbd2e 	.word	0x333bbd2e
 800a938:	3f490fdb 	.word	0x3f490fdb

0800a93c <__ieee754_atan2f>:
 800a93c:	ee10 2a90 	vmov	r2, s1
 800a940:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a944:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a948:	b510      	push	{r4, lr}
 800a94a:	eef0 7a40 	vmov.f32	s15, s0
 800a94e:	dc06      	bgt.n	800a95e <__ieee754_atan2f+0x22>
 800a950:	ee10 0a10 	vmov	r0, s0
 800a954:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a958:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a95c:	dd04      	ble.n	800a968 <__ieee754_atan2f+0x2c>
 800a95e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a962:	eeb0 0a67 	vmov.f32	s0, s15
 800a966:	bd10      	pop	{r4, pc}
 800a968:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a96c:	d103      	bne.n	800a976 <__ieee754_atan2f+0x3a>
 800a96e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a972:	f000 b887 	b.w	800aa84 <atanf>
 800a976:	1794      	asrs	r4, r2, #30
 800a978:	f004 0402 	and.w	r4, r4, #2
 800a97c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a980:	b943      	cbnz	r3, 800a994 <__ieee754_atan2f+0x58>
 800a982:	2c02      	cmp	r4, #2
 800a984:	d05e      	beq.n	800aa44 <__ieee754_atan2f+0x108>
 800a986:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aa58 <__ieee754_atan2f+0x11c>
 800a98a:	2c03      	cmp	r4, #3
 800a98c:	bf08      	it	eq
 800a98e:	eef0 7a47 	vmoveq.f32	s15, s14
 800a992:	e7e6      	b.n	800a962 <__ieee754_atan2f+0x26>
 800a994:	b941      	cbnz	r1, 800a9a8 <__ieee754_atan2f+0x6c>
 800a996:	eddf 7a31 	vldr	s15, [pc, #196]	; 800aa5c <__ieee754_atan2f+0x120>
 800a99a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800aa60 <__ieee754_atan2f+0x124>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	eef0 7a40 	vmovlt.f32	s15, s0
 800a9a6:	e7dc      	b.n	800a962 <__ieee754_atan2f+0x26>
 800a9a8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a9ac:	d110      	bne.n	800a9d0 <__ieee754_atan2f+0x94>
 800a9ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9b2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9b6:	d107      	bne.n	800a9c8 <__ieee754_atan2f+0x8c>
 800a9b8:	2c02      	cmp	r4, #2
 800a9ba:	d846      	bhi.n	800aa4a <__ieee754_atan2f+0x10e>
 800a9bc:	4b29      	ldr	r3, [pc, #164]	; (800aa64 <__ieee754_atan2f+0x128>)
 800a9be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9c2:	edd4 7a00 	vldr	s15, [r4]
 800a9c6:	e7cc      	b.n	800a962 <__ieee754_atan2f+0x26>
 800a9c8:	2c02      	cmp	r4, #2
 800a9ca:	d841      	bhi.n	800aa50 <__ieee754_atan2f+0x114>
 800a9cc:	4b26      	ldr	r3, [pc, #152]	; (800aa68 <__ieee754_atan2f+0x12c>)
 800a9ce:	e7f6      	b.n	800a9be <__ieee754_atan2f+0x82>
 800a9d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9d4:	d0df      	beq.n	800a996 <__ieee754_atan2f+0x5a>
 800a9d6:	1a5b      	subs	r3, r3, r1
 800a9d8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a9dc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a9e0:	da1a      	bge.n	800aa18 <__ieee754_atan2f+0xdc>
 800a9e2:	2a00      	cmp	r2, #0
 800a9e4:	da01      	bge.n	800a9ea <__ieee754_atan2f+0xae>
 800a9e6:	313c      	adds	r1, #60	; 0x3c
 800a9e8:	db19      	blt.n	800aa1e <__ieee754_atan2f+0xe2>
 800a9ea:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a9ee:	f000 f91d 	bl	800ac2c <fabsf>
 800a9f2:	f000 f847 	bl	800aa84 <atanf>
 800a9f6:	eef0 7a40 	vmov.f32	s15, s0
 800a9fa:	2c01      	cmp	r4, #1
 800a9fc:	d012      	beq.n	800aa24 <__ieee754_atan2f+0xe8>
 800a9fe:	2c02      	cmp	r4, #2
 800aa00:	d017      	beq.n	800aa32 <__ieee754_atan2f+0xf6>
 800aa02:	2c00      	cmp	r4, #0
 800aa04:	d0ad      	beq.n	800a962 <__ieee754_atan2f+0x26>
 800aa06:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800aa6c <__ieee754_atan2f+0x130>
 800aa0a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800aa70 <__ieee754_atan2f+0x134>
 800aa12:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa16:	e7a4      	b.n	800a962 <__ieee754_atan2f+0x26>
 800aa18:	eddf 7a10 	vldr	s15, [pc, #64]	; 800aa5c <__ieee754_atan2f+0x120>
 800aa1c:	e7ed      	b.n	800a9fa <__ieee754_atan2f+0xbe>
 800aa1e:	eddf 7a15 	vldr	s15, [pc, #84]	; 800aa74 <__ieee754_atan2f+0x138>
 800aa22:	e7ea      	b.n	800a9fa <__ieee754_atan2f+0xbe>
 800aa24:	ee17 3a90 	vmov	r3, s15
 800aa28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	e797      	b.n	800a962 <__ieee754_atan2f+0x26>
 800aa32:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aa6c <__ieee754_atan2f+0x130>
 800aa36:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa3a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800aa70 <__ieee754_atan2f+0x134>
 800aa3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aa42:	e78e      	b.n	800a962 <__ieee754_atan2f+0x26>
 800aa44:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800aa70 <__ieee754_atan2f+0x134>
 800aa48:	e78b      	b.n	800a962 <__ieee754_atan2f+0x26>
 800aa4a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800aa78 <__ieee754_atan2f+0x13c>
 800aa4e:	e788      	b.n	800a962 <__ieee754_atan2f+0x26>
 800aa50:	eddf 7a08 	vldr	s15, [pc, #32]	; 800aa74 <__ieee754_atan2f+0x138>
 800aa54:	e785      	b.n	800a962 <__ieee754_atan2f+0x26>
 800aa56:	bf00      	nop
 800aa58:	c0490fdb 	.word	0xc0490fdb
 800aa5c:	3fc90fdb 	.word	0x3fc90fdb
 800aa60:	bfc90fdb 	.word	0xbfc90fdb
 800aa64:	0800b18c 	.word	0x0800b18c
 800aa68:	0800b198 	.word	0x0800b198
 800aa6c:	33bbbd2e 	.word	0x33bbbd2e
 800aa70:	40490fdb 	.word	0x40490fdb
 800aa74:	00000000 	.word	0x00000000
 800aa78:	3f490fdb 	.word	0x3f490fdb

0800aa7c <__ieee754_sqrtf>:
 800aa7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aa80:	4770      	bx	lr
	...

0800aa84 <atanf>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	ee10 5a10 	vmov	r5, s0
 800aa8a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800aa8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800aa92:	eef0 7a40 	vmov.f32	s15, s0
 800aa96:	db10      	blt.n	800aaba <atanf+0x36>
 800aa98:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aa9c:	dd04      	ble.n	800aaa8 <atanf+0x24>
 800aa9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 800aaa2:	eeb0 0a67 	vmov.f32	s0, s15
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800abe0 <atanf+0x15c>
 800aaac:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800abe4 <atanf+0x160>
 800aab0:	2d00      	cmp	r5, #0
 800aab2:	bfd8      	it	le
 800aab4:	eef0 7a40 	vmovle.f32	s15, s0
 800aab8:	e7f3      	b.n	800aaa2 <atanf+0x1e>
 800aaba:	4b4b      	ldr	r3, [pc, #300]	; (800abe8 <atanf+0x164>)
 800aabc:	429c      	cmp	r4, r3
 800aabe:	dc10      	bgt.n	800aae2 <atanf+0x5e>
 800aac0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800aac4:	da0a      	bge.n	800aadc <atanf+0x58>
 800aac6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800abec <atanf+0x168>
 800aaca:	ee30 7a07 	vadd.f32	s14, s0, s14
 800aace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800aad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aada:	dce2      	bgt.n	800aaa2 <atanf+0x1e>
 800aadc:	f04f 33ff 	mov.w	r3, #4294967295
 800aae0:	e013      	b.n	800ab0a <atanf+0x86>
 800aae2:	f000 f8a3 	bl	800ac2c <fabsf>
 800aae6:	4b42      	ldr	r3, [pc, #264]	; (800abf0 <atanf+0x16c>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	dc4f      	bgt.n	800ab8c <atanf+0x108>
 800aaec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	dc41      	bgt.n	800ab78 <atanf+0xf4>
 800aaf4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800aaf8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aafc:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab00:	2300      	movs	r3, #0
 800ab02:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab0a:	1c5a      	adds	r2, r3, #1
 800ab0c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ab10:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800abf4 <atanf+0x170>
 800ab14:	eddf 5a38 	vldr	s11, [pc, #224]	; 800abf8 <atanf+0x174>
 800ab18:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800abfc <atanf+0x178>
 800ab1c:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ab20:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ab24:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ac00 <atanf+0x17c>
 800ab28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab2c:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ac04 <atanf+0x180>
 800ab30:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab34:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ac08 <atanf+0x184>
 800ab38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac0c <atanf+0x188>
 800ab40:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab44:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ac10 <atanf+0x18c>
 800ab48:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ab4c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ac14 <atanf+0x190>
 800ab50:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ab54:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ac18 <atanf+0x194>
 800ab58:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ab5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ac1c <atanf+0x198>
 800ab60:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ab64:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab68:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ab6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab70:	d121      	bne.n	800abb6 <atanf+0x132>
 800ab72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab76:	e794      	b.n	800aaa2 <atanf+0x1e>
 800ab78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ab7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ab80:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab84:	2301      	movs	r3, #1
 800ab86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab8a:	e7be      	b.n	800ab0a <atanf+0x86>
 800ab8c:	4b24      	ldr	r3, [pc, #144]	; (800ac20 <atanf+0x19c>)
 800ab8e:	429c      	cmp	r4, r3
 800ab90:	dc0b      	bgt.n	800abaa <atanf+0x126>
 800ab92:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ab96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab9e:	2302      	movs	r3, #2
 800aba0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800aba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba8:	e7af      	b.n	800ab0a <atanf+0x86>
 800abaa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800abae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800abb2:	2303      	movs	r3, #3
 800abb4:	e7a9      	b.n	800ab0a <atanf+0x86>
 800abb6:	4a1b      	ldr	r2, [pc, #108]	; (800ac24 <atanf+0x1a0>)
 800abb8:	491b      	ldr	r1, [pc, #108]	; (800ac28 <atanf+0x1a4>)
 800abba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800abbe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800abc2:	ed93 0a00 	vldr	s0, [r3]
 800abc6:	ee37 7a40 	vsub.f32	s14, s14, s0
 800abca:	ed92 0a00 	vldr	s0, [r2]
 800abce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abd2:	2d00      	cmp	r5, #0
 800abd4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800abd8:	bfb8      	it	lt
 800abda:	eef1 7a67 	vneglt.f32	s15, s15
 800abde:	e760      	b.n	800aaa2 <atanf+0x1e>
 800abe0:	3fc90fdb 	.word	0x3fc90fdb
 800abe4:	bfc90fdb 	.word	0xbfc90fdb
 800abe8:	3edfffff 	.word	0x3edfffff
 800abec:	7149f2ca 	.word	0x7149f2ca
 800abf0:	3f97ffff 	.word	0x3f97ffff
 800abf4:	3c8569d7 	.word	0x3c8569d7
 800abf8:	3d4bda59 	.word	0x3d4bda59
 800abfc:	bd6ef16b 	.word	0xbd6ef16b
 800ac00:	3d886b35 	.word	0x3d886b35
 800ac04:	3dba2e6e 	.word	0x3dba2e6e
 800ac08:	3e124925 	.word	0x3e124925
 800ac0c:	3eaaaaab 	.word	0x3eaaaaab
 800ac10:	bd15a221 	.word	0xbd15a221
 800ac14:	bd9d8795 	.word	0xbd9d8795
 800ac18:	bde38e38 	.word	0xbde38e38
 800ac1c:	be4ccccd 	.word	0xbe4ccccd
 800ac20:	401bffff 	.word	0x401bffff
 800ac24:	0800b1a4 	.word	0x0800b1a4
 800ac28:	0800b1b4 	.word	0x0800b1b4

0800ac2c <fabsf>:
 800ac2c:	ee10 3a10 	vmov	r3, s0
 800ac30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac34:	ee00 3a10 	vmov	s0, r3
 800ac38:	4770      	bx	lr
	...

0800ac3c <nanf>:
 800ac3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac44 <nanf+0x8>
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	7fc00000 	.word	0x7fc00000

0800ac48 <_init>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr

0800ac54 <_fini>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	bf00      	nop
 800ac58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac5a:	bc08      	pop	{r3}
 800ac5c:	469e      	mov	lr, r3
 800ac5e:	4770      	bx	lr
