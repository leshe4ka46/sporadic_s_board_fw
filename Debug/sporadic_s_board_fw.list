
sporadic_s_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800acb8  0800acb8  0001acb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b22c  0800b22c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b22c  0800b22c  0001b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b234  0800b234  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b234  0800b234  0001b234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b238  0800b238  0001b238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b23c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001e8  0800b424  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800b424  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c9a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e90  00000000  00000000  00035eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00038d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a0a  00000000  00000000  0003b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c2c  00000000  00000000  00054c92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000940e9  00000000  00000000  0006c8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001009a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006440  00000000  00000000  001009f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aca0 	.word	0x0800aca0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800aca0 	.word	0x0800aca0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADXL_init>:
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_adxl_i2c;
readings *_adxl_data;
uint16_t scale=0;
void ADXL_init(I2C_HandleTypeDef *i2c,readings *data){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	_adxl_i2c=i2c;
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <ADXL_init+0x54>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
	_adxl_data=data;
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <ADXL_init+0x58>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6013      	str	r3, [r2, #0]
	log_s_wnl("ADXL345 started---");
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADXL_init+0x5c>)
 8000f74:	f000 fa62 	bl	800143c <log_s_wnl>
	if(ADXL_ReadReg(ADXL345_DEVID)==229){
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f841 	bl	8001000 <ADXL_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2be5      	cmp	r3, #229	; 0xe5
 8000f82:	d103      	bne.n	8000f8c <ADXL_init+0x30>
		log_s("ok");
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <ADXL_init+0x60>)
 8000f86:	f000 fa37 	bl	80013f8 <log_s>
 8000f8a:	e002      	b.n	8000f92 <ADXL_init+0x36>
	}
	else{
		log_s("ERROR");
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <ADXL_init+0x64>)
 8000f8e:	f000 fa33 	bl	80013f8 <log_s>
	}
	_adxl_data->adxl345.scale=2*(1<<(7-ADXL_get_range()));
 8000f92:	f000 f873 	bl	800107c <ADXL_get_range>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f1c3 0307 	rsb	r3, r3, #7
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <ADXL_init+0x58>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	81da      	strh	r2, [r3, #14]
	//log_s_int("dev id=",ADXL_ReadReg(ADXL345_DEVID));
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000204 	.word	0x20000204
 8000fb4:	20000208 	.word	0x20000208
 8000fb8:	0800acb8 	.word	0x0800acb8
 8000fbc:	0800accc 	.word	0x0800accc
 8000fc0:	0800acd0 	.word	0x0800acd0

08000fc4 <ADXL_WriteReg>:




void ADXL_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, arr, 2, 1000);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <ADXL_WriteReg+0x38>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	21a6      	movs	r1, #166	; 0xa6
 8000fee:	f003 fa9d 	bl	800452c <HAL_I2C_Master_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000204 	.word	0x20000204

08001000 <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, &reg, 1, 1000);
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <ADXL_ReadReg+0x40>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	21a6      	movs	r1, #166	; 0xa6
 800101a:	f003 fa87 	bl	800452c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_adxl_i2c, ADXL_ADDR<<1, &result, 1, 1000);
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <ADXL_ReadReg+0x40>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 020f 	add.w	r2, r7, #15
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	21a6      	movs	r1, #166	; 0xa6
 8001030:	f003 fb7a 	bl	8004728 <HAL_I2C_Master_Receive>
	return result;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
	/*uint8_t result;
	HAL_I2C_Mem_Read (_adxl_i2c, ADXL_ADDR<<1, reg, 1, (uint8_t *)result, 1, 100);
	return result;*/
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000204 	.word	0x20000204

08001044 <ADXL_set_range>:
void ADXL_set_range(ADXLRANGE rng){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0x3)| rng);
 800104e:	2031      	movs	r0, #49	; 0x31
 8001050:	f7ff ffd6 	bl	8001000 <ADXL_ReadReg>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4619      	mov	r1, r3
 8001058:	2031      	movs	r0, #49	; 0x31
 800105a:	f7ff ffb3 	bl	8000fc4 <ADXL_WriteReg>
	_adxl_data->adxl345.scale=2*(1<<(7-rng));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f1c3 0307 	rsb	r3, r3, #7
 8001064:	2202      	movs	r2, #2
 8001066:	409a      	lsls	r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <ADXL_set_range+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	81da      	strh	r2, [r3, #14]
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000208 	.word	0x20000208

0800107c <ADXL_get_range>:

uint8_t ADXL_get_range(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)%4;
 8001080:	2031      	movs	r0, #49	; 0x31
 8001082:	f7ff ffbd 	bl	8001000 <ADXL_ReadReg>
 8001086:	4603      	mov	r3, r0
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}

08001092 <ADXL_set_rate>:

void ADXL_set_rate(ADXLBITRATE rate){
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_BW_RATE,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0b111)| rate);
 800109c:	2031      	movs	r0, #49	; 0x31
 800109e:	f7ff ffaf 	bl	8001000 <ADXL_ReadReg>
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	202c      	movs	r0, #44	; 0x2c
 80010a8:	f7ff ff8c 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ADXL_power>:
		case HZ3200:
			return 3200;
	}
}

void ADXL_power(uint8_t pw){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	if(pw==1){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10b      	bne.n	80010dc <ADXL_power+0x28>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL)| ADXL345_BIT_PWR_REG_MEASURE);
 80010c4:	202d      	movs	r0, #45	; 0x2d
 80010c6:	f7ff ff9b 	bl	8001000 <ADXL_ReadReg>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	202d      	movs	r0, #45	; 0x2d
 80010d6:	f7ff ff75 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
	}
}
 80010da:	e006      	b.n	80010ea <ADXL_power+0x36>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
 80010dc:	202d      	movs	r0, #45	; 0x2d
 80010de:	f7ff ff8f 	bl	8001000 <ADXL_ReadReg>
 80010e2:	2100      	movs	r1, #0
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff ff6d 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <ADXL_full_res>:
void ADXL_full_res(uint8_t res){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
	if(res==1){
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <ADXL_full_res+0x22>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)| ADXL345_BIT_FULL_RES_SET);
 8001102:	2031      	movs	r0, #49	; 0x31
 8001104:	f7ff ff7c 	bl	8001000 <ADXL_ReadReg>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	2031      	movs	r0, #49	; 0x31
 800110e:	f7ff ff59 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
	}
}
 8001112:	e00a      	b.n	800112a <ADXL_full_res+0x38>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
 8001114:	2031      	movs	r0, #49	; 0x31
 8001116:	f7ff ff73 	bl	8001000 <ADXL_ReadReg>
 800111a:	4603      	mov	r3, r0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	2031      	movs	r0, #49	; 0x31
 8001126:	f7ff ff4d 	bl	8000fc4 <ADXL_WriteReg>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <BMP180_init>:
const uint8_t BMP180_EEPROM_ADDR_LSB[11] = { 0xab, 0xad, 0xaf, 0xb1, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

BMP180_SETTINGS _calib_data;
BMP180_REGS _regs;

void BMP180_init(I2C_HandleTypeDef *i2c,readings *data){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	_bmp_i2c=i2c;
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <BMP180_init+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6013      	str	r3, [r2, #0]
	_bmp_data=data;
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <BMP180_init+0x44>)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6013      	str	r3, [r2, #0]
	log_s_wnl("BMP180 started---");
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <BMP180_init+0x48>)
 800114c:	f000 f976 	bl	800143c <log_s_wnl>
	if (BMP180_ReadReg(BMP180_GET_ID_REG)==BMP180_CHIP_ID){
 8001150:	20d0      	movs	r0, #208	; 0xd0
 8001152:	f000 f819 	bl	8001188 <BMP180_ReadReg>
 8001156:	4603      	mov	r3, r0
 8001158:	2b55      	cmp	r3, #85	; 0x55
 800115a:	d103      	bne.n	8001164 <BMP180_init+0x30>
		log_s("ok");
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <BMP180_init+0x4c>)
 800115e:	f000 f94b 	bl	80013f8 <log_s>
	}
	else{
		log_s("ERROR");
	}
}
 8001162:	e002      	b.n	800116a <BMP180_init+0x36>
		log_s("ERROR");
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <BMP180_init+0x50>)
 8001166:	f000 f947 	bl	80013f8 <log_s>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000020c 	.word	0x2000020c
 8001178:	20000210 	.word	0x20000210
 800117c:	0800acd8 	.word	0x0800acd8
 8001180:	0800acec 	.word	0x0800acec
 8001184:	0800acf0 	.word	0x0800acf0

08001188 <BMP180_ReadReg>:
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
	uint8_t arr[2] = { reg, cmd };
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, arr, 2, 1000);
}

uint8_t BMP180_ReadReg(uint8_t reg) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, &reg, 1, 1000);
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <BMP180_ReadReg+0x40>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	21ee      	movs	r1, #238	; 0xee
 80011a2:	f003 f9c3 	bl	800452c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp_i2c, BMP180_ADDR << 1, &result, 1, 1000);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <BMP180_ReadReg+0x40>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f107 020f 	add.w	r2, r7, #15
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	21ee      	movs	r1, #238	; 0xee
 80011b8:	f003 fab6 	bl	8004728 <HAL_I2C_Master_Receive>
	return result;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000020c 	.word	0x2000020c

080011cc <BMP180_set_oss>:

int16_t _raw_t;
uint32_t _raw_p;

uint8_t _oss=0;
void BMP180_set_oss(uint8_t oss){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	_oss=oss;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <BMP180_set_oss+0x1c>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	7013      	strb	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	2000022a 	.word	0x2000022a

080011ec <BMP180_get_calibration_coefficients>:
		HAL_Delay (26);
	}
}

void BMP180_get_calibration_coefficients()
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 80011f2:	af0a      	add	r7, sp, #40	; 0x28
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8) | BMP180_ReadReg(BMP180_AC1_LSB);
 80011f4:	20aa      	movs	r0, #170	; 0xaa
 80011f6:	f7ff ffc7 	bl	8001188 <BMP180_ReadReg>
 80011fa:	4603      	mov	r3, r0
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21c      	sxth	r4, r3
 8001200:	20ab      	movs	r0, #171	; 0xab
 8001202:	f7ff ffc1 	bl	8001188 <BMP180_ReadReg>
 8001206:	4603      	mov	r3, r0
 8001208:	b21b      	sxth	r3, r3
 800120a:	4323      	orrs	r3, r4
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001210:	801a      	strh	r2, [r3, #0]
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8) | BMP180_ReadReg(BMP180_AC2_LSB);
 8001212:	20ac      	movs	r0, #172	; 0xac
 8001214:	f7ff ffb8 	bl	8001188 <BMP180_ReadReg>
 8001218:	4603      	mov	r3, r0
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21c      	sxth	r4, r3
 800121e:	20ad      	movs	r0, #173	; 0xad
 8001220:	f7ff ffb2 	bl	8001188 <BMP180_ReadReg>
 8001224:	4603      	mov	r3, r0
 8001226:	b21b      	sxth	r3, r3
 8001228:	4323      	orrs	r3, r4
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800122e:	805a      	strh	r2, [r3, #2]
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8) | BMP180_ReadReg(BMP180_AC3_LSB);
 8001230:	20ae      	movs	r0, #174	; 0xae
 8001232:	f7ff ffa9 	bl	8001188 <BMP180_ReadReg>
 8001236:	4603      	mov	r3, r0
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21c      	sxth	r4, r3
 800123c:	20af      	movs	r0, #175	; 0xaf
 800123e:	f7ff ffa3 	bl	8001188 <BMP180_ReadReg>
 8001242:	4603      	mov	r3, r0
 8001244:	b21b      	sxth	r3, r3
 8001246:	4323      	orrs	r3, r4
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800124c:	809a      	strh	r2, [r3, #4]
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8) | BMP180_ReadReg(BMP180_AC4_LSB);
 800124e:	20b0      	movs	r0, #176	; 0xb0
 8001250:	f7ff ff9a 	bl	8001188 <BMP180_ReadReg>
 8001254:	4603      	mov	r3, r0
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21c      	sxth	r4, r3
 800125a:	20b1      	movs	r0, #177	; 0xb1
 800125c:	f7ff ff94 	bl	8001188 <BMP180_ReadReg>
 8001260:	4603      	mov	r3, r0
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800126c:	80da      	strh	r2, [r3, #6]
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8) | BMP180_ReadReg(BMP180_AC5_LSB);
 800126e:	20b2      	movs	r0, #178	; 0xb2
 8001270:	f7ff ff8a 	bl	8001188 <BMP180_ReadReg>
 8001274:	4603      	mov	r3, r0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21c      	sxth	r4, r3
 800127a:	20b3      	movs	r0, #179	; 0xb3
 800127c:	f7ff ff84 	bl	8001188 <BMP180_ReadReg>
 8001280:	4603      	mov	r3, r0
 8001282:	b21b      	sxth	r3, r3
 8001284:	4323      	orrs	r3, r4
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800128c:	811a      	strh	r2, [r3, #8]
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8) | BMP180_ReadReg(BMP180_AC6_LSB);
 800128e:	20b4      	movs	r0, #180	; 0xb4
 8001290:	f7ff ff7a 	bl	8001188 <BMP180_ReadReg>
 8001294:	4603      	mov	r3, r0
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21c      	sxth	r4, r3
 800129a:	20b5      	movs	r0, #181	; 0xb5
 800129c:	f7ff ff74 	bl	8001188 <BMP180_ReadReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4323      	orrs	r3, r4
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 80012ac:	815a      	strh	r2, [r3, #10]
	_calib_data.B1 =  (BMP180_ReadReg(BMP180_B1_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 80012ae:	20b6      	movs	r0, #182	; 0xb6
 80012b0:	f7ff ff6a 	bl	8001188 <BMP180_ReadReg>
 80012b4:	4603      	mov	r3, r0
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21c      	sxth	r4, r3
 80012ba:	20b7      	movs	r0, #183	; 0xb7
 80012bc:	f7ff ff64 	bl	8001188 <BMP180_ReadReg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4323      	orrs	r3, r4
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 80012ca:	819a      	strh	r2, [r3, #12]
	_calib_data.B2 =  (BMP180_ReadReg(BMP180_B2_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 80012cc:	20b8      	movs	r0, #184	; 0xb8
 80012ce:	f7ff ff5b 	bl	8001188 <BMP180_ReadReg>
 80012d2:	4603      	mov	r3, r0
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21c      	sxth	r4, r3
 80012d8:	20b7      	movs	r0, #183	; 0xb7
 80012da:	f7ff ff55 	bl	8001188 <BMP180_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4323      	orrs	r3, r4
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 80012e8:	81da      	strh	r2, [r3, #14]
	_calib_data.MB =  (BMP180_ReadReg(BMP180_MB_MSB) << 8)  | BMP180_ReadReg(BMP180_MB_LSB);
 80012ea:	20ba      	movs	r0, #186	; 0xba
 80012ec:	f7ff ff4c 	bl	8001188 <BMP180_ReadReg>
 80012f0:	4603      	mov	r3, r0
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21c      	sxth	r4, r3
 80012f6:	20bb      	movs	r0, #187	; 0xbb
 80012f8:	f7ff ff46 	bl	8001188 <BMP180_ReadReg>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4323      	orrs	r3, r4
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001306:	821a      	strh	r2, [r3, #16]
	_calib_data.MC =  (BMP180_ReadReg(BMP180_MC_MSB) << 8)  | BMP180_ReadReg(BMP180_MC_LSB);
 8001308:	20bc      	movs	r0, #188	; 0xbc
 800130a:	f7ff ff3d 	bl	8001188 <BMP180_ReadReg>
 800130e:	4603      	mov	r3, r0
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21c      	sxth	r4, r3
 8001314:	20bd      	movs	r0, #189	; 0xbd
 8001316:	f7ff ff37 	bl	8001188 <BMP180_ReadReg>
 800131a:	4603      	mov	r3, r0
 800131c:	b21b      	sxth	r3, r3
 800131e:	4323      	orrs	r3, r4
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001324:	825a      	strh	r2, [r3, #18]
	_calib_data.MD =  (BMP180_ReadReg(BMP180_MD_MSB) << 8)  | BMP180_ReadReg(BMP180_MD_LSB);
 8001326:	20be      	movs	r0, #190	; 0xbe
 8001328:	f7ff ff2e 	bl	8001188 <BMP180_ReadReg>
 800132c:	4603      	mov	r3, r0
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21c      	sxth	r4, r3
 8001332:	20bf      	movs	r0, #191	; 0xbf
 8001334:	f7ff ff28 	bl	8001188 <BMP180_ReadReg>
 8001338:	4603      	mov	r3, r0
 800133a:	b21b      	sxth	r3, r3
 800133c:	4323      	orrs	r3, r4
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001342:	829a      	strh	r2, [r3, #20]
	char* test[200];
	sprintf((char*)test,"Calib coef:%d %d %d %d %d %d %d %d %d %d %d",_calib_data.AC1,_calib_data.AC2,_calib_data.AC3,_calib_data.AC4,_calib_data.AC5,_calib_data.AC6,_calib_data.B1,_calib_data.B1,_calib_data.MB,_calib_data.MC,_calib_data.MD);
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	469c      	mov	ip, r3
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800134e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001352:	469e      	mov	lr, r3
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001356:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800135a:	461a      	mov	r2, r3
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800135e:	88db      	ldrh	r3, [r3, #6]
 8001360:	4619      	mov	r1, r3
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001364:	891b      	ldrh	r3, [r3, #8]
 8001366:	461c      	mov	r4, r3
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800136a:	895b      	ldrh	r3, [r3, #10]
 800136c:	461d      	mov	r5, r3
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001370:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001374:	461e      	mov	r6, r3
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001378:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001380:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001388:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001390:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001394:	f107 0010 	add.w	r0, r7, #16
 8001398:	9308      	str	r3, [sp, #32]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	9307      	str	r3, [sp, #28]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	9306      	str	r3, [sp, #24]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	9305      	str	r3, [sp, #20]
 80013a6:	9604      	str	r6, [sp, #16]
 80013a8:	9503      	str	r5, [sp, #12]
 80013aa:	9402      	str	r4, [sp, #8]
 80013ac:	9101      	str	r1, [sp, #4]
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	4673      	mov	r3, lr
 80013b2:	4662      	mov	r2, ip
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <BMP180_get_calibration_coefficients+0x1e8>)
 80013b6:	f006 ff43 	bl	8008240 <siprintf>
	log_s(test);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f81a 	bl	80013f8 <log_s>
}
 80013c4:	bf00      	nop
 80013c6:	f507 774d 	add.w	r7, r7, #820	; 0x334
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000214 	.word	0x20000214
 80013d4:	0800acf8 	.word	0x0800acf8

080013d8 <debug_init>:
#include "debug.h"
#include <stdio.h>
UART_HandleTypeDef *_dbg_uart;

void debug_init(UART_HandleTypeDef *uart){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	_dbg_uart=uart;
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <debug_init+0x1c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2000022c 	.word	0x2000022c

080013f8 <log_s>:



void log_s(const char *str){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <log_s+0x3c>)
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4620      	mov	r0, r4
 8001416:	f005 ff02 	bl	800721e <HAL_UART_Transmit>
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)"\r\n",2,1000);
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <log_s+0x3c>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	2202      	movs	r2, #2
 8001424:	4904      	ldr	r1, [pc, #16]	; (8001438 <log_s+0x40>)
 8001426:	f005 fefa 	bl	800721e <HAL_UART_Transmit>
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	2000022c 	.word	0x2000022c
 8001438:	0800ad24 	.word	0x0800ad24

0800143c <log_s_wnl>:

void log_s_wnl(const char *str){
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <log_s_wnl+0x2c>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7fe fec9 	bl	80001e0 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4620      	mov	r0, r4
 800145a:	f005 fee0 	bl	800721e <HAL_UART_Transmit>
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	2000022c 	.word	0x2000022c

0800146c <log_s_int>:
char* char_log[50];
void log_s_int(const char *str,int32_t i){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	sprintf((char*)char_log,"%s %ld\r\n",str,i);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4905      	ldr	r1, [pc, #20]	; (8001490 <log_s_int+0x24>)
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <log_s_int+0x28>)
 800147e:	f006 fedf 	bl	8008240 <siprintf>
	log_s_wnl((const char*)char_log);
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <log_s_int+0x28>)
 8001484:	f7ff ffda 	bl	800143c <log_s_wnl>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0800ad28 	.word	0x0800ad28
 8001494:	20000230 	.word	0x20000230

08001498 <log_s_p_3>:
void log_p(int16_t *data_p){
	sprintf((char*)char_log,"%p\r\n",data_p);
	log_s_wnl((const char*)char_log);
}
void log_s_p_3(const char *str,int16_t *data_p0,int16_t *data_p1,int16_t *data_p2){
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af02      	add	r7, sp, #8
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
	sprintf((char*)char_log,"%s %p %p %p",str,data_p0,data_p1,data_p2);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	4905      	ldr	r1, [pc, #20]	; (80014c8 <log_s_p_3+0x30>)
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <log_s_p_3+0x34>)
 80014b6:	f006 fec3 	bl	8008240 <siprintf>
	log_s((const char*)char_log);
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <log_s_p_3+0x34>)
 80014bc:	f7ff ff9c 	bl	80013f8 <log_s>
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800ad3c 	.word	0x0800ad3c
 80014cc:	20000230 	.word	0x20000230

080014d0 <log_s_p>:
void log_s_p(const char *str,int16_t *data_p0){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
	sprintf((char*)char_log,"%s %p",str,data_p0);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	4905      	ldr	r1, [pc, #20]	; (80014f4 <log_s_p+0x24>)
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <log_s_p+0x28>)
 80014e2:	f006 fead 	bl	8008240 <siprintf>
	log_s((const char*)char_log);
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <log_s_p+0x28>)
 80014e8:	f7ff ff86 	bl	80013f8 <log_s>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	0800ad48 	.word	0x0800ad48
 80014f8:	20000230 	.word	0x20000230

080014fc <GY801_init>:
#include "gy801.h"
#include <stdio.h>
#include <math.h>
readings *_data_gy;
void GY801_init(I2C_HandleTypeDef *i2c,readings *data){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	//_i2c=i2c;
	_data_gy=data;
 8001506:	4a15      	ldr	r2, [pc, #84]	; (800155c <GY801_init+0x60>)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6013      	str	r3, [r2, #0]
	ADXL_init(i2c,data);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fd24 	bl	8000f5c <ADXL_init>
	ADXL_set_range(RANGE_2G);
 8001514:	2000      	movs	r0, #0
 8001516:	f7ff fd95 	bl	8001044 <ADXL_set_range>
	ADXL_full_res(1);
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff fde9 	bl	80010f2 <ADXL_full_res>
	ADXL_set_rate(HZ100);
 8001520:	200a      	movs	r0, #10
 8001522:	f7ff fdb6 	bl	8001092 <ADXL_set_rate>
	ADXL_power(1);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff fdc4 	bl	80010b4 <ADXL_power>
	BMP180_init(i2c,data);
 800152c:	6839      	ldr	r1, [r7, #0]
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fe00 	bl	8001134 <BMP180_init>
	BMP180_set_oss(1);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fe49 	bl	80011cc <BMP180_set_oss>
	BMP180_get_calibration_coefficients();
 800153a:	f7ff fe57 	bl	80011ec <BMP180_get_calibration_coefficients>
	GYRO_init(i2c,data);
 800153e:	6839      	ldr	r1, [r7, #0]
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f8d9 	bl	80016f8 <GYRO_init>
	GYRO_power(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f000 f94c 	bl	80017e4 <GYRO_power>
	mag_init(i2c,data);
 800154c:	6839      	ldr	r1, [r7, #0]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f992 	bl	8001878 <mag_init>


}
 8001554:	bf00      	nop
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200002f8 	.word	0x200002f8

08001560 <med>:
int16_t axfilt[3],ayfilt[3],azfilt[3];
int16_t temp[3];
int16_t med(uint8_t mode,int16_t new_val){
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	80bb      	strh	r3, [r7, #4]
	switch(mode){
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b02      	cmp	r3, #2
 8001574:	d016      	beq.n	80015a4 <med+0x44>
 8001576:	2b02      	cmp	r3, #2
 8001578:	dc1c      	bgt.n	80015b4 <med+0x54>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <med+0x24>
 800157e:	2b01      	cmp	r3, #1
 8001580:	d008      	beq.n	8001594 <med+0x34>
 8001582:	e017      	b.n	80015b4 <med+0x54>
		case 0:
			memcpy(&temp, axfilt, sizeof(axfilt));
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <med+0x128>)
 8001586:	4a41      	ldr	r2, [pc, #260]	; (800168c <med+0x12c>)
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	8019      	strh	r1, [r3, #0]
			break;
 8001592:	e00f      	b.n	80015b4 <med+0x54>
		case 1:
			memcpy(&temp, ayfilt, sizeof(ayfilt));
 8001594:	4b3c      	ldr	r3, [pc, #240]	; (8001688 <med+0x128>)
 8001596:	4a3e      	ldr	r2, [pc, #248]	; (8001690 <med+0x130>)
 8001598:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159c:	6018      	str	r0, [r3, #0]
 800159e:	3304      	adds	r3, #4
 80015a0:	8019      	strh	r1, [r3, #0]
			break;
 80015a2:	e007      	b.n	80015b4 <med+0x54>
		case 2:
			memcpy(&temp, azfilt, sizeof(azfilt));
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <med+0x128>)
 80015a6:	4a3b      	ldr	r2, [pc, #236]	; (8001694 <med+0x134>)
 80015a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ac:	6018      	str	r0, [r3, #0]
 80015ae:	3304      	adds	r3, #4
 80015b0:	8019      	strh	r1, [r3, #0]
			break;
 80015b2:	bf00      	nop
	}
	temp[0]=temp[1];
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <med+0x128>)
 80015b6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <med+0x128>)
 80015bc:	801a      	strh	r2, [r3, #0]
	temp[1]=temp[2];
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <med+0x128>)
 80015c0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <med+0x128>)
 80015c6:	805a      	strh	r2, [r3, #2]
	temp[2]=new_val;
 80015c8:	4a2f      	ldr	r2, [pc, #188]	; (8001688 <med+0x128>)
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	8093      	strh	r3, [r2, #4]
	switch(mode){
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d016      	beq.n	8001602 <med+0xa2>
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	dc1c      	bgt.n	8001612 <med+0xb2>
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d002      	beq.n	80015e2 <med+0x82>
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d008      	beq.n	80015f2 <med+0x92>
 80015e0:	e017      	b.n	8001612 <med+0xb2>
		case 0:
			memcpy(&axfilt, temp, sizeof(temp));
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <med+0x12c>)
 80015e4:	4a28      	ldr	r2, [pc, #160]	; (8001688 <med+0x128>)
 80015e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ea:	6018      	str	r0, [r3, #0]
 80015ec:	3304      	adds	r3, #4
 80015ee:	8019      	strh	r1, [r3, #0]
			break;
 80015f0:	e00f      	b.n	8001612 <med+0xb2>
		case 1:
			memcpy(&ayfilt, temp, sizeof(temp));
 80015f2:	4b27      	ldr	r3, [pc, #156]	; (8001690 <med+0x130>)
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <med+0x128>)
 80015f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015fa:	6018      	str	r0, [r3, #0]
 80015fc:	3304      	adds	r3, #4
 80015fe:	8019      	strh	r1, [r3, #0]
			break;
 8001600:	e007      	b.n	8001612 <med+0xb2>
		case 2:
			memcpy(&azfilt, temp, sizeof(temp));
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <med+0x134>)
 8001604:	4a20      	ldr	r2, [pc, #128]	; (8001688 <med+0x128>)
 8001606:	e892 0003 	ldmia.w	r2, {r0, r1}
 800160a:	6018      	str	r0, [r3, #0]
 800160c:	3304      	adds	r3, #4
 800160e:	8019      	strh	r1, [r3, #0]
			break;
 8001610:	bf00      	nop
	}
	return (temp[0] < temp[1]) ? ((temp[1] < temp[2]) ? temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) : ((temp[0] < temp[2]) ? temp[0] : ((temp[2] < temp[1]) ? temp[1] : temp[2]));
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <med+0x128>)
 8001614:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <med+0x128>)
 800161a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800161e:	429a      	cmp	r2, r3
 8001620:	da16      	bge.n	8001650 <med+0xf0>
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <med+0x128>)
 8001624:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <med+0x128>)
 800162a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800162e:	429a      	cmp	r2, r3
 8001630:	da03      	bge.n	800163a <med+0xda>
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <med+0x128>)
 8001634:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001638:	e020      	b.n	800167c <med+0x11c>
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <med+0x128>)
 800163c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <med+0x128>)
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	4293      	cmp	r3, r2
 8001648:	bfb8      	it	lt
 800164a:	4613      	movlt	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	e015      	b.n	800167c <med+0x11c>
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <med+0x128>)
 8001652:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <med+0x128>)
 8001658:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	da03      	bge.n	8001668 <med+0x108>
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <med+0x128>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	e009      	b.n	800167c <med+0x11c>
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <med+0x128>)
 800166a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <med+0x128>)
 8001670:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001674:	4293      	cmp	r3, r2
 8001676:	bfb8      	it	lt
 8001678:	4613      	movlt	r3, r2
 800167a:	b21b      	sxth	r3, r3
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	20000314 	.word	0x20000314
 800168c:	200002fc 	.word	0x200002fc
 8001690:	20000304 	.word	0x20000304
 8001694:	2000030c 	.word	0x2000030c

08001698 <GY801_update_data>:


void GY801_update_data(){
 8001698:	b598      	push	{r3, r4, r7, lr}
 800169a:	af00      	add	r7, sp, #0
	/*BMP180_get_data();
	BMP180_upd_data();
	ADXL_get_data();*/
	GYRO_get_data();
 800169c:	f000 f8b6 	bl	800180c <GYRO_get_data>
	//mag_get_data();
	lsm303dlhc_get_acc();
 80016a0:	f000 f984 	bl	80019ac <lsm303dlhc_get_acc>
	lsm303dlhc_get_mag();
 80016a4:	f000 f9c0 	bl	8001a28 <lsm303dlhc_get_mag>
	_data_gy->lsm303dlhc.ax=med(0,_data_gy->lsm303dlhc.ax);
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <GY801_update_data+0x5c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016b0:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <GY801_update_data+0x5c>)
 80016b2:	6814      	ldr	r4, [r2, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff ff52 	bl	8001560 <med>
 80016bc:	4603      	mov	r3, r0
 80016be:	8223      	strh	r3, [r4, #16]
	_data_gy->lsm303dlhc.ay=med(1,_data_gy->lsm303dlhc.ay);
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <GY801_update_data+0x5c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016c8:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <GY801_update_data+0x5c>)
 80016ca:	6814      	ldr	r4, [r2, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff ff46 	bl	8001560 <med>
 80016d4:	4603      	mov	r3, r0
 80016d6:	8263      	strh	r3, [r4, #18]
	_data_gy->lsm303dlhc.az=med(2,_data_gy->lsm303dlhc.az);
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <GY801_update_data+0x5c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016e0:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <GY801_update_data+0x5c>)
 80016e2:	6814      	ldr	r4, [r2, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	2002      	movs	r0, #2
 80016e8:	f7ff ff3a 	bl	8001560 <med>
 80016ec:	4603      	mov	r3, r0
 80016ee:	82a3      	strh	r3, [r4, #20]
	//sprintf((char*)gy_data,"X:%06d Y:%06d Z:%06d",_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	//sprintf((char*)gy_data,"%ld;%ld;%ld.%ld;%d;%d;%d;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),_data_gy->bmp180.pressure,_data_gy->bmp180.temp/10,_data_gy->bmp180.temp%10,_data_gy->adxl345.ax,_data_gy->adxl345.ay,_data_gy->adxl345.az,(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	sprintf((char*)gy_data,"%ld;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx*0.1388,_data_gy->lsm303dlhc_mag.my*0.1388,_data_gy->lsm303dlhc_mag.mz*0.1388);
	log_s((char*)gy_data);*/

}
 80016f0:	bf00      	nop
 80016f2:	bd98      	pop	{r3, r4, r7, pc}
 80016f4:	200002f8 	.word	0x200002f8

080016f8 <GYRO_init>:
#include "math.h"
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_gyro_i2c;
readings *_gyro_data;
void GYRO_init(I2C_HandleTypeDef *i2c,readings *data){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	_gyro_i2c=i2c;
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <GYRO_init+0x58>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6013      	str	r3, [r2, #0]
	_gyro_data=data;
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <GYRO_init+0x5c>)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6013      	str	r3, [r2, #0]
	log_s_wnl("L3G4200D started---");
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <GYRO_init+0x60>)
 8001710:	f7ff fe94 	bl	800143c <log_s_wnl>
	if(GYRO_ReadReg(GYRO_REG_DEVID)==211){
 8001714:	200f      	movs	r0, #15
 8001716:	f000 f843 	bl	80017a0 <GYRO_ReadReg>
 800171a:	4603      	mov	r3, r0
 800171c:	2bd3      	cmp	r3, #211	; 0xd3
 800171e:	d103      	bne.n	8001728 <GYRO_init+0x30>
		log_s("ok");
 8001720:	480e      	ldr	r0, [pc, #56]	; (800175c <GYRO_init+0x64>)
 8001722:	f7ff fe69 	bl	80013f8 <log_s>
 8001726:	e002      	b.n	800172e <GYRO_init+0x36>
	}
	else{
		log_s("ERROR");
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <GYRO_init+0x68>)
 800172a:	f7ff fe65 	bl	80013f8 <log_s>
	}
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,0b11111111);
 800172e:	21ff      	movs	r1, #255	; 0xff
 8001730:	2020      	movs	r0, #32
 8001732:	f000 f817 	bl	8001764 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG2,0b0010000);
 8001736:	2110      	movs	r1, #16
 8001738:	2021      	movs	r0, #33	; 0x21
 800173a:	f000 f813 	bl	8001764 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG4,0b00110000);
 800173e:	2130      	movs	r1, #48	; 0x30
 8001740:	2023      	movs	r0, #35	; 0x23
 8001742:	f000 f80f 	bl	8001764 <GYRO_WriteReg>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	2000031c 	.word	0x2000031c
 8001754:	20000320 	.word	0x20000320
 8001758:	0800ad68 	.word	0x0800ad68
 800175c:	0800ad7c 	.word	0x0800ad7c
 8001760:	0800ad80 	.word	0x0800ad80

08001764 <GYRO_WriteReg>:

void GYRO_WriteReg(uint8_t reg, uint8_t cmd) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af02      	add	r7, sp, #8
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	733b      	strb	r3, [r7, #12]
 8001778:	79bb      	ldrb	r3, [r7, #6]
 800177a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, arr, 2, 1000);
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <GYRO_WriteReg+0x38>)
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	f107 020c 	add.w	r2, r7, #12
 8001784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2302      	movs	r3, #2
 800178c:	21d2      	movs	r1, #210	; 0xd2
 800178e:	f002 fecd 	bl	800452c <HAL_I2C_Master_Transmit>
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000031c 	.word	0x2000031c

080017a0 <GYRO_ReadReg>:

uint8_t GYRO_ReadReg(uint8_t reg) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, &reg, 1, 1000);
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <GYRO_ReadReg+0x40>)
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	1dfa      	adds	r2, r7, #7
 80017b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2301      	movs	r3, #1
 80017b8:	21d2      	movs	r1, #210	; 0xd2
 80017ba:	f002 feb7 	bl	800452c <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_gyro_i2c, GYRO_ADDR<<1, &result, 1, 1000);
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <GYRO_ReadReg+0x40>)
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	f107 020f 	add.w	r2, r7, #15
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	21d2      	movs	r1, #210	; 0xd2
 80017d0:	f002 ffaa 	bl	8004728 <HAL_I2C_Master_Receive>
	return result;
 80017d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000031c 	.word	0x2000031c

080017e4 <GYRO_power>:

void GYRO_power(uint8_t pwr){
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,pwr?0x0F:0x00);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <GYRO_power+0x14>
 80017f4:	230f      	movs	r3, #15
 80017f6:	e000      	b.n	80017fa <GYRO_power+0x16>
 80017f8:	2300      	movs	r3, #0
 80017fa:	4619      	mov	r1, r3
 80017fc:	2020      	movs	r0, #32
 80017fe:	f7ff ffb1 	bl	8001764 <GYRO_WriteReg>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
	...

0800180c <GYRO_get_data>:

void GYRO_get_data(){
 800180c:	b598      	push	{r3, r4, r7, lr}
 800180e:	af00      	add	r7, sp, #0
	_gyro_data->l3g4200d.gx=((GYRO_ReadReg(0x29)<<8)|GYRO_ReadReg(0x28));
 8001810:	2029      	movs	r0, #41	; 0x29
 8001812:	f7ff ffc5 	bl	80017a0 <GYRO_ReadReg>
 8001816:	4603      	mov	r3, r0
 8001818:	021b      	lsls	r3, r3, #8
 800181a:	b21c      	sxth	r4, r3
 800181c:	2028      	movs	r0, #40	; 0x28
 800181e:	f7ff ffbf 	bl	80017a0 <GYRO_ReadReg>
 8001822:	4603      	mov	r3, r0
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <GYRO_get_data+0x68>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4322      	orrs	r2, r4
 800182c:	b212      	sxth	r2, r2
 800182e:	831a      	strh	r2, [r3, #24]
	_gyro_data->l3g4200d.gy=((GYRO_ReadReg(0x2B)<<8)|GYRO_ReadReg(0x2A));
 8001830:	202b      	movs	r0, #43	; 0x2b
 8001832:	f7ff ffb5 	bl	80017a0 <GYRO_ReadReg>
 8001836:	4603      	mov	r3, r0
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	b21c      	sxth	r4, r3
 800183c:	202a      	movs	r0, #42	; 0x2a
 800183e:	f7ff ffaf 	bl	80017a0 <GYRO_ReadReg>
 8001842:	4603      	mov	r3, r0
 8001844:	b21a      	sxth	r2, r3
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <GYRO_get_data+0x68>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4322      	orrs	r2, r4
 800184c:	b212      	sxth	r2, r2
 800184e:	835a      	strh	r2, [r3, #26]
	_gyro_data->l3g4200d.gz=((GYRO_ReadReg(0x2D)<<8)|GYRO_ReadReg(0x2C));
 8001850:	202d      	movs	r0, #45	; 0x2d
 8001852:	f7ff ffa5 	bl	80017a0 <GYRO_ReadReg>
 8001856:	4603      	mov	r3, r0
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	b21c      	sxth	r4, r3
 800185c:	202c      	movs	r0, #44	; 0x2c
 800185e:	f7ff ff9f 	bl	80017a0 <GYRO_ReadReg>
 8001862:	4603      	mov	r3, r0
 8001864:	b21a      	sxth	r2, r3
 8001866:	4b03      	ldr	r3, [pc, #12]	; (8001874 <GYRO_get_data+0x68>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4322      	orrs	r2, r4
 800186c:	b212      	sxth	r2, r2
 800186e:	839a      	strh	r2, [r3, #28]
}
 8001870:	bf00      	nop
 8001872:	bd98      	pop	{r3, r4, r7, pc}
 8001874:	20000320 	.word	0x20000320

08001878 <mag_init>:
#include "lsm303dlhc.h"
I2C_HandleTypeDef *_mag_i2c;
readings *_mag_data;
void mag_init(I2C_HandleTypeDef *i2c,readings *data){
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
	_mag_i2c=i2c;
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <mag_init+0x7c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6013      	str	r3, [r2, #0]
	_mag_data=data;
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <mag_init+0x80>)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	6013      	str	r3, [r2, #0]
	log_s_wnl("LSM303DLHC started---");
 800188e:	481b      	ldr	r0, [pc, #108]	; (80018fc <mag_init+0x84>)
 8001890:	f7ff fdd4 	bl	800143c <log_s_wnl>
	if(mag_read_data(1,LSM303DLHC_REG_WHOAMI)==0x33){
 8001894:	210f      	movs	r1, #15
 8001896:	2001      	movs	r0, #1
 8001898:	f000 f836 	bl	8001908 <mag_read_data>
 800189c:	4603      	mov	r3, r0
 800189e:	2b33      	cmp	r3, #51	; 0x33
 80018a0:	d121      	bne.n	80018e6 <mag_init+0x6e>
		log_s("ok");
 80018a2:	4817      	ldr	r0, [pc, #92]	; (8001900 <mag_init+0x88>)
 80018a4:	f7ff fda8 	bl	80013f8 <log_s>
	else{
		log_s("ERROR");
		return;
	}
	/* accel config */
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG1_A,0b01110111);
 80018a8:	2277      	movs	r2, #119	; 0x77
 80018aa:	2120      	movs	r1, #32
 80018ac:	2001      	movs	r0, #1
 80018ae:	f000 f859 	bl	8001964 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG2_A,0b10010000);
 80018b2:	2290      	movs	r2, #144	; 0x90
 80018b4:	2121      	movs	r1, #33	; 0x21
 80018b6:	2001      	movs	r0, #1
 80018b8:	f000 f854 	bl	8001964 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG4_A,0b00111000);
 80018bc:	2238      	movs	r2, #56	; 0x38
 80018be:	2123      	movs	r1, #35	; 0x23
 80018c0:	2001      	movs	r0, #1
 80018c2:	f000 f84f 	bl	8001964 <mag_write_data>
	/* mag config */
	mag_write_data(0,LSM303DLHC_REG_CRA_REG_M,0b00011100);
 80018c6:	221c      	movs	r2, #28
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f84a 	bl	8001964 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_CRB_REG_M,0b10000000);
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	2101      	movs	r1, #1
 80018d4:	2000      	movs	r0, #0
 80018d6:	f000 f845 	bl	8001964 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_MR_REG_M,0b00000000);
 80018da:	2200      	movs	r2, #0
 80018dc:	2102      	movs	r1, #2
 80018de:	2000      	movs	r0, #0
 80018e0:	f000 f840 	bl	8001964 <mag_write_data>
 80018e4:	e003      	b.n	80018ee <mag_init+0x76>
		log_s("ERROR");
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <mag_init+0x8c>)
 80018e8:	f7ff fd86 	bl	80013f8 <log_s>
		return;
 80018ec:	bf00      	nop
}
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000324 	.word	0x20000324
 80018f8:	20000328 	.word	0x20000328
 80018fc:	0800ad88 	.word	0x0800ad88
 8001900:	0800ada0 	.word	0x0800ada0
 8001904:	0800ada4 	.word	0x0800ada4

08001908 <mag_read_data>:


uint8_t mag_read_data(uint8_t type,uint8_t reg){
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af04      	add	r7, sp, #16
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	71bb      	strb	r3, [r7, #6]
	//log_s_int("addr",((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1);
	uint8_t result;
	HAL_I2C_Mem_Read(_mag_i2c, (((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1)+!type, reg, I2C_MEMADD_SIZE_8BIT, &result, 1, 1000);
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <mag_read_data+0x58>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <mag_read_data+0x1e>
 8001922:	2232      	movs	r2, #50	; 0x32
 8001924:	e000      	b.n	8001928 <mag_read_data+0x20>
 8001926:	223c      	movs	r2, #60	; 0x3c
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	bf0c      	ite	eq
 800192e:	2301      	moveq	r3, #1
 8001930:	2300      	movne	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b299      	uxth	r1, r3
 800193a:	79bb      	ldrb	r3, [r7, #6]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2301      	movs	r3, #1
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	f107 030f 	add.w	r3, r7, #15
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	f003 fa0a 	bl	8004d68 <HAL_I2C_Mem_Read>
	return result;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000324 	.word	0x20000324

08001964 <mag_write_data>:
void mag_write_data(uint8_t type,uint8_t reg, uint8_t cmd){
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af04      	add	r7, sp, #16
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(_mag_i2c, ((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 1000);
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <mag_write_data+0x44>)
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <mag_write_data+0x20>
 8001980:	2132      	movs	r1, #50	; 0x32
 8001982:	e000      	b.n	8001986 <mag_write_data+0x22>
 8001984:	213c      	movs	r1, #60	; 0x3c
 8001986:	79bb      	ldrb	r3, [r7, #6]
 8001988:	b29a      	uxth	r2, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	2301      	movs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	1d7b      	adds	r3, r7, #5
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2301      	movs	r3, #1
 800199a:	f003 f8eb 	bl	8004b74 <HAL_I2C_Mem_Write>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000324 	.word	0x20000324

080019ac <lsm303dlhc_get_acc>:

void lsm303dlhc_get_acc(){
 80019ac:	b598      	push	{r3, r4, r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	_mag_data->lsm303dlhc.ax=((mag_read_data(1,LSM303DLHC_REG_OUT_X_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_X_L_A));
 80019b0:	2129      	movs	r1, #41	; 0x29
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff ffa8 	bl	8001908 <mag_read_data>
 80019b8:	4603      	mov	r3, r0
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b21c      	sxth	r4, r3
 80019be:	2128      	movs	r1, #40	; 0x28
 80019c0:	2001      	movs	r0, #1
 80019c2:	f7ff ffa1 	bl	8001908 <mag_read_data>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b21a      	sxth	r2, r3
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <lsm303dlhc_get_acc+0x74>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4322      	orrs	r2, r4
 80019d0:	b212      	sxth	r2, r2
 80019d2:	821a      	strh	r2, [r3, #16]
	_mag_data->lsm303dlhc.ay=((mag_read_data(1,LSM303DLHC_REG_OUT_Y_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Y_L_A));
 80019d4:	212b      	movs	r1, #43	; 0x2b
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff ff96 	bl	8001908 <mag_read_data>
 80019dc:	4603      	mov	r3, r0
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b21c      	sxth	r4, r3
 80019e2:	212a      	movs	r1, #42	; 0x2a
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ff8f 	bl	8001908 <mag_read_data>
 80019ea:	4603      	mov	r3, r0
 80019ec:	b21a      	sxth	r2, r3
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <lsm303dlhc_get_acc+0x74>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4322      	orrs	r2, r4
 80019f4:	b212      	sxth	r2, r2
 80019f6:	825a      	strh	r2, [r3, #18]
	_mag_data->lsm303dlhc.az=((mag_read_data(1,LSM303DLHC_REG_OUT_Z_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Z_L_A));
 80019f8:	212d      	movs	r1, #45	; 0x2d
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff ff84 	bl	8001908 <mag_read_data>
 8001a00:	4603      	mov	r3, r0
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21c      	sxth	r4, r3
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff ff7d 	bl	8001908 <mag_read_data>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <lsm303dlhc_get_acc+0x74>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4322      	orrs	r2, r4
 8001a18:	b212      	sxth	r2, r2
 8001a1a:	829a      	strh	r2, [r3, #20]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd98      	pop	{r3, r4, r7, pc}
 8001a20:	20000328 	.word	0x20000328
 8001a24:	00000000 	.word	0x00000000

08001a28 <lsm303dlhc_get_mag>:
void lsm303dlhc_get_mag(){
 8001a28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a2c:	af00      	add	r7, sp, #0
	_mag_data->lsm303dlhc_mag.mx_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_X_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_X_L_M));
 8001a2e:	2103      	movs	r1, #3
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff ff69 	bl	8001908 <mag_read_data>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	021b      	lsls	r3, r3, #8
 8001a3c:	b29c      	uxth	r4, r3
 8001a3e:	2104      	movs	r1, #4
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff ff61 	bl	8001908 <mag_read_data>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4323      	orrs	r3, r4
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	4bb2      	ldr	r3, [pc, #712]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b212      	sxth	r2, r2
 8001a54:	841a      	strh	r2, [r3, #32]
	_mag_data->lsm303dlhc_mag.my_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Y_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Y_L_M));
 8001a56:	2107      	movs	r1, #7
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff ff55 	bl	8001908 <mag_read_data>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	b29c      	uxth	r4, r3
 8001a66:	2108      	movs	r1, #8
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff ff4d 	bl	8001908 <mag_read_data>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4323      	orrs	r3, r4
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4ba8      	ldr	r3, [pc, #672]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	b212      	sxth	r2, r2
 8001a7c:	845a      	strh	r2, [r3, #34]	; 0x22
	_mag_data->lsm303dlhc_mag.mz_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Z_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Z_L_M));
 8001a7e:	2105      	movs	r1, #5
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ff41 	bl	8001908 <mag_read_data>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29c      	uxth	r4, r3
 8001a8e:	2106      	movs	r1, #6
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff ff39 	bl	8001908 <mag_read_data>
 8001a96:	4603      	mov	r3, r0
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	4323      	orrs	r3, r4
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	4b9e      	ldr	r3, [pc, #632]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b212      	sxth	r2, r2
 8001aa4:	849a      	strh	r2, [r3, #36]	; 0x24
	// magneto calibration
	_mag_data->lsm303dlhc_mag.mx=4.383713*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.021545*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+-0.077899*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8001aa6:	4b9c      	ldr	r3, [pc, #624]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd40 	bl	8000534 <__aeabi_i2d>
 8001ab4:	a384      	add	r3, pc, #528	; (adr r3, 8001cc8 <lsm303dlhc_get_mag+0x2a0>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fbef 	bl	800029c <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a382      	add	r3, pc, #520	; (adr r3, 8001cd0 <lsm303dlhc_get_mag+0x2a8>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fd9c 	bl	8000608 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4614      	mov	r4, r2
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	4b8f      	ldr	r3, [pc, #572]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd27 	bl	8000534 <__aeabi_i2d>
 8001ae6:	a37c      	add	r3, pc, #496	; (adr r3, 8001cd8 <lsm303dlhc_get_mag+0x2b0>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fbd4 	bl	8000298 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	a379      	add	r3, pc, #484	; (adr r3, 8001ce0 <lsm303dlhc_get_mag+0x2b8>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fd83 	bl	8000608 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f7fe fbc7 	bl	800029c <__adddf3>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4690      	mov	r8, r2
 8001b14:	4699      	mov	r9, r3
 8001b16:	4b80      	ldr	r3, [pc, #512]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd08 	bl	8000534 <__aeabi_i2d>
 8001b24:	a370      	add	r3, pc, #448	; (adr r3, 8001ce8 <lsm303dlhc_get_mag+0x2c0>)
 8001b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2a:	f7fe fbb5 	bl	8000298 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4610      	mov	r0, r2
 8001b34:	4619      	mov	r1, r3
 8001b36:	a36e      	add	r3, pc, #440	; (adr r3, 8001cf0 <lsm303dlhc_get_mag+0x2c8>)
 8001b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3c:	f7fe fd64 	bl	8000608 <__aeabi_dmul>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4974      	ldr	r1, [pc, #464]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001b46:	680c      	ldr	r4, [r1, #0]
 8001b48:	4640      	mov	r0, r8
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	f7fe fba6 	bl	800029c <__adddf3>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	_mag_data->lsm303dlhc_mag.my=0.021545*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+4.431516*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+0.225705*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8001b58:	4b6f      	ldr	r3, [pc, #444]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fce7 	bl	8000534 <__aeabi_i2d>
 8001b66:	a358      	add	r3, pc, #352	; (adr r3, 8001cc8 <lsm303dlhc_get_mag+0x2a0>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fb96 	bl	800029c <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	a359      	add	r3, pc, #356	; (adr r3, 8001ce0 <lsm303dlhc_get_mag+0x2b8>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe fd43 	bl	8000608 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcce 	bl	8000534 <__aeabi_i2d>
 8001b98:	a34f      	add	r3, pc, #316	; (adr r3, 8001cd8 <lsm303dlhc_get_mag+0x2b0>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fb7b 	bl	8000298 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	a353      	add	r3, pc, #332	; (adr r3, 8001cf8 <lsm303dlhc_get_mag+0x2d0>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fd2a 	bl	8000608 <__aeabi_dmul>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fb6e 	bl	800029c <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4690      	mov	r8, r2
 8001bc6:	4699      	mov	r9, r3
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fcaf 	bl	8000534 <__aeabi_i2d>
 8001bd6:	a344      	add	r3, pc, #272	; (adr r3, 8001ce8 <lsm303dlhc_get_mag+0x2c0>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	f7fe fb5c 	bl	8000298 <__aeabi_dsub>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	a345      	add	r3, pc, #276	; (adr r3, 8001d00 <lsm303dlhc_get_mag+0x2d8>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fd0b 	bl	8000608 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4948      	ldr	r1, [pc, #288]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001bf8:	680c      	ldr	r4, [r1, #0]
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	f7fe fb4d 	bl	800029c <__adddf3>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	_mag_data->lsm303dlhc_mag.mz=-0.077899*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.066753*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+5.335236*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc8e 	bl	8000534 <__aeabi_i2d>
 8001c18:	a32b      	add	r3, pc, #172	; (adr r3, 8001cc8 <lsm303dlhc_get_mag+0x2a0>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fb3d 	bl	800029c <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	a331      	add	r3, pc, #196	; (adr r3, 8001cf0 <lsm303dlhc_get_mag+0x2c8>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fcea 	bl	8000608 <__aeabi_dmul>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4614      	mov	r4, r2
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	4b36      	ldr	r3, [pc, #216]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc75 	bl	8000534 <__aeabi_i2d>
 8001c4a:	a323      	add	r3, pc, #140	; (adr r3, 8001cd8 <lsm303dlhc_get_mag+0x2b0>)
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	f7fe fb22 	bl	8000298 <__aeabi_dsub>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	a32a      	add	r3, pc, #168	; (adr r3, 8001d08 <lsm303dlhc_get_mag+0x2e0>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fcd1 	bl	8000608 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	f7fe fb15 	bl	800029c <__adddf3>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4690      	mov	r8, r2
 8001c78:	4699      	mov	r9, r3
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc56 	bl	8000534 <__aeabi_i2d>
 8001c88:	a317      	add	r3, pc, #92	; (adr r3, 8001ce8 <lsm303dlhc_get_mag+0x2c0>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fb03 	bl	8000298 <__aeabi_dsub>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	a31d      	add	r3, pc, #116	; (adr r3, 8001d10 <lsm303dlhc_get_mag+0x2e8>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcb2 	bl	8000608 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	491b      	ldr	r1, [pc, #108]	; (8001d18 <lsm303dlhc_get_mag+0x2f0>)
 8001caa:	680c      	ldr	r4, [r1, #0]
 8001cac:	4640      	mov	r0, r8
 8001cae:	4649      	mov	r1, r9
 8001cb0:	f7fe faf4 	bl	800029c <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
}
 8001cbc:	bf00      	nop
 8001cbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cc2:	bf00      	nop
 8001cc4:	f3af 8000 	nop.w
 8001cc8:	6fe2e6eb 	.word	0x6fe2e6eb
 8001ccc:	40459a7b 	.word	0x40459a7b
 8001cd0:	0f883340 	.word	0x0f883340
 8001cd4:	401188ec 	.word	0x401188ec
 8001cd8:	0ad46f58 	.word	0x0ad46f58
 8001cdc:	4039a7d3 	.word	0x4039a7d3
 8001ce0:	7991bc56 	.word	0x7991bc56
 8001ce4:	3f960fe4 	.word	0x3f960fe4
 8001ce8:	fbce4218 	.word	0xfbce4218
 8001cec:	3fe238ff 	.word	0x3fe238ff
 8001cf0:	59641f64 	.word	0x59641f64
 8001cf4:	bfb3f130 	.word	0xbfb3f130
 8001cf8:	548ecd8e 	.word	0x548ecd8e
 8001cfc:	4011b9df 	.word	0x4011b9df
 8001d00:	c4c5974e 	.word	0xc4c5974e
 8001d04:	3fcce3e6 	.word	0x3fcce3e6
 8001d08:	7fe8ee6c 	.word	0x7fe8ee6c
 8001d0c:	3fb116b9 	.word	0x3fb116b9
 8001d10:	1b21c476 	.word	0x1b21c476
 8001d14:	40155748 	.word	0x40155748
 8001d18:	20000328 	.word	0x20000328

08001d1c <mahony_print_ptr>:

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

void mahony_print_ptr()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	log_s_p_3("AHRS",&roll,&pitch,&yaw);
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <mahony_print_ptr+0x14>)
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <mahony_print_ptr+0x18>)
 8001d24:	4904      	ldr	r1, [pc, #16]	; (8001d38 <mahony_print_ptr+0x1c>)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <mahony_print_ptr+0x20>)
 8001d28:	f7ff fbb6 	bl	8001498 <log_s_p_3>
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000350 	.word	0x20000350
 8001d34:	2000034c 	.word	0x2000034c
 8001d38:	20000348 	.word	0x20000348
 8001d3c:	0800adac 	.word	0x0800adac

08001d40 <mahony_update>:

void mahony_update(float invSampleFreq,float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0a6      	sub	sp, #152	; 0x98
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001d4a:	edc7 0a08 	vstr	s1, [r7, #32]
 8001d4e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001d52:	edc7 1a06 	vstr	s3, [r7, #24]
 8001d56:	ed87 2a05 	vstr	s4, [r7, #20]
 8001d5a:	edc7 2a04 	vstr	s5, [r7, #16]
 8001d5e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001d62:	edc7 3a02 	vstr	s7, [r7, #8]
 8001d66:	ed87 4a01 	vstr	s8, [r7, #4]
 8001d6a:	edc7 4a00 	vstr	s9, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid
	// (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001d6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d11c      	bne.n	8001db6 <mahony_update+0x76>
 8001d7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d80:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d115      	bne.n	8001db6 <mahony_update+0x76>
 8001d8a:	edd7 7a00 	vldr	s15, [r7]
 8001d8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d10e      	bne.n	8001db6 <mahony_update+0x76>
		mahony_updateIMU(gx, gy, gz, ax, ay, az);
 8001d98:	edd7 2a03 	vldr	s5, [r7, #12]
 8001d9c:	ed97 2a04 	vldr	s4, [r7, #16]
 8001da0:	edd7 1a05 	vldr	s3, [r7, #20]
 8001da4:	ed97 1a06 	vldr	s2, [r7, #24]
 8001da8:	edd7 0a07 	vldr	s1, [r7, #28]
 8001dac:	ed97 0a08 	vldr	s0, [r7, #32]
 8001db0:	f000 fbe6 	bl	8002580 <mahony_updateIMU>
		return;
 8001db4:	e3cd      	b.n	8002552 <mahony_update+0x812>
	}


	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001db6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc2:	d10e      	bne.n	8001de2 <mahony_update+0xa2>
 8001dc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dc8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d107      	bne.n	8001de2 <mahony_update+0xa2>
 8001dd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	f000 82b7 	beq.w	8002350 <mahony_update+0x610>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 8001de2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001df2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dfa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	f000 fe41 	bl	8002a8c <mahony_invSqrt>
 8001e0a:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		ax *= recipNorm;
 8001e0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e12:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8001e1e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e22:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8001e2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e32:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e3a:	edc7 7a03 	vstr	s15, [r7, #12]

		// Normalise magnetometer measurement
		recipNorm = mahony_invSqrt(mx * mx + my * my + mz * mz);
 8001e3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e42:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e52:	edd7 7a00 	vldr	s15, [r7]
 8001e56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	f000 fe13 	bl	8002a8c <mahony_invSqrt>
 8001e66:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		mx *= recipNorm;
 8001e6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e6e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e76:	edc7 7a02 	vstr	s15, [r7, #8]
		my *= recipNorm;
 8001e7a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e7e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e86:	edc7 7a01 	vstr	s15, [r7, #4]
		mz *= recipNorm;
 8001e8a:	ed97 7a00 	vldr	s14, [r7]
 8001e8e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e96:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		q0q0 = q0 * q0;
 8001e9a:	4bf0      	ldr	r3, [pc, #960]	; (800225c <mahony_update+0x51c>)
 8001e9c:	ed93 7a00 	vldr	s14, [r3]
 8001ea0:	4bee      	ldr	r3, [pc, #952]	; (800225c <mahony_update+0x51c>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q1 = q0 * q1;
 8001eae:	4beb      	ldr	r3, [pc, #940]	; (800225c <mahony_update+0x51c>)
 8001eb0:	ed93 7a00 	vldr	s14, [r3]
 8001eb4:	4bea      	ldr	r3, [pc, #936]	; (8002260 <mahony_update+0x520>)
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q2 = q0 * q2;
 8001ec2:	4be6      	ldr	r3, [pc, #920]	; (800225c <mahony_update+0x51c>)
 8001ec4:	ed93 7a00 	vldr	s14, [r3]
 8001ec8:	4be6      	ldr	r3, [pc, #920]	; (8002264 <mahony_update+0x524>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed2:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q0q3 = q0 * q3;
 8001ed6:	4be1      	ldr	r3, [pc, #900]	; (800225c <mahony_update+0x51c>)
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	4be2      	ldr	r3, [pc, #904]	; (8002268 <mahony_update+0x528>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q1 = q1 * q1;
 8001eea:	4bdd      	ldr	r3, [pc, #884]	; (8002260 <mahony_update+0x520>)
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	4bdb      	ldr	r3, [pc, #876]	; (8002260 <mahony_update+0x520>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efa:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q2 = q1 * q2;
 8001efe:	4bd8      	ldr	r3, [pc, #864]	; (8002260 <mahony_update+0x520>)
 8001f00:	ed93 7a00 	vldr	s14, [r3]
 8001f04:	4bd7      	ldr	r3, [pc, #860]	; (8002264 <mahony_update+0x524>)
 8001f06:	edd3 7a00 	vldr	s15, [r3]
 8001f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q1q3 = q1 * q3;
 8001f12:	4bd3      	ldr	r3, [pc, #844]	; (8002260 <mahony_update+0x520>)
 8001f14:	ed93 7a00 	vldr	s14, [r3]
 8001f18:	4bd3      	ldr	r3, [pc, #844]	; (8002268 <mahony_update+0x528>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q2 = q2 * q2;
 8001f26:	4bcf      	ldr	r3, [pc, #828]	; (8002264 <mahony_update+0x524>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	4bcd      	ldr	r3, [pc, #820]	; (8002264 <mahony_update+0x524>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f36:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q2q3 = q2 * q3;
 8001f3a:	4bca      	ldr	r3, [pc, #808]	; (8002264 <mahony_update+0x524>)
 8001f3c:	ed93 7a00 	vldr	s14, [r3]
 8001f40:	4bc9      	ldr	r3, [pc, #804]	; (8002268 <mahony_update+0x528>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q3q3 = q3 * q3;
 8001f4e:	4bc6      	ldr	r3, [pc, #792]	; (8002268 <mahony_update+0x528>)
 8001f50:	ed93 7a00 	vldr	s14, [r3]
 8001f54:	4bc4      	ldr	r3, [pc, #784]	; (8002268 <mahony_update+0x528>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		// Reference direction of Earth's magnetic field
		hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 8001f62:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f66:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f6e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001f72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f7e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001f82:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001f86:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f96:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001f9a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001f9e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fa2:	edd7 7a00 	vldr	s15, [r7]
 8001fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fb2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 8001fb6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001fba:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001fbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001fce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001fd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fd6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001fda:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fea:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001fee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001ff2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ff6:	edd7 7a00 	vldr	s15, [r7]
 8001ffa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002002:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002006:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		bx = sqrtf(hx * hx + hy * hy);
 800200a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800200e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002012:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002016:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800201a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201e:	eeb0 0a67 	vmov.f32	s0, s15
 8002022:	f008 fbb3 	bl	800a78c <sqrtf>
 8002026:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 800202a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800202e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002032:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002036:	edd7 7a02 	vldr	s15, [r7, #8]
 800203a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800203e:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8002042:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002046:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800204a:	edd7 7a01 	vldr	s15, [r7, #4]
 800204e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002056:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800205a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800205e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002062:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002066:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800206a:	edd7 7a00 	vldr	s15, [r7]
 800206e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002076:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800207a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 800207e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002082:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		halfvy = q0q1 + q2q3;
 800208e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002092:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		halfvz = q0q0 - 0.5f + q3q3;
 800209e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80020a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020aa:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 80020b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020ba:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80020be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020c2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80020c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d2:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 80020d6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80020da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80020de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ea:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 80020ee:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80020f2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80020f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002102:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8002106:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800210a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800210e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 800211e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002122:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800212e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002132:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002136:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800213a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800213e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002142:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002146:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800214a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		// Error is sum of cross product between estimated direction
		// and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 8002156:	ed97 7a04 	vldr	s14, [r7, #16]
 800215a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800215e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002162:	edd7 6a03 	vldr	s13, [r7, #12]
 8002166:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800216a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002172:	edd7 6a01 	vldr	s13, [r7, #4]
 8002176:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800217a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800217e:	ed97 6a00 	vldr	s12, [r7]
 8002182:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002186:	ee66 7a27 	vmul.f32	s15, s12, s15
 800218a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800218e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002192:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 8002196:	ed97 7a03 	vldr	s14, [r7, #12]
 800219a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80021a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80021aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021b2:	edd7 6a00 	vldr	s13, [r7]
 80021b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80021ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021be:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80021ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 80021d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80021da:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80021de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e2:	edd7 6a04 	vldr	s13, [r7, #16]
 80021e6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021f2:	edd7 6a02 	vldr	s13, [r7, #8]
 80021f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8002202:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002206:	ee66 7a27 	vmul.f32	s15, s12, s15
 800220a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002212:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <mahony_update+0x52c>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	dd61      	ble.n	80022ea <mahony_update+0x5aa>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <mahony_update+0x52c>)
 8002228:	ed93 7a00 	vldr	s14, [r3]
 800222c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002234:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002238:	ee27 7a27 	vmul.f32	s14, s14, s15
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <mahony_update+0x530>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002246:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <mahony_update+0x530>)
 8002248:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <mahony_update+0x52c>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800225a:	e00b      	b.n	8002274 <mahony_update+0x534>
 800225c:	20000008 	.word	0x20000008
 8002260:	2000032c 	.word	0x2000032c
 8002264:	20000330 	.word	0x20000330
 8002268:	20000334 	.word	0x20000334
 800226c:	20000004 	.word	0x20000004
 8002270:	20000338 	.word	0x20000338
 8002274:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800227c:	4bb6      	ldr	r3, [pc, #728]	; (8002558 <mahony_update+0x818>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002286:	4bb4      	ldr	r3, [pc, #720]	; (8002558 <mahony_update+0x818>)
 8002288:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 800228c:	4bb3      	ldr	r3, [pc, #716]	; (800255c <mahony_update+0x81c>)
 800228e:	ed93 7a00 	vldr	s14, [r3]
 8002292:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800229e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a2:	4baf      	ldr	r3, [pc, #700]	; (8002560 <mahony_update+0x820>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ac:	4bac      	ldr	r3, [pc, #688]	; (8002560 <mahony_update+0x820>)
 80022ae:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 80022b2:	4bac      	ldr	r3, [pc, #688]	; (8002564 <mahony_update+0x824>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80022bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c0:	edc7 7a08 	vstr	s15, [r7, #32]
			gy += integralFBy;
 80022c4:	4ba4      	ldr	r3, [pc, #656]	; (8002558 <mahony_update+0x818>)
 80022c6:	edd3 7a00 	vldr	s15, [r3]
 80022ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80022ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d2:	edc7 7a07 	vstr	s15, [r7, #28]
			gz += integralFBz;
 80022d6:	4ba2      	ldr	r3, [pc, #648]	; (8002560 <mahony_update+0x820>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ed97 7a06 	vldr	s14, [r7, #24]
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e4:	edc7 7a06 	vstr	s15, [r7, #24]
 80022e8:	e00b      	b.n	8002302 <mahony_update+0x5c2>
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 80022ea:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <mahony_update+0x824>)
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80022f2:	4b99      	ldr	r3, [pc, #612]	; (8002558 <mahony_update+0x818>)
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80022fa:	4b99      	ldr	r3, [pc, #612]	; (8002560 <mahony_update+0x820>)
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8002302:	4b99      	ldr	r3, [pc, #612]	; (8002568 <mahony_update+0x828>)
 8002304:	ed93 7a00 	vldr	s14, [r3]
 8002308:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	ed97 7a08 	vldr	s14, [r7, #32]
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	edc7 7a08 	vstr	s15, [r7, #32]
		gy += twoKp * halfey;
 800231c:	4b92      	ldr	r3, [pc, #584]	; (8002568 <mahony_update+0x828>)
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	ed97 7a07 	vldr	s14, [r7, #28]
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	edc7 7a07 	vstr	s15, [r7, #28]
		gz += twoKp * halfez;
 8002336:	4b8c      	ldr	r3, [pc, #560]	; (8002568 <mahony_update+0x828>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002344:	ed97 7a06 	vldr	s14, [r7, #24]
 8002348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8002350:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002354:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002358:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002364:	edc7 7a08 	vstr	s15, [r7, #32]
	gy *= (0.5f * invSampleFreq);
 8002368:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800236c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002374:	ed97 7a07 	vldr	s14, [r7, #28]
 8002378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237c:	edc7 7a07 	vstr	s15, [r7, #28]
	gz *= (0.5f * invSampleFreq);
 8002380:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002384:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800238c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002394:	edc7 7a06 	vstr	s15, [r7, #24]
	qa = q0;
 8002398:	4b74      	ldr	r3, [pc, #464]	; (800256c <mahony_update+0x82c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
	qb = q1;
 800239e:	4b74      	ldr	r3, [pc, #464]	; (8002570 <mahony_update+0x830>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
	qc = q2;
 80023a4:	4b73      	ldr	r3, [pc, #460]	; (8002574 <mahony_update+0x834>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	q0 += (-qb * gx - qc * gy - q3 * gz);
 80023aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80023ae:	eeb1 7a67 	vneg.f32	s14, s15
 80023b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80023b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023be:	edd7 7a07 	vldr	s15, [r7, #28]
 80023c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ca:	4b6b      	ldr	r3, [pc, #428]	; (8002578 <mahony_update+0x838>)
 80023cc:	edd3 6a00 	vldr	s13, [r3]
 80023d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80023d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023dc:	4b63      	ldr	r3, [pc, #396]	; (800256c <mahony_update+0x82c>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <mahony_update+0x82c>)
 80023e8:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 80023ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80023f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80023f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80023fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002400:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002404:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002408:	4b5b      	ldr	r3, [pc, #364]	; (8002578 <mahony_update+0x838>)
 800240a:	edd3 6a00 	vldr	s13, [r3]
 800240e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002416:	ee37 7a67 	vsub.f32	s14, s14, s15
 800241a:	4b55      	ldr	r3, [pc, #340]	; (8002570 <mahony_update+0x830>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002424:	4b52      	ldr	r3, [pc, #328]	; (8002570 <mahony_update+0x830>)
 8002426:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 800242a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800242e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002436:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800243a:	edd7 7a06 	vldr	s15, [r7, #24]
 800243e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002442:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002446:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <mahony_update+0x838>)
 8002448:	edd3 6a00 	vldr	s13, [r3]
 800244c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002450:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002458:	4b46      	ldr	r3, [pc, #280]	; (8002574 <mahony_update+0x834>)
 800245a:	edd3 7a00 	vldr	s15, [r3]
 800245e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002462:	4b44      	ldr	r3, [pc, #272]	; (8002574 <mahony_update+0x834>)
 8002464:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8002468:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800246c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002474:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002478:	edd7 7a07 	vldr	s15, [r7, #28]
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002484:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002488:	edd7 7a08 	vldr	s15, [r7, #32]
 800248c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002490:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <mahony_update+0x838>)
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249e:	4b36      	ldr	r3, [pc, #216]	; (8002578 <mahony_update+0x838>)
 80024a0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80024a4:	4b31      	ldr	r3, [pc, #196]	; (800256c <mahony_update+0x82c>)
 80024a6:	ed93 7a00 	vldr	s14, [r3]
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <mahony_update+0x82c>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <mahony_update+0x830>)
 80024b6:	edd3 6a00 	vldr	s13, [r3]
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <mahony_update+0x830>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <mahony_update+0x834>)
 80024ca:	edd3 6a00 	vldr	s13, [r3]
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <mahony_update+0x834>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	4b26      	ldr	r3, [pc, #152]	; (8002578 <mahony_update+0x838>)
 80024de:	edd3 6a00 	vldr	s13, [r3]
 80024e2:	4b25      	ldr	r3, [pc, #148]	; (8002578 <mahony_update+0x838>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	eeb0 0a67 	vmov.f32	s0, s15
 80024f4:	f000 faca 	bl	8002a8c <mahony_invSqrt>
 80024f8:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	q0 *= recipNorm;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <mahony_update+0x82c>)
 80024fe:	ed93 7a00 	vldr	s14, [r3]
 8002502:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <mahony_update+0x82c>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <mahony_update+0x830>)
 8002512:	ed93 7a00 	vldr	s14, [r3]
 8002516:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <mahony_update+0x830>)
 8002520:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <mahony_update+0x834>)
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <mahony_update+0x834>)
 8002534:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <mahony_update+0x838>)
 800253a:	ed93 7a00 	vldr	s14, [r3]
 800253e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002546:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <mahony_update+0x838>)
 8002548:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <mahony_update+0x83c>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
}
 8002552:	3798      	adds	r7, #152	; 0x98
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000033c 	.word	0x2000033c
 800255c:	20000004 	.word	0x20000004
 8002560:	20000340 	.word	0x20000340
 8002564:	20000338 	.word	0x20000338
 8002568:	20000000 	.word	0x20000000
 800256c:	20000008 	.word	0x20000008
 8002570:	2000032c 	.word	0x2000032c
 8002574:	20000330 	.word	0x20000330
 8002578:	20000334 	.word	0x20000334
 800257c:	20000354 	.word	0x20000354

08002580 <mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void mahony_updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b090      	sub	sp, #64	; 0x40
 8002584:	af00      	add	r7, sp, #0
 8002586:	ed87 0a05 	vstr	s0, [r7, #20]
 800258a:	edc7 0a04 	vstr	s1, [r7, #16]
 800258e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002592:	edc7 1a02 	vstr	s3, [r7, #8]
 8002596:	ed87 2a01 	vstr	s4, [r7, #4]
 800259a:	edc7 2a00 	vstr	s5, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800259e:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	d10e      	bne.n	80025ca <mahony_updateIMU+0x4a>
 80025ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80025b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d107      	bne.n	80025ca <mahony_updateIMU+0x4a>
 80025ba:	edd7 7a00 	vldr	s15, [r7]
 80025be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	f000 8144 	beq.w	8002852 <mahony_updateIMU+0x2d2>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 80025ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025de:	edd7 7a00 	vldr	s15, [r7]
 80025e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	eeb0 0a67 	vmov.f32	s0, s15
 80025ee:	f000 fa4d 	bl	8002a8c <mahony_invSqrt>
 80025f2:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		ax *= recipNorm;
 80025f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80025fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002606:	ed97 7a01 	vldr	s14, [r7, #4]
 800260a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800260e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002612:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 8002616:	ed97 7a00 	vldr	s14, [r7]
 800261a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002622:	edc7 7a00 	vstr	s15, [r7]

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8002626:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <mahony_updateIMU+0x248>)
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	4b67      	ldr	r3, [pc, #412]	; (80027cc <mahony_updateIMU+0x24c>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002636:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <mahony_updateIMU+0x250>)
 8002638:	edd3 6a00 	vldr	s13, [r3]
 800263c:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <mahony_updateIMU+0x254>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		halfvy = q0 * q1 + q2 * q3;
 800264e:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <mahony_updateIMU+0x250>)
 8002650:	ed93 7a00 	vldr	s14, [r3]
 8002654:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <mahony_updateIMU+0x248>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800265e:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <mahony_updateIMU+0x254>)
 8002660:	edd3 6a00 	vldr	s13, [r3]
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <mahony_updateIMU+0x24c>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002672:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8002676:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <mahony_updateIMU+0x250>)
 8002678:	ed93 7a00 	vldr	s14, [r3]
 800267c:	4b54      	ldr	r3, [pc, #336]	; (80027d0 <mahony_updateIMU+0x250>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002686:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800268a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800268e:	4b4f      	ldr	r3, [pc, #316]	; (80027cc <mahony_updateIMU+0x24c>)
 8002690:	edd3 6a00 	vldr	s13, [r3]
 8002694:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <mahony_updateIMU+0x24c>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 80026a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80026aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026b2:	edd7 6a00 	vldr	s13, [r7]
 80026b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		halfey = (az * halfvx - ax * halfvz);
 80026c6:	ed97 7a00 	vldr	s14, [r7]
 80026ca:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80026ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80026d6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80026da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		halfez = (ax * halfvy - ay * halfvx);
 80026e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80026ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80026ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f2:	edd7 6a01 	vldr	s13, [r7, #4]
 80026f6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80026fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002702:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <mahony_updateIMU+0x258>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	dd6a      	ble.n	80027ec <mahony_updateIMU+0x26c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 8002716:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <mahony_updateIMU+0x258>)
 8002718:	ed93 7a00 	vldr	s14, [r3]
 800271c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002720:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <mahony_updateIMU+0x25c>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272e:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <mahony_updateIMU+0x260>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <mahony_updateIMU+0x260>)
 800273a:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 800273e:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <mahony_updateIMU+0x258>)
 8002740:	ed93 7a00 	vldr	s14, [r3]
 8002744:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <mahony_updateIMU+0x25c>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002756:	4b23      	ldr	r3, [pc, #140]	; (80027e4 <mahony_updateIMU+0x264>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002760:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <mahony_updateIMU+0x264>)
 8002762:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <mahony_updateIMU+0x258>)
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <mahony_updateIMU+0x25c>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <mahony_updateIMU+0x268>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <mahony_updateIMU+0x268>)
 800278a:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 800278e:	4b14      	ldr	r3, [pc, #80]	; (80027e0 <mahony_updateIMU+0x260>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ed97 7a05 	vldr	s14, [r7, #20]
 8002798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279c:	edc7 7a05 	vstr	s15, [r7, #20]
			gy += integralFBy;
 80027a0:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <mahony_updateIMU+0x264>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ae:	edc7 7a04 	vstr	s15, [r7, #16]
			gz += integralFBz;
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <mahony_updateIMU+0x268>)
 80027b4:	edd3 7a00 	vldr	s15, [r3]
 80027b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80027bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c0:	edc7 7a03 	vstr	s15, [r7, #12]
 80027c4:	e01e      	b.n	8002804 <mahony_updateIMU+0x284>
 80027c6:	bf00      	nop
 80027c8:	2000032c 	.word	0x2000032c
 80027cc:	20000334 	.word	0x20000334
 80027d0:	20000008 	.word	0x20000008
 80027d4:	20000330 	.word	0x20000330
 80027d8:	20000004 	.word	0x20000004
 80027dc:	20000344 	.word	0x20000344
 80027e0:	20000338 	.word	0x20000338
 80027e4:	2000033c 	.word	0x2000033c
 80027e8:	20000340 	.word	0x20000340
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 80027ec:	4b9d      	ldr	r3, [pc, #628]	; (8002a64 <mahony_updateIMU+0x4e4>)
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80027f4:	4b9c      	ldr	r3, [pc, #624]	; (8002a68 <mahony_updateIMU+0x4e8>)
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80027fc:	4b9b      	ldr	r3, [pc, #620]	; (8002a6c <mahony_updateIMU+0x4ec>)
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8002804:	4b9a      	ldr	r3, [pc, #616]	; (8002a70 <mahony_updateIMU+0x4f0>)
 8002806:	ed93 7a00 	vldr	s14, [r3]
 800280a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	ed97 7a05 	vldr	s14, [r7, #20]
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	edc7 7a05 	vstr	s15, [r7, #20]
		gy += twoKp * halfey;
 800281e:	4b94      	ldr	r3, [pc, #592]	; (8002a70 <mahony_updateIMU+0x4f0>)
 8002820:	ed93 7a00 	vldr	s14, [r3]
 8002824:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002834:	edc7 7a04 	vstr	s15, [r7, #16]
		gz += twoKp * halfez;
 8002838:	4b8d      	ldr	r3, [pc, #564]	; (8002a70 <mahony_updateIMU+0x4f0>)
 800283a:	ed93 7a00 	vldr	s14, [r3]
 800283e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	ed97 7a03 	vldr	s14, [r7, #12]
 800284a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284e:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8002852:	4b88      	ldr	r3, [pc, #544]	; (8002a74 <mahony_updateIMU+0x4f4>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800285c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002860:	ed97 7a05 	vldr	s14, [r7, #20]
 8002864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002868:	edc7 7a05 	vstr	s15, [r7, #20]
	gy *= (0.5f * invSampleFreq);
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <mahony_updateIMU+0x4f4>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800287a:	ed97 7a04 	vldr	s14, [r7, #16]
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	edc7 7a04 	vstr	s15, [r7, #16]
	gz *= (0.5f * invSampleFreq);
 8002886:	4b7b      	ldr	r3, [pc, #492]	; (8002a74 <mahony_updateIMU+0x4f4>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002894:	ed97 7a03 	vldr	s14, [r7, #12]
 8002898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289c:	edc7 7a03 	vstr	s15, [r7, #12]
	qa = q0;
 80028a0:	4b75      	ldr	r3, [pc, #468]	; (8002a78 <mahony_updateIMU+0x4f8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	623b      	str	r3, [r7, #32]
	qb = q1;
 80028a6:	4b75      	ldr	r3, [pc, #468]	; (8002a7c <mahony_updateIMU+0x4fc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	61fb      	str	r3, [r7, #28]
	qc = q2;
 80028ac:	4b74      	ldr	r3, [pc, #464]	; (8002a80 <mahony_updateIMU+0x500>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 80028b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028b6:	eeb1 7a67 	vneg.f32	s14, s15
 80028ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80028be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c2:	edd7 6a06 	vldr	s13, [r7, #24]
 80028c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <mahony_updateIMU+0x504>)
 80028d4:	edd3 6a00 	vldr	s13, [r3]
 80028d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028e4:	4b64      	ldr	r3, [pc, #400]	; (8002a78 <mahony_updateIMU+0x4f8>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ee:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <mahony_updateIMU+0x4f8>)
 80028f0:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 80028f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80028f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002900:	edd7 6a06 	vldr	s13, [r7, #24]
 8002904:	edd7 7a03 	vldr	s15, [r7, #12]
 8002908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800290c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002910:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <mahony_updateIMU+0x504>)
 8002912:	edd3 6a00 	vldr	s13, [r3]
 8002916:	edd7 7a04 	vldr	s15, [r7, #16]
 800291a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <mahony_updateIMU+0x4fc>)
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <mahony_updateIMU+0x4fc>)
 800292e:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8002932:	ed97 7a08 	vldr	s14, [r7, #32]
 8002936:	edd7 7a04 	vldr	s15, [r7, #16]
 800293a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002942:	edd7 7a03 	vldr	s15, [r7, #12]
 8002946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800294e:	4b4d      	ldr	r3, [pc, #308]	; (8002a84 <mahony_updateIMU+0x504>)
 8002950:	edd3 6a00 	vldr	s13, [r3]
 8002954:	edd7 7a05 	vldr	s15, [r7, #20]
 8002958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800295c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002960:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <mahony_updateIMU+0x500>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800296a:	4b45      	ldr	r3, [pc, #276]	; (8002a80 <mahony_updateIMU+0x500>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8002970:	ed97 7a08 	vldr	s14, [r7, #32]
 8002974:	edd7 7a03 	vldr	s15, [r7, #12]
 8002978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800297c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002980:	edd7 7a04 	vldr	s15, [r7, #16]
 8002984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800298c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002990:	edd7 7a05 	vldr	s15, [r7, #20]
 8002994:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800299c:	4b39      	ldr	r3, [pc, #228]	; (8002a84 <mahony_updateIMU+0x504>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <mahony_updateIMU+0x504>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <mahony_updateIMU+0x4f8>)
 80029ae:	ed93 7a00 	vldr	s14, [r3]
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <mahony_updateIMU+0x4f8>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029bc:	4b2f      	ldr	r3, [pc, #188]	; (8002a7c <mahony_updateIMU+0x4fc>)
 80029be:	edd3 6a00 	vldr	s13, [r3]
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <mahony_updateIMU+0x4fc>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <mahony_updateIMU+0x500>)
 80029d2:	edd3 6a00 	vldr	s13, [r3]
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <mahony_updateIMU+0x500>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <mahony_updateIMU+0x504>)
 80029e6:	edd3 6a00 	vldr	s13, [r3]
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <mahony_updateIMU+0x504>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f8:	eeb0 0a67 	vmov.f32	s0, s15
 80029fc:	f000 f846 	bl	8002a8c <mahony_invSqrt>
 8002a00:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	q0 *= recipNorm;
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <mahony_updateIMU+0x4f8>)
 8002a06:	ed93 7a00 	vldr	s14, [r3]
 8002a0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <mahony_updateIMU+0x4f8>)
 8002a14:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <mahony_updateIMU+0x4fc>)
 8002a1a:	ed93 7a00 	vldr	s14, [r3]
 8002a1e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <mahony_updateIMU+0x4fc>)
 8002a28:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <mahony_updateIMU+0x500>)
 8002a2e:	ed93 7a00 	vldr	s14, [r3]
 8002a32:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <mahony_updateIMU+0x500>)
 8002a3c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002a40:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <mahony_updateIMU+0x504>)
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <mahony_updateIMU+0x504>)
 8002a50:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <mahony_updateIMU+0x508>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	3740      	adds	r7, #64	; 0x40
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000338 	.word	0x20000338
 8002a68:	2000033c 	.word	0x2000033c
 8002a6c:	20000340 	.word	0x20000340
 8002a70:	20000000 	.word	0x20000000
 8002a74:	20000344 	.word	0x20000344
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	2000032c 	.word	0x2000032c
 8002a80:	20000330 	.word	0x20000330
 8002a84:	20000334 	.word	0x20000334
 8002a88:	20000354 	.word	0x20000354

08002a8c <mahony_invSqrt>:
//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float mahony_invSqrt(float x)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa2:	edc7 7a05 	vstr	s15, [r7, #20]
	union { float f; long l; } i;
	i.f = x;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60fb      	str	r3, [r7, #12]
	i.l = 0x5f3759df - (i.l >> 1);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	105a      	asrs	r2, r3, #1
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <mahony_invSqrt+0x90>)
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
	float y = i.f;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002ab8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002abc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002acc:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002adc:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002ae0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af4:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002af8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002afc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b04:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	ee07 3a90 	vmov	s15, r3
}
 8002b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	5f3759df 	.word	0x5f3759df

08002b20 <mahony_computeAngles>:

//-------------------------------------------------------------------------------------------

void mahony_computeAngles()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*180/M_PI;
 8002b24:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <mahony_computeAngles+0x198>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <mahony_computeAngles+0x19c>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b34:	4b62      	ldr	r3, [pc, #392]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002b36:	edd3 6a00 	vldr	s13, [r3]
 8002b3a:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <mahony_computeAngles+0x1a4>)
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b44:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002b48:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <mahony_computeAngles+0x19c>)
 8002b4a:	ed93 7a00 	vldr	s14, [r3]
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	; (8002cbc <mahony_computeAngles+0x19c>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b60:	4b57      	ldr	r3, [pc, #348]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002b62:	edd3 6a00 	vldr	s13, [r3]
 8002b66:	4b56      	ldr	r3, [pc, #344]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b74:	eef0 0a67 	vmov.f32	s1, s15
 8002b78:	eeb0 0a46 	vmov.f32	s0, s12
 8002b7c:	f007 fe04 	bl	800a788 <atan2f>
 8002b80:	eef0 7a40 	vmov.f32	s15, s0
 8002b84:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002cc8 <mahony_computeAngles+0x1a8>
 8002b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8c:	ee17 0a90 	vmov	r0, s15
 8002b90:	f7fd fce2 	bl	8000558 <__aeabi_f2d>
 8002b94:	a346      	add	r3, pc, #280	; (adr r3, 8002cb0 <mahony_computeAngles+0x190>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fe5f 	bl	800085c <__aeabi_ddiv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f7fe f807 	bl	8000bb8 <__aeabi_d2f>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4a47      	ldr	r2, [pc, #284]	; (8002ccc <mahony_computeAngles+0x1ac>)
 8002bae:	6013      	str	r3, [r2, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2))*180/M_PI;
 8002bb0:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <mahony_computeAngles+0x19c>)
 8002bb2:	ed93 7a00 	vldr	s14, [r3]
 8002bb6:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <mahony_computeAngles+0x1a4>)
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc0:	4b3d      	ldr	r3, [pc, #244]	; (8002cb8 <mahony_computeAngles+0x198>)
 8002bc2:	edd3 6a00 	vldr	s13, [r3]
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002bc8:	edd3 7a00 	vldr	s15, [r3]
 8002bcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bd4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002be0:	f007 fda6 	bl	800a730 <asinf>
 8002be4:	eef0 7a40 	vmov.f32	s15, s0
 8002be8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002cc8 <mahony_computeAngles+0x1a8>
 8002bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf0:	ee17 0a90 	vmov	r0, s15
 8002bf4:	f7fd fcb0 	bl	8000558 <__aeabi_f2d>
 8002bf8:	a32d      	add	r3, pc, #180	; (adr r3, 8002cb0 <mahony_computeAngles+0x190>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fe2d 	bl	800085c <__aeabi_ddiv>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fd ffd5 	bl	8000bb8 <__aeabi_d2f>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <mahony_computeAngles+0x1b0>)
 8002c12:	6013      	str	r3, [r2, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*180/M_PI;
 8002c14:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <mahony_computeAngles+0x19c>)
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c24:	4b24      	ldr	r3, [pc, #144]	; (8002cb8 <mahony_computeAngles+0x198>)
 8002c26:	edd3 6a00 	vldr	s13, [r3]
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <mahony_computeAngles+0x1a4>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c34:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <mahony_computeAngles+0x1a0>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c50:	4b1c      	ldr	r3, [pc, #112]	; (8002cc4 <mahony_computeAngles+0x1a4>)
 8002c52:	edd3 6a00 	vldr	s13, [r3]
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <mahony_computeAngles+0x1a4>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c64:	eef0 0a67 	vmov.f32	s1, s15
 8002c68:	eeb0 0a46 	vmov.f32	s0, s12
 8002c6c:	f007 fd8c 	bl	800a788 <atan2f>
 8002c70:	eef0 7a40 	vmov.f32	s15, s0
 8002c74:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002cc8 <mahony_computeAngles+0x1a8>
 8002c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c7c:	ee17 0a90 	vmov	r0, s15
 8002c80:	f7fd fc6a 	bl	8000558 <__aeabi_f2d>
 8002c84:	a30a      	add	r3, pc, #40	; (adr r3, 8002cb0 <mahony_computeAngles+0x190>)
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f7fd fde7 	bl	800085c <__aeabi_ddiv>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	f7fd ff8f 	bl	8000bb8 <__aeabi_d2f>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <mahony_computeAngles+0x1b4>)
 8002c9e:	6013      	str	r3, [r2, #0]
	anglesComputed = 1;
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <mahony_computeAngles+0x1b8>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	f3af 8000 	nop.w
 8002cb0:	54442d18 	.word	0x54442d18
 8002cb4:	400921fb 	.word	0x400921fb
 8002cb8:	20000008 	.word	0x20000008
 8002cbc:	2000032c 	.word	0x2000032c
 8002cc0:	20000330 	.word	0x20000330
 8002cc4:	20000334 	.word	0x20000334
 8002cc8:	43340000 	.word	0x43340000
 8002ccc:	20000348 	.word	0x20000348
 8002cd0:	2000034c 	.word	0x2000034c
 8002cd4:	20000350 	.word	0x20000350
 8002cd8:	20000354 	.word	0x20000354

08002cdc <mahony_getRoll>:

float mahony_getRoll() {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
	if (!anglesComputed) mahony_computeAngles();
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <mahony_getRoll+0x20>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <mahony_getRoll+0x10>
 8002ce8:	f7ff ff1a 	bl	8002b20 <mahony_computeAngles>
	return roll;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <mahony_getRoll+0x24>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	ee07 3a90 	vmov	s15, r3
}
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000354 	.word	0x20000354
 8002d00:	20000348 	.word	0x20000348

08002d04 <mahony_getPitch>:
float mahony_getPitch() {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	if (!anglesComputed) mahony_computeAngles();
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <mahony_getPitch+0x20>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <mahony_getPitch+0x10>
 8002d10:	f7ff ff06 	bl	8002b20 <mahony_computeAngles>
	return pitch;
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <mahony_getPitch+0x24>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	ee07 3a90 	vmov	s15, r3
}
 8002d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000354 	.word	0x20000354
 8002d28:	2000034c 	.word	0x2000034c

08002d2c <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t map(float x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8002d2c:	b490      	push	{r4, r7}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	4603      	mov	r3, r0
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	460b      	mov	r3, r1
 8002d48:	80fb      	strh	r3, [r7, #6]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80bb      	strh	r3, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002d4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d62:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	ee07 3a90 	vmov	s15, r3
 8002d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d74:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d78:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da2:	ee17 3a90 	vmov	r3, s15
 8002da6:	b21b      	sxth	r3, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc90      	pop	{r4, r7}
 8002db0:	4770      	bx	lr
	...

08002db4 <I2CResetBus>:
void blink_stmled();
readings data;
static HAL_StatusTypeDef I2CResetBus(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
    __HAL_I2C_DISABLE(&hi2c1);
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <I2CResetBus+0x7c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <I2CResetBus+0x7c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    /* 1. Set SWRST bit in I2Cx_CR1 register. */
    hi2c1.Instance->CR1 |=  I2C_CR1_SWRST;
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <I2CResetBus+0x7c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <I2CResetBus+0x7c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 8002dd8:	2002      	movs	r0, #2
 8002dda:	f000 ffa1 	bl	8003d20 <HAL_Delay>
    /* 2. Clear SWRST bit in I2Cx_CR1 register. */
    hi2c1.Instance->CR1 &=  ~I2C_CR1_SWRST;
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <I2CResetBus+0x7c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <I2CResetBus+0x7c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dec:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 8002dee:	2002      	movs	r0, #2
 8002df0:	f000 ff96 	bl	8003d20 <HAL_Delay>
    /* 3. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
    MX_I2C1_Init();
 8002df4:	f000 fa4a 	bl	800328c <MX_I2C1_Init>
    __HAL_I2C_ENABLE(&hi2c1);
 8002df8:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <I2CResetBus+0x7c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <I2CResetBus+0x7c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
    HAL_Delay(2);
 8002e08:	2002      	movs	r0, #2
 8002e0a:	f000 ff89 	bl	8003d20 <HAL_Delay>
    hi2c1.ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <I2CResetBus+0x7c>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c1.State = HAL_I2C_STATE_READY;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <I2CResetBus+0x7c>)
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c1.PreviousState = 0;
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <I2CResetBus+0x7c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c1.Mode = HAL_I2C_MODE_NONE;
 8002e22:	4b03      	ldr	r3, [pc, #12]	; (8002e30 <I2CResetBus+0x7c>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000358 	.word	0x20000358
 8002e34:	00000000 	.word	0x00000000

08002e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e3c:	ed2d 8b06 	vpush	{d8-d10}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e44:	f000 fefa 	bl	8003c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e48:	f000 f9b6 	bl	80031b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  I2CResetBus();
 8002e4c:	f7ff ffb2 	bl	8002db4 <I2CResetBus>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e50:	f000 fb98 	bl	8003584 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e54:	f000 fa1a 	bl	800328c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002e58:	f000 fb6a 	bl	8003530 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002e5c:	f000 fa44 	bl	80032e8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002e60:	f000 fa78 	bl	8003354 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e64:	f000 faec 	bl	8003440 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	48bb      	ldr	r0, [pc, #748]	; (8003158 <main+0x320>)
 8002e6c:	f003 fc16 	bl	800669c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002e70:	2100      	movs	r1, #0
 8002e72:	48ba      	ldr	r0, [pc, #744]	; (800315c <main+0x324>)
 8002e74:	f003 fc12 	bl	800669c <HAL_TIM_PWM_Start>
  blink_stmled();
 8002e78:	f000 fc06 	bl	8003688 <blink_stmled>
  //I2C_Scan();
  debug_init(&huart1);
 8002e7c:	48b8      	ldr	r0, [pc, #736]	; (8003160 <main+0x328>)
 8002e7e:	f7fe faab 	bl	80013d8 <debug_init>
  log_s("Start");
 8002e82:	48b8      	ldr	r0, [pc, #736]	; (8003164 <main+0x32c>)
 8002e84:	f7fe fab8 	bl	80013f8 <log_s>
  GY801_init(&hi2c1,&data);
 8002e88:	49b7      	ldr	r1, [pc, #732]	; (8003168 <main+0x330>)
 8002e8a:	48b8      	ldr	r0, [pc, #736]	; (800316c <main+0x334>)
 8002e8c:	f7fe fb36 	bl	80014fc <GY801_init>
  //NRF_init(&hspi1,&data);
  uint8_t cc=0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	71fb      	strb	r3, [r7, #7]

  HAL_Delay(500);
 8002e94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e98:	f000 ff42 	bl	8003d20 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_t, time_t;

  // madgwick
  log_s_p_3("ACCEL",&data.lsm303dlhc.ax,&data.lsm303dlhc.ay,&data.lsm303dlhc.az);
 8002e9c:	4bb4      	ldr	r3, [pc, #720]	; (8003170 <main+0x338>)
 8002e9e:	4ab5      	ldr	r2, [pc, #724]	; (8003174 <main+0x33c>)
 8002ea0:	49b5      	ldr	r1, [pc, #724]	; (8003178 <main+0x340>)
 8002ea2:	48b6      	ldr	r0, [pc, #728]	; (800317c <main+0x344>)
 8002ea4:	f7fe faf8 	bl	8001498 <log_s_p_3>
  log_s_p_3("GYRO",&data.l3g4200d.gx,&data.l3g4200d.gy,&data.l3g4200d.gz);
 8002ea8:	4bb5      	ldr	r3, [pc, #724]	; (8003180 <main+0x348>)
 8002eaa:	4ab6      	ldr	r2, [pc, #728]	; (8003184 <main+0x34c>)
 8002eac:	49b6      	ldr	r1, [pc, #728]	; (8003188 <main+0x350>)
 8002eae:	48b7      	ldr	r0, [pc, #732]	; (800318c <main+0x354>)
 8002eb0:	f7fe faf2 	bl	8001498 <log_s_p_3>
  log_s_p_3("MAG",&data.lsm303dlhc_mag.mx,&data.lsm303dlhc_mag.my,&data.lsm303dlhc_mag.mz);
 8002eb4:	4bb6      	ldr	r3, [pc, #728]	; (8003190 <main+0x358>)
 8002eb6:	4ab7      	ldr	r2, [pc, #732]	; (8003194 <main+0x35c>)
 8002eb8:	49b7      	ldr	r1, [pc, #732]	; (8003198 <main+0x360>)
 8002eba:	48b8      	ldr	r0, [pc, #736]	; (800319c <main+0x364>)
 8002ebc:	f7fe faec 	bl	8001498 <log_s_p_3>
  uint32_t ahrs_t=HAL_GetTick();
 8002ec0:	f000 ff22 	bl	8003d08 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]
  uint16_t hz=0;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	80bb      	strh	r3, [r7, #4]
  uint32_t hz_t=HAL_GetTick();
 8002eca:	f000 ff1d 	bl	8003d08 <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]
  log_s_p("HZ",&hz);
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	48b2      	ldr	r0, [pc, #712]	; (80031a0 <main+0x368>)
 8002ed6:	f7fe fafb 	bl	80014d0 <log_s_p>
  mahony_print_ptr();
 8002eda:	f7fe ff1f 	bl	8001d1c <mahony_print_ptr>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GY801_update_data();
 8002ede:	f7fe fbdb 	bl	8001698 <GY801_update_data>
	  hz+=1;
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	80bb      	strh	r3, [r7, #4]
	  mahony_update((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625,(float)data.lsm303dlhc_mag.mx/450,(float)data.lsm303dlhc_mag.my/450,(float)data.lsm303dlhc_mag.mz/400);
 8002eea:	f000 ff0d 	bl	8003d08 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	ee17 0a90 	vmov	r0, s15
 8002f00:	f7fd fb2a 	bl	8000558 <__aeabi_f2d>
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	4ba6      	ldr	r3, [pc, #664]	; (80031a4 <main+0x36c>)
 8002f0a:	f7fd fca7 	bl	800085c <__aeabi_ddiv>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f7fd fe4f 	bl	8000bb8 <__aeabi_d2f>
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <main+0x330>)
 8002f1e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2a:	ee17 0a90 	vmov	r0, s15
 8002f2e:	f7fd fb13 	bl	8000558 <__aeabi_f2d>
 8002f32:	a385      	add	r3, pc, #532	; (adr r3, 8003148 <main+0x310>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f7fd fb66 	bl	8000608 <__aeabi_dmul>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	4b97      	ldr	r3, [pc, #604]	; (80031a8 <main+0x370>)
 8002f4a:	f7fd fc87 	bl	800085c <__aeabi_ddiv>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	a37e      	add	r3, pc, #504	; (adr r3, 8003150 <main+0x318>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fc7e 	bl	800085c <__aeabi_ddiv>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4610      	mov	r0, r2
 8002f66:	4619      	mov	r1, r3
 8002f68:	f7fd fe26 	bl	8000bb8 <__aeabi_d2f>
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <main+0x330>)
 8002f70:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002f74:	ee07 3a90 	vmov	s15, r3
 8002f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7c:	ee17 0a90 	vmov	r0, s15
 8002f80:	f7fd faea 	bl	8000558 <__aeabi_f2d>
 8002f84:	a370      	add	r3, pc, #448	; (adr r3, 8003148 <main+0x310>)
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f7fd fb3d 	bl	8000608 <__aeabi_dmul>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4610      	mov	r0, r2
 8002f94:	4619      	mov	r1, r3
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	4b83      	ldr	r3, [pc, #524]	; (80031a8 <main+0x370>)
 8002f9c:	f7fd fc5e 	bl	800085c <__aeabi_ddiv>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	a369      	add	r3, pc, #420	; (adr r3, 8003150 <main+0x318>)
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f7fd fc55 	bl	800085c <__aeabi_ddiv>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f7fd fdfd 	bl	8000bb8 <__aeabi_d2f>
 8002fbe:	4606      	mov	r6, r0
 8002fc0:	4b69      	ldr	r3, [pc, #420]	; (8003168 <main+0x330>)
 8002fc2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fce:	ee17 0a90 	vmov	r0, s15
 8002fd2:	f7fd fac1 	bl	8000558 <__aeabi_f2d>
 8002fd6:	a35c      	add	r3, pc, #368	; (adr r3, 8003148 <main+0x310>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	f7fd fb14 	bl	8000608 <__aeabi_dmul>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	4b6e      	ldr	r3, [pc, #440]	; (80031a8 <main+0x370>)
 8002fee:	f7fd fc35 	bl	800085c <__aeabi_ddiv>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	a355      	add	r3, pc, #340	; (adr r3, 8003150 <main+0x318>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fc2c 	bl	800085c <__aeabi_ddiv>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fdd4 	bl	8000bb8 <__aeabi_d2f>
 8003010:	4680      	mov	r8, r0
 8003012:	4b55      	ldr	r3, [pc, #340]	; (8003168 <main+0x330>)
 8003014:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003020:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80031ac <main+0x374>
 8003024:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003028:	4b4f      	ldr	r3, [pc, #316]	; (8003168 <main+0x330>)
 800302a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003036:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80031ac <main+0x374>
 800303a:	ee67 8a87 	vmul.f32	s17, s15, s14
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <main+0x330>)
 8003040:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80031ac <main+0x374>
 8003050:	ee27 9a87 	vmul.f32	s18, s15, s14
 8003054:	4b44      	ldr	r3, [pc, #272]	; (8003168 <main+0x330>)
 8003056:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f7fd fdab 	bl	8000bb8 <__aeabi_d2f>
 8003062:	ee07 0a10 	vmov	s14, r0
 8003066:	eddf 7a52 	vldr	s15, [pc, #328]	; 80031b0 <main+0x378>
 800306a:	eec7 9a27 	vdiv.f32	s19, s14, s15
 800306e:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <main+0x330>)
 8003070:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003074:	4610      	mov	r0, r2
 8003076:	4619      	mov	r1, r3
 8003078:	f7fd fd9e 	bl	8000bb8 <__aeabi_d2f>
 800307c:	ee07 0a10 	vmov	s14, r0
 8003080:	eddf 7a4b 	vldr	s15, [pc, #300]	; 80031b0 <main+0x378>
 8003084:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8003088:	4b37      	ldr	r3, [pc, #220]	; (8003168 <main+0x330>)
 800308a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fd91 	bl	8000bb8 <__aeabi_d2f>
 8003096:	ee06 0a90 	vmov	s13, r0
 800309a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80031b4 <main+0x37c>
 800309e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030a2:	eef0 4a67 	vmov.f32	s9, s15
 80030a6:	eeb0 4a4a 	vmov.f32	s8, s20
 80030aa:	eef0 3a69 	vmov.f32	s7, s19
 80030ae:	eeb0 3a49 	vmov.f32	s6, s18
 80030b2:	eef0 2a68 	vmov.f32	s5, s17
 80030b6:	eeb0 2a48 	vmov.f32	s4, s16
 80030ba:	ee01 8a90 	vmov	s3, r8
 80030be:	ee01 6a10 	vmov	s2, r6
 80030c2:	ee00 5a90 	vmov	s1, r5
 80030c6:	ee00 4a10 	vmov	s0, r4
 80030ca:	f7fe fe39 	bl	8001d40 <mahony_update>
	  ahrs_t=HAL_GetTick();
 80030ce:	f000 fe1b 	bl	8003d08 <HAL_GetTick>
 80030d2:	60f8      	str	r0, [r7, #12]
	  htim2.Instance->CCR1=map(mahony_getPitch(),-90,70,25,125);
 80030d4:	f7ff fe16 	bl	8002d04 <mahony_getPitch>
 80030d8:	eef0 7a40 	vmov.f32	s15, s0
 80030dc:	237d      	movs	r3, #125	; 0x7d
 80030de:	2219      	movs	r2, #25
 80030e0:	2146      	movs	r1, #70	; 0x46
 80030e2:	f06f 0059 	mvn.w	r0, #89	; 0x59
 80030e6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ea:	f7ff fe1f 	bl	8002d2c <map>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b19      	ldr	r3, [pc, #100]	; (8003158 <main+0x320>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance->CCR1=map(mahony_getRoll(),-80,90,125,25);
 80030f8:	f7ff fdf0 	bl	8002cdc <mahony_getRoll>
 80030fc:	eef0 7a40 	vmov.f32	s15, s0
 8003100:	2319      	movs	r3, #25
 8003102:	227d      	movs	r2, #125	; 0x7d
 8003104:	215a      	movs	r1, #90	; 0x5a
 8003106:	f06f 004f 	mvn.w	r0, #79	; 0x4f
 800310a:	eeb0 0a67 	vmov.f32	s0, s15
 800310e:	f7ff fe0d 	bl	8002d2c <map>
 8003112:	4603      	mov	r3, r0
 8003114:	461a      	mov	r2, r3
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <main+0x324>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_GetTick()-hz_t>1000){
 800311c:	f000 fdf4 	bl	8003d08 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800312a:	f67f aed8 	bls.w	8002ede <main+0xa6>
		  hz_t=HAL_GetTick();
 800312e:	f000 fdeb 	bl	8003d08 <HAL_GetTick>
 8003132:	60b8      	str	r0, [r7, #8]
		  log_s_int("HZ",hz);
 8003134:	88bb      	ldrh	r3, [r7, #4]
 8003136:	4619      	mov	r1, r3
 8003138:	4819      	ldr	r0, [pc, #100]	; (80031a0 <main+0x368>)
 800313a:	f7fe f997 	bl	800146c <log_s_int>
		  hz=0;
 800313e:	2300      	movs	r3, #0
 8003140:	80bb      	strh	r3, [r7, #4]
	  GY801_update_data();
 8003142:	e6cc      	b.n	8002ede <main+0xa6>
 8003144:	f3af 8000 	nop.w
 8003148:	54442d18 	.word	0x54442d18
 800314c:	400921fb 	.word	0x400921fb
 8003150:	00000000 	.word	0x00000000
 8003154:	40606000 	.word	0x40606000
 8003158:	20000404 	.word	0x20000404
 800315c:	2000044c 	.word	0x2000044c
 8003160:	20000494 	.word	0x20000494
 8003164:	0800ade0 	.word	0x0800ade0
 8003168:	200004d8 	.word	0x200004d8
 800316c:	20000358 	.word	0x20000358
 8003170:	200004ec 	.word	0x200004ec
 8003174:	200004ea 	.word	0x200004ea
 8003178:	200004e8 	.word	0x200004e8
 800317c:	0800ade8 	.word	0x0800ade8
 8003180:	200004f4 	.word	0x200004f4
 8003184:	200004f2 	.word	0x200004f2
 8003188:	200004f0 	.word	0x200004f0
 800318c:	0800adf0 	.word	0x0800adf0
 8003190:	20000510 	.word	0x20000510
 8003194:	20000508 	.word	0x20000508
 8003198:	20000500 	.word	0x20000500
 800319c:	0800adf8 	.word	0x0800adf8
 80031a0:	0800adfc 	.word	0x0800adfc
 80031a4:	408f4000 	.word	0x408f4000
 80031a8:	40668000 	.word	0x40668000
 80031ac:	41ac8000 	.word	0x41ac8000
 80031b0:	43e10000 	.word	0x43e10000
 80031b4:	43c80000 	.word	0x43c80000

080031b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b094      	sub	sp, #80	; 0x50
 80031bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031be:	f107 0320 	add.w	r3, r7, #32
 80031c2:	2230      	movs	r2, #48	; 0x30
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 fbc8 	bl	800795c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031cc:	f107 030c 	add.w	r3, r7, #12
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <SystemClock_Config+0xcc>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <SystemClock_Config+0xcc>)
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <SystemClock_Config+0xcc>)
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80031f8:	2300      	movs	r3, #0
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <SystemClock_Config+0xd0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003204:	4a20      	ldr	r2, [pc, #128]	; (8003288 <SystemClock_Config+0xd0>)
 8003206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <SystemClock_Config+0xd0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003218:	2302      	movs	r3, #2
 800321a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800321c:	2301      	movs	r3, #1
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003220:	2310      	movs	r3, #16
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003224:	2302      	movs	r3, #2
 8003226:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003228:	2300      	movs	r3, #0
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800322c:	2308      	movs	r3, #8
 800322e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003230:	2354      	movs	r3, #84	; 0x54
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003234:	2302      	movs	r3, #2
 8003236:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003238:	2304      	movs	r3, #4
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800323c:	f107 0320 	add.w	r3, r7, #32
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fc63 	bl	8005b0c <HAL_RCC_OscConfig>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800324c:	f000 fa2e 	bl	80036ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003250:	230f      	movs	r3, #15
 8003252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003254:	2302      	movs	r3, #2
 8003256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800325c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	2102      	movs	r1, #2
 800326c:	4618      	mov	r0, r3
 800326e:	f002 fec5 	bl	8005ffc <HAL_RCC_ClockConfig>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003278:	f000 fa18 	bl	80036ac <Error_Handler>
  }
}
 800327c:	bf00      	nop
 800327e:	3750      	adds	r7, #80	; 0x50
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40023800 	.word	0x40023800
 8003288:	40007000 	.word	0x40007000

0800328c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003290:	4b12      	ldr	r3, [pc, #72]	; (80032dc <MX_I2C1_Init+0x50>)
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <MX_I2C1_Init+0x54>)
 8003294:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <MX_I2C1_Init+0x50>)
 8003298:	4a12      	ldr	r2, [pc, #72]	; (80032e4 <MX_I2C1_Init+0x58>)
 800329a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800329c:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <MX_I2C1_Init+0x50>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032a2:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <MX_I2C1_Init+0x50>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <MX_I2C1_Init+0x50>)
 80032aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <MX_I2C1_Init+0x50>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032b6:	4b09      	ldr	r3, [pc, #36]	; (80032dc <MX_I2C1_Init+0x50>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <MX_I2C1_Init+0x50>)
 80032be:	2200      	movs	r2, #0
 80032c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <MX_I2C1_Init+0x50>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <MX_I2C1_Init+0x50>)
 80032ca:	f000 ffeb 	bl	80042a4 <HAL_I2C_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032d4:	f000 f9ea 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032d8:	bf00      	nop
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	20000358 	.word	0x20000358
 80032e0:	40005400 	.word	0x40005400
 80032e4:	00061a80 	.word	0x00061a80

080032e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032ec:	4b17      	ldr	r3, [pc, #92]	; (800334c <MX_SPI1_Init+0x64>)
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <MX_SPI1_Init+0x68>)
 80032f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032f2:	4b16      	ldr	r3, [pc, #88]	; (800334c <MX_SPI1_Init+0x64>)
 80032f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80032f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <MX_SPI1_Init+0x64>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003300:	4b12      	ldr	r3, [pc, #72]	; (800334c <MX_SPI1_Init+0x64>)
 8003302:	2200      	movs	r2, #0
 8003304:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003306:	4b11      	ldr	r3, [pc, #68]	; (800334c <MX_SPI1_Init+0x64>)
 8003308:	2200      	movs	r2, #0
 800330a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <MX_SPI1_Init+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003312:	4b0e      	ldr	r3, [pc, #56]	; (800334c <MX_SPI1_Init+0x64>)
 8003314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003318:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <MX_SPI1_Init+0x64>)
 800331c:	2200      	movs	r2, #0
 800331e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <MX_SPI1_Init+0x64>)
 8003322:	2200      	movs	r2, #0
 8003324:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003326:	4b09      	ldr	r3, [pc, #36]	; (800334c <MX_SPI1_Init+0x64>)
 8003328:	2200      	movs	r2, #0
 800332a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <MX_SPI1_Init+0x64>)
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003332:	4b06      	ldr	r3, [pc, #24]	; (800334c <MX_SPI1_Init+0x64>)
 8003334:	220a      	movs	r2, #10
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003338:	4804      	ldr	r0, [pc, #16]	; (800334c <MX_SPI1_Init+0x64>)
 800333a:	f003 f87d 	bl	8006438 <HAL_SPI_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003344:	f000 f9b2 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}
 800334c:	200003ac 	.word	0x200003ac
 8003350:	40013000 	.word	0x40013000

08003354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	605a      	str	r2, [r3, #4]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003368:	f107 0320 	add.w	r3, r7, #32
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	615a      	str	r2, [r3, #20]
 8003382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003384:	4b2d      	ldr	r3, [pc, #180]	; (800343c <MX_TIM2_Init+0xe8>)
 8003386:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800338a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800338c:	4b2b      	ldr	r3, [pc, #172]	; (800343c <MX_TIM2_Init+0xe8>)
 800338e:	f240 628f 	movw	r2, #1679	; 0x68f
 8003392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003394:	4b29      	ldr	r3, [pc, #164]	; (800343c <MX_TIM2_Init+0xe8>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800339a:	4b28      	ldr	r3, [pc, #160]	; (800343c <MX_TIM2_Init+0xe8>)
 800339c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <MX_TIM2_Init+0xe8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <MX_TIM2_Init+0xe8>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033ae:	4823      	ldr	r0, [pc, #140]	; (800343c <MX_TIM2_Init+0xe8>)
 80033b0:	f003 f8cb 	bl	800654a <HAL_TIM_Base_Init>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80033ba:	f000 f977 	bl	80036ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033c8:	4619      	mov	r1, r3
 80033ca:	481c      	ldr	r0, [pc, #112]	; (800343c <MX_TIM2_Init+0xe8>)
 80033cc:	f003 fad8 	bl	8006980 <HAL_TIM_ConfigClockSource>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80033d6:	f000 f969 	bl	80036ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033da:	4818      	ldr	r0, [pc, #96]	; (800343c <MX_TIM2_Init+0xe8>)
 80033dc:	f003 f904 	bl	80065e8 <HAL_TIM_PWM_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80033e6:	f000 f961 	bl	80036ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033f2:	f107 0320 	add.w	r3, r7, #32
 80033f6:	4619      	mov	r1, r3
 80033f8:	4810      	ldr	r0, [pc, #64]	; (800343c <MX_TIM2_Init+0xe8>)
 80033fa:	f003 fe55 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003404:	f000 f952 	bl	80036ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003408:	2360      	movs	r3, #96	; 0x60
 800340a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	2200      	movs	r2, #0
 800341c:	4619      	mov	r1, r3
 800341e:	4807      	ldr	r0, [pc, #28]	; (800343c <MX_TIM2_Init+0xe8>)
 8003420:	f003 f9ec 	bl	80067fc <HAL_TIM_PWM_ConfigChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800342a:	f000 f93f 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800342e:	4803      	ldr	r0, [pc, #12]	; (800343c <MX_TIM2_Init+0xe8>)
 8003430:	f000 fa30 	bl	8003894 <HAL_TIM_MspPostInit>

}
 8003434:	bf00      	nop
 8003436:	3738      	adds	r7, #56	; 0x38
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000404 	.word	0x20000404

08003440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	; 0x38
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003454:	f107 0320 	add.w	r3, r7, #32
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	60da      	str	r2, [r3, #12]
 800346a:	611a      	str	r2, [r3, #16]
 800346c:	615a      	str	r2, [r3, #20]
 800346e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <MX_TIM3_Init+0xe8>)
 8003472:	4a2e      	ldr	r2, [pc, #184]	; (800352c <MX_TIM3_Init+0xec>)
 8003474:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <MX_TIM3_Init+0xe8>)
 8003478:	f240 628f 	movw	r2, #1679	; 0x68f
 800347c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <MX_TIM3_Init+0xe8>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <MX_TIM3_Init+0xe8>)
 8003486:	f240 32e7 	movw	r2, #999	; 0x3e7
 800348a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <MX_TIM3_Init+0xe8>)
 800348e:	2200      	movs	r2, #0
 8003490:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003492:	4b25      	ldr	r3, [pc, #148]	; (8003528 <MX_TIM3_Init+0xe8>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003498:	4823      	ldr	r0, [pc, #140]	; (8003528 <MX_TIM3_Init+0xe8>)
 800349a:	f003 f856 	bl	800654a <HAL_TIM_Base_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80034a4:	f000 f902 	bl	80036ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b2:	4619      	mov	r1, r3
 80034b4:	481c      	ldr	r0, [pc, #112]	; (8003528 <MX_TIM3_Init+0xe8>)
 80034b6:	f003 fa63 	bl	8006980 <HAL_TIM_ConfigClockSource>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80034c0:	f000 f8f4 	bl	80036ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034c4:	4818      	ldr	r0, [pc, #96]	; (8003528 <MX_TIM3_Init+0xe8>)
 80034c6:	f003 f88f 	bl	80065e8 <HAL_TIM_PWM_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80034d0:	f000 f8ec 	bl	80036ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034dc:	f107 0320 	add.w	r3, r7, #32
 80034e0:	4619      	mov	r1, r3
 80034e2:	4811      	ldr	r0, [pc, #68]	; (8003528 <MX_TIM3_Init+0xe8>)
 80034e4:	f003 fde0 	bl	80070a8 <HAL_TIMEx_MasterConfigSynchronization>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80034ee:	f000 f8dd 	bl	80036ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f2:	2360      	movs	r3, #96	; 0x60
 80034f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	2200      	movs	r2, #0
 8003506:	4619      	mov	r1, r3
 8003508:	4807      	ldr	r0, [pc, #28]	; (8003528 <MX_TIM3_Init+0xe8>)
 800350a:	f003 f977 	bl	80067fc <HAL_TIM_PWM_ConfigChannel>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003514:	f000 f8ca 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003518:	4803      	ldr	r0, [pc, #12]	; (8003528 <MX_TIM3_Init+0xe8>)
 800351a:	f000 f9bb 	bl	8003894 <HAL_TIM_MspPostInit>

}
 800351e:	bf00      	nop
 8003520:	3738      	adds	r7, #56	; 0x38
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	2000044c 	.word	0x2000044c
 800352c:	40000400 	.word	0x40000400

08003530 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003536:	4a12      	ldr	r2, [pc, #72]	; (8003580 <MX_USART1_UART_Init+0x50>)
 8003538:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <MX_USART1_UART_Init+0x4c>)
 800353c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003540:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <MX_USART1_UART_Init+0x4c>)
 800354a:	2200      	movs	r2, #0
 800354c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800354e:	4b0b      	ldr	r3, [pc, #44]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003556:	220c      	movs	r2, #12
 8003558:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355a:	4b08      	ldr	r3, [pc, #32]	; (800357c <MX_USART1_UART_Init+0x4c>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003562:	2200      	movs	r2, #0
 8003564:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <MX_USART1_UART_Init+0x4c>)
 8003568:	f003 fe0c 	bl	8007184 <HAL_UART_Init>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003572:	f000 f89b 	bl	80036ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000494 	.word	0x20000494
 8003580:	40011000 	.word	0x40011000

08003584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358a:	f107 0314 	add.w	r3, r7, #20
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	4b36      	ldr	r3, [pc, #216]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4a35      	ldr	r2, [pc, #212]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035a4:	f043 0304 	orr.w	r3, r3, #4
 80035a8:	6313      	str	r3, [r2, #48]	; 0x30
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b2f      	ldr	r3, [pc, #188]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a2e      	ldr	r2, [pc, #184]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	4b28      	ldr	r3, [pc, #160]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a27      	ldr	r2, [pc, #156]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b25      	ldr	r3, [pc, #148]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	4b21      	ldr	r3, [pc, #132]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	4a20      	ldr	r2, [pc, #128]	; (8003678 <MX_GPIO_Init+0xf4>)
 80035f8:	f043 0302 	orr.w	r3, r3, #2
 80035fc:	6313      	str	r3, [r2, #48]	; 0x30
 80035fe:	4b1e      	ldr	r3, [pc, #120]	; (8003678 <MX_GPIO_Init+0xf4>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 800360a:	2200      	movs	r2, #0
 800360c:	2111      	movs	r1, #17
 800360e:	481b      	ldr	r0, [pc, #108]	; (800367c <MX_GPIO_Init+0xf8>)
 8003610:	f000 fe14 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003614:	2200      	movs	r2, #0
 8003616:	2110      	movs	r1, #16
 8003618:	4819      	ldr	r0, [pc, #100]	; (8003680 <MX_GPIO_Init+0xfc>)
 800361a:	f000 fe0f 	bl	800423c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800361e:	2311      	movs	r3, #17
 8003620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003622:	2301      	movs	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362a:	2300      	movs	r3, #0
 800362c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	4619      	mov	r1, r3
 8003634:	4811      	ldr	r0, [pc, #68]	; (800367c <MX_GPIO_Init+0xf8>)
 8003636:	f000 fc7d 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800363a:	2310      	movs	r3, #16
 800363c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800363e:	2301      	movs	r3, #1
 8003640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	480b      	ldr	r0, [pc, #44]	; (8003680 <MX_GPIO_Init+0xfc>)
 8003652:	f000 fc6f 	bl	8003f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800365a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4619      	mov	r1, r3
 800366a:	4806      	ldr	r0, [pc, #24]	; (8003684 <MX_GPIO_Init+0x100>)
 800366c:	f000 fc62 	bl	8003f34 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);*/
/* USER CODE END MX_GPIO_Init_2 */
}
 8003670:	bf00      	nop
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	40020800 	.word	0x40020800
 8003680:	40020000 	.word	0x40020000
 8003684:	40020400 	.word	0x40020400

08003688 <blink_stmled>:

/* USER CODE BEGIN 4 */
void blink_stmled(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800368c:	2101      	movs	r1, #1
 800368e:	4806      	ldr	r0, [pc, #24]	; (80036a8 <blink_stmled+0x20>)
 8003690:	f000 fded 	bl	800426e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003694:	2064      	movs	r0, #100	; 0x64
 8003696:	f000 fb43 	bl	8003d20 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800369a:	2101      	movs	r1, #1
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <blink_stmled+0x20>)
 800369e:	f000 fde6 	bl	800426e <HAL_GPIO_TogglePin>
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40020800 	.word	0x40020800

080036ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036b0:	b672      	cpsid	i
}
 80036b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b4:	e7fe      	b.n	80036b4 <Error_Handler+0x8>
	...

080036b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_MspInit+0x4c>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c6:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <HAL_MspInit+0x4c>)
 80036c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036cc:	6453      	str	r3, [r2, #68]	; 0x44
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_MspInit+0x4c>)
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <HAL_MspInit+0x4c>)
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	4a08      	ldr	r2, [pc, #32]	; (8003704 <HAL_MspInit+0x4c>)
 80036e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_MspInit+0x4c>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
 800371e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_I2C_MspInit+0x84>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d12b      	bne.n	8003782 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	4b18      	ldr	r3, [pc, #96]	; (8003790 <HAL_I2C_MspInit+0x88>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a17      	ldr	r2, [pc, #92]	; (8003790 <HAL_I2C_MspInit+0x88>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_I2C_MspInit+0x88>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003746:	23c0      	movs	r3, #192	; 0xc0
 8003748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800374a:	2312      	movs	r3, #18
 800374c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003752:	2303      	movs	r3, #3
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003756:	2304      	movs	r3, #4
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	4619      	mov	r1, r3
 8003760:	480c      	ldr	r0, [pc, #48]	; (8003794 <HAL_I2C_MspInit+0x8c>)
 8003762:	f000 fbe7 	bl	8003f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_I2C_MspInit+0x88>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <HAL_I2C_MspInit+0x88>)
 8003770:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_I2C_MspInit+0x88>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40005400 	.word	0x40005400
 8003790:	40023800 	.word	0x40023800
 8003794:	40020400 	.word	0x40020400

08003798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a0:	f107 0314 	add.w	r3, r7, #20
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	609a      	str	r2, [r3, #8]
 80037ac:	60da      	str	r2, [r3, #12]
 80037ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_SPI_MspInit+0x84>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d12b      	bne.n	8003812 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_SPI_MspInit+0x88>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a17      	ldr	r2, [pc, #92]	; (8003820 <HAL_SPI_MspInit+0x88>)
 80037c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_SPI_MspInit+0x88>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <HAL_SPI_MspInit+0x88>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_SPI_MspInit+0x88>)
 80037e0:	f043 0301 	orr.w	r3, r3, #1
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <HAL_SPI_MspInit+0x88>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80037f2:	23e0      	movs	r3, #224	; 0xe0
 80037f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f6:	2302      	movs	r3, #2
 80037f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fe:	2303      	movs	r3, #3
 8003800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003802:	2305      	movs	r3, #5
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	f107 0314 	add.w	r3, r7, #20
 800380a:	4619      	mov	r1, r3
 800380c:	4805      	ldr	r0, [pc, #20]	; (8003824 <HAL_SPI_MspInit+0x8c>)
 800380e:	f000 fb91 	bl	8003f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003812:	bf00      	nop
 8003814:	3728      	adds	r7, #40	; 0x28
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40013000 	.word	0x40013000
 8003820:	40023800 	.word	0x40023800
 8003824:	40020000 	.word	0x40020000

08003828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d10e      	bne.n	8003858 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_TIM_Base_MspInit+0x64>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_TIM_Base_MspInit+0x64>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b10      	ldr	r3, [pc, #64]	; (800388c <HAL_TIM_Base_MspInit+0x64>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003856:	e012      	b.n	800387e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0c      	ldr	r2, [pc, #48]	; (8003890 <HAL_TIM_Base_MspInit+0x68>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10d      	bne.n	800387e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_TIM_Base_MspInit+0x64>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a08      	ldr	r2, [pc, #32]	; (800388c <HAL_TIM_Base_MspInit+0x64>)
 800386c:	f043 0302 	orr.w	r3, r3, #2
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_TIM_Base_MspInit+0x64>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	40000400 	.word	0x40000400

08003894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
 80038aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d11f      	bne.n	80038f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_TIM_MspPostInit+0xb0>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a21      	ldr	r2, [pc, #132]	; (8003944 <HAL_TIM_MspPostInit+0xb0>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <HAL_TIM_MspPostInit+0xb0>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d8:	2302      	movs	r3, #2
 80038da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038e4:	2301      	movs	r3, #1
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4619      	mov	r1, r3
 80038ee:	4816      	ldr	r0, [pc, #88]	; (8003948 <HAL_TIM_MspPostInit+0xb4>)
 80038f0:	f000 fb20 	bl	8003f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80038f4:	e022      	b.n	800393c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a14      	ldr	r2, [pc, #80]	; (800394c <HAL_TIM_MspPostInit+0xb8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d11d      	bne.n	800393c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_TIM_MspPostInit+0xb0>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_TIM_MspPostInit+0xb0>)
 800390a:	f043 0304 	orr.w	r3, r3, #4
 800390e:	6313      	str	r3, [r2, #48]	; 0x30
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_TIM_MspPostInit+0xb0>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800391c:	2340      	movs	r3, #64	; 0x40
 800391e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003920:	2302      	movs	r3, #2
 8003922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800392c:	2302      	movs	r3, #2
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4619      	mov	r1, r3
 8003936:	4806      	ldr	r0, [pc, #24]	; (8003950 <HAL_TIM_MspPostInit+0xbc>)
 8003938:	f000 fafc 	bl	8003f34 <HAL_GPIO_Init>
}
 800393c:	bf00      	nop
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40023800 	.word	0x40023800
 8003948:	40020000 	.word	0x40020000
 800394c:	40000400 	.word	0x40000400
 8003950:	40020800 	.word	0x40020800

08003954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_UART_MspInit+0x84>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d12c      	bne.n	80039d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	4b18      	ldr	r3, [pc, #96]	; (80039dc <HAL_UART_MspInit+0x88>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	4a17      	ldr	r2, [pc, #92]	; (80039dc <HAL_UART_MspInit+0x88>)
 8003980:	f043 0310 	orr.w	r3, r3, #16
 8003984:	6453      	str	r3, [r2, #68]	; 0x44
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <HAL_UART_MspInit+0x88>)
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b11      	ldr	r3, [pc, #68]	; (80039dc <HAL_UART_MspInit+0x88>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <HAL_UART_MspInit+0x88>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <HAL_UART_MspInit+0x88>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b4:	2302      	movs	r3, #2
 80039b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039bc:	2303      	movs	r3, #3
 80039be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039c0:	2307      	movs	r3, #7
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <HAL_UART_MspInit+0x8c>)
 80039cc:	f000 fab2 	bl	8003f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039d0:	bf00      	nop
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40011000 	.word	0x40011000
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40020000 	.word	0x40020000

080039e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039e8:	e7fe      	b.n	80039e8 <NMI_Handler+0x4>

080039ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ee:	e7fe      	b.n	80039ee <HardFault_Handler+0x4>

080039f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f4:	e7fe      	b.n	80039f4 <MemManage_Handler+0x4>

080039f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039fa:	e7fe      	b.n	80039fa <BusFault_Handler+0x4>

080039fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <UsageFault_Handler+0x4>

08003a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a30:	f000 f956 	bl	8003ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
	return 1;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <_kill>:

int _kill(int pid, int sig)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a52:	f003 ff59 	bl	8007908 <__errno>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2216      	movs	r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <_exit>:

void _exit (int status)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ffe7 	bl	8003a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a7a:	e7fe      	b.n	8003a7a <_exit+0x12>

08003a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	e00a      	b.n	8003aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a8e:	f3af 8000 	nop.w
 8003a92:	4601      	mov	r1, r0
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	60ba      	str	r2, [r7, #8]
 8003a9a:	b2ca      	uxtb	r2, r1
 8003a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	dbf0      	blt.n	8003a8e <_read+0x12>
	}

return len;
 8003aac:	687b      	ldr	r3, [r7, #4]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e009      	b.n	8003adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	60ba      	str	r2, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	dbf1      	blt.n	8003ac8 <_write+0x12>
	}
	return len;
 8003ae4:	687b      	ldr	r3, [r7, #4]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <_close>:

int _close(int file)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
	return -1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b16:	605a      	str	r2, [r3, #4]
	return 0;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <_isatty>:

int _isatty(int file)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	return 0;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <_sbrk+0x5c>)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_sbrk+0x60>)
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <_sbrk+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_sbrk+0x64>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <_sbrk+0x68>)
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b88:	f003 febe 	bl	8007908 <__errno>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	220c      	movs	r2, #12
 8003b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b96:	e009      	b.n	8003bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <_sbrk+0x64>)
 8003ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20018000 	.word	0x20018000
 8003bb8:	00000400 	.word	0x00000400
 8003bbc:	20000518 	.word	0x20000518
 8003bc0:	20000530 	.word	0x20000530

08003bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <SystemInit+0x20>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <SystemInit+0x20>)
 8003bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bec:	480d      	ldr	r0, [pc, #52]	; (8003c24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bee:	490e      	ldr	r1, [pc, #56]	; (8003c28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	; (8003c2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf4:	e002      	b.n	8003bfc <LoopCopyDataInit>

08003bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfa:	3304      	adds	r3, #4

08003bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c00:	d3f9      	bcc.n	8003bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c04:	4c0b      	ldr	r4, [pc, #44]	; (8003c34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c08:	e001      	b.n	8003c0e <LoopFillZerobss>

08003c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c0c:	3204      	adds	r2, #4

08003c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c10:	d3fb      	bcc.n	8003c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c12:	f7ff ffd7 	bl	8003bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c16:	f003 fe7d 	bl	8007914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1a:	f7ff f90d 	bl	8002e38 <main>
  bx  lr    
 8003c1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c28:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003c2c:	0800b23c 	.word	0x0800b23c
  ldr r2, =_sbss
 8003c30:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003c34:	20000530 	.word	0x20000530

08003c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c38:	e7fe      	b.n	8003c38 <ADC_IRQHandler>
	...

08003c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0d      	ldr	r2, [pc, #52]	; (8003c7c <HAL_Init+0x40>)
 8003c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_Init+0x40>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_Init+0x40>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	; (8003c7c <HAL_Init+0x40>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c64:	2003      	movs	r0, #3
 8003c66:	f000 f931 	bl	8003ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6a:	200f      	movs	r0, #15
 8003c6c:	f000 f808 	bl	8003c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c70:	f7ff fd22 	bl	80036b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00

08003c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_InitTick+0x54>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x58>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f93b 	bl	8003f1a <HAL_SYSTICK_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00e      	b.n	8003ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d80a      	bhi.n	8003cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cbc:	f000 f911 	bl	8003ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc0:	4a06      	ldr	r2, [pc, #24]	; (8003cdc <HAL_InitTick+0x5c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	2000000c 	.word	0x2000000c
 8003cd8:	20000014 	.word	0x20000014
 8003cdc:	20000010 	.word	0x20000010

08003ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_IncTick+0x20>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_IncTick+0x24>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000014 	.word	0x20000014
 8003d04:	2000051c 	.word	0x2000051c

08003d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_GetTick+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	2000051c 	.word	0x2000051c

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff ffee 	bl	8003d08 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_Delay+0x44>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000014 	.word	0x20000014

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	db0a      	blt.n	8003df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	490c      	ldr	r1, [pc, #48]	; (8003e18 <__NVIC_SetPriority+0x4c>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	0112      	lsls	r2, r2, #4
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	440b      	add	r3, r1
 8003df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003df4:	e00a      	b.n	8003e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4908      	ldr	r1, [pc, #32]	; (8003e1c <__NVIC_SetPriority+0x50>)
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	3b04      	subs	r3, #4
 8003e04:	0112      	lsls	r2, r2, #4
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	440b      	add	r3, r1
 8003e0a:	761a      	strb	r2, [r3, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	e000e100 	.word	0xe000e100
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b089      	sub	sp, #36	; 0x24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	bf28      	it	cs
 8003e3e:	2304      	movcs	r3, #4
 8003e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3304      	adds	r3, #4
 8003e46:	2b06      	cmp	r3, #6
 8003e48:	d902      	bls.n	8003e50 <NVIC_EncodePriority+0x30>
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	3b03      	subs	r3, #3
 8003e4e:	e000      	b.n	8003e52 <NVIC_EncodePriority+0x32>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	401a      	ands	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	43d9      	mvns	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e78:	4313      	orrs	r3, r2
         );
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3724      	adds	r7, #36	; 0x24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e98:	d301      	bcc.n	8003e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00f      	b.n	8003ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ec8 <SysTick_Config+0x40>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ea6:	210f      	movs	r1, #15
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003eac:	f7ff ff8e 	bl	8003dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <SysTick_Config+0x40>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <SysTick_Config+0x40>)
 8003eb8:	2207      	movs	r2, #7
 8003eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	e000e010 	.word	0xe000e010

08003ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff47 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	4603      	mov	r3, r0
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ef4:	f7ff ff5c 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	6978      	ldr	r0, [r7, #20]
 8003f00:	f7ff ff8e 	bl	8003e20 <NVIC_EncodePriority>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7ff ff5d 	bl	8003dcc <__NVIC_SetPriority>
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff ffb0 	bl	8003e88 <SysTick_Config>
 8003f28:	4603      	mov	r3, r0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61fb      	str	r3, [r7, #28]
 8003f4e:	e159      	b.n	8004204 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f50:	2201      	movs	r2, #1
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4013      	ands	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	f040 8148 	bne.w	80041fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d005      	beq.n	8003f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d130      	bne.n	8003fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	2203      	movs	r2, #3
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	43db      	mvns	r3, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 0201 	and.w	r2, r3, #1
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d017      	beq.n	8004024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	2203      	movs	r2, #3
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4013      	ands	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d123      	bne.n	8004078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	08da      	lsrs	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3208      	adds	r2, #8
 8004038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	220f      	movs	r2, #15
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	691a      	ldr	r2, [r3, #16]
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	69b9      	ldr	r1, [r7, #24]
 8004074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	2203      	movs	r2, #3
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 0203 	and.w	r2, r3, #3
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80a2 	beq.w	80041fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	4b57      	ldr	r3, [pc, #348]	; (800421c <HAL_GPIO_Init+0x2e8>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	4a56      	ldr	r2, [pc, #344]	; (800421c <HAL_GPIO_Init+0x2e8>)
 80040c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c8:	6453      	str	r3, [r2, #68]	; 0x44
 80040ca:	4b54      	ldr	r3, [pc, #336]	; (800421c <HAL_GPIO_Init+0x2e8>)
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040d6:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_GPIO_Init+0x2ec>)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	3302      	adds	r3, #2
 80040de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4013      	ands	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a49      	ldr	r2, [pc, #292]	; (8004224 <HAL_GPIO_Init+0x2f0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d019      	beq.n	8004136 <HAL_GPIO_Init+0x202>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a48      	ldr	r2, [pc, #288]	; (8004228 <HAL_GPIO_Init+0x2f4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d013      	beq.n	8004132 <HAL_GPIO_Init+0x1fe>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a47      	ldr	r2, [pc, #284]	; (800422c <HAL_GPIO_Init+0x2f8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00d      	beq.n	800412e <HAL_GPIO_Init+0x1fa>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a46      	ldr	r2, [pc, #280]	; (8004230 <HAL_GPIO_Init+0x2fc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d007      	beq.n	800412a <HAL_GPIO_Init+0x1f6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a45      	ldr	r2, [pc, #276]	; (8004234 <HAL_GPIO_Init+0x300>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d101      	bne.n	8004126 <HAL_GPIO_Init+0x1f2>
 8004122:	2304      	movs	r3, #4
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x204>
 8004126:	2307      	movs	r3, #7
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x204>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x204>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x204>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x204>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	; (8004220 <HAL_GPIO_Init+0x2ec>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004156:	4b38      	ldr	r3, [pc, #224]	; (8004238 <HAL_GPIO_Init+0x304>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417a:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <HAL_GPIO_Init+0x304>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004180:	4b2d      	ldr	r3, [pc, #180]	; (8004238 <HAL_GPIO_Init+0x304>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a4:	4a24      	ldr	r2, [pc, #144]	; (8004238 <HAL_GPIO_Init+0x304>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041aa:	4b23      	ldr	r3, [pc, #140]	; (8004238 <HAL_GPIO_Init+0x304>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_GPIO_Init+0x304>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d4:	4b18      	ldr	r3, [pc, #96]	; (8004238 <HAL_GPIO_Init+0x304>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f8:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <HAL_GPIO_Init+0x304>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f aea2 	bls.w	8003f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40013c00 	.word	0x40013c00

0800423c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	460b      	mov	r3, r1
 8004246:	807b      	strh	r3, [r7, #2]
 8004248:	4613      	mov	r3, r2
 800424a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800424c:	787b      	ldrb	r3, [r7, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004258:	e003      	b.n	8004262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800425a:	887b      	ldrh	r3, [r7, #2]
 800425c:	041a      	lsls	r2, r3, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	619a      	str	r2, [r3, #24]
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004280:	887a      	ldrh	r2, [r7, #2]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	041a      	lsls	r2, r3, #16
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43d9      	mvns	r1, r3
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	400b      	ands	r3, r1
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	619a      	str	r2, [r3, #24]
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e12b      	b.n	800450e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff fa1c 	bl	8003708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004308:	f002 f86e 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a81      	ldr	r2, [pc, #516]	; (8004518 <HAL_I2C_Init+0x274>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d807      	bhi.n	8004328 <HAL_I2C_Init+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_I2C_Init+0x278>)
 800431c:	4293      	cmp	r3, r2
 800431e:	bf94      	ite	ls
 8004320:	2301      	movls	r3, #1
 8004322:	2300      	movhi	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e006      	b.n	8004336 <HAL_I2C_Init+0x92>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <HAL_I2C_Init+0x27c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0e7      	b.n	800450e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a78      	ldr	r2, [pc, #480]	; (8004524 <HAL_I2C_Init+0x280>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0c9b      	lsrs	r3, r3, #18
 8004348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a6a      	ldr	r2, [pc, #424]	; (8004518 <HAL_I2C_Init+0x274>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d802      	bhi.n	8004378 <HAL_I2C_Init+0xd4>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	e009      	b.n	800438c <HAL_I2C_Init+0xe8>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	4a69      	ldr	r2, [pc, #420]	; (8004528 <HAL_I2C_Init+0x284>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	099b      	lsrs	r3, r3, #6
 800438a:	3301      	adds	r3, #1
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800439e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	495c      	ldr	r1, [pc, #368]	; (8004518 <HAL_I2C_Init+0x274>)
 80043a8:	428b      	cmp	r3, r1
 80043aa:	d819      	bhi.n	80043e0 <HAL_I2C_Init+0x13c>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e59      	subs	r1, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043c0:	400b      	ands	r3, r1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_I2C_Init+0x138>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e59      	subs	r1, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043da:	e051      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043dc:	2304      	movs	r3, #4
 80043de:	e04f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d111      	bne.n	800440c <HAL_I2C_Init+0x168>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e012      	b.n	8004432 <HAL_I2C_Init+0x18e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Init+0x196>
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <HAL_I2C_Init+0x1bc>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e58      	subs	r0, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	440b      	add	r3, r1
 8004450:	fbb0 f3f3 	udiv	r3, r0, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	e00f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1e58      	subs	r0, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	0099      	lsls	r1, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6809      	ldr	r1, [r1, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6911      	ldr	r1, [r2, #16]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	000186a0 	.word	0x000186a0
 800451c:	001e847f 	.word	0x001e847f
 8004520:	003d08ff 	.word	0x003d08ff
 8004524:	431bde83 	.word	0x431bde83
 8004528:	10624dd3 	.word	0x10624dd3

0800452c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	460b      	mov	r3, r1
 800453a:	817b      	strh	r3, [r7, #10]
 800453c:	4613      	mov	r3, r2
 800453e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7ff fbe2 	bl	8003d08 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	f040 80e0 	bne.w	8004714 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2319      	movs	r3, #25
 800455a:	2201      	movs	r2, #1
 800455c:	4970      	ldr	r1, [pc, #448]	; (8004720 <HAL_I2C_Master_Transmit+0x1f4>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f001 f8f6 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
 800456c:	e0d3      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_I2C_Master_Transmit+0x50>
 8004578:	2302      	movs	r3, #2
 800457a:	e0cc      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d007      	beq.n	80045a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2221      	movs	r2, #33	; 0x21
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2210      	movs	r2, #16
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	893a      	ldrh	r2, [r7, #8]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a50      	ldr	r2, [pc, #320]	; (8004724 <HAL_I2C_Master_Transmit+0x1f8>)
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045e4:	8979      	ldrh	r1, [r7, #10]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6a3a      	ldr	r2, [r7, #32]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fde2 	bl	80051b4 <I2C_MasterRequestWrite>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e08d      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004610:	e066      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6a39      	ldr	r1, [r7, #32]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f001 f970 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06b      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d11b      	bne.n	80046b4 <HAL_I2C_Master_Transmit+0x188>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	6a39      	ldr	r1, [r7, #32]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f001 f960 	bl	800597e <I2C_WaitOnBTFFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d107      	bne.n	80046dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e01a      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d194      	bne.n	8004612 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	00100002 	.word	0x00100002
 8004724:	ffff0000 	.word	0xffff0000

08004728 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08c      	sub	sp, #48	; 0x30
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	461a      	mov	r2, r3
 8004734:	460b      	mov	r3, r1
 8004736:	817b      	strh	r3, [r7, #10]
 8004738:	4613      	mov	r3, r2
 800473a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800473c:	f7ff fae4 	bl	8003d08 <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	f040 820b 	bne.w	8004b66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2319      	movs	r3, #25
 8004756:	2201      	movs	r2, #1
 8004758:	497c      	ldr	r1, [pc, #496]	; (800494c <HAL_I2C_Master_Receive+0x224>)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fff8 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
 8004768:	e1fe      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_I2C_Master_Receive+0x50>
 8004774:	2302      	movs	r3, #2
 8004776:	e1f7      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b01      	cmp	r3, #1
 800478c:	d007      	beq.n	800479e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2222      	movs	r2, #34	; 0x22
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2210      	movs	r2, #16
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	893a      	ldrh	r2, [r7, #8]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a5c      	ldr	r2, [pc, #368]	; (8004950 <HAL_I2C_Master_Receive+0x228>)
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047e0:	8979      	ldrh	r1, [r7, #10]
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 fd66 	bl	80052b8 <I2C_MasterRequestRead>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1b8      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d113      	bne.n	8004826 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fe:	2300      	movs	r3, #0
 8004800:	623b      	str	r3, [r7, #32]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	623b      	str	r3, [r7, #32]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	623b      	str	r3, [r7, #32]
 8004812:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e18c      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482a:	2b01      	cmp	r3, #1
 800482c:	d11b      	bne.n	8004866 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	61fb      	str	r3, [r7, #28]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	e16c      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486a:	2b02      	cmp	r3, #2
 800486c:	d11b      	bne.n	80048a6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	61bb      	str	r3, [r7, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	61bb      	str	r3, [r7, #24]
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	e14c      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048cc:	e138      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	f200 80f1 	bhi.w	8004aba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d123      	bne.n	8004928 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f001 f88b 	bl	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e139      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004926:	e10b      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800492c:	2b02      	cmp	r3, #2
 800492e:	d14e      	bne.n	80049ce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2200      	movs	r2, #0
 8004938:	4906      	ldr	r1, [pc, #24]	; (8004954 <HAL_I2C_Master_Receive+0x22c>)
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 ff08 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e10e      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
 800494a:	bf00      	nop
 800494c:	00100002 	.word	0x00100002
 8004950:	ffff0000 	.word	0xffff0000
 8004954:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004966:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049cc:	e0b8      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	2200      	movs	r2, #0
 80049d6:	4966      	ldr	r1, [pc, #408]	; (8004b70 <HAL_I2C_Master_Receive+0x448>)
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 feb9 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0bf      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2200      	movs	r2, #0
 8004a32:	494f      	ldr	r1, [pc, #316]	; (8004b70 <HAL_I2C_Master_Receive+0x448>)
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 fe8b 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e091      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ab8:	e042      	b.n	8004b40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 ff9e 	bl	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e04c      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d118      	bne.n	8004b40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f47f aec2 	bne.w	80048ce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b62:	2300      	movs	r3, #0
 8004b64:	e000      	b.n	8004b68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3728      	adds	r7, #40	; 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	00010004 	.word	0x00010004

08004b74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	817b      	strh	r3, [r7, #10]
 8004b86:	460b      	mov	r3, r1
 8004b88:	813b      	strh	r3, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b8e:	f7ff f8bb 	bl	8003d08 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	f040 80d9 	bne.w	8004d54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2319      	movs	r3, #25
 8004ba8:	2201      	movs	r2, #1
 8004baa:	496d      	ldr	r1, [pc, #436]	; (8004d60 <HAL_I2C_Mem_Write+0x1ec>)
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 fdcf 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e0cc      	b.n	8004d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d101      	bne.n	8004bca <HAL_I2C_Mem_Write+0x56>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0c5      	b.n	8004d56 <HAL_I2C_Mem_Write+0x1e2>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d007      	beq.n	8004bf0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2221      	movs	r2, #33	; 0x21
 8004c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2240      	movs	r2, #64	; 0x40
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a3a      	ldr	r2, [r7, #32]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4a4d      	ldr	r2, [pc, #308]	; (8004d64 <HAL_I2C_Mem_Write+0x1f0>)
 8004c30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c32:	88f8      	ldrh	r0, [r7, #6]
 8004c34:	893a      	ldrh	r2, [r7, #8]
 8004c36:	8979      	ldrh	r1, [r7, #10]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	4603      	mov	r3, r0
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fc06 	bl	8005454 <I2C_RequestMemoryWrite>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d052      	beq.n	8004cf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e081      	b.n	8004d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fe50 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00d      	beq.n	8004c7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d107      	bne.n	8004c7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e06b      	b.n	8004d56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	781a      	ldrb	r2, [r3, #0]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d11b      	bne.n	8004cf4 <HAL_I2C_Mem_Write+0x180>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1aa      	bne.n	8004c52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fe3c 	bl	800597e <I2C_WaitOnBTFFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d107      	bne.n	8004d24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e016      	b.n	8004d56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d50:	2300      	movs	r3, #0
 8004d52:	e000      	b.n	8004d56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d54:	2302      	movs	r3, #2
  }
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	00100002 	.word	0x00100002
 8004d64:	ffff0000 	.word	0xffff0000

08004d68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	; 0x30
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	4608      	mov	r0, r1
 8004d72:	4611      	mov	r1, r2
 8004d74:	461a      	mov	r2, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	817b      	strh	r3, [r7, #10]
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	813b      	strh	r3, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d82:	f7fe ffc1 	bl	8003d08 <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	f040 8208 	bne.w	80051a6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2319      	movs	r3, #25
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	497b      	ldr	r1, [pc, #492]	; (8004f8c <HAL_I2C_Mem_Read+0x224>)
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 fcd5 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
 8004dae:	e1fb      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d101      	bne.n	8004dbe <HAL_I2C_Mem_Read+0x56>
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e1f4      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d007      	beq.n	8004de4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2222      	movs	r2, #34	; 0x22
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a5b      	ldr	r2, [pc, #364]	; (8004f90 <HAL_I2C_Mem_Read+0x228>)
 8004e24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e26:	88f8      	ldrh	r0, [r7, #6]
 8004e28:	893a      	ldrh	r2, [r7, #8]
 8004e2a:	8979      	ldrh	r1, [r7, #10]
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	4603      	mov	r3, r0
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f000 fba2 	bl	8005580 <I2C_RequestMemoryRead>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e1b0      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	623b      	str	r3, [r7, #32]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	623b      	str	r3, [r7, #32]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	623b      	str	r3, [r7, #32]
 8004e62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e184      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d11b      	bne.n	8004eb6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	61fb      	str	r3, [r7, #28]
 8004ea2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e164      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d11b      	bne.n	8004ef6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ecc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004edc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	61bb      	str	r3, [r7, #24]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	e144      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004f0c:	e138      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	f200 80f1 	bhi.w	80050fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d123      	bne.n	8004f68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fd6b 	bl	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e139      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f66:	e10b      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d14e      	bne.n	800500e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f76:	2200      	movs	r2, #0
 8004f78:	4906      	ldr	r1, [pc, #24]	; (8004f94 <HAL_I2C_Mem_Read+0x22c>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fbe8 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e10e      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
 8004f8a:	bf00      	nop
 8004f8c:	00100002 	.word	0x00100002
 8004f90:	ffff0000 	.word	0xffff0000
 8004f94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800500c:	e0b8      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005014:	2200      	movs	r2, #0
 8005016:	4966      	ldr	r1, [pc, #408]	; (80051b0 <HAL_I2C_Mem_Read+0x448>)
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 fb99 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0bf      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	2200      	movs	r2, #0
 8005072:	494f      	ldr	r1, [pc, #316]	; (80051b0 <HAL_I2C_Mem_Read+0x448>)
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 fb6b 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e091      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050f8:	e042      	b.n	8005180 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fc7e 	bl	8005a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e04c      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d118      	bne.n	8005180 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	b2d2      	uxtb	r2, r2
 800515a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	f47f aec2 	bne.w	8004f0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2220      	movs	r2, #32
 800518e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3728      	adds	r7, #40	; 0x28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	00010004 	.word	0x00010004

080051b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	460b      	mov	r3, r1
 80051c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d006      	beq.n	80051de <I2C_MasterRequestWrite+0x2a>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d003      	beq.n	80051de <I2C_MasterRequestWrite+0x2a>
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051dc:	d108      	bne.n	80051f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e00b      	b.n	8005208 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f4:	2b12      	cmp	r3, #18
 80051f6:	d107      	bne.n	8005208 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005206:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fa9b 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522e:	d103      	bne.n	8005238 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e035      	b.n	80052a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005244:	d108      	bne.n	8005258 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	461a      	mov	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005254:	611a      	str	r2, [r3, #16]
 8005256:	e01b      	b.n	8005290 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005258:	897b      	ldrh	r3, [r7, #10]
 800525a:	11db      	asrs	r3, r3, #7
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0306 	and.w	r3, r3, #6
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f063 030f 	orn	r3, r3, #15
 8005268:	b2da      	uxtb	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	490e      	ldr	r1, [pc, #56]	; (80052b0 <I2C_MasterRequestWrite+0xfc>)
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 fac1 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e010      	b.n	80052a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005286:	897b      	ldrh	r3, [r7, #10]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	4907      	ldr	r1, [pc, #28]	; (80052b4 <I2C_MasterRequestWrite+0x100>)
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fab1 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3718      	adds	r7, #24
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	00010008 	.word	0x00010008
 80052b4:	00010002 	.word	0x00010002

080052b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af02      	add	r7, sp, #8
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	460b      	mov	r3, r1
 80052c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d006      	beq.n	80052f2 <I2C_MasterRequestRead+0x3a>
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d003      	beq.n	80052f2 <I2C_MasterRequestRead+0x3a>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f0:	d108      	bne.n	8005304 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e00b      	b.n	800531c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	2b11      	cmp	r3, #17
 800530a:	d107      	bne.n	800531c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fa11 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00d      	beq.n	8005350 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d103      	bne.n	800534c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e079      	b.n	8005444 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005358:	d108      	bne.n	800536c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	b2da      	uxtb	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	611a      	str	r2, [r3, #16]
 800536a:	e05f      	b.n	800542c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800536c:	897b      	ldrh	r3, [r7, #10]
 800536e:	11db      	asrs	r3, r3, #7
 8005370:	b2db      	uxtb	r3, r3
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	b2db      	uxtb	r3, r3
 8005378:	f063 030f 	orn	r3, r3, #15
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	4930      	ldr	r1, [pc, #192]	; (800544c <I2C_MasterRequestRead+0x194>)
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa37 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e054      	b.n	8005444 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800539a:	897b      	ldrh	r3, [r7, #10]
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4929      	ldr	r1, [pc, #164]	; (8005450 <I2C_MasterRequestRead+0x198>)
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fa27 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e044      	b.n	8005444 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	613b      	str	r3, [r7, #16]
 80053ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f9af 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00d      	beq.n	8005414 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005406:	d103      	bne.n	8005410 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800540e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e017      	b.n	8005444 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005414:	897b      	ldrh	r3, [r7, #10]
 8005416:	11db      	asrs	r3, r3, #7
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 0306 	and.w	r3, r3, #6
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f063 030e 	orn	r3, r3, #14
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	4907      	ldr	r1, [pc, #28]	; (8005450 <I2C_MasterRequestRead+0x198>)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f9e3 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	00010008 	.word	0x00010008
 8005450:	00010002 	.word	0x00010002

08005454 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4603      	mov	r3, r0
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	460b      	mov	r3, r1
 8005468:	813b      	strh	r3, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2200      	movs	r2, #0
 8005486:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f960 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a4:	d103      	bne.n	80054ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e05f      	b.n	8005572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054b2:	897b      	ldrh	r3, [r7, #10]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	6a3a      	ldr	r2, [r7, #32]
 80054c6:	492d      	ldr	r1, [pc, #180]	; (800557c <I2C_RequestMemoryWrite+0x128>)
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f998 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e04c      	b.n	8005572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f0:	6a39      	ldr	r1, [r7, #32]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fa02 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00d      	beq.n	800551a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	2b04      	cmp	r3, #4
 8005504:	d107      	bne.n	8005516 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e02b      	b.n	8005572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d105      	bne.n	800552c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005520:	893b      	ldrh	r3, [r7, #8]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	611a      	str	r2, [r3, #16]
 800552a:	e021      	b.n	8005570 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800552c:	893b      	ldrh	r3, [r7, #8]
 800552e:	0a1b      	lsrs	r3, r3, #8
 8005530:	b29b      	uxth	r3, r3
 8005532:	b2da      	uxtb	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553c:	6a39      	ldr	r1, [r7, #32]
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 f9dc 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00d      	beq.n	8005566 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	2b04      	cmp	r3, #4
 8005550:	d107      	bne.n	8005562 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e005      	b.n	8005572 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005566:	893b      	ldrh	r3, [r7, #8]
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3718      	adds	r7, #24
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	00010002 	.word	0x00010002

08005580 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af02      	add	r7, sp, #8
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	461a      	mov	r2, r3
 800558e:	4603      	mov	r3, r0
 8005590:	817b      	strh	r3, [r7, #10]
 8005592:	460b      	mov	r3, r1
 8005594:	813b      	strh	r3, [r7, #8]
 8005596:	4613      	mov	r3, r2
 8005598:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 f8c2 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00d      	beq.n	80055ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e0:	d103      	bne.n	80055ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e0aa      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ee:	897b      	ldrh	r3, [r7, #10]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	4952      	ldr	r1, [pc, #328]	; (800574c <I2C_RequestMemoryRead+0x1cc>)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f8fa 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e097      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	6a39      	ldr	r1, [r7, #32]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f964 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	2b04      	cmp	r3, #4
 8005640:	d107      	bne.n	8005652 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e076      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d105      	bne.n	8005668 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800565c:	893b      	ldrh	r3, [r7, #8]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	611a      	str	r2, [r3, #16]
 8005666:	e021      	b.n	80056ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005668:	893b      	ldrh	r3, [r7, #8]
 800566a:	0a1b      	lsrs	r3, r3, #8
 800566c:	b29b      	uxth	r3, r3
 800566e:	b2da      	uxtb	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	6a39      	ldr	r1, [r7, #32]
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 f93e 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b04      	cmp	r3, #4
 800568c:	d107      	bne.n	800569e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e050      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056a2:	893b      	ldrh	r3, [r7, #8]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ae:	6a39      	ldr	r1, [r7, #32]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f923 	bl	80058fc <I2C_WaitOnTXEFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00d      	beq.n	80056d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d107      	bne.n	80056d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e035      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f82b 	bl	8005750 <I2C_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d103      	bne.n	8005718 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e013      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800571c:	897b      	ldrh	r3, [r7, #10]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f043 0301 	orr.w	r3, r3, #1
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	6a3a      	ldr	r2, [r7, #32]
 8005730:	4906      	ldr	r1, [pc, #24]	; (800574c <I2C_RequestMemoryRead+0x1cc>)
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f863 	bl	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	00010002 	.word	0x00010002

08005750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005760:	e025      	b.n	80057ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005768:	d021      	beq.n	80057ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576a:	f7fe facd 	bl	8003d08 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d302      	bcc.n	8005780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d116      	bne.n	80057ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0220 	orr.w	r2, r3, #32
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e023      	b.n	80057f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	0c1b      	lsrs	r3, r3, #16
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d10d      	bne.n	80057d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	43da      	mvns	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4013      	ands	r3, r2
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf0c      	ite	eq
 80057ca:	2301      	moveq	r3, #1
 80057cc:	2300      	movne	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	461a      	mov	r2, r3
 80057d2:	e00c      	b.n	80057ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	43da      	mvns	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4013      	ands	r3, r2
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	461a      	mov	r2, r3
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d0b6      	beq.n	8005762 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
 800580a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800580c:	e051      	b.n	80058b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800581c:	d123      	bne.n	8005866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005836:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0204 	orr.w	r2, r3, #4
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e046      	b.n	80058f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800586c:	d021      	beq.n	80058b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586e:	f7fe fa4b 	bl	8003d08 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	429a      	cmp	r2, r3
 800587c:	d302      	bcc.n	8005884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d116      	bne.n	80058b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f043 0220 	orr.w	r2, r3, #32
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e020      	b.n	80058f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	0c1b      	lsrs	r3, r3, #16
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d10c      	bne.n	80058d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	43da      	mvns	r2, r3
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4013      	ands	r3, r2
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	e00b      	b.n	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	43da      	mvns	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4013      	ands	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d18d      	bne.n	800580e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005908:	e02d      	b.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f8ce 	bl	8005aac <I2C_IsAcknowledgeFailed>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e02d      	b.n	8005976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005920:	d021      	beq.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005922:	f7fe f9f1 	bl	8003d08 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d302      	bcc.n	8005938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d116      	bne.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e007      	b.n	8005976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d1ca      	bne.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800598a:	e02d      	b.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f88d 	bl	8005aac <I2C_IsAcknowledgeFailed>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e02d      	b.n	80059f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059a2:	d021      	beq.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059a4:	f7fe f9b0 	bl	8003d08 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d302      	bcc.n	80059ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d116      	bne.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	f043 0220 	orr.w	r2, r3, #32
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e007      	b.n	80059f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d1ca      	bne.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a0c:	e042      	b.n	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	d119      	bne.n	8005a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0210 	mvn.w	r2, #16
 8005a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e029      	b.n	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a50:	f7fe f95a 	bl	8003d08 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d302      	bcc.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d116      	bne.n	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e007      	b.n	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d1b5      	bne.n	8005a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d11b      	bne.n	8005afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	f043 0204 	orr.w	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e000      	b.n	8005afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e267      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d075      	beq.n	8005c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b2a:	4b88      	ldr	r3, [pc, #544]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f003 030c 	and.w	r3, r3, #12
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d00c      	beq.n	8005b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b36:	4b85      	ldr	r3, [pc, #532]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b3e:	2b08      	cmp	r3, #8
 8005b40:	d112      	bne.n	8005b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b42:	4b82      	ldr	r3, [pc, #520]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b4e:	d10b      	bne.n	8005b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	4b7e      	ldr	r3, [pc, #504]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05b      	beq.n	8005c14 <HAL_RCC_OscConfig+0x108>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d157      	bne.n	8005c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e242      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_OscConfig+0x74>
 8005b72:	4b76      	ldr	r3, [pc, #472]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a75      	ldr	r2, [pc, #468]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	e01d      	b.n	8005bbc <HAL_RCC_OscConfig+0xb0>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x98>
 8005b8a:	4b70      	ldr	r3, [pc, #448]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a6f      	ldr	r2, [pc, #444]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	4b6d      	ldr	r3, [pc, #436]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a6c      	ldr	r2, [pc, #432]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e00b      	b.n	8005bbc <HAL_RCC_OscConfig+0xb0>
 8005ba4:	4b69      	ldr	r3, [pc, #420]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a68      	ldr	r2, [pc, #416]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bae:	6013      	str	r3, [r2, #0]
 8005bb0:	4b66      	ldr	r3, [pc, #408]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a65      	ldr	r2, [pc, #404]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc4:	f7fe f8a0 	bl	8003d08 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bcc:	f7fe f89c 	bl	8003d08 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	; 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e207      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bde:	4b5b      	ldr	r3, [pc, #364]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d0f0      	beq.n	8005bcc <HAL_RCC_OscConfig+0xc0>
 8005bea:	e014      	b.n	8005c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fe f88c 	bl	8003d08 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf4:	f7fe f888 	bl	8003d08 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e1f3      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c06:	4b51      	ldr	r3, [pc, #324]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f0      	bne.n	8005bf4 <HAL_RCC_OscConfig+0xe8>
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d063      	beq.n	8005cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c22:	4b4a      	ldr	r3, [pc, #296]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00b      	beq.n	8005c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2e:	4b47      	ldr	r3, [pc, #284]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c36:	2b08      	cmp	r3, #8
 8005c38:	d11c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c3a:	4b44      	ldr	r3, [pc, #272]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d116      	bne.n	8005c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c46:	4b41      	ldr	r3, [pc, #260]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_RCC_OscConfig+0x152>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d001      	beq.n	8005c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e1c7      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5e:	4b3b      	ldr	r3, [pc, #236]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4937      	ldr	r1, [pc, #220]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c72:	e03a      	b.n	8005cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d020      	beq.n	8005cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <HAL_RCC_OscConfig+0x244>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c82:	f7fe f841 	bl	8003d08 <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c88:	e008      	b.n	8005c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8a:	f7fe f83d 	bl	8003d08 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d901      	bls.n	8005c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e1a8      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9c:	4b2b      	ldr	r3, [pc, #172]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d0f0      	beq.n	8005c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	4b28      	ldr	r3, [pc, #160]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	4925      	ldr	r1, [pc, #148]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]
 8005cbc:	e015      	b.n	8005cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cbe:	4b24      	ldr	r3, [pc, #144]	; (8005d50 <HAL_RCC_OscConfig+0x244>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fe f820 	bl	8003d08 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ccc:	f7fe f81c 	bl	8003d08 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e187      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cde:	4b1b      	ldr	r3, [pc, #108]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d036      	beq.n	8005d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d016      	beq.n	8005d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <HAL_RCC_OscConfig+0x248>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d04:	f7fe f800 	bl	8003d08 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d0c:	f7fd fffc 	bl	8003d08 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e167      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1e:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_RCC_OscConfig+0x240>)
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0x200>
 8005d2a:	e01b      	b.n	8005d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <HAL_RCC_OscConfig+0x248>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d32:	f7fd ffe9 	bl	8003d08 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d38:	e00e      	b.n	8005d58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d3a:	f7fd ffe5 	bl	8003d08 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d907      	bls.n	8005d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e150      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
 8005d4c:	40023800 	.word	0x40023800
 8005d50:	42470000 	.word	0x42470000
 8005d54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d58:	4b88      	ldr	r3, [pc, #544]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1ea      	bne.n	8005d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8097 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d72:	2300      	movs	r3, #0
 8005d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d76:	4b81      	ldr	r3, [pc, #516]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	60bb      	str	r3, [r7, #8]
 8005d86:	4b7d      	ldr	r3, [pc, #500]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	4a7c      	ldr	r2, [pc, #496]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d90:	6413      	str	r3, [r2, #64]	; 0x40
 8005d92:	4b7a      	ldr	r3, [pc, #488]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	60bb      	str	r3, [r7, #8]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da2:	4b77      	ldr	r3, [pc, #476]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d118      	bne.n	8005de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dae:	4b74      	ldr	r3, [pc, #464]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a73      	ldr	r2, [pc, #460]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dba:	f7fd ffa5 	bl	8003d08 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc2:	f7fd ffa1 	bl	8003d08 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e10c      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd4:	4b6a      	ldr	r3, [pc, #424]	; (8005f80 <HAL_RCC_OscConfig+0x474>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d106      	bne.n	8005df6 <HAL_RCC_OscConfig+0x2ea>
 8005de8:	4b64      	ldr	r3, [pc, #400]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dec:	4a63      	ldr	r2, [pc, #396]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	6713      	str	r3, [r2, #112]	; 0x70
 8005df4:	e01c      	b.n	8005e30 <HAL_RCC_OscConfig+0x324>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d10c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x30c>
 8005dfe:	4b5f      	ldr	r3, [pc, #380]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	4a5e      	ldr	r2, [pc, #376]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e04:	f043 0304 	orr.w	r3, r3, #4
 8005e08:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0a:	4b5c      	ldr	r3, [pc, #368]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4a5b      	ldr	r2, [pc, #364]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	6713      	str	r3, [r2, #112]	; 0x70
 8005e16:	e00b      	b.n	8005e30 <HAL_RCC_OscConfig+0x324>
 8005e18:	4b58      	ldr	r3, [pc, #352]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1c:	4a57      	ldr	r2, [pc, #348]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	6713      	str	r3, [r2, #112]	; 0x70
 8005e24:	4b55      	ldr	r3, [pc, #340]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	4a54      	ldr	r2, [pc, #336]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e2a:	f023 0304 	bic.w	r3, r3, #4
 8005e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d015      	beq.n	8005e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fd ff66 	bl	8003d08 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fd ff62 	bl	8003d08 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e0cb      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e56:	4b49      	ldr	r3, [pc, #292]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ee      	beq.n	8005e40 <HAL_RCC_OscConfig+0x334>
 8005e62:	e014      	b.n	8005e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e64:	f7fd ff50 	bl	8003d08 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6c:	f7fd ff4c 	bl	8003d08 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e0b5      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e82:	4b3e      	ldr	r3, [pc, #248]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1ee      	bne.n	8005e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d105      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e94:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	4a38      	ldr	r2, [pc, #224]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a1 	beq.w	8005fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eaa:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	f003 030c 	and.w	r3, r3, #12
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d05c      	beq.n	8005f70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d141      	bne.n	8005f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <HAL_RCC_OscConfig+0x478>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fd ff20 	bl	8003d08 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fd ff1c 	bl	8003d08 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e087      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ede:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69da      	ldr	r2, [r3, #28]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	431a      	orrs	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	085b      	lsrs	r3, r3, #1
 8005f02:	3b01      	subs	r3, #1
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	061b      	lsls	r3, r3, #24
 8005f0e:	491b      	ldr	r1, [pc, #108]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005f10:	4313      	orrs	r3, r2
 8005f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f14:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <HAL_RCC_OscConfig+0x478>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f1a:	f7fd fef5 	bl	8003d08 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f22:	f7fd fef1 	bl	8003d08 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e05c      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f34:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0f0      	beq.n	8005f22 <HAL_RCC_OscConfig+0x416>
 8005f40:	e054      	b.n	8005fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <HAL_RCC_OscConfig+0x478>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f48:	f7fd fede 	bl	8003d08 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f50:	f7fd feda 	bl	8003d08 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e045      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <HAL_RCC_OscConfig+0x470>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x444>
 8005f6e:	e03d      	b.n	8005fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d107      	bne.n	8005f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e038      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
 8005f7c:	40023800 	.word	0x40023800
 8005f80:	40007000 	.word	0x40007000
 8005f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f88:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <HAL_RCC_OscConfig+0x4ec>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d028      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d121      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d11a      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fb8:	4013      	ands	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d111      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fce:	085b      	lsrs	r3, r3, #1
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d001      	beq.n	8005fec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e000      	b.n	8005fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40023800 	.word	0x40023800

08005ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0cc      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006010:	4b68      	ldr	r3, [pc, #416]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d90c      	bls.n	8006038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800601e:	4b65      	ldr	r3, [pc, #404]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006026:	4b63      	ldr	r3, [pc, #396]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d001      	beq.n	8006038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e0b8      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d020      	beq.n	8006086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006050:	4b59      	ldr	r3, [pc, #356]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	4a58      	ldr	r2, [pc, #352]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800605a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006068:	4b53      	ldr	r3, [pc, #332]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4a52      	ldr	r2, [pc, #328]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006074:	4b50      	ldr	r3, [pc, #320]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	494d      	ldr	r1, [pc, #308]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d044      	beq.n	800611c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800609a:	4b47      	ldr	r3, [pc, #284]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d119      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e07f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d003      	beq.n	80060ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d107      	bne.n	80060ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ba:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d109      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e06f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ca:	4b3b      	ldr	r3, [pc, #236]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e067      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060da:	4b37      	ldr	r3, [pc, #220]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f023 0203 	bic.w	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4934      	ldr	r1, [pc, #208]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ec:	f7fd fe0c 	bl	8003d08 <HAL_GetTick>
 80060f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060f2:	e00a      	b.n	800610a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060f4:	f7fd fe08 	bl	8003d08 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006102:	4293      	cmp	r3, r2
 8006104:	d901      	bls.n	800610a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e04f      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 020c 	and.w	r2, r3, #12
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	429a      	cmp	r2, r3
 800611a:	d1eb      	bne.n	80060f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d20c      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800612a:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006132:	4b20      	ldr	r3, [pc, #128]	; (80061b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0307 	and.w	r3, r3, #7
 800613a:	683a      	ldr	r2, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d001      	beq.n	8006144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e032      	b.n	80061aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006150:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4916      	ldr	r1, [pc, #88]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0308 	and.w	r3, r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	490e      	ldr	r1, [pc, #56]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006182:	f000 f821 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8006186:	4602      	mov	r2, r0
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 030f 	and.w	r3, r3, #15
 8006192:	490a      	ldr	r1, [pc, #40]	; (80061bc <HAL_RCC_ClockConfig+0x1c0>)
 8006194:	5ccb      	ldrb	r3, [r1, r3]
 8006196:	fa22 f303 	lsr.w	r3, r2, r3
 800619a:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <HAL_RCC_ClockConfig+0x1c4>)
 800619c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800619e:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <HAL_RCC_ClockConfig+0x1c8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fd fd6c 	bl	8003c80 <HAL_InitTick>

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40023c00 	.word	0x40023c00
 80061b8:	40023800 	.word	0x40023800
 80061bc:	0800ae00 	.word	0x0800ae00
 80061c0:	2000000c 	.word	0x2000000c
 80061c4:	20000010 	.word	0x20000010

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061cc:	b094      	sub	sp, #80	; 0x50
 80061ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	647b      	str	r3, [r7, #68]	; 0x44
 80061d4:	2300      	movs	r3, #0
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	2300      	movs	r3, #0
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061e0:	4b79      	ldr	r3, [pc, #484]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b08      	cmp	r3, #8
 80061ea:	d00d      	beq.n	8006208 <HAL_RCC_GetSysClockFreq+0x40>
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	f200 80e1 	bhi.w	80063b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x34>
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d003      	beq.n	8006202 <HAL_RCC_GetSysClockFreq+0x3a>
 80061fa:	e0db      	b.n	80063b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061fc:	4b73      	ldr	r3, [pc, #460]	; (80063cc <HAL_RCC_GetSysClockFreq+0x204>)
 80061fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006200:	e0db      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006202:	4b72      	ldr	r3, [pc, #456]	; (80063cc <HAL_RCC_GetSysClockFreq+0x204>)
 8006204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006206:	e0d8      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006208:	4b6f      	ldr	r3, [pc, #444]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006210:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006212:	4b6d      	ldr	r3, [pc, #436]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d063      	beq.n	80062e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800621e:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	099b      	lsrs	r3, r3, #6
 8006224:	2200      	movs	r2, #0
 8006226:	63bb      	str	r3, [r7, #56]	; 0x38
 8006228:	63fa      	str	r2, [r7, #60]	; 0x3c
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	; 0x34
 8006236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800623a:	4622      	mov	r2, r4
 800623c:	462b      	mov	r3, r5
 800623e:	f04f 0000 	mov.w	r0, #0
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	0159      	lsls	r1, r3, #5
 8006248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800624c:	0150      	lsls	r0, r2, #5
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4621      	mov	r1, r4
 8006254:	1a51      	subs	r1, r2, r1
 8006256:	6139      	str	r1, [r7, #16]
 8006258:	4629      	mov	r1, r5
 800625a:	eb63 0301 	sbc.w	r3, r3, r1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800626c:	4659      	mov	r1, fp
 800626e:	018b      	lsls	r3, r1, #6
 8006270:	4651      	mov	r1, sl
 8006272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006276:	4651      	mov	r1, sl
 8006278:	018a      	lsls	r2, r1, #6
 800627a:	4651      	mov	r1, sl
 800627c:	ebb2 0801 	subs.w	r8, r2, r1
 8006280:	4659      	mov	r1, fp
 8006282:	eb63 0901 	sbc.w	r9, r3, r1
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800629a:	4690      	mov	r8, r2
 800629c:	4699      	mov	r9, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	eb18 0303 	adds.w	r3, r8, r3
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	462b      	mov	r3, r5
 80062a8:	eb49 0303 	adc.w	r3, r9, r3
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	f04f 0200 	mov.w	r2, #0
 80062b2:	f04f 0300 	mov.w	r3, #0
 80062b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062ba:	4629      	mov	r1, r5
 80062bc:	028b      	lsls	r3, r1, #10
 80062be:	4621      	mov	r1, r4
 80062c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c4:	4621      	mov	r1, r4
 80062c6:	028a      	lsls	r2, r1, #10
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ce:	2200      	movs	r2, #0
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062d8:	f7fa fcbe 	bl	8000c58 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4613      	mov	r3, r2
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062e4:	e058      	b.n	8006398 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062e6:	4b38      	ldr	r3, [pc, #224]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	099b      	lsrs	r3, r3, #6
 80062ec:	2200      	movs	r2, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	4611      	mov	r1, r2
 80062f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062f6:	623b      	str	r3, [r7, #32]
 80062f8:	2300      	movs	r3, #0
 80062fa:	627b      	str	r3, [r7, #36]	; 0x24
 80062fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006300:	4642      	mov	r2, r8
 8006302:	464b      	mov	r3, r9
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	0159      	lsls	r1, r3, #5
 800630e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006312:	0150      	lsls	r0, r2, #5
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4641      	mov	r1, r8
 800631a:	ebb2 0a01 	subs.w	sl, r2, r1
 800631e:	4649      	mov	r1, r9
 8006320:	eb63 0b01 	sbc.w	fp, r3, r1
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	f04f 0300 	mov.w	r3, #0
 800632c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006330:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006334:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006338:	ebb2 040a 	subs.w	r4, r2, sl
 800633c:	eb63 050b 	sbc.w	r5, r3, fp
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	00eb      	lsls	r3, r5, #3
 800634a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634e:	00e2      	lsls	r2, r4, #3
 8006350:	4614      	mov	r4, r2
 8006352:	461d      	mov	r5, r3
 8006354:	4643      	mov	r3, r8
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	603b      	str	r3, [r7, #0]
 800635a:	464b      	mov	r3, r9
 800635c:	eb45 0303 	adc.w	r3, r5, r3
 8006360:	607b      	str	r3, [r7, #4]
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800636e:	4629      	mov	r1, r5
 8006370:	028b      	lsls	r3, r1, #10
 8006372:	4621      	mov	r1, r4
 8006374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006378:	4621      	mov	r1, r4
 800637a:	028a      	lsls	r2, r1, #10
 800637c:	4610      	mov	r0, r2
 800637e:	4619      	mov	r1, r3
 8006380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006382:	2200      	movs	r2, #0
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	61fa      	str	r2, [r7, #28]
 8006388:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800638c:	f7fa fc64 	bl	8000c58 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	0c1b      	lsrs	r3, r3, #16
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	3301      	adds	r3, #1
 80063a4:	005b      	lsls	r3, r3, #1
 80063a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80063a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063b2:	e002      	b.n	80063ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCC_GetSysClockFreq+0x204>)
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3750      	adds	r7, #80	; 0x50
 80063c0:	46bd      	mov	sp, r7
 80063c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063c6:	bf00      	nop
 80063c8:	40023800 	.word	0x40023800
 80063cc:	00f42400 	.word	0x00f42400

080063d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063d4:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063d6:	681b      	ldr	r3, [r3, #0]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000000c 	.word	0x2000000c

080063e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063ec:	f7ff fff0 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 80063f0:	4602      	mov	r2, r0
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	0a9b      	lsrs	r3, r3, #10
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	4903      	ldr	r1, [pc, #12]	; (800640c <HAL_RCC_GetPCLK1Freq+0x24>)
 80063fe:	5ccb      	ldrb	r3, [r1, r3]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40023800 	.word	0x40023800
 800640c:	0800ae10 	.word	0x0800ae10

08006410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006414:	f7ff ffdc 	bl	80063d0 <HAL_RCC_GetHCLKFreq>
 8006418:	4602      	mov	r2, r0
 800641a:	4b05      	ldr	r3, [pc, #20]	; (8006430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	0b5b      	lsrs	r3, r3, #13
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	4903      	ldr	r1, [pc, #12]	; (8006434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006426:	5ccb      	ldrb	r3, [r1, r3]
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800642c:	4618      	mov	r0, r3
 800642e:	bd80      	pop	{r7, pc}
 8006430:	40023800 	.word	0x40023800
 8006434:	0800ae10 	.word	0x0800ae10

08006438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e07b      	b.n	8006542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d108      	bne.n	8006464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800645a:	d009      	beq.n	8006470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	61da      	str	r2, [r3, #28]
 8006462:	e005      	b.n	8006470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fd f984 	bl	8003798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	431a      	orrs	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	ea42 0103 	orr.w	r1, r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	f003 0104 	and.w	r1, r3, #4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006516:	f003 0210 	and.w	r2, r3, #16
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e041      	b.n	80065e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7fd f959 	bl	8003828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2202      	movs	r2, #2
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	3304      	adds	r3, #4
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f000 fac1 	bl	8006b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e041      	b.n	800667e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d106      	bne.n	8006614 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f839 	bl	8006686 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	3304      	adds	r3, #4
 8006624:	4619      	mov	r1, r3
 8006626:	4610      	mov	r0, r2
 8006628:	f000 fa72 	bl	8006b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr
	...

0800669c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <HAL_TIM_PWM_Start+0x24>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	bf14      	ite	ne
 80066b8:	2301      	movne	r3, #1
 80066ba:	2300      	moveq	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	e022      	b.n	8006706 <HAL_TIM_PWM_Start+0x6a>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d109      	bne.n	80066da <HAL_TIM_PWM_Start+0x3e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	bf14      	ite	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	2300      	moveq	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	e015      	b.n	8006706 <HAL_TIM_PWM_Start+0x6a>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b08      	cmp	r3, #8
 80066de:	d109      	bne.n	80066f4 <HAL_TIM_PWM_Start+0x58>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e008      	b.n	8006706 <HAL_TIM_PWM_Start+0x6a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	bf14      	ite	ne
 8006700:	2301      	movne	r3, #1
 8006702:	2300      	moveq	r3, #0
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e068      	b.n	80067e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d104      	bne.n	800671e <HAL_TIM_PWM_Start+0x82>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800671c:	e013      	b.n	8006746 <HAL_TIM_PWM_Start+0xaa>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b04      	cmp	r3, #4
 8006722:	d104      	bne.n	800672e <HAL_TIM_PWM_Start+0x92>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2202      	movs	r2, #2
 8006728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800672c:	e00b      	b.n	8006746 <HAL_TIM_PWM_Start+0xaa>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b08      	cmp	r3, #8
 8006732:	d104      	bne.n	800673e <HAL_TIM_PWM_Start+0xa2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800673c:	e003      	b.n	8006746 <HAL_TIM_PWM_Start+0xaa>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2202      	movs	r2, #2
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fc84 	bl	800705c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a23      	ldr	r2, [pc, #140]	; (80067e8 <HAL_TIM_PWM_Start+0x14c>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d107      	bne.n	800676e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800676c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <HAL_TIM_PWM_Start+0x14c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_TIM_PWM_Start+0x10e>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d013      	beq.n	80067aa <HAL_TIM_PWM_Start+0x10e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a19      	ldr	r2, [pc, #100]	; (80067ec <HAL_TIM_PWM_Start+0x150>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_TIM_PWM_Start+0x10e>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a17      	ldr	r2, [pc, #92]	; (80067f0 <HAL_TIM_PWM_Start+0x154>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_TIM_PWM_Start+0x10e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a16      	ldr	r2, [pc, #88]	; (80067f4 <HAL_TIM_PWM_Start+0x158>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_TIM_PWM_Start+0x10e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <HAL_TIM_PWM_Start+0x15c>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d111      	bne.n	80067ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b06      	cmp	r3, #6
 80067ba:	d010      	beq.n	80067de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0201 	orr.w	r2, r2, #1
 80067ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067cc:	e007      	b.n	80067de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40000400 	.word	0x40000400
 80067f0:	40000800 	.word	0x40000800
 80067f4:	40000c00 	.word	0x40000c00
 80067f8:	40014000 	.word	0x40014000

080067fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d101      	bne.n	800681a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006816:	2302      	movs	r3, #2
 8006818:	e0ae      	b.n	8006978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b0c      	cmp	r3, #12
 8006826:	f200 809f 	bhi.w	8006968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006865 	.word	0x08006865
 8006834:	08006969 	.word	0x08006969
 8006838:	08006969 	.word	0x08006969
 800683c:	08006969 	.word	0x08006969
 8006840:	080068a5 	.word	0x080068a5
 8006844:	08006969 	.word	0x08006969
 8006848:	08006969 	.word	0x08006969
 800684c:	08006969 	.word	0x08006969
 8006850:	080068e7 	.word	0x080068e7
 8006854:	08006969 	.word	0x08006969
 8006858:	08006969 	.word	0x08006969
 800685c:	08006969 	.word	0x08006969
 8006860:	08006927 	.word	0x08006927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f9d0 	bl	8006c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0208 	orr.w	r2, r2, #8
 800687e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0204 	bic.w	r2, r2, #4
 800688e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	6999      	ldr	r1, [r3, #24]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	691a      	ldr	r2, [r3, #16]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	619a      	str	r2, [r3, #24]
      break;
 80068a2:	e064      	b.n	800696e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fa16 	bl	8006cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699a      	ldr	r2, [r3, #24]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6999      	ldr	r1, [r3, #24]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	619a      	str	r2, [r3, #24]
      break;
 80068e4:	e043      	b.n	800696e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa61 	bl	8006db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0208 	orr.w	r2, r2, #8
 8006900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0204 	bic.w	r2, r2, #4
 8006910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69d9      	ldr	r1, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	61da      	str	r2, [r3, #28]
      break;
 8006924:	e023      	b.n	800696e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	4618      	mov	r0, r3
 800692e:	f000 faab 	bl	8006e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69d9      	ldr	r1, [r3, #28]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	021a      	lsls	r2, r3, #8
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	61da      	str	r2, [r3, #28]
      break;
 8006966:	e002      	b.n	800696e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	75fb      	strb	r3, [r7, #23]
      break;
 800696c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_TIM_ConfigClockSource+0x1c>
 8006998:	2302      	movs	r3, #2
 800699a:	e0b4      	b.n	8006b06 <HAL_TIM_ConfigClockSource+0x186>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069d4:	d03e      	beq.n	8006a54 <HAL_TIM_ConfigClockSource+0xd4>
 80069d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069da:	f200 8087 	bhi.w	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e2:	f000 8086 	beq.w	8006af2 <HAL_TIM_ConfigClockSource+0x172>
 80069e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ea:	d87f      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b70      	cmp	r3, #112	; 0x70
 80069ee:	d01a      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0xa6>
 80069f0:	2b70      	cmp	r3, #112	; 0x70
 80069f2:	d87b      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b60      	cmp	r3, #96	; 0x60
 80069f6:	d050      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x11a>
 80069f8:	2b60      	cmp	r3, #96	; 0x60
 80069fa:	d877      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b50      	cmp	r3, #80	; 0x50
 80069fe:	d03c      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0xfa>
 8006a00:	2b50      	cmp	r3, #80	; 0x50
 8006a02:	d873      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d058      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x13a>
 8006a08:	2b40      	cmp	r3, #64	; 0x40
 8006a0a:	d86f      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a0c:	2b30      	cmp	r3, #48	; 0x30
 8006a0e:	d064      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a10:	2b30      	cmp	r3, #48	; 0x30
 8006a12:	d86b      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d060      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d867      	bhi.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d05c      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a20:	2b10      	cmp	r3, #16
 8006a22:	d05a      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x15a>
 8006a24:	e062      	b.n	8006aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6899      	ldr	r1, [r3, #8]
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f000 faf1 	bl	800701c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	609a      	str	r2, [r3, #8]
      break;
 8006a52:	e04f      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f000 fada 	bl	800701c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a76:	609a      	str	r2, [r3, #8]
      break;
 8006a78:	e03c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f000 fa4e 	bl	8006f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2150      	movs	r1, #80	; 0x50
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 faa7 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 8006a98:	e02c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fa6d 	bl	8006f86 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2160      	movs	r1, #96	; 0x60
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fa97 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e01c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fa2e 	bl	8006f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fa87 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e00c      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f000 fa7e 	bl	8006fe6 <TIM_ITRx_SetConfig>
      break;
 8006aea:	e003      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
      break;
 8006af0:	e000      	b.n	8006af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a34      	ldr	r2, [pc, #208]	; (8006bf4 <TIM_Base_SetConfig+0xe4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00f      	beq.n	8006b48 <TIM_Base_SetConfig+0x38>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d00b      	beq.n	8006b48 <TIM_Base_SetConfig+0x38>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a31      	ldr	r2, [pc, #196]	; (8006bf8 <TIM_Base_SetConfig+0xe8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_Base_SetConfig+0x38>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a30      	ldr	r2, [pc, #192]	; (8006bfc <TIM_Base_SetConfig+0xec>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_Base_SetConfig+0x38>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a2f      	ldr	r2, [pc, #188]	; (8006c00 <TIM_Base_SetConfig+0xf0>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d108      	bne.n	8006b5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a25      	ldr	r2, [pc, #148]	; (8006bf4 <TIM_Base_SetConfig+0xe4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01b      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b68:	d017      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a22      	ldr	r2, [pc, #136]	; (8006bf8 <TIM_Base_SetConfig+0xe8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a21      	ldr	r2, [pc, #132]	; (8006bfc <TIM_Base_SetConfig+0xec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d00f      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a20      	ldr	r2, [pc, #128]	; (8006c00 <TIM_Base_SetConfig+0xf0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d00b      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <TIM_Base_SetConfig+0xf4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d007      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <TIM_Base_SetConfig+0xf8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d003      	beq.n	8006b9a <TIM_Base_SetConfig+0x8a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a1d      	ldr	r2, [pc, #116]	; (8006c0c <TIM_Base_SetConfig+0xfc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a08      	ldr	r2, [pc, #32]	; (8006bf4 <TIM_Base_SetConfig+0xe4>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d103      	bne.n	8006be0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	615a      	str	r2, [r3, #20]
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40000400 	.word	0x40000400
 8006bfc:	40000800 	.word	0x40000800
 8006c00:	40000c00 	.word	0x40000c00
 8006c04:	40014000 	.word	0x40014000
 8006c08:	40014400 	.word	0x40014400
 8006c0c:	40014800 	.word	0x40014800

08006c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f023 0201 	bic.w	r2, r3, #1
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f023 0302 	bic.w	r3, r3, #2
 8006c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <TIM_OC1_SetConfig+0xc8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d10c      	bne.n	8006c86 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	f023 0308 	bic.w	r3, r3, #8
 8006c72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f023 0304 	bic.w	r3, r3, #4
 8006c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <TIM_OC1_SetConfig+0xc8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d111      	bne.n	8006cb2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40010000 	.word	0x40010000

08006cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0210 	bic.w	r2, r3, #16
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	f023 0320 	bic.w	r3, r3, #32
 8006d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a1e      	ldr	r2, [pc, #120]	; (8006db0 <TIM_OC2_SetConfig+0xd4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d10d      	bne.n	8006d58 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a15      	ldr	r2, [pc, #84]	; (8006db0 <TIM_OC2_SetConfig+0xd4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d113      	bne.n	8006d88 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	621a      	str	r2, [r3, #32]
}
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40010000 	.word	0x40010000

08006db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	021b      	lsls	r3, r3, #8
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <TIM_OC3_SetConfig+0xd0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10d      	bne.n	8006e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a14      	ldr	r2, [pc, #80]	; (8006e84 <TIM_OC3_SetConfig+0xd0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d113      	bne.n	8006e5e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	621a      	str	r2, [r3, #32]
}
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	40010000 	.word	0x40010000

08006e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	021b      	lsls	r3, r3, #8
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	031b      	lsls	r3, r3, #12
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a10      	ldr	r2, [pc, #64]	; (8006f24 <TIM_OC4_SetConfig+0x9c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d109      	bne.n	8006efc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	695b      	ldr	r3, [r3, #20]
 8006ef4:	019b      	lsls	r3, r3, #6
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40010000 	.word	0x40010000

08006f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 030a 	bic.w	r3, r3, #10
 8006f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f023 0210 	bic.w	r2, r3, #16
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	031b      	lsls	r3, r3, #12
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	f043 0307 	orr.w	r3, r3, #7
 8007008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	609a      	str	r2, [r3, #8]
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	021a      	lsls	r2, r3, #8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	431a      	orrs	r2, r3
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	4313      	orrs	r3, r2
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	609a      	str	r2, [r3, #8]
}
 8007050:	bf00      	nop
 8007052:	371c      	adds	r7, #28
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800705c:	b480      	push	{r7}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	2201      	movs	r2, #1
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1a      	ldr	r2, [r3, #32]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	43db      	mvns	r3, r3
 800707e:	401a      	ands	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a1a      	ldr	r2, [r3, #32]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	f003 031f 	and.w	r3, r3, #31
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	fa01 f303 	lsl.w	r3, r1, r3
 8007094:	431a      	orrs	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070bc:	2302      	movs	r3, #2
 80070be:	e050      	b.n	8007162 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a1c      	ldr	r2, [pc, #112]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710c:	d013      	beq.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a18      	ldr	r2, [pc, #96]	; (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00e      	beq.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d009      	beq.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a15      	ldr	r2, [pc, #84]	; (800717c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d10c      	bne.n	8007150 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	4313      	orrs	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40010000 	.word	0x40010000
 8007174:	40000400 	.word	0x40000400
 8007178:	40000800 	.word	0x40000800
 800717c:	40000c00 	.word	0x40000c00
 8007180:	40014000 	.word	0x40014000

08007184 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e03f      	b.n	8007216 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d106      	bne.n	80071b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fc fbd2 	bl	8003954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2224      	movs	r2, #36	; 0x24
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f929 	bl	8007420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b08a      	sub	sp, #40	; 0x28
 8007222:	af02      	add	r7, sp, #8
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b20      	cmp	r3, #32
 800723c:	d17c      	bne.n	8007338 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <HAL_UART_Transmit+0x2c>
 8007244:	88fb      	ldrh	r3, [r7, #6]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e075      	b.n	800733a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_UART_Transmit+0x3e>
 8007258:	2302      	movs	r3, #2
 800725a:	e06e      	b.n	800733a <HAL_UART_Transmit+0x11c>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2221      	movs	r2, #33	; 0x21
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007272:	f7fc fd49 	bl	8003d08 <HAL_GetTick>
 8007276:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	88fa      	ldrh	r2, [r7, #6]
 800727c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	88fa      	ldrh	r2, [r7, #6]
 8007282:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728c:	d108      	bne.n	80072a0 <HAL_UART_Transmit+0x82>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	e003      	b.n	80072a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80072b0:	e02a      	b.n	8007308 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2200      	movs	r2, #0
 80072ba:	2180      	movs	r1, #128	; 0x80
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 f840 	bl	8007342 <UART_WaitOnFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e036      	b.n	800733a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10b      	bne.n	80072ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	3302      	adds	r3, #2
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	e007      	b.n	80072fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	3301      	adds	r3, #1
 80072f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072fe:	b29b      	uxth	r3, r3
 8007300:	3b01      	subs	r3, #1
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1cf      	bne.n	80072b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2200      	movs	r2, #0
 800731a:	2140      	movs	r1, #64	; 0x40
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f810 	bl	8007342 <UART_WaitOnFlagUntilTimeout>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e006      	b.n	800733a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b090      	sub	sp, #64	; 0x40
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	603b      	str	r3, [r7, #0]
 800734e:	4613      	mov	r3, r2
 8007350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007352:	e050      	b.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735a:	d04c      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800735c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <UART_WaitOnFlagUntilTimeout+0x30>
 8007362:	f7fc fcd1 	bl	8003d08 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800736e:	429a      	cmp	r2, r3
 8007370:	d241      	bcs.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	330c      	adds	r3, #12
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	e853 3f00 	ldrex	r3, [r3]
 8007380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	330c      	adds	r3, #12
 8007390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007392:	637a      	str	r2, [r7, #52]	; 0x34
 8007394:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800739a:	e841 2300 	strex	r3, r2, [r1]
 800739e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d1e5      	bne.n	8007372 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3314      	adds	r3, #20
 80073ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	e853 3f00 	ldrex	r3, [r3]
 80073b4:	613b      	str	r3, [r7, #16]
   return(result);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f023 0301 	bic.w	r3, r3, #1
 80073bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3314      	adds	r3, #20
 80073c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073c6:	623a      	str	r2, [r7, #32]
 80073c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	69f9      	ldr	r1, [r7, #28]
 80073cc:	6a3a      	ldr	r2, [r7, #32]
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e5      	bne.n	80073a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00f      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	429a      	cmp	r2, r3
 8007404:	bf0c      	ite	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	2300      	movne	r3, #0
 800740a:	b2db      	uxtb	r3, r3
 800740c:	461a      	mov	r2, r3
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	429a      	cmp	r2, r3
 8007412:	d09f      	beq.n	8007354 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3740      	adds	r7, #64	; 0x40
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
	...

08007420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007424:	b0c0      	sub	sp, #256	; 0x100
 8007426:	af00      	add	r7, sp, #0
 8007428:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	68d9      	ldr	r1, [r3, #12]
 800743e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	ea40 0301 	orr.w	r3, r0, r1
 8007448:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	431a      	orrs	r2, r3
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	431a      	orrs	r2, r3
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800746c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007478:	f021 010c 	bic.w	r1, r1, #12
 800747c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007486:	430b      	orrs	r3, r1
 8007488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749a:	6999      	ldr	r1, [r3, #24]
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	ea40 0301 	orr.w	r3, r0, r1
 80074a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	4b8f      	ldr	r3, [pc, #572]	; (80076ec <UART_SetConfig+0x2cc>)
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d005      	beq.n	80074c0 <UART_SetConfig+0xa0>
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4b8d      	ldr	r3, [pc, #564]	; (80076f0 <UART_SetConfig+0x2d0>)
 80074bc:	429a      	cmp	r2, r3
 80074be:	d104      	bne.n	80074ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074c0:	f7fe ffa6 	bl	8006410 <HAL_RCC_GetPCLK2Freq>
 80074c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80074c8:	e003      	b.n	80074d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ca:	f7fe ff8d 	bl	80063e8 <HAL_RCC_GetPCLK1Freq>
 80074ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074dc:	f040 810c 	bne.w	80076f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074f2:	4622      	mov	r2, r4
 80074f4:	462b      	mov	r3, r5
 80074f6:	1891      	adds	r1, r2, r2
 80074f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80074fa:	415b      	adcs	r3, r3
 80074fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007502:	4621      	mov	r1, r4
 8007504:	eb12 0801 	adds.w	r8, r2, r1
 8007508:	4629      	mov	r1, r5
 800750a:	eb43 0901 	adc.w	r9, r3, r1
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800751a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800751e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007522:	4690      	mov	r8, r2
 8007524:	4699      	mov	r9, r3
 8007526:	4623      	mov	r3, r4
 8007528:	eb18 0303 	adds.w	r3, r8, r3
 800752c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007530:	462b      	mov	r3, r5
 8007532:	eb49 0303 	adc.w	r3, r9, r3
 8007536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800753a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007546:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800754a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800754e:	460b      	mov	r3, r1
 8007550:	18db      	adds	r3, r3, r3
 8007552:	653b      	str	r3, [r7, #80]	; 0x50
 8007554:	4613      	mov	r3, r2
 8007556:	eb42 0303 	adc.w	r3, r2, r3
 800755a:	657b      	str	r3, [r7, #84]	; 0x54
 800755c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007560:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007564:	f7f9 fb78 	bl	8000c58 <__aeabi_uldivmod>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4b61      	ldr	r3, [pc, #388]	; (80076f4 <UART_SetConfig+0x2d4>)
 800756e:	fba3 2302 	umull	r2, r3, r3, r2
 8007572:	095b      	lsrs	r3, r3, #5
 8007574:	011c      	lsls	r4, r3, #4
 8007576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800757a:	2200      	movs	r2, #0
 800757c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007580:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007584:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007588:	4642      	mov	r2, r8
 800758a:	464b      	mov	r3, r9
 800758c:	1891      	adds	r1, r2, r2
 800758e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007590:	415b      	adcs	r3, r3
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007594:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007598:	4641      	mov	r1, r8
 800759a:	eb12 0a01 	adds.w	sl, r2, r1
 800759e:	4649      	mov	r1, r9
 80075a0:	eb43 0b01 	adc.w	fp, r3, r1
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075b8:	4692      	mov	sl, r2
 80075ba:	469b      	mov	fp, r3
 80075bc:	4643      	mov	r3, r8
 80075be:	eb1a 0303 	adds.w	r3, sl, r3
 80075c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075c6:	464b      	mov	r3, r9
 80075c8:	eb4b 0303 	adc.w	r3, fp, r3
 80075cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075e4:	460b      	mov	r3, r1
 80075e6:	18db      	adds	r3, r3, r3
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ea:	4613      	mov	r3, r2
 80075ec:	eb42 0303 	adc.w	r3, r2, r3
 80075f0:	647b      	str	r3, [r7, #68]	; 0x44
 80075f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075fa:	f7f9 fb2d 	bl	8000c58 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4611      	mov	r1, r2
 8007604:	4b3b      	ldr	r3, [pc, #236]	; (80076f4 <UART_SetConfig+0x2d4>)
 8007606:	fba3 2301 	umull	r2, r3, r3, r1
 800760a:	095b      	lsrs	r3, r3, #5
 800760c:	2264      	movs	r2, #100	; 0x64
 800760e:	fb02 f303 	mul.w	r3, r2, r3
 8007612:	1acb      	subs	r3, r1, r3
 8007614:	00db      	lsls	r3, r3, #3
 8007616:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800761a:	4b36      	ldr	r3, [pc, #216]	; (80076f4 <UART_SetConfig+0x2d4>)
 800761c:	fba3 2302 	umull	r2, r3, r3, r2
 8007620:	095b      	lsrs	r3, r3, #5
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007628:	441c      	add	r4, r3
 800762a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800762e:	2200      	movs	r2, #0
 8007630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007634:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007638:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800763c:	4642      	mov	r2, r8
 800763e:	464b      	mov	r3, r9
 8007640:	1891      	adds	r1, r2, r2
 8007642:	63b9      	str	r1, [r7, #56]	; 0x38
 8007644:	415b      	adcs	r3, r3
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800764c:	4641      	mov	r1, r8
 800764e:	1851      	adds	r1, r2, r1
 8007650:	6339      	str	r1, [r7, #48]	; 0x30
 8007652:	4649      	mov	r1, r9
 8007654:	414b      	adcs	r3, r1
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
 8007658:	f04f 0200 	mov.w	r2, #0
 800765c:	f04f 0300 	mov.w	r3, #0
 8007660:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007664:	4659      	mov	r1, fp
 8007666:	00cb      	lsls	r3, r1, #3
 8007668:	4651      	mov	r1, sl
 800766a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800766e:	4651      	mov	r1, sl
 8007670:	00ca      	lsls	r2, r1, #3
 8007672:	4610      	mov	r0, r2
 8007674:	4619      	mov	r1, r3
 8007676:	4603      	mov	r3, r0
 8007678:	4642      	mov	r2, r8
 800767a:	189b      	adds	r3, r3, r2
 800767c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007680:	464b      	mov	r3, r9
 8007682:	460a      	mov	r2, r1
 8007684:	eb42 0303 	adc.w	r3, r2, r3
 8007688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800768c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007698:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800769c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076a0:	460b      	mov	r3, r1
 80076a2:	18db      	adds	r3, r3, r3
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076a6:	4613      	mov	r3, r2
 80076a8:	eb42 0303 	adc.w	r3, r2, r3
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076b6:	f7f9 facf 	bl	8000c58 <__aeabi_uldivmod>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <UART_SetConfig+0x2d4>)
 80076c0:	fba3 1302 	umull	r1, r3, r3, r2
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	2164      	movs	r1, #100	; 0x64
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	3332      	adds	r3, #50	; 0x32
 80076d2:	4a08      	ldr	r2, [pc, #32]	; (80076f4 <UART_SetConfig+0x2d4>)
 80076d4:	fba2 2303 	umull	r2, r3, r2, r3
 80076d8:	095b      	lsrs	r3, r3, #5
 80076da:	f003 0207 	and.w	r2, r3, #7
 80076de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4422      	add	r2, r4
 80076e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076e8:	e105      	b.n	80078f6 <UART_SetConfig+0x4d6>
 80076ea:	bf00      	nop
 80076ec:	40011000 	.word	0x40011000
 80076f0:	40011400 	.word	0x40011400
 80076f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007702:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007706:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800770a:	4642      	mov	r2, r8
 800770c:	464b      	mov	r3, r9
 800770e:	1891      	adds	r1, r2, r2
 8007710:	6239      	str	r1, [r7, #32]
 8007712:	415b      	adcs	r3, r3
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
 8007716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800771a:	4641      	mov	r1, r8
 800771c:	1854      	adds	r4, r2, r1
 800771e:	4649      	mov	r1, r9
 8007720:	eb43 0501 	adc.w	r5, r3, r1
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	f04f 0300 	mov.w	r3, #0
 800772c:	00eb      	lsls	r3, r5, #3
 800772e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007732:	00e2      	lsls	r2, r4, #3
 8007734:	4614      	mov	r4, r2
 8007736:	461d      	mov	r5, r3
 8007738:	4643      	mov	r3, r8
 800773a:	18e3      	adds	r3, r4, r3
 800773c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007740:	464b      	mov	r3, r9
 8007742:	eb45 0303 	adc.w	r3, r5, r3
 8007746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007756:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800775a:	f04f 0200 	mov.w	r2, #0
 800775e:	f04f 0300 	mov.w	r3, #0
 8007762:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007766:	4629      	mov	r1, r5
 8007768:	008b      	lsls	r3, r1, #2
 800776a:	4621      	mov	r1, r4
 800776c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007770:	4621      	mov	r1, r4
 8007772:	008a      	lsls	r2, r1, #2
 8007774:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007778:	f7f9 fa6e 	bl	8000c58 <__aeabi_uldivmod>
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4b60      	ldr	r3, [pc, #384]	; (8007904 <UART_SetConfig+0x4e4>)
 8007782:	fba3 2302 	umull	r2, r3, r3, r2
 8007786:	095b      	lsrs	r3, r3, #5
 8007788:	011c      	lsls	r4, r3, #4
 800778a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800778e:	2200      	movs	r2, #0
 8007790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007794:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007798:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800779c:	4642      	mov	r2, r8
 800779e:	464b      	mov	r3, r9
 80077a0:	1891      	adds	r1, r2, r2
 80077a2:	61b9      	str	r1, [r7, #24]
 80077a4:	415b      	adcs	r3, r3
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077ac:	4641      	mov	r1, r8
 80077ae:	1851      	adds	r1, r2, r1
 80077b0:	6139      	str	r1, [r7, #16]
 80077b2:	4649      	mov	r1, r9
 80077b4:	414b      	adcs	r3, r1
 80077b6:	617b      	str	r3, [r7, #20]
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077c4:	4659      	mov	r1, fp
 80077c6:	00cb      	lsls	r3, r1, #3
 80077c8:	4651      	mov	r1, sl
 80077ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077ce:	4651      	mov	r1, sl
 80077d0:	00ca      	lsls	r2, r1, #3
 80077d2:	4610      	mov	r0, r2
 80077d4:	4619      	mov	r1, r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	4642      	mov	r2, r8
 80077da:	189b      	adds	r3, r3, r2
 80077dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077e0:	464b      	mov	r3, r9
 80077e2:	460a      	mov	r2, r1
 80077e4:	eb42 0303 	adc.w	r3, r2, r3
 80077e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80077f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007804:	4649      	mov	r1, r9
 8007806:	008b      	lsls	r3, r1, #2
 8007808:	4641      	mov	r1, r8
 800780a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800780e:	4641      	mov	r1, r8
 8007810:	008a      	lsls	r2, r1, #2
 8007812:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007816:	f7f9 fa1f 	bl	8000c58 <__aeabi_uldivmod>
 800781a:	4602      	mov	r2, r0
 800781c:	460b      	mov	r3, r1
 800781e:	4b39      	ldr	r3, [pc, #228]	; (8007904 <UART_SetConfig+0x4e4>)
 8007820:	fba3 1302 	umull	r1, r3, r3, r2
 8007824:	095b      	lsrs	r3, r3, #5
 8007826:	2164      	movs	r1, #100	; 0x64
 8007828:	fb01 f303 	mul.w	r3, r1, r3
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	3332      	adds	r3, #50	; 0x32
 8007832:	4a34      	ldr	r2, [pc, #208]	; (8007904 <UART_SetConfig+0x4e4>)
 8007834:	fba2 2303 	umull	r2, r3, r2, r3
 8007838:	095b      	lsrs	r3, r3, #5
 800783a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800783e:	441c      	add	r4, r3
 8007840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007844:	2200      	movs	r2, #0
 8007846:	673b      	str	r3, [r7, #112]	; 0x70
 8007848:	677a      	str	r2, [r7, #116]	; 0x74
 800784a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800784e:	4642      	mov	r2, r8
 8007850:	464b      	mov	r3, r9
 8007852:	1891      	adds	r1, r2, r2
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	415b      	adcs	r3, r3
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800785e:	4641      	mov	r1, r8
 8007860:	1851      	adds	r1, r2, r1
 8007862:	6039      	str	r1, [r7, #0]
 8007864:	4649      	mov	r1, r9
 8007866:	414b      	adcs	r3, r1
 8007868:	607b      	str	r3, [r7, #4]
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007876:	4659      	mov	r1, fp
 8007878:	00cb      	lsls	r3, r1, #3
 800787a:	4651      	mov	r1, sl
 800787c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007880:	4651      	mov	r1, sl
 8007882:	00ca      	lsls	r2, r1, #3
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	4603      	mov	r3, r0
 800788a:	4642      	mov	r2, r8
 800788c:	189b      	adds	r3, r3, r2
 800788e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007890:	464b      	mov	r3, r9
 8007892:	460a      	mov	r2, r1
 8007894:	eb42 0303 	adc.w	r3, r2, r3
 8007898:	66fb      	str	r3, [r7, #108]	; 0x6c
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	663b      	str	r3, [r7, #96]	; 0x60
 80078a4:	667a      	str	r2, [r7, #100]	; 0x64
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	f04f 0300 	mov.w	r3, #0
 80078ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078b2:	4649      	mov	r1, r9
 80078b4:	008b      	lsls	r3, r1, #2
 80078b6:	4641      	mov	r1, r8
 80078b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078bc:	4641      	mov	r1, r8
 80078be:	008a      	lsls	r2, r1, #2
 80078c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078c4:	f7f9 f9c8 	bl	8000c58 <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <UART_SetConfig+0x4e4>)
 80078ce:	fba3 1302 	umull	r1, r3, r3, r2
 80078d2:	095b      	lsrs	r3, r3, #5
 80078d4:	2164      	movs	r1, #100	; 0x64
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	3332      	adds	r3, #50	; 0x32
 80078e0:	4a08      	ldr	r2, [pc, #32]	; (8007904 <UART_SetConfig+0x4e4>)
 80078e2:	fba2 2303 	umull	r2, r3, r2, r3
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4422      	add	r2, r4
 80078f4:	609a      	str	r2, [r3, #8]
}
 80078f6:	bf00      	nop
 80078f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078fc:	46bd      	mov	sp, r7
 80078fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007902:	bf00      	nop
 8007904:	51eb851f 	.word	0x51eb851f

08007908 <__errno>:
 8007908:	4b01      	ldr	r3, [pc, #4]	; (8007910 <__errno+0x8>)
 800790a:	6818      	ldr	r0, [r3, #0]
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000018 	.word	0x20000018

08007914 <__libc_init_array>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	4d0d      	ldr	r5, [pc, #52]	; (800794c <__libc_init_array+0x38>)
 8007918:	4c0d      	ldr	r4, [pc, #52]	; (8007950 <__libc_init_array+0x3c>)
 800791a:	1b64      	subs	r4, r4, r5
 800791c:	10a4      	asrs	r4, r4, #2
 800791e:	2600      	movs	r6, #0
 8007920:	42a6      	cmp	r6, r4
 8007922:	d109      	bne.n	8007938 <__libc_init_array+0x24>
 8007924:	4d0b      	ldr	r5, [pc, #44]	; (8007954 <__libc_init_array+0x40>)
 8007926:	4c0c      	ldr	r4, [pc, #48]	; (8007958 <__libc_init_array+0x44>)
 8007928:	f003 f9ba 	bl	800aca0 <_init>
 800792c:	1b64      	subs	r4, r4, r5
 800792e:	10a4      	asrs	r4, r4, #2
 8007930:	2600      	movs	r6, #0
 8007932:	42a6      	cmp	r6, r4
 8007934:	d105      	bne.n	8007942 <__libc_init_array+0x2e>
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	f855 3b04 	ldr.w	r3, [r5], #4
 800793c:	4798      	blx	r3
 800793e:	3601      	adds	r6, #1
 8007940:	e7ee      	b.n	8007920 <__libc_init_array+0xc>
 8007942:	f855 3b04 	ldr.w	r3, [r5], #4
 8007946:	4798      	blx	r3
 8007948:	3601      	adds	r6, #1
 800794a:	e7f2      	b.n	8007932 <__libc_init_array+0x1e>
 800794c:	0800b234 	.word	0x0800b234
 8007950:	0800b234 	.word	0x0800b234
 8007954:	0800b234 	.word	0x0800b234
 8007958:	0800b238 	.word	0x0800b238

0800795c <memset>:
 800795c:	4402      	add	r2, r0
 800795e:	4603      	mov	r3, r0
 8007960:	4293      	cmp	r3, r2
 8007962:	d100      	bne.n	8007966 <memset+0xa>
 8007964:	4770      	bx	lr
 8007966:	f803 1b01 	strb.w	r1, [r3], #1
 800796a:	e7f9      	b.n	8007960 <memset+0x4>

0800796c <__cvt>:
 800796c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007970:	ec55 4b10 	vmov	r4, r5, d0
 8007974:	2d00      	cmp	r5, #0
 8007976:	460e      	mov	r6, r1
 8007978:	4619      	mov	r1, r3
 800797a:	462b      	mov	r3, r5
 800797c:	bfbb      	ittet	lt
 800797e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007982:	461d      	movlt	r5, r3
 8007984:	2300      	movge	r3, #0
 8007986:	232d      	movlt	r3, #45	; 0x2d
 8007988:	700b      	strb	r3, [r1, #0]
 800798a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007990:	4691      	mov	r9, r2
 8007992:	f023 0820 	bic.w	r8, r3, #32
 8007996:	bfbc      	itt	lt
 8007998:	4622      	movlt	r2, r4
 800799a:	4614      	movlt	r4, r2
 800799c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079a0:	d005      	beq.n	80079ae <__cvt+0x42>
 80079a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079a6:	d100      	bne.n	80079aa <__cvt+0x3e>
 80079a8:	3601      	adds	r6, #1
 80079aa:	2102      	movs	r1, #2
 80079ac:	e000      	b.n	80079b0 <__cvt+0x44>
 80079ae:	2103      	movs	r1, #3
 80079b0:	ab03      	add	r3, sp, #12
 80079b2:	9301      	str	r3, [sp, #4]
 80079b4:	ab02      	add	r3, sp, #8
 80079b6:	9300      	str	r3, [sp, #0]
 80079b8:	ec45 4b10 	vmov	d0, r4, r5
 80079bc:	4653      	mov	r3, sl
 80079be:	4632      	mov	r2, r6
 80079c0:	f000 fcea 	bl	8008398 <_dtoa_r>
 80079c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079c8:	4607      	mov	r7, r0
 80079ca:	d102      	bne.n	80079d2 <__cvt+0x66>
 80079cc:	f019 0f01 	tst.w	r9, #1
 80079d0:	d022      	beq.n	8007a18 <__cvt+0xac>
 80079d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079d6:	eb07 0906 	add.w	r9, r7, r6
 80079da:	d110      	bne.n	80079fe <__cvt+0x92>
 80079dc:	783b      	ldrb	r3, [r7, #0]
 80079de:	2b30      	cmp	r3, #48	; 0x30
 80079e0:	d10a      	bne.n	80079f8 <__cvt+0x8c>
 80079e2:	2200      	movs	r2, #0
 80079e4:	2300      	movs	r3, #0
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f9 f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80079ee:	b918      	cbnz	r0, 80079f8 <__cvt+0x8c>
 80079f0:	f1c6 0601 	rsb	r6, r6, #1
 80079f4:	f8ca 6000 	str.w	r6, [sl]
 80079f8:	f8da 3000 	ldr.w	r3, [sl]
 80079fc:	4499      	add	r9, r3
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4620      	mov	r0, r4
 8007a04:	4629      	mov	r1, r5
 8007a06:	f7f9 f867 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a0a:	b108      	cbz	r0, 8007a10 <__cvt+0xa4>
 8007a0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a10:	2230      	movs	r2, #48	; 0x30
 8007a12:	9b03      	ldr	r3, [sp, #12]
 8007a14:	454b      	cmp	r3, r9
 8007a16:	d307      	bcc.n	8007a28 <__cvt+0xbc>
 8007a18:	9b03      	ldr	r3, [sp, #12]
 8007a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a1c:	1bdb      	subs	r3, r3, r7
 8007a1e:	4638      	mov	r0, r7
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	b004      	add	sp, #16
 8007a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a28:	1c59      	adds	r1, r3, #1
 8007a2a:	9103      	str	r1, [sp, #12]
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e7f0      	b.n	8007a12 <__cvt+0xa6>

08007a30 <__exponent>:
 8007a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a32:	4603      	mov	r3, r0
 8007a34:	2900      	cmp	r1, #0
 8007a36:	bfb8      	it	lt
 8007a38:	4249      	neglt	r1, r1
 8007a3a:	f803 2b02 	strb.w	r2, [r3], #2
 8007a3e:	bfb4      	ite	lt
 8007a40:	222d      	movlt	r2, #45	; 0x2d
 8007a42:	222b      	movge	r2, #43	; 0x2b
 8007a44:	2909      	cmp	r1, #9
 8007a46:	7042      	strb	r2, [r0, #1]
 8007a48:	dd2a      	ble.n	8007aa0 <__exponent+0x70>
 8007a4a:	f10d 0407 	add.w	r4, sp, #7
 8007a4e:	46a4      	mov	ip, r4
 8007a50:	270a      	movs	r7, #10
 8007a52:	46a6      	mov	lr, r4
 8007a54:	460a      	mov	r2, r1
 8007a56:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a5a:	fb07 1516 	mls	r5, r7, r6, r1
 8007a5e:	3530      	adds	r5, #48	; 0x30
 8007a60:	2a63      	cmp	r2, #99	; 0x63
 8007a62:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007a66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	dcf1      	bgt.n	8007a52 <__exponent+0x22>
 8007a6e:	3130      	adds	r1, #48	; 0x30
 8007a70:	f1ae 0502 	sub.w	r5, lr, #2
 8007a74:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007a78:	1c44      	adds	r4, r0, #1
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4561      	cmp	r1, ip
 8007a7e:	d30a      	bcc.n	8007a96 <__exponent+0x66>
 8007a80:	f10d 0209 	add.w	r2, sp, #9
 8007a84:	eba2 020e 	sub.w	r2, r2, lr
 8007a88:	4565      	cmp	r5, ip
 8007a8a:	bf88      	it	hi
 8007a8c:	2200      	movhi	r2, #0
 8007a8e:	4413      	add	r3, r2
 8007a90:	1a18      	subs	r0, r3, r0
 8007a92:	b003      	add	sp, #12
 8007a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007a9e:	e7ed      	b.n	8007a7c <__exponent+0x4c>
 8007aa0:	2330      	movs	r3, #48	; 0x30
 8007aa2:	3130      	adds	r1, #48	; 0x30
 8007aa4:	7083      	strb	r3, [r0, #2]
 8007aa6:	70c1      	strb	r1, [r0, #3]
 8007aa8:	1d03      	adds	r3, r0, #4
 8007aaa:	e7f1      	b.n	8007a90 <__exponent+0x60>

08007aac <_printf_float>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	ed2d 8b02 	vpush	{d8}
 8007ab4:	b08d      	sub	sp, #52	; 0x34
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007abc:	4616      	mov	r6, r2
 8007abe:	461f      	mov	r7, r3
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	f001 fa57 	bl	8008f74 <_localeconv_r>
 8007ac6:	f8d0 a000 	ldr.w	sl, [r0]
 8007aca:	4650      	mov	r0, sl
 8007acc:	f7f8 fb88 	bl	80001e0 <strlen>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	9305      	str	r3, [sp, #20]
 8007ad8:	f8d8 3000 	ldr.w	r3, [r8]
 8007adc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ae0:	3307      	adds	r3, #7
 8007ae2:	f023 0307 	bic.w	r3, r3, #7
 8007ae6:	f103 0208 	add.w	r2, r3, #8
 8007aea:	f8c8 2000 	str.w	r2, [r8]
 8007aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007af6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b04:	ee08 0a10 	vmov	s16, r0
 8007b08:	4b9f      	ldr	r3, [pc, #636]	; (8007d88 <_printf_float+0x2dc>)
 8007b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b12:	f7f9 f813 	bl	8000b3c <__aeabi_dcmpun>
 8007b16:	bb88      	cbnz	r0, 8007b7c <_printf_float+0xd0>
 8007b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b1c:	4b9a      	ldr	r3, [pc, #616]	; (8007d88 <_printf_float+0x2dc>)
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b22:	f7f8 ffed 	bl	8000b00 <__aeabi_dcmple>
 8007b26:	bb48      	cbnz	r0, 8007b7c <_printf_float+0xd0>
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	4649      	mov	r1, r9
 8007b30:	f7f8 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8007b34:	b110      	cbz	r0, 8007b3c <_printf_float+0x90>
 8007b36:	232d      	movs	r3, #45	; 0x2d
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	4b93      	ldr	r3, [pc, #588]	; (8007d8c <_printf_float+0x2e0>)
 8007b3e:	4894      	ldr	r0, [pc, #592]	; (8007d90 <_printf_float+0x2e4>)
 8007b40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b44:	bf94      	ite	ls
 8007b46:	4698      	movls	r8, r3
 8007b48:	4680      	movhi	r8, r0
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	6123      	str	r3, [r4, #16]
 8007b4e:	9b05      	ldr	r3, [sp, #20]
 8007b50:	f023 0204 	bic.w	r2, r3, #4
 8007b54:	6022      	str	r2, [r4, #0]
 8007b56:	f04f 0900 	mov.w	r9, #0
 8007b5a:	9700      	str	r7, [sp, #0]
 8007b5c:	4633      	mov	r3, r6
 8007b5e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 f9d8 	bl	8007f18 <_printf_common>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f040 8090 	bne.w	8007c8e <_printf_float+0x1e2>
 8007b6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b72:	b00d      	add	sp, #52	; 0x34
 8007b74:	ecbd 8b02 	vpop	{d8}
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	4640      	mov	r0, r8
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ffda 	bl	8000b3c <__aeabi_dcmpun>
 8007b88:	b140      	cbz	r0, 8007b9c <_printf_float+0xf0>
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	bfbc      	itt	lt
 8007b90:	232d      	movlt	r3, #45	; 0x2d
 8007b92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b96:	487f      	ldr	r0, [pc, #508]	; (8007d94 <_printf_float+0x2e8>)
 8007b98:	4b7f      	ldr	r3, [pc, #508]	; (8007d98 <_printf_float+0x2ec>)
 8007b9a:	e7d1      	b.n	8007b40 <_printf_float+0x94>
 8007b9c:	6863      	ldr	r3, [r4, #4]
 8007b9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ba2:	9206      	str	r2, [sp, #24]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	d13f      	bne.n	8007c28 <_printf_float+0x17c>
 8007ba8:	2306      	movs	r3, #6
 8007baa:	6063      	str	r3, [r4, #4]
 8007bac:	9b05      	ldr	r3, [sp, #20]
 8007bae:	6861      	ldr	r1, [r4, #4]
 8007bb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	ab0a      	add	r3, sp, #40	; 0x28
 8007bba:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bbe:	ab09      	add	r3, sp, #36	; 0x24
 8007bc0:	ec49 8b10 	vmov	d0, r8, r9
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	6022      	str	r2, [r4, #0]
 8007bc8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f7ff fecd 	bl	800796c <__cvt>
 8007bd2:	9b06      	ldr	r3, [sp, #24]
 8007bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bd6:	2b47      	cmp	r3, #71	; 0x47
 8007bd8:	4680      	mov	r8, r0
 8007bda:	d108      	bne.n	8007bee <_printf_float+0x142>
 8007bdc:	1cc8      	adds	r0, r1, #3
 8007bde:	db02      	blt.n	8007be6 <_printf_float+0x13a>
 8007be0:	6863      	ldr	r3, [r4, #4]
 8007be2:	4299      	cmp	r1, r3
 8007be4:	dd41      	ble.n	8007c6a <_printf_float+0x1be>
 8007be6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007bea:	fa5f fb8b 	uxtb.w	fp, fp
 8007bee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bf2:	d820      	bhi.n	8007c36 <_printf_float+0x18a>
 8007bf4:	3901      	subs	r1, #1
 8007bf6:	465a      	mov	r2, fp
 8007bf8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bfc:	9109      	str	r1, [sp, #36]	; 0x24
 8007bfe:	f7ff ff17 	bl	8007a30 <__exponent>
 8007c02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c04:	1813      	adds	r3, r2, r0
 8007c06:	2a01      	cmp	r2, #1
 8007c08:	4681      	mov	r9, r0
 8007c0a:	6123      	str	r3, [r4, #16]
 8007c0c:	dc02      	bgt.n	8007c14 <_printf_float+0x168>
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	07d2      	lsls	r2, r2, #31
 8007c12:	d501      	bpl.n	8007c18 <_printf_float+0x16c>
 8007c14:	3301      	adds	r3, #1
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d09c      	beq.n	8007b5a <_printf_float+0xae>
 8007c20:	232d      	movs	r3, #45	; 0x2d
 8007c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c26:	e798      	b.n	8007b5a <_printf_float+0xae>
 8007c28:	9a06      	ldr	r2, [sp, #24]
 8007c2a:	2a47      	cmp	r2, #71	; 0x47
 8007c2c:	d1be      	bne.n	8007bac <_printf_float+0x100>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1bc      	bne.n	8007bac <_printf_float+0x100>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e7b9      	b.n	8007baa <_printf_float+0xfe>
 8007c36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c3a:	d118      	bne.n	8007c6e <_printf_float+0x1c2>
 8007c3c:	2900      	cmp	r1, #0
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	dd0b      	ble.n	8007c5a <_printf_float+0x1ae>
 8007c42:	6121      	str	r1, [r4, #16]
 8007c44:	b913      	cbnz	r3, 8007c4c <_printf_float+0x1a0>
 8007c46:	6822      	ldr	r2, [r4, #0]
 8007c48:	07d0      	lsls	r0, r2, #31
 8007c4a:	d502      	bpl.n	8007c52 <_printf_float+0x1a6>
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	440b      	add	r3, r1
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c54:	f04f 0900 	mov.w	r9, #0
 8007c58:	e7de      	b.n	8007c18 <_printf_float+0x16c>
 8007c5a:	b913      	cbnz	r3, 8007c62 <_printf_float+0x1b6>
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	07d2      	lsls	r2, r2, #31
 8007c60:	d501      	bpl.n	8007c66 <_printf_float+0x1ba>
 8007c62:	3302      	adds	r3, #2
 8007c64:	e7f4      	b.n	8007c50 <_printf_float+0x1a4>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e7f2      	b.n	8007c50 <_printf_float+0x1a4>
 8007c6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c70:	4299      	cmp	r1, r3
 8007c72:	db05      	blt.n	8007c80 <_printf_float+0x1d4>
 8007c74:	6823      	ldr	r3, [r4, #0]
 8007c76:	6121      	str	r1, [r4, #16]
 8007c78:	07d8      	lsls	r0, r3, #31
 8007c7a:	d5ea      	bpl.n	8007c52 <_printf_float+0x1a6>
 8007c7c:	1c4b      	adds	r3, r1, #1
 8007c7e:	e7e7      	b.n	8007c50 <_printf_float+0x1a4>
 8007c80:	2900      	cmp	r1, #0
 8007c82:	bfd4      	ite	le
 8007c84:	f1c1 0202 	rsble	r2, r1, #2
 8007c88:	2201      	movgt	r2, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	e7e0      	b.n	8007c50 <_printf_float+0x1a4>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	055a      	lsls	r2, r3, #21
 8007c92:	d407      	bmi.n	8007ca4 <_printf_float+0x1f8>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	4642      	mov	r2, r8
 8007c98:	4631      	mov	r1, r6
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	47b8      	blx	r7
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d12c      	bne.n	8007cfc <_printf_float+0x250>
 8007ca2:	e764      	b.n	8007b6e <_printf_float+0xc2>
 8007ca4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ca8:	f240 80e0 	bls.w	8007e6c <_printf_float+0x3c0>
 8007cac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	f7f8 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d034      	beq.n	8007d26 <_printf_float+0x27a>
 8007cbc:	4a37      	ldr	r2, [pc, #220]	; (8007d9c <_printf_float+0x2f0>)
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	47b8      	blx	r7
 8007cc6:	3001      	adds	r0, #1
 8007cc8:	f43f af51 	beq.w	8007b6e <_printf_float+0xc2>
 8007ccc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	db02      	blt.n	8007cda <_printf_float+0x22e>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	07d8      	lsls	r0, r3, #31
 8007cd8:	d510      	bpl.n	8007cfc <_printf_float+0x250>
 8007cda:	ee18 3a10 	vmov	r3, s16
 8007cde:	4652      	mov	r2, sl
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f43f af41 	beq.w	8007b6e <_printf_float+0xc2>
 8007cec:	f04f 0800 	mov.w	r8, #0
 8007cf0:	f104 091a 	add.w	r9, r4, #26
 8007cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	4543      	cmp	r3, r8
 8007cfa:	dc09      	bgt.n	8007d10 <_printf_float+0x264>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	079b      	lsls	r3, r3, #30
 8007d00:	f100 8105 	bmi.w	8007f0e <_printf_float+0x462>
 8007d04:	68e0      	ldr	r0, [r4, #12]
 8007d06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d08:	4298      	cmp	r0, r3
 8007d0a:	bfb8      	it	lt
 8007d0c:	4618      	movlt	r0, r3
 8007d0e:	e730      	b.n	8007b72 <_printf_float+0xc6>
 8007d10:	2301      	movs	r3, #1
 8007d12:	464a      	mov	r2, r9
 8007d14:	4631      	mov	r1, r6
 8007d16:	4628      	mov	r0, r5
 8007d18:	47b8      	blx	r7
 8007d1a:	3001      	adds	r0, #1
 8007d1c:	f43f af27 	beq.w	8007b6e <_printf_float+0xc2>
 8007d20:	f108 0801 	add.w	r8, r8, #1
 8007d24:	e7e6      	b.n	8007cf4 <_printf_float+0x248>
 8007d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	dc39      	bgt.n	8007da0 <_printf_float+0x2f4>
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <_printf_float+0x2f0>)
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4631      	mov	r1, r6
 8007d32:	4628      	mov	r0, r5
 8007d34:	47b8      	blx	r7
 8007d36:	3001      	adds	r0, #1
 8007d38:	f43f af19 	beq.w	8007b6e <_printf_float+0xc2>
 8007d3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d40:	4313      	orrs	r3, r2
 8007d42:	d102      	bne.n	8007d4a <_printf_float+0x29e>
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	07d9      	lsls	r1, r3, #31
 8007d48:	d5d8      	bpl.n	8007cfc <_printf_float+0x250>
 8007d4a:	ee18 3a10 	vmov	r3, s16
 8007d4e:	4652      	mov	r2, sl
 8007d50:	4631      	mov	r1, r6
 8007d52:	4628      	mov	r0, r5
 8007d54:	47b8      	blx	r7
 8007d56:	3001      	adds	r0, #1
 8007d58:	f43f af09 	beq.w	8007b6e <_printf_float+0xc2>
 8007d5c:	f04f 0900 	mov.w	r9, #0
 8007d60:	f104 0a1a 	add.w	sl, r4, #26
 8007d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d66:	425b      	negs	r3, r3
 8007d68:	454b      	cmp	r3, r9
 8007d6a:	dc01      	bgt.n	8007d70 <_printf_float+0x2c4>
 8007d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6e:	e792      	b.n	8007c96 <_printf_float+0x1ea>
 8007d70:	2301      	movs	r3, #1
 8007d72:	4652      	mov	r2, sl
 8007d74:	4631      	mov	r1, r6
 8007d76:	4628      	mov	r0, r5
 8007d78:	47b8      	blx	r7
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	f43f aef7 	beq.w	8007b6e <_printf_float+0xc2>
 8007d80:	f109 0901 	add.w	r9, r9, #1
 8007d84:	e7ee      	b.n	8007d64 <_printf_float+0x2b8>
 8007d86:	bf00      	nop
 8007d88:	7fefffff 	.word	0x7fefffff
 8007d8c:	0800ae1c 	.word	0x0800ae1c
 8007d90:	0800ae20 	.word	0x0800ae20
 8007d94:	0800ae28 	.word	0x0800ae28
 8007d98:	0800ae24 	.word	0x0800ae24
 8007d9c:	0800ae2c 	.word	0x0800ae2c
 8007da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007da4:	429a      	cmp	r2, r3
 8007da6:	bfa8      	it	ge
 8007da8:	461a      	movge	r2, r3
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	4691      	mov	r9, r2
 8007dae:	dc37      	bgt.n	8007e20 <_printf_float+0x374>
 8007db0:	f04f 0b00 	mov.w	fp, #0
 8007db4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007db8:	f104 021a 	add.w	r2, r4, #26
 8007dbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dbe:	9305      	str	r3, [sp, #20]
 8007dc0:	eba3 0309 	sub.w	r3, r3, r9
 8007dc4:	455b      	cmp	r3, fp
 8007dc6:	dc33      	bgt.n	8007e30 <_printf_float+0x384>
 8007dc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	db3b      	blt.n	8007e48 <_printf_float+0x39c>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	07da      	lsls	r2, r3, #31
 8007dd4:	d438      	bmi.n	8007e48 <_printf_float+0x39c>
 8007dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dd8:	9a05      	ldr	r2, [sp, #20]
 8007dda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ddc:	1a9a      	subs	r2, r3, r2
 8007dde:	eba3 0901 	sub.w	r9, r3, r1
 8007de2:	4591      	cmp	r9, r2
 8007de4:	bfa8      	it	ge
 8007de6:	4691      	movge	r9, r2
 8007de8:	f1b9 0f00 	cmp.w	r9, #0
 8007dec:	dc35      	bgt.n	8007e5a <_printf_float+0x3ae>
 8007dee:	f04f 0800 	mov.w	r8, #0
 8007df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df6:	f104 0a1a 	add.w	sl, r4, #26
 8007dfa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dfe:	1a9b      	subs	r3, r3, r2
 8007e00:	eba3 0309 	sub.w	r3, r3, r9
 8007e04:	4543      	cmp	r3, r8
 8007e06:	f77f af79 	ble.w	8007cfc <_printf_float+0x250>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4628      	mov	r0, r5
 8007e12:	47b8      	blx	r7
 8007e14:	3001      	adds	r0, #1
 8007e16:	f43f aeaa 	beq.w	8007b6e <_printf_float+0xc2>
 8007e1a:	f108 0801 	add.w	r8, r8, #1
 8007e1e:	e7ec      	b.n	8007dfa <_printf_float+0x34e>
 8007e20:	4613      	mov	r3, r2
 8007e22:	4631      	mov	r1, r6
 8007e24:	4642      	mov	r2, r8
 8007e26:	4628      	mov	r0, r5
 8007e28:	47b8      	blx	r7
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d1c0      	bne.n	8007db0 <_printf_float+0x304>
 8007e2e:	e69e      	b.n	8007b6e <_printf_float+0xc2>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	9205      	str	r2, [sp, #20]
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f ae97 	beq.w	8007b6e <_printf_float+0xc2>
 8007e40:	9a05      	ldr	r2, [sp, #20]
 8007e42:	f10b 0b01 	add.w	fp, fp, #1
 8007e46:	e7b9      	b.n	8007dbc <_printf_float+0x310>
 8007e48:	ee18 3a10 	vmov	r3, s16
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	d1be      	bne.n	8007dd6 <_printf_float+0x32a>
 8007e58:	e689      	b.n	8007b6e <_printf_float+0xc2>
 8007e5a:	9a05      	ldr	r2, [sp, #20]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	4442      	add	r2, r8
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b8      	blx	r7
 8007e66:	3001      	adds	r0, #1
 8007e68:	d1c1      	bne.n	8007dee <_printf_float+0x342>
 8007e6a:	e680      	b.n	8007b6e <_printf_float+0xc2>
 8007e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e6e:	2a01      	cmp	r2, #1
 8007e70:	dc01      	bgt.n	8007e76 <_printf_float+0x3ca>
 8007e72:	07db      	lsls	r3, r3, #31
 8007e74:	d538      	bpl.n	8007ee8 <_printf_float+0x43c>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4642      	mov	r2, r8
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	47b8      	blx	r7
 8007e80:	3001      	adds	r0, #1
 8007e82:	f43f ae74 	beq.w	8007b6e <_printf_float+0xc2>
 8007e86:	ee18 3a10 	vmov	r3, s16
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4628      	mov	r0, r5
 8007e90:	47b8      	blx	r7
 8007e92:	3001      	adds	r0, #1
 8007e94:	f43f ae6b 	beq.w	8007b6e <_printf_float+0xc2>
 8007e98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f7f8 fe1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea4:	b9d8      	cbnz	r0, 8007ede <_printf_float+0x432>
 8007ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea8:	f108 0201 	add.w	r2, r8, #1
 8007eac:	3b01      	subs	r3, #1
 8007eae:	4631      	mov	r1, r6
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	47b8      	blx	r7
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d10e      	bne.n	8007ed6 <_printf_float+0x42a>
 8007eb8:	e659      	b.n	8007b6e <_printf_float+0xc2>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	4631      	mov	r1, r6
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	47b8      	blx	r7
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	f43f ae52 	beq.w	8007b6e <_printf_float+0xc2>
 8007eca:	f108 0801 	add.w	r8, r8, #1
 8007ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	4543      	cmp	r3, r8
 8007ed4:	dcf1      	bgt.n	8007eba <_printf_float+0x40e>
 8007ed6:	464b      	mov	r3, r9
 8007ed8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007edc:	e6dc      	b.n	8007c98 <_printf_float+0x1ec>
 8007ede:	f04f 0800 	mov.w	r8, #0
 8007ee2:	f104 0a1a 	add.w	sl, r4, #26
 8007ee6:	e7f2      	b.n	8007ece <_printf_float+0x422>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4642      	mov	r2, r8
 8007eec:	e7df      	b.n	8007eae <_printf_float+0x402>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	464a      	mov	r2, r9
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b8      	blx	r7
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f43f ae38 	beq.w	8007b6e <_printf_float+0xc2>
 8007efe:	f108 0801 	add.w	r8, r8, #1
 8007f02:	68e3      	ldr	r3, [r4, #12]
 8007f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f06:	1a5b      	subs	r3, r3, r1
 8007f08:	4543      	cmp	r3, r8
 8007f0a:	dcf0      	bgt.n	8007eee <_printf_float+0x442>
 8007f0c:	e6fa      	b.n	8007d04 <_printf_float+0x258>
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	f104 0919 	add.w	r9, r4, #25
 8007f16:	e7f4      	b.n	8007f02 <_printf_float+0x456>

08007f18 <_printf_common>:
 8007f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1c:	4616      	mov	r6, r2
 8007f1e:	4699      	mov	r9, r3
 8007f20:	688a      	ldr	r2, [r1, #8]
 8007f22:	690b      	ldr	r3, [r1, #16]
 8007f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	bfb8      	it	lt
 8007f2c:	4613      	movlt	r3, r2
 8007f2e:	6033      	str	r3, [r6, #0]
 8007f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f34:	4607      	mov	r7, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	b10a      	cbz	r2, 8007f3e <_printf_common+0x26>
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	6033      	str	r3, [r6, #0]
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	0699      	lsls	r1, r3, #26
 8007f42:	bf42      	ittt	mi
 8007f44:	6833      	ldrmi	r3, [r6, #0]
 8007f46:	3302      	addmi	r3, #2
 8007f48:	6033      	strmi	r3, [r6, #0]
 8007f4a:	6825      	ldr	r5, [r4, #0]
 8007f4c:	f015 0506 	ands.w	r5, r5, #6
 8007f50:	d106      	bne.n	8007f60 <_printf_common+0x48>
 8007f52:	f104 0a19 	add.w	sl, r4, #25
 8007f56:	68e3      	ldr	r3, [r4, #12]
 8007f58:	6832      	ldr	r2, [r6, #0]
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	42ab      	cmp	r3, r5
 8007f5e:	dc26      	bgt.n	8007fae <_printf_common+0x96>
 8007f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f64:	1e13      	subs	r3, r2, #0
 8007f66:	6822      	ldr	r2, [r4, #0]
 8007f68:	bf18      	it	ne
 8007f6a:	2301      	movne	r3, #1
 8007f6c:	0692      	lsls	r2, r2, #26
 8007f6e:	d42b      	bmi.n	8007fc8 <_printf_common+0xb0>
 8007f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f74:	4649      	mov	r1, r9
 8007f76:	4638      	mov	r0, r7
 8007f78:	47c0      	blx	r8
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	d01e      	beq.n	8007fbc <_printf_common+0xa4>
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	68e5      	ldr	r5, [r4, #12]
 8007f82:	6832      	ldr	r2, [r6, #0]
 8007f84:	f003 0306 	and.w	r3, r3, #6
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	bf08      	it	eq
 8007f8c:	1aad      	subeq	r5, r5, r2
 8007f8e:	68a3      	ldr	r3, [r4, #8]
 8007f90:	6922      	ldr	r2, [r4, #16]
 8007f92:	bf0c      	ite	eq
 8007f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f98:	2500      	movne	r5, #0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	bfc4      	itt	gt
 8007f9e:	1a9b      	subgt	r3, r3, r2
 8007fa0:	18ed      	addgt	r5, r5, r3
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	341a      	adds	r4, #26
 8007fa6:	42b5      	cmp	r5, r6
 8007fa8:	d11a      	bne.n	8007fe0 <_printf_common+0xc8>
 8007faa:	2000      	movs	r0, #0
 8007fac:	e008      	b.n	8007fc0 <_printf_common+0xa8>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	47c0      	blx	r8
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d103      	bne.n	8007fc4 <_printf_common+0xac>
 8007fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	e7c6      	b.n	8007f56 <_printf_common+0x3e>
 8007fc8:	18e1      	adds	r1, r4, r3
 8007fca:	1c5a      	adds	r2, r3, #1
 8007fcc:	2030      	movs	r0, #48	; 0x30
 8007fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fd2:	4422      	add	r2, r4
 8007fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fdc:	3302      	adds	r3, #2
 8007fde:	e7c7      	b.n	8007f70 <_printf_common+0x58>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	4622      	mov	r2, r4
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	4638      	mov	r0, r7
 8007fe8:	47c0      	blx	r8
 8007fea:	3001      	adds	r0, #1
 8007fec:	d0e6      	beq.n	8007fbc <_printf_common+0xa4>
 8007fee:	3601      	adds	r6, #1
 8007ff0:	e7d9      	b.n	8007fa6 <_printf_common+0x8e>
	...

08007ff4 <_printf_i>:
 8007ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	7e0f      	ldrb	r7, [r1, #24]
 8007ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ffc:	2f78      	cmp	r7, #120	; 0x78
 8007ffe:	4691      	mov	r9, r2
 8008000:	4680      	mov	r8, r0
 8008002:	460c      	mov	r4, r1
 8008004:	469a      	mov	sl, r3
 8008006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800800a:	d807      	bhi.n	800801c <_printf_i+0x28>
 800800c:	2f62      	cmp	r7, #98	; 0x62
 800800e:	d80a      	bhi.n	8008026 <_printf_i+0x32>
 8008010:	2f00      	cmp	r7, #0
 8008012:	f000 80d8 	beq.w	80081c6 <_printf_i+0x1d2>
 8008016:	2f58      	cmp	r7, #88	; 0x58
 8008018:	f000 80a3 	beq.w	8008162 <_printf_i+0x16e>
 800801c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008024:	e03a      	b.n	800809c <_printf_i+0xa8>
 8008026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800802a:	2b15      	cmp	r3, #21
 800802c:	d8f6      	bhi.n	800801c <_printf_i+0x28>
 800802e:	a101      	add	r1, pc, #4	; (adr r1, 8008034 <_printf_i+0x40>)
 8008030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008034:	0800808d 	.word	0x0800808d
 8008038:	080080a1 	.word	0x080080a1
 800803c:	0800801d 	.word	0x0800801d
 8008040:	0800801d 	.word	0x0800801d
 8008044:	0800801d 	.word	0x0800801d
 8008048:	0800801d 	.word	0x0800801d
 800804c:	080080a1 	.word	0x080080a1
 8008050:	0800801d 	.word	0x0800801d
 8008054:	0800801d 	.word	0x0800801d
 8008058:	0800801d 	.word	0x0800801d
 800805c:	0800801d 	.word	0x0800801d
 8008060:	080081ad 	.word	0x080081ad
 8008064:	080080d1 	.word	0x080080d1
 8008068:	0800818f 	.word	0x0800818f
 800806c:	0800801d 	.word	0x0800801d
 8008070:	0800801d 	.word	0x0800801d
 8008074:	080081cf 	.word	0x080081cf
 8008078:	0800801d 	.word	0x0800801d
 800807c:	080080d1 	.word	0x080080d1
 8008080:	0800801d 	.word	0x0800801d
 8008084:	0800801d 	.word	0x0800801d
 8008088:	08008197 	.word	0x08008197
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	1d1a      	adds	r2, r3, #4
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	602a      	str	r2, [r5, #0]
 8008094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800809c:	2301      	movs	r3, #1
 800809e:	e0a3      	b.n	80081e8 <_printf_i+0x1f4>
 80080a0:	6820      	ldr	r0, [r4, #0]
 80080a2:	6829      	ldr	r1, [r5, #0]
 80080a4:	0606      	lsls	r6, r0, #24
 80080a6:	f101 0304 	add.w	r3, r1, #4
 80080aa:	d50a      	bpl.n	80080c2 <_printf_i+0xce>
 80080ac:	680e      	ldr	r6, [r1, #0]
 80080ae:	602b      	str	r3, [r5, #0]
 80080b0:	2e00      	cmp	r6, #0
 80080b2:	da03      	bge.n	80080bc <_printf_i+0xc8>
 80080b4:	232d      	movs	r3, #45	; 0x2d
 80080b6:	4276      	negs	r6, r6
 80080b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080bc:	485e      	ldr	r0, [pc, #376]	; (8008238 <_printf_i+0x244>)
 80080be:	230a      	movs	r3, #10
 80080c0:	e019      	b.n	80080f6 <_printf_i+0x102>
 80080c2:	680e      	ldr	r6, [r1, #0]
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080ca:	bf18      	it	ne
 80080cc:	b236      	sxthne	r6, r6
 80080ce:	e7ef      	b.n	80080b0 <_printf_i+0xbc>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	6820      	ldr	r0, [r4, #0]
 80080d4:	1d19      	adds	r1, r3, #4
 80080d6:	6029      	str	r1, [r5, #0]
 80080d8:	0601      	lsls	r1, r0, #24
 80080da:	d501      	bpl.n	80080e0 <_printf_i+0xec>
 80080dc:	681e      	ldr	r6, [r3, #0]
 80080de:	e002      	b.n	80080e6 <_printf_i+0xf2>
 80080e0:	0646      	lsls	r6, r0, #25
 80080e2:	d5fb      	bpl.n	80080dc <_printf_i+0xe8>
 80080e4:	881e      	ldrh	r6, [r3, #0]
 80080e6:	4854      	ldr	r0, [pc, #336]	; (8008238 <_printf_i+0x244>)
 80080e8:	2f6f      	cmp	r7, #111	; 0x6f
 80080ea:	bf0c      	ite	eq
 80080ec:	2308      	moveq	r3, #8
 80080ee:	230a      	movne	r3, #10
 80080f0:	2100      	movs	r1, #0
 80080f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080f6:	6865      	ldr	r5, [r4, #4]
 80080f8:	60a5      	str	r5, [r4, #8]
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	bfa2      	ittt	ge
 80080fe:	6821      	ldrge	r1, [r4, #0]
 8008100:	f021 0104 	bicge.w	r1, r1, #4
 8008104:	6021      	strge	r1, [r4, #0]
 8008106:	b90e      	cbnz	r6, 800810c <_printf_i+0x118>
 8008108:	2d00      	cmp	r5, #0
 800810a:	d04d      	beq.n	80081a8 <_printf_i+0x1b4>
 800810c:	4615      	mov	r5, r2
 800810e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008112:	fb03 6711 	mls	r7, r3, r1, r6
 8008116:	5dc7      	ldrb	r7, [r0, r7]
 8008118:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800811c:	4637      	mov	r7, r6
 800811e:	42bb      	cmp	r3, r7
 8008120:	460e      	mov	r6, r1
 8008122:	d9f4      	bls.n	800810e <_printf_i+0x11a>
 8008124:	2b08      	cmp	r3, #8
 8008126:	d10b      	bne.n	8008140 <_printf_i+0x14c>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	07de      	lsls	r6, r3, #31
 800812c:	d508      	bpl.n	8008140 <_printf_i+0x14c>
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	6861      	ldr	r1, [r4, #4]
 8008132:	4299      	cmp	r1, r3
 8008134:	bfde      	ittt	le
 8008136:	2330      	movle	r3, #48	; 0x30
 8008138:	f805 3c01 	strble.w	r3, [r5, #-1]
 800813c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008140:	1b52      	subs	r2, r2, r5
 8008142:	6122      	str	r2, [r4, #16]
 8008144:	f8cd a000 	str.w	sl, [sp]
 8008148:	464b      	mov	r3, r9
 800814a:	aa03      	add	r2, sp, #12
 800814c:	4621      	mov	r1, r4
 800814e:	4640      	mov	r0, r8
 8008150:	f7ff fee2 	bl	8007f18 <_printf_common>
 8008154:	3001      	adds	r0, #1
 8008156:	d14c      	bne.n	80081f2 <_printf_i+0x1fe>
 8008158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800815c:	b004      	add	sp, #16
 800815e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008162:	4835      	ldr	r0, [pc, #212]	; (8008238 <_printf_i+0x244>)
 8008164:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008168:	6829      	ldr	r1, [r5, #0]
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008170:	6029      	str	r1, [r5, #0]
 8008172:	061d      	lsls	r5, r3, #24
 8008174:	d514      	bpl.n	80081a0 <_printf_i+0x1ac>
 8008176:	07df      	lsls	r7, r3, #31
 8008178:	bf44      	itt	mi
 800817a:	f043 0320 	orrmi.w	r3, r3, #32
 800817e:	6023      	strmi	r3, [r4, #0]
 8008180:	b91e      	cbnz	r6, 800818a <_printf_i+0x196>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	f023 0320 	bic.w	r3, r3, #32
 8008188:	6023      	str	r3, [r4, #0]
 800818a:	2310      	movs	r3, #16
 800818c:	e7b0      	b.n	80080f0 <_printf_i+0xfc>
 800818e:	6823      	ldr	r3, [r4, #0]
 8008190:	f043 0320 	orr.w	r3, r3, #32
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	2378      	movs	r3, #120	; 0x78
 8008198:	4828      	ldr	r0, [pc, #160]	; (800823c <_printf_i+0x248>)
 800819a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800819e:	e7e3      	b.n	8008168 <_printf_i+0x174>
 80081a0:	0659      	lsls	r1, r3, #25
 80081a2:	bf48      	it	mi
 80081a4:	b2b6      	uxthmi	r6, r6
 80081a6:	e7e6      	b.n	8008176 <_printf_i+0x182>
 80081a8:	4615      	mov	r5, r2
 80081aa:	e7bb      	b.n	8008124 <_printf_i+0x130>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	6826      	ldr	r6, [r4, #0]
 80081b0:	6961      	ldr	r1, [r4, #20]
 80081b2:	1d18      	adds	r0, r3, #4
 80081b4:	6028      	str	r0, [r5, #0]
 80081b6:	0635      	lsls	r5, r6, #24
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0x1cc>
 80081bc:	6019      	str	r1, [r3, #0]
 80081be:	e002      	b.n	80081c6 <_printf_i+0x1d2>
 80081c0:	0670      	lsls	r0, r6, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0x1c8>
 80081c4:	8019      	strh	r1, [r3, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	4615      	mov	r5, r2
 80081cc:	e7ba      	b.n	8008144 <_printf_i+0x150>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	602a      	str	r2, [r5, #0]
 80081d4:	681d      	ldr	r5, [r3, #0]
 80081d6:	6862      	ldr	r2, [r4, #4]
 80081d8:	2100      	movs	r1, #0
 80081da:	4628      	mov	r0, r5
 80081dc:	f7f8 f808 	bl	80001f0 <memchr>
 80081e0:	b108      	cbz	r0, 80081e6 <_printf_i+0x1f2>
 80081e2:	1b40      	subs	r0, r0, r5
 80081e4:	6060      	str	r0, [r4, #4]
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	2300      	movs	r3, #0
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f0:	e7a8      	b.n	8008144 <_printf_i+0x150>
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	462a      	mov	r2, r5
 80081f6:	4649      	mov	r1, r9
 80081f8:	4640      	mov	r0, r8
 80081fa:	47d0      	blx	sl
 80081fc:	3001      	adds	r0, #1
 80081fe:	d0ab      	beq.n	8008158 <_printf_i+0x164>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	079b      	lsls	r3, r3, #30
 8008204:	d413      	bmi.n	800822e <_printf_i+0x23a>
 8008206:	68e0      	ldr	r0, [r4, #12]
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	4298      	cmp	r0, r3
 800820c:	bfb8      	it	lt
 800820e:	4618      	movlt	r0, r3
 8008210:	e7a4      	b.n	800815c <_printf_i+0x168>
 8008212:	2301      	movs	r3, #1
 8008214:	4632      	mov	r2, r6
 8008216:	4649      	mov	r1, r9
 8008218:	4640      	mov	r0, r8
 800821a:	47d0      	blx	sl
 800821c:	3001      	adds	r0, #1
 800821e:	d09b      	beq.n	8008158 <_printf_i+0x164>
 8008220:	3501      	adds	r5, #1
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	9903      	ldr	r1, [sp, #12]
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	42ab      	cmp	r3, r5
 800822a:	dcf2      	bgt.n	8008212 <_printf_i+0x21e>
 800822c:	e7eb      	b.n	8008206 <_printf_i+0x212>
 800822e:	2500      	movs	r5, #0
 8008230:	f104 0619 	add.w	r6, r4, #25
 8008234:	e7f5      	b.n	8008222 <_printf_i+0x22e>
 8008236:	bf00      	nop
 8008238:	0800ae2e 	.word	0x0800ae2e
 800823c:	0800ae3f 	.word	0x0800ae3f

08008240 <siprintf>:
 8008240:	b40e      	push	{r1, r2, r3}
 8008242:	b500      	push	{lr}
 8008244:	b09c      	sub	sp, #112	; 0x70
 8008246:	ab1d      	add	r3, sp, #116	; 0x74
 8008248:	9002      	str	r0, [sp, #8]
 800824a:	9006      	str	r0, [sp, #24]
 800824c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008250:	4809      	ldr	r0, [pc, #36]	; (8008278 <siprintf+0x38>)
 8008252:	9107      	str	r1, [sp, #28]
 8008254:	9104      	str	r1, [sp, #16]
 8008256:	4909      	ldr	r1, [pc, #36]	; (800827c <siprintf+0x3c>)
 8008258:	f853 2b04 	ldr.w	r2, [r3], #4
 800825c:	9105      	str	r1, [sp, #20]
 800825e:	6800      	ldr	r0, [r0, #0]
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	a902      	add	r1, sp, #8
 8008264:	f001 fb76 	bl	8009954 <_svfiprintf_r>
 8008268:	9b02      	ldr	r3, [sp, #8]
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	b01c      	add	sp, #112	; 0x70
 8008270:	f85d eb04 	ldr.w	lr, [sp], #4
 8008274:	b003      	add	sp, #12
 8008276:	4770      	bx	lr
 8008278:	20000018 	.word	0x20000018
 800827c:	ffff0208 	.word	0xffff0208

08008280 <quorem>:
 8008280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	6903      	ldr	r3, [r0, #16]
 8008286:	690c      	ldr	r4, [r1, #16]
 8008288:	42a3      	cmp	r3, r4
 800828a:	4607      	mov	r7, r0
 800828c:	f2c0 8081 	blt.w	8008392 <quorem+0x112>
 8008290:	3c01      	subs	r4, #1
 8008292:	f101 0814 	add.w	r8, r1, #20
 8008296:	f100 0514 	add.w	r5, r0, #20
 800829a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082a8:	3301      	adds	r3, #1
 80082aa:	429a      	cmp	r2, r3
 80082ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80082b8:	d331      	bcc.n	800831e <quorem+0x9e>
 80082ba:	f04f 0e00 	mov.w	lr, #0
 80082be:	4640      	mov	r0, r8
 80082c0:	46ac      	mov	ip, r5
 80082c2:	46f2      	mov	sl, lr
 80082c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80082c8:	b293      	uxth	r3, r2
 80082ca:	fb06 e303 	mla	r3, r6, r3, lr
 80082ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	ebaa 0303 	sub.w	r3, sl, r3
 80082d8:	f8dc a000 	ldr.w	sl, [ip]
 80082dc:	0c12      	lsrs	r2, r2, #16
 80082de:	fa13 f38a 	uxtah	r3, r3, sl
 80082e2:	fb06 e202 	mla	r2, r6, r2, lr
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	9b00      	ldr	r3, [sp, #0]
 80082ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082ee:	b292      	uxth	r2, r2
 80082f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80082fc:	4581      	cmp	r9, r0
 80082fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008302:	f84c 3b04 	str.w	r3, [ip], #4
 8008306:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800830a:	d2db      	bcs.n	80082c4 <quorem+0x44>
 800830c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008310:	b92b      	cbnz	r3, 800831e <quorem+0x9e>
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	3b04      	subs	r3, #4
 8008316:	429d      	cmp	r5, r3
 8008318:	461a      	mov	r2, r3
 800831a:	d32e      	bcc.n	800837a <quorem+0xfa>
 800831c:	613c      	str	r4, [r7, #16]
 800831e:	4638      	mov	r0, r7
 8008320:	f001 f8c4 	bl	80094ac <__mcmp>
 8008324:	2800      	cmp	r0, #0
 8008326:	db24      	blt.n	8008372 <quorem+0xf2>
 8008328:	3601      	adds	r6, #1
 800832a:	4628      	mov	r0, r5
 800832c:	f04f 0c00 	mov.w	ip, #0
 8008330:	f858 2b04 	ldr.w	r2, [r8], #4
 8008334:	f8d0 e000 	ldr.w	lr, [r0]
 8008338:	b293      	uxth	r3, r2
 800833a:	ebac 0303 	sub.w	r3, ip, r3
 800833e:	0c12      	lsrs	r2, r2, #16
 8008340:	fa13 f38e 	uxtah	r3, r3, lr
 8008344:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800834c:	b29b      	uxth	r3, r3
 800834e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008352:	45c1      	cmp	r9, r8
 8008354:	f840 3b04 	str.w	r3, [r0], #4
 8008358:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800835c:	d2e8      	bcs.n	8008330 <quorem+0xb0>
 800835e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008366:	b922      	cbnz	r2, 8008372 <quorem+0xf2>
 8008368:	3b04      	subs	r3, #4
 800836a:	429d      	cmp	r5, r3
 800836c:	461a      	mov	r2, r3
 800836e:	d30a      	bcc.n	8008386 <quorem+0x106>
 8008370:	613c      	str	r4, [r7, #16]
 8008372:	4630      	mov	r0, r6
 8008374:	b003      	add	sp, #12
 8008376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	3b04      	subs	r3, #4
 800837e:	2a00      	cmp	r2, #0
 8008380:	d1cc      	bne.n	800831c <quorem+0x9c>
 8008382:	3c01      	subs	r4, #1
 8008384:	e7c7      	b.n	8008316 <quorem+0x96>
 8008386:	6812      	ldr	r2, [r2, #0]
 8008388:	3b04      	subs	r3, #4
 800838a:	2a00      	cmp	r2, #0
 800838c:	d1f0      	bne.n	8008370 <quorem+0xf0>
 800838e:	3c01      	subs	r4, #1
 8008390:	e7eb      	b.n	800836a <quorem+0xea>
 8008392:	2000      	movs	r0, #0
 8008394:	e7ee      	b.n	8008374 <quorem+0xf4>
	...

08008398 <_dtoa_r>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	ed2d 8b04 	vpush	{d8-d9}
 80083a0:	ec57 6b10 	vmov	r6, r7, d0
 80083a4:	b093      	sub	sp, #76	; 0x4c
 80083a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80083a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80083ac:	9106      	str	r1, [sp, #24]
 80083ae:	ee10 aa10 	vmov	sl, s0
 80083b2:	4604      	mov	r4, r0
 80083b4:	9209      	str	r2, [sp, #36]	; 0x24
 80083b6:	930c      	str	r3, [sp, #48]	; 0x30
 80083b8:	46bb      	mov	fp, r7
 80083ba:	b975      	cbnz	r5, 80083da <_dtoa_r+0x42>
 80083bc:	2010      	movs	r0, #16
 80083be:	f000 fddd 	bl	8008f7c <malloc>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6260      	str	r0, [r4, #36]	; 0x24
 80083c6:	b920      	cbnz	r0, 80083d2 <_dtoa_r+0x3a>
 80083c8:	4ba7      	ldr	r3, [pc, #668]	; (8008668 <_dtoa_r+0x2d0>)
 80083ca:	21ea      	movs	r1, #234	; 0xea
 80083cc:	48a7      	ldr	r0, [pc, #668]	; (800866c <_dtoa_r+0x2d4>)
 80083ce:	f001 fbd1 	bl	8009b74 <__assert_func>
 80083d2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083d6:	6005      	str	r5, [r0, #0]
 80083d8:	60c5      	str	r5, [r0, #12]
 80083da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	b151      	cbz	r1, 80083f6 <_dtoa_r+0x5e>
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	604a      	str	r2, [r1, #4]
 80083e4:	2301      	movs	r3, #1
 80083e6:	4093      	lsls	r3, r2
 80083e8:	608b      	str	r3, [r1, #8]
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fe1c 	bl	8009028 <_Bfree>
 80083f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	1e3b      	subs	r3, r7, #0
 80083f8:	bfaa      	itet	ge
 80083fa:	2300      	movge	r3, #0
 80083fc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008400:	f8c8 3000 	strge.w	r3, [r8]
 8008404:	4b9a      	ldr	r3, [pc, #616]	; (8008670 <_dtoa_r+0x2d8>)
 8008406:	bfbc      	itt	lt
 8008408:	2201      	movlt	r2, #1
 800840a:	f8c8 2000 	strlt.w	r2, [r8]
 800840e:	ea33 030b 	bics.w	r3, r3, fp
 8008412:	d11b      	bne.n	800844c <_dtoa_r+0xb4>
 8008414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008416:	f242 730f 	movw	r3, #9999	; 0x270f
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008420:	4333      	orrs	r3, r6
 8008422:	f000 8592 	beq.w	8008f4a <_dtoa_r+0xbb2>
 8008426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008428:	b963      	cbnz	r3, 8008444 <_dtoa_r+0xac>
 800842a:	4b92      	ldr	r3, [pc, #584]	; (8008674 <_dtoa_r+0x2dc>)
 800842c:	e022      	b.n	8008474 <_dtoa_r+0xdc>
 800842e:	4b92      	ldr	r3, [pc, #584]	; (8008678 <_dtoa_r+0x2e0>)
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	3308      	adds	r3, #8
 8008434:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	9801      	ldr	r0, [sp, #4]
 800843a:	b013      	add	sp, #76	; 0x4c
 800843c:	ecbd 8b04 	vpop	{d8-d9}
 8008440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008444:	4b8b      	ldr	r3, [pc, #556]	; (8008674 <_dtoa_r+0x2dc>)
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	3303      	adds	r3, #3
 800844a:	e7f3      	b.n	8008434 <_dtoa_r+0x9c>
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	f7f8 fb40 	bl	8000ad8 <__aeabi_dcmpeq>
 8008458:	ec4b ab19 	vmov	d9, sl, fp
 800845c:	4680      	mov	r8, r0
 800845e:	b158      	cbz	r0, 8008478 <_dtoa_r+0xe0>
 8008460:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008462:	2301      	movs	r3, #1
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008468:	2b00      	cmp	r3, #0
 800846a:	f000 856b 	beq.w	8008f44 <_dtoa_r+0xbac>
 800846e:	4883      	ldr	r0, [pc, #524]	; (800867c <_dtoa_r+0x2e4>)
 8008470:	6018      	str	r0, [r3, #0]
 8008472:	1e43      	subs	r3, r0, #1
 8008474:	9301      	str	r3, [sp, #4]
 8008476:	e7df      	b.n	8008438 <_dtoa_r+0xa0>
 8008478:	ec4b ab10 	vmov	d0, sl, fp
 800847c:	aa10      	add	r2, sp, #64	; 0x40
 800847e:	a911      	add	r1, sp, #68	; 0x44
 8008480:	4620      	mov	r0, r4
 8008482:	f001 f8b9 	bl	80095f8 <__d2b>
 8008486:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800848a:	ee08 0a10 	vmov	s16, r0
 800848e:	2d00      	cmp	r5, #0
 8008490:	f000 8084 	beq.w	800859c <_dtoa_r+0x204>
 8008494:	ee19 3a90 	vmov	r3, s19
 8008498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800849c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80084a0:	4656      	mov	r6, sl
 80084a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80084a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80084ae:	4b74      	ldr	r3, [pc, #464]	; (8008680 <_dtoa_r+0x2e8>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	4630      	mov	r0, r6
 80084b4:	4639      	mov	r1, r7
 80084b6:	f7f7 feef 	bl	8000298 <__aeabi_dsub>
 80084ba:	a365      	add	r3, pc, #404	; (adr r3, 8008650 <_dtoa_r+0x2b8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	a364      	add	r3, pc, #400	; (adr r3, 8008658 <_dtoa_r+0x2c0>)
 80084c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ca:	f7f7 fee7 	bl	800029c <__adddf3>
 80084ce:	4606      	mov	r6, r0
 80084d0:	4628      	mov	r0, r5
 80084d2:	460f      	mov	r7, r1
 80084d4:	f7f8 f82e 	bl	8000534 <__aeabi_i2d>
 80084d8:	a361      	add	r3, pc, #388	; (adr r3, 8008660 <_dtoa_r+0x2c8>)
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f8 f893 	bl	8000608 <__aeabi_dmul>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4630      	mov	r0, r6
 80084e8:	4639      	mov	r1, r7
 80084ea:	f7f7 fed7 	bl	800029c <__adddf3>
 80084ee:	4606      	mov	r6, r0
 80084f0:	460f      	mov	r7, r1
 80084f2:	f7f8 fb39 	bl	8000b68 <__aeabi_d2iz>
 80084f6:	2200      	movs	r2, #0
 80084f8:	9000      	str	r0, [sp, #0]
 80084fa:	2300      	movs	r3, #0
 80084fc:	4630      	mov	r0, r6
 80084fe:	4639      	mov	r1, r7
 8008500:	f7f8 faf4 	bl	8000aec <__aeabi_dcmplt>
 8008504:	b150      	cbz	r0, 800851c <_dtoa_r+0x184>
 8008506:	9800      	ldr	r0, [sp, #0]
 8008508:	f7f8 f814 	bl	8000534 <__aeabi_i2d>
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	f7f8 fae2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008514:	b910      	cbnz	r0, 800851c <_dtoa_r+0x184>
 8008516:	9b00      	ldr	r3, [sp, #0]
 8008518:	3b01      	subs	r3, #1
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	2b16      	cmp	r3, #22
 8008520:	d85a      	bhi.n	80085d8 <_dtoa_r+0x240>
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	4b57      	ldr	r3, [pc, #348]	; (8008684 <_dtoa_r+0x2ec>)
 8008526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	ec51 0b19 	vmov	r0, r1, d9
 8008532:	f7f8 fadb 	bl	8000aec <__aeabi_dcmplt>
 8008536:	2800      	cmp	r0, #0
 8008538:	d050      	beq.n	80085dc <_dtoa_r+0x244>
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	3b01      	subs	r3, #1
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	2300      	movs	r3, #0
 8008542:	930b      	str	r3, [sp, #44]	; 0x2c
 8008544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008546:	1b5d      	subs	r5, r3, r5
 8008548:	1e6b      	subs	r3, r5, #1
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	bf45      	ittet	mi
 800854e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008552:	9304      	strmi	r3, [sp, #16]
 8008554:	2300      	movpl	r3, #0
 8008556:	2300      	movmi	r3, #0
 8008558:	bf4c      	ite	mi
 800855a:	9305      	strmi	r3, [sp, #20]
 800855c:	9304      	strpl	r3, [sp, #16]
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	db3d      	blt.n	80085e0 <_dtoa_r+0x248>
 8008564:	9b05      	ldr	r3, [sp, #20]
 8008566:	9a00      	ldr	r2, [sp, #0]
 8008568:	920a      	str	r2, [sp, #40]	; 0x28
 800856a:	4413      	add	r3, r2
 800856c:	9305      	str	r3, [sp, #20]
 800856e:	2300      	movs	r3, #0
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	2b09      	cmp	r3, #9
 8008576:	f200 8089 	bhi.w	800868c <_dtoa_r+0x2f4>
 800857a:	2b05      	cmp	r3, #5
 800857c:	bfc4      	itt	gt
 800857e:	3b04      	subgt	r3, #4
 8008580:	9306      	strgt	r3, [sp, #24]
 8008582:	9b06      	ldr	r3, [sp, #24]
 8008584:	f1a3 0302 	sub.w	r3, r3, #2
 8008588:	bfcc      	ite	gt
 800858a:	2500      	movgt	r5, #0
 800858c:	2501      	movle	r5, #1
 800858e:	2b03      	cmp	r3, #3
 8008590:	f200 8087 	bhi.w	80086a2 <_dtoa_r+0x30a>
 8008594:	e8df f003 	tbb	[pc, r3]
 8008598:	59383a2d 	.word	0x59383a2d
 800859c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80085a0:	441d      	add	r5, r3
 80085a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	bfc1      	itttt	gt
 80085aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80085b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80085b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085ba:	bfda      	itte	le
 80085bc:	f1c3 0320 	rsble	r3, r3, #32
 80085c0:	fa06 f003 	lslle.w	r0, r6, r3
 80085c4:	4318      	orrgt	r0, r3
 80085c6:	f7f7 ffa5 	bl	8000514 <__aeabi_ui2d>
 80085ca:	2301      	movs	r3, #1
 80085cc:	4606      	mov	r6, r0
 80085ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80085d2:	3d01      	subs	r5, #1
 80085d4:	930e      	str	r3, [sp, #56]	; 0x38
 80085d6:	e76a      	b.n	80084ae <_dtoa_r+0x116>
 80085d8:	2301      	movs	r3, #1
 80085da:	e7b2      	b.n	8008542 <_dtoa_r+0x1aa>
 80085dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80085de:	e7b1      	b.n	8008544 <_dtoa_r+0x1ac>
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	9a00      	ldr	r2, [sp, #0]
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	4253      	negs	r3, r2
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	2300      	movs	r3, #0
 80085ee:	930a      	str	r3, [sp, #40]	; 0x28
 80085f0:	e7bf      	b.n	8008572 <_dtoa_r+0x1da>
 80085f2:	2300      	movs	r3, #0
 80085f4:	9308      	str	r3, [sp, #32]
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	dc55      	bgt.n	80086a8 <_dtoa_r+0x310>
 80085fc:	2301      	movs	r3, #1
 80085fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008602:	461a      	mov	r2, r3
 8008604:	9209      	str	r2, [sp, #36]	; 0x24
 8008606:	e00c      	b.n	8008622 <_dtoa_r+0x28a>
 8008608:	2301      	movs	r3, #1
 800860a:	e7f3      	b.n	80085f4 <_dtoa_r+0x25c>
 800860c:	2300      	movs	r3, #0
 800860e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008610:	9308      	str	r3, [sp, #32]
 8008612:	9b00      	ldr	r3, [sp, #0]
 8008614:	4413      	add	r3, r2
 8008616:	9302      	str	r3, [sp, #8]
 8008618:	3301      	adds	r3, #1
 800861a:	2b01      	cmp	r3, #1
 800861c:	9303      	str	r3, [sp, #12]
 800861e:	bfb8      	it	lt
 8008620:	2301      	movlt	r3, #1
 8008622:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008624:	2200      	movs	r2, #0
 8008626:	6042      	str	r2, [r0, #4]
 8008628:	2204      	movs	r2, #4
 800862a:	f102 0614 	add.w	r6, r2, #20
 800862e:	429e      	cmp	r6, r3
 8008630:	6841      	ldr	r1, [r0, #4]
 8008632:	d93d      	bls.n	80086b0 <_dtoa_r+0x318>
 8008634:	4620      	mov	r0, r4
 8008636:	f000 fcb7 	bl	8008fa8 <_Balloc>
 800863a:	9001      	str	r0, [sp, #4]
 800863c:	2800      	cmp	r0, #0
 800863e:	d13b      	bne.n	80086b8 <_dtoa_r+0x320>
 8008640:	4b11      	ldr	r3, [pc, #68]	; (8008688 <_dtoa_r+0x2f0>)
 8008642:	4602      	mov	r2, r0
 8008644:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008648:	e6c0      	b.n	80083cc <_dtoa_r+0x34>
 800864a:	2301      	movs	r3, #1
 800864c:	e7df      	b.n	800860e <_dtoa_r+0x276>
 800864e:	bf00      	nop
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800ae5d 	.word	0x0800ae5d
 800866c:	0800ae74 	.word	0x0800ae74
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800ae59 	.word	0x0800ae59
 8008678:	0800ae50 	.word	0x0800ae50
 800867c:	0800ae2d 	.word	0x0800ae2d
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800af68 	.word	0x0800af68
 8008688:	0800aecf 	.word	0x0800aecf
 800868c:	2501      	movs	r5, #1
 800868e:	2300      	movs	r3, #0
 8008690:	9306      	str	r3, [sp, #24]
 8008692:	9508      	str	r5, [sp, #32]
 8008694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008698:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	2312      	movs	r3, #18
 80086a0:	e7b0      	b.n	8008604 <_dtoa_r+0x26c>
 80086a2:	2301      	movs	r3, #1
 80086a4:	9308      	str	r3, [sp, #32]
 80086a6:	e7f5      	b.n	8008694 <_dtoa_r+0x2fc>
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80086ae:	e7b8      	b.n	8008622 <_dtoa_r+0x28a>
 80086b0:	3101      	adds	r1, #1
 80086b2:	6041      	str	r1, [r0, #4]
 80086b4:	0052      	lsls	r2, r2, #1
 80086b6:	e7b8      	b.n	800862a <_dtoa_r+0x292>
 80086b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ba:	9a01      	ldr	r2, [sp, #4]
 80086bc:	601a      	str	r2, [r3, #0]
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	2b0e      	cmp	r3, #14
 80086c2:	f200 809d 	bhi.w	8008800 <_dtoa_r+0x468>
 80086c6:	2d00      	cmp	r5, #0
 80086c8:	f000 809a 	beq.w	8008800 <_dtoa_r+0x468>
 80086cc:	9b00      	ldr	r3, [sp, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	dd32      	ble.n	8008738 <_dtoa_r+0x3a0>
 80086d2:	4ab7      	ldr	r2, [pc, #732]	; (80089b0 <_dtoa_r+0x618>)
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80086dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	05d8      	lsls	r0, r3, #23
 80086e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80086e8:	d516      	bpl.n	8008718 <_dtoa_r+0x380>
 80086ea:	4bb2      	ldr	r3, [pc, #712]	; (80089b4 <_dtoa_r+0x61c>)
 80086ec:	ec51 0b19 	vmov	r0, r1, d9
 80086f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086f4:	f7f8 f8b2 	bl	800085c <__aeabi_ddiv>
 80086f8:	f007 070f 	and.w	r7, r7, #15
 80086fc:	4682      	mov	sl, r0
 80086fe:	468b      	mov	fp, r1
 8008700:	2503      	movs	r5, #3
 8008702:	4eac      	ldr	r6, [pc, #688]	; (80089b4 <_dtoa_r+0x61c>)
 8008704:	b957      	cbnz	r7, 800871c <_dtoa_r+0x384>
 8008706:	4642      	mov	r2, r8
 8008708:	464b      	mov	r3, r9
 800870a:	4650      	mov	r0, sl
 800870c:	4659      	mov	r1, fp
 800870e:	f7f8 f8a5 	bl	800085c <__aeabi_ddiv>
 8008712:	4682      	mov	sl, r0
 8008714:	468b      	mov	fp, r1
 8008716:	e028      	b.n	800876a <_dtoa_r+0x3d2>
 8008718:	2502      	movs	r5, #2
 800871a:	e7f2      	b.n	8008702 <_dtoa_r+0x36a>
 800871c:	07f9      	lsls	r1, r7, #31
 800871e:	d508      	bpl.n	8008732 <_dtoa_r+0x39a>
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008728:	f7f7 ff6e 	bl	8000608 <__aeabi_dmul>
 800872c:	3501      	adds	r5, #1
 800872e:	4680      	mov	r8, r0
 8008730:	4689      	mov	r9, r1
 8008732:	107f      	asrs	r7, r7, #1
 8008734:	3608      	adds	r6, #8
 8008736:	e7e5      	b.n	8008704 <_dtoa_r+0x36c>
 8008738:	f000 809b 	beq.w	8008872 <_dtoa_r+0x4da>
 800873c:	9b00      	ldr	r3, [sp, #0]
 800873e:	4f9d      	ldr	r7, [pc, #628]	; (80089b4 <_dtoa_r+0x61c>)
 8008740:	425e      	negs	r6, r3
 8008742:	4b9b      	ldr	r3, [pc, #620]	; (80089b0 <_dtoa_r+0x618>)
 8008744:	f006 020f 	and.w	r2, r6, #15
 8008748:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	ec51 0b19 	vmov	r0, r1, d9
 8008754:	f7f7 ff58 	bl	8000608 <__aeabi_dmul>
 8008758:	1136      	asrs	r6, r6, #4
 800875a:	4682      	mov	sl, r0
 800875c:	468b      	mov	fp, r1
 800875e:	2300      	movs	r3, #0
 8008760:	2502      	movs	r5, #2
 8008762:	2e00      	cmp	r6, #0
 8008764:	d17a      	bne.n	800885c <_dtoa_r+0x4c4>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1d3      	bne.n	8008712 <_dtoa_r+0x37a>
 800876a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	f000 8082 	beq.w	8008876 <_dtoa_r+0x4de>
 8008772:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <_dtoa_r+0x620>)
 8008774:	2200      	movs	r2, #0
 8008776:	4650      	mov	r0, sl
 8008778:	4659      	mov	r1, fp
 800877a:	f7f8 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800877e:	2800      	cmp	r0, #0
 8008780:	d079      	beq.n	8008876 <_dtoa_r+0x4de>
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d076      	beq.n	8008876 <_dtoa_r+0x4de>
 8008788:	9b02      	ldr	r3, [sp, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	dd36      	ble.n	80087fc <_dtoa_r+0x464>
 800878e:	9b00      	ldr	r3, [sp, #0]
 8008790:	4650      	mov	r0, sl
 8008792:	4659      	mov	r1, fp
 8008794:	1e5f      	subs	r7, r3, #1
 8008796:	2200      	movs	r2, #0
 8008798:	4b88      	ldr	r3, [pc, #544]	; (80089bc <_dtoa_r+0x624>)
 800879a:	f7f7 ff35 	bl	8000608 <__aeabi_dmul>
 800879e:	9e02      	ldr	r6, [sp, #8]
 80087a0:	4682      	mov	sl, r0
 80087a2:	468b      	mov	fp, r1
 80087a4:	3501      	adds	r5, #1
 80087a6:	4628      	mov	r0, r5
 80087a8:	f7f7 fec4 	bl	8000534 <__aeabi_i2d>
 80087ac:	4652      	mov	r2, sl
 80087ae:	465b      	mov	r3, fp
 80087b0:	f7f7 ff2a 	bl	8000608 <__aeabi_dmul>
 80087b4:	4b82      	ldr	r3, [pc, #520]	; (80089c0 <_dtoa_r+0x628>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	f7f7 fd70 	bl	800029c <__adddf3>
 80087bc:	46d0      	mov	r8, sl
 80087be:	46d9      	mov	r9, fp
 80087c0:	4682      	mov	sl, r0
 80087c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80087c6:	2e00      	cmp	r6, #0
 80087c8:	d158      	bne.n	800887c <_dtoa_r+0x4e4>
 80087ca:	4b7e      	ldr	r3, [pc, #504]	; (80089c4 <_dtoa_r+0x62c>)
 80087cc:	2200      	movs	r2, #0
 80087ce:	4640      	mov	r0, r8
 80087d0:	4649      	mov	r1, r9
 80087d2:	f7f7 fd61 	bl	8000298 <__aeabi_dsub>
 80087d6:	4652      	mov	r2, sl
 80087d8:	465b      	mov	r3, fp
 80087da:	4680      	mov	r8, r0
 80087dc:	4689      	mov	r9, r1
 80087de:	f7f8 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80087e2:	2800      	cmp	r0, #0
 80087e4:	f040 8295 	bne.w	8008d12 <_dtoa_r+0x97a>
 80087e8:	4652      	mov	r2, sl
 80087ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f8 f97b 	bl	8000aec <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f040 8289 	bne.w	8008d0e <_dtoa_r+0x976>
 80087fc:	ec5b ab19 	vmov	sl, fp, d9
 8008800:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008802:	2b00      	cmp	r3, #0
 8008804:	f2c0 8148 	blt.w	8008a98 <_dtoa_r+0x700>
 8008808:	9a00      	ldr	r2, [sp, #0]
 800880a:	2a0e      	cmp	r2, #14
 800880c:	f300 8144 	bgt.w	8008a98 <_dtoa_r+0x700>
 8008810:	4b67      	ldr	r3, [pc, #412]	; (80089b0 <_dtoa_r+0x618>)
 8008812:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008816:	e9d3 8900 	ldrd	r8, r9, [r3]
 800881a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	f280 80d5 	bge.w	80089cc <_dtoa_r+0x634>
 8008822:	9b03      	ldr	r3, [sp, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f300 80d1 	bgt.w	80089cc <_dtoa_r+0x634>
 800882a:	f040 826f 	bne.w	8008d0c <_dtoa_r+0x974>
 800882e:	4b65      	ldr	r3, [pc, #404]	; (80089c4 <_dtoa_r+0x62c>)
 8008830:	2200      	movs	r2, #0
 8008832:	4640      	mov	r0, r8
 8008834:	4649      	mov	r1, r9
 8008836:	f7f7 fee7 	bl	8000608 <__aeabi_dmul>
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	f7f8 f969 	bl	8000b14 <__aeabi_dcmpge>
 8008842:	9e03      	ldr	r6, [sp, #12]
 8008844:	4637      	mov	r7, r6
 8008846:	2800      	cmp	r0, #0
 8008848:	f040 8245 	bne.w	8008cd6 <_dtoa_r+0x93e>
 800884c:	9d01      	ldr	r5, [sp, #4]
 800884e:	2331      	movs	r3, #49	; 0x31
 8008850:	f805 3b01 	strb.w	r3, [r5], #1
 8008854:	9b00      	ldr	r3, [sp, #0]
 8008856:	3301      	adds	r3, #1
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	e240      	b.n	8008cde <_dtoa_r+0x946>
 800885c:	07f2      	lsls	r2, r6, #31
 800885e:	d505      	bpl.n	800886c <_dtoa_r+0x4d4>
 8008860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008864:	f7f7 fed0 	bl	8000608 <__aeabi_dmul>
 8008868:	3501      	adds	r5, #1
 800886a:	2301      	movs	r3, #1
 800886c:	1076      	asrs	r6, r6, #1
 800886e:	3708      	adds	r7, #8
 8008870:	e777      	b.n	8008762 <_dtoa_r+0x3ca>
 8008872:	2502      	movs	r5, #2
 8008874:	e779      	b.n	800876a <_dtoa_r+0x3d2>
 8008876:	9f00      	ldr	r7, [sp, #0]
 8008878:	9e03      	ldr	r6, [sp, #12]
 800887a:	e794      	b.n	80087a6 <_dtoa_r+0x40e>
 800887c:	9901      	ldr	r1, [sp, #4]
 800887e:	4b4c      	ldr	r3, [pc, #304]	; (80089b0 <_dtoa_r+0x618>)
 8008880:	4431      	add	r1, r6
 8008882:	910d      	str	r1, [sp, #52]	; 0x34
 8008884:	9908      	ldr	r1, [sp, #32]
 8008886:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800888a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800888e:	2900      	cmp	r1, #0
 8008890:	d043      	beq.n	800891a <_dtoa_r+0x582>
 8008892:	494d      	ldr	r1, [pc, #308]	; (80089c8 <_dtoa_r+0x630>)
 8008894:	2000      	movs	r0, #0
 8008896:	f7f7 ffe1 	bl	800085c <__aeabi_ddiv>
 800889a:	4652      	mov	r2, sl
 800889c:	465b      	mov	r3, fp
 800889e:	f7f7 fcfb 	bl	8000298 <__aeabi_dsub>
 80088a2:	9d01      	ldr	r5, [sp, #4]
 80088a4:	4682      	mov	sl, r0
 80088a6:	468b      	mov	fp, r1
 80088a8:	4649      	mov	r1, r9
 80088aa:	4640      	mov	r0, r8
 80088ac:	f7f8 f95c 	bl	8000b68 <__aeabi_d2iz>
 80088b0:	4606      	mov	r6, r0
 80088b2:	f7f7 fe3f 	bl	8000534 <__aeabi_i2d>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	f7f7 fceb 	bl	8000298 <__aeabi_dsub>
 80088c2:	3630      	adds	r6, #48	; 0x30
 80088c4:	f805 6b01 	strb.w	r6, [r5], #1
 80088c8:	4652      	mov	r2, sl
 80088ca:	465b      	mov	r3, fp
 80088cc:	4680      	mov	r8, r0
 80088ce:	4689      	mov	r9, r1
 80088d0:	f7f8 f90c 	bl	8000aec <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d163      	bne.n	80089a0 <_dtoa_r+0x608>
 80088d8:	4642      	mov	r2, r8
 80088da:	464b      	mov	r3, r9
 80088dc:	4936      	ldr	r1, [pc, #216]	; (80089b8 <_dtoa_r+0x620>)
 80088de:	2000      	movs	r0, #0
 80088e0:	f7f7 fcda 	bl	8000298 <__aeabi_dsub>
 80088e4:	4652      	mov	r2, sl
 80088e6:	465b      	mov	r3, fp
 80088e8:	f7f8 f900 	bl	8000aec <__aeabi_dcmplt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	f040 80b5 	bne.w	8008a5c <_dtoa_r+0x6c4>
 80088f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f4:	429d      	cmp	r5, r3
 80088f6:	d081      	beq.n	80087fc <_dtoa_r+0x464>
 80088f8:	4b30      	ldr	r3, [pc, #192]	; (80089bc <_dtoa_r+0x624>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	4650      	mov	r0, sl
 80088fe:	4659      	mov	r1, fp
 8008900:	f7f7 fe82 	bl	8000608 <__aeabi_dmul>
 8008904:	4b2d      	ldr	r3, [pc, #180]	; (80089bc <_dtoa_r+0x624>)
 8008906:	4682      	mov	sl, r0
 8008908:	468b      	mov	fp, r1
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	2200      	movs	r2, #0
 8008910:	f7f7 fe7a 	bl	8000608 <__aeabi_dmul>
 8008914:	4680      	mov	r8, r0
 8008916:	4689      	mov	r9, r1
 8008918:	e7c6      	b.n	80088a8 <_dtoa_r+0x510>
 800891a:	4650      	mov	r0, sl
 800891c:	4659      	mov	r1, fp
 800891e:	f7f7 fe73 	bl	8000608 <__aeabi_dmul>
 8008922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008924:	9d01      	ldr	r5, [sp, #4]
 8008926:	930f      	str	r3, [sp, #60]	; 0x3c
 8008928:	4682      	mov	sl, r0
 800892a:	468b      	mov	fp, r1
 800892c:	4649      	mov	r1, r9
 800892e:	4640      	mov	r0, r8
 8008930:	f7f8 f91a 	bl	8000b68 <__aeabi_d2iz>
 8008934:	4606      	mov	r6, r0
 8008936:	f7f7 fdfd 	bl	8000534 <__aeabi_i2d>
 800893a:	3630      	adds	r6, #48	; 0x30
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f7 fca8 	bl	8000298 <__aeabi_dsub>
 8008948:	f805 6b01 	strb.w	r6, [r5], #1
 800894c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800894e:	429d      	cmp	r5, r3
 8008950:	4680      	mov	r8, r0
 8008952:	4689      	mov	r9, r1
 8008954:	f04f 0200 	mov.w	r2, #0
 8008958:	d124      	bne.n	80089a4 <_dtoa_r+0x60c>
 800895a:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <_dtoa_r+0x630>)
 800895c:	4650      	mov	r0, sl
 800895e:	4659      	mov	r1, fp
 8008960:	f7f7 fc9c 	bl	800029c <__adddf3>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	4640      	mov	r0, r8
 800896a:	4649      	mov	r1, r9
 800896c:	f7f8 f8dc 	bl	8000b28 <__aeabi_dcmpgt>
 8008970:	2800      	cmp	r0, #0
 8008972:	d173      	bne.n	8008a5c <_dtoa_r+0x6c4>
 8008974:	4652      	mov	r2, sl
 8008976:	465b      	mov	r3, fp
 8008978:	4913      	ldr	r1, [pc, #76]	; (80089c8 <_dtoa_r+0x630>)
 800897a:	2000      	movs	r0, #0
 800897c:	f7f7 fc8c 	bl	8000298 <__aeabi_dsub>
 8008980:	4602      	mov	r2, r0
 8008982:	460b      	mov	r3, r1
 8008984:	4640      	mov	r0, r8
 8008986:	4649      	mov	r1, r9
 8008988:	f7f8 f8b0 	bl	8000aec <__aeabi_dcmplt>
 800898c:	2800      	cmp	r0, #0
 800898e:	f43f af35 	beq.w	80087fc <_dtoa_r+0x464>
 8008992:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008994:	1e6b      	subs	r3, r5, #1
 8008996:	930f      	str	r3, [sp, #60]	; 0x3c
 8008998:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800899c:	2b30      	cmp	r3, #48	; 0x30
 800899e:	d0f8      	beq.n	8008992 <_dtoa_r+0x5fa>
 80089a0:	9700      	str	r7, [sp, #0]
 80089a2:	e049      	b.n	8008a38 <_dtoa_r+0x6a0>
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <_dtoa_r+0x624>)
 80089a6:	f7f7 fe2f 	bl	8000608 <__aeabi_dmul>
 80089aa:	4680      	mov	r8, r0
 80089ac:	4689      	mov	r9, r1
 80089ae:	e7bd      	b.n	800892c <_dtoa_r+0x594>
 80089b0:	0800af68 	.word	0x0800af68
 80089b4:	0800af40 	.word	0x0800af40
 80089b8:	3ff00000 	.word	0x3ff00000
 80089bc:	40240000 	.word	0x40240000
 80089c0:	401c0000 	.word	0x401c0000
 80089c4:	40140000 	.word	0x40140000
 80089c8:	3fe00000 	.word	0x3fe00000
 80089cc:	9d01      	ldr	r5, [sp, #4]
 80089ce:	4656      	mov	r6, sl
 80089d0:	465f      	mov	r7, fp
 80089d2:	4642      	mov	r2, r8
 80089d4:	464b      	mov	r3, r9
 80089d6:	4630      	mov	r0, r6
 80089d8:	4639      	mov	r1, r7
 80089da:	f7f7 ff3f 	bl	800085c <__aeabi_ddiv>
 80089de:	f7f8 f8c3 	bl	8000b68 <__aeabi_d2iz>
 80089e2:	4682      	mov	sl, r0
 80089e4:	f7f7 fda6 	bl	8000534 <__aeabi_i2d>
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	f7f7 fe0c 	bl	8000608 <__aeabi_dmul>
 80089f0:	4602      	mov	r2, r0
 80089f2:	460b      	mov	r3, r1
 80089f4:	4630      	mov	r0, r6
 80089f6:	4639      	mov	r1, r7
 80089f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80089fc:	f7f7 fc4c 	bl	8000298 <__aeabi_dsub>
 8008a00:	f805 6b01 	strb.w	r6, [r5], #1
 8008a04:	9e01      	ldr	r6, [sp, #4]
 8008a06:	9f03      	ldr	r7, [sp, #12]
 8008a08:	1bae      	subs	r6, r5, r6
 8008a0a:	42b7      	cmp	r7, r6
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	d135      	bne.n	8008a7e <_dtoa_r+0x6e6>
 8008a12:	f7f7 fc43 	bl	800029c <__adddf3>
 8008a16:	4642      	mov	r2, r8
 8008a18:	464b      	mov	r3, r9
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f8 f883 	bl	8000b28 <__aeabi_dcmpgt>
 8008a22:	b9d0      	cbnz	r0, 8008a5a <_dtoa_r+0x6c2>
 8008a24:	4642      	mov	r2, r8
 8008a26:	464b      	mov	r3, r9
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7f8 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a30:	b110      	cbz	r0, 8008a38 <_dtoa_r+0x6a0>
 8008a32:	f01a 0f01 	tst.w	sl, #1
 8008a36:	d110      	bne.n	8008a5a <_dtoa_r+0x6c2>
 8008a38:	4620      	mov	r0, r4
 8008a3a:	ee18 1a10 	vmov	r1, s16
 8008a3e:	f000 faf3 	bl	8009028 <_Bfree>
 8008a42:	2300      	movs	r3, #0
 8008a44:	9800      	ldr	r0, [sp, #0]
 8008a46:	702b      	strb	r3, [r5, #0]
 8008a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a4a:	3001      	adds	r0, #1
 8008a4c:	6018      	str	r0, [r3, #0]
 8008a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f43f acf1 	beq.w	8008438 <_dtoa_r+0xa0>
 8008a56:	601d      	str	r5, [r3, #0]
 8008a58:	e4ee      	b.n	8008438 <_dtoa_r+0xa0>
 8008a5a:	9f00      	ldr	r7, [sp, #0]
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	461d      	mov	r5, r3
 8008a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a64:	2a39      	cmp	r2, #57	; 0x39
 8008a66:	d106      	bne.n	8008a76 <_dtoa_r+0x6de>
 8008a68:	9a01      	ldr	r2, [sp, #4]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d1f7      	bne.n	8008a5e <_dtoa_r+0x6c6>
 8008a6e:	9901      	ldr	r1, [sp, #4]
 8008a70:	2230      	movs	r2, #48	; 0x30
 8008a72:	3701      	adds	r7, #1
 8008a74:	700a      	strb	r2, [r1, #0]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	3201      	adds	r2, #1
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e790      	b.n	80089a0 <_dtoa_r+0x608>
 8008a7e:	4ba6      	ldr	r3, [pc, #664]	; (8008d18 <_dtoa_r+0x980>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	f7f7 fdc1 	bl	8000608 <__aeabi_dmul>
 8008a86:	2200      	movs	r2, #0
 8008a88:	2300      	movs	r3, #0
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	460f      	mov	r7, r1
 8008a8e:	f7f8 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	d09d      	beq.n	80089d2 <_dtoa_r+0x63a>
 8008a96:	e7cf      	b.n	8008a38 <_dtoa_r+0x6a0>
 8008a98:	9a08      	ldr	r2, [sp, #32]
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	f000 80d7 	beq.w	8008c4e <_dtoa_r+0x8b6>
 8008aa0:	9a06      	ldr	r2, [sp, #24]
 8008aa2:	2a01      	cmp	r2, #1
 8008aa4:	f300 80ba 	bgt.w	8008c1c <_dtoa_r+0x884>
 8008aa8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008aaa:	2a00      	cmp	r2, #0
 8008aac:	f000 80b2 	beq.w	8008c14 <_dtoa_r+0x87c>
 8008ab0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ab4:	9e07      	ldr	r6, [sp, #28]
 8008ab6:	9d04      	ldr	r5, [sp, #16]
 8008ab8:	9a04      	ldr	r2, [sp, #16]
 8008aba:	441a      	add	r2, r3
 8008abc:	9204      	str	r2, [sp, #16]
 8008abe:	9a05      	ldr	r2, [sp, #20]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	441a      	add	r2, r3
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	f000 fb66 	bl	8009198 <__i2b>
 8008acc:	4607      	mov	r7, r0
 8008ace:	2d00      	cmp	r5, #0
 8008ad0:	dd0c      	ble.n	8008aec <_dtoa_r+0x754>
 8008ad2:	9b05      	ldr	r3, [sp, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	dd09      	ble.n	8008aec <_dtoa_r+0x754>
 8008ad8:	42ab      	cmp	r3, r5
 8008ada:	9a04      	ldr	r2, [sp, #16]
 8008adc:	bfa8      	it	ge
 8008ade:	462b      	movge	r3, r5
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	9204      	str	r2, [sp, #16]
 8008ae4:	9a05      	ldr	r2, [sp, #20]
 8008ae6:	1aed      	subs	r5, r5, r3
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	9305      	str	r3, [sp, #20]
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	b31b      	cbz	r3, 8008b38 <_dtoa_r+0x7a0>
 8008af0:	9b08      	ldr	r3, [sp, #32]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 80af 	beq.w	8008c56 <_dtoa_r+0x8be>
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	dd13      	ble.n	8008b24 <_dtoa_r+0x78c>
 8008afc:	4639      	mov	r1, r7
 8008afe:	4632      	mov	r2, r6
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 fc09 	bl	8009318 <__pow5mult>
 8008b06:	ee18 2a10 	vmov	r2, s16
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fb58 	bl	80091c4 <__multiply>
 8008b14:	ee18 1a10 	vmov	r1, s16
 8008b18:	4680      	mov	r8, r0
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 fa84 	bl	8009028 <_Bfree>
 8008b20:	ee08 8a10 	vmov	s16, r8
 8008b24:	9b07      	ldr	r3, [sp, #28]
 8008b26:	1b9a      	subs	r2, r3, r6
 8008b28:	d006      	beq.n	8008b38 <_dtoa_r+0x7a0>
 8008b2a:	ee18 1a10 	vmov	r1, s16
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fbf2 	bl	8009318 <__pow5mult>
 8008b34:	ee08 0a10 	vmov	s16, r0
 8008b38:	2101      	movs	r1, #1
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fb2c 	bl	8009198 <__i2b>
 8008b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	4606      	mov	r6, r0
 8008b46:	f340 8088 	ble.w	8008c5a <_dtoa_r+0x8c2>
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	4601      	mov	r1, r0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f000 fbe2 	bl	8009318 <__pow5mult>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	4606      	mov	r6, r0
 8008b5a:	f340 8081 	ble.w	8008c60 <_dtoa_r+0x8c8>
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	6933      	ldr	r3, [r6, #16]
 8008b64:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b68:	6918      	ldr	r0, [r3, #16]
 8008b6a:	f000 fac5 	bl	80090f8 <__hi0bits>
 8008b6e:	f1c0 0020 	rsb	r0, r0, #32
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	4418      	add	r0, r3
 8008b76:	f010 001f 	ands.w	r0, r0, #31
 8008b7a:	f000 8092 	beq.w	8008ca2 <_dtoa_r+0x90a>
 8008b7e:	f1c0 0320 	rsb	r3, r0, #32
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	f340 808a 	ble.w	8008c9c <_dtoa_r+0x904>
 8008b88:	f1c0 001c 	rsb	r0, r0, #28
 8008b8c:	9b04      	ldr	r3, [sp, #16]
 8008b8e:	4403      	add	r3, r0
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	9b05      	ldr	r3, [sp, #20]
 8008b94:	4403      	add	r3, r0
 8008b96:	4405      	add	r5, r0
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	9b04      	ldr	r3, [sp, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dd07      	ble.n	8008bb0 <_dtoa_r+0x818>
 8008ba0:	ee18 1a10 	vmov	r1, s16
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f000 fc10 	bl	80093cc <__lshift>
 8008bac:	ee08 0a10 	vmov	s16, r0
 8008bb0:	9b05      	ldr	r3, [sp, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dd05      	ble.n	8008bc2 <_dtoa_r+0x82a>
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f000 fc06 	bl	80093cc <__lshift>
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d06e      	beq.n	8008ca6 <_dtoa_r+0x90e>
 8008bc8:	ee18 0a10 	vmov	r0, s16
 8008bcc:	4631      	mov	r1, r6
 8008bce:	f000 fc6d 	bl	80094ac <__mcmp>
 8008bd2:	2800      	cmp	r0, #0
 8008bd4:	da67      	bge.n	8008ca6 <_dtoa_r+0x90e>
 8008bd6:	9b00      	ldr	r3, [sp, #0]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	ee18 1a10 	vmov	r1, s16
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	220a      	movs	r2, #10
 8008be2:	2300      	movs	r3, #0
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 fa41 	bl	800906c <__multadd>
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	ee08 0a10 	vmov	s16, r0
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 81b1 	beq.w	8008f58 <_dtoa_r+0xbc0>
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4639      	mov	r1, r7
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 fa35 	bl	800906c <__multadd>
 8008c02:	9b02      	ldr	r3, [sp, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	4607      	mov	r7, r0
 8008c08:	f300 808e 	bgt.w	8008d28 <_dtoa_r+0x990>
 8008c0c:	9b06      	ldr	r3, [sp, #24]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	dc51      	bgt.n	8008cb6 <_dtoa_r+0x91e>
 8008c12:	e089      	b.n	8008d28 <_dtoa_r+0x990>
 8008c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c1a:	e74b      	b.n	8008ab4 <_dtoa_r+0x71c>
 8008c1c:	9b03      	ldr	r3, [sp, #12]
 8008c1e:	1e5e      	subs	r6, r3, #1
 8008c20:	9b07      	ldr	r3, [sp, #28]
 8008c22:	42b3      	cmp	r3, r6
 8008c24:	bfbf      	itttt	lt
 8008c26:	9b07      	ldrlt	r3, [sp, #28]
 8008c28:	9607      	strlt	r6, [sp, #28]
 8008c2a:	1af2      	sublt	r2, r6, r3
 8008c2c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c2e:	bfb6      	itet	lt
 8008c30:	189b      	addlt	r3, r3, r2
 8008c32:	1b9e      	subge	r6, r3, r6
 8008c34:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008c36:	9b03      	ldr	r3, [sp, #12]
 8008c38:	bfb8      	it	lt
 8008c3a:	2600      	movlt	r6, #0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	bfb7      	itett	lt
 8008c40:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008c44:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008c48:	1a9d      	sublt	r5, r3, r2
 8008c4a:	2300      	movlt	r3, #0
 8008c4c:	e734      	b.n	8008ab8 <_dtoa_r+0x720>
 8008c4e:	9e07      	ldr	r6, [sp, #28]
 8008c50:	9d04      	ldr	r5, [sp, #16]
 8008c52:	9f08      	ldr	r7, [sp, #32]
 8008c54:	e73b      	b.n	8008ace <_dtoa_r+0x736>
 8008c56:	9a07      	ldr	r2, [sp, #28]
 8008c58:	e767      	b.n	8008b2a <_dtoa_r+0x792>
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	dc18      	bgt.n	8008c92 <_dtoa_r+0x8fa>
 8008c60:	f1ba 0f00 	cmp.w	sl, #0
 8008c64:	d115      	bne.n	8008c92 <_dtoa_r+0x8fa>
 8008c66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c6a:	b993      	cbnz	r3, 8008c92 <_dtoa_r+0x8fa>
 8008c6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c70:	0d1b      	lsrs	r3, r3, #20
 8008c72:	051b      	lsls	r3, r3, #20
 8008c74:	b183      	cbz	r3, 8008c98 <_dtoa_r+0x900>
 8008c76:	9b04      	ldr	r3, [sp, #16]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	9b05      	ldr	r3, [sp, #20]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	9305      	str	r3, [sp, #20]
 8008c82:	f04f 0801 	mov.w	r8, #1
 8008c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f af6a 	bne.w	8008b62 <_dtoa_r+0x7ca>
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e76f      	b.n	8008b72 <_dtoa_r+0x7da>
 8008c92:	f04f 0800 	mov.w	r8, #0
 8008c96:	e7f6      	b.n	8008c86 <_dtoa_r+0x8ee>
 8008c98:	4698      	mov	r8, r3
 8008c9a:	e7f4      	b.n	8008c86 <_dtoa_r+0x8ee>
 8008c9c:	f43f af7d 	beq.w	8008b9a <_dtoa_r+0x802>
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	301c      	adds	r0, #28
 8008ca4:	e772      	b.n	8008b8c <_dtoa_r+0x7f4>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dc37      	bgt.n	8008d1c <_dtoa_r+0x984>
 8008cac:	9b06      	ldr	r3, [sp, #24]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dd34      	ble.n	8008d1c <_dtoa_r+0x984>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	9b02      	ldr	r3, [sp, #8]
 8008cb8:	b96b      	cbnz	r3, 8008cd6 <_dtoa_r+0x93e>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 f9d4 	bl	800906c <__multadd>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	ee18 0a10 	vmov	r0, s16
 8008ccc:	f000 fbee 	bl	80094ac <__mcmp>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	f73f adbb 	bgt.w	800884c <_dtoa_r+0x4b4>
 8008cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cd8:	9d01      	ldr	r5, [sp, #4]
 8008cda:	43db      	mvns	r3, r3
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	f04f 0800 	mov.w	r8, #0
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 f99f 	bl	8009028 <_Bfree>
 8008cea:	2f00      	cmp	r7, #0
 8008cec:	f43f aea4 	beq.w	8008a38 <_dtoa_r+0x6a0>
 8008cf0:	f1b8 0f00 	cmp.w	r8, #0
 8008cf4:	d005      	beq.n	8008d02 <_dtoa_r+0x96a>
 8008cf6:	45b8      	cmp	r8, r7
 8008cf8:	d003      	beq.n	8008d02 <_dtoa_r+0x96a>
 8008cfa:	4641      	mov	r1, r8
 8008cfc:	4620      	mov	r0, r4
 8008cfe:	f000 f993 	bl	8009028 <_Bfree>
 8008d02:	4639      	mov	r1, r7
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 f98f 	bl	8009028 <_Bfree>
 8008d0a:	e695      	b.n	8008a38 <_dtoa_r+0x6a0>
 8008d0c:	2600      	movs	r6, #0
 8008d0e:	4637      	mov	r7, r6
 8008d10:	e7e1      	b.n	8008cd6 <_dtoa_r+0x93e>
 8008d12:	9700      	str	r7, [sp, #0]
 8008d14:	4637      	mov	r7, r6
 8008d16:	e599      	b.n	800884c <_dtoa_r+0x4b4>
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	9b08      	ldr	r3, [sp, #32]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80ca 	beq.w	8008eb8 <_dtoa_r+0xb20>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	dd05      	ble.n	8008d38 <_dtoa_r+0x9a0>
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fb4b 	bl	80093cc <__lshift>
 8008d36:	4607      	mov	r7, r0
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	d05b      	beq.n	8008df6 <_dtoa_r+0xa5e>
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 f931 	bl	8008fa8 <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <_dtoa_r+0x9be>
 8008d4a:	4b87      	ldr	r3, [pc, #540]	; (8008f68 <_dtoa_r+0xbd0>)
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d52:	f7ff bb3b 	b.w	80083cc <_dtoa_r+0x34>
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	3202      	adds	r2, #2
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	f107 010c 	add.w	r1, r7, #12
 8008d60:	300c      	adds	r0, #12
 8008d62:	f000 f913 	bl	8008f8c <memcpy>
 8008d66:	2201      	movs	r2, #1
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fb2e 	bl	80093cc <__lshift>
 8008d70:	9b01      	ldr	r3, [sp, #4]
 8008d72:	f103 0901 	add.w	r9, r3, #1
 8008d76:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	9305      	str	r3, [sp, #20]
 8008d7e:	f00a 0301 	and.w	r3, sl, #1
 8008d82:	46b8      	mov	r8, r7
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	4607      	mov	r7, r0
 8008d88:	4631      	mov	r1, r6
 8008d8a:	ee18 0a10 	vmov	r0, s16
 8008d8e:	f7ff fa77 	bl	8008280 <quorem>
 8008d92:	4641      	mov	r1, r8
 8008d94:	9002      	str	r0, [sp, #8]
 8008d96:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d9a:	ee18 0a10 	vmov	r0, s16
 8008d9e:	f000 fb85 	bl	80094ac <__mcmp>
 8008da2:	463a      	mov	r2, r7
 8008da4:	9003      	str	r0, [sp, #12]
 8008da6:	4631      	mov	r1, r6
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 fb9b 	bl	80094e4 <__mdiff>
 8008dae:	68c2      	ldr	r2, [r0, #12]
 8008db0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008db4:	4605      	mov	r5, r0
 8008db6:	bb02      	cbnz	r2, 8008dfa <_dtoa_r+0xa62>
 8008db8:	4601      	mov	r1, r0
 8008dba:	ee18 0a10 	vmov	r0, s16
 8008dbe:	f000 fb75 	bl	80094ac <__mcmp>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4629      	mov	r1, r5
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	9207      	str	r2, [sp, #28]
 8008dca:	f000 f92d 	bl	8009028 <_Bfree>
 8008dce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008dd2:	ea43 0102 	orr.w	r1, r3, r2
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	430b      	orrs	r3, r1
 8008dda:	464d      	mov	r5, r9
 8008ddc:	d10f      	bne.n	8008dfe <_dtoa_r+0xa66>
 8008dde:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008de2:	d02a      	beq.n	8008e3a <_dtoa_r+0xaa2>
 8008de4:	9b03      	ldr	r3, [sp, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	dd02      	ble.n	8008df0 <_dtoa_r+0xa58>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008df0:	f88b a000 	strb.w	sl, [fp]
 8008df4:	e775      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008df6:	4638      	mov	r0, r7
 8008df8:	e7ba      	b.n	8008d70 <_dtoa_r+0x9d8>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	e7e2      	b.n	8008dc4 <_dtoa_r+0xa2c>
 8008dfe:	9b03      	ldr	r3, [sp, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db04      	blt.n	8008e0e <_dtoa_r+0xa76>
 8008e04:	9906      	ldr	r1, [sp, #24]
 8008e06:	430b      	orrs	r3, r1
 8008e08:	9904      	ldr	r1, [sp, #16]
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	d122      	bne.n	8008e54 <_dtoa_r+0xabc>
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	ddee      	ble.n	8008df0 <_dtoa_r+0xa58>
 8008e12:	ee18 1a10 	vmov	r1, s16
 8008e16:	2201      	movs	r2, #1
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fad7 	bl	80093cc <__lshift>
 8008e1e:	4631      	mov	r1, r6
 8008e20:	ee08 0a10 	vmov	s16, r0
 8008e24:	f000 fb42 	bl	80094ac <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	dc03      	bgt.n	8008e34 <_dtoa_r+0xa9c>
 8008e2c:	d1e0      	bne.n	8008df0 <_dtoa_r+0xa58>
 8008e2e:	f01a 0f01 	tst.w	sl, #1
 8008e32:	d0dd      	beq.n	8008df0 <_dtoa_r+0xa58>
 8008e34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e38:	d1d7      	bne.n	8008dea <_dtoa_r+0xa52>
 8008e3a:	2339      	movs	r3, #57	; 0x39
 8008e3c:	f88b 3000 	strb.w	r3, [fp]
 8008e40:	462b      	mov	r3, r5
 8008e42:	461d      	mov	r5, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e4a:	2a39      	cmp	r2, #57	; 0x39
 8008e4c:	d071      	beq.n	8008f32 <_dtoa_r+0xb9a>
 8008e4e:	3201      	adds	r2, #1
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e746      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008e54:	2a00      	cmp	r2, #0
 8008e56:	dd07      	ble.n	8008e68 <_dtoa_r+0xad0>
 8008e58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008e5c:	d0ed      	beq.n	8008e3a <_dtoa_r+0xaa2>
 8008e5e:	f10a 0301 	add.w	r3, sl, #1
 8008e62:	f88b 3000 	strb.w	r3, [fp]
 8008e66:	e73c      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008e68:	9b05      	ldr	r3, [sp, #20]
 8008e6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008e6e:	4599      	cmp	r9, r3
 8008e70:	d047      	beq.n	8008f02 <_dtoa_r+0xb6a>
 8008e72:	ee18 1a10 	vmov	r1, s16
 8008e76:	2300      	movs	r3, #0
 8008e78:	220a      	movs	r2, #10
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f8f6 	bl	800906c <__multadd>
 8008e80:	45b8      	cmp	r8, r7
 8008e82:	ee08 0a10 	vmov	s16, r0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f04f 020a 	mov.w	r2, #10
 8008e8e:	4641      	mov	r1, r8
 8008e90:	4620      	mov	r0, r4
 8008e92:	d106      	bne.n	8008ea2 <_dtoa_r+0xb0a>
 8008e94:	f000 f8ea 	bl	800906c <__multadd>
 8008e98:	4680      	mov	r8, r0
 8008e9a:	4607      	mov	r7, r0
 8008e9c:	f109 0901 	add.w	r9, r9, #1
 8008ea0:	e772      	b.n	8008d88 <_dtoa_r+0x9f0>
 8008ea2:	f000 f8e3 	bl	800906c <__multadd>
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	2300      	movs	r3, #0
 8008eac:	220a      	movs	r2, #10
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f000 f8dc 	bl	800906c <__multadd>
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	e7f1      	b.n	8008e9c <_dtoa_r+0xb04>
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	9d01      	ldr	r5, [sp, #4]
 8008ebe:	ee18 0a10 	vmov	r0, s16
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	f7ff f9dc 	bl	8008280 <quorem>
 8008ec8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	f805 ab01 	strb.w	sl, [r5], #1
 8008ed2:	1aea      	subs	r2, r5, r3
 8008ed4:	9b02      	ldr	r3, [sp, #8]
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	dd09      	ble.n	8008eee <_dtoa_r+0xb56>
 8008eda:	ee18 1a10 	vmov	r1, s16
 8008ede:	2300      	movs	r3, #0
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 f8c2 	bl	800906c <__multadd>
 8008ee8:	ee08 0a10 	vmov	s16, r0
 8008eec:	e7e7      	b.n	8008ebe <_dtoa_r+0xb26>
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	bfc8      	it	gt
 8008ef4:	461d      	movgt	r5, r3
 8008ef6:	9b01      	ldr	r3, [sp, #4]
 8008ef8:	bfd8      	it	le
 8008efa:	2501      	movle	r5, #1
 8008efc:	441d      	add	r5, r3
 8008efe:	f04f 0800 	mov.w	r8, #0
 8008f02:	ee18 1a10 	vmov	r1, s16
 8008f06:	2201      	movs	r2, #1
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fa5f 	bl	80093cc <__lshift>
 8008f0e:	4631      	mov	r1, r6
 8008f10:	ee08 0a10 	vmov	s16, r0
 8008f14:	f000 faca 	bl	80094ac <__mcmp>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	dc91      	bgt.n	8008e40 <_dtoa_r+0xaa8>
 8008f1c:	d102      	bne.n	8008f24 <_dtoa_r+0xb8c>
 8008f1e:	f01a 0f01 	tst.w	sl, #1
 8008f22:	d18d      	bne.n	8008e40 <_dtoa_r+0xaa8>
 8008f24:	462b      	mov	r3, r5
 8008f26:	461d      	mov	r5, r3
 8008f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f2c:	2a30      	cmp	r2, #48	; 0x30
 8008f2e:	d0fa      	beq.n	8008f26 <_dtoa_r+0xb8e>
 8008f30:	e6d7      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008f32:	9a01      	ldr	r2, [sp, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d184      	bne.n	8008e42 <_dtoa_r+0xaaa>
 8008f38:	9b00      	ldr	r3, [sp, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	2331      	movs	r3, #49	; 0x31
 8008f40:	7013      	strb	r3, [r2, #0]
 8008f42:	e6ce      	b.n	8008ce2 <_dtoa_r+0x94a>
 8008f44:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <_dtoa_r+0xbd4>)
 8008f46:	f7ff ba95 	b.w	8008474 <_dtoa_r+0xdc>
 8008f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f47f aa6e 	bne.w	800842e <_dtoa_r+0x96>
 8008f52:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <_dtoa_r+0xbd8>)
 8008f54:	f7ff ba8e 	b.w	8008474 <_dtoa_r+0xdc>
 8008f58:	9b02      	ldr	r3, [sp, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dcae      	bgt.n	8008ebc <_dtoa_r+0xb24>
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	f73f aea8 	bgt.w	8008cb6 <_dtoa_r+0x91e>
 8008f66:	e7a9      	b.n	8008ebc <_dtoa_r+0xb24>
 8008f68:	0800aecf 	.word	0x0800aecf
 8008f6c:	0800ae2c 	.word	0x0800ae2c
 8008f70:	0800ae50 	.word	0x0800ae50

08008f74 <_localeconv_r>:
 8008f74:	4800      	ldr	r0, [pc, #0]	; (8008f78 <_localeconv_r+0x4>)
 8008f76:	4770      	bx	lr
 8008f78:	2000016c 	.word	0x2000016c

08008f7c <malloc>:
 8008f7c:	4b02      	ldr	r3, [pc, #8]	; (8008f88 <malloc+0xc>)
 8008f7e:	4601      	mov	r1, r0
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	f000 bc17 	b.w	80097b4 <_malloc_r>
 8008f86:	bf00      	nop
 8008f88:	20000018 	.word	0x20000018

08008f8c <memcpy>:
 8008f8c:	440a      	add	r2, r1
 8008f8e:	4291      	cmp	r1, r2
 8008f90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f94:	d100      	bne.n	8008f98 <memcpy+0xc>
 8008f96:	4770      	bx	lr
 8008f98:	b510      	push	{r4, lr}
 8008f9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fa2:	4291      	cmp	r1, r2
 8008fa4:	d1f9      	bne.n	8008f9a <memcpy+0xe>
 8008fa6:	bd10      	pop	{r4, pc}

08008fa8 <_Balloc>:
 8008fa8:	b570      	push	{r4, r5, r6, lr}
 8008faa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fac:	4604      	mov	r4, r0
 8008fae:	460d      	mov	r5, r1
 8008fb0:	b976      	cbnz	r6, 8008fd0 <_Balloc+0x28>
 8008fb2:	2010      	movs	r0, #16
 8008fb4:	f7ff ffe2 	bl	8008f7c <malloc>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	6260      	str	r0, [r4, #36]	; 0x24
 8008fbc:	b920      	cbnz	r0, 8008fc8 <_Balloc+0x20>
 8008fbe:	4b18      	ldr	r3, [pc, #96]	; (8009020 <_Balloc+0x78>)
 8008fc0:	4818      	ldr	r0, [pc, #96]	; (8009024 <_Balloc+0x7c>)
 8008fc2:	2166      	movs	r1, #102	; 0x66
 8008fc4:	f000 fdd6 	bl	8009b74 <__assert_func>
 8008fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fcc:	6006      	str	r6, [r0, #0]
 8008fce:	60c6      	str	r6, [r0, #12]
 8008fd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fd2:	68f3      	ldr	r3, [r6, #12]
 8008fd4:	b183      	cbz	r3, 8008ff8 <_Balloc+0x50>
 8008fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fde:	b9b8      	cbnz	r0, 8009010 <_Balloc+0x68>
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe6:	1d72      	adds	r2, r6, #5
 8008fe8:	0092      	lsls	r2, r2, #2
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fb60 	bl	80096b0 <_calloc_r>
 8008ff0:	b160      	cbz	r0, 800900c <_Balloc+0x64>
 8008ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff6:	e00e      	b.n	8009016 <_Balloc+0x6e>
 8008ff8:	2221      	movs	r2, #33	; 0x21
 8008ffa:	2104      	movs	r1, #4
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	f000 fb57 	bl	80096b0 <_calloc_r>
 8009002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009004:	60f0      	str	r0, [r6, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <_Balloc+0x2e>
 800900c:	2000      	movs	r0, #0
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	6802      	ldr	r2, [r0, #0]
 8009012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009016:	2300      	movs	r3, #0
 8009018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800901c:	e7f7      	b.n	800900e <_Balloc+0x66>
 800901e:	bf00      	nop
 8009020:	0800ae5d 	.word	0x0800ae5d
 8009024:	0800aee0 	.word	0x0800aee0

08009028 <_Bfree>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	b976      	cbnz	r6, 8009050 <_Bfree+0x28>
 8009032:	2010      	movs	r0, #16
 8009034:	f7ff ffa2 	bl	8008f7c <malloc>
 8009038:	4602      	mov	r2, r0
 800903a:	6268      	str	r0, [r5, #36]	; 0x24
 800903c:	b920      	cbnz	r0, 8009048 <_Bfree+0x20>
 800903e:	4b09      	ldr	r3, [pc, #36]	; (8009064 <_Bfree+0x3c>)
 8009040:	4809      	ldr	r0, [pc, #36]	; (8009068 <_Bfree+0x40>)
 8009042:	218a      	movs	r1, #138	; 0x8a
 8009044:	f000 fd96 	bl	8009b74 <__assert_func>
 8009048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800904c:	6006      	str	r6, [r0, #0]
 800904e:	60c6      	str	r6, [r0, #12]
 8009050:	b13c      	cbz	r4, 8009062 <_Bfree+0x3a>
 8009052:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009054:	6862      	ldr	r2, [r4, #4]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800905c:	6021      	str	r1, [r4, #0]
 800905e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	0800ae5d 	.word	0x0800ae5d
 8009068:	0800aee0 	.word	0x0800aee0

0800906c <__multadd>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	690d      	ldr	r5, [r1, #16]
 8009072:	4607      	mov	r7, r0
 8009074:	460c      	mov	r4, r1
 8009076:	461e      	mov	r6, r3
 8009078:	f101 0c14 	add.w	ip, r1, #20
 800907c:	2000      	movs	r0, #0
 800907e:	f8dc 3000 	ldr.w	r3, [ip]
 8009082:	b299      	uxth	r1, r3
 8009084:	fb02 6101 	mla	r1, r2, r1, r6
 8009088:	0c1e      	lsrs	r6, r3, #16
 800908a:	0c0b      	lsrs	r3, r1, #16
 800908c:	fb02 3306 	mla	r3, r2, r6, r3
 8009090:	b289      	uxth	r1, r1
 8009092:	3001      	adds	r0, #1
 8009094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009098:	4285      	cmp	r5, r0
 800909a:	f84c 1b04 	str.w	r1, [ip], #4
 800909e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090a2:	dcec      	bgt.n	800907e <__multadd+0x12>
 80090a4:	b30e      	cbz	r6, 80090ea <__multadd+0x7e>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42ab      	cmp	r3, r5
 80090aa:	dc19      	bgt.n	80090e0 <__multadd+0x74>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4638      	mov	r0, r7
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff79 	bl	8008fa8 <_Balloc>
 80090b6:	4680      	mov	r8, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__multadd+0x5a>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b0c      	ldr	r3, [pc, #48]	; (80090f0 <__multadd+0x84>)
 80090be:	480d      	ldr	r0, [pc, #52]	; (80090f4 <__multadd+0x88>)
 80090c0:	21b5      	movs	r1, #181	; 0xb5
 80090c2:	f000 fd57 	bl	8009b74 <__assert_func>
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	f104 010c 	add.w	r1, r4, #12
 80090ce:	0092      	lsls	r2, r2, #2
 80090d0:	300c      	adds	r0, #12
 80090d2:	f7ff ff5b 	bl	8008f8c <memcpy>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa5 	bl	8009028 <_Bfree>
 80090de:	4644      	mov	r4, r8
 80090e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090e4:	3501      	adds	r5, #1
 80090e6:	615e      	str	r6, [r3, #20]
 80090e8:	6125      	str	r5, [r4, #16]
 80090ea:	4620      	mov	r0, r4
 80090ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f0:	0800aecf 	.word	0x0800aecf
 80090f4:	0800aee0 	.word	0x0800aee0

080090f8 <__hi0bits>:
 80090f8:	0c03      	lsrs	r3, r0, #16
 80090fa:	041b      	lsls	r3, r3, #16
 80090fc:	b9d3      	cbnz	r3, 8009134 <__hi0bits+0x3c>
 80090fe:	0400      	lsls	r0, r0, #16
 8009100:	2310      	movs	r3, #16
 8009102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009106:	bf04      	itt	eq
 8009108:	0200      	lsleq	r0, r0, #8
 800910a:	3308      	addeq	r3, #8
 800910c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009110:	bf04      	itt	eq
 8009112:	0100      	lsleq	r0, r0, #4
 8009114:	3304      	addeq	r3, #4
 8009116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800911a:	bf04      	itt	eq
 800911c:	0080      	lsleq	r0, r0, #2
 800911e:	3302      	addeq	r3, #2
 8009120:	2800      	cmp	r0, #0
 8009122:	db05      	blt.n	8009130 <__hi0bits+0x38>
 8009124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009128:	f103 0301 	add.w	r3, r3, #1
 800912c:	bf08      	it	eq
 800912e:	2320      	moveq	r3, #32
 8009130:	4618      	mov	r0, r3
 8009132:	4770      	bx	lr
 8009134:	2300      	movs	r3, #0
 8009136:	e7e4      	b.n	8009102 <__hi0bits+0xa>

08009138 <__lo0bits>:
 8009138:	6803      	ldr	r3, [r0, #0]
 800913a:	f013 0207 	ands.w	r2, r3, #7
 800913e:	4601      	mov	r1, r0
 8009140:	d00b      	beq.n	800915a <__lo0bits+0x22>
 8009142:	07da      	lsls	r2, r3, #31
 8009144:	d423      	bmi.n	800918e <__lo0bits+0x56>
 8009146:	0798      	lsls	r0, r3, #30
 8009148:	bf49      	itett	mi
 800914a:	085b      	lsrmi	r3, r3, #1
 800914c:	089b      	lsrpl	r3, r3, #2
 800914e:	2001      	movmi	r0, #1
 8009150:	600b      	strmi	r3, [r1, #0]
 8009152:	bf5c      	itt	pl
 8009154:	600b      	strpl	r3, [r1, #0]
 8009156:	2002      	movpl	r0, #2
 8009158:	4770      	bx	lr
 800915a:	b298      	uxth	r0, r3
 800915c:	b9a8      	cbnz	r0, 800918a <__lo0bits+0x52>
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	2010      	movs	r0, #16
 8009162:	b2da      	uxtb	r2, r3
 8009164:	b90a      	cbnz	r2, 800916a <__lo0bits+0x32>
 8009166:	3008      	adds	r0, #8
 8009168:	0a1b      	lsrs	r3, r3, #8
 800916a:	071a      	lsls	r2, r3, #28
 800916c:	bf04      	itt	eq
 800916e:	091b      	lsreq	r3, r3, #4
 8009170:	3004      	addeq	r0, #4
 8009172:	079a      	lsls	r2, r3, #30
 8009174:	bf04      	itt	eq
 8009176:	089b      	lsreq	r3, r3, #2
 8009178:	3002      	addeq	r0, #2
 800917a:	07da      	lsls	r2, r3, #31
 800917c:	d403      	bmi.n	8009186 <__lo0bits+0x4e>
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	f100 0001 	add.w	r0, r0, #1
 8009184:	d005      	beq.n	8009192 <__lo0bits+0x5a>
 8009186:	600b      	str	r3, [r1, #0]
 8009188:	4770      	bx	lr
 800918a:	4610      	mov	r0, r2
 800918c:	e7e9      	b.n	8009162 <__lo0bits+0x2a>
 800918e:	2000      	movs	r0, #0
 8009190:	4770      	bx	lr
 8009192:	2020      	movs	r0, #32
 8009194:	4770      	bx	lr
	...

08009198 <__i2b>:
 8009198:	b510      	push	{r4, lr}
 800919a:	460c      	mov	r4, r1
 800919c:	2101      	movs	r1, #1
 800919e:	f7ff ff03 	bl	8008fa8 <_Balloc>
 80091a2:	4602      	mov	r2, r0
 80091a4:	b928      	cbnz	r0, 80091b2 <__i2b+0x1a>
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <__i2b+0x24>)
 80091a8:	4805      	ldr	r0, [pc, #20]	; (80091c0 <__i2b+0x28>)
 80091aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091ae:	f000 fce1 	bl	8009b74 <__assert_func>
 80091b2:	2301      	movs	r3, #1
 80091b4:	6144      	str	r4, [r0, #20]
 80091b6:	6103      	str	r3, [r0, #16]
 80091b8:	bd10      	pop	{r4, pc}
 80091ba:	bf00      	nop
 80091bc:	0800aecf 	.word	0x0800aecf
 80091c0:	0800aee0 	.word	0x0800aee0

080091c4 <__multiply>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	4691      	mov	r9, r2
 80091ca:	690a      	ldr	r2, [r1, #16]
 80091cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	bfb8      	it	lt
 80091d4:	460b      	movlt	r3, r1
 80091d6:	460c      	mov	r4, r1
 80091d8:	bfbc      	itt	lt
 80091da:	464c      	movlt	r4, r9
 80091dc:	4699      	movlt	r9, r3
 80091de:	6927      	ldr	r7, [r4, #16]
 80091e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091e4:	68a3      	ldr	r3, [r4, #8]
 80091e6:	6861      	ldr	r1, [r4, #4]
 80091e8:	eb07 060a 	add.w	r6, r7, sl
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	b085      	sub	sp, #20
 80091f0:	bfb8      	it	lt
 80091f2:	3101      	addlt	r1, #1
 80091f4:	f7ff fed8 	bl	8008fa8 <_Balloc>
 80091f8:	b930      	cbnz	r0, 8009208 <__multiply+0x44>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4b44      	ldr	r3, [pc, #272]	; (8009310 <__multiply+0x14c>)
 80091fe:	4845      	ldr	r0, [pc, #276]	; (8009314 <__multiply+0x150>)
 8009200:	f240 115d 	movw	r1, #349	; 0x15d
 8009204:	f000 fcb6 	bl	8009b74 <__assert_func>
 8009208:	f100 0514 	add.w	r5, r0, #20
 800920c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009210:	462b      	mov	r3, r5
 8009212:	2200      	movs	r2, #0
 8009214:	4543      	cmp	r3, r8
 8009216:	d321      	bcc.n	800925c <__multiply+0x98>
 8009218:	f104 0314 	add.w	r3, r4, #20
 800921c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009220:	f109 0314 	add.w	r3, r9, #20
 8009224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009228:	9202      	str	r2, [sp, #8]
 800922a:	1b3a      	subs	r2, r7, r4
 800922c:	3a15      	subs	r2, #21
 800922e:	f022 0203 	bic.w	r2, r2, #3
 8009232:	3204      	adds	r2, #4
 8009234:	f104 0115 	add.w	r1, r4, #21
 8009238:	428f      	cmp	r7, r1
 800923a:	bf38      	it	cc
 800923c:	2204      	movcc	r2, #4
 800923e:	9201      	str	r2, [sp, #4]
 8009240:	9a02      	ldr	r2, [sp, #8]
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	429a      	cmp	r2, r3
 8009246:	d80c      	bhi.n	8009262 <__multiply+0x9e>
 8009248:	2e00      	cmp	r6, #0
 800924a:	dd03      	ble.n	8009254 <__multiply+0x90>
 800924c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009250:	2b00      	cmp	r3, #0
 8009252:	d05a      	beq.n	800930a <__multiply+0x146>
 8009254:	6106      	str	r6, [r0, #16]
 8009256:	b005      	add	sp, #20
 8009258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925c:	f843 2b04 	str.w	r2, [r3], #4
 8009260:	e7d8      	b.n	8009214 <__multiply+0x50>
 8009262:	f8b3 a000 	ldrh.w	sl, [r3]
 8009266:	f1ba 0f00 	cmp.w	sl, #0
 800926a:	d024      	beq.n	80092b6 <__multiply+0xf2>
 800926c:	f104 0e14 	add.w	lr, r4, #20
 8009270:	46a9      	mov	r9, r5
 8009272:	f04f 0c00 	mov.w	ip, #0
 8009276:	f85e 2b04 	ldr.w	r2, [lr], #4
 800927a:	f8d9 1000 	ldr.w	r1, [r9]
 800927e:	fa1f fb82 	uxth.w	fp, r2
 8009282:	b289      	uxth	r1, r1
 8009284:	fb0a 110b 	mla	r1, sl, fp, r1
 8009288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800928c:	f8d9 2000 	ldr.w	r2, [r9]
 8009290:	4461      	add	r1, ip
 8009292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009296:	fb0a c20b 	mla	r2, sl, fp, ip
 800929a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800929e:	b289      	uxth	r1, r1
 80092a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092a4:	4577      	cmp	r7, lr
 80092a6:	f849 1b04 	str.w	r1, [r9], #4
 80092aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80092ae:	d8e2      	bhi.n	8009276 <__multiply+0xb2>
 80092b0:	9a01      	ldr	r2, [sp, #4]
 80092b2:	f845 c002 	str.w	ip, [r5, r2]
 80092b6:	9a03      	ldr	r2, [sp, #12]
 80092b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092bc:	3304      	adds	r3, #4
 80092be:	f1b9 0f00 	cmp.w	r9, #0
 80092c2:	d020      	beq.n	8009306 <__multiply+0x142>
 80092c4:	6829      	ldr	r1, [r5, #0]
 80092c6:	f104 0c14 	add.w	ip, r4, #20
 80092ca:	46ae      	mov	lr, r5
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	f8bc b000 	ldrh.w	fp, [ip]
 80092d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092d8:	fb09 220b 	mla	r2, r9, fp, r2
 80092dc:	4492      	add	sl, r2
 80092de:	b289      	uxth	r1, r1
 80092e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092e4:	f84e 1b04 	str.w	r1, [lr], #4
 80092e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092ec:	f8be 1000 	ldrh.w	r1, [lr]
 80092f0:	0c12      	lsrs	r2, r2, #16
 80092f2:	fb09 1102 	mla	r1, r9, r2, r1
 80092f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092fa:	4567      	cmp	r7, ip
 80092fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009300:	d8e6      	bhi.n	80092d0 <__multiply+0x10c>
 8009302:	9a01      	ldr	r2, [sp, #4]
 8009304:	50a9      	str	r1, [r5, r2]
 8009306:	3504      	adds	r5, #4
 8009308:	e79a      	b.n	8009240 <__multiply+0x7c>
 800930a:	3e01      	subs	r6, #1
 800930c:	e79c      	b.n	8009248 <__multiply+0x84>
 800930e:	bf00      	nop
 8009310:	0800aecf 	.word	0x0800aecf
 8009314:	0800aee0 	.word	0x0800aee0

08009318 <__pow5mult>:
 8009318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800931c:	4615      	mov	r5, r2
 800931e:	f012 0203 	ands.w	r2, r2, #3
 8009322:	4606      	mov	r6, r0
 8009324:	460f      	mov	r7, r1
 8009326:	d007      	beq.n	8009338 <__pow5mult+0x20>
 8009328:	4c25      	ldr	r4, [pc, #148]	; (80093c0 <__pow5mult+0xa8>)
 800932a:	3a01      	subs	r2, #1
 800932c:	2300      	movs	r3, #0
 800932e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009332:	f7ff fe9b 	bl	800906c <__multadd>
 8009336:	4607      	mov	r7, r0
 8009338:	10ad      	asrs	r5, r5, #2
 800933a:	d03d      	beq.n	80093b8 <__pow5mult+0xa0>
 800933c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800933e:	b97c      	cbnz	r4, 8009360 <__pow5mult+0x48>
 8009340:	2010      	movs	r0, #16
 8009342:	f7ff fe1b 	bl	8008f7c <malloc>
 8009346:	4602      	mov	r2, r0
 8009348:	6270      	str	r0, [r6, #36]	; 0x24
 800934a:	b928      	cbnz	r0, 8009358 <__pow5mult+0x40>
 800934c:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <__pow5mult+0xac>)
 800934e:	481e      	ldr	r0, [pc, #120]	; (80093c8 <__pow5mult+0xb0>)
 8009350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009354:	f000 fc0e 	bl	8009b74 <__assert_func>
 8009358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800935c:	6004      	str	r4, [r0, #0]
 800935e:	60c4      	str	r4, [r0, #12]
 8009360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009368:	b94c      	cbnz	r4, 800937e <__pow5mult+0x66>
 800936a:	f240 2171 	movw	r1, #625	; 0x271
 800936e:	4630      	mov	r0, r6
 8009370:	f7ff ff12 	bl	8009198 <__i2b>
 8009374:	2300      	movs	r3, #0
 8009376:	f8c8 0008 	str.w	r0, [r8, #8]
 800937a:	4604      	mov	r4, r0
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	f04f 0900 	mov.w	r9, #0
 8009382:	07eb      	lsls	r3, r5, #31
 8009384:	d50a      	bpl.n	800939c <__pow5mult+0x84>
 8009386:	4639      	mov	r1, r7
 8009388:	4622      	mov	r2, r4
 800938a:	4630      	mov	r0, r6
 800938c:	f7ff ff1a 	bl	80091c4 <__multiply>
 8009390:	4639      	mov	r1, r7
 8009392:	4680      	mov	r8, r0
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff fe47 	bl	8009028 <_Bfree>
 800939a:	4647      	mov	r7, r8
 800939c:	106d      	asrs	r5, r5, #1
 800939e:	d00b      	beq.n	80093b8 <__pow5mult+0xa0>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	b938      	cbnz	r0, 80093b4 <__pow5mult+0x9c>
 80093a4:	4622      	mov	r2, r4
 80093a6:	4621      	mov	r1, r4
 80093a8:	4630      	mov	r0, r6
 80093aa:	f7ff ff0b 	bl	80091c4 <__multiply>
 80093ae:	6020      	str	r0, [r4, #0]
 80093b0:	f8c0 9000 	str.w	r9, [r0]
 80093b4:	4604      	mov	r4, r0
 80093b6:	e7e4      	b.n	8009382 <__pow5mult+0x6a>
 80093b8:	4638      	mov	r0, r7
 80093ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093be:	bf00      	nop
 80093c0:	0800b030 	.word	0x0800b030
 80093c4:	0800ae5d 	.word	0x0800ae5d
 80093c8:	0800aee0 	.word	0x0800aee0

080093cc <__lshift>:
 80093cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d0:	460c      	mov	r4, r1
 80093d2:	6849      	ldr	r1, [r1, #4]
 80093d4:	6923      	ldr	r3, [r4, #16]
 80093d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	4607      	mov	r7, r0
 80093de:	4691      	mov	r9, r2
 80093e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093e4:	f108 0601 	add.w	r6, r8, #1
 80093e8:	42b3      	cmp	r3, r6
 80093ea:	db0b      	blt.n	8009404 <__lshift+0x38>
 80093ec:	4638      	mov	r0, r7
 80093ee:	f7ff fddb 	bl	8008fa8 <_Balloc>
 80093f2:	4605      	mov	r5, r0
 80093f4:	b948      	cbnz	r0, 800940a <__lshift+0x3e>
 80093f6:	4602      	mov	r2, r0
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <__lshift+0xd8>)
 80093fa:	482b      	ldr	r0, [pc, #172]	; (80094a8 <__lshift+0xdc>)
 80093fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009400:	f000 fbb8 	bl	8009b74 <__assert_func>
 8009404:	3101      	adds	r1, #1
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	e7ee      	b.n	80093e8 <__lshift+0x1c>
 800940a:	2300      	movs	r3, #0
 800940c:	f100 0114 	add.w	r1, r0, #20
 8009410:	f100 0210 	add.w	r2, r0, #16
 8009414:	4618      	mov	r0, r3
 8009416:	4553      	cmp	r3, sl
 8009418:	db37      	blt.n	800948a <__lshift+0xbe>
 800941a:	6920      	ldr	r0, [r4, #16]
 800941c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009420:	f104 0314 	add.w	r3, r4, #20
 8009424:	f019 091f 	ands.w	r9, r9, #31
 8009428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800942c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009430:	d02f      	beq.n	8009492 <__lshift+0xc6>
 8009432:	f1c9 0e20 	rsb	lr, r9, #32
 8009436:	468a      	mov	sl, r1
 8009438:	f04f 0c00 	mov.w	ip, #0
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	fa02 f209 	lsl.w	r2, r2, r9
 8009442:	ea42 020c 	orr.w	r2, r2, ip
 8009446:	f84a 2b04 	str.w	r2, [sl], #4
 800944a:	f853 2b04 	ldr.w	r2, [r3], #4
 800944e:	4298      	cmp	r0, r3
 8009450:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009454:	d8f2      	bhi.n	800943c <__lshift+0x70>
 8009456:	1b03      	subs	r3, r0, r4
 8009458:	3b15      	subs	r3, #21
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	3304      	adds	r3, #4
 8009460:	f104 0215 	add.w	r2, r4, #21
 8009464:	4290      	cmp	r0, r2
 8009466:	bf38      	it	cc
 8009468:	2304      	movcc	r3, #4
 800946a:	f841 c003 	str.w	ip, [r1, r3]
 800946e:	f1bc 0f00 	cmp.w	ip, #0
 8009472:	d001      	beq.n	8009478 <__lshift+0xac>
 8009474:	f108 0602 	add.w	r6, r8, #2
 8009478:	3e01      	subs	r6, #1
 800947a:	4638      	mov	r0, r7
 800947c:	612e      	str	r6, [r5, #16]
 800947e:	4621      	mov	r1, r4
 8009480:	f7ff fdd2 	bl	8009028 <_Bfree>
 8009484:	4628      	mov	r0, r5
 8009486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948a:	f842 0f04 	str.w	r0, [r2, #4]!
 800948e:	3301      	adds	r3, #1
 8009490:	e7c1      	b.n	8009416 <__lshift+0x4a>
 8009492:	3904      	subs	r1, #4
 8009494:	f853 2b04 	ldr.w	r2, [r3], #4
 8009498:	f841 2f04 	str.w	r2, [r1, #4]!
 800949c:	4298      	cmp	r0, r3
 800949e:	d8f9      	bhi.n	8009494 <__lshift+0xc8>
 80094a0:	e7ea      	b.n	8009478 <__lshift+0xac>
 80094a2:	bf00      	nop
 80094a4:	0800aecf 	.word	0x0800aecf
 80094a8:	0800aee0 	.word	0x0800aee0

080094ac <__mcmp>:
 80094ac:	b530      	push	{r4, r5, lr}
 80094ae:	6902      	ldr	r2, [r0, #16]
 80094b0:	690c      	ldr	r4, [r1, #16]
 80094b2:	1b12      	subs	r2, r2, r4
 80094b4:	d10e      	bne.n	80094d4 <__mcmp+0x28>
 80094b6:	f100 0314 	add.w	r3, r0, #20
 80094ba:	3114      	adds	r1, #20
 80094bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094cc:	42a5      	cmp	r5, r4
 80094ce:	d003      	beq.n	80094d8 <__mcmp+0x2c>
 80094d0:	d305      	bcc.n	80094de <__mcmp+0x32>
 80094d2:	2201      	movs	r2, #1
 80094d4:	4610      	mov	r0, r2
 80094d6:	bd30      	pop	{r4, r5, pc}
 80094d8:	4283      	cmp	r3, r0
 80094da:	d3f3      	bcc.n	80094c4 <__mcmp+0x18>
 80094dc:	e7fa      	b.n	80094d4 <__mcmp+0x28>
 80094de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094e2:	e7f7      	b.n	80094d4 <__mcmp+0x28>

080094e4 <__mdiff>:
 80094e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	4606      	mov	r6, r0
 80094ec:	4611      	mov	r1, r2
 80094ee:	4620      	mov	r0, r4
 80094f0:	4690      	mov	r8, r2
 80094f2:	f7ff ffdb 	bl	80094ac <__mcmp>
 80094f6:	1e05      	subs	r5, r0, #0
 80094f8:	d110      	bne.n	800951c <__mdiff+0x38>
 80094fa:	4629      	mov	r1, r5
 80094fc:	4630      	mov	r0, r6
 80094fe:	f7ff fd53 	bl	8008fa8 <_Balloc>
 8009502:	b930      	cbnz	r0, 8009512 <__mdiff+0x2e>
 8009504:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <__mdiff+0x10c>)
 8009506:	4602      	mov	r2, r0
 8009508:	f240 2132 	movw	r1, #562	; 0x232
 800950c:	4839      	ldr	r0, [pc, #228]	; (80095f4 <__mdiff+0x110>)
 800950e:	f000 fb31 	bl	8009b74 <__assert_func>
 8009512:	2301      	movs	r3, #1
 8009514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	bfa4      	itt	ge
 800951e:	4643      	movge	r3, r8
 8009520:	46a0      	movge	r8, r4
 8009522:	4630      	mov	r0, r6
 8009524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009528:	bfa6      	itte	ge
 800952a:	461c      	movge	r4, r3
 800952c:	2500      	movge	r5, #0
 800952e:	2501      	movlt	r5, #1
 8009530:	f7ff fd3a 	bl	8008fa8 <_Balloc>
 8009534:	b920      	cbnz	r0, 8009540 <__mdiff+0x5c>
 8009536:	4b2e      	ldr	r3, [pc, #184]	; (80095f0 <__mdiff+0x10c>)
 8009538:	4602      	mov	r2, r0
 800953a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800953e:	e7e5      	b.n	800950c <__mdiff+0x28>
 8009540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009544:	6926      	ldr	r6, [r4, #16]
 8009546:	60c5      	str	r5, [r0, #12]
 8009548:	f104 0914 	add.w	r9, r4, #20
 800954c:	f108 0514 	add.w	r5, r8, #20
 8009550:	f100 0e14 	add.w	lr, r0, #20
 8009554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800955c:	f108 0210 	add.w	r2, r8, #16
 8009560:	46f2      	mov	sl, lr
 8009562:	2100      	movs	r1, #0
 8009564:	f859 3b04 	ldr.w	r3, [r9], #4
 8009568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800956c:	fa1f f883 	uxth.w	r8, r3
 8009570:	fa11 f18b 	uxtah	r1, r1, fp
 8009574:	0c1b      	lsrs	r3, r3, #16
 8009576:	eba1 0808 	sub.w	r8, r1, r8
 800957a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800957e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009582:	fa1f f888 	uxth.w	r8, r8
 8009586:	1419      	asrs	r1, r3, #16
 8009588:	454e      	cmp	r6, r9
 800958a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800958e:	f84a 3b04 	str.w	r3, [sl], #4
 8009592:	d8e7      	bhi.n	8009564 <__mdiff+0x80>
 8009594:	1b33      	subs	r3, r6, r4
 8009596:	3b15      	subs	r3, #21
 8009598:	f023 0303 	bic.w	r3, r3, #3
 800959c:	3304      	adds	r3, #4
 800959e:	3415      	adds	r4, #21
 80095a0:	42a6      	cmp	r6, r4
 80095a2:	bf38      	it	cc
 80095a4:	2304      	movcc	r3, #4
 80095a6:	441d      	add	r5, r3
 80095a8:	4473      	add	r3, lr
 80095aa:	469e      	mov	lr, r3
 80095ac:	462e      	mov	r6, r5
 80095ae:	4566      	cmp	r6, ip
 80095b0:	d30e      	bcc.n	80095d0 <__mdiff+0xec>
 80095b2:	f10c 0203 	add.w	r2, ip, #3
 80095b6:	1b52      	subs	r2, r2, r5
 80095b8:	f022 0203 	bic.w	r2, r2, #3
 80095bc:	3d03      	subs	r5, #3
 80095be:	45ac      	cmp	ip, r5
 80095c0:	bf38      	it	cc
 80095c2:	2200      	movcc	r2, #0
 80095c4:	441a      	add	r2, r3
 80095c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ca:	b17b      	cbz	r3, 80095ec <__mdiff+0x108>
 80095cc:	6107      	str	r7, [r0, #16]
 80095ce:	e7a3      	b.n	8009518 <__mdiff+0x34>
 80095d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80095d4:	fa11 f288 	uxtah	r2, r1, r8
 80095d8:	1414      	asrs	r4, r2, #16
 80095da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095de:	b292      	uxth	r2, r2
 80095e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095e4:	f84e 2b04 	str.w	r2, [lr], #4
 80095e8:	1421      	asrs	r1, r4, #16
 80095ea:	e7e0      	b.n	80095ae <__mdiff+0xca>
 80095ec:	3f01      	subs	r7, #1
 80095ee:	e7ea      	b.n	80095c6 <__mdiff+0xe2>
 80095f0:	0800aecf 	.word	0x0800aecf
 80095f4:	0800aee0 	.word	0x0800aee0

080095f8 <__d2b>:
 80095f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095fc:	4689      	mov	r9, r1
 80095fe:	2101      	movs	r1, #1
 8009600:	ec57 6b10 	vmov	r6, r7, d0
 8009604:	4690      	mov	r8, r2
 8009606:	f7ff fccf 	bl	8008fa8 <_Balloc>
 800960a:	4604      	mov	r4, r0
 800960c:	b930      	cbnz	r0, 800961c <__d2b+0x24>
 800960e:	4602      	mov	r2, r0
 8009610:	4b25      	ldr	r3, [pc, #148]	; (80096a8 <__d2b+0xb0>)
 8009612:	4826      	ldr	r0, [pc, #152]	; (80096ac <__d2b+0xb4>)
 8009614:	f240 310a 	movw	r1, #778	; 0x30a
 8009618:	f000 faac 	bl	8009b74 <__assert_func>
 800961c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009620:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009624:	bb35      	cbnz	r5, 8009674 <__d2b+0x7c>
 8009626:	2e00      	cmp	r6, #0
 8009628:	9301      	str	r3, [sp, #4]
 800962a:	d028      	beq.n	800967e <__d2b+0x86>
 800962c:	4668      	mov	r0, sp
 800962e:	9600      	str	r6, [sp, #0]
 8009630:	f7ff fd82 	bl	8009138 <__lo0bits>
 8009634:	9900      	ldr	r1, [sp, #0]
 8009636:	b300      	cbz	r0, 800967a <__d2b+0x82>
 8009638:	9a01      	ldr	r2, [sp, #4]
 800963a:	f1c0 0320 	rsb	r3, r0, #32
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	430b      	orrs	r3, r1
 8009644:	40c2      	lsrs	r2, r0
 8009646:	6163      	str	r3, [r4, #20]
 8009648:	9201      	str	r2, [sp, #4]
 800964a:	9b01      	ldr	r3, [sp, #4]
 800964c:	61a3      	str	r3, [r4, #24]
 800964e:	2b00      	cmp	r3, #0
 8009650:	bf14      	ite	ne
 8009652:	2202      	movne	r2, #2
 8009654:	2201      	moveq	r2, #1
 8009656:	6122      	str	r2, [r4, #16]
 8009658:	b1d5      	cbz	r5, 8009690 <__d2b+0x98>
 800965a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800965e:	4405      	add	r5, r0
 8009660:	f8c9 5000 	str.w	r5, [r9]
 8009664:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009668:	f8c8 0000 	str.w	r0, [r8]
 800966c:	4620      	mov	r0, r4
 800966e:	b003      	add	sp, #12
 8009670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009678:	e7d5      	b.n	8009626 <__d2b+0x2e>
 800967a:	6161      	str	r1, [r4, #20]
 800967c:	e7e5      	b.n	800964a <__d2b+0x52>
 800967e:	a801      	add	r0, sp, #4
 8009680:	f7ff fd5a 	bl	8009138 <__lo0bits>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	6163      	str	r3, [r4, #20]
 8009688:	2201      	movs	r2, #1
 800968a:	6122      	str	r2, [r4, #16]
 800968c:	3020      	adds	r0, #32
 800968e:	e7e3      	b.n	8009658 <__d2b+0x60>
 8009690:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009694:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009698:	f8c9 0000 	str.w	r0, [r9]
 800969c:	6918      	ldr	r0, [r3, #16]
 800969e:	f7ff fd2b 	bl	80090f8 <__hi0bits>
 80096a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096a6:	e7df      	b.n	8009668 <__d2b+0x70>
 80096a8:	0800aecf 	.word	0x0800aecf
 80096ac:	0800aee0 	.word	0x0800aee0

080096b0 <_calloc_r>:
 80096b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096b2:	fba1 2402 	umull	r2, r4, r1, r2
 80096b6:	b94c      	cbnz	r4, 80096cc <_calloc_r+0x1c>
 80096b8:	4611      	mov	r1, r2
 80096ba:	9201      	str	r2, [sp, #4]
 80096bc:	f000 f87a 	bl	80097b4 <_malloc_r>
 80096c0:	9a01      	ldr	r2, [sp, #4]
 80096c2:	4605      	mov	r5, r0
 80096c4:	b930      	cbnz	r0, 80096d4 <_calloc_r+0x24>
 80096c6:	4628      	mov	r0, r5
 80096c8:	b003      	add	sp, #12
 80096ca:	bd30      	pop	{r4, r5, pc}
 80096cc:	220c      	movs	r2, #12
 80096ce:	6002      	str	r2, [r0, #0]
 80096d0:	2500      	movs	r5, #0
 80096d2:	e7f8      	b.n	80096c6 <_calloc_r+0x16>
 80096d4:	4621      	mov	r1, r4
 80096d6:	f7fe f941 	bl	800795c <memset>
 80096da:	e7f4      	b.n	80096c6 <_calloc_r+0x16>

080096dc <_free_r>:
 80096dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096de:	2900      	cmp	r1, #0
 80096e0:	d044      	beq.n	800976c <_free_r+0x90>
 80096e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e6:	9001      	str	r0, [sp, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f1a1 0404 	sub.w	r4, r1, #4
 80096ee:	bfb8      	it	lt
 80096f0:	18e4      	addlt	r4, r4, r3
 80096f2:	f000 fa9b 	bl	8009c2c <__malloc_lock>
 80096f6:	4a1e      	ldr	r2, [pc, #120]	; (8009770 <_free_r+0x94>)
 80096f8:	9801      	ldr	r0, [sp, #4]
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	b933      	cbnz	r3, 800970c <_free_r+0x30>
 80096fe:	6063      	str	r3, [r4, #4]
 8009700:	6014      	str	r4, [r2, #0]
 8009702:	b003      	add	sp, #12
 8009704:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009708:	f000 ba96 	b.w	8009c38 <__malloc_unlock>
 800970c:	42a3      	cmp	r3, r4
 800970e:	d908      	bls.n	8009722 <_free_r+0x46>
 8009710:	6825      	ldr	r5, [r4, #0]
 8009712:	1961      	adds	r1, r4, r5
 8009714:	428b      	cmp	r3, r1
 8009716:	bf01      	itttt	eq
 8009718:	6819      	ldreq	r1, [r3, #0]
 800971a:	685b      	ldreq	r3, [r3, #4]
 800971c:	1949      	addeq	r1, r1, r5
 800971e:	6021      	streq	r1, [r4, #0]
 8009720:	e7ed      	b.n	80096fe <_free_r+0x22>
 8009722:	461a      	mov	r2, r3
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	b10b      	cbz	r3, 800972c <_free_r+0x50>
 8009728:	42a3      	cmp	r3, r4
 800972a:	d9fa      	bls.n	8009722 <_free_r+0x46>
 800972c:	6811      	ldr	r1, [r2, #0]
 800972e:	1855      	adds	r5, r2, r1
 8009730:	42a5      	cmp	r5, r4
 8009732:	d10b      	bne.n	800974c <_free_r+0x70>
 8009734:	6824      	ldr	r4, [r4, #0]
 8009736:	4421      	add	r1, r4
 8009738:	1854      	adds	r4, r2, r1
 800973a:	42a3      	cmp	r3, r4
 800973c:	6011      	str	r1, [r2, #0]
 800973e:	d1e0      	bne.n	8009702 <_free_r+0x26>
 8009740:	681c      	ldr	r4, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	6053      	str	r3, [r2, #4]
 8009746:	4421      	add	r1, r4
 8009748:	6011      	str	r1, [r2, #0]
 800974a:	e7da      	b.n	8009702 <_free_r+0x26>
 800974c:	d902      	bls.n	8009754 <_free_r+0x78>
 800974e:	230c      	movs	r3, #12
 8009750:	6003      	str	r3, [r0, #0]
 8009752:	e7d6      	b.n	8009702 <_free_r+0x26>
 8009754:	6825      	ldr	r5, [r4, #0]
 8009756:	1961      	adds	r1, r4, r5
 8009758:	428b      	cmp	r3, r1
 800975a:	bf04      	itt	eq
 800975c:	6819      	ldreq	r1, [r3, #0]
 800975e:	685b      	ldreq	r3, [r3, #4]
 8009760:	6063      	str	r3, [r4, #4]
 8009762:	bf04      	itt	eq
 8009764:	1949      	addeq	r1, r1, r5
 8009766:	6021      	streq	r1, [r4, #0]
 8009768:	6054      	str	r4, [r2, #4]
 800976a:	e7ca      	b.n	8009702 <_free_r+0x26>
 800976c:	b003      	add	sp, #12
 800976e:	bd30      	pop	{r4, r5, pc}
 8009770:	20000520 	.word	0x20000520

08009774 <sbrk_aligned>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	4e0e      	ldr	r6, [pc, #56]	; (80097b0 <sbrk_aligned+0x3c>)
 8009778:	460c      	mov	r4, r1
 800977a:	6831      	ldr	r1, [r6, #0]
 800977c:	4605      	mov	r5, r0
 800977e:	b911      	cbnz	r1, 8009786 <sbrk_aligned+0x12>
 8009780:	f000 f9e8 	bl	8009b54 <_sbrk_r>
 8009784:	6030      	str	r0, [r6, #0]
 8009786:	4621      	mov	r1, r4
 8009788:	4628      	mov	r0, r5
 800978a:	f000 f9e3 	bl	8009b54 <_sbrk_r>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d00a      	beq.n	80097a8 <sbrk_aligned+0x34>
 8009792:	1cc4      	adds	r4, r0, #3
 8009794:	f024 0403 	bic.w	r4, r4, #3
 8009798:	42a0      	cmp	r0, r4
 800979a:	d007      	beq.n	80097ac <sbrk_aligned+0x38>
 800979c:	1a21      	subs	r1, r4, r0
 800979e:	4628      	mov	r0, r5
 80097a0:	f000 f9d8 	bl	8009b54 <_sbrk_r>
 80097a4:	3001      	adds	r0, #1
 80097a6:	d101      	bne.n	80097ac <sbrk_aligned+0x38>
 80097a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80097ac:	4620      	mov	r0, r4
 80097ae:	bd70      	pop	{r4, r5, r6, pc}
 80097b0:	20000524 	.word	0x20000524

080097b4 <_malloc_r>:
 80097b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b8:	1ccd      	adds	r5, r1, #3
 80097ba:	f025 0503 	bic.w	r5, r5, #3
 80097be:	3508      	adds	r5, #8
 80097c0:	2d0c      	cmp	r5, #12
 80097c2:	bf38      	it	cc
 80097c4:	250c      	movcc	r5, #12
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	4607      	mov	r7, r0
 80097ca:	db01      	blt.n	80097d0 <_malloc_r+0x1c>
 80097cc:	42a9      	cmp	r1, r5
 80097ce:	d905      	bls.n	80097dc <_malloc_r+0x28>
 80097d0:	230c      	movs	r3, #12
 80097d2:	603b      	str	r3, [r7, #0]
 80097d4:	2600      	movs	r6, #0
 80097d6:	4630      	mov	r0, r6
 80097d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097dc:	4e2e      	ldr	r6, [pc, #184]	; (8009898 <_malloc_r+0xe4>)
 80097de:	f000 fa25 	bl	8009c2c <__malloc_lock>
 80097e2:	6833      	ldr	r3, [r6, #0]
 80097e4:	461c      	mov	r4, r3
 80097e6:	bb34      	cbnz	r4, 8009836 <_malloc_r+0x82>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4638      	mov	r0, r7
 80097ec:	f7ff ffc2 	bl	8009774 <sbrk_aligned>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	4604      	mov	r4, r0
 80097f4:	d14d      	bne.n	8009892 <_malloc_r+0xde>
 80097f6:	6834      	ldr	r4, [r6, #0]
 80097f8:	4626      	mov	r6, r4
 80097fa:	2e00      	cmp	r6, #0
 80097fc:	d140      	bne.n	8009880 <_malloc_r+0xcc>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	4631      	mov	r1, r6
 8009802:	4638      	mov	r0, r7
 8009804:	eb04 0803 	add.w	r8, r4, r3
 8009808:	f000 f9a4 	bl	8009b54 <_sbrk_r>
 800980c:	4580      	cmp	r8, r0
 800980e:	d13a      	bne.n	8009886 <_malloc_r+0xd2>
 8009810:	6821      	ldr	r1, [r4, #0]
 8009812:	3503      	adds	r5, #3
 8009814:	1a6d      	subs	r5, r5, r1
 8009816:	f025 0503 	bic.w	r5, r5, #3
 800981a:	3508      	adds	r5, #8
 800981c:	2d0c      	cmp	r5, #12
 800981e:	bf38      	it	cc
 8009820:	250c      	movcc	r5, #12
 8009822:	4629      	mov	r1, r5
 8009824:	4638      	mov	r0, r7
 8009826:	f7ff ffa5 	bl	8009774 <sbrk_aligned>
 800982a:	3001      	adds	r0, #1
 800982c:	d02b      	beq.n	8009886 <_malloc_r+0xd2>
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	442b      	add	r3, r5
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	e00e      	b.n	8009854 <_malloc_r+0xa0>
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	1b52      	subs	r2, r2, r5
 800983a:	d41e      	bmi.n	800987a <_malloc_r+0xc6>
 800983c:	2a0b      	cmp	r2, #11
 800983e:	d916      	bls.n	800986e <_malloc_r+0xba>
 8009840:	1961      	adds	r1, r4, r5
 8009842:	42a3      	cmp	r3, r4
 8009844:	6025      	str	r5, [r4, #0]
 8009846:	bf18      	it	ne
 8009848:	6059      	strne	r1, [r3, #4]
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	bf08      	it	eq
 800984e:	6031      	streq	r1, [r6, #0]
 8009850:	5162      	str	r2, [r4, r5]
 8009852:	604b      	str	r3, [r1, #4]
 8009854:	4638      	mov	r0, r7
 8009856:	f104 060b 	add.w	r6, r4, #11
 800985a:	f000 f9ed 	bl	8009c38 <__malloc_unlock>
 800985e:	f026 0607 	bic.w	r6, r6, #7
 8009862:	1d23      	adds	r3, r4, #4
 8009864:	1af2      	subs	r2, r6, r3
 8009866:	d0b6      	beq.n	80097d6 <_malloc_r+0x22>
 8009868:	1b9b      	subs	r3, r3, r6
 800986a:	50a3      	str	r3, [r4, r2]
 800986c:	e7b3      	b.n	80097d6 <_malloc_r+0x22>
 800986e:	6862      	ldr	r2, [r4, #4]
 8009870:	42a3      	cmp	r3, r4
 8009872:	bf0c      	ite	eq
 8009874:	6032      	streq	r2, [r6, #0]
 8009876:	605a      	strne	r2, [r3, #4]
 8009878:	e7ec      	b.n	8009854 <_malloc_r+0xa0>
 800987a:	4623      	mov	r3, r4
 800987c:	6864      	ldr	r4, [r4, #4]
 800987e:	e7b2      	b.n	80097e6 <_malloc_r+0x32>
 8009880:	4634      	mov	r4, r6
 8009882:	6876      	ldr	r6, [r6, #4]
 8009884:	e7b9      	b.n	80097fa <_malloc_r+0x46>
 8009886:	230c      	movs	r3, #12
 8009888:	603b      	str	r3, [r7, #0]
 800988a:	4638      	mov	r0, r7
 800988c:	f000 f9d4 	bl	8009c38 <__malloc_unlock>
 8009890:	e7a1      	b.n	80097d6 <_malloc_r+0x22>
 8009892:	6025      	str	r5, [r4, #0]
 8009894:	e7de      	b.n	8009854 <_malloc_r+0xa0>
 8009896:	bf00      	nop
 8009898:	20000520 	.word	0x20000520

0800989c <__ssputs_r>:
 800989c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a0:	688e      	ldr	r6, [r1, #8]
 80098a2:	429e      	cmp	r6, r3
 80098a4:	4682      	mov	sl, r0
 80098a6:	460c      	mov	r4, r1
 80098a8:	4690      	mov	r8, r2
 80098aa:	461f      	mov	r7, r3
 80098ac:	d838      	bhi.n	8009920 <__ssputs_r+0x84>
 80098ae:	898a      	ldrh	r2, [r1, #12]
 80098b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b4:	d032      	beq.n	800991c <__ssputs_r+0x80>
 80098b6:	6825      	ldr	r5, [r4, #0]
 80098b8:	6909      	ldr	r1, [r1, #16]
 80098ba:	eba5 0901 	sub.w	r9, r5, r1
 80098be:	6965      	ldr	r5, [r4, #20]
 80098c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098c8:	3301      	adds	r3, #1
 80098ca:	444b      	add	r3, r9
 80098cc:	106d      	asrs	r5, r5, #1
 80098ce:	429d      	cmp	r5, r3
 80098d0:	bf38      	it	cc
 80098d2:	461d      	movcc	r5, r3
 80098d4:	0553      	lsls	r3, r2, #21
 80098d6:	d531      	bpl.n	800993c <__ssputs_r+0xa0>
 80098d8:	4629      	mov	r1, r5
 80098da:	f7ff ff6b 	bl	80097b4 <_malloc_r>
 80098de:	4606      	mov	r6, r0
 80098e0:	b950      	cbnz	r0, 80098f8 <__ssputs_r+0x5c>
 80098e2:	230c      	movs	r3, #12
 80098e4:	f8ca 3000 	str.w	r3, [sl]
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098ee:	81a3      	strh	r3, [r4, #12]
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098f8:	6921      	ldr	r1, [r4, #16]
 80098fa:	464a      	mov	r2, r9
 80098fc:	f7ff fb46 	bl	8008f8c <memcpy>
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	6126      	str	r6, [r4, #16]
 800990e:	6165      	str	r5, [r4, #20]
 8009910:	444e      	add	r6, r9
 8009912:	eba5 0509 	sub.w	r5, r5, r9
 8009916:	6026      	str	r6, [r4, #0]
 8009918:	60a5      	str	r5, [r4, #8]
 800991a:	463e      	mov	r6, r7
 800991c:	42be      	cmp	r6, r7
 800991e:	d900      	bls.n	8009922 <__ssputs_r+0x86>
 8009920:	463e      	mov	r6, r7
 8009922:	6820      	ldr	r0, [r4, #0]
 8009924:	4632      	mov	r2, r6
 8009926:	4641      	mov	r1, r8
 8009928:	f000 f966 	bl	8009bf8 <memmove>
 800992c:	68a3      	ldr	r3, [r4, #8]
 800992e:	1b9b      	subs	r3, r3, r6
 8009930:	60a3      	str	r3, [r4, #8]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	4433      	add	r3, r6
 8009936:	6023      	str	r3, [r4, #0]
 8009938:	2000      	movs	r0, #0
 800993a:	e7db      	b.n	80098f4 <__ssputs_r+0x58>
 800993c:	462a      	mov	r2, r5
 800993e:	f000 f981 	bl	8009c44 <_realloc_r>
 8009942:	4606      	mov	r6, r0
 8009944:	2800      	cmp	r0, #0
 8009946:	d1e1      	bne.n	800990c <__ssputs_r+0x70>
 8009948:	6921      	ldr	r1, [r4, #16]
 800994a:	4650      	mov	r0, sl
 800994c:	f7ff fec6 	bl	80096dc <_free_r>
 8009950:	e7c7      	b.n	80098e2 <__ssputs_r+0x46>
	...

08009954 <_svfiprintf_r>:
 8009954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009958:	4698      	mov	r8, r3
 800995a:	898b      	ldrh	r3, [r1, #12]
 800995c:	061b      	lsls	r3, r3, #24
 800995e:	b09d      	sub	sp, #116	; 0x74
 8009960:	4607      	mov	r7, r0
 8009962:	460d      	mov	r5, r1
 8009964:	4614      	mov	r4, r2
 8009966:	d50e      	bpl.n	8009986 <_svfiprintf_r+0x32>
 8009968:	690b      	ldr	r3, [r1, #16]
 800996a:	b963      	cbnz	r3, 8009986 <_svfiprintf_r+0x32>
 800996c:	2140      	movs	r1, #64	; 0x40
 800996e:	f7ff ff21 	bl	80097b4 <_malloc_r>
 8009972:	6028      	str	r0, [r5, #0]
 8009974:	6128      	str	r0, [r5, #16]
 8009976:	b920      	cbnz	r0, 8009982 <_svfiprintf_r+0x2e>
 8009978:	230c      	movs	r3, #12
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009980:	e0d1      	b.n	8009b26 <_svfiprintf_r+0x1d2>
 8009982:	2340      	movs	r3, #64	; 0x40
 8009984:	616b      	str	r3, [r5, #20]
 8009986:	2300      	movs	r3, #0
 8009988:	9309      	str	r3, [sp, #36]	; 0x24
 800998a:	2320      	movs	r3, #32
 800998c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009990:	f8cd 800c 	str.w	r8, [sp, #12]
 8009994:	2330      	movs	r3, #48	; 0x30
 8009996:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b40 <_svfiprintf_r+0x1ec>
 800999a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800999e:	f04f 0901 	mov.w	r9, #1
 80099a2:	4623      	mov	r3, r4
 80099a4:	469a      	mov	sl, r3
 80099a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099aa:	b10a      	cbz	r2, 80099b0 <_svfiprintf_r+0x5c>
 80099ac:	2a25      	cmp	r2, #37	; 0x25
 80099ae:	d1f9      	bne.n	80099a4 <_svfiprintf_r+0x50>
 80099b0:	ebba 0b04 	subs.w	fp, sl, r4
 80099b4:	d00b      	beq.n	80099ce <_svfiprintf_r+0x7a>
 80099b6:	465b      	mov	r3, fp
 80099b8:	4622      	mov	r2, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	4638      	mov	r0, r7
 80099be:	f7ff ff6d 	bl	800989c <__ssputs_r>
 80099c2:	3001      	adds	r0, #1
 80099c4:	f000 80aa 	beq.w	8009b1c <_svfiprintf_r+0x1c8>
 80099c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ca:	445a      	add	r2, fp
 80099cc:	9209      	str	r2, [sp, #36]	; 0x24
 80099ce:	f89a 3000 	ldrb.w	r3, [sl]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 80a2 	beq.w	8009b1c <_svfiprintf_r+0x1c8>
 80099d8:	2300      	movs	r3, #0
 80099da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e2:	f10a 0a01 	add.w	sl, sl, #1
 80099e6:	9304      	str	r3, [sp, #16]
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099ee:	931a      	str	r3, [sp, #104]	; 0x68
 80099f0:	4654      	mov	r4, sl
 80099f2:	2205      	movs	r2, #5
 80099f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f8:	4851      	ldr	r0, [pc, #324]	; (8009b40 <_svfiprintf_r+0x1ec>)
 80099fa:	f7f6 fbf9 	bl	80001f0 <memchr>
 80099fe:	9a04      	ldr	r2, [sp, #16]
 8009a00:	b9d8      	cbnz	r0, 8009a3a <_svfiprintf_r+0xe6>
 8009a02:	06d0      	lsls	r0, r2, #27
 8009a04:	bf44      	itt	mi
 8009a06:	2320      	movmi	r3, #32
 8009a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a0c:	0711      	lsls	r1, r2, #28
 8009a0e:	bf44      	itt	mi
 8009a10:	232b      	movmi	r3, #43	; 0x2b
 8009a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a16:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a1c:	d015      	beq.n	8009a4a <_svfiprintf_r+0xf6>
 8009a1e:	9a07      	ldr	r2, [sp, #28]
 8009a20:	4654      	mov	r4, sl
 8009a22:	2000      	movs	r0, #0
 8009a24:	f04f 0c0a 	mov.w	ip, #10
 8009a28:	4621      	mov	r1, r4
 8009a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2e:	3b30      	subs	r3, #48	; 0x30
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d94e      	bls.n	8009ad2 <_svfiprintf_r+0x17e>
 8009a34:	b1b0      	cbz	r0, 8009a64 <_svfiprintf_r+0x110>
 8009a36:	9207      	str	r2, [sp, #28]
 8009a38:	e014      	b.n	8009a64 <_svfiprintf_r+0x110>
 8009a3a:	eba0 0308 	sub.w	r3, r0, r8
 8009a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a42:	4313      	orrs	r3, r2
 8009a44:	9304      	str	r3, [sp, #16]
 8009a46:	46a2      	mov	sl, r4
 8009a48:	e7d2      	b.n	80099f0 <_svfiprintf_r+0x9c>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	1d19      	adds	r1, r3, #4
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	9103      	str	r1, [sp, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	bfbb      	ittet	lt
 8009a56:	425b      	neglt	r3, r3
 8009a58:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5c:	9307      	strge	r3, [sp, #28]
 8009a5e:	9307      	strlt	r3, [sp, #28]
 8009a60:	bfb8      	it	lt
 8009a62:	9204      	strlt	r2, [sp, #16]
 8009a64:	7823      	ldrb	r3, [r4, #0]
 8009a66:	2b2e      	cmp	r3, #46	; 0x2e
 8009a68:	d10c      	bne.n	8009a84 <_svfiprintf_r+0x130>
 8009a6a:	7863      	ldrb	r3, [r4, #1]
 8009a6c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a6e:	d135      	bne.n	8009adc <_svfiprintf_r+0x188>
 8009a70:	9b03      	ldr	r3, [sp, #12]
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	9203      	str	r2, [sp, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bfb8      	it	lt
 8009a7c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a80:	3402      	adds	r4, #2
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b50 <_svfiprintf_r+0x1fc>
 8009a88:	7821      	ldrb	r1, [r4, #0]
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	4650      	mov	r0, sl
 8009a8e:	f7f6 fbaf 	bl	80001f0 <memchr>
 8009a92:	b140      	cbz	r0, 8009aa6 <_svfiprintf_r+0x152>
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	eba0 000a 	sub.w	r0, r0, sl
 8009a9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a9e:	9b04      	ldr	r3, [sp, #16]
 8009aa0:	4303      	orrs	r3, r0
 8009aa2:	3401      	adds	r4, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aaa:	4826      	ldr	r0, [pc, #152]	; (8009b44 <_svfiprintf_r+0x1f0>)
 8009aac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ab0:	2206      	movs	r2, #6
 8009ab2:	f7f6 fb9d 	bl	80001f0 <memchr>
 8009ab6:	2800      	cmp	r0, #0
 8009ab8:	d038      	beq.n	8009b2c <_svfiprintf_r+0x1d8>
 8009aba:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <_svfiprintf_r+0x1f4>)
 8009abc:	bb1b      	cbnz	r3, 8009b06 <_svfiprintf_r+0x1b2>
 8009abe:	9b03      	ldr	r3, [sp, #12]
 8009ac0:	3307      	adds	r3, #7
 8009ac2:	f023 0307 	bic.w	r3, r3, #7
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	9303      	str	r3, [sp, #12]
 8009aca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009acc:	4433      	add	r3, r6
 8009ace:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad0:	e767      	b.n	80099a2 <_svfiprintf_r+0x4e>
 8009ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	2001      	movs	r0, #1
 8009ada:	e7a5      	b.n	8009a28 <_svfiprintf_r+0xd4>
 8009adc:	2300      	movs	r3, #0
 8009ade:	3401      	adds	r4, #1
 8009ae0:	9305      	str	r3, [sp, #20]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	f04f 0c0a 	mov.w	ip, #10
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009aee:	3a30      	subs	r2, #48	; 0x30
 8009af0:	2a09      	cmp	r2, #9
 8009af2:	d903      	bls.n	8009afc <_svfiprintf_r+0x1a8>
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0c5      	beq.n	8009a84 <_svfiprintf_r+0x130>
 8009af8:	9105      	str	r1, [sp, #20]
 8009afa:	e7c3      	b.n	8009a84 <_svfiprintf_r+0x130>
 8009afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b00:	4604      	mov	r4, r0
 8009b02:	2301      	movs	r3, #1
 8009b04:	e7f0      	b.n	8009ae8 <_svfiprintf_r+0x194>
 8009b06:	ab03      	add	r3, sp, #12
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <_svfiprintf_r+0x1f8>)
 8009b0e:	a904      	add	r1, sp, #16
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7fd ffcb 	bl	8007aac <_printf_float>
 8009b16:	1c42      	adds	r2, r0, #1
 8009b18:	4606      	mov	r6, r0
 8009b1a:	d1d6      	bne.n	8009aca <_svfiprintf_r+0x176>
 8009b1c:	89ab      	ldrh	r3, [r5, #12]
 8009b1e:	065b      	lsls	r3, r3, #25
 8009b20:	f53f af2c 	bmi.w	800997c <_svfiprintf_r+0x28>
 8009b24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b26:	b01d      	add	sp, #116	; 0x74
 8009b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2c:	ab03      	add	r3, sp, #12
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	462a      	mov	r2, r5
 8009b32:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <_svfiprintf_r+0x1f8>)
 8009b34:	a904      	add	r1, sp, #16
 8009b36:	4638      	mov	r0, r7
 8009b38:	f7fe fa5c 	bl	8007ff4 <_printf_i>
 8009b3c:	e7eb      	b.n	8009b16 <_svfiprintf_r+0x1c2>
 8009b3e:	bf00      	nop
 8009b40:	0800b03c 	.word	0x0800b03c
 8009b44:	0800b046 	.word	0x0800b046
 8009b48:	08007aad 	.word	0x08007aad
 8009b4c:	0800989d 	.word	0x0800989d
 8009b50:	0800b042 	.word	0x0800b042

08009b54 <_sbrk_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	4d06      	ldr	r5, [pc, #24]	; (8009b70 <_sbrk_r+0x1c>)
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	4608      	mov	r0, r1
 8009b5e:	602b      	str	r3, [r5, #0]
 8009b60:	f7f9 fffa 	bl	8003b58 <_sbrk>
 8009b64:	1c43      	adds	r3, r0, #1
 8009b66:	d102      	bne.n	8009b6e <_sbrk_r+0x1a>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	b103      	cbz	r3, 8009b6e <_sbrk_r+0x1a>
 8009b6c:	6023      	str	r3, [r4, #0]
 8009b6e:	bd38      	pop	{r3, r4, r5, pc}
 8009b70:	20000528 	.word	0x20000528

08009b74 <__assert_func>:
 8009b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b76:	4614      	mov	r4, r2
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4b09      	ldr	r3, [pc, #36]	; (8009ba0 <__assert_func+0x2c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4605      	mov	r5, r0
 8009b80:	68d8      	ldr	r0, [r3, #12]
 8009b82:	b14c      	cbz	r4, 8009b98 <__assert_func+0x24>
 8009b84:	4b07      	ldr	r3, [pc, #28]	; (8009ba4 <__assert_func+0x30>)
 8009b86:	9100      	str	r1, [sp, #0]
 8009b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b8c:	4906      	ldr	r1, [pc, #24]	; (8009ba8 <__assert_func+0x34>)
 8009b8e:	462b      	mov	r3, r5
 8009b90:	f000 f80e 	bl	8009bb0 <fiprintf>
 8009b94:	f000 faac 	bl	800a0f0 <abort>
 8009b98:	4b04      	ldr	r3, [pc, #16]	; (8009bac <__assert_func+0x38>)
 8009b9a:	461c      	mov	r4, r3
 8009b9c:	e7f3      	b.n	8009b86 <__assert_func+0x12>
 8009b9e:	bf00      	nop
 8009ba0:	20000018 	.word	0x20000018
 8009ba4:	0800b04d 	.word	0x0800b04d
 8009ba8:	0800b05a 	.word	0x0800b05a
 8009bac:	0800b088 	.word	0x0800b088

08009bb0 <fiprintf>:
 8009bb0:	b40e      	push	{r1, r2, r3}
 8009bb2:	b503      	push	{r0, r1, lr}
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	ab03      	add	r3, sp, #12
 8009bb8:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <fiprintf+0x20>)
 8009bba:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bbe:	6800      	ldr	r0, [r0, #0]
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	f000 f897 	bl	8009cf4 <_vfiprintf_r>
 8009bc6:	b002      	add	sp, #8
 8009bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bcc:	b003      	add	sp, #12
 8009bce:	4770      	bx	lr
 8009bd0:	20000018 	.word	0x20000018

08009bd4 <__ascii_mbtowc>:
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	b901      	cbnz	r1, 8009bda <__ascii_mbtowc+0x6>
 8009bd8:	a901      	add	r1, sp, #4
 8009bda:	b142      	cbz	r2, 8009bee <__ascii_mbtowc+0x1a>
 8009bdc:	b14b      	cbz	r3, 8009bf2 <__ascii_mbtowc+0x1e>
 8009bde:	7813      	ldrb	r3, [r2, #0]
 8009be0:	600b      	str	r3, [r1, #0]
 8009be2:	7812      	ldrb	r2, [r2, #0]
 8009be4:	1e10      	subs	r0, r2, #0
 8009be6:	bf18      	it	ne
 8009be8:	2001      	movne	r0, #1
 8009bea:	b002      	add	sp, #8
 8009bec:	4770      	bx	lr
 8009bee:	4610      	mov	r0, r2
 8009bf0:	e7fb      	b.n	8009bea <__ascii_mbtowc+0x16>
 8009bf2:	f06f 0001 	mvn.w	r0, #1
 8009bf6:	e7f8      	b.n	8009bea <__ascii_mbtowc+0x16>

08009bf8 <memmove>:
 8009bf8:	4288      	cmp	r0, r1
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	eb01 0402 	add.w	r4, r1, r2
 8009c00:	d902      	bls.n	8009c08 <memmove+0x10>
 8009c02:	4284      	cmp	r4, r0
 8009c04:	4623      	mov	r3, r4
 8009c06:	d807      	bhi.n	8009c18 <memmove+0x20>
 8009c08:	1e43      	subs	r3, r0, #1
 8009c0a:	42a1      	cmp	r1, r4
 8009c0c:	d008      	beq.n	8009c20 <memmove+0x28>
 8009c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c16:	e7f8      	b.n	8009c0a <memmove+0x12>
 8009c18:	4402      	add	r2, r0
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	428a      	cmp	r2, r1
 8009c1e:	d100      	bne.n	8009c22 <memmove+0x2a>
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c2a:	e7f7      	b.n	8009c1c <memmove+0x24>

08009c2c <__malloc_lock>:
 8009c2c:	4801      	ldr	r0, [pc, #4]	; (8009c34 <__malloc_lock+0x8>)
 8009c2e:	f000 bc1f 	b.w	800a470 <__retarget_lock_acquire_recursive>
 8009c32:	bf00      	nop
 8009c34:	2000052c 	.word	0x2000052c

08009c38 <__malloc_unlock>:
 8009c38:	4801      	ldr	r0, [pc, #4]	; (8009c40 <__malloc_unlock+0x8>)
 8009c3a:	f000 bc1a 	b.w	800a472 <__retarget_lock_release_recursive>
 8009c3e:	bf00      	nop
 8009c40:	2000052c 	.word	0x2000052c

08009c44 <_realloc_r>:
 8009c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c48:	4680      	mov	r8, r0
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	460e      	mov	r6, r1
 8009c4e:	b921      	cbnz	r1, 8009c5a <_realloc_r+0x16>
 8009c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c54:	4611      	mov	r1, r2
 8009c56:	f7ff bdad 	b.w	80097b4 <_malloc_r>
 8009c5a:	b92a      	cbnz	r2, 8009c68 <_realloc_r+0x24>
 8009c5c:	f7ff fd3e 	bl	80096dc <_free_r>
 8009c60:	4625      	mov	r5, r4
 8009c62:	4628      	mov	r0, r5
 8009c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c68:	f000 fc6a 	bl	800a540 <_malloc_usable_size_r>
 8009c6c:	4284      	cmp	r4, r0
 8009c6e:	4607      	mov	r7, r0
 8009c70:	d802      	bhi.n	8009c78 <_realloc_r+0x34>
 8009c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c76:	d812      	bhi.n	8009c9e <_realloc_r+0x5a>
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	f7ff fd9a 	bl	80097b4 <_malloc_r>
 8009c80:	4605      	mov	r5, r0
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d0ed      	beq.n	8009c62 <_realloc_r+0x1e>
 8009c86:	42bc      	cmp	r4, r7
 8009c88:	4622      	mov	r2, r4
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	bf28      	it	cs
 8009c8e:	463a      	movcs	r2, r7
 8009c90:	f7ff f97c 	bl	8008f8c <memcpy>
 8009c94:	4631      	mov	r1, r6
 8009c96:	4640      	mov	r0, r8
 8009c98:	f7ff fd20 	bl	80096dc <_free_r>
 8009c9c:	e7e1      	b.n	8009c62 <_realloc_r+0x1e>
 8009c9e:	4635      	mov	r5, r6
 8009ca0:	e7df      	b.n	8009c62 <_realloc_r+0x1e>

08009ca2 <__sfputc_r>:
 8009ca2:	6893      	ldr	r3, [r2, #8]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	b410      	push	{r4}
 8009caa:	6093      	str	r3, [r2, #8]
 8009cac:	da08      	bge.n	8009cc0 <__sfputc_r+0x1e>
 8009cae:	6994      	ldr	r4, [r2, #24]
 8009cb0:	42a3      	cmp	r3, r4
 8009cb2:	db01      	blt.n	8009cb8 <__sfputc_r+0x16>
 8009cb4:	290a      	cmp	r1, #10
 8009cb6:	d103      	bne.n	8009cc0 <__sfputc_r+0x1e>
 8009cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cbc:	f000 b94a 	b.w	8009f54 <__swbuf_r>
 8009cc0:	6813      	ldr	r3, [r2, #0]
 8009cc2:	1c58      	adds	r0, r3, #1
 8009cc4:	6010      	str	r0, [r2, #0]
 8009cc6:	7019      	strb	r1, [r3, #0]
 8009cc8:	4608      	mov	r0, r1
 8009cca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <__sfputs_r>:
 8009cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	4614      	mov	r4, r2
 8009cd8:	18d5      	adds	r5, r2, r3
 8009cda:	42ac      	cmp	r4, r5
 8009cdc:	d101      	bne.n	8009ce2 <__sfputs_r+0x12>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e007      	b.n	8009cf2 <__sfputs_r+0x22>
 8009ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ce6:	463a      	mov	r2, r7
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7ff ffda 	bl	8009ca2 <__sfputc_r>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d1f3      	bne.n	8009cda <__sfputs_r+0xa>
 8009cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009cf4 <_vfiprintf_r>:
 8009cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	b09d      	sub	sp, #116	; 0x74
 8009cfc:	4614      	mov	r4, r2
 8009cfe:	4698      	mov	r8, r3
 8009d00:	4606      	mov	r6, r0
 8009d02:	b118      	cbz	r0, 8009d0c <_vfiprintf_r+0x18>
 8009d04:	6983      	ldr	r3, [r0, #24]
 8009d06:	b90b      	cbnz	r3, 8009d0c <_vfiprintf_r+0x18>
 8009d08:	f000 fb14 	bl	800a334 <__sinit>
 8009d0c:	4b89      	ldr	r3, [pc, #548]	; (8009f34 <_vfiprintf_r+0x240>)
 8009d0e:	429d      	cmp	r5, r3
 8009d10:	d11b      	bne.n	8009d4a <_vfiprintf_r+0x56>
 8009d12:	6875      	ldr	r5, [r6, #4]
 8009d14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d16:	07d9      	lsls	r1, r3, #31
 8009d18:	d405      	bmi.n	8009d26 <_vfiprintf_r+0x32>
 8009d1a:	89ab      	ldrh	r3, [r5, #12]
 8009d1c:	059a      	lsls	r2, r3, #22
 8009d1e:	d402      	bmi.n	8009d26 <_vfiprintf_r+0x32>
 8009d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d22:	f000 fba5 	bl	800a470 <__retarget_lock_acquire_recursive>
 8009d26:	89ab      	ldrh	r3, [r5, #12]
 8009d28:	071b      	lsls	r3, r3, #28
 8009d2a:	d501      	bpl.n	8009d30 <_vfiprintf_r+0x3c>
 8009d2c:	692b      	ldr	r3, [r5, #16]
 8009d2e:	b9eb      	cbnz	r3, 8009d6c <_vfiprintf_r+0x78>
 8009d30:	4629      	mov	r1, r5
 8009d32:	4630      	mov	r0, r6
 8009d34:	f000 f96e 	bl	800a014 <__swsetup_r>
 8009d38:	b1c0      	cbz	r0, 8009d6c <_vfiprintf_r+0x78>
 8009d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d3c:	07dc      	lsls	r4, r3, #31
 8009d3e:	d50e      	bpl.n	8009d5e <_vfiprintf_r+0x6a>
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d44:	b01d      	add	sp, #116	; 0x74
 8009d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4a:	4b7b      	ldr	r3, [pc, #492]	; (8009f38 <_vfiprintf_r+0x244>)
 8009d4c:	429d      	cmp	r5, r3
 8009d4e:	d101      	bne.n	8009d54 <_vfiprintf_r+0x60>
 8009d50:	68b5      	ldr	r5, [r6, #8]
 8009d52:	e7df      	b.n	8009d14 <_vfiprintf_r+0x20>
 8009d54:	4b79      	ldr	r3, [pc, #484]	; (8009f3c <_vfiprintf_r+0x248>)
 8009d56:	429d      	cmp	r5, r3
 8009d58:	bf08      	it	eq
 8009d5a:	68f5      	ldreq	r5, [r6, #12]
 8009d5c:	e7da      	b.n	8009d14 <_vfiprintf_r+0x20>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	0598      	lsls	r0, r3, #22
 8009d62:	d4ed      	bmi.n	8009d40 <_vfiprintf_r+0x4c>
 8009d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d66:	f000 fb84 	bl	800a472 <__retarget_lock_release_recursive>
 8009d6a:	e7e9      	b.n	8009d40 <_vfiprintf_r+0x4c>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d70:	2320      	movs	r3, #32
 8009d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d7a:	2330      	movs	r3, #48	; 0x30
 8009d7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f40 <_vfiprintf_r+0x24c>
 8009d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d84:	f04f 0901 	mov.w	r9, #1
 8009d88:	4623      	mov	r3, r4
 8009d8a:	469a      	mov	sl, r3
 8009d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d90:	b10a      	cbz	r2, 8009d96 <_vfiprintf_r+0xa2>
 8009d92:	2a25      	cmp	r2, #37	; 0x25
 8009d94:	d1f9      	bne.n	8009d8a <_vfiprintf_r+0x96>
 8009d96:	ebba 0b04 	subs.w	fp, sl, r4
 8009d9a:	d00b      	beq.n	8009db4 <_vfiprintf_r+0xc0>
 8009d9c:	465b      	mov	r3, fp
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ff94 	bl	8009cd0 <__sfputs_r>
 8009da8:	3001      	adds	r0, #1
 8009daa:	f000 80aa 	beq.w	8009f02 <_vfiprintf_r+0x20e>
 8009dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009db0:	445a      	add	r2, fp
 8009db2:	9209      	str	r2, [sp, #36]	; 0x24
 8009db4:	f89a 3000 	ldrb.w	r3, [sl]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80a2 	beq.w	8009f02 <_vfiprintf_r+0x20e>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dc8:	f10a 0a01 	add.w	sl, sl, #1
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	9307      	str	r3, [sp, #28]
 8009dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8009dd6:	4654      	mov	r4, sl
 8009dd8:	2205      	movs	r2, #5
 8009dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dde:	4858      	ldr	r0, [pc, #352]	; (8009f40 <_vfiprintf_r+0x24c>)
 8009de0:	f7f6 fa06 	bl	80001f0 <memchr>
 8009de4:	9a04      	ldr	r2, [sp, #16]
 8009de6:	b9d8      	cbnz	r0, 8009e20 <_vfiprintf_r+0x12c>
 8009de8:	06d1      	lsls	r1, r2, #27
 8009dea:	bf44      	itt	mi
 8009dec:	2320      	movmi	r3, #32
 8009dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009df2:	0713      	lsls	r3, r2, #28
 8009df4:	bf44      	itt	mi
 8009df6:	232b      	movmi	r3, #43	; 0x2b
 8009df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8009e00:	2b2a      	cmp	r3, #42	; 0x2a
 8009e02:	d015      	beq.n	8009e30 <_vfiprintf_r+0x13c>
 8009e04:	9a07      	ldr	r2, [sp, #28]
 8009e06:	4654      	mov	r4, sl
 8009e08:	2000      	movs	r0, #0
 8009e0a:	f04f 0c0a 	mov.w	ip, #10
 8009e0e:	4621      	mov	r1, r4
 8009e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e14:	3b30      	subs	r3, #48	; 0x30
 8009e16:	2b09      	cmp	r3, #9
 8009e18:	d94e      	bls.n	8009eb8 <_vfiprintf_r+0x1c4>
 8009e1a:	b1b0      	cbz	r0, 8009e4a <_vfiprintf_r+0x156>
 8009e1c:	9207      	str	r2, [sp, #28]
 8009e1e:	e014      	b.n	8009e4a <_vfiprintf_r+0x156>
 8009e20:	eba0 0308 	sub.w	r3, r0, r8
 8009e24:	fa09 f303 	lsl.w	r3, r9, r3
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	9304      	str	r3, [sp, #16]
 8009e2c:	46a2      	mov	sl, r4
 8009e2e:	e7d2      	b.n	8009dd6 <_vfiprintf_r+0xe2>
 8009e30:	9b03      	ldr	r3, [sp, #12]
 8009e32:	1d19      	adds	r1, r3, #4
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	9103      	str	r1, [sp, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	bfbb      	ittet	lt
 8009e3c:	425b      	neglt	r3, r3
 8009e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e42:	9307      	strge	r3, [sp, #28]
 8009e44:	9307      	strlt	r3, [sp, #28]
 8009e46:	bfb8      	it	lt
 8009e48:	9204      	strlt	r2, [sp, #16]
 8009e4a:	7823      	ldrb	r3, [r4, #0]
 8009e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e4e:	d10c      	bne.n	8009e6a <_vfiprintf_r+0x176>
 8009e50:	7863      	ldrb	r3, [r4, #1]
 8009e52:	2b2a      	cmp	r3, #42	; 0x2a
 8009e54:	d135      	bne.n	8009ec2 <_vfiprintf_r+0x1ce>
 8009e56:	9b03      	ldr	r3, [sp, #12]
 8009e58:	1d1a      	adds	r2, r3, #4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	9203      	str	r2, [sp, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfb8      	it	lt
 8009e62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e66:	3402      	adds	r4, #2
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f50 <_vfiprintf_r+0x25c>
 8009e6e:	7821      	ldrb	r1, [r4, #0]
 8009e70:	2203      	movs	r2, #3
 8009e72:	4650      	mov	r0, sl
 8009e74:	f7f6 f9bc 	bl	80001f0 <memchr>
 8009e78:	b140      	cbz	r0, 8009e8c <_vfiprintf_r+0x198>
 8009e7a:	2340      	movs	r3, #64	; 0x40
 8009e7c:	eba0 000a 	sub.w	r0, r0, sl
 8009e80:	fa03 f000 	lsl.w	r0, r3, r0
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	4303      	orrs	r3, r0
 8009e88:	3401      	adds	r4, #1
 8009e8a:	9304      	str	r3, [sp, #16]
 8009e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e90:	482c      	ldr	r0, [pc, #176]	; (8009f44 <_vfiprintf_r+0x250>)
 8009e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e96:	2206      	movs	r2, #6
 8009e98:	f7f6 f9aa 	bl	80001f0 <memchr>
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	d03f      	beq.n	8009f20 <_vfiprintf_r+0x22c>
 8009ea0:	4b29      	ldr	r3, [pc, #164]	; (8009f48 <_vfiprintf_r+0x254>)
 8009ea2:	bb1b      	cbnz	r3, 8009eec <_vfiprintf_r+0x1f8>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	3307      	adds	r3, #7
 8009ea8:	f023 0307 	bic.w	r3, r3, #7
 8009eac:	3308      	adds	r3, #8
 8009eae:	9303      	str	r3, [sp, #12]
 8009eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb2:	443b      	add	r3, r7
 8009eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb6:	e767      	b.n	8009d88 <_vfiprintf_r+0x94>
 8009eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ebc:	460c      	mov	r4, r1
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	e7a5      	b.n	8009e0e <_vfiprintf_r+0x11a>
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	3401      	adds	r4, #1
 8009ec6:	9305      	str	r3, [sp, #20]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	f04f 0c0a 	mov.w	ip, #10
 8009ece:	4620      	mov	r0, r4
 8009ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed4:	3a30      	subs	r2, #48	; 0x30
 8009ed6:	2a09      	cmp	r2, #9
 8009ed8:	d903      	bls.n	8009ee2 <_vfiprintf_r+0x1ee>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0c5      	beq.n	8009e6a <_vfiprintf_r+0x176>
 8009ede:	9105      	str	r1, [sp, #20]
 8009ee0:	e7c3      	b.n	8009e6a <_vfiprintf_r+0x176>
 8009ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e7f0      	b.n	8009ece <_vfiprintf_r+0x1da>
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	462a      	mov	r2, r5
 8009ef2:	4b16      	ldr	r3, [pc, #88]	; (8009f4c <_vfiprintf_r+0x258>)
 8009ef4:	a904      	add	r1, sp, #16
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	f7fd fdd8 	bl	8007aac <_printf_float>
 8009efc:	4607      	mov	r7, r0
 8009efe:	1c78      	adds	r0, r7, #1
 8009f00:	d1d6      	bne.n	8009eb0 <_vfiprintf_r+0x1bc>
 8009f02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f04:	07d9      	lsls	r1, r3, #31
 8009f06:	d405      	bmi.n	8009f14 <_vfiprintf_r+0x220>
 8009f08:	89ab      	ldrh	r3, [r5, #12]
 8009f0a:	059a      	lsls	r2, r3, #22
 8009f0c:	d402      	bmi.n	8009f14 <_vfiprintf_r+0x220>
 8009f0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f10:	f000 faaf 	bl	800a472 <__retarget_lock_release_recursive>
 8009f14:	89ab      	ldrh	r3, [r5, #12]
 8009f16:	065b      	lsls	r3, r3, #25
 8009f18:	f53f af12 	bmi.w	8009d40 <_vfiprintf_r+0x4c>
 8009f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f1e:	e711      	b.n	8009d44 <_vfiprintf_r+0x50>
 8009f20:	ab03      	add	r3, sp, #12
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	462a      	mov	r2, r5
 8009f26:	4b09      	ldr	r3, [pc, #36]	; (8009f4c <_vfiprintf_r+0x258>)
 8009f28:	a904      	add	r1, sp, #16
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7fe f862 	bl	8007ff4 <_printf_i>
 8009f30:	e7e4      	b.n	8009efc <_vfiprintf_r+0x208>
 8009f32:	bf00      	nop
 8009f34:	0800b1b4 	.word	0x0800b1b4
 8009f38:	0800b1d4 	.word	0x0800b1d4
 8009f3c:	0800b194 	.word	0x0800b194
 8009f40:	0800b03c 	.word	0x0800b03c
 8009f44:	0800b046 	.word	0x0800b046
 8009f48:	08007aad 	.word	0x08007aad
 8009f4c:	08009cd1 	.word	0x08009cd1
 8009f50:	0800b042 	.word	0x0800b042

08009f54 <__swbuf_r>:
 8009f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f56:	460e      	mov	r6, r1
 8009f58:	4614      	mov	r4, r2
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	b118      	cbz	r0, 8009f66 <__swbuf_r+0x12>
 8009f5e:	6983      	ldr	r3, [r0, #24]
 8009f60:	b90b      	cbnz	r3, 8009f66 <__swbuf_r+0x12>
 8009f62:	f000 f9e7 	bl	800a334 <__sinit>
 8009f66:	4b21      	ldr	r3, [pc, #132]	; (8009fec <__swbuf_r+0x98>)
 8009f68:	429c      	cmp	r4, r3
 8009f6a:	d12b      	bne.n	8009fc4 <__swbuf_r+0x70>
 8009f6c:	686c      	ldr	r4, [r5, #4]
 8009f6e:	69a3      	ldr	r3, [r4, #24]
 8009f70:	60a3      	str	r3, [r4, #8]
 8009f72:	89a3      	ldrh	r3, [r4, #12]
 8009f74:	071a      	lsls	r2, r3, #28
 8009f76:	d52f      	bpl.n	8009fd8 <__swbuf_r+0x84>
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	b36b      	cbz	r3, 8009fd8 <__swbuf_r+0x84>
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	6820      	ldr	r0, [r4, #0]
 8009f80:	1ac0      	subs	r0, r0, r3
 8009f82:	6963      	ldr	r3, [r4, #20]
 8009f84:	b2f6      	uxtb	r6, r6
 8009f86:	4283      	cmp	r3, r0
 8009f88:	4637      	mov	r7, r6
 8009f8a:	dc04      	bgt.n	8009f96 <__swbuf_r+0x42>
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 f93c 	bl	800a20c <_fflush_r>
 8009f94:	bb30      	cbnz	r0, 8009fe4 <__swbuf_r+0x90>
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	60a3      	str	r3, [r4, #8]
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	1c5a      	adds	r2, r3, #1
 8009fa0:	6022      	str	r2, [r4, #0]
 8009fa2:	701e      	strb	r6, [r3, #0]
 8009fa4:	6963      	ldr	r3, [r4, #20]
 8009fa6:	3001      	adds	r0, #1
 8009fa8:	4283      	cmp	r3, r0
 8009faa:	d004      	beq.n	8009fb6 <__swbuf_r+0x62>
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	07db      	lsls	r3, r3, #31
 8009fb0:	d506      	bpl.n	8009fc0 <__swbuf_r+0x6c>
 8009fb2:	2e0a      	cmp	r6, #10
 8009fb4:	d104      	bne.n	8009fc0 <__swbuf_r+0x6c>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f000 f927 	bl	800a20c <_fflush_r>
 8009fbe:	b988      	cbnz	r0, 8009fe4 <__swbuf_r+0x90>
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <__swbuf_r+0x9c>)
 8009fc6:	429c      	cmp	r4, r3
 8009fc8:	d101      	bne.n	8009fce <__swbuf_r+0x7a>
 8009fca:	68ac      	ldr	r4, [r5, #8]
 8009fcc:	e7cf      	b.n	8009f6e <__swbuf_r+0x1a>
 8009fce:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <__swbuf_r+0xa0>)
 8009fd0:	429c      	cmp	r4, r3
 8009fd2:	bf08      	it	eq
 8009fd4:	68ec      	ldreq	r4, [r5, #12]
 8009fd6:	e7ca      	b.n	8009f6e <__swbuf_r+0x1a>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 f81a 	bl	800a014 <__swsetup_r>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d0cb      	beq.n	8009f7c <__swbuf_r+0x28>
 8009fe4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009fe8:	e7ea      	b.n	8009fc0 <__swbuf_r+0x6c>
 8009fea:	bf00      	nop
 8009fec:	0800b1b4 	.word	0x0800b1b4
 8009ff0:	0800b1d4 	.word	0x0800b1d4
 8009ff4:	0800b194 	.word	0x0800b194

08009ff8 <__ascii_wctomb>:
 8009ff8:	b149      	cbz	r1, 800a00e <__ascii_wctomb+0x16>
 8009ffa:	2aff      	cmp	r2, #255	; 0xff
 8009ffc:	bf85      	ittet	hi
 8009ffe:	238a      	movhi	r3, #138	; 0x8a
 800a000:	6003      	strhi	r3, [r0, #0]
 800a002:	700a      	strbls	r2, [r1, #0]
 800a004:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a008:	bf98      	it	ls
 800a00a:	2001      	movls	r0, #1
 800a00c:	4770      	bx	lr
 800a00e:	4608      	mov	r0, r1
 800a010:	4770      	bx	lr
	...

0800a014 <__swsetup_r>:
 800a014:	4b32      	ldr	r3, [pc, #200]	; (800a0e0 <__swsetup_r+0xcc>)
 800a016:	b570      	push	{r4, r5, r6, lr}
 800a018:	681d      	ldr	r5, [r3, #0]
 800a01a:	4606      	mov	r6, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	b125      	cbz	r5, 800a02a <__swsetup_r+0x16>
 800a020:	69ab      	ldr	r3, [r5, #24]
 800a022:	b913      	cbnz	r3, 800a02a <__swsetup_r+0x16>
 800a024:	4628      	mov	r0, r5
 800a026:	f000 f985 	bl	800a334 <__sinit>
 800a02a:	4b2e      	ldr	r3, [pc, #184]	; (800a0e4 <__swsetup_r+0xd0>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	d10f      	bne.n	800a050 <__swsetup_r+0x3c>
 800a030:	686c      	ldr	r4, [r5, #4]
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a038:	0719      	lsls	r1, r3, #28
 800a03a:	d42c      	bmi.n	800a096 <__swsetup_r+0x82>
 800a03c:	06dd      	lsls	r5, r3, #27
 800a03e:	d411      	bmi.n	800a064 <__swsetup_r+0x50>
 800a040:	2309      	movs	r3, #9
 800a042:	6033      	str	r3, [r6, #0]
 800a044:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a04e:	e03e      	b.n	800a0ce <__swsetup_r+0xba>
 800a050:	4b25      	ldr	r3, [pc, #148]	; (800a0e8 <__swsetup_r+0xd4>)
 800a052:	429c      	cmp	r4, r3
 800a054:	d101      	bne.n	800a05a <__swsetup_r+0x46>
 800a056:	68ac      	ldr	r4, [r5, #8]
 800a058:	e7eb      	b.n	800a032 <__swsetup_r+0x1e>
 800a05a:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <__swsetup_r+0xd8>)
 800a05c:	429c      	cmp	r4, r3
 800a05e:	bf08      	it	eq
 800a060:	68ec      	ldreq	r4, [r5, #12]
 800a062:	e7e6      	b.n	800a032 <__swsetup_r+0x1e>
 800a064:	0758      	lsls	r0, r3, #29
 800a066:	d512      	bpl.n	800a08e <__swsetup_r+0x7a>
 800a068:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a06a:	b141      	cbz	r1, 800a07e <__swsetup_r+0x6a>
 800a06c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a070:	4299      	cmp	r1, r3
 800a072:	d002      	beq.n	800a07a <__swsetup_r+0x66>
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff fb31 	bl	80096dc <_free_r>
 800a07a:	2300      	movs	r3, #0
 800a07c:	6363      	str	r3, [r4, #52]	; 0x34
 800a07e:	89a3      	ldrh	r3, [r4, #12]
 800a080:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a084:	81a3      	strh	r3, [r4, #12]
 800a086:	2300      	movs	r3, #0
 800a088:	6063      	str	r3, [r4, #4]
 800a08a:	6923      	ldr	r3, [r4, #16]
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f043 0308 	orr.w	r3, r3, #8
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	6923      	ldr	r3, [r4, #16]
 800a098:	b94b      	cbnz	r3, 800a0ae <__swsetup_r+0x9a>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0a4:	d003      	beq.n	800a0ae <__swsetup_r+0x9a>
 800a0a6:	4621      	mov	r1, r4
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f000 fa09 	bl	800a4c0 <__smakebuf_r>
 800a0ae:	89a0      	ldrh	r0, [r4, #12]
 800a0b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0b4:	f010 0301 	ands.w	r3, r0, #1
 800a0b8:	d00a      	beq.n	800a0d0 <__swsetup_r+0xbc>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	60a3      	str	r3, [r4, #8]
 800a0be:	6963      	ldr	r3, [r4, #20]
 800a0c0:	425b      	negs	r3, r3
 800a0c2:	61a3      	str	r3, [r4, #24]
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	b943      	cbnz	r3, 800a0da <__swsetup_r+0xc6>
 800a0c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a0cc:	d1ba      	bne.n	800a044 <__swsetup_r+0x30>
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	0781      	lsls	r1, r0, #30
 800a0d2:	bf58      	it	pl
 800a0d4:	6963      	ldrpl	r3, [r4, #20]
 800a0d6:	60a3      	str	r3, [r4, #8]
 800a0d8:	e7f4      	b.n	800a0c4 <__swsetup_r+0xb0>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e7f7      	b.n	800a0ce <__swsetup_r+0xba>
 800a0de:	bf00      	nop
 800a0e0:	20000018 	.word	0x20000018
 800a0e4:	0800b1b4 	.word	0x0800b1b4
 800a0e8:	0800b1d4 	.word	0x0800b1d4
 800a0ec:	0800b194 	.word	0x0800b194

0800a0f0 <abort>:
 800a0f0:	b508      	push	{r3, lr}
 800a0f2:	2006      	movs	r0, #6
 800a0f4:	f000 fa54 	bl	800a5a0 <raise>
 800a0f8:	2001      	movs	r0, #1
 800a0fa:	f7f9 fcb5 	bl	8003a68 <_exit>
	...

0800a100 <__sflush_r>:
 800a100:	898a      	ldrh	r2, [r1, #12]
 800a102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a106:	4605      	mov	r5, r0
 800a108:	0710      	lsls	r0, r2, #28
 800a10a:	460c      	mov	r4, r1
 800a10c:	d458      	bmi.n	800a1c0 <__sflush_r+0xc0>
 800a10e:	684b      	ldr	r3, [r1, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	dc05      	bgt.n	800a120 <__sflush_r+0x20>
 800a114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	dc02      	bgt.n	800a120 <__sflush_r+0x20>
 800a11a:	2000      	movs	r0, #0
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a122:	2e00      	cmp	r6, #0
 800a124:	d0f9      	beq.n	800a11a <__sflush_r+0x1a>
 800a126:	2300      	movs	r3, #0
 800a128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a12c:	682f      	ldr	r7, [r5, #0]
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	d032      	beq.n	800a198 <__sflush_r+0x98>
 800a132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	075a      	lsls	r2, r3, #29
 800a138:	d505      	bpl.n	800a146 <__sflush_r+0x46>
 800a13a:	6863      	ldr	r3, [r4, #4]
 800a13c:	1ac0      	subs	r0, r0, r3
 800a13e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a140:	b10b      	cbz	r3, 800a146 <__sflush_r+0x46>
 800a142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a144:	1ac0      	subs	r0, r0, r3
 800a146:	2300      	movs	r3, #0
 800a148:	4602      	mov	r2, r0
 800a14a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a14c:	6a21      	ldr	r1, [r4, #32]
 800a14e:	4628      	mov	r0, r5
 800a150:	47b0      	blx	r6
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	89a3      	ldrh	r3, [r4, #12]
 800a156:	d106      	bne.n	800a166 <__sflush_r+0x66>
 800a158:	6829      	ldr	r1, [r5, #0]
 800a15a:	291d      	cmp	r1, #29
 800a15c:	d82c      	bhi.n	800a1b8 <__sflush_r+0xb8>
 800a15e:	4a2a      	ldr	r2, [pc, #168]	; (800a208 <__sflush_r+0x108>)
 800a160:	40ca      	lsrs	r2, r1
 800a162:	07d6      	lsls	r6, r2, #31
 800a164:	d528      	bpl.n	800a1b8 <__sflush_r+0xb8>
 800a166:	2200      	movs	r2, #0
 800a168:	6062      	str	r2, [r4, #4]
 800a16a:	04d9      	lsls	r1, r3, #19
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	6022      	str	r2, [r4, #0]
 800a170:	d504      	bpl.n	800a17c <__sflush_r+0x7c>
 800a172:	1c42      	adds	r2, r0, #1
 800a174:	d101      	bne.n	800a17a <__sflush_r+0x7a>
 800a176:	682b      	ldr	r3, [r5, #0]
 800a178:	b903      	cbnz	r3, 800a17c <__sflush_r+0x7c>
 800a17a:	6560      	str	r0, [r4, #84]	; 0x54
 800a17c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a17e:	602f      	str	r7, [r5, #0]
 800a180:	2900      	cmp	r1, #0
 800a182:	d0ca      	beq.n	800a11a <__sflush_r+0x1a>
 800a184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a188:	4299      	cmp	r1, r3
 800a18a:	d002      	beq.n	800a192 <__sflush_r+0x92>
 800a18c:	4628      	mov	r0, r5
 800a18e:	f7ff faa5 	bl	80096dc <_free_r>
 800a192:	2000      	movs	r0, #0
 800a194:	6360      	str	r0, [r4, #52]	; 0x34
 800a196:	e7c1      	b.n	800a11c <__sflush_r+0x1c>
 800a198:	6a21      	ldr	r1, [r4, #32]
 800a19a:	2301      	movs	r3, #1
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b0      	blx	r6
 800a1a0:	1c41      	adds	r1, r0, #1
 800a1a2:	d1c7      	bne.n	800a134 <__sflush_r+0x34>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0c4      	beq.n	800a134 <__sflush_r+0x34>
 800a1aa:	2b1d      	cmp	r3, #29
 800a1ac:	d001      	beq.n	800a1b2 <__sflush_r+0xb2>
 800a1ae:	2b16      	cmp	r3, #22
 800a1b0:	d101      	bne.n	800a1b6 <__sflush_r+0xb6>
 800a1b2:	602f      	str	r7, [r5, #0]
 800a1b4:	e7b1      	b.n	800a11a <__sflush_r+0x1a>
 800a1b6:	89a3      	ldrh	r3, [r4, #12]
 800a1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1bc:	81a3      	strh	r3, [r4, #12]
 800a1be:	e7ad      	b.n	800a11c <__sflush_r+0x1c>
 800a1c0:	690f      	ldr	r7, [r1, #16]
 800a1c2:	2f00      	cmp	r7, #0
 800a1c4:	d0a9      	beq.n	800a11a <__sflush_r+0x1a>
 800a1c6:	0793      	lsls	r3, r2, #30
 800a1c8:	680e      	ldr	r6, [r1, #0]
 800a1ca:	bf08      	it	eq
 800a1cc:	694b      	ldreq	r3, [r1, #20]
 800a1ce:	600f      	str	r7, [r1, #0]
 800a1d0:	bf18      	it	ne
 800a1d2:	2300      	movne	r3, #0
 800a1d4:	eba6 0807 	sub.w	r8, r6, r7
 800a1d8:	608b      	str	r3, [r1, #8]
 800a1da:	f1b8 0f00 	cmp.w	r8, #0
 800a1de:	dd9c      	ble.n	800a11a <__sflush_r+0x1a>
 800a1e0:	6a21      	ldr	r1, [r4, #32]
 800a1e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a1e4:	4643      	mov	r3, r8
 800a1e6:	463a      	mov	r2, r7
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	47b0      	blx	r6
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	dc06      	bgt.n	800a1fe <__sflush_r+0xfe>
 800a1f0:	89a3      	ldrh	r3, [r4, #12]
 800a1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f6:	81a3      	strh	r3, [r4, #12]
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1fc:	e78e      	b.n	800a11c <__sflush_r+0x1c>
 800a1fe:	4407      	add	r7, r0
 800a200:	eba8 0800 	sub.w	r8, r8, r0
 800a204:	e7e9      	b.n	800a1da <__sflush_r+0xda>
 800a206:	bf00      	nop
 800a208:	20400001 	.word	0x20400001

0800a20c <_fflush_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	690b      	ldr	r3, [r1, #16]
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b913      	cbnz	r3, 800a21c <_fflush_r+0x10>
 800a216:	2500      	movs	r5, #0
 800a218:	4628      	mov	r0, r5
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	b118      	cbz	r0, 800a226 <_fflush_r+0x1a>
 800a21e:	6983      	ldr	r3, [r0, #24]
 800a220:	b90b      	cbnz	r3, 800a226 <_fflush_r+0x1a>
 800a222:	f000 f887 	bl	800a334 <__sinit>
 800a226:	4b14      	ldr	r3, [pc, #80]	; (800a278 <_fflush_r+0x6c>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	d11b      	bne.n	800a264 <_fflush_r+0x58>
 800a22c:	686c      	ldr	r4, [r5, #4]
 800a22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d0ef      	beq.n	800a216 <_fflush_r+0xa>
 800a236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a238:	07d0      	lsls	r0, r2, #31
 800a23a:	d404      	bmi.n	800a246 <_fflush_r+0x3a>
 800a23c:	0599      	lsls	r1, r3, #22
 800a23e:	d402      	bmi.n	800a246 <_fflush_r+0x3a>
 800a240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a242:	f000 f915 	bl	800a470 <__retarget_lock_acquire_recursive>
 800a246:	4628      	mov	r0, r5
 800a248:	4621      	mov	r1, r4
 800a24a:	f7ff ff59 	bl	800a100 <__sflush_r>
 800a24e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a250:	07da      	lsls	r2, r3, #31
 800a252:	4605      	mov	r5, r0
 800a254:	d4e0      	bmi.n	800a218 <_fflush_r+0xc>
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	059b      	lsls	r3, r3, #22
 800a25a:	d4dd      	bmi.n	800a218 <_fflush_r+0xc>
 800a25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a25e:	f000 f908 	bl	800a472 <__retarget_lock_release_recursive>
 800a262:	e7d9      	b.n	800a218 <_fflush_r+0xc>
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_fflush_r+0x70>)
 800a266:	429c      	cmp	r4, r3
 800a268:	d101      	bne.n	800a26e <_fflush_r+0x62>
 800a26a:	68ac      	ldr	r4, [r5, #8]
 800a26c:	e7df      	b.n	800a22e <_fflush_r+0x22>
 800a26e:	4b04      	ldr	r3, [pc, #16]	; (800a280 <_fflush_r+0x74>)
 800a270:	429c      	cmp	r4, r3
 800a272:	bf08      	it	eq
 800a274:	68ec      	ldreq	r4, [r5, #12]
 800a276:	e7da      	b.n	800a22e <_fflush_r+0x22>
 800a278:	0800b1b4 	.word	0x0800b1b4
 800a27c:	0800b1d4 	.word	0x0800b1d4
 800a280:	0800b194 	.word	0x0800b194

0800a284 <std>:
 800a284:	2300      	movs	r3, #0
 800a286:	b510      	push	{r4, lr}
 800a288:	4604      	mov	r4, r0
 800a28a:	e9c0 3300 	strd	r3, r3, [r0]
 800a28e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a292:	6083      	str	r3, [r0, #8]
 800a294:	8181      	strh	r1, [r0, #12]
 800a296:	6643      	str	r3, [r0, #100]	; 0x64
 800a298:	81c2      	strh	r2, [r0, #14]
 800a29a:	6183      	str	r3, [r0, #24]
 800a29c:	4619      	mov	r1, r3
 800a29e:	2208      	movs	r2, #8
 800a2a0:	305c      	adds	r0, #92	; 0x5c
 800a2a2:	f7fd fb5b 	bl	800795c <memset>
 800a2a6:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <std+0x38>)
 800a2a8:	6263      	str	r3, [r4, #36]	; 0x24
 800a2aa:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <std+0x3c>)
 800a2ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2ae:	4b05      	ldr	r3, [pc, #20]	; (800a2c4 <std+0x40>)
 800a2b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2b2:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <std+0x44>)
 800a2b4:	6224      	str	r4, [r4, #32]
 800a2b6:	6323      	str	r3, [r4, #48]	; 0x30
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	0800a5d9 	.word	0x0800a5d9
 800a2c0:	0800a5fb 	.word	0x0800a5fb
 800a2c4:	0800a633 	.word	0x0800a633
 800a2c8:	0800a657 	.word	0x0800a657

0800a2cc <_cleanup_r>:
 800a2cc:	4901      	ldr	r1, [pc, #4]	; (800a2d4 <_cleanup_r+0x8>)
 800a2ce:	f000 b8af 	b.w	800a430 <_fwalk_reent>
 800a2d2:	bf00      	nop
 800a2d4:	0800a20d 	.word	0x0800a20d

0800a2d8 <__sfmoreglue>:
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	2268      	movs	r2, #104	; 0x68
 800a2dc:	1e4d      	subs	r5, r1, #1
 800a2de:	4355      	muls	r5, r2
 800a2e0:	460e      	mov	r6, r1
 800a2e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a2e6:	f7ff fa65 	bl	80097b4 <_malloc_r>
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	b140      	cbz	r0, 800a300 <__sfmoreglue+0x28>
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	e9c0 1600 	strd	r1, r6, [r0]
 800a2f4:	300c      	adds	r0, #12
 800a2f6:	60a0      	str	r0, [r4, #8]
 800a2f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a2fc:	f7fd fb2e 	bl	800795c <memset>
 800a300:	4620      	mov	r0, r4
 800a302:	bd70      	pop	{r4, r5, r6, pc}

0800a304 <__sfp_lock_acquire>:
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__sfp_lock_acquire+0x8>)
 800a306:	f000 b8b3 	b.w	800a470 <__retarget_lock_acquire_recursive>
 800a30a:	bf00      	nop
 800a30c:	2000052d 	.word	0x2000052d

0800a310 <__sfp_lock_release>:
 800a310:	4801      	ldr	r0, [pc, #4]	; (800a318 <__sfp_lock_release+0x8>)
 800a312:	f000 b8ae 	b.w	800a472 <__retarget_lock_release_recursive>
 800a316:	bf00      	nop
 800a318:	2000052d 	.word	0x2000052d

0800a31c <__sinit_lock_acquire>:
 800a31c:	4801      	ldr	r0, [pc, #4]	; (800a324 <__sinit_lock_acquire+0x8>)
 800a31e:	f000 b8a7 	b.w	800a470 <__retarget_lock_acquire_recursive>
 800a322:	bf00      	nop
 800a324:	2000052e 	.word	0x2000052e

0800a328 <__sinit_lock_release>:
 800a328:	4801      	ldr	r0, [pc, #4]	; (800a330 <__sinit_lock_release+0x8>)
 800a32a:	f000 b8a2 	b.w	800a472 <__retarget_lock_release_recursive>
 800a32e:	bf00      	nop
 800a330:	2000052e 	.word	0x2000052e

0800a334 <__sinit>:
 800a334:	b510      	push	{r4, lr}
 800a336:	4604      	mov	r4, r0
 800a338:	f7ff fff0 	bl	800a31c <__sinit_lock_acquire>
 800a33c:	69a3      	ldr	r3, [r4, #24]
 800a33e:	b11b      	cbz	r3, 800a348 <__sinit+0x14>
 800a340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a344:	f7ff bff0 	b.w	800a328 <__sinit_lock_release>
 800a348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a34c:	6523      	str	r3, [r4, #80]	; 0x50
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <__sinit+0x68>)
 800a350:	4a13      	ldr	r2, [pc, #76]	; (800a3a0 <__sinit+0x6c>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	62a2      	str	r2, [r4, #40]	; 0x28
 800a356:	42a3      	cmp	r3, r4
 800a358:	bf04      	itt	eq
 800a35a:	2301      	moveq	r3, #1
 800a35c:	61a3      	streq	r3, [r4, #24]
 800a35e:	4620      	mov	r0, r4
 800a360:	f000 f820 	bl	800a3a4 <__sfp>
 800a364:	6060      	str	r0, [r4, #4]
 800a366:	4620      	mov	r0, r4
 800a368:	f000 f81c 	bl	800a3a4 <__sfp>
 800a36c:	60a0      	str	r0, [r4, #8]
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 f818 	bl	800a3a4 <__sfp>
 800a374:	2200      	movs	r2, #0
 800a376:	60e0      	str	r0, [r4, #12]
 800a378:	2104      	movs	r1, #4
 800a37a:	6860      	ldr	r0, [r4, #4]
 800a37c:	f7ff ff82 	bl	800a284 <std>
 800a380:	68a0      	ldr	r0, [r4, #8]
 800a382:	2201      	movs	r2, #1
 800a384:	2109      	movs	r1, #9
 800a386:	f7ff ff7d 	bl	800a284 <std>
 800a38a:	68e0      	ldr	r0, [r4, #12]
 800a38c:	2202      	movs	r2, #2
 800a38e:	2112      	movs	r1, #18
 800a390:	f7ff ff78 	bl	800a284 <std>
 800a394:	2301      	movs	r3, #1
 800a396:	61a3      	str	r3, [r4, #24]
 800a398:	e7d2      	b.n	800a340 <__sinit+0xc>
 800a39a:	bf00      	nop
 800a39c:	0800ae18 	.word	0x0800ae18
 800a3a0:	0800a2cd 	.word	0x0800a2cd

0800a3a4 <__sfp>:
 800a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	f7ff ffac 	bl	800a304 <__sfp_lock_acquire>
 800a3ac:	4b1e      	ldr	r3, [pc, #120]	; (800a428 <__sfp+0x84>)
 800a3ae:	681e      	ldr	r6, [r3, #0]
 800a3b0:	69b3      	ldr	r3, [r6, #24]
 800a3b2:	b913      	cbnz	r3, 800a3ba <__sfp+0x16>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7ff ffbd 	bl	800a334 <__sinit>
 800a3ba:	3648      	adds	r6, #72	; 0x48
 800a3bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	d503      	bpl.n	800a3cc <__sfp+0x28>
 800a3c4:	6833      	ldr	r3, [r6, #0]
 800a3c6:	b30b      	cbz	r3, 800a40c <__sfp+0x68>
 800a3c8:	6836      	ldr	r6, [r6, #0]
 800a3ca:	e7f7      	b.n	800a3bc <__sfp+0x18>
 800a3cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a3d0:	b9d5      	cbnz	r5, 800a408 <__sfp+0x64>
 800a3d2:	4b16      	ldr	r3, [pc, #88]	; (800a42c <__sfp+0x88>)
 800a3d4:	60e3      	str	r3, [r4, #12]
 800a3d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3da:	6665      	str	r5, [r4, #100]	; 0x64
 800a3dc:	f000 f847 	bl	800a46e <__retarget_lock_init_recursive>
 800a3e0:	f7ff ff96 	bl	800a310 <__sfp_lock_release>
 800a3e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a3e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a3ec:	6025      	str	r5, [r4, #0]
 800a3ee:	61a5      	str	r5, [r4, #24]
 800a3f0:	2208      	movs	r2, #8
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a3f8:	f7fd fab0 	bl	800795c <memset>
 800a3fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a404:	4620      	mov	r0, r4
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a408:	3468      	adds	r4, #104	; 0x68
 800a40a:	e7d9      	b.n	800a3c0 <__sfp+0x1c>
 800a40c:	2104      	movs	r1, #4
 800a40e:	4638      	mov	r0, r7
 800a410:	f7ff ff62 	bl	800a2d8 <__sfmoreglue>
 800a414:	4604      	mov	r4, r0
 800a416:	6030      	str	r0, [r6, #0]
 800a418:	2800      	cmp	r0, #0
 800a41a:	d1d5      	bne.n	800a3c8 <__sfp+0x24>
 800a41c:	f7ff ff78 	bl	800a310 <__sfp_lock_release>
 800a420:	230c      	movs	r3, #12
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	e7ee      	b.n	800a404 <__sfp+0x60>
 800a426:	bf00      	nop
 800a428:	0800ae18 	.word	0x0800ae18
 800a42c:	ffff0001 	.word	0xffff0001

0800a430 <_fwalk_reent>:
 800a430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a434:	4606      	mov	r6, r0
 800a436:	4688      	mov	r8, r1
 800a438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a43c:	2700      	movs	r7, #0
 800a43e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a442:	f1b9 0901 	subs.w	r9, r9, #1
 800a446:	d505      	bpl.n	800a454 <_fwalk_reent+0x24>
 800a448:	6824      	ldr	r4, [r4, #0]
 800a44a:	2c00      	cmp	r4, #0
 800a44c:	d1f7      	bne.n	800a43e <_fwalk_reent+0xe>
 800a44e:	4638      	mov	r0, r7
 800a450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a454:	89ab      	ldrh	r3, [r5, #12]
 800a456:	2b01      	cmp	r3, #1
 800a458:	d907      	bls.n	800a46a <_fwalk_reent+0x3a>
 800a45a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a45e:	3301      	adds	r3, #1
 800a460:	d003      	beq.n	800a46a <_fwalk_reent+0x3a>
 800a462:	4629      	mov	r1, r5
 800a464:	4630      	mov	r0, r6
 800a466:	47c0      	blx	r8
 800a468:	4307      	orrs	r7, r0
 800a46a:	3568      	adds	r5, #104	; 0x68
 800a46c:	e7e9      	b.n	800a442 <_fwalk_reent+0x12>

0800a46e <__retarget_lock_init_recursive>:
 800a46e:	4770      	bx	lr

0800a470 <__retarget_lock_acquire_recursive>:
 800a470:	4770      	bx	lr

0800a472 <__retarget_lock_release_recursive>:
 800a472:	4770      	bx	lr

0800a474 <__swhatbuf_r>:
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	460e      	mov	r6, r1
 800a478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47c:	2900      	cmp	r1, #0
 800a47e:	b096      	sub	sp, #88	; 0x58
 800a480:	4614      	mov	r4, r2
 800a482:	461d      	mov	r5, r3
 800a484:	da08      	bge.n	800a498 <__swhatbuf_r+0x24>
 800a486:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	061a      	lsls	r2, r3, #24
 800a490:	d410      	bmi.n	800a4b4 <__swhatbuf_r+0x40>
 800a492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a496:	e00e      	b.n	800a4b6 <__swhatbuf_r+0x42>
 800a498:	466a      	mov	r2, sp
 800a49a:	f000 f903 	bl	800a6a4 <_fstat_r>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	dbf1      	blt.n	800a486 <__swhatbuf_r+0x12>
 800a4a2:	9a01      	ldr	r2, [sp, #4]
 800a4a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4ac:	425a      	negs	r2, r3
 800a4ae:	415a      	adcs	r2, r3
 800a4b0:	602a      	str	r2, [r5, #0]
 800a4b2:	e7ee      	b.n	800a492 <__swhatbuf_r+0x1e>
 800a4b4:	2340      	movs	r3, #64	; 0x40
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	b016      	add	sp, #88	; 0x58
 800a4bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a4c0 <__smakebuf_r>:
 800a4c0:	898b      	ldrh	r3, [r1, #12]
 800a4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4c4:	079d      	lsls	r5, r3, #30
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	d507      	bpl.n	800a4dc <__smakebuf_r+0x1c>
 800a4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	6123      	str	r3, [r4, #16]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	6163      	str	r3, [r4, #20]
 800a4d8:	b002      	add	sp, #8
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	ab01      	add	r3, sp, #4
 800a4de:	466a      	mov	r2, sp
 800a4e0:	f7ff ffc8 	bl	800a474 <__swhatbuf_r>
 800a4e4:	9900      	ldr	r1, [sp, #0]
 800a4e6:	4605      	mov	r5, r0
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7ff f963 	bl	80097b4 <_malloc_r>
 800a4ee:	b948      	cbnz	r0, 800a504 <__smakebuf_r+0x44>
 800a4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f4:	059a      	lsls	r2, r3, #22
 800a4f6:	d4ef      	bmi.n	800a4d8 <__smakebuf_r+0x18>
 800a4f8:	f023 0303 	bic.w	r3, r3, #3
 800a4fc:	f043 0302 	orr.w	r3, r3, #2
 800a500:	81a3      	strh	r3, [r4, #12]
 800a502:	e7e3      	b.n	800a4cc <__smakebuf_r+0xc>
 800a504:	4b0d      	ldr	r3, [pc, #52]	; (800a53c <__smakebuf_r+0x7c>)
 800a506:	62b3      	str	r3, [r6, #40]	; 0x28
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	6020      	str	r0, [r4, #0]
 800a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	9b00      	ldr	r3, [sp, #0]
 800a514:	6163      	str	r3, [r4, #20]
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	6120      	str	r0, [r4, #16]
 800a51a:	b15b      	cbz	r3, 800a534 <__smakebuf_r+0x74>
 800a51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a520:	4630      	mov	r0, r6
 800a522:	f000 f8d1 	bl	800a6c8 <_isatty_r>
 800a526:	b128      	cbz	r0, 800a534 <__smakebuf_r+0x74>
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	f043 0301 	orr.w	r3, r3, #1
 800a532:	81a3      	strh	r3, [r4, #12]
 800a534:	89a0      	ldrh	r0, [r4, #12]
 800a536:	4305      	orrs	r5, r0
 800a538:	81a5      	strh	r5, [r4, #12]
 800a53a:	e7cd      	b.n	800a4d8 <__smakebuf_r+0x18>
 800a53c:	0800a2cd 	.word	0x0800a2cd

0800a540 <_malloc_usable_size_r>:
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f18      	subs	r0, r3, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfbc      	itt	lt
 800a54a:	580b      	ldrlt	r3, [r1, r0]
 800a54c:	18c0      	addlt	r0, r0, r3
 800a54e:	4770      	bx	lr

0800a550 <_raise_r>:
 800a550:	291f      	cmp	r1, #31
 800a552:	b538      	push	{r3, r4, r5, lr}
 800a554:	4604      	mov	r4, r0
 800a556:	460d      	mov	r5, r1
 800a558:	d904      	bls.n	800a564 <_raise_r+0x14>
 800a55a:	2316      	movs	r3, #22
 800a55c:	6003      	str	r3, [r0, #0]
 800a55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a566:	b112      	cbz	r2, 800a56e <_raise_r+0x1e>
 800a568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a56c:	b94b      	cbnz	r3, 800a582 <_raise_r+0x32>
 800a56e:	4620      	mov	r0, r4
 800a570:	f000 f830 	bl	800a5d4 <_getpid_r>
 800a574:	462a      	mov	r2, r5
 800a576:	4601      	mov	r1, r0
 800a578:	4620      	mov	r0, r4
 800a57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a57e:	f000 b817 	b.w	800a5b0 <_kill_r>
 800a582:	2b01      	cmp	r3, #1
 800a584:	d00a      	beq.n	800a59c <_raise_r+0x4c>
 800a586:	1c59      	adds	r1, r3, #1
 800a588:	d103      	bne.n	800a592 <_raise_r+0x42>
 800a58a:	2316      	movs	r3, #22
 800a58c:	6003      	str	r3, [r0, #0]
 800a58e:	2001      	movs	r0, #1
 800a590:	e7e7      	b.n	800a562 <_raise_r+0x12>
 800a592:	2400      	movs	r4, #0
 800a594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a598:	4628      	mov	r0, r5
 800a59a:	4798      	blx	r3
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7e0      	b.n	800a562 <_raise_r+0x12>

0800a5a0 <raise>:
 800a5a0:	4b02      	ldr	r3, [pc, #8]	; (800a5ac <raise+0xc>)
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	f7ff bfd3 	b.w	800a550 <_raise_r>
 800a5aa:	bf00      	nop
 800a5ac:	20000018 	.word	0x20000018

0800a5b0 <_kill_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4d07      	ldr	r5, [pc, #28]	; (800a5d0 <_kill_r+0x20>)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	602b      	str	r3, [r5, #0]
 800a5be:	f7f9 fa43 	bl	8003a48 <_kill>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	d102      	bne.n	800a5cc <_kill_r+0x1c>
 800a5c6:	682b      	ldr	r3, [r5, #0]
 800a5c8:	b103      	cbz	r3, 800a5cc <_kill_r+0x1c>
 800a5ca:	6023      	str	r3, [r4, #0]
 800a5cc:	bd38      	pop	{r3, r4, r5, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20000528 	.word	0x20000528

0800a5d4 <_getpid_r>:
 800a5d4:	f7f9 ba30 	b.w	8003a38 <_getpid>

0800a5d8 <__sread>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	460c      	mov	r4, r1
 800a5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e0:	f000 f894 	bl	800a70c <_read_r>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	bfab      	itete	ge
 800a5e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ea:	89a3      	ldrhlt	r3, [r4, #12]
 800a5ec:	181b      	addge	r3, r3, r0
 800a5ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5f2:	bfac      	ite	ge
 800a5f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5f6:	81a3      	strhlt	r3, [r4, #12]
 800a5f8:	bd10      	pop	{r4, pc}

0800a5fa <__swrite>:
 800a5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fe:	461f      	mov	r7, r3
 800a600:	898b      	ldrh	r3, [r1, #12]
 800a602:	05db      	lsls	r3, r3, #23
 800a604:	4605      	mov	r5, r0
 800a606:	460c      	mov	r4, r1
 800a608:	4616      	mov	r6, r2
 800a60a:	d505      	bpl.n	800a618 <__swrite+0x1e>
 800a60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a610:	2302      	movs	r3, #2
 800a612:	2200      	movs	r2, #0
 800a614:	f000 f868 	bl	800a6e8 <_lseek_r>
 800a618:	89a3      	ldrh	r3, [r4, #12]
 800a61a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a61e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a622:	81a3      	strh	r3, [r4, #12]
 800a624:	4632      	mov	r2, r6
 800a626:	463b      	mov	r3, r7
 800a628:	4628      	mov	r0, r5
 800a62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a62e:	f000 b817 	b.w	800a660 <_write_r>

0800a632 <__sseek>:
 800a632:	b510      	push	{r4, lr}
 800a634:	460c      	mov	r4, r1
 800a636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63a:	f000 f855 	bl	800a6e8 <_lseek_r>
 800a63e:	1c43      	adds	r3, r0, #1
 800a640:	89a3      	ldrh	r3, [r4, #12]
 800a642:	bf15      	itete	ne
 800a644:	6560      	strne	r0, [r4, #84]	; 0x54
 800a646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a64a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a64e:	81a3      	strheq	r3, [r4, #12]
 800a650:	bf18      	it	ne
 800a652:	81a3      	strhne	r3, [r4, #12]
 800a654:	bd10      	pop	{r4, pc}

0800a656 <__sclose>:
 800a656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65a:	f000 b813 	b.w	800a684 <_close_r>
	...

0800a660 <_write_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d07      	ldr	r5, [pc, #28]	; (800a680 <_write_r+0x20>)
 800a664:	4604      	mov	r4, r0
 800a666:	4608      	mov	r0, r1
 800a668:	4611      	mov	r1, r2
 800a66a:	2200      	movs	r2, #0
 800a66c:	602a      	str	r2, [r5, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7f9 fa21 	bl	8003ab6 <_write>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_write_r+0x1e>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_write_r+0x1e>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20000528 	.word	0x20000528

0800a684 <_close_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d06      	ldr	r5, [pc, #24]	; (800a6a0 <_close_r+0x1c>)
 800a688:	2300      	movs	r3, #0
 800a68a:	4604      	mov	r4, r0
 800a68c:	4608      	mov	r0, r1
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	f7f9 fa2d 	bl	8003aee <_close>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_close_r+0x1a>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_close_r+0x1a>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	20000528 	.word	0x20000528

0800a6a4 <_fstat_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d07      	ldr	r5, [pc, #28]	; (800a6c4 <_fstat_r+0x20>)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	f7f9 fa28 	bl	8003b06 <_fstat>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d102      	bne.n	800a6c0 <_fstat_r+0x1c>
 800a6ba:	682b      	ldr	r3, [r5, #0]
 800a6bc:	b103      	cbz	r3, 800a6c0 <_fstat_r+0x1c>
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	bd38      	pop	{r3, r4, r5, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000528 	.word	0x20000528

0800a6c8 <_isatty_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d06      	ldr	r5, [pc, #24]	; (800a6e4 <_isatty_r+0x1c>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	f7f9 fa27 	bl	8003b26 <_isatty>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_isatty_r+0x1a>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_isatty_r+0x1a>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20000528 	.word	0x20000528

0800a6e8 <_lseek_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_lseek_r+0x20>)
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7f9 fa20 	bl	8003b3c <_lseek>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_lseek_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_lseek_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20000528 	.word	0x20000528

0800a70c <_read_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d07      	ldr	r5, [pc, #28]	; (800a72c <_read_r+0x20>)
 800a710:	4604      	mov	r4, r0
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	2200      	movs	r2, #0
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f7f9 f9ae 	bl	8003a7c <_read>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_read_r+0x1e>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_read_r+0x1e>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	20000528 	.word	0x20000528

0800a730 <asinf>:
 800a730:	b508      	push	{r3, lr}
 800a732:	ed2d 8b02 	vpush	{d8}
 800a736:	eeb0 8a40 	vmov.f32	s16, s0
 800a73a:	f000 f845 	bl	800a7c8 <__ieee754_asinf>
 800a73e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a746:	eef0 8a40 	vmov.f32	s17, s0
 800a74a:	d615      	bvs.n	800a778 <asinf+0x48>
 800a74c:	eeb0 0a48 	vmov.f32	s0, s16
 800a750:	f000 fa98 	bl	800ac84 <fabsf>
 800a754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a758:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	dd0a      	ble.n	800a778 <asinf+0x48>
 800a762:	f7fd f8d1 	bl	8007908 <__errno>
 800a766:	ecbd 8b02 	vpop	{d8}
 800a76a:	2321      	movs	r3, #33	; 0x21
 800a76c:	6003      	str	r3, [r0, #0]
 800a76e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a772:	4804      	ldr	r0, [pc, #16]	; (800a784 <asinf+0x54>)
 800a774:	f000 ba8e 	b.w	800ac94 <nanf>
 800a778:	eeb0 0a68 	vmov.f32	s0, s17
 800a77c:	ecbd 8b02 	vpop	{d8}
 800a780:	bd08      	pop	{r3, pc}
 800a782:	bf00      	nop
 800a784:	0800b088 	.word	0x0800b088

0800a788 <atan2f>:
 800a788:	f000 b904 	b.w	800a994 <__ieee754_atan2f>

0800a78c <sqrtf>:
 800a78c:	b508      	push	{r3, lr}
 800a78e:	ed2d 8b02 	vpush	{d8}
 800a792:	eeb0 8a40 	vmov.f32	s16, s0
 800a796:	f000 f99d 	bl	800aad4 <__ieee754_sqrtf>
 800a79a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a2:	d60c      	bvs.n	800a7be <sqrtf+0x32>
 800a7a4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a7c4 <sqrtf+0x38>
 800a7a8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b0:	d505      	bpl.n	800a7be <sqrtf+0x32>
 800a7b2:	f7fd f8a9 	bl	8007908 <__errno>
 800a7b6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a7ba:	2321      	movs	r3, #33	; 0x21
 800a7bc:	6003      	str	r3, [r0, #0]
 800a7be:	ecbd 8b02 	vpop	{d8}
 800a7c2:	bd08      	pop	{r3, pc}
 800a7c4:	00000000 	.word	0x00000000

0800a7c8 <__ieee754_asinf>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	ee10 5a10 	vmov	r5, s0
 800a7ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a7d2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a7d6:	ed2d 8b04 	vpush	{d8-d9}
 800a7da:	d10c      	bne.n	800a7f6 <__ieee754_asinf+0x2e>
 800a7dc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a954 <__ieee754_asinf+0x18c>
 800a7e0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a958 <__ieee754_asinf+0x190>
 800a7e4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a7e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a7ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f0:	ecbd 8b04 	vpop	{d8-d9}
 800a7f4:	bd38      	pop	{r3, r4, r5, pc}
 800a7f6:	dd04      	ble.n	800a802 <__ieee754_asinf+0x3a>
 800a7f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a7fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a800:	e7f6      	b.n	800a7f0 <__ieee754_asinf+0x28>
 800a802:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a806:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a80a:	da0b      	bge.n	800a824 <__ieee754_asinf+0x5c>
 800a80c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a810:	da52      	bge.n	800a8b8 <__ieee754_asinf+0xf0>
 800a812:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a95c <__ieee754_asinf+0x194>
 800a816:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a81a:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a822:	dce5      	bgt.n	800a7f0 <__ieee754_asinf+0x28>
 800a824:	f000 fa2e 	bl	800ac84 <fabsf>
 800a828:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a82c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a830:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a834:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a960 <__ieee754_asinf+0x198>
 800a838:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a964 <__ieee754_asinf+0x19c>
 800a83c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a968 <__ieee754_asinf+0x1a0>
 800a840:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a844:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a96c <__ieee754_asinf+0x1a4>
 800a848:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a84c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a970 <__ieee754_asinf+0x1a8>
 800a850:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a854:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a974 <__ieee754_asinf+0x1ac>
 800a858:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a85c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a978 <__ieee754_asinf+0x1b0>
 800a860:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a864:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a97c <__ieee754_asinf+0x1b4>
 800a868:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a86c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a980 <__ieee754_asinf+0x1b8>
 800a870:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a874:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a984 <__ieee754_asinf+0x1bc>
 800a878:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a87c:	eeb0 0a48 	vmov.f32	s0, s16
 800a880:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a884:	f000 f926 	bl	800aad4 <__ieee754_sqrtf>
 800a888:	4b3f      	ldr	r3, [pc, #252]	; (800a988 <__ieee754_asinf+0x1c0>)
 800a88a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a88e:	429c      	cmp	r4, r3
 800a890:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a894:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a898:	dd3d      	ble.n	800a916 <__ieee754_asinf+0x14e>
 800a89a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a89e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a98c <__ieee754_asinf+0x1c4>
 800a8a2:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a8a6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a958 <__ieee754_asinf+0x190>
 800a8aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a8ae:	2d00      	cmp	r5, #0
 800a8b0:	bfd8      	it	le
 800a8b2:	eeb1 0a40 	vnegle.f32	s0, s0
 800a8b6:	e79b      	b.n	800a7f0 <__ieee754_asinf+0x28>
 800a8b8:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a8bc:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a960 <__ieee754_asinf+0x198>
 800a8c0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a964 <__ieee754_asinf+0x19c>
 800a8c4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a978 <__ieee754_asinf+0x1b0>
 800a8c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a8cc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a96c <__ieee754_asinf+0x1a4>
 800a8d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a8d4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a970 <__ieee754_asinf+0x1a8>
 800a8d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a974 <__ieee754_asinf+0x1ac>
 800a8e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a8e4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a968 <__ieee754_asinf+0x1a0>
 800a8e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a8ec:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a97c <__ieee754_asinf+0x1b4>
 800a8f0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a8f4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a980 <__ieee754_asinf+0x1b8>
 800a8f8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a8fc:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a984 <__ieee754_asinf+0x1bc>
 800a900:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a904:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a908:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a90c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a910:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a914:	e76c      	b.n	800a7f0 <__ieee754_asinf+0x28>
 800a916:	ee10 3a10 	vmov	r3, s0
 800a91a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a91e:	f023 030f 	bic.w	r3, r3, #15
 800a922:	ee07 3a10 	vmov	s14, r3
 800a926:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a92a:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a92e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a932:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a936:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a954 <__ieee754_asinf+0x18c>
 800a93a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a93e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a942:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a990 <__ieee754_asinf+0x1c8>
 800a946:	eeb0 6a40 	vmov.f32	s12, s0
 800a94a:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a94e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a952:	e7aa      	b.n	800a8aa <__ieee754_asinf+0xe2>
 800a954:	b33bbd2e 	.word	0xb33bbd2e
 800a958:	3fc90fdb 	.word	0x3fc90fdb
 800a95c:	7149f2ca 	.word	0x7149f2ca
 800a960:	3811ef08 	.word	0x3811ef08
 800a964:	3a4f7f04 	.word	0x3a4f7f04
 800a968:	3e2aaaab 	.word	0x3e2aaaab
 800a96c:	bd241146 	.word	0xbd241146
 800a970:	3e4e0aa8 	.word	0x3e4e0aa8
 800a974:	bea6b090 	.word	0xbea6b090
 800a978:	3d9dc62e 	.word	0x3d9dc62e
 800a97c:	bf303361 	.word	0xbf303361
 800a980:	4001572d 	.word	0x4001572d
 800a984:	c019d139 	.word	0xc019d139
 800a988:	3f799999 	.word	0x3f799999
 800a98c:	333bbd2e 	.word	0x333bbd2e
 800a990:	3f490fdb 	.word	0x3f490fdb

0800a994 <__ieee754_atan2f>:
 800a994:	ee10 2a90 	vmov	r2, s1
 800a998:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a99c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	eef0 7a40 	vmov.f32	s15, s0
 800a9a6:	dc06      	bgt.n	800a9b6 <__ieee754_atan2f+0x22>
 800a9a8:	ee10 0a10 	vmov	r0, s0
 800a9ac:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a9b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9b4:	dd04      	ble.n	800a9c0 <__ieee754_atan2f+0x2c>
 800a9b6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a9ba:	eeb0 0a67 	vmov.f32	s0, s15
 800a9be:	bd10      	pop	{r4, pc}
 800a9c0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a9c4:	d103      	bne.n	800a9ce <__ieee754_atan2f+0x3a>
 800a9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ca:	f000 b887 	b.w	800aadc <atanf>
 800a9ce:	1794      	asrs	r4, r2, #30
 800a9d0:	f004 0402 	and.w	r4, r4, #2
 800a9d4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a9d8:	b943      	cbnz	r3, 800a9ec <__ieee754_atan2f+0x58>
 800a9da:	2c02      	cmp	r4, #2
 800a9dc:	d05e      	beq.n	800aa9c <__ieee754_atan2f+0x108>
 800a9de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800aab0 <__ieee754_atan2f+0x11c>
 800a9e2:	2c03      	cmp	r4, #3
 800a9e4:	bf08      	it	eq
 800a9e6:	eef0 7a47 	vmoveq.f32	s15, s14
 800a9ea:	e7e6      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800a9ec:	b941      	cbnz	r1, 800aa00 <__ieee754_atan2f+0x6c>
 800a9ee:	eddf 7a31 	vldr	s15, [pc, #196]	; 800aab4 <__ieee754_atan2f+0x120>
 800a9f2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800aab8 <__ieee754_atan2f+0x124>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	bfb8      	it	lt
 800a9fa:	eef0 7a40 	vmovlt.f32	s15, s0
 800a9fe:	e7dc      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aa00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aa04:	d110      	bne.n	800aa28 <__ieee754_atan2f+0x94>
 800aa06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa0a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aa0e:	d107      	bne.n	800aa20 <__ieee754_atan2f+0x8c>
 800aa10:	2c02      	cmp	r4, #2
 800aa12:	d846      	bhi.n	800aaa2 <__ieee754_atan2f+0x10e>
 800aa14:	4b29      	ldr	r3, [pc, #164]	; (800aabc <__ieee754_atan2f+0x128>)
 800aa16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa1a:	edd4 7a00 	vldr	s15, [r4]
 800aa1e:	e7cc      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aa20:	2c02      	cmp	r4, #2
 800aa22:	d841      	bhi.n	800aaa8 <__ieee754_atan2f+0x114>
 800aa24:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <__ieee754_atan2f+0x12c>)
 800aa26:	e7f6      	b.n	800aa16 <__ieee754_atan2f+0x82>
 800aa28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aa2c:	d0df      	beq.n	800a9ee <__ieee754_atan2f+0x5a>
 800aa2e:	1a5b      	subs	r3, r3, r1
 800aa30:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800aa34:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800aa38:	da1a      	bge.n	800aa70 <__ieee754_atan2f+0xdc>
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	da01      	bge.n	800aa42 <__ieee754_atan2f+0xae>
 800aa3e:	313c      	adds	r1, #60	; 0x3c
 800aa40:	db19      	blt.n	800aa76 <__ieee754_atan2f+0xe2>
 800aa42:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800aa46:	f000 f91d 	bl	800ac84 <fabsf>
 800aa4a:	f000 f847 	bl	800aadc <atanf>
 800aa4e:	eef0 7a40 	vmov.f32	s15, s0
 800aa52:	2c01      	cmp	r4, #1
 800aa54:	d012      	beq.n	800aa7c <__ieee754_atan2f+0xe8>
 800aa56:	2c02      	cmp	r4, #2
 800aa58:	d017      	beq.n	800aa8a <__ieee754_atan2f+0xf6>
 800aa5a:	2c00      	cmp	r4, #0
 800aa5c:	d0ad      	beq.n	800a9ba <__ieee754_atan2f+0x26>
 800aa5e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800aac4 <__ieee754_atan2f+0x130>
 800aa62:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa66:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800aac8 <__ieee754_atan2f+0x134>
 800aa6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aa6e:	e7a4      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aa70:	eddf 7a10 	vldr	s15, [pc, #64]	; 800aab4 <__ieee754_atan2f+0x120>
 800aa74:	e7ed      	b.n	800aa52 <__ieee754_atan2f+0xbe>
 800aa76:	eddf 7a15 	vldr	s15, [pc, #84]	; 800aacc <__ieee754_atan2f+0x138>
 800aa7a:	e7ea      	b.n	800aa52 <__ieee754_atan2f+0xbe>
 800aa7c:	ee17 3a90 	vmov	r3, s15
 800aa80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa84:	ee07 3a90 	vmov	s15, r3
 800aa88:	e797      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aa8a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800aac4 <__ieee754_atan2f+0x130>
 800aa8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aa92:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800aac8 <__ieee754_atan2f+0x134>
 800aa96:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aa9a:	e78e      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aa9c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800aac8 <__ieee754_atan2f+0x134>
 800aaa0:	e78b      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aaa2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800aad0 <__ieee754_atan2f+0x13c>
 800aaa6:	e788      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aaa8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800aacc <__ieee754_atan2f+0x138>
 800aaac:	e785      	b.n	800a9ba <__ieee754_atan2f+0x26>
 800aaae:	bf00      	nop
 800aab0:	c0490fdb 	.word	0xc0490fdb
 800aab4:	3fc90fdb 	.word	0x3fc90fdb
 800aab8:	bfc90fdb 	.word	0xbfc90fdb
 800aabc:	0800b1f4 	.word	0x0800b1f4
 800aac0:	0800b200 	.word	0x0800b200
 800aac4:	33bbbd2e 	.word	0x33bbbd2e
 800aac8:	40490fdb 	.word	0x40490fdb
 800aacc:	00000000 	.word	0x00000000
 800aad0:	3f490fdb 	.word	0x3f490fdb

0800aad4 <__ieee754_sqrtf>:
 800aad4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aad8:	4770      	bx	lr
	...

0800aadc <atanf>:
 800aadc:	b538      	push	{r3, r4, r5, lr}
 800aade:	ee10 5a10 	vmov	r5, s0
 800aae2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800aae6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800aaea:	eef0 7a40 	vmov.f32	s15, s0
 800aaee:	db10      	blt.n	800ab12 <atanf+0x36>
 800aaf0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aaf4:	dd04      	ble.n	800ab00 <atanf+0x24>
 800aaf6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800aafa:	eeb0 0a67 	vmov.f32	s0, s15
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ac38 <atanf+0x15c>
 800ab04:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ac3c <atanf+0x160>
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	bfd8      	it	le
 800ab0c:	eef0 7a40 	vmovle.f32	s15, s0
 800ab10:	e7f3      	b.n	800aafa <atanf+0x1e>
 800ab12:	4b4b      	ldr	r3, [pc, #300]	; (800ac40 <atanf+0x164>)
 800ab14:	429c      	cmp	r4, r3
 800ab16:	dc10      	bgt.n	800ab3a <atanf+0x5e>
 800ab18:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ab1c:	da0a      	bge.n	800ab34 <atanf+0x58>
 800ab1e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ac44 <atanf+0x168>
 800ab22:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ab26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ab2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab32:	dce2      	bgt.n	800aafa <atanf+0x1e>
 800ab34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab38:	e013      	b.n	800ab62 <atanf+0x86>
 800ab3a:	f000 f8a3 	bl	800ac84 <fabsf>
 800ab3e:	4b42      	ldr	r3, [pc, #264]	; (800ac48 <atanf+0x16c>)
 800ab40:	429c      	cmp	r4, r3
 800ab42:	dc4f      	bgt.n	800abe4 <atanf+0x108>
 800ab44:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	dc41      	bgt.n	800abd0 <atanf+0xf4>
 800ab4c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ab50:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab54:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab58:	2300      	movs	r3, #0
 800ab5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ab68:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ac4c <atanf+0x170>
 800ab6c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ac50 <atanf+0x174>
 800ab70:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ac54 <atanf+0x178>
 800ab74:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ab78:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ab7c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ac58 <atanf+0x17c>
 800ab80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab84:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ac5c <atanf+0x180>
 800ab88:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab8c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ac60 <atanf+0x184>
 800ab90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab94:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ac64 <atanf+0x188>
 800ab98:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab9c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ac68 <atanf+0x18c>
 800aba0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800aba4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ac6c <atanf+0x190>
 800aba8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800abac:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ac70 <atanf+0x194>
 800abb0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800abb4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ac74 <atanf+0x198>
 800abb8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800abbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800abc0:	eea5 7a86 	vfma.f32	s14, s11, s12
 800abc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800abc8:	d121      	bne.n	800ac0e <atanf+0x132>
 800abca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abce:	e794      	b.n	800aafa <atanf+0x1e>
 800abd0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800abd4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800abd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800abdc:	2301      	movs	r3, #1
 800abde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800abe2:	e7be      	b.n	800ab62 <atanf+0x86>
 800abe4:	4b24      	ldr	r3, [pc, #144]	; (800ac78 <atanf+0x19c>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	dc0b      	bgt.n	800ac02 <atanf+0x126>
 800abea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800abee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abf2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800abf6:	2302      	movs	r3, #2
 800abf8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800abfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac00:	e7af      	b.n	800ab62 <atanf+0x86>
 800ac02:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ac06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e7a9      	b.n	800ab62 <atanf+0x86>
 800ac0e:	4a1b      	ldr	r2, [pc, #108]	; (800ac7c <atanf+0x1a0>)
 800ac10:	491b      	ldr	r1, [pc, #108]	; (800ac80 <atanf+0x1a4>)
 800ac12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ac16:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ac1a:	ed93 0a00 	vldr	s0, [r3]
 800ac1e:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ac22:	ed92 0a00 	vldr	s0, [r2]
 800ac26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac2a:	2d00      	cmp	r5, #0
 800ac2c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ac30:	bfb8      	it	lt
 800ac32:	eef1 7a67 	vneglt.f32	s15, s15
 800ac36:	e760      	b.n	800aafa <atanf+0x1e>
 800ac38:	3fc90fdb 	.word	0x3fc90fdb
 800ac3c:	bfc90fdb 	.word	0xbfc90fdb
 800ac40:	3edfffff 	.word	0x3edfffff
 800ac44:	7149f2ca 	.word	0x7149f2ca
 800ac48:	3f97ffff 	.word	0x3f97ffff
 800ac4c:	3c8569d7 	.word	0x3c8569d7
 800ac50:	3d4bda59 	.word	0x3d4bda59
 800ac54:	bd6ef16b 	.word	0xbd6ef16b
 800ac58:	3d886b35 	.word	0x3d886b35
 800ac5c:	3dba2e6e 	.word	0x3dba2e6e
 800ac60:	3e124925 	.word	0x3e124925
 800ac64:	3eaaaaab 	.word	0x3eaaaaab
 800ac68:	bd15a221 	.word	0xbd15a221
 800ac6c:	bd9d8795 	.word	0xbd9d8795
 800ac70:	bde38e38 	.word	0xbde38e38
 800ac74:	be4ccccd 	.word	0xbe4ccccd
 800ac78:	401bffff 	.word	0x401bffff
 800ac7c:	0800b20c 	.word	0x0800b20c
 800ac80:	0800b21c 	.word	0x0800b21c

0800ac84 <fabsf>:
 800ac84:	ee10 3a10 	vmov	r3, s0
 800ac88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac8c:	ee00 3a10 	vmov	s0, r3
 800ac90:	4770      	bx	lr
	...

0800ac94 <nanf>:
 800ac94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac9c <nanf+0x8>
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	7fc00000 	.word	0x7fc00000

0800aca0 <_init>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	bf00      	nop
 800aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca6:	bc08      	pop	{r3}
 800aca8:	469e      	mov	lr, r3
 800acaa:	4770      	bx	lr

0800acac <_fini>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr
