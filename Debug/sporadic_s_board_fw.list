
sporadic_s_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b48  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08012ce8  08012ce8  00022ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013440  08013440  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  08013440  08013440  00023440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013448  08013448  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013448  08013448  00023448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801344c  0801344c  0002344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08013450  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  200001f8  08013644  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08013644  00030634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea10  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000429c  00000000  00000000  0004ec34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  00052ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e0  00000000  00000000  00054970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2aa  00000000  00000000  00056250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023021  00000000  00000000  000734fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009baac  00000000  00000000  0009651b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086bc  00000000  00000000  00132018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012cd0 	.word	0x08012cd0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08012cd0 	.word	0x08012cd0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADXL_init>:
#include "string.h"
I2C_HandleTypeDef *_adxl_i2c;
readings *_adxl_data;
uint16_t scale = 0;
uint8_t _adxl_timeout = 10;
uint8_t ADXL_init(I2C_HandleTypeDef *i2c, readings *data) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	_adxl_i2c = i2c;
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <ADXL_init+0x6c>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
	_adxl_data = data;
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <ADXL_init+0x70>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6013      	str	r3, [r2, #0]
	log_s_wnl("ADXL345 started---");
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <ADXL_init+0x74>)
 8000f74:	f000 fd0a 	bl	800198c <log_s_wnl>
	if (ADXL_ReadReg(ADXL345_DEVID) == 0xE5) {
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f84f 	bl	800101c <ADXL_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2be5      	cmp	r3, #229	; 0xe5
 8000f82:	d114      	bne.n	8000fae <ADXL_init+0x52>
		log_s_int("ok with id",ADXL_ReadReg(ADXL345_DEVID));
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f849 	bl	800101c <ADXL_ReadReg>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <ADXL_init+0x78>)
 8000f90:	f000 fd14 	bl	80019bc <log_s_int>
	} else {
		log_s_int("ERROR with id", ADXL_ReadReg(ADXL345_DEVID));
		return 1;
	}
	_adxl_data->adxl345.scale = 2 * (1 << (7 - ADXL_get_range()));
 8000f94:	f000 f882 	bl	800109c <ADXL_get_range>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <ADXL_init+0x70>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	b292      	uxth	r2, r2
 8000fa8:	82da      	strh	r2, [r3, #22]
	return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e008      	b.n	8000fc0 <ADXL_init+0x64>
		log_s_int("ERROR with id", ADXL_ReadReg(ADXL345_DEVID));
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f834 	bl	800101c <ADXL_ReadReg>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <ADXL_init+0x7c>)
 8000fba:	f000 fcff 	bl	80019bc <log_s_int>
		return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000214 	.word	0x20000214
 8000fcc:	20000218 	.word	0x20000218
 8000fd0:	08012ce8 	.word	0x08012ce8
 8000fd4:	08012cfc 	.word	0x08012cfc
 8000fd8:	08012d08 	.word	0x08012d08

08000fdc <ADXL_WriteReg>:

void ADXL_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	460a      	mov	r2, r1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	733b      	strb	r3, [r7, #12]
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR << 1, arr, 2, _adxl_timeout);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <ADXL_WriteReg+0x38>)
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <ADXL_WriteReg+0x3c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	f107 020c 	add.w	r2, r7, #12
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	21a6      	movs	r1, #166	; 0xa6
 8001006:	f005 f98d 	bl	8006324 <HAL_I2C_Master_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000214 	.word	0x20000214
 8001018:	20000000 	.word	0x20000000

0800101c <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR << 1, &reg, 1, _adxl_timeout);
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <ADXL_ReadReg+0x40>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	4b0d      	ldr	r3, [pc, #52]	; (8001060 <ADXL_ReadReg+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	1dfa      	adds	r2, r7, #7
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2301      	movs	r3, #1
 8001034:	21a6      	movs	r1, #166	; 0xa6
 8001036:	f005 f975 	bl	8006324 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_adxl_i2c, ADXL_ADDR << 1, &result, 1,
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <ADXL_ReadReg+0x40>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <ADXL_ReadReg+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	f107 020f 	add.w	r2, r7, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	21a6      	movs	r1, #166	; 0xa6
 800104c:	f005 fa68 	bl	8006520 <HAL_I2C_Master_Receive>
			_adxl_timeout);
	return result;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
	/*uint8_t result;
	 HAL_I2C_Mem_Read (_adxl_i2c, ADXL_ADDR<<1, reg, 1, (uint8_t *)result, 1, 100);
	 return result;*/
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000214 	.word	0x20000214
 8001060:	20000000 	.word	0x20000000

08001064 <ADXL_set_range>:
void ADXL_set_range(ADXLRANGE rng) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,
			(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0x3) | rng);
 800106e:	2031      	movs	r0, #49	; 0x31
 8001070:	f7ff ffd4 	bl	800101c <ADXL_ReadReg>
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4619      	mov	r1, r3
 8001078:	2031      	movs	r0, #49	; 0x31
 800107a:	f7ff ffaf 	bl	8000fdc <ADXL_WriteReg>
	_adxl_data->adxl345.scale = 2 * (1 << (7 - rng));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f1c3 0307 	rsb	r3, r3, #7
 8001084:	2202      	movs	r2, #2
 8001086:	409a      	lsls	r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <ADXL_set_range+0x34>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b292      	uxth	r2, r2
 800108e:	82da      	strh	r2, [r3, #22]
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000218 	.word	0x20000218

0800109c <ADXL_get_range>:

uint8_t ADXL_get_range() {
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) % 4;
 80010a0:	2031      	movs	r0, #49	; 0x31
 80010a2:	f7ff ffbb 	bl	800101c <ADXL_ReadReg>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <ADXL_set_rate>:

void ADXL_set_rate(ADXLBITRATE rate) {
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_BW_RATE,
			(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0b111) | rate);
 80010bc:	2031      	movs	r0, #49	; 0x31
 80010be:	f7ff ffad 	bl	800101c <ADXL_ReadReg>
	ADXL_WriteReg(ADXL345_REG_BW_RATE,
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	4619      	mov	r1, r3
 80010c6:	202c      	movs	r0, #44	; 0x2c
 80010c8:	f7ff ff88 	bl	8000fdc <ADXL_WriteReg>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <ADXL_power>:
	case HZ3200:
		return 3200;
	}
}

void ADXL_power(uint8_t pw) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	if (pw == 1) {
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10b      	bne.n	80010fc <ADXL_power+0x28>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL, ADXL_ReadReg(
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff ff99 	bl	800101c <ADXL_ReadReg>
 80010ea:	4603      	mov	r3, r0
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	202d      	movs	r0, #45	; 0x2d
 80010f6:	f7ff ff71 	bl	8000fdc <ADXL_WriteReg>
		ADXL345_REG_POWER_CTL) | ADXL345_BIT_PWR_REG_MEASURE);
	} else {
		ADXL_WriteReg(ADXL345_REG_POWER_CTL, ADXL_ReadReg(
		ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
	}
}
 80010fa:	e006      	b.n	800110a <ADXL_power+0x36>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL, ADXL_ReadReg(
 80010fc:	202d      	movs	r0, #45	; 0x2d
 80010fe:	f7ff ff8d 	bl	800101c <ADXL_ReadReg>
 8001102:	2100      	movs	r1, #0
 8001104:	202d      	movs	r0, #45	; 0x2d
 8001106:	f7ff ff69 	bl	8000fdc <ADXL_WriteReg>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ADXL_full_res>:
void ADXL_full_res(uint8_t res) {
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
	if (res == 1) {
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <ADXL_full_res+0x22>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,
 8001122:	2031      	movs	r0, #49	; 0x31
 8001124:	f7ff ff7a 	bl	800101c <ADXL_ReadReg>
 8001128:	4603      	mov	r3, r0
 800112a:	4619      	mov	r1, r3
 800112c:	2031      	movs	r0, #49	; 0x31
 800112e:	f7ff ff55 	bl	8000fdc <ADXL_WriteReg>
				ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) | ADXL345_BIT_FULL_RES_SET);
	} else {
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT, ADXL_ReadReg(
		ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
	}
}
 8001132:	e00a      	b.n	800114a <ADXL_full_res+0x38>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT, ADXL_ReadReg(
 8001134:	2031      	movs	r0, #49	; 0x31
 8001136:	f7ff ff71 	bl	800101c <ADXL_ReadReg>
 800113a:	4603      	mov	r3, r0
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	4619      	mov	r1, r3
 8001144:	2031      	movs	r0, #49	; 0x31
 8001146:	f7ff ff49 	bl	8000fdc <ADXL_WriteReg>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <ADXL_get_data>:

void ADXL_get_data() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af04      	add	r7, sp, #16
	uint8_t data_rec[6];
	HAL_I2C_Mem_Read(_adxl_i2c, ADXL_ADDR << 1, 0x32, 1, (uint8_t*) data_rec, 6,
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <ADXL_get_data+0x68>)
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <ADXL_get_data+0x6c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2306      	movs	r3, #6
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	463b      	mov	r3, r7
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	2232      	movs	r2, #50	; 0x32
 8001170:	21a6      	movs	r1, #166	; 0xa6
 8001172:	f005 fcf5 	bl	8006b60 <HAL_I2C_Mem_Read>
			_adxl_timeout);
	_adxl_data->adxl345.ax = ((data_rec[1] << 8) | data_rec[0]);
 8001176:	787b      	ldrb	r3, [r7, #1]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b219      	sxth	r1, r3
 800117c:	783b      	ldrb	r3, [r7, #0]
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <ADXL_get_data+0x70>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	b212      	sxth	r2, r2
 8001188:	821a      	strh	r2, [r3, #16]
	_adxl_data->adxl345.ay = ((data_rec[3] << 8) | data_rec[2]);
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b219      	sxth	r1, r3
 8001190:	78bb      	ldrb	r3, [r7, #2]
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <ADXL_get_data+0x70>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	b212      	sxth	r2, r2
 800119c:	825a      	strh	r2, [r3, #18]
	_adxl_data->adxl345.az = ((data_rec[5] << 8) | data_rec[4]);
 800119e:	797b      	ldrb	r3, [r7, #5]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b219      	sxth	r1, r3
 80011a4:	793b      	ldrb	r3, [r7, #4]
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <ADXL_get_data+0x70>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	b212      	sxth	r2, r2
 80011b0:	829a      	strh	r2, [r3, #20]
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000214 	.word	0x20000214
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000218 	.word	0x20000218

080011c8 <adxl_check_connection>:
uint8_t adxl_check_connection(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_DEVID) == 0xE5;
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff25 	bl	800101c <ADXL_ReadReg>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2be5      	cmp	r3, #229	; 0xe5
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <BMP180_init>:
		0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

BMP180_SETTINGS _calib_data;
BMP180_REGS _regs;

uint8_t BMP180_init(I2C_HandleTypeDef *i2c, readings *data) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	_bmp_i2c = i2c;
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <BMP180_init+0x44>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]
	_bmp_data = data;
 80011f4:	4a0d      	ldr	r2, [pc, #52]	; (800122c <BMP180_init+0x48>)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	6013      	str	r3, [r2, #0]
	log_s_wnl("BMP180 started---");
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <BMP180_init+0x4c>)
 80011fc:	f000 fbc6 	bl	800198c <log_s_wnl>
	if (BMP180_ReadReg(BMP180_GET_ID_REG) == BMP180_CHIP_ID) {
 8001200:	20d0      	movs	r0, #208	; 0xd0
 8001202:	f000 f83b 	bl	800127c <BMP180_ReadReg>
 8001206:	4603      	mov	r3, r0
 8001208:	2b55      	cmp	r3, #85	; 0x55
 800120a:	d104      	bne.n	8001216 <BMP180_init+0x32>
		log_s("ok");
 800120c:	4809      	ldr	r0, [pc, #36]	; (8001234 <BMP180_init+0x50>)
 800120e:	f000 fb9b 	bl	8001948 <log_s>
	} else {
		log_s("ERROR");
		return 1;
	}
	return 0;
 8001212:	2300      	movs	r3, #0
 8001214:	e003      	b.n	800121e <BMP180_init+0x3a>
		log_s("ERROR");
 8001216:	4808      	ldr	r0, [pc, #32]	; (8001238 <BMP180_init+0x54>)
 8001218:	f000 fb96 	bl	8001948 <log_s>
		return 1;
 800121c:	2301      	movs	r3, #1
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000021c 	.word	0x2000021c
 800122c:	20000220 	.word	0x20000220
 8001230:	08012d18 	.word	0x08012d18
 8001234:	08012d2c 	.word	0x08012d2c
 8001238:	08012d30 	.word	0x08012d30

0800123c <BMP180_WriteReg>:

void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	4603      	mov	r3, r0
 8001244:	460a      	mov	r2, r1
 8001246:	71fb      	strb	r3, [r7, #7]
 8001248:	4613      	mov	r3, r2
 800124a:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	733b      	strb	r3, [r7, #12]
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, arr, 2, _bmp_timeout);
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <BMP180_WriteReg+0x38>)
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <BMP180_WriteReg+0x3c>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	21ee      	movs	r1, #238	; 0xee
 8001266:	f005 f85d 	bl	8006324 <HAL_I2C_Master_Transmit>
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000021c 	.word	0x2000021c
 8001278:	20000001 	.word	0x20000001

0800127c <BMP180_ReadReg>:

uint8_t BMP180_ReadReg(uint8_t reg) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af02      	add	r7, sp, #8
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, &reg, 1, _bmp_timeout);
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <BMP180_ReadReg+0x40>)
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <BMP180_ReadReg+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	1dfa      	adds	r2, r7, #7
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	21ee      	movs	r1, #238	; 0xee
 8001296:	f005 f845 	bl	8006324 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp_i2c, BMP180_ADDR << 1, &result, 1,
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <BMP180_ReadReg+0x40>)
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <BMP180_ReadReg+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	f107 020f 	add.w	r2, r7, #15
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2301      	movs	r3, #1
 80012aa:	21ee      	movs	r1, #238	; 0xee
 80012ac:	f005 f938 	bl	8006520 <HAL_I2C_Master_Receive>
			_bmp_timeout);
	return result;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000021c 	.word	0x2000021c
 80012c0:	20000001 	.word	0x20000001

080012c4 <BMP180_set_oss>:

int16_t _raw_t;
uint32_t _raw_p;

uint8_t _oss = 0;
void BMP180_set_oss(uint8_t oss) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
	_oss = oss;
 80012ce:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <BMP180_set_oss+0x1c>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	7013      	strb	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000240 	.word	0x20000240

080012e4 <_oss_delay>:

void _oss_delay() {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if (_oss == 0) {
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <_oss_delay+0x48>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d103      	bne.n	80012f8 <_oss_delay+0x14>
		HAL_Delay(5);
 80012f0:	2005      	movs	r0, #5
 80012f2:	f004 fae5 	bl	80058c0 <HAL_Delay>
	} else if (_oss == 2) {
		HAL_Delay(14);
	} else if (_oss == 3) {
		HAL_Delay(26);
	}
}
 80012f6:	e016      	b.n	8001326 <_oss_delay+0x42>
	} else if (_oss == 1) {
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <_oss_delay+0x48>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d103      	bne.n	8001308 <_oss_delay+0x24>
		HAL_Delay(8);
 8001300:	2008      	movs	r0, #8
 8001302:	f004 fadd 	bl	80058c0 <HAL_Delay>
}
 8001306:	e00e      	b.n	8001326 <_oss_delay+0x42>
	} else if (_oss == 2) {
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <_oss_delay+0x48>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d103      	bne.n	8001318 <_oss_delay+0x34>
		HAL_Delay(14);
 8001310:	200e      	movs	r0, #14
 8001312:	f004 fad5 	bl	80058c0 <HAL_Delay>
}
 8001316:	e006      	b.n	8001326 <_oss_delay+0x42>
	} else if (_oss == 3) {
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <_oss_delay+0x48>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d102      	bne.n	8001326 <_oss_delay+0x42>
		HAL_Delay(26);
 8001320:	201a      	movs	r0, #26
 8001322:	f004 facd 	bl	80058c0 <HAL_Delay>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000240 	.word	0x20000240

08001330 <BMP180_get_calibration_coefficients>:

void BMP180_get_calibration_coefficients() {
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 8001336:	af0a      	add	r7, sp, #40	; 0x28
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8)
 8001338:	20aa      	movs	r0, #170	; 0xaa
 800133a:	f7ff ff9f 	bl	800127c <BMP180_ReadReg>
 800133e:	4603      	mov	r3, r0
 8001340:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC1_LSB);
 8001342:	b21c      	sxth	r4, r3
 8001344:	20ab      	movs	r0, #171	; 0xab
 8001346:	f7ff ff99 	bl	800127c <BMP180_ReadReg>
 800134a:	4603      	mov	r3, r0
 800134c:	b21b      	sxth	r3, r3
 800134e:	4323      	orrs	r3, r4
 8001350:	b21a      	sxth	r2, r3
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8)
 8001352:	4b70      	ldr	r3, [pc, #448]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001354:	801a      	strh	r2, [r3, #0]
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8)
 8001356:	20ac      	movs	r0, #172	; 0xac
 8001358:	f7ff ff90 	bl	800127c <BMP180_ReadReg>
 800135c:	4603      	mov	r3, r0
 800135e:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC2_LSB);
 8001360:	b21c      	sxth	r4, r3
 8001362:	20ad      	movs	r0, #173	; 0xad
 8001364:	f7ff ff8a 	bl	800127c <BMP180_ReadReg>
 8001368:	4603      	mov	r3, r0
 800136a:	b21b      	sxth	r3, r3
 800136c:	4323      	orrs	r3, r4
 800136e:	b21a      	sxth	r2, r3
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8)
 8001370:	4b68      	ldr	r3, [pc, #416]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001372:	805a      	strh	r2, [r3, #2]
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8)
 8001374:	20ae      	movs	r0, #174	; 0xae
 8001376:	f7ff ff81 	bl	800127c <BMP180_ReadReg>
 800137a:	4603      	mov	r3, r0
 800137c:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC3_LSB);
 800137e:	b21c      	sxth	r4, r3
 8001380:	20af      	movs	r0, #175	; 0xaf
 8001382:	f7ff ff7b 	bl	800127c <BMP180_ReadReg>
 8001386:	4603      	mov	r3, r0
 8001388:	b21b      	sxth	r3, r3
 800138a:	4323      	orrs	r3, r4
 800138c:	b21a      	sxth	r2, r3
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8)
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001390:	809a      	strh	r2, [r3, #4]
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8)
 8001392:	20b0      	movs	r0, #176	; 0xb0
 8001394:	f7ff ff72 	bl	800127c <BMP180_ReadReg>
 8001398:	4603      	mov	r3, r0
 800139a:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC4_LSB);
 800139c:	b21c      	sxth	r4, r3
 800139e:	20b1      	movs	r0, #177	; 0xb1
 80013a0:	f7ff ff6c 	bl	800127c <BMP180_ReadReg>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4323      	orrs	r3, r4
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b29a      	uxth	r2, r3
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8)
 80013ae:	4b59      	ldr	r3, [pc, #356]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80013b0:	80da      	strh	r2, [r3, #6]
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8)
 80013b2:	20b2      	movs	r0, #178	; 0xb2
 80013b4:	f7ff ff62 	bl	800127c <BMP180_ReadReg>
 80013b8:	4603      	mov	r3, r0
 80013ba:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC5_LSB);
 80013bc:	b21c      	sxth	r4, r3
 80013be:	20b3      	movs	r0, #179	; 0xb3
 80013c0:	f7ff ff5c 	bl	800127c <BMP180_ReadReg>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4323      	orrs	r3, r4
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	b29a      	uxth	r2, r3
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8)
 80013ce:	4b51      	ldr	r3, [pc, #324]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80013d0:	811a      	strh	r2, [r3, #8]
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8)
 80013d2:	20b4      	movs	r0, #180	; 0xb4
 80013d4:	f7ff ff52 	bl	800127c <BMP180_ReadReg>
 80013d8:	4603      	mov	r3, r0
 80013da:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_AC6_LSB);
 80013dc:	b21c      	sxth	r4, r3
 80013de:	20b5      	movs	r0, #181	; 0xb5
 80013e0:	f7ff ff4c 	bl	800127c <BMP180_ReadReg>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b21b      	sxth	r3, r3
 80013e8:	4323      	orrs	r3, r4
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	b29a      	uxth	r2, r3
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8)
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80013f0:	815a      	strh	r2, [r3, #10]
	_calib_data.B1 = (BMP180_ReadReg(BMP180_B1_MSB) << 8)
 80013f2:	20b6      	movs	r0, #182	; 0xb6
 80013f4:	f7ff ff42 	bl	800127c <BMP180_ReadReg>
 80013f8:	4603      	mov	r3, r0
 80013fa:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_B1_LSB);
 80013fc:	b21c      	sxth	r4, r3
 80013fe:	20b7      	movs	r0, #183	; 0xb7
 8001400:	f7ff ff3c 	bl	800127c <BMP180_ReadReg>
 8001404:	4603      	mov	r3, r0
 8001406:	b21b      	sxth	r3, r3
 8001408:	4323      	orrs	r3, r4
 800140a:	b21a      	sxth	r2, r3
	_calib_data.B1 = (BMP180_ReadReg(BMP180_B1_MSB) << 8)
 800140c:	4b41      	ldr	r3, [pc, #260]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800140e:	819a      	strh	r2, [r3, #12]
	_calib_data.B2 = (BMP180_ReadReg(BMP180_B2_MSB) << 8)
 8001410:	20b8      	movs	r0, #184	; 0xb8
 8001412:	f7ff ff33 	bl	800127c <BMP180_ReadReg>
 8001416:	4603      	mov	r3, r0
 8001418:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_B1_LSB);
 800141a:	b21c      	sxth	r4, r3
 800141c:	20b7      	movs	r0, #183	; 0xb7
 800141e:	f7ff ff2d 	bl	800127c <BMP180_ReadReg>
 8001422:	4603      	mov	r3, r0
 8001424:	b21b      	sxth	r3, r3
 8001426:	4323      	orrs	r3, r4
 8001428:	b21a      	sxth	r2, r3
	_calib_data.B2 = (BMP180_ReadReg(BMP180_B2_MSB) << 8)
 800142a:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800142c:	81da      	strh	r2, [r3, #14]
	_calib_data.MB = (BMP180_ReadReg(BMP180_MB_MSB) << 8)
 800142e:	20ba      	movs	r0, #186	; 0xba
 8001430:	f7ff ff24 	bl	800127c <BMP180_ReadReg>
 8001434:	4603      	mov	r3, r0
 8001436:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_MB_LSB);
 8001438:	b21c      	sxth	r4, r3
 800143a:	20bb      	movs	r0, #187	; 0xbb
 800143c:	f7ff ff1e 	bl	800127c <BMP180_ReadReg>
 8001440:	4603      	mov	r3, r0
 8001442:	b21b      	sxth	r3, r3
 8001444:	4323      	orrs	r3, r4
 8001446:	b21a      	sxth	r2, r3
	_calib_data.MB = (BMP180_ReadReg(BMP180_MB_MSB) << 8)
 8001448:	4b32      	ldr	r3, [pc, #200]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800144a:	821a      	strh	r2, [r3, #16]
	_calib_data.MC = (BMP180_ReadReg(BMP180_MC_MSB) << 8)
 800144c:	20bc      	movs	r0, #188	; 0xbc
 800144e:	f7ff ff15 	bl	800127c <BMP180_ReadReg>
 8001452:	4603      	mov	r3, r0
 8001454:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_MC_LSB);
 8001456:	b21c      	sxth	r4, r3
 8001458:	20bd      	movs	r0, #189	; 0xbd
 800145a:	f7ff ff0f 	bl	800127c <BMP180_ReadReg>
 800145e:	4603      	mov	r3, r0
 8001460:	b21b      	sxth	r3, r3
 8001462:	4323      	orrs	r3, r4
 8001464:	b21a      	sxth	r2, r3
	_calib_data.MC = (BMP180_ReadReg(BMP180_MC_MSB) << 8)
 8001466:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001468:	825a      	strh	r2, [r3, #18]
	_calib_data.MD = (BMP180_ReadReg(BMP180_MD_MSB) << 8)
 800146a:	20be      	movs	r0, #190	; 0xbe
 800146c:	f7ff ff06 	bl	800127c <BMP180_ReadReg>
 8001470:	4603      	mov	r3, r0
 8001472:	021b      	lsls	r3, r3, #8
			| BMP180_ReadReg(BMP180_MD_LSB);
 8001474:	b21c      	sxth	r4, r3
 8001476:	20bf      	movs	r0, #191	; 0xbf
 8001478:	f7ff ff00 	bl	800127c <BMP180_ReadReg>
 800147c:	4603      	mov	r3, r0
 800147e:	b21b      	sxth	r3, r3
 8001480:	4323      	orrs	r3, r4
 8001482:	b21a      	sxth	r2, r3
	_calib_data.MD = (BMP180_ReadReg(BMP180_MD_MSB) << 8)
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001486:	829a      	strh	r2, [r3, #20]
	char *test[200];
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800148a:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 800148e:	469c      	mov	ip, r3
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 8001492:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 8001496:	469e      	mov	lr, r3
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 800149a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 800149e:	461a      	mov	r2, r3
			_calib_data.AC1, _calib_data.AC2, _calib_data.AC3, _calib_data.AC4,
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014a2:	88db      	ldrh	r3, [r3, #6]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014a4:	4619      	mov	r1, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014a8:	891b      	ldrh	r3, [r3, #8]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014aa:	461c      	mov	r4, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014ae:	895b      	ldrh	r3, [r3, #10]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014b0:	461d      	mov	r5, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014b8:	461e      	mov	r6, r3
			_calib_data.AC5, _calib_data.AC6, _calib_data.B1, _calib_data.B1,
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014c0:	60fb      	str	r3, [r7, #12]
			_calib_data.MB, _calib_data.MC, _calib_data.MD);
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014c4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014c8:	60bb      	str	r3, [r7, #8]
			_calib_data.MB, _calib_data.MC, _calib_data.MD);
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014d0:	607b      	str	r3, [r7, #4]
			_calib_data.MB, _calib_data.MC, _calib_data.MD);
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <BMP180_get_calibration_coefficients+0x1e4>)
 80014d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	sprintf((char*) test, "Calib coef:%d %d %d %d %d %d %d %d %d %d %d",
 80014d8:	f107 0010 	add.w	r0, r7, #16
 80014dc:	9308      	str	r3, [sp, #32]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	9307      	str	r3, [sp, #28]
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	9306      	str	r3, [sp, #24]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	9305      	str	r3, [sp, #20]
 80014ea:	9604      	str	r6, [sp, #16]
 80014ec:	9503      	str	r5, [sp, #12]
 80014ee:	9402      	str	r4, [sp, #8]
 80014f0:	9101      	str	r1, [sp, #4]
 80014f2:	9200      	str	r2, [sp, #0]
 80014f4:	4673      	mov	r3, lr
 80014f6:	4662      	mov	r2, ip
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <BMP180_get_calibration_coefficients+0x1e8>)
 80014fa:	f00d fd6b 	bl	800efd4 <siprintf>
	log_s(test);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fa20 	bl	8001948 <log_s>
}
 8001508:	bf00      	nop
 800150a:	f507 774d 	add.w	r7, r7, #820	; 0x334
 800150e:	46bd      	mov	sp, r7
 8001510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001512:	bf00      	nop
 8001514:	20000224 	.word	0x20000224
 8001518:	08012d38 	.word	0x08012d38

0800151c <BMP180_get_data>:
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP); //measure
	HAL_Delay(5);  //wait
	return (BMP180_ReadReg(BMP180_MSB) << 8) | BMP180_ReadReg(BMP180_LSB); //read
}

void BMP180_get_data() {
 800151c:	b598      	push	{r3, r4, r7, lr}
 800151e:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, 0x2E); //measure
 8001520:	212e      	movs	r1, #46	; 0x2e
 8001522:	20f4      	movs	r0, #244	; 0xf4
 8001524:	f7ff fe8a 	bl	800123c <BMP180_WriteReg>
	HAL_Delay(5);  //wait
 8001528:	2005      	movs	r0, #5
 800152a:	f004 f9c9 	bl	80058c0 <HAL_Delay>
	_raw_t = (BMP180_ReadReg(BMP180_MSB) << 8) | BMP180_ReadReg(BMP180_LSB); //read
 800152e:	20f6      	movs	r0, #246	; 0xf6
 8001530:	f7ff fea4 	bl	800127c <BMP180_ReadReg>
 8001534:	4603      	mov	r3, r0
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21c      	sxth	r4, r3
 800153a:	20f7      	movs	r0, #247	; 0xf7
 800153c:	f7ff fe9e 	bl	800127c <BMP180_ReadReg>
 8001540:	4603      	mov	r3, r0
 8001542:	b21b      	sxth	r3, r3
 8001544:	4323      	orrs	r3, r4
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <BMP180_get_data+0x80>)
 800154a:	801a      	strh	r2, [r3, #0]

	BMP180_WriteReg(0xF4, 0x34 + (_oss << 6));
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <BMP180_get_data+0x84>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	019b      	lsls	r3, r3, #6
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3334      	adds	r3, #52	; 0x34
 8001556:	b2db      	uxtb	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	20f4      	movs	r0, #244	; 0xf4
 800155c:	f7ff fe6e 	bl	800123c <BMP180_WriteReg>
	_oss_delay();
 8001560:	f7ff fec0 	bl	80012e4 <_oss_delay>
	_raw_p = ((BMP180_ReadReg(BMP180_MSB) << 16)
 8001564:	20f6      	movs	r0, #246	; 0xf6
 8001566:	f7ff fe89 	bl	800127c <BMP180_ReadReg>
 800156a:	4603      	mov	r3, r0
 800156c:	041c      	lsls	r4, r3, #16
			| (BMP180_ReadReg(BMP180_LSB) << 8)
 800156e:	20f7      	movs	r0, #247	; 0xf7
 8001570:	f7ff fe84 	bl	800127c <BMP180_ReadReg>
 8001574:	4603      	mov	r3, r0
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	431c      	orrs	r4, r3
			| BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _oss);
 800157a:	20f8      	movs	r0, #248	; 0xf8
 800157c:	f7ff fe7e 	bl	800127c <BMP180_ReadReg>
 8001580:	4603      	mov	r3, r0
 8001582:	ea44 0203 	orr.w	r2, r4, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <BMP180_get_data+0x84>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	f1c3 0308 	rsb	r3, r3, #8
 800158e:	fa42 f303 	asr.w	r3, r2, r3
 8001592:	461a      	mov	r2, r3
	_raw_p = ((BMP180_ReadReg(BMP180_MSB) << 16)
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <BMP180_get_data+0x88>)
 8001596:	601a      	str	r2, [r3, #0]
}
 8001598:	bf00      	nop
 800159a:	bd98      	pop	{r3, r4, r7, pc}
 800159c:	2000023a 	.word	0x2000023a
 80015a0:	20000240 	.word	0x20000240
 80015a4:	2000023c 	.word	0x2000023c

080015a8 <BMP180_Press>:

uint32_t BMP180_Press() {
 80015a8:	b480      	push	{r7}
 80015aa:	b08b      	sub	sp, #44	; 0x2c
 80015ac:	af00      	add	r7, sp, #0
	int32_t x1 = (_raw_t - _calib_data.AC6) * _calib_data.AC5 / (1 << 15);
 80015ae:	4b72      	ldr	r3, [pc, #456]	; (8001778 <BMP180_Press+0x1d0>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <BMP180_Press+0x1d4>)
 80015b8:	895b      	ldrh	r3, [r3, #10]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	4a6f      	ldr	r2, [pc, #444]	; (800177c <BMP180_Press+0x1d4>)
 80015be:	8912      	ldrh	r2, [r2, #8]
 80015c0:	fb02 f303 	mul.w	r3, r2, r3
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da02      	bge.n	80015ce <BMP180_Press+0x26>
 80015c8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 80015cc:	337f      	adds	r3, #127	; 0x7f
 80015ce:	13db      	asrs	r3, r3, #15
 80015d0:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_calib_data.MC * (1 << 11)) / (x1 + _calib_data.MD);
 80015d2:	4b6a      	ldr	r3, [pc, #424]	; (800177c <BMP180_Press+0x1d4>)
 80015d4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015d8:	02da      	lsls	r2, r3, #11
 80015da:	4b68      	ldr	r3, [pc, #416]	; (800177c <BMP180_Press+0x1d4>)
 80015dc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80015e0:	4619      	mov	r1, r3
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	440b      	add	r3, r1
 80015e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ea:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	4413      	add	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80015fa:	617b      	str	r3, [r7, #20]
	x1 = (_calib_data.B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 80015fc:	4b5f      	ldr	r3, [pc, #380]	; (800177c <BMP180_Press+0x1d4>)
 80015fe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001602:	461a      	mov	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fb03 f303 	mul.w	r3, r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	da01      	bge.n	8001612 <BMP180_Press+0x6a>
 800160e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001612:	131b      	asrs	r3, r3, #12
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	da01      	bge.n	8001620 <BMP180_Press+0x78>
 800161c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8001620:	12db      	asrs	r3, r3, #11
 8001622:	623b      	str	r3, [r7, #32]
	x2 = _calib_data.AC2 * b6 / (1 << 11);
 8001624:	4b55      	ldr	r3, [pc, #340]	; (800177c <BMP180_Press+0x1d4>)
 8001626:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800162a:	461a      	mov	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	da01      	bge.n	800163a <BMP180_Press+0x92>
 8001636:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800163a:	12db      	asrs	r3, r3, #11
 800163c:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 800163e:	6a3a      	ldr	r2, [r7, #32]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_calib_data.AC1 * 4 + x3) << _oss) + 2) / 4;
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <BMP180_Press+0x1d4>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	009a      	lsls	r2, r3, #2
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4413      	add	r3, r2
 8001652:	4a4b      	ldr	r2, [pc, #300]	; (8001780 <BMP180_Press+0x1d8>)
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	4093      	lsls	r3, r2
 8001658:	3302      	adds	r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	da00      	bge.n	8001660 <BMP180_Press+0xb8>
 800165e:	3303      	adds	r3, #3
 8001660:	109b      	asrs	r3, r3, #2
 8001662:	60fb      	str	r3, [r7, #12]
	x1 = _calib_data.AC3 * b6 / (1 << 13);
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <BMP180_Press+0x1d4>)
 8001666:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fb02 f303 	mul.w	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	da02      	bge.n	800167c <BMP180_Press+0xd4>
 8001676:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800167a:	331f      	adds	r3, #31
 800167c:	135b      	asrs	r3, r3, #13
 800167e:	623b      	str	r3, [r7, #32]
	x2 = (_calib_data.B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <BMP180_Press+0x1d4>)
 8001682:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001686:	461a      	mov	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fb03 f303 	mul.w	r3, r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	da01      	bge.n	8001696 <BMP180_Press+0xee>
 8001692:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001696:	131b      	asrs	r3, r3, #12
 8001698:	fb02 f303 	mul.w	r3, r2, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	da02      	bge.n	80016a6 <BMP180_Press+0xfe>
 80016a0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016a4:	33ff      	adds	r3, #255	; 0xff
 80016a6:	141b      	asrs	r3, r3, #16
 80016a8:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 80016aa:	6a3a      	ldr	r2, [r7, #32]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	3302      	adds	r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da00      	bge.n	80016b8 <BMP180_Press+0x110>
 80016b6:	3303      	adds	r3, #3
 80016b8:	109b      	asrs	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _calib_data.AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 80016bc:	4b2f      	ldr	r3, [pc, #188]	; (800177c <BMP180_Press+0x1d4>)
 80016be:	88db      	ldrh	r3, [r3, #6]
 80016c0:	461a      	mov	r2, r3
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	0bdb      	lsrs	r3, r3, #15
 80016ce:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) _raw_p - b3) * (50000 >> _oss);
 80016d0:	4b2c      	ldr	r3, [pc, #176]	; (8001784 <BMP180_Press+0x1dc>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <BMP180_Press+0x1d8>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	4611      	mov	r1, r2
 80016de:	f24c 3250 	movw	r2, #50000	; 0xc350
 80016e2:	410a      	asrs	r2, r1
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db06      	blt.n	80016fe <BMP180_Press+0x156>
		p = (b7 * 2) / b4;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	005a      	lsls	r2, r3, #1
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
 80016fc:	e005      	b.n	800170a <BMP180_Press+0x162>
	else
		p = (b7 / b4) * 2;
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	fbb2 f3f3 	udiv	r3, r2, r3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	2b00      	cmp	r3, #0
 800170e:	da00      	bge.n	8001712 <BMP180_Press+0x16a>
 8001710:	33ff      	adds	r3, #255	; 0xff
 8001712:	121b      	asrs	r3, r3, #8
 8001714:	461a      	mov	r2, r3
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	da00      	bge.n	800171e <BMP180_Press+0x176>
 800171c:	33ff      	adds	r3, #255	; 0xff
 800171e:	121b      	asrs	r3, r3, #8
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	f640 32de 	movw	r2, #3038	; 0xbde
 800172c:	fb02 f303 	mul.w	r3, r2, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	da02      	bge.n	800173a <BMP180_Press+0x192>
 8001734:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001738:	33ff      	adds	r3, #255	; 0xff
 800173a:	141b      	asrs	r3, r3, #16
 800173c:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <BMP180_Press+0x1e0>)
 8001742:	fb02 f303 	mul.w	r3, r2, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	da02      	bge.n	8001750 <BMP180_Press+0x1a8>
 800174a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800174e:	33ff      	adds	r3, #255	; 0xff
 8001750:	141b      	asrs	r3, r3, #16
 8001752:	61fb      	str	r3, [r7, #28]
	return (uint32_t) (p + (x1 + x2 + 3791) / (1 << 4));
 8001754:	6a3a      	ldr	r2, [r7, #32]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800175e:	2b00      	cmp	r3, #0
 8001760:	da00      	bge.n	8001764 <BMP180_Press+0x1bc>
 8001762:	330f      	adds	r3, #15
 8001764:	111b      	asrs	r3, r3, #4
 8001766:	461a      	mov	r2, r3
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	4413      	add	r3, r2
}
 800176c:	4618      	mov	r0, r3
 800176e:	372c      	adds	r7, #44	; 0x2c
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	2000023a 	.word	0x2000023a
 800177c:	20000224 	.word	0x20000224
 8001780:	20000240 	.word	0x20000240
 8001784:	2000023c 	.word	0x2000023c
 8001788:	ffffe343 	.word	0xffffe343
 800178c:	00000000 	.word	0x00000000

08001790 <BMP180_calcAlt>:
double BMP180_calcAlt(uint32_t press) {
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	return 8.31 * (273 + ((double) _bmp_data->bmp180.temp) / 10)
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <BMP180_calcAlt+0xe0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fec8 	bl	8000534 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <BMP180_calcAlt+0xe4>)
 80017aa:	f7ff f857 	bl	800085c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	a324      	add	r3, pc, #144	; (adr r3, 8001848 <BMP180_calcAlt+0xb8>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe fd6e 	bl	800029c <__adddf3>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	a321      	add	r3, pc, #132	; (adr r3, 8001850 <BMP180_calcAlt+0xc0>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff1b 	bl	8000608 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4614      	mov	r4, r2
 80017d8:	461d      	mov	r5, r3
			* log(101325 / (double) press) / 0.029 / 9.81;
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fe9a 	bl	8000514 <__aeabi_ui2d>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	a11c      	add	r1, pc, #112	; (adr r1, 8001858 <BMP180_calcAlt+0xc8>)
 80017e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ea:	f7ff f837 	bl	800085c <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ec43 2b17 	vmov	d7, r2, r3
 80017f6:	eeb0 0a47 	vmov.f32	s0, s14
 80017fa:	eef0 0a67 	vmov.f32	s1, s15
 80017fe:	f00f fe63 	bl	80114c8 <log>
 8001802:	ec53 2b10 	vmov	r2, r3, d0
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fefd 	bl	8000608 <__aeabi_dmul>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	a312      	add	r3, pc, #72	; (adr r3, 8001860 <BMP180_calcAlt+0xd0>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7ff f81e 	bl	800085c <__aeabi_ddiv>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	a30f      	add	r3, pc, #60	; (adr r3, 8001868 <BMP180_calcAlt+0xd8>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7ff f815 	bl	800085c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	ec43 2b17 	vmov	d7, r2, r3
}
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}
 8001848:	00000000 	.word	0x00000000
 800184c:	40711000 	.word	0x40711000
 8001850:	51eb851f 	.word	0x51eb851f
 8001854:	40209eb8 	.word	0x40209eb8
 8001858:	00000000 	.word	0x00000000
 800185c:	40f8bcd0 	.word	0x40f8bcd0
 8001860:	0e560419 	.word	0x0e560419
 8001864:	3f9db22d 	.word	0x3f9db22d
 8001868:	51eb851f 	.word	0x51eb851f
 800186c:	40239eb8 	.word	0x40239eb8
 8001870:	20000220 	.word	0x20000220
 8001874:	40240000 	.word	0x40240000

08001878 <BMP180_Temp>:
int32_t BMP180_Temp() {
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
	int32_t x1 = (_raw_t - _calib_data.AC6) * _calib_data.AC5 / (1 << 15);
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <BMP180_Temp+0x64>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	461a      	mov	r2, r3
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <BMP180_Temp+0x68>)
 8001888:	895b      	ldrh	r3, [r3, #10]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <BMP180_Temp+0x68>)
 800188e:	8912      	ldrh	r2, [r2, #8]
 8001890:	fb02 f303 	mul.w	r3, r2, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	da02      	bge.n	800189e <BMP180_Temp+0x26>
 8001898:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800189c:	337f      	adds	r3, #127	; 0x7f
 800189e:	13db      	asrs	r3, r3, #15
 80018a0:	60fb      	str	r3, [r7, #12]
	int32_t x2 = (_calib_data.MC * (1 << 11)) / (x1 + _calib_data.MD);
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <BMP180_Temp+0x68>)
 80018a4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80018a8:	02da      	lsls	r2, r3, #11
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <BMP180_Temp+0x68>)
 80018ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018b0:	4619      	mov	r1, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	440b      	add	r3, r1
 80018b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ba:	60bb      	str	r3, [r7, #8]
	int32_t b5 = x1 + x2;
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	4413      	add	r3, r2
 80018c2:	607b      	str	r3, [r7, #4]
	return (b5 + 8) / (1 << 4);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3308      	adds	r3, #8
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <BMP180_Temp+0x56>
 80018cc:	330f      	adds	r3, #15
 80018ce:	111b      	asrs	r3, r3, #4
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	2000023a 	.word	0x2000023a
 80018e0:	20000224 	.word	0x20000224

080018e4 <BMP180_upd_data>:

void BMP180_upd_data() {
 80018e4:	b598      	push	{r3, r4, r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	BMP180_get_data();
 80018e8:	f7ff fe18 	bl	800151c <BMP180_get_data>
	//log_s_int("press",BMP180_Press());
	_bmp_data->bmp180.pressure = BMP180_Press();
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <BMP180_upd_data+0x40>)
 80018ee:	681c      	ldr	r4, [r3, #0]
 80018f0:	f7ff fe5a 	bl	80015a8 <BMP180_Press>
 80018f4:	4603      	mov	r3, r0
 80018f6:	6023      	str	r3, [r4, #0]
	_bmp_data->bmp180.temp = BMP180_Temp();
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <BMP180_upd_data+0x40>)
 80018fa:	681c      	ldr	r4, [r3, #0]
 80018fc:	f7ff ffbc 	bl	8001878 <BMP180_Temp>
 8001900:	4603      	mov	r3, r0
 8001902:	6063      	str	r3, [r4, #4]
	_bmp_data->bmp180.height = BMP180_calcAlt(BMP180_Press());
 8001904:	f7ff fe50 	bl	80015a8 <BMP180_Press>
 8001908:	4603      	mov	r3, r0
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <BMP180_upd_data+0x40>)
 800190c:	6814      	ldr	r4, [r2, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff3e 	bl	8001790 <BMP180_calcAlt>
 8001914:	eeb0 7a40 	vmov.f32	s14, s0
 8001918:	eef0 7a60 	vmov.f32	s15, s1
 800191c:	ed84 7b02 	vstr	d7, [r4, #8]
}
 8001920:	bf00      	nop
 8001922:	bd98      	pop	{r3, r4, r7, pc}
 8001924:	20000220 	.word	0x20000220

08001928 <debug_init>:
#include "debug.h"
#include <stdio.h>
UART_HandleTypeDef *_dbg_uart;

void debug_init(UART_HandleTypeDef *uart) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	_dbg_uart = uart;
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <debug_init+0x1c>)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6013      	str	r3, [r2, #0]
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000244 	.word	0x20000244

08001948 <log_s>:

void log_s(const char *str) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart, (uint8_t*) str, strlen(str), 1000);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <log_s+0x3c>)
 8001952:	681c      	ldr	r4, [r3, #0]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7fe fc43 	bl	80001e0 <strlen>
 800195a:	4603      	mov	r3, r0
 800195c:	b29a      	uxth	r2, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	4620      	mov	r0, r4
 8001966:	f008 fffc 	bl	800a962 <HAL_UART_Transmit>
	HAL_UART_Transmit(_dbg_uart, (uint8_t*) "\r\n", 2, 1000);
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <log_s+0x3c>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	2202      	movs	r2, #2
 8001974:	4904      	ldr	r1, [pc, #16]	; (8001988 <log_s+0x40>)
 8001976:	f008 fff4 	bl	800a962 <HAL_UART_Transmit>
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}
 8001982:	bf00      	nop
 8001984:	20000244 	.word	0x20000244
 8001988:	08012d64 	.word	0x08012d64

0800198c <log_s_wnl>:

void log_s_wnl(const char *str) {
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart, (uint8_t*) str, strlen(str), 1000);
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <log_s_wnl+0x2c>)
 8001996:	681c      	ldr	r4, [r3, #0]
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7fe fc21 	bl	80001e0 <strlen>
 800199e:	4603      	mov	r3, r0
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4620      	mov	r0, r4
 80019aa:	f008 ffda 	bl	800a962 <HAL_UART_Transmit>
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000244 	.word	0x20000244

080019bc <log_s_int>:
char *char_log[50];
void log_s_int(const char *str, int32_t i) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	sprintf((char*) char_log, "%s %ld\r\n", str, i);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4905      	ldr	r1, [pc, #20]	; (80019e0 <log_s_int+0x24>)
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <log_s_int+0x28>)
 80019ce:	f00d fb01 	bl	800efd4 <siprintf>
	log_s_wnl((const char*) char_log);
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <log_s_int+0x28>)
 80019d4:	f7ff ffda 	bl	800198c <log_s_wnl>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08012d68 	.word	0x08012d68
 80019e4:	20000248 	.word	0x20000248

080019e8 <log_s_p_3>:
void log_p(int16_t *data_p) {
	sprintf((char*) char_log, "%p\r\n", data_p);
	log_s_wnl((const char*) char_log);
}
void log_s_p_3(const char *str, int16_t *data_p0, int16_t *data_p1,
		int16_t *data_p2) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
	sprintf((char*) char_log, "%s %p %p %p", str, data_p0, data_p1, data_p2);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	4905      	ldr	r1, [pc, #20]	; (8001a18 <log_s_p_3+0x30>)
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <log_s_p_3+0x34>)
 8001a06:	f00d fae5 	bl	800efd4 <siprintf>
	log_s((const char*) char_log);
 8001a0a:	4804      	ldr	r0, [pc, #16]	; (8001a1c <log_s_p_3+0x34>)
 8001a0c:	f7ff ff9c 	bl	8001948 <log_s>
}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	08012d84 	.word	0x08012d84
 8001a1c:	20000248 	.word	0x20000248

08001a20 <log_s_p>:
void log_s_p(const char *str, int16_t *data_p0) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	sprintf((char*) char_log, "%s %p", str, data_p0);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4905      	ldr	r1, [pc, #20]	; (8001a44 <log_s_p+0x24>)
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <log_s_p+0x28>)
 8001a32:	f00d facf 	bl	800efd4 <siprintf>
	log_s((const char*) char_log);
 8001a36:	4804      	ldr	r0, [pc, #16]	; (8001a48 <log_s_p+0x28>)
 8001a38:	f7ff ff86 	bl	8001948 <log_s>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	08012d90 	.word	0x08012d90
 8001a48:	20000248 	.word	0x20000248

08001a4c <GY801_init>:
#include "gy801.h"
#include <stdio.h>
#include <math.h>
readings *_data_gy;

uint8_t GY801_init(I2C_HandleTypeDef *i2c, readings *data) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
	//_i2c=i2c;
	_data_gy = data;
 8001a56:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <GY801_init+0xbc>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6013      	str	r3, [r2, #0]
	uint8_t ret = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
	ret |= ADXL_init(i2c, data);
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff fa7a 	bl	8000f5c <ADXL_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <GY801_init+0x30>
		return ret;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e040      	b.n	8001afe <GY801_init+0xb2>
	ADXL_set_range(RANGE_16G);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f7ff faf1 	bl	8001064 <ADXL_set_range>
	ADXL_full_res(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff fb45 	bl	8001112 <ADXL_full_res>
	ADXL_set_rate(HZ800);
 8001a88:	200d      	movs	r0, #13
 8001a8a:	f7ff fb12 	bl	80010b2 <ADXL_set_rate>
	ADXL_power(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fb20 	bl	80010d4 <ADXL_power>
	ret |= BMP180_init(i2c, data);
 8001a94:	6839      	ldr	r1, [r7, #0]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fba4 	bl	80011e4 <BMP180_init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	b25a      	sxtb	r2, r3
 8001aa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	b25b      	sxtb	r3, r3
 8001aa8:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <GY801_init+0x68>
		return ret;
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	e024      	b.n	8001afe <GY801_init+0xb2>
	BMP180_set_oss(0);
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f7ff fc05 	bl	80012c4 <BMP180_set_oss>
	BMP180_get_calibration_coefficients();
 8001aba:	f7ff fc39 	bl	8001330 <BMP180_get_calibration_coefficients>
	ret |= GYRO_init(i2c, data);
 8001abe:	6839      	ldr	r1, [r7, #0]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f95d 	bl	8001d80 <GYRO_init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <GY801_init+0x8e>
		return ret;
 8001ad6:	7bfb      	ldrb	r3, [r7, #15]
 8001ad8:	e011      	b.n	8001afe <GY801_init+0xb2>
	GYRO_power(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f000 f9cc 	bl	8001e78 <GYRO_power>
	ret |= mag_init(i2c, data);
 8001ae0:	6839      	ldr	r1, [r7, #0]
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fa12 	bl	8001f0c <mag_init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	73fb      	strb	r3, [r7, #15]
	if (ret)
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <GY801_init+0xb0>
		return ret;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	e000      	b.n	8001afe <GY801_init+0xb2>
	return ret;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000310 	.word	0x20000310

08001b0c <med>:
int16_t axfilt[3], ayfilt[3], azfilt[3];
int16_t gxfilt[3], gyfilt[3], gzfilt[3];
int16_t temp[3];
int16_t med(uint8_t mode, int16_t new_val) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	80bb      	strh	r3, [r7, #4]
	switch (mode) {
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d83e      	bhi.n	8001ba0 <med+0x94>
 8001b22:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <med+0x1c>)
 8001b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b28:	08001b41 	.word	0x08001b41
 8001b2c:	08001b51 	.word	0x08001b51
 8001b30:	08001b61 	.word	0x08001b61
 8001b34:	08001b71 	.word	0x08001b71
 8001b38:	08001b81 	.word	0x08001b81
 8001b3c:	08001b91 	.word	0x08001b91
	case 0:
		memcpy(&temp, axfilt, sizeof(axfilt));
 8001b40:	4b5d      	ldr	r3, [pc, #372]	; (8001cb8 <med+0x1ac>)
 8001b42:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <med+0x1b0>)
 8001b44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b48:	6018      	str	r0, [r3, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	8019      	strh	r1, [r3, #0]
		break;
 8001b4e:	e027      	b.n	8001ba0 <med+0x94>
	case 1:
		memcpy(&temp, ayfilt, sizeof(ayfilt));
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <med+0x1ac>)
 8001b52:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <med+0x1b4>)
 8001b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b58:	6018      	str	r0, [r3, #0]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	8019      	strh	r1, [r3, #0]
		break;
 8001b5e:	e01f      	b.n	8001ba0 <med+0x94>
	case 2:
		memcpy(&temp, azfilt, sizeof(azfilt));
 8001b60:	4b55      	ldr	r3, [pc, #340]	; (8001cb8 <med+0x1ac>)
 8001b62:	4a58      	ldr	r2, [pc, #352]	; (8001cc4 <med+0x1b8>)
 8001b64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b68:	6018      	str	r0, [r3, #0]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	8019      	strh	r1, [r3, #0]
		break;
 8001b6e:	e017      	b.n	8001ba0 <med+0x94>
	case 3:
		memcpy(&temp, gxfilt, sizeof(gxfilt));
 8001b70:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <med+0x1ac>)
 8001b72:	4a55      	ldr	r2, [pc, #340]	; (8001cc8 <med+0x1bc>)
 8001b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b78:	6018      	str	r0, [r3, #0]
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	8019      	strh	r1, [r3, #0]
		break;
 8001b7e:	e00f      	b.n	8001ba0 <med+0x94>
	case 4:
		memcpy(&temp, gyfilt, sizeof(gyfilt));
 8001b80:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <med+0x1ac>)
 8001b82:	4a52      	ldr	r2, [pc, #328]	; (8001ccc <med+0x1c0>)
 8001b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b88:	6018      	str	r0, [r3, #0]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	8019      	strh	r1, [r3, #0]
		break;
 8001b8e:	e007      	b.n	8001ba0 <med+0x94>
	case 5:
		memcpy(&temp, gzfilt, sizeof(gzfilt));
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <med+0x1ac>)
 8001b92:	4a4f      	ldr	r2, [pc, #316]	; (8001cd0 <med+0x1c4>)
 8001b94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b98:	6018      	str	r0, [r3, #0]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	8019      	strh	r1, [r3, #0]
		break;
 8001b9e:	bf00      	nop
	}
	temp[0] = temp[1];
 8001ba0:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <med+0x1ac>)
 8001ba2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <med+0x1ac>)
 8001ba8:	801a      	strh	r2, [r3, #0]
	temp[1] = temp[2];
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <med+0x1ac>)
 8001bac:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <med+0x1ac>)
 8001bb2:	805a      	strh	r2, [r3, #2]
	temp[2] = new_val;
 8001bb4:	4a40      	ldr	r2, [pc, #256]	; (8001cb8 <med+0x1ac>)
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	8093      	strh	r3, [r2, #4]
	switch (mode) {
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d83f      	bhi.n	8001c40 <med+0x134>
 8001bc0:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <med+0xbc>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001be1 	.word	0x08001be1
 8001bcc:	08001bf1 	.word	0x08001bf1
 8001bd0:	08001c01 	.word	0x08001c01
 8001bd4:	08001c11 	.word	0x08001c11
 8001bd8:	08001c21 	.word	0x08001c21
 8001bdc:	08001c31 	.word	0x08001c31
	case 0:
		memcpy(&axfilt, temp, sizeof(temp));
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <med+0x1b0>)
 8001be2:	4a35      	ldr	r2, [pc, #212]	; (8001cb8 <med+0x1ac>)
 8001be4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001be8:	6018      	str	r0, [r3, #0]
 8001bea:	3304      	adds	r3, #4
 8001bec:	8019      	strh	r1, [r3, #0]
		break;
 8001bee:	e027      	b.n	8001c40 <med+0x134>
	case 1:
		memcpy(&ayfilt, temp, sizeof(temp));
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <med+0x1b4>)
 8001bf2:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <med+0x1ac>)
 8001bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bf8:	6018      	str	r0, [r3, #0]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	8019      	strh	r1, [r3, #0]
		break;
 8001bfe:	e01f      	b.n	8001c40 <med+0x134>
	case 2:
		memcpy(&azfilt, temp, sizeof(temp));
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <med+0x1b8>)
 8001c02:	4a2d      	ldr	r2, [pc, #180]	; (8001cb8 <med+0x1ac>)
 8001c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c08:	6018      	str	r0, [r3, #0]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	8019      	strh	r1, [r3, #0]
		break;
 8001c0e:	e017      	b.n	8001c40 <med+0x134>
	case 3:
		memcpy(&gxfilt, temp, sizeof(temp));
 8001c10:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <med+0x1bc>)
 8001c12:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <med+0x1ac>)
 8001c14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c18:	6018      	str	r0, [r3, #0]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	8019      	strh	r1, [r3, #0]
		break;
 8001c1e:	e00f      	b.n	8001c40 <med+0x134>
	case 4:
		memcpy(&gyfilt, temp, sizeof(temp));
 8001c20:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <med+0x1c0>)
 8001c22:	4a25      	ldr	r2, [pc, #148]	; (8001cb8 <med+0x1ac>)
 8001c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c28:	6018      	str	r0, [r3, #0]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	8019      	strh	r1, [r3, #0]
		break;
 8001c2e:	e007      	b.n	8001c40 <med+0x134>
	case 5:
		memcpy(&gzfilt, temp, sizeof(temp));
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <med+0x1c4>)
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <med+0x1ac>)
 8001c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c38:	6018      	str	r0, [r3, #0]
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	8019      	strh	r1, [r3, #0]
		break;
 8001c3e:	bf00      	nop
	}
	return (temp[0] < temp[1]) ?
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <med+0x1ac>)
 8001c42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <med+0x1ac>)
 8001c48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
			((temp[1] < temp[2]) ?
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	da16      	bge.n	8001c7e <med+0x172>
			((temp[1] < temp[2]) ?
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <med+0x1ac>)
 8001c52:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <med+0x1ac>)
 8001c58:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	da03      	bge.n	8001c68 <med+0x15c>
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <med+0x1ac>)
 8001c62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c66:	e020      	b.n	8001caa <med+0x19e>
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <med+0x1ac>)
 8001c6a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <med+0x1ac>)
 8001c70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	bfb8      	it	lt
 8001c78:	4613      	movlt	r3, r2
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	e015      	b.n	8001caa <med+0x19e>
			((temp[0] < temp[2]) ?
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <med+0x1ac>)
 8001c80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <med+0x1ac>)
 8001c86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	da03      	bge.n	8001c96 <med+0x18a>
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <med+0x1ac>)
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	e009      	b.n	8001caa <med+0x19e>
					temp[0] : ((temp[2] < temp[1]) ? temp[1] : temp[2]));
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <med+0x1ac>)
 8001c98:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <med+0x1ac>)
 8001c9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					temp[1] : ((temp[2] < temp[0]) ? temp[0] : temp[2])) :
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	bfb8      	it	lt
 8001ca6:	4613      	movlt	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000344 	.word	0x20000344
 8001cbc:	20000314 	.word	0x20000314
 8001cc0:	2000031c 	.word	0x2000031c
 8001cc4:	20000324 	.word	0x20000324
 8001cc8:	2000032c 	.word	0x2000032c
 8001ccc:	20000334 	.word	0x20000334
 8001cd0:	2000033c 	.word	0x2000033c

08001cd4 <GY801_update_data>:

void GY801_update_data() {
 8001cd4:	b598      	push	{r3, r4, r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	//BMP180_upd_data();
	ADXL_get_data();
 8001cd8:	f7ff fa3c 	bl	8001154 <ADXL_get_data>
	GYRO_get_data();
 8001cdc:	f000 f8e0 	bl	8001ea0 <GYRO_get_data>
	//mag_get_data();
	lsm303dlhc_get_acc();
 8001ce0:	f000 f9b4 	bl	800204c <lsm303dlhc_get_acc>
	lsm303dlhc_get_mag();
 8001ce4:	f000 f9f0 	bl	80020c8 <lsm303dlhc_get_mag>
	_data_gy->adxl345.ax = med(0, _data_gy->adxl345.ax);
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <GY801_update_data+0xa8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cf0:	4a22      	ldr	r2, [pc, #136]	; (8001d7c <GY801_update_data+0xa8>)
 8001cf2:	6814      	ldr	r4, [r2, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff ff08 	bl	8001b0c <med>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	8223      	strh	r3, [r4, #16]
	_data_gy->adxl345.ay = med(1, _data_gy->adxl345.ay);
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <GY801_update_data+0xa8>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <GY801_update_data+0xa8>)
 8001d0a:	6814      	ldr	r4, [r2, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff fefc 	bl	8001b0c <med>
 8001d14:	4603      	mov	r3, r0
 8001d16:	8263      	strh	r3, [r4, #18]
	_data_gy->adxl345.az = med(2, _data_gy->adxl345.az);
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <GY801_update_data+0xa8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <GY801_update_data+0xa8>)
 8001d22:	6814      	ldr	r4, [r2, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	2002      	movs	r0, #2
 8001d28:	f7ff fef0 	bl	8001b0c <med>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	82a3      	strh	r3, [r4, #20]
	_data_gy->l3g4200d.gx=med(3, _data_gy->l3g4200d.gx);
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <GY801_update_data+0xa8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001d38:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <GY801_update_data+0xa8>)
 8001d3a:	6814      	ldr	r4, [r2, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f7ff fee4 	bl	8001b0c <med>
 8001d44:	4603      	mov	r3, r0
 8001d46:	8423      	strh	r3, [r4, #32]
	_data_gy->l3g4200d.gy=med(4, _data_gy->l3g4200d.gy);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <GY801_update_data+0xa8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <GY801_update_data+0xa8>)
 8001d52:	6814      	ldr	r4, [r2, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	2004      	movs	r0, #4
 8001d58:	f7ff fed8 	bl	8001b0c <med>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	8463      	strh	r3, [r4, #34]	; 0x22
	_data_gy->l3g4200d.gz=med(5, _data_gy->l3g4200d.gz);
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <GY801_update_data+0xa8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <GY801_update_data+0xa8>)
 8001d6a:	6814      	ldr	r4, [r2, #0]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2005      	movs	r0, #5
 8001d70:	f7ff fecc 	bl	8001b0c <med>
 8001d74:	4603      	mov	r3, r0
 8001d76:	84a3      	strh	r3, [r4, #36]	; 0x24
	 //sprintf((char*)gy_data,"X:%06d Y:%06d Z:%06d",_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	 //sprintf((char*)gy_data,"%ld;%ld;%ld.%ld;%d;%d;%d;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),_data_gy->bmp180.pressure,_data_gy->bmp180.temp/10,_data_gy->bmp180.temp%10,_data_gy->adxl345.ax,_data_gy->adxl345.ay,_data_gy->adxl345.az,(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	 sprintf((char*)gy_data,"%ld;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx*0.1388,_data_gy->lsm303dlhc_mag.my*0.1388,_data_gy->lsm303dlhc_mag.mz*0.1388);
	 log_s((char*)gy_data);*/

}
 8001d78:	bf00      	nop
 8001d7a:	bd98      	pop	{r3, r4, r7, pc}
 8001d7c:	20000310 	.word	0x20000310

08001d80 <GYRO_init>:
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_gyro_i2c;
readings *_gyro_data;
uint8_t _gyro_timeout = 10;
uint8_t GYRO_init(I2C_HandleTypeDef *i2c, readings *data) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	_gyro_i2c = i2c;
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <GYRO_init+0x5c>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6013      	str	r3, [r2, #0]
	_gyro_data = data;
 8001d90:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <GYRO_init+0x60>)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6013      	str	r3, [r2, #0]
	log_s_wnl("L3G4200D started---");
 8001d96:	4813      	ldr	r0, [pc, #76]	; (8001de4 <GYRO_init+0x64>)
 8001d98:	f7ff fdf8 	bl	800198c <log_s_wnl>
	if (GYRO_ReadReg(GYRO_REG_DEVID) == 211) {
 8001d9c:	200f      	movs	r0, #15
 8001d9e:	f000 f847 	bl	8001e30 <GYRO_ReadReg>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2bd3      	cmp	r3, #211	; 0xd3
 8001da6:	d110      	bne.n	8001dca <GYRO_init+0x4a>
		log_s("ok");
 8001da8:	480f      	ldr	r0, [pc, #60]	; (8001de8 <GYRO_init+0x68>)
 8001daa:	f7ff fdcd 	bl	8001948 <log_s>
	} else {
		log_s("ERROR");
		return 1;
	}
	GYRO_WriteReg(GYRO_REG_CTRL_REG1, 0b11111111);
 8001dae:	21ff      	movs	r1, #255	; 0xff
 8001db0:	2020      	movs	r0, #32
 8001db2:	f000 f81d 	bl	8001df0 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG2, 0b0010000);
 8001db6:	2110      	movs	r1, #16
 8001db8:	2021      	movs	r0, #33	; 0x21
 8001dba:	f000 f819 	bl	8001df0 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG4, 0b00110000);
 8001dbe:	2130      	movs	r1, #48	; 0x30
 8001dc0:	2023      	movs	r0, #35	; 0x23
 8001dc2:	f000 f815 	bl	8001df0 <GYRO_WriteReg>
	return 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	e003      	b.n	8001dd2 <GYRO_init+0x52>
		log_s("ERROR");
 8001dca:	4808      	ldr	r0, [pc, #32]	; (8001dec <GYRO_init+0x6c>)
 8001dcc:	f7ff fdbc 	bl	8001948 <log_s>
		return 1;
 8001dd0:	2301      	movs	r3, #1
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000034c 	.word	0x2000034c
 8001de0:	20000350 	.word	0x20000350
 8001de4:	08012db0 	.word	0x08012db0
 8001de8:	08012dc4 	.word	0x08012dc4
 8001dec:	08012dc8 	.word	0x08012dc8

08001df0 <GYRO_WriteReg>:

void GYRO_WriteReg(uint8_t reg, uint8_t cmd) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	4603      	mov	r3, r0
 8001df8:	460a      	mov	r2, r1
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	733b      	strb	r3, [r7, #12]
 8001e04:	79bb      	ldrb	r3, [r7, #6]
 8001e06:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR << 1, arr, 2, _gyro_timeout);
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <GYRO_WriteReg+0x38>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <GYRO_WriteReg+0x3c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	f107 020c 	add.w	r2, r7, #12
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2302      	movs	r3, #2
 8001e18:	21d2      	movs	r1, #210	; 0xd2
 8001e1a:	f004 fa83 	bl	8006324 <HAL_I2C_Master_Transmit>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	2000034c 	.word	0x2000034c
 8001e2c:	20000002 	.word	0x20000002

08001e30 <GYRO_ReadReg>:

uint8_t GYRO_ReadReg(uint8_t reg) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR << 1, &reg, 1, _gyro_timeout);
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <GYRO_ReadReg+0x40>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <GYRO_ReadReg+0x44>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	1dfa      	adds	r2, r7, #7
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2301      	movs	r3, #1
 8001e48:	21d2      	movs	r1, #210	; 0xd2
 8001e4a:	f004 fa6b 	bl	8006324 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_gyro_i2c, GYRO_ADDR << 1, &result, 1,
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <GYRO_ReadReg+0x40>)
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <GYRO_ReadReg+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f107 020f 	add.w	r2, r7, #15
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	21d2      	movs	r1, #210	; 0xd2
 8001e60:	f004 fb5e 	bl	8006520 <HAL_I2C_Master_Receive>
			_gyro_timeout);
	return result;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000034c 	.word	0x2000034c
 8001e74:	20000002 	.word	0x20000002

08001e78 <GYRO_power>:

void GYRO_power(uint8_t pwr) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	GYRO_WriteReg(GYRO_REG_CTRL_REG1, pwr ? 0x0F : 0x00);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <GYRO_power+0x14>
 8001e88:	230f      	movs	r3, #15
 8001e8a:	e000      	b.n	8001e8e <GYRO_power+0x16>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	2020      	movs	r0, #32
 8001e92:	f7ff ffad 	bl	8001df0 <GYRO_WriteReg>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <GYRO_get_data>:

void GYRO_get_data() {
 8001ea0:	b598      	push	{r3, r4, r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
	_gyro_data->l3g4200d.gx = ((GYRO_ReadReg(0x29) << 8) | GYRO_ReadReg(0x28));
 8001ea4:	2029      	movs	r0, #41	; 0x29
 8001ea6:	f7ff ffc3 	bl	8001e30 <GYRO_ReadReg>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	b21c      	sxth	r4, r3
 8001eb0:	2028      	movs	r0, #40	; 0x28
 8001eb2:	f7ff ffbd 	bl	8001e30 <GYRO_ReadReg>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <GYRO_get_data+0x68>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4322      	orrs	r2, r4
 8001ec0:	b212      	sxth	r2, r2
 8001ec2:	841a      	strh	r2, [r3, #32]
	_gyro_data->l3g4200d.gy = ((GYRO_ReadReg(0x2B) << 8) | GYRO_ReadReg(0x2A));
 8001ec4:	202b      	movs	r0, #43	; 0x2b
 8001ec6:	f7ff ffb3 	bl	8001e30 <GYRO_ReadReg>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b21c      	sxth	r4, r3
 8001ed0:	202a      	movs	r0, #42	; 0x2a
 8001ed2:	f7ff ffad 	bl	8001e30 <GYRO_ReadReg>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <GYRO_get_data+0x68>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4322      	orrs	r2, r4
 8001ee0:	b212      	sxth	r2, r2
 8001ee2:	845a      	strh	r2, [r3, #34]	; 0x22
	_gyro_data->l3g4200d.gz = ((GYRO_ReadReg(0x2D) << 8) | GYRO_ReadReg(0x2C));
 8001ee4:	202d      	movs	r0, #45	; 0x2d
 8001ee6:	f7ff ffa3 	bl	8001e30 <GYRO_ReadReg>
 8001eea:	4603      	mov	r3, r0
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	b21c      	sxth	r4, r3
 8001ef0:	202c      	movs	r0, #44	; 0x2c
 8001ef2:	f7ff ff9d 	bl	8001e30 <GYRO_ReadReg>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <GYRO_get_data+0x68>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4322      	orrs	r2, r4
 8001f00:	b212      	sxth	r2, r2
 8001f02:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001f04:	bf00      	nop
 8001f06:	bd98      	pop	{r3, r4, r7, pc}
 8001f08:	20000350 	.word	0x20000350

08001f0c <mag_init>:
#include "lsm303dlhc.h"
I2C_HandleTypeDef *_mag_i2c;
readings *_mag_data;
uint8_t _mag_timeout = 10;
uint8_t mag_init(I2C_HandleTypeDef *i2c, readings *data) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	_mag_i2c = i2c;
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <mag_init+0x80>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6013      	str	r3, [r2, #0]
	_mag_data = data;
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <mag_init+0x84>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6013      	str	r3, [r2, #0]
	log_s_wnl("LSM303DLHC started---");
 8001f22:	481c      	ldr	r0, [pc, #112]	; (8001f94 <mag_init+0x88>)
 8001f24:	f7ff fd32 	bl	800198c <log_s_wnl>
	if (mag_read_data(1, LSM303DLHC_REG_WHOAMI) == 0x33) {
 8001f28:	210f      	movs	r1, #15
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f000 f838 	bl	8001fa0 <mag_read_data>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b33      	cmp	r3, #51	; 0x33
 8001f34:	d122      	bne.n	8001f7c <mag_init+0x70>
		log_s("ok");
 8001f36:	4818      	ldr	r0, [pc, #96]	; (8001f98 <mag_init+0x8c>)
 8001f38:	f7ff fd06 	bl	8001948 <log_s>
		log_s("ERROR");
		return 1;
		return;
	}
	/* accel config */
	mag_write_data(1, LSM303DLHC_REG_CTRL_REG1_A, 0b01110111);
 8001f3c:	2277      	movs	r2, #119	; 0x77
 8001f3e:	2120      	movs	r1, #32
 8001f40:	2001      	movs	r0, #1
 8001f42:	f000 f85d 	bl	8002000 <mag_write_data>
	mag_write_data(1, LSM303DLHC_REG_CTRL_REG2_A, 0b10010000);
 8001f46:	2290      	movs	r2, #144	; 0x90
 8001f48:	2121      	movs	r1, #33	; 0x21
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f000 f858 	bl	8002000 <mag_write_data>
	mag_write_data(1, LSM303DLHC_REG_CTRL_REG4_A, 0b00111000);
 8001f50:	2238      	movs	r2, #56	; 0x38
 8001f52:	2123      	movs	r1, #35	; 0x23
 8001f54:	2001      	movs	r0, #1
 8001f56:	f000 f853 	bl	8002000 <mag_write_data>
	/* mag config */
	mag_write_data(0, LSM303DLHC_REG_CRA_REG_M, 0b00011100);
 8001f5a:	221c      	movs	r2, #28
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f000 f84e 	bl	8002000 <mag_write_data>
	mag_write_data(0, LSM303DLHC_REG_CRB_REG_M, 0b10000000);
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	2101      	movs	r1, #1
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 f849 	bl	8002000 <mag_write_data>
	mag_write_data(0, LSM303DLHC_REG_MR_REG_M, 0b00000000);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2102      	movs	r1, #2
 8001f72:	2000      	movs	r0, #0
 8001f74:	f000 f844 	bl	8002000 <mag_write_data>
	return 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e003      	b.n	8001f84 <mag_init+0x78>
		log_s("ERROR");
 8001f7c:	4807      	ldr	r0, [pc, #28]	; (8001f9c <mag_init+0x90>)
 8001f7e:	f7ff fce3 	bl	8001948 <log_s>
		return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	20000354 	.word	0x20000354
 8001f90:	20000358 	.word	0x20000358
 8001f94:	08012dd0 	.word	0x08012dd0
 8001f98:	08012de8 	.word	0x08012de8
 8001f9c:	08012dec 	.word	0x08012dec

08001fa0 <mag_read_data>:

uint8_t mag_read_data(uint8_t type, uint8_t reg) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af04      	add	r7, sp, #16
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460a      	mov	r2, r1
 8001faa:	71fb      	strb	r3, [r7, #7]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71bb      	strb	r3, [r7, #6]
	//log_s_int("addr",((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1);
	uint8_t result;
	HAL_I2C_Mem_Read(_mag_i2c,
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <mag_read_data+0x58>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <mag_read_data+0x1e>
 8001fba:	2232      	movs	r2, #50	; 0x32
 8001fbc:	e000      	b.n	8001fc0 <mag_read_data+0x20>
 8001fbe:	223c      	movs	r2, #60	; 0x3c
			(((type) ? LSM303DLHC_ACCEL_ADDR : LSM303DLHC_MAG_ADDR) << 1)
					+ !type, reg, I2C_MEMADD_SIZE_8BIT, &result, 1,
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf0c      	ite	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	2300      	movne	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	b29b      	uxth	r3, r3
	HAL_I2C_Mem_Read(_mag_i2c,
 8001fce:	4413      	add	r3, r2
 8001fd0:	b299      	uxth	r1, r3
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <mag_read_data+0x5c>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	9302      	str	r3, [sp, #8]
 8001fdc:	2301      	movs	r3, #1
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	f107 030f 	add.w	r3, r7, #15
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f004 fdba 	bl	8006b60 <HAL_I2C_Mem_Read>
			_mag_timeout);
	return result;
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000354 	.word	0x20000354
 8001ffc:	20000003 	.word	0x20000003

08002000 <mag_write_data>:
void mag_write_data(uint8_t type, uint8_t reg, uint8_t cmd) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af04      	add	r7, sp, #16
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
 800200a:	460b      	mov	r3, r1
 800200c:	71bb      	strb	r3, [r7, #6]
 800200e:	4613      	mov	r3, r2
 8002010:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(_mag_i2c,
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <mag_write_data+0x44>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <mag_write_data+0x20>
 800201c:	2132      	movs	r1, #50	; 0x32
 800201e:	e000      	b.n	8002022 <mag_write_data+0x22>
 8002020:	213c      	movs	r1, #60	; 0x3c
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	b29a      	uxth	r2, r3
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <mag_write_data+0x48>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	2301      	movs	r3, #1
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	1d7b      	adds	r3, r7, #5
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	f004 fc99 	bl	800696c <HAL_I2C_Mem_Write>
			((type) ? LSM303DLHC_ACCEL_ADDR : LSM303DLHC_MAG_ADDR) << 1,
			(uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &cmd, 1, _mag_timeout);
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000354 	.word	0x20000354
 8002048:	20000003 	.word	0x20000003

0800204c <lsm303dlhc_get_acc>:

void lsm303dlhc_get_acc() {
 800204c:	b598      	push	{r3, r4, r7, lr}
 800204e:	af00      	add	r7, sp, #0
	_mag_data->lsm303dlhc.ax =
			((mag_read_data(1, LSM303DLHC_REG_OUT_X_H_A) << 8)
 8002050:	2129      	movs	r1, #41	; 0x29
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff ffa4 	bl	8001fa0 <mag_read_data>
 8002058:	4603      	mov	r3, r0
 800205a:	021b      	lsls	r3, r3, #8
					| mag_read_data(1, LSM303DLHC_REG_OUT_X_L_A));
 800205c:	b21c      	sxth	r4, r3
 800205e:	2128      	movs	r1, #40	; 0x28
 8002060:	2001      	movs	r0, #1
 8002062:	f7ff ff9d 	bl	8001fa0 <mag_read_data>
 8002066:	4603      	mov	r3, r0
 8002068:	b21a      	sxth	r2, r3
	_mag_data->lsm303dlhc.ax =
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <lsm303dlhc_get_acc+0x74>)
 800206c:	681b      	ldr	r3, [r3, #0]
					| mag_read_data(1, LSM303DLHC_REG_OUT_X_L_A));
 800206e:	4322      	orrs	r2, r4
 8002070:	b212      	sxth	r2, r2
	_mag_data->lsm303dlhc.ax =
 8002072:	831a      	strh	r2, [r3, #24]
	_mag_data->lsm303dlhc.ay =
			((mag_read_data(1, LSM303DLHC_REG_OUT_Y_H_A) << 8)
 8002074:	212b      	movs	r1, #43	; 0x2b
 8002076:	2001      	movs	r0, #1
 8002078:	f7ff ff92 	bl	8001fa0 <mag_read_data>
 800207c:	4603      	mov	r3, r0
 800207e:	021b      	lsls	r3, r3, #8
					| mag_read_data(1, LSM303DLHC_REG_OUT_Y_L_A));
 8002080:	b21c      	sxth	r4, r3
 8002082:	212a      	movs	r1, #42	; 0x2a
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff ff8b 	bl	8001fa0 <mag_read_data>
 800208a:	4603      	mov	r3, r0
 800208c:	b21a      	sxth	r2, r3
	_mag_data->lsm303dlhc.ay =
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <lsm303dlhc_get_acc+0x74>)
 8002090:	681b      	ldr	r3, [r3, #0]
					| mag_read_data(1, LSM303DLHC_REG_OUT_Y_L_A));
 8002092:	4322      	orrs	r2, r4
 8002094:	b212      	sxth	r2, r2
	_mag_data->lsm303dlhc.ay =
 8002096:	835a      	strh	r2, [r3, #26]
	_mag_data->lsm303dlhc.az =
			((mag_read_data(1, LSM303DLHC_REG_OUT_Z_H_A) << 8)
 8002098:	212d      	movs	r1, #45	; 0x2d
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff ff80 	bl	8001fa0 <mag_read_data>
 80020a0:	4603      	mov	r3, r0
 80020a2:	021b      	lsls	r3, r3, #8
					| mag_read_data(1, LSM303DLHC_REG_OUT_Z_L_A));
 80020a4:	b21c      	sxth	r4, r3
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7ff ff79 	bl	8001fa0 <mag_read_data>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b21a      	sxth	r2, r3
	_mag_data->lsm303dlhc.az =
 80020b2:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <lsm303dlhc_get_acc+0x74>)
 80020b4:	681b      	ldr	r3, [r3, #0]
					| mag_read_data(1, LSM303DLHC_REG_OUT_Z_L_A));
 80020b6:	4322      	orrs	r2, r4
 80020b8:	b212      	sxth	r2, r2
	_mag_data->lsm303dlhc.az =
 80020ba:	839a      	strh	r2, [r3, #28]
}
 80020bc:	bf00      	nop
 80020be:	bd98      	pop	{r3, r4, r7, pc}
 80020c0:	20000358 	.word	0x20000358
 80020c4:	00000000 	.word	0x00000000

080020c8 <lsm303dlhc_get_mag>:
void lsm303dlhc_get_mag() {
 80020c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020cc:	af00      	add	r7, sp, #0
	_mag_data->lsm303dlhc_mag.mx_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 80020ce:	2103      	movs	r1, #3
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ff65 	bl	8001fa0 <mag_read_data>
 80020d6:	4603      	mov	r3, r0
 80020d8:	b29b      	uxth	r3, r3
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b29c      	uxth	r4, r3
			LSM303DLHC_REG_OUT_X_H_M) << 8)
			| mag_read_data(0, LSM303DLHC_REG_OUT_X_L_M));
 80020de:	2104      	movs	r1, #4
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff ff5d 	bl	8001fa0 <mag_read_data>
 80020e6:	4603      	mov	r3, r0
 80020e8:	b29b      	uxth	r3, r3
	_mag_data->lsm303dlhc_mag.mx_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 80020ea:	4323      	orrs	r3, r4
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4bb2      	ldr	r3, [pc, #712]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b212      	sxth	r2, r2
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
	_mag_data->lsm303dlhc_mag.my_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 80020f6:	2107      	movs	r1, #7
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7ff ff51 	bl	8001fa0 <mag_read_data>
 80020fe:	4603      	mov	r3, r0
 8002100:	b29b      	uxth	r3, r3
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b29c      	uxth	r4, r3
			LSM303DLHC_REG_OUT_Y_H_M) << 8)
			| mag_read_data(0, LSM303DLHC_REG_OUT_Y_L_M));
 8002106:	2108      	movs	r1, #8
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff ff49 	bl	8001fa0 <mag_read_data>
 800210e:	4603      	mov	r3, r0
 8002110:	b29b      	uxth	r3, r3
	_mag_data->lsm303dlhc_mag.my_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 8002112:	4323      	orrs	r3, r4
 8002114:	b29a      	uxth	r2, r3
 8002116:	4ba8      	ldr	r3, [pc, #672]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b212      	sxth	r2, r2
 800211c:	855a      	strh	r2, [r3, #42]	; 0x2a
	_mag_data->lsm303dlhc_mag.mz_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 800211e:	2105      	movs	r1, #5
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff ff3d 	bl	8001fa0 <mag_read_data>
 8002126:	4603      	mov	r3, r0
 8002128:	b29b      	uxth	r3, r3
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	b29c      	uxth	r4, r3
			LSM303DLHC_REG_OUT_Z_H_M) << 8)
			| mag_read_data(0, LSM303DLHC_REG_OUT_Z_L_M));
 800212e:	2106      	movs	r1, #6
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff ff35 	bl	8001fa0 <mag_read_data>
 8002136:	4603      	mov	r3, r0
 8002138:	b29b      	uxth	r3, r3
	_mag_data->lsm303dlhc_mag.mz_raw = (uint16_t) ((uint16_t) (mag_read_data(0,
 800213a:	4323      	orrs	r3, r4
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b212      	sxth	r2, r2
 8002144:	859a      	strh	r2, [r3, #44]	; 0x2c
	// magneto calibration
	_mag_data->lsm303dlhc_mag.mx = 4.383713
			* (_mag_data->lsm303dlhc_mag.mx_raw + 43.206892)
 8002146:	4b9c      	ldr	r3, [pc, #624]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f9f0 	bl	8000534 <__aeabi_i2d>
 8002154:	a384      	add	r3, pc, #528	; (adr r3, 8002368 <lsm303dlhc_get_mag+0x2a0>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe f89f 	bl	800029c <__adddf3>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	a382      	add	r3, pc, #520	; (adr r3, 8002370 <lsm303dlhc_get_mag+0x2a8>)
 8002168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216c:	f7fe fa4c 	bl	8000608 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4614      	mov	r4, r2
 8002176:	461d      	mov	r5, r3
			+ 0.021545 * (_mag_data->lsm303dlhc_mag.my_raw + -25.655564)
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9d7 	bl	8000534 <__aeabi_i2d>
 8002186:	a37c      	add	r3, pc, #496	; (adr r3, 8002378 <lsm303dlhc_get_mag+0x2b0>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe f884 	bl	8000298 <__aeabi_dsub>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	a379      	add	r3, pc, #484	; (adr r3, 8002380 <lsm303dlhc_get_mag+0x2b8>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe fa33 	bl	8000608 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fe f877 	bl	800029c <__adddf3>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4690      	mov	r8, r2
 80021b4:	4699      	mov	r9, r3
			+ -0.077899 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 80021b6:	4b80      	ldr	r3, [pc, #512]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9b8 	bl	8000534 <__aeabi_i2d>
 80021c4:	a370      	add	r3, pc, #448	; (adr r3, 8002388 <lsm303dlhc_get_mag+0x2c0>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe f865 	bl	8000298 <__aeabi_dsub>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	a36e      	add	r3, pc, #440	; (adr r3, 8002390 <lsm303dlhc_get_mag+0x2c8>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fa14 	bl	8000608 <__aeabi_dmul>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mx = 4.383713
 80021e4:	4974      	ldr	r1, [pc, #464]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 80021e6:	680c      	ldr	r4, [r1, #0]
			+ -0.077899 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 80021e8:	4640      	mov	r0, r8
 80021ea:	4649      	mov	r1, r9
 80021ec:	f7fe f856 	bl	800029c <__adddf3>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mx = 4.383713
 80021f4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	_mag_data->lsm303dlhc_mag.my = 0.021545
			* (_mag_data->lsm303dlhc_mag.mx_raw + 43.206892)
 80021f8:	4b6f      	ldr	r3, [pc, #444]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe f997 	bl	8000534 <__aeabi_i2d>
 8002206:	a358      	add	r3, pc, #352	; (adr r3, 8002368 <lsm303dlhc_get_mag+0x2a0>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f846 	bl	800029c <__adddf3>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	a359      	add	r3, pc, #356	; (adr r3, 8002380 <lsm303dlhc_get_mag+0x2b8>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fe f9f3 	bl	8000608 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4614      	mov	r4, r2
 8002228:	461d      	mov	r5, r3
			+ 4.431516 * (_mag_data->lsm303dlhc_mag.my_raw + -25.655564)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f97e 	bl	8000534 <__aeabi_i2d>
 8002238:	a34f      	add	r3, pc, #316	; (adr r3, 8002378 <lsm303dlhc_get_mag+0x2b0>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f82b 	bl	8000298 <__aeabi_dsub>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4610      	mov	r0, r2
 8002248:	4619      	mov	r1, r3
 800224a:	a353      	add	r3, pc, #332	; (adr r3, 8002398 <lsm303dlhc_get_mag+0x2d0>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f9da 	bl	8000608 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4620      	mov	r0, r4
 800225a:	4629      	mov	r1, r5
 800225c:	f7fe f81e 	bl	800029c <__adddf3>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4690      	mov	r8, r2
 8002266:	4699      	mov	r9, r3
			+ 0.225705 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f95f 	bl	8000534 <__aeabi_i2d>
 8002276:	a344      	add	r3, pc, #272	; (adr r3, 8002388 <lsm303dlhc_get_mag+0x2c0>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f80c 	bl	8000298 <__aeabi_dsub>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	a345      	add	r3, pc, #276	; (adr r3, 80023a0 <lsm303dlhc_get_mag+0x2d8>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f9bb 	bl	8000608 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.my = 0.021545
 8002296:	4948      	ldr	r1, [pc, #288]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 8002298:	680c      	ldr	r4, [r1, #0]
			+ 0.225705 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 800229a:	4640      	mov	r0, r8
 800229c:	4649      	mov	r1, r9
 800229e:	f7fd fffd 	bl	800029c <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.my = 0.021545
 80022a6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	_mag_data->lsm303dlhc_mag.mz = -0.077899
			* (_mag_data->lsm303dlhc_mag.mx_raw + 43.206892)
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f93e 	bl	8000534 <__aeabi_i2d>
 80022b8:	a32b      	add	r3, pc, #172	; (adr r3, 8002368 <lsm303dlhc_get_mag+0x2a0>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fd ffed 	bl	800029c <__adddf3>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	a331      	add	r3, pc, #196	; (adr r3, 8002390 <lsm303dlhc_get_mag+0x2c8>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f99a 	bl	8000608 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	461d      	mov	r5, r3
			+ 0.066753 * (_mag_data->lsm303dlhc_mag.my_raw + -25.655564)
 80022dc:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f925 	bl	8000534 <__aeabi_i2d>
 80022ea:	a323      	add	r3, pc, #140	; (adr r3, 8002378 <lsm303dlhc_get_mag+0x2b0>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fd ffd2 	bl	8000298 <__aeabi_dsub>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	a32a      	add	r3, pc, #168	; (adr r3, 80023a8 <lsm303dlhc_get_mag+0x2e0>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f7fe f981 	bl	8000608 <__aeabi_dmul>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fd ffc5 	bl	800029c <__adddf3>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4690      	mov	r8, r2
 8002318:	4699      	mov	r9, r3
			+ 5.335236 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 800231a:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f906 	bl	8000534 <__aeabi_i2d>
 8002328:	a317      	add	r3, pc, #92	; (adr r3, 8002388 <lsm303dlhc_get_mag+0x2c0>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fd ffb3 	bl	8000298 <__aeabi_dsub>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	a31d      	add	r3, pc, #116	; (adr r3, 80023b0 <lsm303dlhc_get_mag+0x2e8>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f962 	bl	8000608 <__aeabi_dmul>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mz = -0.077899
 8002348:	491b      	ldr	r1, [pc, #108]	; (80023b8 <lsm303dlhc_get_mag+0x2f0>)
 800234a:	680c      	ldr	r4, [r1, #0]
			+ 5.335236 * (_mag_data->lsm303dlhc_mag.mz_raw + -0.569458);
 800234c:	4640      	mov	r0, r8
 800234e:	4649      	mov	r1, r9
 8002350:	f7fd ffa4 	bl	800029c <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
	_mag_data->lsm303dlhc_mag.mz = -0.077899
 8002358:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
}
 800235c:	bf00      	nop
 800235e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	6fe2e6eb 	.word	0x6fe2e6eb
 800236c:	40459a7b 	.word	0x40459a7b
 8002370:	0f883340 	.word	0x0f883340
 8002374:	401188ec 	.word	0x401188ec
 8002378:	0ad46f58 	.word	0x0ad46f58
 800237c:	4039a7d3 	.word	0x4039a7d3
 8002380:	7991bc56 	.word	0x7991bc56
 8002384:	3f960fe4 	.word	0x3f960fe4
 8002388:	fbce4218 	.word	0xfbce4218
 800238c:	3fe238ff 	.word	0x3fe238ff
 8002390:	59641f64 	.word	0x59641f64
 8002394:	bfb3f130 	.word	0xbfb3f130
 8002398:	548ecd8e 	.word	0x548ecd8e
 800239c:	4011b9df 	.word	0x4011b9df
 80023a0:	c4c5974e 	.word	0xc4c5974e
 80023a4:	3fcce3e6 	.word	0x3fcce3e6
 80023a8:	7fe8ee6c 	.word	0x7fe8ee6c
 80023ac:	3fb116b9 	.word	0x3fb116b9
 80023b0:	1b21c476 	.word	0x1b21c476
 80023b4:	40155748 	.word	0x40155748
 80023b8:	20000358 	.word	0x20000358

080023bc <mahony_print_ptr>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

void mahony_print_ptr() {
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	log_s_p_3("AHRS", &roll, &pitch, &yaw);
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <mahony_print_ptr+0x14>)
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <mahony_print_ptr+0x18>)
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <mahony_print_ptr+0x1c>)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <mahony_print_ptr+0x20>)
 80023c8:	f7ff fb0e 	bl	80019e8 <log_s_p_3>
}
 80023cc:	bf00      	nop
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000380 	.word	0x20000380
 80023d4:	2000037c 	.word	0x2000037c
 80023d8:	20000378 	.word	0x20000378
 80023dc:	08012df4 	.word	0x08012df4

080023e0 <mahony_update>:

void mahony_update(float invSampleFreq, float gx, float gy, float gz, float ax,
		float ay, float az, float mx, float my, float mz) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0a6      	sub	sp, #152	; 0x98
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80023ea:	edc7 0a08 	vstr	s1, [r7, #32]
 80023ee:	ed87 1a07 	vstr	s2, [r7, #28]
 80023f2:	edc7 1a06 	vstr	s3, [r7, #24]
 80023f6:	ed87 2a05 	vstr	s4, [r7, #20]
 80023fa:	edc7 2a04 	vstr	s5, [r7, #16]
 80023fe:	ed87 3a03 	vstr	s6, [r7, #12]
 8002402:	edc7 3a02 	vstr	s7, [r7, #8]
 8002406:	ed87 4a01 	vstr	s8, [r7, #4]
 800240a:	edc7 4a00 	vstr	s9, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid
	// (avoids NaN in magnetometer normalisation)
	if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800240e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002412:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241a:	d11c      	bne.n	8002456 <mahony_update+0x76>
 800241c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002428:	d115      	bne.n	8002456 <mahony_update+0x76>
 800242a:	edd7 7a00 	vldr	s15, [r7]
 800242e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002436:	d10e      	bne.n	8002456 <mahony_update+0x76>
		mahony_updateIMU(gx, gy, gz, ax, ay, az);
 8002438:	edd7 2a03 	vldr	s5, [r7, #12]
 800243c:	ed97 2a04 	vldr	s4, [r7, #16]
 8002440:	edd7 1a05 	vldr	s3, [r7, #20]
 8002444:	ed97 1a06 	vldr	s2, [r7, #24]
 8002448:	edd7 0a07 	vldr	s1, [r7, #28]
 800244c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002450:	f000 fbe6 	bl	8002c20 <mahony_updateIMU>
		return;
 8002454:	e3cd      	b.n	8002bf2 <mahony_update+0x812>
	}

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002456:	edd7 7a05 	vldr	s15, [r7, #20]
 800245a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002462:	d10e      	bne.n	8002482 <mahony_update+0xa2>
 8002464:	edd7 7a04 	vldr	s15, [r7, #16]
 8002468:	eef5 7a40 	vcmp.f32	s15, #0.0
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d107      	bne.n	8002482 <mahony_update+0xa2>
 8002472:	edd7 7a03 	vldr	s15, [r7, #12]
 8002476:	eef5 7a40 	vcmp.f32	s15, #0.0
 800247a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247e:	f000 82b7 	beq.w	80029f0 <mahony_update+0x610>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 8002482:	edd7 7a05 	vldr	s15, [r7, #20]
 8002486:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800248a:	edd7 7a04 	vldr	s15, [r7, #16]
 800248e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002496:	edd7 7a03 	vldr	s15, [r7, #12]
 800249a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a2:	eeb0 0a67 	vmov.f32	s0, s15
 80024a6:	f000 fe41 	bl	800312c <mahony_invSqrt>
 80024aa:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		ax *= recipNorm;
 80024ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80024b2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 80024be:	ed97 7a04 	vldr	s14, [r7, #16]
 80024c2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ca:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 80024ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80024d2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	edc7 7a03 	vstr	s15, [r7, #12]

		// Normalise magnetometer measurement
		recipNorm = mahony_invSqrt(mx * mx + my * my + mz * mz);
 80024de:	edd7 7a02 	vldr	s15, [r7, #8]
 80024e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f2:	edd7 7a00 	vldr	s15, [r7]
 80024f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	f000 fe13 	bl	800312c <mahony_invSqrt>
 8002506:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		mx *= recipNorm;
 800250a:	ed97 7a02 	vldr	s14, [r7, #8]
 800250e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a02 	vstr	s15, [r7, #8]
		my *= recipNorm;
 800251a:	ed97 7a01 	vldr	s14, [r7, #4]
 800251e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	edc7 7a01 	vstr	s15, [r7, #4]
		mz *= recipNorm;
 800252a:	ed97 7a00 	vldr	s14, [r7]
 800252e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		q0q0 = q0 * q0;
 800253a:	4bf0      	ldr	r3, [pc, #960]	; (80028fc <mahony_update+0x51c>)
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	4bee      	ldr	r3, [pc, #952]	; (80028fc <mahony_update+0x51c>)
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q1 = q0 * q1;
 800254e:	4beb      	ldr	r3, [pc, #940]	; (80028fc <mahony_update+0x51c>)
 8002550:	ed93 7a00 	vldr	s14, [r3]
 8002554:	4bea      	ldr	r3, [pc, #936]	; (8002900 <mahony_update+0x520>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q2 = q0 * q2;
 8002562:	4be6      	ldr	r3, [pc, #920]	; (80028fc <mahony_update+0x51c>)
 8002564:	ed93 7a00 	vldr	s14, [r3]
 8002568:	4be6      	ldr	r3, [pc, #920]	; (8002904 <mahony_update+0x524>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002572:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q0q3 = q0 * q3;
 8002576:	4be1      	ldr	r3, [pc, #900]	; (80028fc <mahony_update+0x51c>)
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	4be2      	ldr	r3, [pc, #904]	; (8002908 <mahony_update+0x528>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002586:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q1 = q1 * q1;
 800258a:	4bdd      	ldr	r3, [pc, #884]	; (8002900 <mahony_update+0x520>)
 800258c:	ed93 7a00 	vldr	s14, [r3]
 8002590:	4bdb      	ldr	r3, [pc, #876]	; (8002900 <mahony_update+0x520>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q2 = q1 * q2;
 800259e:	4bd8      	ldr	r3, [pc, #864]	; (8002900 <mahony_update+0x520>)
 80025a0:	ed93 7a00 	vldr	s14, [r3]
 80025a4:	4bd7      	ldr	r3, [pc, #860]	; (8002904 <mahony_update+0x524>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q1q3 = q1 * q3;
 80025b2:	4bd3      	ldr	r3, [pc, #844]	; (8002900 <mahony_update+0x520>)
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	4bd3      	ldr	r3, [pc, #844]	; (8002908 <mahony_update+0x528>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q2 = q2 * q2;
 80025c6:	4bcf      	ldr	r3, [pc, #828]	; (8002904 <mahony_update+0x524>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	4bcd      	ldr	r3, [pc, #820]	; (8002904 <mahony_update+0x524>)
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q2q3 = q2 * q3;
 80025da:	4bca      	ldr	r3, [pc, #808]	; (8002904 <mahony_update+0x524>)
 80025dc:	ed93 7a00 	vldr	s14, [r3]
 80025e0:	4bc9      	ldr	r3, [pc, #804]	; (8002908 <mahony_update+0x528>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ea:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q3q3 = q3 * q3;
 80025ee:	4bc6      	ldr	r3, [pc, #792]	; (8002908 <mahony_update+0x528>)
 80025f0:	ed93 7a00 	vldr	s14, [r3]
 80025f4:	4bc4      	ldr	r3, [pc, #784]	; (8002908 <mahony_update+0x528>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		// Reference direction of Earth's magnetic field
		hx = 2.0f
				* (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3)
 8002602:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002606:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800260a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260e:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002616:	edd7 7a02 	vldr	s15, [r7, #8]
 800261a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261e:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002622:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002626:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800262a:	edd7 7a01 	vldr	s15, [r7, #4]
 800262e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002632:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ mz * (q1q3 + q0q2));
 8002636:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 800263a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800263e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002642:	edd7 7a00 	vldr	s15, [r7]
 8002646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
		hx = 2.0f
 800264e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002652:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		hy = 2.0f
				* (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3)
 8002656:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800265a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800265e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002662:	edd7 7a02 	vldr	s15, [r7, #8]
 8002666:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800266e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002672:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002676:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800267a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800267e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002686:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ mz * (q2q3 - q0q1));
 800268a:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 800268e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002692:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002696:	edd7 7a00 	vldr	s15, [r7]
 800269a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
		hy = 2.0f
 80026a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026a6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		bx = sqrtf(hx * hx + hy * hy);
 80026aa:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026b2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80026b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	eeb0 0a67 	vmov.f32	s0, s15
 80026c2:	f00f f809 	bl	80116d8 <sqrtf>
 80026c6:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		bz = 2.0f
				* (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1)
 80026ca:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80026ce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80026d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026de:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 80026e2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80026e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026f2:	ee37 7a27 	vadd.f32	s14, s14, s15
						+ mz * (0.5f - q1q1 - q2q2));
 80026f6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80026fa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80026fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002702:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8002706:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800270a:	edd7 7a00 	vldr	s15, [r7]
 800270e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002712:	ee77 7a27 	vadd.f32	s15, s14, s15
		bz = 2.0f
 8002716:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800271a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 800271e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8002722:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800272a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		halfvy = q0q1 + q2q3;
 800272e:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8002732:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		halfvz = q0q0 - 0.5f + q3q3;
 800273e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002742:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800274a:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800274e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002752:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8002756:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800275a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8002766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800276a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800276e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002772:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8002776:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800277a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800277e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 800278e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002792:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002796:	ee37 7a67 	vsub.f32	s14, s14, s15
 800279a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800279e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a2:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80027a6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80027aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027ae:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 80027be:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80027c2:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80027c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80027ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80027d6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80027da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80027e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027e6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80027ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		// Error is sum of cross product between estimated direction
		// and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 80027f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80027fa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80027fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002802:	edd7 6a03 	vldr	s13, [r7, #12]
 8002806:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800280a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800280e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002812:	edd7 6a01 	vldr	s13, [r7, #4]
 8002816:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800281a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800281e:	ed97 6a00 	vldr	s12, [r7]
 8002822:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002826:	ee66 7a27 	vmul.f32	s15, s12, s15
 800282a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 8002836:	ed97 7a03 	vldr	s14, [r7, #12]
 800283a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800283e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002842:	edd7 6a05 	vldr	s13, [r7, #20]
 8002846:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800284a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800284e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002852:	edd7 6a00 	vldr	s13, [r7]
 8002856:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800285a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800285e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002862:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002866:	ee66 7a27 	vmul.f32	s15, s12, s15
 800286a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800286e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002872:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 8002876:	ed97 7a05 	vldr	s14, [r7, #20]
 800287a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800287e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002882:	edd7 6a04 	vldr	s13, [r7, #16]
 8002886:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800288a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800288e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002892:	edd7 6a02 	vldr	s13, [r7, #8]
 8002896:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800289a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800289e:	ed97 6a01 	vldr	s12, [r7, #4]
 80028a2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80028a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80028aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <mahony_update+0x52c>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c4:	dd61      	ble.n	800298a <mahony_update+0x5aa>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <mahony_update+0x52c>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <mahony_update+0x530>)
 80028de:	edd3 7a00 	vldr	s15, [r3]
 80028e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <mahony_update+0x530>)
 80028e8:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <mahony_update+0x52c>)
 80028ee:	ed93 7a00 	vldr	s14, [r3]
 80028f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fa:	e00b      	b.n	8002914 <mahony_update+0x534>
 80028fc:	2000000c 	.word	0x2000000c
 8002900:	2000035c 	.word	0x2000035c
 8002904:	20000360 	.word	0x20000360
 8002908:	20000364 	.word	0x20000364
 800290c:	20000008 	.word	0x20000008
 8002910:	20000368 	.word	0x20000368
 8002914:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002918:	ee27 7a27 	vmul.f32	s14, s14, s15
 800291c:	4bb6      	ldr	r3, [pc, #728]	; (8002bf8 <mahony_update+0x818>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	4bb4      	ldr	r3, [pc, #720]	; (8002bf8 <mahony_update+0x818>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 800292c:	4bb3      	ldr	r3, [pc, #716]	; (8002bfc <mahony_update+0x81c>)
 800292e:	ed93 7a00 	vldr	s14, [r3]
 8002932:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800293a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800293e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002942:	4baf      	ldr	r3, [pc, #700]	; (8002c00 <mahony_update+0x820>)
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	4bac      	ldr	r3, [pc, #688]	; (8002c00 <mahony_update+0x820>)
 800294e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8002952:	4bac      	ldr	r3, [pc, #688]	; (8002c04 <mahony_update+0x824>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ed97 7a08 	vldr	s14, [r7, #32]
 800295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002960:	edc7 7a08 	vstr	s15, [r7, #32]
			gy += integralFBy;
 8002964:	4ba4      	ldr	r3, [pc, #656]	; (8002bf8 <mahony_update+0x818>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ed97 7a07 	vldr	s14, [r7, #28]
 800296e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
			gz += integralFBz;
 8002976:	4ba2      	ldr	r3, [pc, #648]	; (8002c00 <mahony_update+0x820>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002984:	edc7 7a06 	vstr	s15, [r7, #24]
 8002988:	e00b      	b.n	80029a2 <mahony_update+0x5c2>
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 800298a:	4b9e      	ldr	r3, [pc, #632]	; (8002c04 <mahony_update+0x824>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002992:	4b99      	ldr	r3, [pc, #612]	; (8002bf8 <mahony_update+0x818>)
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 800299a:	4b99      	ldr	r3, [pc, #612]	; (8002c00 <mahony_update+0x820>)
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 80029a2:	4b99      	ldr	r3, [pc, #612]	; (8002c08 <mahony_update+0x828>)
 80029a4:	ed93 7a00 	vldr	s14, [r3]
 80029a8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80029b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b8:	edc7 7a08 	vstr	s15, [r7, #32]
		gy += twoKp * halfey;
 80029bc:	4b92      	ldr	r3, [pc, #584]	; (8002c08 <mahony_update+0x828>)
 80029be:	ed93 7a00 	vldr	s14, [r3]
 80029c2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80029c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80029ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d2:	edc7 7a07 	vstr	s15, [r7, #28]
		gz += twoKp * halfez;
 80029d6:	4b8c      	ldr	r3, [pc, #560]	; (8002c08 <mahony_update+0x828>)
 80029d8:	ed93 7a00 	vldr	s14, [r3]
 80029dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80029e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80029e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ec:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 80029f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a04:	edc7 7a08 	vstr	s15, [r7, #32]
	gy *= (0.5f * invSampleFreq);
 8002a08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a14:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1c:	edc7 7a07 	vstr	s15, [r7, #28]
	gz *= (0.5f * invSampleFreq);
 8002a20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a24:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	edc7 7a06 	vstr	s15, [r7, #24]
	qa = q0;
 8002a38:	4b74      	ldr	r3, [pc, #464]	; (8002c0c <mahony_update+0x82c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
	qb = q1;
 8002a3e:	4b74      	ldr	r3, [pc, #464]	; (8002c10 <mahony_update+0x830>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
	qc = q2;
 8002a44:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <mahony_update+0x834>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8002a4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002a4e:	eeb1 7a67 	vneg.f32	s14, s15
 8002a52:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a6a:	4b6b      	ldr	r3, [pc, #428]	; (8002c18 <mahony_update+0x838>)
 8002a6c:	edd3 6a00 	vldr	s13, [r3]
 8002a70:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a7c:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <mahony_update+0x82c>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a86:	4b61      	ldr	r3, [pc, #388]	; (8002c0c <mahony_update+0x82c>)
 8002a88:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8002a8c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a90:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002a9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa8:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <mahony_update+0x838>)
 8002aaa:	edd3 6a00 	vldr	s13, [r3]
 8002aae:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ab2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ab6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002aba:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <mahony_update+0x830>)
 8002abc:	edd3 7a00 	vldr	s15, [r3]
 8002ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac4:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <mahony_update+0x830>)
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8002aca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ace:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002ada:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae6:	4b4c      	ldr	r3, [pc, #304]	; (8002c18 <mahony_update+0x838>)
 8002ae8:	edd3 6a00 	vldr	s13, [r3]
 8002aec:	edd7 7a08 	vldr	s15, [r7, #32]
 8002af0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <mahony_update+0x834>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <mahony_update+0x834>)
 8002b04:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8002b08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002b0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b14:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b24:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002b28:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b34:	4b38      	ldr	r3, [pc, #224]	; (8002c18 <mahony_update+0x838>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <mahony_update+0x838>)
 8002b40:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b44:	4b31      	ldr	r3, [pc, #196]	; (8002c0c <mahony_update+0x82c>)
 8002b46:	ed93 7a00 	vldr	s14, [r3]
 8002b4a:	4b30      	ldr	r3, [pc, #192]	; (8002c0c <mahony_update+0x82c>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <mahony_update+0x830>)
 8002b56:	edd3 6a00 	vldr	s13, [r3]
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <mahony_update+0x830>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b68:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <mahony_update+0x834>)
 8002b6a:	edd3 6a00 	vldr	s13, [r3]
 8002b6e:	4b29      	ldr	r3, [pc, #164]	; (8002c14 <mahony_update+0x834>)
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <mahony_update+0x838>)
 8002b7e:	edd3 6a00 	vldr	s13, [r3]
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <mahony_update+0x838>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b90:	eeb0 0a67 	vmov.f32	s0, s15
 8002b94:	f000 faca 	bl	800312c <mahony_invSqrt>
 8002b98:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	q0 *= recipNorm;
 8002b9c:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <mahony_update+0x82c>)
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <mahony_update+0x82c>)
 8002bac:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <mahony_update+0x830>)
 8002bb2:	ed93 7a00 	vldr	s14, [r3]
 8002bb6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <mahony_update+0x830>)
 8002bc0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002bc4:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <mahony_update+0x834>)
 8002bc6:	ed93 7a00 	vldr	s14, [r3]
 8002bca:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <mahony_update+0x834>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <mahony_update+0x838>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be6:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <mahony_update+0x838>)
 8002be8:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <mahony_update+0x83c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
}
 8002bf2:	3798      	adds	r7, #152	; 0x98
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2000036c 	.word	0x2000036c
 8002bfc:	20000008 	.word	0x20000008
 8002c00:	20000370 	.word	0x20000370
 8002c04:	20000368 	.word	0x20000368
 8002c08:	20000004 	.word	0x20000004
 8002c0c:	2000000c 	.word	0x2000000c
 8002c10:	2000035c 	.word	0x2000035c
 8002c14:	20000360 	.word	0x20000360
 8002c18:	20000364 	.word	0x20000364
 8002c1c:	20000384 	.word	0x20000384

08002c20 <mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void mahony_updateIMU(float gx, float gy, float gz, float ax, float ay,
		float az) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b090      	sub	sp, #64	; 0x40
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	ed87 0a05 	vstr	s0, [r7, #20]
 8002c2a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002c2e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002c32:	edc7 1a02 	vstr	s3, [r7, #8]
 8002c36:	ed87 2a01 	vstr	s4, [r7, #4]
 8002c3a:	edc7 2a00 	vstr	s5, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c42:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	d10e      	bne.n	8002c6a <mahony_updateIMU+0x4a>
 8002c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c50:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	d107      	bne.n	8002c6a <mahony_updateIMU+0x4a>
 8002c5a:	edd7 7a00 	vldr	s15, [r7]
 8002c5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	f000 8144 	beq.w	8002ef2 <mahony_updateIMU+0x2d2>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 8002c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002c72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c7e:	edd7 7a00 	vldr	s15, [r7]
 8002c82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8e:	f000 fa4d 	bl	800312c <mahony_invSqrt>
 8002c92:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		ax *= recipNorm;
 8002c96:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c9a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002ca6:	ed97 7a01 	vldr	s14, [r7, #4]
 8002caa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb2:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 8002cb6:	ed97 7a00 	vldr	s14, [r7]
 8002cba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc2:	edc7 7a00 	vstr	s15, [r7]

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8002cc6:	4b68      	ldr	r3, [pc, #416]	; (8002e68 <mahony_updateIMU+0x248>)
 8002cc8:	ed93 7a00 	vldr	s14, [r3]
 8002ccc:	4b67      	ldr	r3, [pc, #412]	; (8002e6c <mahony_updateIMU+0x24c>)
 8002cce:	edd3 7a00 	vldr	s15, [r3]
 8002cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <mahony_updateIMU+0x250>)
 8002cd8:	edd3 6a00 	vldr	s13, [r3]
 8002cdc:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <mahony_updateIMU+0x254>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cea:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		halfvy = q0 * q1 + q2 * q3;
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <mahony_updateIMU+0x250>)
 8002cf0:	ed93 7a00 	vldr	s14, [r3]
 8002cf4:	4b5c      	ldr	r3, [pc, #368]	; (8002e68 <mahony_updateIMU+0x248>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfe:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <mahony_updateIMU+0x254>)
 8002d00:	edd3 6a00 	vldr	s13, [r3]
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <mahony_updateIMU+0x24c>)
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d12:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8002d16:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <mahony_updateIMU+0x250>)
 8002d18:	ed93 7a00 	vldr	s14, [r3]
 8002d1c:	4b54      	ldr	r3, [pc, #336]	; (8002e70 <mahony_updateIMU+0x250>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d2a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002d2e:	4b4f      	ldr	r3, [pc, #316]	; (8002e6c <mahony_updateIMU+0x24c>)
 8002d30:	edd3 6a00 	vldr	s13, [r3]
 8002d34:	4b4d      	ldr	r3, [pc, #308]	; (8002e6c <mahony_updateIMU+0x24c>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d42:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8002d46:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d52:	edd7 6a00 	vldr	s13, [r7]
 8002d56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		halfey = (az * halfvx - ax * halfvz);
 8002d66:	ed97 7a00 	vldr	s14, [r7]
 8002d6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d72:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		halfez = (ax * halfvy - ay * halfvx);
 8002d86:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d92:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d96:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002d9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Compute and apply integral feedback if enabled
		if (twoKi > 0.0f) {
 8002da6:	4b34      	ldr	r3, [pc, #208]	; (8002e78 <mahony_updateIMU+0x258>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	dd6a      	ble.n	8002e8c <mahony_updateIMU+0x26c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <mahony_updateIMU+0x258>)
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002dc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <mahony_updateIMU+0x25c>)
 8002dc6:	edd3 7a00 	vldr	s15, [r3]
 8002dca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <mahony_updateIMU+0x260>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <mahony_updateIMU+0x260>)
 8002dda:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 8002dde:	4b26      	ldr	r3, [pc, #152]	; (8002e78 <mahony_updateIMU+0x258>)
 8002de0:	ed93 7a00 	vldr	s14, [r3]
 8002de4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002de8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <mahony_updateIMU+0x25c>)
 8002dee:	edd3 7a00 	vldr	s15, [r3]
 8002df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <mahony_updateIMU+0x264>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <mahony_updateIMU+0x264>)
 8002e02:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 8002e06:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <mahony_updateIMU+0x258>)
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <mahony_updateIMU+0x25c>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <mahony_updateIMU+0x268>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <mahony_updateIMU+0x268>)
 8002e2a:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <mahony_updateIMU+0x260>)
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3c:	edc7 7a05 	vstr	s15, [r7, #20]
			gy += integralFBy;
 8002e40:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <mahony_updateIMU+0x264>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4e:	edc7 7a04 	vstr	s15, [r7, #16]
			gz += integralFBz;
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <mahony_updateIMU+0x268>)
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e60:	edc7 7a03 	vstr	s15, [r7, #12]
 8002e64:	e01e      	b.n	8002ea4 <mahony_updateIMU+0x284>
 8002e66:	bf00      	nop
 8002e68:	2000035c 	.word	0x2000035c
 8002e6c:	20000364 	.word	0x20000364
 8002e70:	2000000c 	.word	0x2000000c
 8002e74:	20000360 	.word	0x20000360
 8002e78:	20000008 	.word	0x20000008
 8002e7c:	20000374 	.word	0x20000374
 8002e80:	20000368 	.word	0x20000368
 8002e84:	2000036c 	.word	0x2000036c
 8002e88:	20000370 	.word	0x20000370
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 8002e8c:	4b9d      	ldr	r3, [pc, #628]	; (8003104 <mahony_updateIMU+0x4e4>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8002e94:	4b9c      	ldr	r3, [pc, #624]	; (8003108 <mahony_updateIMU+0x4e8>)
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8002e9c:	4b9b      	ldr	r3, [pc, #620]	; (800310c <mahony_updateIMU+0x4ec>)
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8002ea4:	4b9a      	ldr	r3, [pc, #616]	; (8003110 <mahony_updateIMU+0x4f0>)
 8002ea6:	ed93 7a00 	vldr	s14, [r3]
 8002eaa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eba:	edc7 7a05 	vstr	s15, [r7, #20]
		gy += twoKp * halfey;
 8002ebe:	4b94      	ldr	r3, [pc, #592]	; (8003110 <mahony_updateIMU+0x4f0>)
 8002ec0:	ed93 7a00 	vldr	s14, [r3]
 8002ec4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ecc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ed4:	edc7 7a04 	vstr	s15, [r7, #16]
		gz += twoKp * halfez;
 8002ed8:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <mahony_updateIMU+0x4f0>)
 8002eda:	ed93 7a00 	vldr	s14, [r3]
 8002ede:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eee:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8002ef2:	4b88      	ldr	r3, [pc, #544]	; (8003114 <mahony_updateIMU+0x4f4>)
 8002ef4:	edd3 7a00 	vldr	s15, [r3]
 8002ef8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f00:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f08:	edc7 7a05 	vstr	s15, [r7, #20]
	gy *= (0.5f * invSampleFreq);
 8002f0c:	4b81      	ldr	r3, [pc, #516]	; (8003114 <mahony_updateIMU+0x4f4>)
 8002f0e:	edd3 7a00 	vldr	s15, [r3]
 8002f12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f1a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f22:	edc7 7a04 	vstr	s15, [r7, #16]
	gz *= (0.5f * invSampleFreq);
 8002f26:	4b7b      	ldr	r3, [pc, #492]	; (8003114 <mahony_updateIMU+0x4f4>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f34:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3c:	edc7 7a03 	vstr	s15, [r7, #12]
	qa = q0;
 8002f40:	4b75      	ldr	r3, [pc, #468]	; (8003118 <mahony_updateIMU+0x4f8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	623b      	str	r3, [r7, #32]
	qb = q1;
 8002f46:	4b75      	ldr	r3, [pc, #468]	; (800311c <mahony_updateIMU+0x4fc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	61fb      	str	r3, [r7, #28]
	qc = q2;
 8002f4c:	4b74      	ldr	r3, [pc, #464]	; (8003120 <mahony_updateIMU+0x500>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	61bb      	str	r3, [r7, #24]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8002f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f56:	eeb1 7a67 	vneg.f32	s14, s15
 8002f5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f62:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f66:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f72:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <mahony_updateIMU+0x504>)
 8002f74:	edd3 6a00 	vldr	s13, [r3]
 8002f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f84:	4b64      	ldr	r3, [pc, #400]	; (8003118 <mahony_updateIMU+0x4f8>)
 8002f86:	edd3 7a00 	vldr	s15, [r3]
 8002f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f8e:	4b62      	ldr	r3, [pc, #392]	; (8003118 <mahony_updateIMU+0x4f8>)
 8002f90:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8002f94:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa0:	edd7 6a06 	vldr	s13, [r7, #24]
 8002fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fb0:	4b5c      	ldr	r3, [pc, #368]	; (8003124 <mahony_updateIMU+0x504>)
 8002fb2:	edd3 6a00 	vldr	s13, [r3]
 8002fb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fc2:	4b56      	ldr	r3, [pc, #344]	; (800311c <mahony_updateIMU+0x4fc>)
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fcc:	4b53      	ldr	r3, [pc, #332]	; (800311c <mahony_updateIMU+0x4fc>)
 8002fce:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8002fd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fee:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <mahony_updateIMU+0x504>)
 8002ff0:	edd3 6a00 	vldr	s13, [r3]
 8002ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <mahony_updateIMU+0x500>)
 8003002:	edd3 7a00 	vldr	s15, [r3]
 8003006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <mahony_updateIMU+0x500>)
 800300c:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8003010:	ed97 7a08 	vldr	s14, [r7, #32]
 8003014:	edd7 7a03 	vldr	s15, [r7, #12]
 8003018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800301c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003020:	edd7 7a04 	vldr	s15, [r7, #16]
 8003024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003030:	edd7 7a05 	vldr	s15, [r7, #20]
 8003034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003038:	ee37 7a67 	vsub.f32	s14, s14, s15
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <mahony_updateIMU+0x504>)
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <mahony_updateIMU+0x504>)
 8003048:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800304c:	4b32      	ldr	r3, [pc, #200]	; (8003118 <mahony_updateIMU+0x4f8>)
 800304e:	ed93 7a00 	vldr	s14, [r3]
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <mahony_updateIMU+0x4f8>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305c:	4b2f      	ldr	r3, [pc, #188]	; (800311c <mahony_updateIMU+0x4fc>)
 800305e:	edd3 6a00 	vldr	s13, [r3]
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <mahony_updateIMU+0x4fc>)
 8003064:	edd3 7a00 	vldr	s15, [r3]
 8003068:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800306c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <mahony_updateIMU+0x500>)
 8003072:	edd3 6a00 	vldr	s13, [r3]
 8003076:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <mahony_updateIMU+0x500>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003080:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <mahony_updateIMU+0x504>)
 8003086:	edd3 6a00 	vldr	s13, [r3]
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <mahony_updateIMU+0x504>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003098:	eeb0 0a67 	vmov.f32	s0, s15
 800309c:	f000 f846 	bl	800312c <mahony_invSqrt>
 80030a0:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	q0 *= recipNorm;
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <mahony_updateIMU+0x4f8>)
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <mahony_updateIMU+0x4f8>)
 80030b4:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <mahony_updateIMU+0x4fc>)
 80030ba:	ed93 7a00 	vldr	s14, [r3]
 80030be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <mahony_updateIMU+0x4fc>)
 80030c8:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 80030cc:	4b14      	ldr	r3, [pc, #80]	; (8003120 <mahony_updateIMU+0x500>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030da:	4b11      	ldr	r3, [pc, #68]	; (8003120 <mahony_updateIMU+0x500>)
 80030dc:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <mahony_updateIMU+0x504>)
 80030e2:	ed93 7a00 	vldr	s14, [r3]
 80030e6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <mahony_updateIMU+0x504>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <mahony_updateIMU+0x508>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
}
 80030fa:	bf00      	nop
 80030fc:	3740      	adds	r7, #64	; 0x40
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000368 	.word	0x20000368
 8003108:	2000036c 	.word	0x2000036c
 800310c:	20000370 	.word	0x20000370
 8003110:	20000004 	.word	0x20000004
 8003114:	20000374 	.word	0x20000374
 8003118:	2000000c 	.word	0x2000000c
 800311c:	2000035c 	.word	0x2000035c
 8003120:	20000360 	.word	0x20000360
 8003124:	20000364 	.word	0x20000364
 8003128:	20000384 	.word	0x20000384

0800312c <mahony_invSqrt>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float mahony_invSqrt(float x) {
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8003136:	edd7 7a01 	vldr	s15, [r7, #4]
 800313a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800313e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003142:	edc7 7a05 	vstr	s15, [r7, #20]
	union {
		float f;
		long l;
	} i;
	i.f = x;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	60fb      	str	r3, [r7, #12]
	i.l = 0x5f3759df - (i.l >> 1);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	105a      	asrs	r2, r3, #1
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <mahony_invSqrt+0x90>)
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
	float y = i.f;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003158:	ed97 7a05 	vldr	s14, [r7, #20]
 800315c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003164:	edd7 7a04 	vldr	s15, [r7, #16]
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003170:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003174:	ed97 7a04 	vldr	s14, [r7, #16]
 8003178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317c:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8003180:	ed97 7a05 	vldr	s14, [r7, #20]
 8003184:	edd7 7a04 	vldr	s15, [r7, #16]
 8003188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800318c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003194:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319c:	ed97 7a04 	vldr	s14, [r7, #16]
 80031a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a4:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	ee07 3a90 	vmov	s15, r3
}
 80031ae:	eeb0 0a67 	vmov.f32	s0, s15
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	5f3759df 	.word	0x5f3759df

080031c0 <mahony_computeAngles>:

//-------------------------------------------------------------------------------------------

void mahony_computeAngles() {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
	roll = atan2f(q0 * q1 + q2 * q3, 0.5f - q1 * q1 - q2 * q2) * 180 / M_PI;
 80031c4:	4b64      	ldr	r3, [pc, #400]	; (8003358 <mahony_computeAngles+0x198>)
 80031c6:	ed93 7a00 	vldr	s14, [r3]
 80031ca:	4b64      	ldr	r3, [pc, #400]	; (800335c <mahony_computeAngles+0x19c>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d4:	4b62      	ldr	r3, [pc, #392]	; (8003360 <mahony_computeAngles+0x1a0>)
 80031d6:	edd3 6a00 	vldr	s13, [r3]
 80031da:	4b62      	ldr	r3, [pc, #392]	; (8003364 <mahony_computeAngles+0x1a4>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80031e8:	4b5c      	ldr	r3, [pc, #368]	; (800335c <mahony_computeAngles+0x19c>)
 80031ea:	ed93 7a00 	vldr	s14, [r3]
 80031ee:	4b5b      	ldr	r3, [pc, #364]	; (800335c <mahony_computeAngles+0x19c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80031fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003200:	4b57      	ldr	r3, [pc, #348]	; (8003360 <mahony_computeAngles+0x1a0>)
 8003202:	edd3 6a00 	vldr	s13, [r3]
 8003206:	4b56      	ldr	r3, [pc, #344]	; (8003360 <mahony_computeAngles+0x1a0>)
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003214:	eef0 0a67 	vmov.f32	s1, s15
 8003218:	eeb0 0a46 	vmov.f32	s0, s12
 800321c:	f00e fa5a 	bl	80116d4 <atan2f>
 8003220:	eef0 7a40 	vmov.f32	s15, s0
 8003224:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003368 <mahony_computeAngles+0x1a8>
 8003228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800322c:	ee17 0a90 	vmov	r0, s15
 8003230:	f7fd f992 	bl	8000558 <__aeabi_f2d>
 8003234:	a346      	add	r3, pc, #280	; (adr r3, 8003350 <mahony_computeAngles+0x190>)
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	f7fd fb0f 	bl	800085c <__aeabi_ddiv>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4610      	mov	r0, r2
 8003244:	4619      	mov	r1, r3
 8003246:	f7fd fcb7 	bl	8000bb8 <__aeabi_d2f>
 800324a:	4603      	mov	r3, r0
 800324c:	4a47      	ldr	r2, [pc, #284]	; (800336c <mahony_computeAngles+0x1ac>)
 800324e:	6013      	str	r3, [r2, #0]
	pitch = asinf(-2.0f * (q1 * q3 - q0 * q2)) * 180 / M_PI;
 8003250:	4b42      	ldr	r3, [pc, #264]	; (800335c <mahony_computeAngles+0x19c>)
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <mahony_computeAngles+0x1a4>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003260:	4b3d      	ldr	r3, [pc, #244]	; (8003358 <mahony_computeAngles+0x198>)
 8003262:	edd3 6a00 	vldr	s13, [r3]
 8003266:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <mahony_computeAngles+0x1a0>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003274:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8003278:	ee67 7a87 	vmul.f32	s15, s15, s14
 800327c:	eeb0 0a67 	vmov.f32	s0, s15
 8003280:	f00e f9fc 	bl	801167c <asinf>
 8003284:	eef0 7a40 	vmov.f32	s15, s0
 8003288:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003368 <mahony_computeAngles+0x1a8>
 800328c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003290:	ee17 0a90 	vmov	r0, s15
 8003294:	f7fd f960 	bl	8000558 <__aeabi_f2d>
 8003298:	a32d      	add	r3, pc, #180	; (adr r3, 8003350 <mahony_computeAngles+0x190>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f7fd fadd 	bl	800085c <__aeabi_ddiv>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	f7fd fc85 	bl	8000bb8 <__aeabi_d2f>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <mahony_computeAngles+0x1b0>)
 80032b2:	6013      	str	r3, [r2, #0]
	yaw = atan2f(q1 * q2 + q0 * q3, 0.5f - q2 * q2 - q3 * q3) * 180 / M_PI;
 80032b4:	4b29      	ldr	r3, [pc, #164]	; (800335c <mahony_computeAngles+0x19c>)
 80032b6:	ed93 7a00 	vldr	s14, [r3]
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <mahony_computeAngles+0x1a0>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <mahony_computeAngles+0x198>)
 80032c6:	edd3 6a00 	vldr	s13, [r3]
 80032ca:	4b26      	ldr	r3, [pc, #152]	; (8003364 <mahony_computeAngles+0x1a4>)
 80032cc:	edd3 7a00 	vldr	s15, [r3]
 80032d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032d4:	ee37 6a27 	vadd.f32	s12, s14, s15
 80032d8:	4b21      	ldr	r3, [pc, #132]	; (8003360 <mahony_computeAngles+0x1a0>)
 80032da:	ed93 7a00 	vldr	s14, [r3]
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <mahony_computeAngles+0x1a0>)
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80032ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032f0:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <mahony_computeAngles+0x1a4>)
 80032f2:	edd3 6a00 	vldr	s13, [r3]
 80032f6:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <mahony_computeAngles+0x1a4>)
 80032f8:	edd3 7a00 	vldr	s15, [r3]
 80032fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003304:	eef0 0a67 	vmov.f32	s1, s15
 8003308:	eeb0 0a46 	vmov.f32	s0, s12
 800330c:	f00e f9e2 	bl	80116d4 <atan2f>
 8003310:	eef0 7a40 	vmov.f32	s15, s0
 8003314:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003368 <mahony_computeAngles+0x1a8>
 8003318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800331c:	ee17 0a90 	vmov	r0, s15
 8003320:	f7fd f91a 	bl	8000558 <__aeabi_f2d>
 8003324:	a30a      	add	r3, pc, #40	; (adr r3, 8003350 <mahony_computeAngles+0x190>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fd fa97 	bl	800085c <__aeabi_ddiv>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fc3f 	bl	8000bb8 <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	4a0d      	ldr	r2, [pc, #52]	; (8003374 <mahony_computeAngles+0x1b4>)
 800333e:	6013      	str	r3, [r2, #0]
	anglesComputed = 1;
 8003340:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <mahony_computeAngles+0x1b8>)
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	f3af 8000 	nop.w
 8003350:	54442d18 	.word	0x54442d18
 8003354:	400921fb 	.word	0x400921fb
 8003358:	2000000c 	.word	0x2000000c
 800335c:	2000035c 	.word	0x2000035c
 8003360:	20000360 	.word	0x20000360
 8003364:	20000364 	.word	0x20000364
 8003368:	43340000 	.word	0x43340000
 800336c:	20000378 	.word	0x20000378
 8003370:	2000037c 	.word	0x2000037c
 8003374:	20000380 	.word	0x20000380
 8003378:	20000384 	.word	0x20000384

0800337c <mahony_getRoll>:

float mahony_getRoll() {
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
	if (!anglesComputed)
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <mahony_getRoll+0x20>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <mahony_getRoll+0x10>
		mahony_computeAngles();
 8003388:	f7ff ff1a 	bl	80031c0 <mahony_computeAngles>
	return roll;
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <mahony_getRoll+0x24>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	ee07 3a90 	vmov	s15, r3
}
 8003394:	eeb0 0a67 	vmov.f32	s0, s15
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000384 	.word	0x20000384
 80033a0:	20000378 	.word	0x20000378

080033a4 <mahony_getPitch>:
float mahony_getPitch() {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
	if (!anglesComputed)
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <mahony_getPitch+0x20>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <mahony_getPitch+0x10>
		mahony_computeAngles();
 80033b0:	f7ff ff06 	bl	80031c0 <mahony_computeAngles>
	return pitch;
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <mahony_getPitch+0x24>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	ee07 3a90 	vmov	s15, r3
}
 80033bc:	eeb0 0a67 	vmov.f32	s0, s15
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000384 	.word	0x20000384
 80033c8:	2000037c 	.word	0x2000037c

080033cc <mahony_getYaw>:
float mahony_getYaw() {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
	if (!anglesComputed)
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <mahony_getYaw+0x20>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <mahony_getYaw+0x10>
		mahony_computeAngles();
 80033d8:	f7ff fef2 	bl	80031c0 <mahony_computeAngles>
	return yaw;
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <mahony_getYaw+0x24>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	ee07 3a90 	vmov	s15, r3
}
 80033e4:	eeb0 0a67 	vmov.f32	s0, s15
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	20000384 	.word	0x20000384
 80033f0:	20000380 	.word	0x20000380

080033f4 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t map(float x, int16_t in_min, int16_t in_max, int16_t out_min,
		int16_t out_max) {
 80033f4:	b490      	push	{r4, r7}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80033fe:	4604      	mov	r4, r0
 8003400:	4608      	mov	r0, r1
 8003402:	4611      	mov	r1, r2
 8003404:	461a      	mov	r2, r3
 8003406:	4623      	mov	r3, r4
 8003408:	817b      	strh	r3, [r7, #10]
 800340a:	4603      	mov	r3, r0
 800340c:	813b      	strh	r3, [r7, #8]
 800340e:	460b      	mov	r3, r1
 8003410:	80fb      	strh	r3, [r7, #6]
 8003412:	4613      	mov	r3, r2
 8003414:	80bb      	strh	r3, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003416:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003422:	ed97 7a03 	vldr	s14, [r7, #12]
 8003426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800342a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800342e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003440:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003444:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800346a:	ee17 3a90 	vmov	r3, s15
 800346e:	b21b      	sxth	r3, r3
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bc90      	pop	{r4, r7}
 8003478:	4770      	bx	lr
 800347a:	0000      	movs	r0, r0
 800347c:	0000      	movs	r0, r0
	...

08003480 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	ed2d 8b04 	vpush	{d8-d9}
 8003488:	f5ad 5d0a 	sub.w	sp, sp, #8832	; 0x2280
 800348c:	b089      	sub	sp, #36	; 0x24
 800348e:	af1e      	add	r7, sp, #120	; 0x78
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003490:	f002 f9a4 	bl	80057dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003494:	f001 f84e 	bl	8004534 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	//I2CResetBus();
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003498:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800349c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	4b66      	ldr	r3, [pc, #408]	; (8003640 <main+0x1c0>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	4a65      	ldr	r2, [pc, #404]	; (8003640 <main+0x1c0>)
 80034aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034ae:	6413      	str	r3, [r2, #64]	; 0x40
 80034b0:	4b63      	ldr	r3, [pc, #396]	; (8003640 <main+0x1c0>)
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80034b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80034c6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80034ca:	681b      	ldr	r3, [r3, #0]
	HAL_Delay(100);
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	f002 f9f7 	bl	80058c0 <HAL_Delay>
	__HAL_RCC_I2C1_FORCE_RESET();
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <main+0x1c0>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a5a      	ldr	r2, [pc, #360]	; (8003640 <main+0x1c0>)
 80034d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034dc:	6213      	str	r3, [r2, #32]
	HAL_Delay(100);
 80034de:	2064      	movs	r0, #100	; 0x64
 80034e0:	f002 f9ee 	bl	80058c0 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 80034e4:	4b56      	ldr	r3, [pc, #344]	; (8003640 <main+0x1c0>)
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4a55      	ldr	r2, [pc, #340]	; (8003640 <main+0x1c0>)
 80034ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ee:	6213      	str	r3, [r2, #32]
	HAL_Delay(100);
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f002 f9e5 	bl	80058c0 <HAL_Delay>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80034f6:	f001 fa23 	bl	8004940 <MX_GPIO_Init>
	MX_I2C1_Init();
 80034fa:	f001 f885 	bl	8004608 <MX_I2C1_Init>
	MX_USART1_UART_Init();
 80034fe:	f001 f9f5 	bl	80048ec <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8003502:	f001 f8cf 	bl	80046a4 <MX_SPI1_Init>
	MX_TIM2_Init();
 8003506:	f001 f903 	bl	8004710 <MX_TIM2_Init>
	MX_TIM3_Init();
 800350a:	f001 f977 	bl	80047fc <MX_TIM3_Init>
	MX_SDIO_SD_Init();
 800350e:	f001 f8a9 	bl	8004664 <MX_SDIO_SD_Init>
	MX_FATFS_Init();
 8003512:	f008 facd 	bl	800bab0 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(150);
 8003516:	2096      	movs	r0, #150	; 0x96
 8003518:	f002 f9d2 	bl	80058c0 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800351c:	2100      	movs	r1, #0
 800351e:	4849      	ldr	r0, [pc, #292]	; (8003644 <main+0x1c4>)
 8003520:	f006 fc5e 	bl	8009de0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003524:	2100      	movs	r1, #0
 8003526:	4848      	ldr	r0, [pc, #288]	; (8003648 <main+0x1c8>)
 8003528:	f006 fc5a 	bl	8009de0 <HAL_TIM_PWM_Start>
	blink_stmled();
 800352c:	f001 fa98 	bl	8004a60 <blink_stmled>
	debug_init(&huart1);
 8003530:	4846      	ldr	r0, [pc, #280]	; (800364c <main+0x1cc>)
 8003532:	f7fe f9f9 	bl	8001928 <debug_init>
	log_s("Start");
 8003536:	4846      	ldr	r0, [pc, #280]	; (8003650 <main+0x1d0>)
 8003538:	f7fe fa06 	bl	8001948 <log_s>
	//I2C_Scan();
	gy_init_lbl: if (GY801_init(&hi2c1, &data)) {
 800353c:	4945      	ldr	r1, [pc, #276]	; (8003654 <main+0x1d4>)
 800353e:	4846      	ldr	r0, [pc, #280]	; (8003658 <main+0x1d8>)
 8003540:	f7fe fa84 	bl	8001a4c <GY801_init>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <main+0xda>
		I2C_ClearBusyFlagErratum(&hi2c1, 100); //fix i2c HAL_BUSY: https://istarik.ru/blog/stm32/123.html
 800354a:	2164      	movs	r1, #100	; 0x64
 800354c:	4842      	ldr	r0, [pc, #264]	; (8003658 <main+0x1d8>)
 800354e:	f001 faf1 	bl	8004b34 <I2C_ClearBusyFlagErratum>
		log_s("REINIT_DONE TRYING....");
 8003552:	4842      	ldr	r0, [pc, #264]	; (800365c <main+0x1dc>)
 8003554:	f7fe f9f8 	bl	8001948 <log_s>
		goto gy_init_lbl;
 8003558:	e7f0      	b.n	800353c <main+0xbc>
		blink_rfled(1); //HAL_GPIO_WritePin(GPIOC, LED_RF_Pin, GPIO_PIN_SET);
	}

	uint8_t nrf_data[32];
	nrf_init(&hspi1);
 800355a:	4841      	ldr	r0, [pc, #260]	; (8003660 <main+0x1e0>)
 800355c:	f001 fbb4 	bl	8004cc8 <nrf_init>
	uint32_t packet = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003566:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800356a:	6013      	str	r3, [r2, #0]

	extern char SDPath[4];
	FATFS fileSystem;
	uint8_t testbuff[] = "new run\r\n";
 800356c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8003570:	f103 0308 	add.w	r3, r3, #8
 8003574:	4a3b      	ldr	r2, [pc, #236]	; (8003664 <main+0x1e4>)
 8003576:	3ba0      	subs	r3, #160	; 0xa0
 8003578:	ca07      	ldmia	r2, {r0, r1, r2}
 800357a:	c303      	stmia	r3!, {r0, r1}
 800357c:	801a      	strh	r2, [r3, #0]
	char sdBuff[256];
	FIL logFile;
	UINT tempBytes;
	UINT sdSize = 0;
 800357e:	2300      	movs	r3, #0
 8003580:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8003584:	6013      	str	r3, [r2, #0]
	FRESULT res = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 800358c:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8003590:	7013      	strb	r3, [r2, #0]
	FSIZE_t fsize;
	if (f_mount(&fileSystem, (TCHAR const*) SDPath, 0) == FR_OK) {
 8003592:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8003596:	f103 0308 	add.w	r3, r3, #8
 800359a:	3b14      	subs	r3, #20
 800359c:	2200      	movs	r2, #0
 800359e:	4932      	ldr	r1, [pc, #200]	; (8003668 <main+0x1e8>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f00a f9d7 	bl	800d954 <f_mount>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d165      	bne.n	8003678 <main+0x1f8>
		if (f_open(&logFile, "log.txt", FA_WRITE | FA_OPEN_ALWAYS) == FR_OK) {
 80035ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035b0:	3b10      	subs	r3, #16
 80035b2:	2212      	movs	r2, #18
 80035b4:	492d      	ldr	r1, [pc, #180]	; (800366c <main+0x1ec>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00a fa12 	bl	800d9e0 <f_open>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d137      	bne.n	8003632 <main+0x1b2>
			uint64_t fsize = f_size(&logFile);
 80035c2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80035c6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	461c      	mov	r4, r3
 80035d0:	4615      	mov	r5, r2
 80035d2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80035d6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035da:	e9c3 4500 	strd	r4, r5, [r3]
			f_lseek(&logFile, fsize);
 80035de:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80035e2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035ec:	3b10      	subs	r3, #16
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f00a fdd3 	bl	800e19c <f_lseek>
			if (f_write(&logFile, testbuff, sizeof(testbuff),
 80035f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80035fa:	3b14      	subs	r3, #20
 80035fc:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8003600:	f101 0108 	add.w	r1, r1, #8
 8003604:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8003608:	3810      	subs	r0, #16
 800360a:	220a      	movs	r2, #10
 800360c:	f00a fbb4 	bl	800dd78 <f_write>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <main+0x1a4>
					(void*) &tempBytes) == FR_OK) {
				f_sync(&logFile);
 8003616:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800361a:	3b10      	subs	r3, #16
 800361c:	4618      	mov	r0, r3
 800361e:	f00a fd3f 	bl	800e0a0 <f_sync>
 8003622:	e030      	b.n	8003686 <main+0x206>
			} else {
				log_s("SD_ERR_WRITE");
 8003624:	4812      	ldr	r0, [pc, #72]	; (8003670 <main+0x1f0>)
 8003626:	f7fe f98f 	bl	8001948 <log_s>
				blink_rfled(2);
 800362a:	2002      	movs	r0, #2
 800362c:	f001 fa2a 	bl	8004a84 <blink_rfled>
				goto sd_end_lbl;
 8003630:	e029      	b.n	8003686 <main+0x206>
			}
		} else {
			log_s("SD_ERR_OPEN");
 8003632:	4810      	ldr	r0, [pc, #64]	; (8003674 <main+0x1f4>)
 8003634:	f7fe f988 	bl	8001948 <log_s>
			blink_rfled(2);
 8003638:	2002      	movs	r0, #2
 800363a:	f001 fa23 	bl	8004a84 <blink_rfled>
			goto sd_end_lbl;
 800363e:	e022      	b.n	8003686 <main+0x206>
 8003640:	40023800 	.word	0x40023800
 8003644:	200004b8 	.word	0x200004b8
 8003648:	20000500 	.word	0x20000500
 800364c:	20000548 	.word	0x20000548
 8003650:	08012e28 	.word	0x08012e28
 8003654:	20000590 	.word	0x20000590
 8003658:	20000388 	.word	0x20000388
 800365c:	08012e30 	.word	0x08012e30
 8003660:	20000460 	.word	0x20000460
 8003664:	08012efc 	.word	0x08012efc
 8003668:	200005ec 	.word	0x200005ec
 800366c:	08012e48 	.word	0x08012e48
 8003670:	08012e50 	.word	0x08012e50
 8003674:	08012e60 	.word	0x08012e60
		}
	} else {
		log_s("SD_ERR_MOUNT");
 8003678:	48d9      	ldr	r0, [pc, #868]	; (80039e0 <main+0x560>)
 800367a:	f7fe f965 	bl	8001948 <log_s>
		blink_rfled(2);
 800367e:	2002      	movs	r0, #2
 8003680:	f001 fa00 	bl	8004a84 <blink_rfled>
		goto sd_end_lbl;
 8003684:	bf00      	nop
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uint32_t last_t; //,test_t;
	float pitch, roll;
	float max_height=0,start_height=0;
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800368e:	f102 021c 	add.w	r2, r2, #28
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800369c:	f102 0218 	add.w	r2, r2, #24
 80036a0:	6013      	str	r3, [r2, #0]
	uint32_t max_height_t = 0,max_accel_t=0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036a8:	f102 0214 	add.w	r2, r2, #20
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	2300      	movs	r3, #0
 80036b0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036b4:	f102 0210 	add.w	r2, r2, #16
 80036b8:	6013      	str	r3, [r2, #0]
	uint8_t start_flag=0,end_flag=0,motor_flag=0,enable_compensate_flag=0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036c0:	f102 020f 	add.w	r2, r2, #15
 80036c4:	7013      	strb	r3, [r2, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036cc:	f102 020e 	add.w	r2, r2, #14
 80036d0:	7013      	strb	r3, [r2, #0]
 80036d2:	2300      	movs	r3, #0
 80036d4:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036d8:	f102 020d 	add.w	r2, r2, #13
 80036dc:	7013      	strb	r3, [r2, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80036e4:	f102 020c 	add.w	r2, r2, #12
 80036e8:	7013      	strb	r3, [r2, #0]

	log_s_int("con 0", constrain(2, -1, 1));
 80036ea:	2101      	movs	r1, #1
 80036ec:	48bd      	ldr	r0, [pc, #756]	; (80039e4 <main+0x564>)
 80036ee:	f7fe f965 	bl	80019bc <log_s_int>
	log_s_int("con 2", constrain(2, 1, -1));
 80036f2:	2101      	movs	r1, #1
 80036f4:	48bc      	ldr	r0, [pc, #752]	; (80039e8 <main+0x568>)
 80036f6:	f7fe f961 	bl	80019bc <log_s_int>
	log_s_int("con -10", constrain(-10, -1, 1));
 80036fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036fe:	48bb      	ldr	r0, [pc, #748]	; (80039ec <main+0x56c>)
 8003700:	f7fe f95c 	bl	80019bc <log_s_int>
	// madgwick
	log_s_p_3("ADXL", &data.adxl345.ax, &data.adxl345.ay, &data.adxl345.az);
 8003704:	4bba      	ldr	r3, [pc, #744]	; (80039f0 <main+0x570>)
 8003706:	4abb      	ldr	r2, [pc, #748]	; (80039f4 <main+0x574>)
 8003708:	49bb      	ldr	r1, [pc, #748]	; (80039f8 <main+0x578>)
 800370a:	48bc      	ldr	r0, [pc, #752]	; (80039fc <main+0x57c>)
 800370c:	f7fe f96c 	bl	80019e8 <log_s_p_3>
	log_s_p_3("ACCEL", &data.lsm303dlhc.ax, &data.lsm303dlhc.ay,
 8003710:	4bbb      	ldr	r3, [pc, #748]	; (8003a00 <main+0x580>)
 8003712:	4abc      	ldr	r2, [pc, #752]	; (8003a04 <main+0x584>)
 8003714:	49bc      	ldr	r1, [pc, #752]	; (8003a08 <main+0x588>)
 8003716:	48bd      	ldr	r0, [pc, #756]	; (8003a0c <main+0x58c>)
 8003718:	f7fe f966 	bl	80019e8 <log_s_p_3>
			&data.lsm303dlhc.az);
	log_s_p_3("GYRO", &data.l3g4200d.gx, &data.l3g4200d.gy, &data.l3g4200d.gz);
 800371c:	4bbc      	ldr	r3, [pc, #752]	; (8003a10 <main+0x590>)
 800371e:	4abd      	ldr	r2, [pc, #756]	; (8003a14 <main+0x594>)
 8003720:	49bd      	ldr	r1, [pc, #756]	; (8003a18 <main+0x598>)
 8003722:	48be      	ldr	r0, [pc, #760]	; (8003a1c <main+0x59c>)
 8003724:	f7fe f960 	bl	80019e8 <log_s_p_3>
	log_s_p_3("MAG", &data.lsm303dlhc_mag.mx_raw, &data.lsm303dlhc_mag.my_raw,
 8003728:	4bbd      	ldr	r3, [pc, #756]	; (8003a20 <main+0x5a0>)
 800372a:	4abe      	ldr	r2, [pc, #760]	; (8003a24 <main+0x5a4>)
 800372c:	49be      	ldr	r1, [pc, #760]	; (8003a28 <main+0x5a8>)
 800372e:	48bf      	ldr	r0, [pc, #764]	; (8003a2c <main+0x5ac>)
 8003730:	f7fe f95a 	bl	80019e8 <log_s_p_3>
			&data.lsm303dlhc_mag.mz_raw);
	uint32_t ahrs_t = HAL_GetTick();
 8003734:	f002 f8b8 	bl	80058a8 <HAL_GetTick>
 8003738:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800373c:	f103 0308 	add.w	r3, r3, #8
 8003740:	6018      	str	r0, [r3, #0]
	uint16_t hz = 0;
 8003742:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003746:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 800374a:	2200      	movs	r2, #0
 800374c:	801a      	strh	r2, [r3, #0]
	uint32_t hz_t = HAL_GetTick();
 800374e:	f002 f8ab 	bl	80058a8 <HAL_GetTick>
 8003752:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003756:	f103 0304 	add.w	r3, r3, #4
 800375a:	6018      	str	r0, [r3, #0]
	log_s_p("HZ", &hz);
 800375c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003760:	3b16      	subs	r3, #22
 8003762:	4619      	mov	r1, r3
 8003764:	48b2      	ldr	r0, [pc, #712]	; (8003a30 <main+0x5b0>)
 8003766:	f7fe f95b 	bl	8001a20 <log_s_p>
	mahony_print_ptr();
 800376a:	f7fe fe27 	bl	80023bc <mahony_print_ptr>
	//char *log_chars[50];
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (!adxl_check_connection()) {
 800376e:	f7fd fd2b 	bl	80011c8 <adxl_check_connection>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <main+0x300>
			I2C_ClearBusyFlagErratum(&hi2c1, 100);
 8003778:	2164      	movs	r1, #100	; 0x64
 800377a:	48ae      	ldr	r0, [pc, #696]	; (8003a34 <main+0x5b4>)
 800377c:	f001 f9da 	bl	8004b34 <I2C_ClearBusyFlagErratum>
		}
		GY801_update_data();
 8003780:	f7fe faa8 	bl	8001cd4 <GY801_update_data>
		hz += 1;
 8003784:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003788:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	3301      	adds	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003796:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 800379a:	801a      	strh	r2, [r3, #0]
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800379c:	f002 f884 	bl	80058a8 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80037a6:	f103 0308 	add.w	r3, r3, #8
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8003a38 <main+0x5b8>
 80037ba:	ee87 8a87 	vdiv.f32	s16, s15, s14
				(float) data.l3g4200d.gx * M_PI / 180 / 131,
 80037be:	4b9f      	ldr	r3, [pc, #636]	; (8003a3c <main+0x5bc>)
 80037c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80037c4:	ee07 3a90 	vmov	s15, r3
 80037c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037cc:	ee17 0a90 	vmov	r0, s15
 80037d0:	f7fc fec2 	bl	8000558 <__aeabi_f2d>
 80037d4:	a37c      	add	r3, pc, #496	; (adr r3, 80039c8 <main+0x548>)
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f7fc ff15 	bl	8000608 <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	4b95      	ldr	r3, [pc, #596]	; (8003a40 <main+0x5c0>)
 80037ec:	f7fd f836 	bl	800085c <__aeabi_ddiv>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	a375      	add	r3, pc, #468	; (adr r3, 80039d0 <main+0x550>)
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f7fd f82d 	bl	800085c <__aeabi_ddiv>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	f7fd f9d5 	bl	8000bb8 <__aeabi_d2f>
 800380e:	4604      	mov	r4, r0
				(float) data.l3g4200d.gy * M_PI / 180 / 131,
 8003810:	4b8a      	ldr	r3, [pc, #552]	; (8003a3c <main+0x5bc>)
 8003812:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800381e:	ee17 0a90 	vmov	r0, s15
 8003822:	f7fc fe99 	bl	8000558 <__aeabi_f2d>
 8003826:	a368      	add	r3, pc, #416	; (adr r3, 80039c8 <main+0x548>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fc feec 	bl	8000608 <__aeabi_dmul>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4610      	mov	r0, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	4b80      	ldr	r3, [pc, #512]	; (8003a40 <main+0x5c0>)
 800383e:	f7fd f80d 	bl	800085c <__aeabi_ddiv>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4610      	mov	r0, r2
 8003848:	4619      	mov	r1, r3
 800384a:	a361      	add	r3, pc, #388	; (adr r3, 80039d0 <main+0x550>)
 800384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003850:	f7fd f804 	bl	800085c <__aeabi_ddiv>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	f7fd f9ac 	bl	8000bb8 <__aeabi_d2f>
 8003860:	4605      	mov	r5, r0
				(float) data.l3g4200d.gz * M_PI / 180 / 131,
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <main+0x5bc>)
 8003864:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003868:	ee07 3a90 	vmov	s15, r3
 800386c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003870:	ee17 0a90 	vmov	r0, s15
 8003874:	f7fc fe70 	bl	8000558 <__aeabi_f2d>
 8003878:	a353      	add	r3, pc, #332	; (adr r3, 80039c8 <main+0x548>)
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f7fc fec3 	bl	8000608 <__aeabi_dmul>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <main+0x5c0>)
 8003890:	f7fc ffe4 	bl	800085c <__aeabi_ddiv>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	a34c      	add	r3, pc, #304	; (adr r3, 80039d0 <main+0x550>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc ffdb 	bl	800085c <__aeabi_ddiv>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fd f983 	bl	8000bb8 <__aeabi_d2f>
 80038b2:	4606      	mov	r6, r0
				(float) data.adxl345.ay * 9.81 / 32.0f,
 80038b4:	4b61      	ldr	r3, [pc, #388]	; (8003a3c <main+0x5bc>)
 80038b6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c2:	ee17 0a90 	vmov	r0, s15
 80038c6:	f7fc fe47 	bl	8000558 <__aeabi_f2d>
 80038ca:	a343      	add	r3, pc, #268	; (adr r3, 80039d8 <main+0x558>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f7fc fe9a 	bl	8000608 <__aeabi_dmul>
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <main+0x5c4>)
 80038e2:	f7fc ffbb 	bl	800085c <__aeabi_ddiv>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	f7fd f963 	bl	8000bb8 <__aeabi_d2f>
 80038f2:	4680      	mov	r8, r0
				(float) data.adxl345.ax * 9.81 / 32.0f,
 80038f4:	4b51      	ldr	r3, [pc, #324]	; (8003a3c <main+0x5bc>)
 80038f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003902:	ee17 0a90 	vmov	r0, s15
 8003906:	f7fc fe27 	bl	8000558 <__aeabi_f2d>
 800390a:	a333      	add	r3, pc, #204	; (adr r3, 80039d8 <main+0x558>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fe7a 	bl	8000608 <__aeabi_dmul>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	4b48      	ldr	r3, [pc, #288]	; (8003a44 <main+0x5c4>)
 8003922:	f7fc ff9b 	bl	800085c <__aeabi_ddiv>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	f7fd f943 	bl	8000bb8 <__aeabi_d2f>
 8003932:	4681      	mov	r9, r0
				(float) data.adxl345.az * 9.81 / 32.0f,
 8003934:	4b41      	ldr	r3, [pc, #260]	; (8003a3c <main+0x5bc>)
 8003936:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800393a:	ee07 3a90 	vmov	s15, r3
 800393e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003942:	ee17 0a90 	vmov	r0, s15
 8003946:	f7fc fe07 	bl	8000558 <__aeabi_f2d>
 800394a:	a323      	add	r3, pc, #140	; (adr r3, 80039d8 <main+0x558>)
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f7fc fe5a 	bl	8000608 <__aeabi_dmul>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <main+0x5c4>)
 8003962:	f7fc ff7b 	bl	800085c <__aeabi_ddiv>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	f7fd f923 	bl	8000bb8 <__aeabi_d2f>
 8003972:	4682      	mov	sl, r0
				(float) data.lsm303dlhc_mag.mx / 450,
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <main+0x5bc>)
 8003976:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800397a:	4610      	mov	r0, r2
 800397c:	4619      	mov	r1, r3
 800397e:	f7fd f91b 	bl	8000bb8 <__aeabi_d2f>
 8003982:	ee07 0a10 	vmov	s14, r0
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 8003986:	eddf 7a30 	vldr	s15, [pc, #192]	; 8003a48 <main+0x5c8>
 800398a:	eec7 8a27 	vdiv.f32	s17, s14, s15
				(float) data.lsm303dlhc_mag.my / 450,
 800398e:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <main+0x5bc>)
 8003990:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003994:	4610      	mov	r0, r2
 8003996:	4619      	mov	r1, r3
 8003998:	f7fd f90e 	bl	8000bb8 <__aeabi_d2f>
 800399c:	ee07 0a10 	vmov	s14, r0
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 80039a0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8003a48 <main+0x5c8>
 80039a4:	ee87 9a27 	vdiv.f32	s18, s14, s15
				(float) data.lsm303dlhc_mag.mz / 450);
 80039a8:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <main+0x5bc>)
 80039aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f901 	bl	8000bb8 <__aeabi_d2f>
 80039b6:	ee06 0a90 	vmov	s13, r0
		mahony_update((float) (HAL_GetTick() - ahrs_t) / 1000.0f,
 80039ba:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003a48 <main+0x5c8>
 80039be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c2:	eef0 4a67 	vmov.f32	s9, s15
 80039c6:	e041      	b.n	8003a4c <main+0x5cc>
 80039c8:	54442d18 	.word	0x54442d18
 80039cc:	400921fb 	.word	0x400921fb
 80039d0:	00000000 	.word	0x00000000
 80039d4:	40606000 	.word	0x40606000
 80039d8:	51eb851f 	.word	0x51eb851f
 80039dc:	40239eb8 	.word	0x40239eb8
 80039e0:	08012e6c 	.word	0x08012e6c
 80039e4:	08012e7c 	.word	0x08012e7c
 80039e8:	08012e84 	.word	0x08012e84
 80039ec:	08012e8c 	.word	0x08012e8c
 80039f0:	200005a4 	.word	0x200005a4
 80039f4:	200005a2 	.word	0x200005a2
 80039f8:	200005a0 	.word	0x200005a0
 80039fc:	08012e94 	.word	0x08012e94
 8003a00:	200005ac 	.word	0x200005ac
 8003a04:	200005aa 	.word	0x200005aa
 8003a08:	200005a8 	.word	0x200005a8
 8003a0c:	08012e9c 	.word	0x08012e9c
 8003a10:	200005b4 	.word	0x200005b4
 8003a14:	200005b2 	.word	0x200005b2
 8003a18:	200005b0 	.word	0x200005b0
 8003a1c:	08012ea4 	.word	0x08012ea4
 8003a20:	200005bc 	.word	0x200005bc
 8003a24:	200005ba 	.word	0x200005ba
 8003a28:	200005b8 	.word	0x200005b8
 8003a2c:	08012eac 	.word	0x08012eac
 8003a30:	08012eb0 	.word	0x08012eb0
 8003a34:	20000388 	.word	0x20000388
 8003a38:	447a0000 	.word	0x447a0000
 8003a3c:	20000590 	.word	0x20000590
 8003a40:	40668000 	.word	0x40668000
 8003a44:	40400000 	.word	0x40400000
 8003a48:	43e10000 	.word	0x43e10000
 8003a4c:	eeb0 4a49 	vmov.f32	s8, s18
 8003a50:	eef0 3a68 	vmov.f32	s7, s17
 8003a54:	ee03 aa10 	vmov	s6, sl
 8003a58:	ee02 9a90 	vmov	s5, r9
 8003a5c:	ee02 8a10 	vmov	s4, r8
 8003a60:	ee01 6a90 	vmov	s3, r6
 8003a64:	ee01 5a10 	vmov	s2, r5
 8003a68:	ee00 4a90 	vmov	s1, r4
 8003a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8003a70:	f7fe fcb6 	bl	80023e0 <mahony_update>
		//log_s_int("AHRS_T", HAL_GetTick() - ahrs_t);
		ahrs_t = HAL_GetTick();
 8003a74:	f001 ff18 	bl	80058a8 <HAL_GetTick>
 8003a78:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003a7c:	f103 0308 	add.w	r3, r3, #8
 8003a80:	6018      	str	r0, [r3, #0]
		pitch = (enable_compensate_flag==1)?constrain(mahony_getPitch(),-20,20):0  + 10;
 8003a82:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003a86:	f103 030c 	add.w	r3, r3, #12
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d120      	bne.n	8003ad2 <main+0x652>
 8003a90:	f7ff fc88 	bl	80033a4 <mahony_getPitch>
 8003a94:	eef0 7a40 	vmov.f32	s15, s0
 8003a98:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	dd02      	ble.n	8003aac <main+0x62c>
 8003aa6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003aaa:	e014      	b.n	8003ad6 <main+0x656>
 8003aac:	f7ff fc7a 	bl	80033a4 <mahony_getPitch>
 8003ab0:	eef0 7a40 	vmov.f32	s15, s0
 8003ab4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8003ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d502      	bpl.n	8003ac8 <main+0x648>
 8003ac2:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8003ac6:	e006      	b.n	8003ad6 <main+0x656>
 8003ac8:	f7ff fc6c 	bl	80033a4 <mahony_getPitch>
 8003acc:	eef0 7a40 	vmov.f32	s15, s0
 8003ad0:	e001      	b.n	8003ad6 <main+0x656>
 8003ad2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003ad6:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003ada:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8003ade:	edc3 7a00 	vstr	s15, [r3]
		roll = (enable_compensate_flag==1)?constrain(mahony_getRoll(),-20,20):0 + 10;
 8003ae2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003ae6:	f103 030c 	add.w	r3, r3, #12
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d120      	bne.n	8003b32 <main+0x6b2>
 8003af0:	f7ff fc44 	bl	800337c <mahony_getRoll>
 8003af4:	eef0 7a40 	vmov.f32	s15, s0
 8003af8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b04:	dd02      	ble.n	8003b0c <main+0x68c>
 8003b06:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8003b0a:	e014      	b.n	8003b36 <main+0x6b6>
 8003b0c:	f7ff fc36 	bl	800337c <mahony_getRoll>
 8003b10:	eef0 7a40 	vmov.f32	s15, s0
 8003b14:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8003b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b20:	d502      	bpl.n	8003b28 <main+0x6a8>
 8003b22:	eefb 7a04 	vmov.f32	s15, #180	; 0xc1a00000 -20.0
 8003b26:	e006      	b.n	8003b36 <main+0x6b6>
 8003b28:	f7ff fc28 	bl	800337c <mahony_getRoll>
 8003b2c:	eef0 7a40 	vmov.f32	s15, s0
 8003b30:	e001      	b.n	8003b36 <main+0x6b6>
 8003b32:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003b36:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003b3a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003b3e:	edc3 7a00 	vstr	s15, [r3]
		htim2.Instance->CCR1 = constrain(
 8003b42:	2319      	movs	r3, #25
 8003b44:	227d      	movs	r2, #125	; 0x7d
 8003b46:	215a      	movs	r1, #90	; 0x5a
 8003b48:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b4c:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b50:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8003b54:	ed94 0a00 	vldr	s0, [r4]
 8003b58:	f7ff fc4c 	bl	80033f4 <map>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b7d      	cmp	r3, #125	; 0x7d
 8003b60:	dc20      	bgt.n	8003ba4 <main+0x724>
 8003b62:	2319      	movs	r3, #25
 8003b64:	227d      	movs	r2, #125	; 0x7d
 8003b66:	215a      	movs	r1, #90	; 0x5a
 8003b68:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b6c:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b70:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8003b74:	ed94 0a00 	vldr	s0, [r4]
 8003b78:	f7ff fc3c 	bl	80033f4 <map>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b18      	cmp	r3, #24
 8003b80:	dd0e      	ble.n	8003ba0 <main+0x720>
 8003b82:	2319      	movs	r3, #25
 8003b84:	227d      	movs	r2, #125	; 0x7d
 8003b86:	215a      	movs	r1, #90	; 0x5a
 8003b88:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003b8c:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003b90:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8003b94:	ed94 0a00 	vldr	s0, [r4]
 8003b98:	f7ff fc2c 	bl	80033f4 <map>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	e002      	b.n	8003ba6 <main+0x726>
 8003ba0:	2319      	movs	r3, #25
 8003ba2:	e000      	b.n	8003ba6 <main+0x726>
 8003ba4:	237d      	movs	r3, #125	; 0x7d
 8003ba6:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <main+0x790>)
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	6353      	str	r3, [r2, #52]	; 0x34
				map(/*(pitch<15+21 && pitch> -15+21)?pitch:21*/pitch, -90, 90,
						125, 25), 25, 125);
		htim3.Instance->CCR1 = constrain(
 8003bac:	237d      	movs	r3, #125	; 0x7d
 8003bae:	2219      	movs	r2, #25
 8003bb0:	215a      	movs	r1, #90	; 0x5a
 8003bb2:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003bb6:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003bba:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8003bbe:	ed94 0a00 	vldr	s0, [r4]
 8003bc2:	f7ff fc17 	bl	80033f4 <map>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b7d      	cmp	r3, #125	; 0x7d
 8003bca:	dc23      	bgt.n	8003c14 <main+0x794>
 8003bcc:	237d      	movs	r3, #125	; 0x7d
 8003bce:	2219      	movs	r2, #25
 8003bd0:	215a      	movs	r1, #90	; 0x5a
 8003bd2:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003bd6:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003bda:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8003bde:	ed94 0a00 	vldr	s0, [r4]
 8003be2:	f7ff fc07 	bl	80033f4 <map>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b18      	cmp	r3, #24
 8003bea:	dd0e      	ble.n	8003c0a <main+0x78a>
 8003bec:	237d      	movs	r3, #125	; 0x7d
 8003bee:	2219      	movs	r2, #25
 8003bf0:	215a      	movs	r1, #90	; 0x5a
 8003bf2:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003bf6:	f507 5407 	add.w	r4, r7, #8640	; 0x21c0
 8003bfa:	f104 0428 	add.w	r4, r4, #40	; 0x28
 8003bfe:	ed94 0a00 	vldr	s0, [r4]
 8003c02:	f7ff fbf7 	bl	80033f4 <map>
 8003c06:	4603      	mov	r3, r0
 8003c08:	e005      	b.n	8003c16 <main+0x796>
 8003c0a:	2319      	movs	r3, #25
 8003c0c:	e003      	b.n	8003c16 <main+0x796>
 8003c0e:	bf00      	nop
 8003c10:	200004b8 	.word	0x200004b8
 8003c14:	237d      	movs	r3, #125	; 0x7d
 8003c16:	4ad0      	ldr	r2, [pc, #832]	; (8003f58 <main+0xad8>)
 8003c18:	6812      	ldr	r2, [r2, #0]
 8003c1a:	6353      	str	r3, [r2, #52]	; 0x34
				map(/*(roll<15-23 && roll> -15-23)?roll:-23*/roll, -90, 90, 25,
						125), 25, 125);

		if (HAL_GetTick() - hz_t >= 1000) {
 8003c1c:	f001 fe44 	bl	80058a8 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c26:	f103 0304 	add.w	r3, r3, #4
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c32:	d315      	bcc.n	8003c60 <main+0x7e0>
			hz_t = HAL_GetTick();
 8003c34:	f001 fe38 	bl	80058a8 <HAL_GetTick>
 8003c38:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c3c:	f103 0304 	add.w	r3, r3, #4
 8003c40:	6018      	str	r0, [r3, #0]
			log_s_int("HZ", hz);
 8003c42:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003c46:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	48c3      	ldr	r0, [pc, #780]	; (8003f5c <main+0xadc>)
 8003c50:	f7fd feb4 	bl	80019bc <log_s_int>
			hz = 0;
 8003c54:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8003c58:	f5a3 73eb 	sub.w	r3, r3, #470	; 0x1d6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	801a      	strh	r2, [r3, #0]
		}

		if (HAL_GetTick() - last_t >= 100) {
 8003c60:	f001 fe22 	bl	80058a8 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c6a:	f103 0320 	add.w	r3, r3, #32
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b63      	cmp	r3, #99	; 0x63
 8003c74:	f67f ad7b 	bls.w	800376e <main+0x2ee>
			last_t = HAL_GetTick();
 8003c78:	f001 fe16 	bl	80058a8 <HAL_GetTick>
 8003c7c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c80:	f103 0320 	add.w	r3, r3, #32
 8003c84:	6018      	str	r0, [r3, #0]
			BMP180_upd_data();
 8003c86:	f7fd fe2d 	bl	80018e4 <BMP180_upd_data>
			nrf_data[0] = (packet >> 8 * 0) & 0xFF;
 8003c8a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003c8e:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003c9a:	f102 0208 	add.w	r2, r2, #8
 8003c9e:	7013      	strb	r3, [r2, #0]
			nrf_data[1] = (packet >> 8 * 1) & 0xFF;
 8003ca0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003ca4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	0a1b      	lsrs	r3, r3, #8
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003cb2:	f102 0209 	add.w	r2, r2, #9
 8003cb6:	7013      	strb	r3, [r2, #0]
			nrf_data[2] = (packet >> 8 * 2) & 0xFF;
 8003cb8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003cbc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	0c1b      	lsrs	r3, r3, #16
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003cca:	f102 020a 	add.w	r2, r2, #10
 8003cce:	7013      	strb	r3, [r2, #0]
			nrf_data[3] = (packet >> 8 * 3) & 0xFF;
 8003cd0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8003cd4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	0e1b      	lsrs	r3, r3, #24
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ce2:	f102 020b 	add.w	r2, r2, #11
 8003ce6:	7013      	strb	r3, [r2, #0]
			nrf_data[4] = ((uint16_t) (data.bmp180.pressure / 10) >> 8 * 0)
 8003ce8:	4b9d      	ldr	r3, [pc, #628]	; (8003f60 <main+0xae0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a9d      	ldr	r2, [pc, #628]	; (8003f64 <main+0xae4>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	08db      	lsrs	r3, r3, #3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003cfa:	f102 020c 	add.w	r2, r2, #12
 8003cfe:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[5] = ((uint16_t) (data.bmp180.pressure / 10) >> 8 * 1)
 8003d00:	4b97      	ldr	r3, [pc, #604]	; (8003f60 <main+0xae0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a97      	ldr	r2, [pc, #604]	; (8003f64 <main+0xae4>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	08db      	lsrs	r3, r3, #3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d18:	f102 020d 	add.w	r2, r2, #13
 8003d1c:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[6] = (data.adxl345.ay >> 8 * 0) & 0xFF;
 8003d1e:	4b90      	ldr	r3, [pc, #576]	; (8003f60 <main+0xae0>)
 8003d20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d2a:	f102 020e 	add.w	r2, r2, #14
 8003d2e:	7013      	strb	r3, [r2, #0]
			nrf_data[7] = (data.adxl345.ay >> 8 * 1) & 0xFF;
 8003d30:	4b8b      	ldr	r3, [pc, #556]	; (8003f60 <main+0xae0>)
 8003d32:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003d36:	121b      	asrs	r3, r3, #8
 8003d38:	b21b      	sxth	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d40:	f102 020f 	add.w	r2, r2, #15
 8003d44:	7013      	strb	r3, [r2, #0]
			nrf_data[8] = (data.adxl345.ax >> 8 * 0) & 0xFF;
 8003d46:	4b86      	ldr	r3, [pc, #536]	; (8003f60 <main+0xae0>)
 8003d48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d52:	f102 0210 	add.w	r2, r2, #16
 8003d56:	7013      	strb	r3, [r2, #0]
			nrf_data[9] = (data.adxl345.ax >> 8 * 1) & 0xFF;
 8003d58:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <main+0xae0>)
 8003d5a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003d5e:	121b      	asrs	r3, r3, #8
 8003d60:	b21b      	sxth	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d68:	f102 0211 	add.w	r2, r2, #17
 8003d6c:	7013      	strb	r3, [r2, #0]
			nrf_data[10] = (data.adxl345.az >> 8 * 0) & 0xFF;
 8003d6e:	4b7c      	ldr	r3, [pc, #496]	; (8003f60 <main+0xae0>)
 8003d70:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d7a:	f102 0212 	add.w	r2, r2, #18
 8003d7e:	7013      	strb	r3, [r2, #0]
			nrf_data[11] = (data.adxl345.az >> 8 * 1) & 0xFF;
 8003d80:	4b77      	ldr	r3, [pc, #476]	; (8003f60 <main+0xae0>)
 8003d82:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003d86:	121b      	asrs	r3, r3, #8
 8003d88:	b21b      	sxth	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003d90:	f102 0213 	add.w	r2, r2, #19
 8003d94:	7013      	strb	r3, [r2, #0]
			nrf_data[12] = (data.l3g4200d.gx >> 8 * 0) & 0xFF;
 8003d96:	4b72      	ldr	r3, [pc, #456]	; (8003f60 <main+0xae0>)
 8003d98:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003da2:	f102 0214 	add.w	r2, r2, #20
 8003da6:	7013      	strb	r3, [r2, #0]
			nrf_data[13] = (data.l3g4200d.gx >> 8 * 1) & 0xFF;
 8003da8:	4b6d      	ldr	r3, [pc, #436]	; (8003f60 <main+0xae0>)
 8003daa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003dae:	121b      	asrs	r3, r3, #8
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003db8:	f102 0215 	add.w	r2, r2, #21
 8003dbc:	7013      	strb	r3, [r2, #0]
			nrf_data[14] = (data.l3g4200d.gy >> 8 * 0) & 0xFF;
 8003dbe:	4b68      	ldr	r3, [pc, #416]	; (8003f60 <main+0xae0>)
 8003dc0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003dca:	f102 0216 	add.w	r2, r2, #22
 8003dce:	7013      	strb	r3, [r2, #0]
			nrf_data[15] = (data.l3g4200d.gy >> 8 * 1) & 0xFF;
 8003dd0:	4b63      	ldr	r3, [pc, #396]	; (8003f60 <main+0xae0>)
 8003dd2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8003dd6:	121b      	asrs	r3, r3, #8
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003de0:	f102 0217 	add.w	r2, r2, #23
 8003de4:	7013      	strb	r3, [r2, #0]
			nrf_data[16] = (data.l3g4200d.gz >> 8 * 0) & 0xFF;
 8003de6:	4b5e      	ldr	r3, [pc, #376]	; (8003f60 <main+0xae0>)
 8003de8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003df2:	f102 0218 	add.w	r2, r2, #24
 8003df6:	7013      	strb	r3, [r2, #0]
			nrf_data[17] = (data.l3g4200d.gz >> 8 * 1) & 0xFF;
 8003df8:	4b59      	ldr	r3, [pc, #356]	; (8003f60 <main+0xae0>)
 8003dfa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8003dfe:	121b      	asrs	r3, r3, #8
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e08:	f102 0219 	add.w	r2, r2, #25
 8003e0c:	7013      	strb	r3, [r2, #0]
			nrf_data[18] = (data.lsm303dlhc_mag.mx_raw >> 8 * 0) & 0xFF;
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <main+0xae0>)
 8003e10:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e1a:	f102 021a 	add.w	r2, r2, #26
 8003e1e:	7013      	strb	r3, [r2, #0]
			nrf_data[19] = (data.lsm303dlhc_mag.mx_raw >> 8 * 1) & 0xFF;
 8003e20:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <main+0xae0>)
 8003e22:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003e26:	121b      	asrs	r3, r3, #8
 8003e28:	b21b      	sxth	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e30:	f102 021b 	add.w	r2, r2, #27
 8003e34:	7013      	strb	r3, [r2, #0]
			nrf_data[20] = (data.lsm303dlhc_mag.my_raw >> 8 * 0) & 0xFF;
 8003e36:	4b4a      	ldr	r3, [pc, #296]	; (8003f60 <main+0xae0>)
 8003e38:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e42:	f102 021c 	add.w	r2, r2, #28
 8003e46:	7013      	strb	r3, [r2, #0]
			nrf_data[21] = (data.lsm303dlhc_mag.my_raw >> 8 * 1) & 0xFF;
 8003e48:	4b45      	ldr	r3, [pc, #276]	; (8003f60 <main+0xae0>)
 8003e4a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003e4e:	121b      	asrs	r3, r3, #8
 8003e50:	b21b      	sxth	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e58:	f102 021d 	add.w	r2, r2, #29
 8003e5c:	7013      	strb	r3, [r2, #0]
			nrf_data[22] = (data.lsm303dlhc_mag.mz_raw >> 8 * 0) & 0xFF;
 8003e5e:	4b40      	ldr	r3, [pc, #256]	; (8003f60 <main+0xae0>)
 8003e60:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e6a:	f102 021e 	add.w	r2, r2, #30
 8003e6e:	7013      	strb	r3, [r2, #0]
			nrf_data[23] = (data.lsm303dlhc_mag.mz_raw >> 8 * 1) & 0xFF;
 8003e70:	4b3b      	ldr	r3, [pc, #236]	; (8003f60 <main+0xae0>)
 8003e72:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8003e76:	121b      	asrs	r3, r3, #8
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003e80:	f102 021f 	add.w	r2, r2, #31
 8003e84:	7013      	strb	r3, [r2, #0]
			nrf_data[24] = ((int16_t) (mahony_getRoll() * 100) >> 8 * 0) & 0xFF;
 8003e86:	f7ff fa79 	bl	800337c <mahony_getRoll>
 8003e8a:	eef0 7a40 	vmov.f32	s15, s0
 8003e8e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003f68 <main+0xae8>
 8003e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e9a:	ee17 3a90 	vmov	r3, s15
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ea6:	f102 0220 	add.w	r2, r2, #32
 8003eaa:	7013      	strb	r3, [r2, #0]
			nrf_data[25] = ((int16_t) (mahony_getRoll() * 100) >> 8 * 1) & 0xFF;
 8003eac:	f7ff fa66 	bl	800337c <mahony_getRoll>
 8003eb0:	eef0 7a40 	vmov.f32	s15, s0
 8003eb4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003f68 <main+0xae8>
 8003eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ec0:	ee17 3a90 	vmov	r3, s15
 8003ec4:	b21b      	sxth	r3, r3
 8003ec6:	121b      	asrs	r3, r3, #8
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ed0:	f102 0221 	add.w	r2, r2, #33	; 0x21
 8003ed4:	7013      	strb	r3, [r2, #0]
			nrf_data[26] = ((int16_t) (mahony_getPitch() * 100) >> 8 * 0)
 8003ed6:	f7ff fa65 	bl	80033a4 <mahony_getPitch>
 8003eda:	eef0 7a40 	vmov.f32	s15, s0
 8003ede:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003f68 <main+0xae8>
 8003ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eea:	ee17 3a90 	vmov	r3, s15
 8003eee:	b21b      	sxth	r3, r3
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003ef6:	f102 0222 	add.w	r2, r2, #34	; 0x22
 8003efa:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[27] = ((int16_t) (mahony_getPitch() * 100) >> 8 * 1)
 8003efc:	f7ff fa52 	bl	80033a4 <mahony_getPitch>
 8003f00:	eef0 7a40 	vmov.f32	s15, s0
 8003f04:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003f68 <main+0xae8>
 8003f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f10:	ee17 3a90 	vmov	r3, s15
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	121b      	asrs	r3, r3, #8
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f20:	f102 0223 	add.w	r2, r2, #35	; 0x23
 8003f24:	7013      	strb	r3, [r2, #0]
					& 0xFF;
			nrf_data[28] = ((int16_t) (mahony_getYaw() * 100) >> 8 * 0) & 0xFF;
 8003f26:	f7ff fa51 	bl	80033cc <mahony_getYaw>
 8003f2a:	eef0 7a40 	vmov.f32	s15, s0
 8003f2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003f68 <main+0xae8>
 8003f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f3a:	ee17 3a90 	vmov	r3, s15
 8003f3e:	b21b      	sxth	r3, r3
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f46:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8003f4a:	7013      	strb	r3, [r2, #0]
			nrf_data[29] = ((int16_t) (mahony_getYaw() * 100) >> 8 * 1) & 0xFF;
 8003f4c:	f7ff fa3e 	bl	80033cc <mahony_getYaw>
 8003f50:	eef0 7a40 	vmov.f32	s15, s0
 8003f54:	e00a      	b.n	8003f6c <main+0xaec>
 8003f56:	bf00      	nop
 8003f58:	20000500 	.word	0x20000500
 8003f5c:	08012eb0 	.word	0x08012eb0
 8003f60:	20000590 	.word	0x20000590
 8003f64:	cccccccd 	.word	0xcccccccd
 8003f68:	42c80000 	.word	0x42c80000
 8003f6c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8003f68 <main+0xae8>
 8003f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f78:	ee17 3a90 	vmov	r3, s15
 8003f7c:	b21b      	sxth	r3, r3
 8003f7e:	121b      	asrs	r3, r3, #8
 8003f80:	b21b      	sxth	r3, r3
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f88:	f102 0225 	add.w	r2, r2, #37	; 0x25
 8003f8c:	7013      	strb	r3, [r2, #0]
			nrf_data[30] = (data.bmp180.temp >> 8 * 0) & 0xFF;
 8003f8e:	4ba8      	ldr	r3, [pc, #672]	; (8004230 <main+0xdb0>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003f98:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8003f9c:	7013      	strb	r3, [r2, #0]
			nrf_data[31] = (data.bmp180.temp >> 8 * 1) & 0xFF;
 8003f9e:	4ba4      	ldr	r3, [pc, #656]	; (8004230 <main+0xdb0>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	121b      	asrs	r3, r3, #8
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f507 5207 	add.w	r2, r7, #8640	; 0x21c0
 8003faa:	f102 0227 	add.w	r2, r2, #39	; 0x27
 8003fae:	7013      	strb	r3, [r2, #0]
			//uint32_t test_t=HAL_GetTick();
			nrf_send(nrf_data);  //2ms
 8003fb0:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8003fb4:	f103 0308 	add.w	r3, r3, #8
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 ffb9 	bl	8004f30 <nrf_send>
			//log_s_int("NRF_T",HAL_GetTick()-test_t);

			memset(sdBuff, 0, sizeof(sdBuff));
 8003fbe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8003fc2:	f103 0308 	add.w	r3, r3, #8
 8003fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f00a fb8f 	bl	800e6f0 <memset>
			sprintf(sdBuff,
 8003fd2:	f001 fc69 	bl	80058a8 <HAL_GetTick>
 8003fd6:	6478      	str	r0, [r7, #68]	; 0x44
					"%ld|%ld|%f|%.1f|%ld|%f|%d|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%d|%d|%d|\r\n",
					packet, HAL_GetTick(), (float) data.bmp180.height,
 8003fd8:	4b95      	ldr	r3, [pc, #596]	; (8004230 <main+0xdb0>)
 8003fda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	f7fc fde9 	bl	8000bb8 <__aeabi_d2f>
 8003fe6:	4603      	mov	r3, r0
			sprintf(sdBuff,
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc fab5 	bl	8000558 <__aeabi_f2d>
 8003fee:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					((float) data.bmp180.temp) / 10, data.bmp180.pressure,
 8003ff2:	4b8f      	ldr	r3, [pc, #572]	; (8004230 <main+0xdb0>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004002:	eec7 6a87 	vdiv.f32	s13, s15, s14
			sprintf(sdBuff,
 8004006:	ee16 0a90 	vmov	r0, s13
 800400a:	f7fc faa5 	bl	8000558 <__aeabi_f2d>
 800400e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004012:	4b87      	ldr	r3, [pc, #540]	; (8004230 <main+0xdb0>)
 8004014:	681e      	ldr	r6, [r3, #0]
					sqrt(pow(data.adxl345.ax,2)+ pow(data.adxl345.ay,2)+ pow(data.adxl345.az,2)),
 8004016:	4b86      	ldr	r3, [pc, #536]	; (8004230 <main+0xdb0>)
 8004018:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800401c:	4618      	mov	r0, r3
 800401e:	f7fc fa89 	bl	8000534 <__aeabi_i2d>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8004228 <main+0xda8>
 800402a:	ec43 2b10 	vmov	d0, r2, r3
 800402e:	f00d fa89 	bl	8011544 <pow>
 8004032:	ec55 4b10 	vmov	r4, r5, d0
 8004036:	4b7e      	ldr	r3, [pc, #504]	; (8004230 <main+0xdb0>)
 8004038:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa79 	bl	8000534 <__aeabi_i2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8004228 <main+0xda8>
 800404a:	ec43 2b10 	vmov	d0, r2, r3
 800404e:	f00d fa79 	bl	8011544 <pow>
 8004052:	ec53 2b10 	vmov	r2, r3, d0
 8004056:	4620      	mov	r0, r4
 8004058:	4629      	mov	r1, r5
 800405a:	f7fc f91f 	bl	800029c <__adddf3>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4614      	mov	r4, r2
 8004064:	461d      	mov	r5, r3
 8004066:	4b72      	ldr	r3, [pc, #456]	; (8004230 <main+0xdb0>)
 8004068:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fc fa61 	bl	8000534 <__aeabi_i2d>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	ed9f 1b6c 	vldr	d1, [pc, #432]	; 8004228 <main+0xda8>
 800407a:	ec43 2b10 	vmov	d0, r2, r3
 800407e:	f00d fa61 	bl	8011544 <pow>
 8004082:	ec53 2b10 	vmov	r2, r3, d0
			sprintf(sdBuff,
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc f907 	bl	800029c <__adddf3>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	ec43 2b17 	vmov	d7, r2, r3
 8004096:	eeb0 0a47 	vmov.f32	s0, s14
 800409a:	eef0 0a67 	vmov.f32	s1, s15
 800409e:	f00d fac1 	bl	8011624 <sqrt>
 80040a2:	eeb0 8a40 	vmov.f32	s16, s0
 80040a6:	eef0 8a60 	vmov.f32	s17, s1
					data.adxl345.ax, data.adxl345.ay, data.adxl345.az,
 80040aa:	4b61      	ldr	r3, [pc, #388]	; (8004230 <main+0xdb0>)
 80040ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
			sprintf(sdBuff,
 80040b0:	643b      	str	r3, [r7, #64]	; 0x40
					data.adxl345.ax, data.adxl345.ay, data.adxl345.az,
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <main+0xdb0>)
 80040b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sprintf(sdBuff,
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					data.adxl345.ax, data.adxl345.ay, data.adxl345.az,
 80040ba:	4b5d      	ldr	r3, [pc, #372]	; (8004230 <main+0xdb0>)
 80040bc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
			sprintf(sdBuff,
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
					data.l3g4200d.gx, data.l3g4200d.gy, data.l3g4200d.gz,
 80040c2:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <main+0xdb0>)
 80040c4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
			sprintf(sdBuff,
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
					data.l3g4200d.gx, data.l3g4200d.gy, data.l3g4200d.gz,
 80040ca:	4b59      	ldr	r3, [pc, #356]	; (8004230 <main+0xdb0>)
 80040cc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
			sprintf(sdBuff,
 80040d0:	623b      	str	r3, [r7, #32]
					data.l3g4200d.gx, data.l3g4200d.gy, data.l3g4200d.gz,
 80040d2:	4b57      	ldr	r3, [pc, #348]	; (8004230 <main+0xdb0>)
 80040d4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
			sprintf(sdBuff,
 80040d8:	61fb      	str	r3, [r7, #28]
					(float) data.lsm303dlhc_mag.mx,
 80040da:	4b55      	ldr	r3, [pc, #340]	; (8004230 <main+0xdb0>)
 80040dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd68 	bl	8000bb8 <__aeabi_d2f>
 80040e8:	4603      	mov	r3, r0
			sprintf(sdBuff,
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc fa34 	bl	8000558 <__aeabi_f2d>
 80040f0:	e9c7 0104 	strd	r0, r1, [r7, #16]
					(float) data.lsm303dlhc_mag.my,
 80040f4:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <main+0xdb0>)
 80040f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80040fa:	4610      	mov	r0, r2
 80040fc:	4619      	mov	r1, r3
 80040fe:	f7fc fd5b 	bl	8000bb8 <__aeabi_d2f>
 8004102:	4603      	mov	r3, r0
			sprintf(sdBuff,
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fa27 	bl	8000558 <__aeabi_f2d>
 800410a:	e9c7 0102 	strd	r0, r1, [r7, #8]
					(float) data.lsm303dlhc_mag.mz,
 800410e:	4b48      	ldr	r3, [pc, #288]	; (8004230 <main+0xdb0>)
 8004110:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	f7fc fd4e 	bl	8000bb8 <__aeabi_d2f>
 800411c:	4603      	mov	r3, r0
			sprintf(sdBuff,
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc fa1a 	bl	8000558 <__aeabi_f2d>
 8004124:	e9c7 0100 	strd	r0, r1, [r7]
					mahony_getRoll(), mahony_getPitch(), mahony_getYaw(),
 8004128:	f7ff f928 	bl	800337c <mahony_getRoll>
 800412c:	ee10 3a10 	vmov	r3, s0
			sprintf(sdBuff,
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fa11 	bl	8000558 <__aeabi_f2d>
 8004136:	4682      	mov	sl, r0
 8004138:	468b      	mov	fp, r1
					mahony_getRoll(), mahony_getPitch(), mahony_getYaw(),
 800413a:	f7ff f933 	bl	80033a4 <mahony_getPitch>
 800413e:	ee10 3a10 	vmov	r3, s0
			sprintf(sdBuff,
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc fa08 	bl	8000558 <__aeabi_f2d>
 8004148:	4680      	mov	r8, r0
 800414a:	4689      	mov	r9, r1
					mahony_getRoll(), mahony_getPitch(), mahony_getYaw(),
 800414c:	f7ff f93e 	bl	80033cc <mahony_getYaw>
 8004150:	ee10 3a10 	vmov	r3, s0
			sprintf(sdBuff,
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f9ff 	bl	8000558 <__aeabi_f2d>
 800415a:	f507 5408 	add.w	r4, r7, #8704	; 0x2200
 800415e:	f104 040f 	add.w	r4, r4, #15
 8004162:	7824      	ldrb	r4, [r4, #0]
 8004164:	f507 5508 	add.w	r5, r7, #8704	; 0x2200
 8004168:	f105 050d 	add.w	r5, r5, #13
 800416c:	782a      	ldrb	r2, [r5, #0]
 800416e:	f507 5508 	add.w	r5, r7, #8704	; 0x2200
 8004172:	f105 050e 	add.w	r5, r5, #14
 8004176:	782b      	ldrb	r3, [r5, #0]
 8004178:	f507 5584 	add.w	r5, r7, #4224	; 0x1080
 800417c:	f105 0508 	add.w	r5, r5, #8
 8004180:	931c      	str	r3, [sp, #112]	; 0x70
 8004182:	921b      	str	r2, [sp, #108]	; 0x6c
 8004184:	941a      	str	r4, [sp, #104]	; 0x68
 8004186:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800418a:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 800418e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8004192:	ed97 7b00 	vldr	d7, [r7]
 8004196:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800419a:	ed97 7b02 	vldr	d7, [r7, #8]
 800419e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80041a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80041a6:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80041aa:	69fa      	ldr	r2, [r7, #28]
 80041ac:	920d      	str	r2, [sp, #52]	; 0x34
 80041ae:	6a3a      	ldr	r2, [r7, #32]
 80041b0:	920c      	str	r2, [sp, #48]	; 0x30
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80041b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b8:	920a      	str	r2, [sp, #40]	; 0x28
 80041ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041bc:	9209      	str	r2, [sp, #36]	; 0x24
 80041be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041c0:	9208      	str	r2, [sp, #32]
 80041c2:	ed8d 8b06 	vstr	d8, [sp, #24]
 80041c6:	9604      	str	r6, [sp, #16]
 80041c8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80041cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80041d0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80041d4:	ed8d 7b00 	vstr	d7, [sp]
 80041d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041da:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80041de:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	4913      	ldr	r1, [pc, #76]	; (8004234 <main+0xdb4>)
 80041e6:	4628      	mov	r0, r5
 80041e8:	f00a fef4 	bl	800efd4 <siprintf>
					start_flag,motor_flag,end_flag);
			//log_s_wnl(sdBuff);
			if (f_write(&logFile, sdBuff, strlen(sdBuff), &tempBytes)
 80041ec:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80041f0:	f103 0308 	add.w	r3, r3, #8
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fb fff3 	bl	80001e0 <strlen>
 80041fa:	4602      	mov	r2, r0
 80041fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004200:	3b14      	subs	r3, #20
 8004202:	f507 5184 	add.w	r1, r7, #4224	; 0x1080
 8004206:	f101 0108 	add.w	r1, r1, #8
 800420a:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800420e:	3810      	subs	r0, #16
 8004210:	f009 fdb2 	bl	800dd78 <f_write>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10e      	bne.n	8004238 <main+0xdb8>
					== FR_OK) {
				f_sync(&logFile);
 800421a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800421e:	3b10      	subs	r3, #16
 8004220:	4618      	mov	r0, r3
 8004222:	f009 ff3d 	bl	800e0a0 <f_sync>
 8004226:	e00b      	b.n	8004240 <main+0xdc0>
 8004228:	00000000 	.word	0x00000000
 800422c:	40000000 	.word	0x40000000
 8004230:	20000590 	.word	0x20000590
 8004234:	08012eb4 	.word	0x08012eb4
			} else
				HAL_GPIO_TogglePin(GPIOC, LED_RF_Pin);
 8004238:	2104      	movs	r1, #4
 800423a:	48b9      	ldr	r0, [pc, #740]	; (8004520 <main+0x10a0>)
 800423c:	f001 fee3 	bl	8006006 <HAL_GPIO_TogglePin>
			/*sprintf((char*) log_chars, "|%c%c|\r\n",(data.adxl345.ax >> 8 * 0) & 0xFF,(data.adxl345.ax >> 8 * 1) & 0xFF);
			 log_s_wnl((const char*) log_chars);*/
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, (packet>50 && packet<100)?GPIO_PIN_SET:GPIO_PIN_RESET);
			if(sqrt(pow(data.adxl345.ax,2)+ pow(data.adxl345.ay,2)+ pow(data.adxl345.az,2))>32*2 && max_accel_t==0 && HAL_GetTick() > 2000){
 8004240:	4bb8      	ldr	r3, [pc, #736]	; (8004524 <main+0x10a4>)
 8004242:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fc f974 	bl	8000534 <__aeabi_i2d>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	ed9f 1bb1 	vldr	d1, [pc, #708]	; 8004518 <main+0x1098>
 8004254:	ec43 2b10 	vmov	d0, r2, r3
 8004258:	f00d f974 	bl	8011544 <pow>
 800425c:	ec55 4b10 	vmov	r4, r5, d0
 8004260:	4bb0      	ldr	r3, [pc, #704]	; (8004524 <main+0x10a4>)
 8004262:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc f964 	bl	8000534 <__aeabi_i2d>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	ed9f 1ba9 	vldr	d1, [pc, #676]	; 8004518 <main+0x1098>
 8004274:	ec43 2b10 	vmov	d0, r2, r3
 8004278:	f00d f964 	bl	8011544 <pow>
 800427c:	ec53 2b10 	vmov	r2, r3, d0
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc f80a 	bl	800029c <__adddf3>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4614      	mov	r4, r2
 800428e:	461d      	mov	r5, r3
 8004290:	4ba4      	ldr	r3, [pc, #656]	; (8004524 <main+0x10a4>)
 8004292:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fc f94c 	bl	8000534 <__aeabi_i2d>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	ed9f 1b9d 	vldr	d1, [pc, #628]	; 8004518 <main+0x1098>
 80042a4:	ec43 2b10 	vmov	d0, r2, r3
 80042a8:	f00d f94c 	bl	8011544 <pow>
 80042ac:	ec53 2b10 	vmov	r2, r3, d0
 80042b0:	4620      	mov	r0, r4
 80042b2:	4629      	mov	r1, r5
 80042b4:	f7fb fff2 	bl	800029c <__adddf3>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	ec43 2b17 	vmov	d7, r2, r3
 80042c0:	eeb0 0a47 	vmov.f32	s0, s14
 80042c4:	eef0 0a67 	vmov.f32	s1, s15
 80042c8:	f00d f9ac 	bl	8011624 <sqrt>
 80042cc:	ec51 0b10 	vmov	r0, r1, d0
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	4b94      	ldr	r3, [pc, #592]	; (8004528 <main+0x10a8>)
 80042d6:	f7fc fc27 	bl	8000b28 <__aeabi_dcmpgt>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <main+0xe88>
 80042e0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80042e4:	f103 0310 	add.w	r3, r3, #16
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10c      	bne.n	8004308 <main+0xe88>
 80042ee:	f001 fadb 	bl	80058a8 <HAL_GetTick>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80042f8:	d906      	bls.n	8004308 <main+0xe88>
				max_accel_t=HAL_GetTick();
 80042fa:	f001 fad5 	bl	80058a8 <HAL_GetTick>
 80042fe:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004302:	f103 0310 	add.w	r3, r3, #16
 8004306:	6018      	str	r0, [r3, #0]
			}
			if(HAL_GetTick()-max_accel_t>2000 && max_accel_t!=0){
 8004308:	f001 face 	bl	80058a8 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004312:	f103 0310 	add.w	r3, r3, #16
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800431e:	d90c      	bls.n	800433a <main+0xeba>
 8004320:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004324:	f103 0310 	add.w	r3, r3, #16
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <main+0xeba>
				enable_compensate_flag=1;
 800432e:	2301      	movs	r3, #1
 8004330:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8004334:	f102 020c 	add.w	r2, r2, #12
 8004338:	7013      	strb	r3, [r2, #0]
			}
			if (HAL_GetTick() > 5000) {
 800433a:	f001 fab5 	bl	80058a8 <HAL_GetTick>
 800433e:	4603      	mov	r3, r0
 8004340:	f241 3288 	movw	r2, #5000	; 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	f240 80d3 	bls.w	80044f0 <main+0x1070>
				if(start_height==0){
 800434a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800434e:	f103 0318 	add.w	r3, r3, #24
 8004352:	edd3 7a00 	vldr	s15, [r3]
 8004356:	eef5 7a40 	vcmp.f32	s15, #0.0
 800435a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800435e:	d10c      	bne.n	800437a <main+0xefa>
					start_height=data.bmp180.height;
 8004360:	4b70      	ldr	r3, [pc, #448]	; (8004524 <main+0x10a4>)
 8004362:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	f7fc fc25 	bl	8000bb8 <__aeabi_d2f>
 800436e:	4603      	mov	r3, r0
 8004370:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8004374:	f102 0218 	add.w	r2, r2, #24
 8004378:	6013      	str	r3, [r2, #0]
				}
				if (data.bmp180.height-start_height>10){
 800437a:	4b6a      	ldr	r3, [pc, #424]	; (8004524 <main+0x10a4>)
 800437c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004380:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004384:	f103 0318 	add.w	r3, r3, #24
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	f7fc f8e5 	bl	8000558 <__aeabi_f2d>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f7fb ff7f 	bl	8000298 <__aeabi_dsub>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b61      	ldr	r3, [pc, #388]	; (800452c <main+0x10ac>)
 80043a8:	f7fc fbbe 	bl	8000b28 <__aeabi_dcmpgt>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <main+0xf3e>
					start_flag=1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80043b8:	f102 020f 	add.w	r2, r2, #15
 80043bc:	7013      	strb	r3, [r2, #0]
				}
				if(start_flag && data.bmp180.height-start_height<10){
 80043be:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80043c2:	f103 030f 	add.w	r3, r3, #15
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d021      	beq.n	8004410 <main+0xf90>
 80043cc:	4b55      	ldr	r3, [pc, #340]	; (8004524 <main+0x10a4>)
 80043ce:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80043d2:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80043d6:	f103 0318 	add.w	r3, r3, #24
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	f7fc f8bc 	bl	8000558 <__aeabi_f2d>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4620      	mov	r0, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fb ff56 	bl	8000298 <__aeabi_dsub>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	4b4c      	ldr	r3, [pc, #304]	; (800452c <main+0x10ac>)
 80043fa:	f7fc fb77 	bl	8000aec <__aeabi_dcmplt>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <main+0xf90>
					end_flag=1;
 8004404:	2301      	movs	r3, #1
 8004406:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 800440a:	f102 020e 	add.w	r2, r2, #14
 800440e:	7013      	strb	r3, [r2, #0]
				}
				//log_s_float("height", data.bmp180.height);
				max_height = max(data.bmp180.height, max_height);
 8004410:	4b44      	ldr	r3, [pc, #272]	; (8004524 <main+0x10a4>)
 8004412:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004416:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800441a:	f103 031c 	add.w	r3, r3, #28
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	f7fc f89a 	bl	8000558 <__aeabi_f2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fc fb7c 	bl	8000b28 <__aeabi_dcmpgt>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <main+0xfc8>
 8004436:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <main+0x10a4>)
 8004438:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800443c:	4610      	mov	r0, r2
 800443e:	4619      	mov	r1, r3
 8004440:	f7fc fbba 	bl	8000bb8 <__aeabi_d2f>
 8004444:	4603      	mov	r3, r0
 8004446:	e004      	b.n	8004452 <main+0xfd2>
 8004448:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800444c:	f103 031c 	add.w	r3, r3, #28
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8004456:	f102 021c 	add.w	r2, r2, #28
 800445a:	6013      	str	r3, [r2, #0]
				//log_s_float("m__eight", max_height);
				if (max_height - data.bmp180.height > 5) {
 800445c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004460:	f103 031c 	add.w	r3, r3, #28
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	f7fc f877 	bl	8000558 <__aeabi_f2d>
 800446a:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <main+0x10a4>)
 800446c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004470:	f7fb ff12 	bl	8000298 <__aeabi_dsub>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <main+0x10b0>)
 8004482:	f7fc fb51 	bl	8000b28 <__aeabi_dcmpgt>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d031      	beq.n	80044f0 <main+0x1070>
					if (max_height_t == 0) {
 800448c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8004490:	f103 0314 	add.w	r3, r3, #20
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d111      	bne.n	80044be <main+0x103e>
						max_height_t = HAL_GetTick();
 800449a:	f001 fa05 	bl	80058a8 <HAL_GetTick>
 800449e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80044a2:	f103 0314 	add.w	r3, r3, #20
 80044a6:	6018      	str	r0, [r3, #0]
						motor_flag=1;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 80044ae:	f102 020d 	add.w	r2, r2, #13
 80044b2:	7013      	strb	r3, [r2, #0]
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80044b4:	2201      	movs	r2, #1
 80044b6:	2102      	movs	r1, #2
 80044b8:	4819      	ldr	r0, [pc, #100]	; (8004520 <main+0x10a0>)
 80044ba:	f001 fd8b 	bl	8005fd4 <HAL_GPIO_WritePin>
					}
					if (HAL_GetTick()-max_height_t  > 5000
 80044be:	f001 f9f3 	bl	80058a8 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80044c8:	f103 0314 	add.w	r3, r3, #20
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d90b      	bls.n	80044f0 <main+0x1070>
							&& max_height_t != 0) {
 80044d8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80044dc:	f103 0314 	add.w	r3, r3, #20
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <main+0x1070>
						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2102      	movs	r1, #2
 80044ea:	480d      	ldr	r0, [pc, #52]	; (8004520 <main+0x10a0>)
 80044ec:	f001 fd72 	bl	8005fd4 <HAL_GPIO_WritePin>
					}
				}
			}
			packet++;
 80044f0:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80044f4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3301      	adds	r3, #1
 80044fc:	f507 5208 	add.w	r2, r7, #8704	; 0x2200
 8004500:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8004504:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8004506:	2101      	movs	r1, #1
 8004508:	4805      	ldr	r0, [pc, #20]	; (8004520 <main+0x10a0>)
 800450a:	f001 fd7c 	bl	8006006 <HAL_GPIO_TogglePin>
		if (!adxl_check_connection()) {
 800450e:	f7ff b92e 	b.w	800376e <main+0x2ee>
 8004512:	bf00      	nop
 8004514:	f3af 8000 	nop.w
 8004518:	00000000 	.word	0x00000000
 800451c:	40000000 	.word	0x40000000
 8004520:	40020800 	.word	0x40020800
 8004524:	20000590 	.word	0x20000590
 8004528:	40500000 	.word	0x40500000
 800452c:	40240000 	.word	0x40240000
 8004530:	40140000 	.word	0x40140000

08004534 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b094      	sub	sp, #80	; 0x50
 8004538:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800453a:	f107 0320 	add.w	r3, r7, #32
 800453e:	2230      	movs	r2, #48	; 0x30
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f00a f8d4 	bl	800e6f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004548:	f107 030c 	add.w	r3, r7, #12
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
 800455c:	4b28      	ldr	r3, [pc, #160]	; (8004600 <SystemClock_Config+0xcc>)
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	4a27      	ldr	r2, [pc, #156]	; (8004600 <SystemClock_Config+0xcc>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6413      	str	r3, [r2, #64]	; 0x40
 8004568:	4b25      	ldr	r3, [pc, #148]	; (8004600 <SystemClock_Config+0xcc>)
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004574:	2300      	movs	r3, #0
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	4b22      	ldr	r3, [pc, #136]	; (8004604 <SystemClock_Config+0xd0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004580:	4a20      	ldr	r2, [pc, #128]	; (8004604 <SystemClock_Config+0xd0>)
 8004582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b1e      	ldr	r3, [pc, #120]	; (8004604 <SystemClock_Config+0xd0>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004594:	2302      	movs	r3, #2
 8004596:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004598:	2301      	movs	r3, #1
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800459c:	2310      	movs	r3, #16
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045a0:	2302      	movs	r3, #2
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80045a4:	2300      	movs	r3, #0
 80045a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80045a8:	2308      	movs	r3, #8
 80045aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80045ac:	2354      	movs	r3, #84	; 0x54
 80045ae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045b0:	2302      	movs	r3, #2
 80045b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80045b4:	2304      	movs	r3, #4
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80045b8:	f107 0320 	add.w	r3, r7, #32
 80045bc:	4618      	mov	r0, r3
 80045be:	f003 f9a1 	bl	8007904 <HAL_RCC_OscConfig>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d001      	beq.n	80045cc <SystemClock_Config+0x98>
		Error_Handler();
 80045c8:	f000 fb58 	bl	8004c7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80045cc:	230f      	movs	r3, #15
 80045ce:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d0:	2302      	movs	r3, #2
 80045d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045dc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80045e2:	f107 030c 	add.w	r3, r7, #12
 80045e6:	2102      	movs	r1, #2
 80045e8:	4618      	mov	r0, r3
 80045ea:	f003 fc03 	bl	8007df4 <HAL_RCC_ClockConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <SystemClock_Config+0xc4>
		Error_Handler();
 80045f4:	f000 fb42 	bl	8004c7c <Error_Handler>
	}
}
 80045f8:	bf00      	nop
 80045fa:	3750      	adds	r7, #80	; 0x50
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	40007000 	.word	0x40007000

08004608 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <MX_I2C1_Init+0x50>)
 800460e:	4a13      	ldr	r2, [pc, #76]	; (800465c <MX_I2C1_Init+0x54>)
 8004610:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <MX_I2C1_Init+0x50>)
 8004614:	4a12      	ldr	r2, [pc, #72]	; (8004660 <MX_I2C1_Init+0x58>)
 8004616:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <MX_I2C1_Init+0x50>)
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800461e:	4b0e      	ldr	r3, [pc, #56]	; (8004658 <MX_I2C1_Init+0x50>)
 8004620:	2200      	movs	r2, #0
 8004622:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <MX_I2C1_Init+0x50>)
 8004626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800462a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <MX_I2C1_Init+0x50>)
 800462e:	2200      	movs	r2, #0
 8004630:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <MX_I2C1_Init+0x50>)
 8004634:	2200      	movs	r2, #0
 8004636:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <MX_I2C1_Init+0x50>)
 800463a:	2200      	movs	r2, #0
 800463c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <MX_I2C1_Init+0x50>)
 8004640:	2200      	movs	r2, #0
 8004642:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004644:	4804      	ldr	r0, [pc, #16]	; (8004658 <MX_I2C1_Init+0x50>)
 8004646:	f001 fcf9 	bl	800603c <HAL_I2C_Init>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8004650:	f000 fb14 	bl	8004c7c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8004654:	bf00      	nop
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000388 	.word	0x20000388
 800465c:	40005400 	.word	0x40005400
 8004660:	00061a80 	.word	0x00061a80

08004664 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <MX_SDIO_SD_Init+0x38>)
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <MX_SDIO_SD_Init+0x3c>)
 800466c:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <MX_SDIO_SD_Init+0x38>)
 8004670:	2200      	movs	r2, #0
 8004672:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004674:	4b09      	ldr	r3, [pc, #36]	; (800469c <MX_SDIO_SD_Init+0x38>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <MX_SDIO_SD_Init+0x38>)
 800467c:	2200      	movs	r2, #0
 800467e:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <MX_SDIO_SD_Init+0x38>)
 8004682:	2200      	movs	r2, #0
 8004684:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004686:	4b05      	ldr	r3, [pc, #20]	; (800469c <MX_SDIO_SD_Init+0x38>)
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 14;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <MX_SDIO_SD_Init+0x38>)
 800468e:	220e      	movs	r2, #14
 8004690:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	200003dc 	.word	0x200003dc
 80046a0:	40012c00 	.word	0x40012c00

080046a4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <MX_SPI1_Init+0x64>)
 80046aa:	4a18      	ldr	r2, [pc, #96]	; (800470c <MX_SPI1_Init+0x68>)
 80046ac:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80046ae:	4b16      	ldr	r3, [pc, #88]	; (8004708 <MX_SPI1_Init+0x64>)
 80046b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046b4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <MX_SPI1_Init+0x64>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <MX_SPI1_Init+0x64>)
 80046be:	2200      	movs	r2, #0
 80046c0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046c2:	4b11      	ldr	r3, [pc, #68]	; (8004708 <MX_SPI1_Init+0x64>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046c8:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <MX_SPI1_Init+0x64>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80046ce:	4b0e      	ldr	r3, [pc, #56]	; (8004708 <MX_SPI1_Init+0x64>)
 80046d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <MX_SPI1_Init+0x64>)
 80046d8:	2220      	movs	r2, #32
 80046da:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <MX_SPI1_Init+0x64>)
 80046de:	2200      	movs	r2, #0
 80046e0:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <MX_SPI1_Init+0x64>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <MX_SPI1_Init+0x64>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <MX_SPI1_Init+0x64>)
 80046f0:	220a      	movs	r2, #10
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80046f4:	4804      	ldr	r0, [pc, #16]	; (8004708 <MX_SPI1_Init+0x64>)
 80046f6:	f004 fd23 	bl	8009140 <HAL_SPI_Init>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <MX_SPI1_Init+0x60>
		Error_Handler();
 8004700:	f000 fabc 	bl	8004c7c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000460 	.word	0x20000460
 800470c:	40013000 	.word	0x40013000

08004710 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b08e      	sub	sp, #56	; 0x38
 8004714:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004724:	f107 0320 	add.w	r3, r7, #32
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800472e:	1d3b      	adds	r3, r7, #4
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
 800473c:	615a      	str	r2, [r3, #20]
 800473e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004746:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1680 - 1;
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <MX_TIM2_Init+0xe8>)
 800474a:	f240 628f 	movw	r2, #1679	; 0x68f
 800474e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004750:	4b29      	ldr	r3, [pc, #164]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004758:	f240 32e7 	movw	r2, #999	; 0x3e7
 800475c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004766:	2200      	movs	r2, #0
 8004768:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800476a:	4823      	ldr	r0, [pc, #140]	; (80047f8 <MX_TIM2_Init+0xe8>)
 800476c:	f005 fa90 	bl	8009c90 <HAL_TIM_Base_Init>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_TIM2_Init+0x6a>
		Error_Handler();
 8004776:	f000 fa81 	bl	8004c7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800477a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8004780:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004784:	4619      	mov	r1, r3
 8004786:	481c      	ldr	r0, [pc, #112]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004788:	f005 fc9c 	bl	800a0c4 <HAL_TIM_ConfigClockSource>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <MX_TIM2_Init+0x86>
		Error_Handler();
 8004792:	f000 fa73 	bl	8004c7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8004796:	4818      	ldr	r0, [pc, #96]	; (80047f8 <MX_TIM2_Init+0xe8>)
 8004798:	f005 fac9 	bl	8009d2e <HAL_TIM_PWM_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM2_Init+0x96>
		Error_Handler();
 80047a2:	f000 fa6b 	bl	8004c7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80047ae:	f107 0320 	add.w	r3, r7, #32
 80047b2:	4619      	mov	r1, r3
 80047b4:	4810      	ldr	r0, [pc, #64]	; (80047f8 <MX_TIM2_Init+0xe8>)
 80047b6:	f006 f819 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80047c0:	f000 fa5c 	bl	8004c7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047c4:	2360      	movs	r3, #96	; 0x60
 80047c6:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	2200      	movs	r2, #0
 80047d8:	4619      	mov	r1, r3
 80047da:	4807      	ldr	r0, [pc, #28]	; (80047f8 <MX_TIM2_Init+0xe8>)
 80047dc:	f005 fbb0 	bl	8009f40 <HAL_TIM_PWM_ConfigChannel>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80047e6:	f000 fa49 	bl	8004c7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80047ea:	4803      	ldr	r0, [pc, #12]	; (80047f8 <MX_TIM2_Init+0xe8>)
 80047ec:	f000 fe22 	bl	8005434 <HAL_TIM_MspPostInit>

}
 80047f0:	bf00      	nop
 80047f2:	3738      	adds	r7, #56	; 0x38
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	200004b8 	.word	0x200004b8

080047fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004802:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	609a      	str	r2, [r3, #8]
 800480e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004810:	f107 0320 	add.w	r3, r7, #32
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800481a:	1d3b      	adds	r3, r7, #4
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	611a      	str	r2, [r3, #16]
 8004828:	615a      	str	r2, [r3, #20]
 800482a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800482c:	4b2d      	ldr	r3, [pc, #180]	; (80048e4 <MX_TIM3_Init+0xe8>)
 800482e:	4a2e      	ldr	r2, [pc, #184]	; (80048e8 <MX_TIM3_Init+0xec>)
 8004830:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1680 - 1;
 8004832:	4b2c      	ldr	r3, [pc, #176]	; (80048e4 <MX_TIM3_Init+0xe8>)
 8004834:	f240 628f 	movw	r2, #1679	; 0x68f
 8004838:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800483a:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <MX_TIM3_Init+0xe8>)
 800483c:	2200      	movs	r2, #0
 800483e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8004840:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <MX_TIM3_Init+0xe8>)
 8004842:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004846:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004848:	4b26      	ldr	r3, [pc, #152]	; (80048e4 <MX_TIM3_Init+0xe8>)
 800484a:	2200      	movs	r2, #0
 800484c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800484e:	4b25      	ldr	r3, [pc, #148]	; (80048e4 <MX_TIM3_Init+0xe8>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004854:	4823      	ldr	r0, [pc, #140]	; (80048e4 <MX_TIM3_Init+0xe8>)
 8004856:	f005 fa1b 	bl	8009c90 <HAL_TIM_Base_Init>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <MX_TIM3_Init+0x68>
		Error_Handler();
 8004860:	f000 fa0c 	bl	8004c7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800486a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800486e:	4619      	mov	r1, r3
 8004870:	481c      	ldr	r0, [pc, #112]	; (80048e4 <MX_TIM3_Init+0xe8>)
 8004872:	f005 fc27 	bl	800a0c4 <HAL_TIM_ConfigClockSource>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d001      	beq.n	8004880 <MX_TIM3_Init+0x84>
		Error_Handler();
 800487c:	f000 f9fe 	bl	8004c7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004880:	4818      	ldr	r0, [pc, #96]	; (80048e4 <MX_TIM3_Init+0xe8>)
 8004882:	f005 fa54 	bl	8009d2e <HAL_TIM_PWM_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM3_Init+0x94>
		Error_Handler();
 800488c:	f000 f9f6 	bl	8004c7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004894:	2300      	movs	r3, #0
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004898:	f107 0320 	add.w	r3, r7, #32
 800489c:	4619      	mov	r1, r3
 800489e:	4811      	ldr	r0, [pc, #68]	; (80048e4 <MX_TIM3_Init+0xe8>)
 80048a0:	f005 ffa4 	bl	800a7ec <HAL_TIMEx_MasterConfigSynchronization>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80048aa:	f000 f9e7 	bl	8004c7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ae:	2360      	movs	r3, #96	; 0x60
 80048b0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	2200      	movs	r2, #0
 80048c2:	4619      	mov	r1, r3
 80048c4:	4807      	ldr	r0, [pc, #28]	; (80048e4 <MX_TIM3_Init+0xe8>)
 80048c6:	f005 fb3b 	bl	8009f40 <HAL_TIM_PWM_ConfigChannel>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 80048d0:	f000 f9d4 	bl	8004c7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80048d4:	4803      	ldr	r0, [pc, #12]	; (80048e4 <MX_TIM3_Init+0xe8>)
 80048d6:	f000 fdad 	bl	8005434 <HAL_TIM_MspPostInit>

}
 80048da:	bf00      	nop
 80048dc:	3738      	adds	r7, #56	; 0x38
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000500 	.word	0x20000500
 80048e8:	40000400 	.word	0x40000400

080048ec <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 80048f2:	4a12      	ldr	r2, [pc, #72]	; (800493c <MX_USART1_UART_Init+0x50>)
 80048f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 80048f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004900:	2200      	movs	r2, #0
 8004902:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004904:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004906:	2200      	movs	r2, #0
 8004908:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 800490c:	2200      	movs	r2, #0
 800490e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004912:	220c      	movs	r2, #12
 8004914:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004918:	2200      	movs	r2, #0
 800491a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <MX_USART1_UART_Init+0x4c>)
 8004924:	f005 ffd0 	bl	800a8c8 <HAL_UART_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800492e:	f000 f9a5 	bl	8004c7c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000548 	.word	0x20000548
 800493c:	40011000 	.word	0x40011000

08004940 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004946:	f107 0314 	add.w	r3, r7, #20
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	605a      	str	r2, [r3, #4]
 8004950:	609a      	str	r2, [r3, #8]
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004956:	2300      	movs	r3, #0
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <MX_GPIO_Init+0x110>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	4a3c      	ldr	r2, [pc, #240]	; (8004a50 <MX_GPIO_Init+0x110>)
 8004960:	f043 0304 	orr.w	r3, r3, #4
 8004964:	6313      	str	r3, [r2, #48]	; 0x30
 8004966:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <MX_GPIO_Init+0x110>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <MX_GPIO_Init+0x110>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	4a35      	ldr	r2, [pc, #212]	; (8004a50 <MX_GPIO_Init+0x110>)
 800497c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004980:	6313      	str	r3, [r2, #48]	; 0x30
 8004982:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <MX_GPIO_Init+0x110>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <MX_GPIO_Init+0x110>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a2e      	ldr	r2, [pc, #184]	; (8004a50 <MX_GPIO_Init+0x110>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b2c      	ldr	r3, [pc, #176]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b2:	4a27      	ldr	r2, [pc, #156]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	6313      	str	r3, [r2, #48]	; 0x30
 80049ba:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	607b      	str	r3, [r7, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	4b21      	ldr	r3, [pc, #132]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	4a20      	ldr	r2, [pc, #128]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049d0:	f043 0308 	orr.w	r3, r3, #8
 80049d4:	6313      	str	r3, [r2, #48]	; 0x30
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <MX_GPIO_Init+0x110>)
 80049d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_MCU_Pin | GPIO_PIN_1 | LED_RF_Pin | GPIO_PIN_4,
 80049e2:	2200      	movs	r2, #0
 80049e4:	2117      	movs	r1, #23
 80049e6:	481b      	ldr	r0, [pc, #108]	; (8004a54 <MX_GPIO_Init+0x114>)
 80049e8:	f001 faf4 	bl	8005fd4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2110      	movs	r1, #16
 80049f0:	4819      	ldr	r0, [pc, #100]	; (8004a58 <MX_GPIO_Init+0x118>)
 80049f2:	f001 faef 	bl	8005fd4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_MCU_Pin PC1 LED_RF_Pin PC4 */
	GPIO_InitStruct.Pin = LED_MCU_Pin | GPIO_PIN_1 | LED_RF_Pin | GPIO_PIN_4;
 80049f6:	2317      	movs	r3, #23
 80049f8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4811      	ldr	r0, [pc, #68]	; (8004a54 <MX_GPIO_Init+0x114>)
 8004a0e:	f001 f861 	bl	8005ad4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a12:	2310      	movs	r3, #16
 8004a14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a16:	2301      	movs	r3, #1
 8004a18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a22:	f107 0314 	add.w	r3, r7, #20
 8004a26:	4619      	mov	r1, r3
 8004a28:	480b      	ldr	r0, [pc, #44]	; (8004a58 <MX_GPIO_Init+0x118>)
 8004a2a:	f001 f853 	bl	8005ad4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDIO_CD_Pin IRQ_Pin */
	GPIO_InitStruct.Pin = SDIO_CD_Pin | IRQ_Pin;
 8004a2e:	f240 4304 	movw	r3, #1028	; 0x404
 8004a32:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	4619      	mov	r1, r3
 8004a42:	4806      	ldr	r0, [pc, #24]	; (8004a5c <MX_GPIO_Init+0x11c>)
 8004a44:	f001 f846 	bl	8005ad4 <HAL_GPIO_Init>
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);*/
	/* USER CODE END MX_GPIO_Init_2 */
}
 8004a48:	bf00      	nop
 8004a4a:	3728      	adds	r7, #40	; 0x28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40020800 	.word	0x40020800
 8004a58:	40020000 	.word	0x40020000
 8004a5c:	40020400 	.word	0x40020400

08004a60 <blink_stmled>:

/* USER CODE BEGIN 4 */
void blink_stmled() {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8004a64:	2101      	movs	r1, #1
 8004a66:	4806      	ldr	r0, [pc, #24]	; (8004a80 <blink_stmled+0x20>)
 8004a68:	f001 facd 	bl	8006006 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8004a6c:	2064      	movs	r0, #100	; 0x64
 8004a6e:	f000 ff27 	bl	80058c0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8004a72:	2101      	movs	r1, #1
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <blink_stmled+0x20>)
 8004a76:	f001 fac6 	bl	8006006 <HAL_GPIO_TogglePin>
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40020800 	.word	0x40020800

08004a84 <blink_rfled>:

void blink_rfled(uint8_t count) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < count; i++) {
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	e010      	b.n	8004ab6 <blink_rfled+0x32>
		HAL_GPIO_TogglePin(GPIOC, LED_RF_Pin);
 8004a94:	2104      	movs	r1, #4
 8004a96:	480c      	ldr	r0, [pc, #48]	; (8004ac8 <blink_rfled+0x44>)
 8004a98:	f001 fab5 	bl	8006006 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004a9c:	2064      	movs	r0, #100	; 0x64
 8004a9e:	f000 ff0f 	bl	80058c0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOC, LED_RF_Pin);
 8004aa2:	2104      	movs	r1, #4
 8004aa4:	4808      	ldr	r0, [pc, #32]	; (8004ac8 <blink_rfled+0x44>)
 8004aa6:	f001 faae 	bl	8006006 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8004aaa:	2064      	movs	r0, #100	; 0x64
 8004aac:	f000 ff08 	bl	80058c0 <HAL_Delay>
	for (uint8_t i = 0; i < count; i++) {
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	7bfa      	ldrb	r2, [r7, #15]
 8004ab8:	79fb      	ldrb	r3, [r7, #7]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3ea      	bcc.n	8004a94 <blink_rfled+0x10>
	}
}
 8004abe:	bf00      	nop
 8004ac0:	bf00      	nop
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40020800 	.word	0x40020800

08004acc <wait_for_gpio_state_timeout>:

static uint8_t wait_for_gpio_state_timeout(GPIO_TypeDef *port, uint16_t pin,
		GPIO_PinState state, uint32_t timeout) {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	817b      	strh	r3, [r7, #10]
 8004ada:	4613      	mov	r3, r2
 8004adc:	727b      	strb	r3, [r7, #9]
	uint32_t Tickstart = HAL_GetTick();
 8004ade:	f000 fee3 	bl	80058a8 <HAL_GetTick>
 8004ae2:	6138      	str	r0, [r7, #16]
	uint8_t ret = 1;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]

	for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8004ae8:	e011      	b.n	8004b0e <wait_for_gpio_state_timeout+0x42>
			{
		if (timeout != HAL_MAX_DELAY) // Check for the timeout
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af0:	d00c      	beq.n	8004b0c <wait_for_gpio_state_timeout+0x40>
		{
			if ((timeout == 0U) || ((HAL_GetTick() - Tickstart) > timeout))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <wait_for_gpio_state_timeout+0x3c>
 8004af8:	f000 fed6 	bl	80058a8 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d201      	bcs.n	8004b0c <wait_for_gpio_state_timeout+0x40>
				ret = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	75fb      	strb	r3, [r7, #23]
		}

		asm("nop");
 8004b0c:	bf00      	nop
	for (; (state != HAL_GPIO_ReadPin(port, pin)) && (1 == ret);) // Wait until flag is set
 8004b0e:	897b      	ldrh	r3, [r7, #10]
 8004b10:	4619      	mov	r1, r3
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f001 fa46 	bl	8005fa4 <HAL_GPIO_ReadPin>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	7a7b      	ldrb	r3, [r7, #9]
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d002      	beq.n	8004b28 <wait_for_gpio_state_timeout+0x5c>
 8004b22:	7dfb      	ldrb	r3, [r7, #23]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d0e0      	beq.n	8004aea <wait_for_gpio_state_timeout+0x1e>
	}
	return ret;
 8004b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <I2C_ClearBusyFlagErratum>:
static void I2C_ClearBusyFlagErratum(I2C_HandleTypeDef *hi2c, uint32_t timeout) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	/**I2C1 GPIO Configuration
	 PB6     ------> I2C1_SCL
	 PB7     ------> I2C1_SDA
	 */
	// 2.13.7 I2C analog filter may provide wrong value, locking BUSY. STM32F10xx8 STM32F10xxB Errata sheet
	GPIO_InitTypeDef GPIO_InitStructure = { 0 };
 8004b3e:	f107 030c 	add.w	r3, r7, #12
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	609a      	str	r2, [r3, #8]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	611a      	str	r2, [r3, #16]

	// 1. Clear PE bit.
	CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

	//  2. Configure the SCL and SDA I/Os as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
	HAL_I2C_DeInit(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f001 fbb0 	bl	80062c4 <HAL_I2C_DeInit>

	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8004b64:	2311      	movs	r3, #17
 8004b66:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]

	GPIO_InitStructure.Pin = GPIO_PIN_6; // SCL // если пин другой, то укажите нужный
 8004b6c:	2340      	movs	r3, #64	; 0x40
 8004b6e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure); // если порт другой, то укажите нужную букву GPIOх, и ниже там все порты и пины поменяйте на своё
 8004b70:	f107 030c 	add.w	r3, r7, #12
 8004b74:	4619      	mov	r1, r3
 8004b76:	4840      	ldr	r0, [pc, #256]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004b78:	f000 ffac 	bl	8005ad4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_7; // SDA
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	4619      	mov	r1, r3
 8004b86:	483c      	ldr	r0, [pc, #240]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004b88:	f000 ffa4 	bl	8005ad4 <HAL_GPIO_Init>

	// 3. Check SCL and SDA High level in GPIOx_IDR.
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	2180      	movs	r1, #128	; 0x80
 8004b90:	4839      	ldr	r0, [pc, #228]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004b92:	f001 fa1f 	bl	8005fd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004b96:	2201      	movs	r2, #1
 8004b98:	2140      	movs	r1, #64	; 0x40
 8004b9a:	4837      	ldr	r0, [pc, #220]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004b9c:	f001 fa1a 	bl	8005fd4 <HAL_GPIO_WritePin>

	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_6, GPIO_PIN_SET, timeout);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	2140      	movs	r1, #64	; 0x40
 8004ba6:	4834      	ldr	r0, [pc, #208]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004ba8:	f7ff ff90 	bl	8004acc <wait_for_gpio_state_timeout>
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_7, GPIO_PIN_SET, timeout);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	4831      	ldr	r0, [pc, #196]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004bb4:	f7ff ff8a 	bl	8004acc <wait_for_gpio_state_timeout>

	// 4. Configure the SDA I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	482e      	ldr	r0, [pc, #184]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004bbe:	f001 fa09 	bl	8005fd4 <HAL_GPIO_WritePin>

	// 5. Check SDA Low level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET, timeout);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2180      	movs	r1, #128	; 0x80
 8004bc8:	482b      	ldr	r0, [pc, #172]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004bca:	f7ff ff7f 	bl	8004acc <wait_for_gpio_state_timeout>

	// 6. Configure the SCL I/O as General Purpose Output Open-Drain, Low level (Write 0 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2140      	movs	r1, #64	; 0x40
 8004bd2:	4829      	ldr	r0, [pc, #164]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004bd4:	f001 f9fe 	bl	8005fd4 <HAL_GPIO_WritePin>

	// 7. Check SCL Low level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET, timeout);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2140      	movs	r1, #64	; 0x40
 8004bde:	4826      	ldr	r0, [pc, #152]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004be0:	f7ff ff74 	bl	8004acc <wait_for_gpio_state_timeout>

	// 8. Configure the SCL I/O as General Purpose Output Open-Drain, High level (Write 1 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8004be4:	2201      	movs	r2, #1
 8004be6:	2140      	movs	r1, #64	; 0x40
 8004be8:	4823      	ldr	r0, [pc, #140]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004bea:	f001 f9f3 	bl	8005fd4 <HAL_GPIO_WritePin>

	// 9. Check SCL High level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_6, GPIO_PIN_SET, timeout);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	2140      	movs	r1, #64	; 0x40
 8004bf4:	4820      	ldr	r0, [pc, #128]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004bf6:	f7ff ff69 	bl	8004acc <wait_for_gpio_state_timeout>

	// 10. Configure the SDA I/O as General Purpose Output Open-Drain , High level (Write 1 to GPIOx_ODR).
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	2180      	movs	r1, #128	; 0x80
 8004bfe:	481e      	ldr	r0, [pc, #120]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004c00:	f001 f9e8 	bl	8005fd4 <HAL_GPIO_WritePin>

	// 11. Check SDA High level in GPIOx_IDR.
	wait_for_gpio_state_timeout(GPIOB, GPIO_PIN_7, GPIO_PIN_SET, timeout);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2201      	movs	r2, #1
 8004c08:	2180      	movs	r1, #128	; 0x80
 8004c0a:	481b      	ldr	r0, [pc, #108]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004c0c:	f7ff ff5e 	bl	8004acc <wait_for_gpio_state_timeout>

	// 12. Configure the SCL and SDA I/Os as Alternate function Open-Drain.
	GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8004c10:	2312      	movs	r3, #18
 8004c12:	613b      	str	r3, [r7, #16]
	//GPIO_InitStructure.Alternate = GPIO_AF4_I2C2; // F4

	GPIO_InitStructure.Pin = GPIO_PIN_6;
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c18:	f107 030c 	add.w	r3, r7, #12
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4816      	ldr	r0, [pc, #88]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004c20:	f000 ff58 	bl	8005ad4 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_7;
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004c28:	f107 030c 	add.w	r3, r7, #12
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4812      	ldr	r0, [pc, #72]	; (8004c78 <I2C_ClearBusyFlagErratum+0x144>)
 8004c30:	f000 ff50 	bl	8005ad4 <HAL_GPIO_Init>

	// 13. Set SWRST bit in I2Cx_CR1 register.
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c42:	601a      	str	r2, [r3, #0]
	asm("nop");
 8004c44:	bf00      	nop

	/* 14. Clear SWRST bit in I2Cx_CR1 register. */
	CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c54:	601a      	str	r2, [r3, #0]
	asm("nop");
 8004c56:	bf00      	nop

	/* 15. Enable the I2C peripheral by setting the PE bit in I2Cx_CR1 register */
	SET_BIT(hi2c->Instance->CR1, I2C_CR1_PE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
	asm("nop");
 8004c68:	bf00      	nop

	// Call initialization function.
	HAL_I2C_Init(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 f9e6 	bl	800603c <HAL_I2C_Init>
}
 8004c70:	bf00      	nop
 8004c72:	3720      	adds	r7, #32
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	40020400 	.word	0x40020400

08004c7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c80:	b672      	cpsid	i
}
 8004c82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004c84:	e7fe      	b.n	8004c84 <Error_Handler+0x8>
	...

08004c88 <DelayMicro>:
#ifndef INC_NRF24L01_H_
#define INC_NRF24L01_H_
#include "stm32f4xx_hal.h"
#include "debug.h"

__STATIC_INLINE void DelayMicro(__IO uint32_t micros) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	micros *= (SystemCoreClock / 1000000) / 9;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <DelayMicro+0x38>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <DelayMicro+0x3c>)
 8004c96:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9a:	0ddb      	lsrs	r3, r3, #23
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	607b      	str	r3, [r7, #4]
	/* Wait till done */
	while (micros--)
 8004ca4:	bf00      	nop
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1e5a      	subs	r2, r3, #1
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1fa      	bne.n	8004ca6 <DelayMicro+0x1e>
		;
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	20000018 	.word	0x20000018
 8004cc4:	ee9bfab5 	.word	0xee9bfab5

08004cc8 <nrf_init>:
#define CSN(x) HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, (x)?GPIO_PIN_SET:GPIO_PIN_RESET);
#define IRQ HAL_GPIO_ReadPin(IRQ_GPIO_Port, IRQ_Pin)

uint8_t TX_ADDRESS[5] = { 0x73, 0x70, 0x72, 0x64, 0x67 };
uint8_t transmit_len = 1;
void nrf_init(SPI_HandleTypeDef *spi) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
	_nrf_spi = spi;
 8004cd0:	4a2c      	ldr	r2, [pc, #176]	; (8004d84 <nrf_init+0xbc>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6013      	str	r3, [r2, #0]
	nrf_write_reg(NRF_REG_CONFIG, 0b01011010);
 8004cd6:	215a      	movs	r1, #90	; 0x5a
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f000 f9b3 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_EN_AA, 0b00000000);
 8004cde:	2100      	movs	r1, #0
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	f000 f9af 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_EN_RXADDR, 0b00000011);
 8004ce6:	2103      	movs	r1, #3
 8004ce8:	2002      	movs	r0, #2
 8004cea:	f000 f9ab 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_SETUP_AW, 0b00000011); // 5 byte
 8004cee:	2103      	movs	r1, #3
 8004cf0:	2003      	movs	r0, #3
 8004cf2:	f000 f9a7 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_SETUP_RETR, 0b00000000); //  4ms 15 t
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	2004      	movs	r0, #4
 8004cfa:	f000 f9a3 	bl	8005044 <nrf_write_reg>
	nrf_toggle_activate();
 8004cfe:	f000 f845 	bl	8004d8c <nrf_toggle_activate>
	nrf_write_reg(NRF_REG_RF_CH, 0x05); // frequency
 8004d02:	2105      	movs	r1, #5
 8004d04:	2005      	movs	r0, #5
 8004d06:	f000 f99d 	bl	8005044 <nrf_write_reg>
	//--------------------------------76543210
	nrf_write_reg(NRF_REG_RF_SETUP, 0b00100110);
 8004d0a:	2126      	movs	r1, #38	; 0x26
 8004d0c:	2006      	movs	r0, #6
 8004d0e:	f000 f999 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_STATUS, 0b01110000);
 8004d12:	2170      	movs	r1, #112	; 0x70
 8004d14:	2007      	movs	r0, #7
 8004d16:	f000 f995 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P0, 0b00100000);
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	2011      	movs	r0, #17
 8004d1e:	f000 f991 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P1, 0b00000000);
 8004d22:	2100      	movs	r1, #0
 8004d24:	2012      	movs	r0, #18
 8004d26:	f000 f98d 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P2, 0b00000000);
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	2013      	movs	r0, #19
 8004d2e:	f000 f989 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P3, 0b00000000);
 8004d32:	2100      	movs	r1, #0
 8004d34:	2014      	movs	r0, #20
 8004d36:	f000 f985 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P4, 0b00000000);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	2015      	movs	r0, #21
 8004d3e:	f000 f981 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_RX_PW_P5, 0b00000000);
 8004d42:	2100      	movs	r1, #0
 8004d44:	2016      	movs	r0, #22
 8004d46:	f000 f97d 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_FIFO_STATUS, 0b00000000);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2017      	movs	r0, #23
 8004d4e:	f000 f979 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_DYNPD, 0b00000000);
 8004d52:	2100      	movs	r1, #0
 8004d54:	201c      	movs	r0, #28
 8004d56:	f000 f975 	bl	8005044 <nrf_write_reg>
	nrf_write_reg(NRF_REG_FEATURE, 0b00000000);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	201d      	movs	r0, #29
 8004d5e:	f000 f971 	bl	8005044 <nrf_write_reg>

	nrf_write_buf(NRF_REG_TX_ADDR, TX_ADDRESS, 5);
 8004d62:	2205      	movs	r2, #5
 8004d64:	4908      	ldr	r1, [pc, #32]	; (8004d88 <nrf_init+0xc0>)
 8004d66:	2010      	movs	r0, #16
 8004d68:	f000 f99c 	bl	80050a4 <nrf_write_buf>
	nrf_write_buf(NRF_REG_RX_ADDR_P0, TX_ADDRESS, 5);
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	4906      	ldr	r1, [pc, #24]	; (8004d88 <nrf_init+0xc0>)
 8004d70:	200a      	movs	r0, #10
 8004d72:	f000 f997 	bl	80050a4 <nrf_write_buf>
	nrf_rx_mode();
 8004d76:	f000 f837 	bl	8004de8 <nrf_rx_mode>
	 uint8_t buf1[5];
	 NRF24_Read_Buf(0x10,buf1,5);
	 sprintf(str1,"TX_ADDR: 0x%x, 0x%x, 0x%x, 0x%x, 0x%x" ,buf1[0],buf1[1],buf1[2],buf1[3],buf1[4]);
	 log_s(str1);*/

}
 8004d7a:	bf00      	nop
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	200005d8 	.word	0x200005d8
 8004d88:	20000010 	.word	0x20000010

08004d8c <nrf_toggle_activate>:
void nrf_toggle_activate(void) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
	dt[0] = NRF_CMD_ACTIVATE;
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <nrf_toggle_activate+0x50>)
 8004d92:	2250      	movs	r2, #80	; 0x50
 8004d94:	701a      	strb	r2, [r3, #0]
	CSN(0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2110      	movs	r1, #16
 8004d9a:	4811      	ldr	r0, [pc, #68]	; (8004de0 <nrf_toggle_activate+0x54>)
 8004d9c:	f001 f91a 	bl	8005fd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, dt, 1, 1000);
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <nrf_toggle_activate+0x58>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da8:	2201      	movs	r2, #1
 8004daa:	490c      	ldr	r1, [pc, #48]	; (8004ddc <nrf_toggle_activate+0x50>)
 8004dac:	f004 fa51 	bl	8009252 <HAL_SPI_Transmit>
	DelayMicro(1);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7ff ff69 	bl	8004c88 <DelayMicro>
	dt[0] = 0x73;
 8004db6:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <nrf_toggle_activate+0x50>)
 8004db8:	2273      	movs	r2, #115	; 0x73
 8004dba:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(_nrf_spi, dt, 1, 1000);
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <nrf_toggle_activate+0x58>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	4905      	ldr	r1, [pc, #20]	; (8004ddc <nrf_toggle_activate+0x50>)
 8004dc8:	f004 fa43 	bl	8009252 <HAL_SPI_Transmit>
	CSN(1);
 8004dcc:	2201      	movs	r2, #1
 8004dce:	2110      	movs	r1, #16
 8004dd0:	4803      	ldr	r0, [pc, #12]	; (8004de0 <nrf_toggle_activate+0x54>)
 8004dd2:	f001 f8ff 	bl	8005fd4 <HAL_GPIO_WritePin>
}
 8004dd6:	bf00      	nop
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200005dc 	.word	0x200005dc
 8004de0:	40020000 	.word	0x40020000
 8004de4:	200005d8 	.word	0x200005d8

08004de8 <nrf_rx_mode>:
void nrf_rx_mode(void) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
	regval = 0;
 8004dec:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <nrf_rx_mode+0x50>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
	regval = nrf_read_reg(NRF_REG_CONFIG);
 8004df2:	2000      	movs	r0, #0
 8004df4:	f000 f8ec 	bl	8004fd0 <nrf_read_reg>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4b0e      	ldr	r3, [pc, #56]	; (8004e38 <nrf_rx_mode+0x50>)
 8004dfe:	701a      	strb	r2, [r3, #0]
	regval |= (1 << NRF_BIT_PWR_UP) | (1 << NRF_BIT_PRIM_RX);
 8004e00:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <nrf_rx_mode+0x50>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f043 0303 	orr.w	r3, r3, #3
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <nrf_rx_mode+0x50>)
 8004e0c:	701a      	strb	r2, [r3, #0]
	nrf_write_reg(NRF_REG_CONFIG, regval);
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <nrf_rx_mode+0x50>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	2000      	movs	r0, #0
 8004e16:	f000 f915 	bl	8005044 <nrf_write_reg>
	CE(1);
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2110      	movs	r1, #16
 8004e1e:	4807      	ldr	r0, [pc, #28]	; (8004e3c <nrf_rx_mode+0x54>)
 8004e20:	f001 f8d8 	bl	8005fd4 <HAL_GPIO_WritePin>
	DelayMicro(150);
 8004e24:	2096      	movs	r0, #150	; 0x96
 8004e26:	f7ff ff2f 	bl	8004c88 <DelayMicro>
	nrf_flush_rx();
 8004e2a:	f000 f82b 	bl	8004e84 <nrf_flush_rx>
	nrf_flush_tx();
 8004e2e:	f000 f807 	bl	8004e40 <nrf_flush_tx>
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	200005dd 	.word	0x200005dd
 8004e3c:	40020800 	.word	0x40020800

08004e40 <nrf_flush_tx>:
void nrf_flush_tx() {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	dt[0] = NRF_CMD_FLUSH_TX;
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <nrf_flush_tx+0x38>)
 8004e46:	22e1      	movs	r2, #225	; 0xe1
 8004e48:	701a      	strb	r2, [r3, #0]
	CSN(0);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2110      	movs	r1, #16
 8004e4e:	480b      	ldr	r0, [pc, #44]	; (8004e7c <nrf_flush_tx+0x3c>)
 8004e50:	f001 f8c0 	bl	8005fd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &dt, 1, 1000);
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <nrf_flush_tx+0x40>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	4906      	ldr	r1, [pc, #24]	; (8004e78 <nrf_flush_tx+0x38>)
 8004e60:	f004 f9f7 	bl	8009252 <HAL_SPI_Transmit>
	DelayMicro(1);
 8004e64:	2001      	movs	r0, #1
 8004e66:	f7ff ff0f 	bl	8004c88 <DelayMicro>
	CSN(1);
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	2110      	movs	r1, #16
 8004e6e:	4803      	ldr	r0, [pc, #12]	; (8004e7c <nrf_flush_tx+0x3c>)
 8004e70:	f001 f8b0 	bl	8005fd4 <HAL_GPIO_WritePin>
}
 8004e74:	bf00      	nop
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200005dc 	.word	0x200005dc
 8004e7c:	40020000 	.word	0x40020000
 8004e80:	200005d8 	.word	0x200005d8

08004e84 <nrf_flush_rx>:
void nrf_flush_rx() {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
	dt[0] = NRF_CMD_FLUSH_RX;
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <nrf_flush_rx+0x38>)
 8004e8a:	22e2      	movs	r2, #226	; 0xe2
 8004e8c:	701a      	strb	r2, [r3, #0]
	CSN(0);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2110      	movs	r1, #16
 8004e92:	480b      	ldr	r0, [pc, #44]	; (8004ec0 <nrf_flush_rx+0x3c>)
 8004e94:	f001 f89e 	bl	8005fd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &dt, 1, 1000);
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <nrf_flush_rx+0x40>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	4906      	ldr	r1, [pc, #24]	; (8004ebc <nrf_flush_rx+0x38>)
 8004ea4:	f004 f9d5 	bl	8009252 <HAL_SPI_Transmit>
	DelayMicro(1);
 8004ea8:	2001      	movs	r0, #1
 8004eaa:	f7ff feed 	bl	8004c88 <DelayMicro>
	CSN(1);
 8004eae:	2201      	movs	r2, #1
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	4803      	ldr	r0, [pc, #12]	; (8004ec0 <nrf_flush_rx+0x3c>)
 8004eb4:	f001 f88e 	bl	8005fd4 <HAL_GPIO_WritePin>
}
 8004eb8:	bf00      	nop
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200005dc 	.word	0x200005dc
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	200005d8 	.word	0x200005d8

08004ec8 <nrf_tx_mode>:
void nrf_tx_mode() {
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	nrf_write_buf(NRF_REG_TX_ADDR, TX_ADDRESS, 5);
 8004ecc:	2205      	movs	r2, #5
 8004ece:	4915      	ldr	r1, [pc, #84]	; (8004f24 <nrf_tx_mode+0x5c>)
 8004ed0:	2010      	movs	r0, #16
 8004ed2:	f000 f8e7 	bl	80050a4 <nrf_write_buf>
	CE(0);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2110      	movs	r1, #16
 8004eda:	4813      	ldr	r0, [pc, #76]	; (8004f28 <nrf_tx_mode+0x60>)
 8004edc:	f001 f87a 	bl	8005fd4 <HAL_GPIO_WritePin>
	nrf_flush_rx();
 8004ee0:	f7ff ffd0 	bl	8004e84 <nrf_flush_rx>
	nrf_flush_tx();
 8004ee4:	f7ff ffac 	bl	8004e40 <nrf_flush_tx>
	regval = nrf_read_reg(NRF_REG_CONFIG);
 8004ee8:	2000      	movs	r0, #0
 8004eea:	f000 f871 	bl	8004fd0 <nrf_read_reg>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b0e      	ldr	r3, [pc, #56]	; (8004f2c <nrf_tx_mode+0x64>)
 8004ef4:	701a      	strb	r2, [r3, #0]
	regval |= (1 << NRF_BIT_PWR_UP);
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <nrf_tx_mode+0x64>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	f043 0302 	orr.w	r3, r3, #2
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <nrf_tx_mode+0x64>)
 8004f02:	701a      	strb	r2, [r3, #0]
	regval &= ~(1 << NRF_BIT_PRIM_RX);
 8004f04:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <nrf_tx_mode+0x64>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <nrf_tx_mode+0x64>)
 8004f10:	701a      	strb	r2, [r3, #0]
	nrf_write_reg(0x00, regval);
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <nrf_tx_mode+0x64>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	4619      	mov	r1, r3
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f000 f893 	bl	8005044 <nrf_write_reg>
}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000010 	.word	0x20000010
 8004f28:	40020800 	.word	0x40020800
 8004f2c:	200005dd 	.word	0x200005dd

08004f30 <nrf_send>:
void nrf_send(uint8_t *pBuf) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00, regval = 0x00;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73bb      	strb	r3, [r7, #14]
	nrf_tx_mode();
 8004f40:	f7ff ffc2 	bl	8004ec8 <nrf_tx_mode>
	nrf_write_reg(NRF_REG_STATUS, 0b00110000);
 8004f44:	2130      	movs	r1, #48	; 0x30
 8004f46:	2007      	movs	r0, #7
 8004f48:	f000 f87c 	bl	8005044 <nrf_write_reg>
	DelayMicro(150);
 8004f4c:	2096      	movs	r0, #150	; 0x96
 8004f4e:	f7ff fe9b 	bl	8004c88 <DelayMicro>
	nrf_write_buf(NRF_CMD_W_TX_PAYLOAD, pBuf, 32);
 8004f52:	2220      	movs	r2, #32
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	20a0      	movs	r0, #160	; 0xa0
 8004f58:	f000 f8a4 	bl	80050a4 <nrf_write_buf>
	CE(1);
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	2110      	movs	r1, #16
 8004f60:	4819      	ldr	r0, [pc, #100]	; (8004fc8 <nrf_send+0x98>)
 8004f62:	f001 f837 	bl	8005fd4 <HAL_GPIO_WritePin>
	DelayMicro(15);
 8004f66:	200f      	movs	r0, #15
 8004f68:	f7ff fe8e 	bl	8004c88 <DelayMicro>
	while((GPIO_PinState)IRQ == GPIO_PIN_SET) {}
 8004f6c:	bf00      	nop
 8004f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f72:	4816      	ldr	r0, [pc, #88]	; (8004fcc <nrf_send+0x9c>)
 8004f74:	f001 f816 	bl	8005fa4 <HAL_GPIO_ReadPin>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d0f7      	beq.n	8004f6e <nrf_send+0x3e>
	CE(0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2110      	movs	r1, #16
 8004f82:	4811      	ldr	r0, [pc, #68]	; (8004fc8 <nrf_send+0x98>)
 8004f84:	f001 f826 	bl	8005fd4 <HAL_GPIO_WritePin>
	status = nrf_read_reg(NRF_REG_STATUS);
 8004f88:	2007      	movs	r0, #7
 8004f8a:	f000 f821 	bl	8004fd0 <nrf_read_reg>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
	if (status & NRF_BIT_CONFIG_TX_DS) //tx_ds == 0x20
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	f003 0320 	and.w	r3, r3, #32
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <nrf_send+0x76>
	{
		nrf_write_reg(NRF_REG_STATUS, 0x20);
 8004f9c:	2120      	movs	r1, #32
 8004f9e:	2007      	movs	r0, #7
 8004fa0:	f000 f850 	bl	8005044 <nrf_write_reg>
 8004fa4:	e00a      	b.n	8004fbc <nrf_send+0x8c>
	} else if (status & NRF_BIT_CONFIG_MAX_RT) {
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <nrf_send+0x8c>
		nrf_write_reg(NRF_REG_STATUS, 0x10);
 8004fb0:	2110      	movs	r1, #16
 8004fb2:	2007      	movs	r0, #7
 8004fb4:	f000 f846 	bl	8005044 <nrf_write_reg>
		nrf_flush_tx();
 8004fb8:	f7ff ff42 	bl	8004e40 <nrf_flush_tx>
	}
	nrf_rx_mode();
 8004fbc:	f7ff ff14 	bl	8004de8 <nrf_rx_mode>
}
 8004fc0:	bf00      	nop
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40020800 	.word	0x40020800
 8004fcc:	40020400 	.word	0x40020400

08004fd0 <nrf_read_reg>:
uint8_t _read_data = 0;
uint8_t nrf_read_reg(uint8_t addr) {
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
	_read_data = 0;
 8004fda:	4b17      	ldr	r3, [pc, #92]	; (8005038 <nrf_read_reg+0x68>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
	uint8_t cmd = 0xFF;
 8004fe0:	23ff      	movs	r3, #255	; 0xff
 8004fe2:	73fb      	strb	r3, [r7, #15]
	CSN(0);
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2110      	movs	r1, #16
 8004fe8:	4814      	ldr	r0, [pc, #80]	; (800503c <nrf_read_reg+0x6c>)
 8004fea:	f000 fff3 	bl	8005fd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
 8004fee:	4b14      	ldr	r3, [pc, #80]	; (8005040 <nrf_read_reg+0x70>)
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	1df9      	adds	r1, r7, #7
 8004ff4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f004 f92a 	bl	8009252 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_nrf_spi, &cmd, 1, 1000);
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <nrf_read_reg+0x70>)
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	f107 010f 	add.w	r1, r7, #15
 8005006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800500a:	2201      	movs	r2, #1
 800500c:	f004 f921 	bl	8009252 <HAL_SPI_Transmit>
	HAL_SPI_Receive(_nrf_spi, &_read_data, 1, 1000);
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <nrf_read_reg+0x70>)
 8005012:	6818      	ldr	r0, [r3, #0]
 8005014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005018:	2201      	movs	r2, #1
 800501a:	4907      	ldr	r1, [pc, #28]	; (8005038 <nrf_read_reg+0x68>)
 800501c:	f004 fa55 	bl	80094ca <HAL_SPI_Receive>
	CSN(1);
 8005020:	2201      	movs	r2, #1
 8005022:	2110      	movs	r1, #16
 8005024:	4805      	ldr	r0, [pc, #20]	; (800503c <nrf_read_reg+0x6c>)
 8005026:	f000 ffd5 	bl	8005fd4 <HAL_GPIO_WritePin>
	return _read_data;
 800502a:	4b03      	ldr	r3, [pc, #12]	; (8005038 <nrf_read_reg+0x68>)
 800502c:	781b      	ldrb	r3, [r3, #0]

}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	200005de 	.word	0x200005de
 800503c:	40020000 	.word	0x40020000
 8005040:	200005d8 	.word	0x200005d8

08005044 <nrf_write_reg>:
void nrf_write_reg(uint8_t addr, uint8_t dt) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	460a      	mov	r2, r1
 800504e:	71fb      	strb	r3, [r7, #7]
 8005050:	4613      	mov	r3, r2
 8005052:	71bb      	strb	r3, [r7, #6]

	CSN(0);
 8005054:	2200      	movs	r2, #0
 8005056:	2110      	movs	r1, #16
 8005058:	4810      	ldr	r0, [pc, #64]	; (800509c <nrf_write_reg+0x58>)
 800505a:	f000 ffbb 	bl	8005fd4 <HAL_GPIO_WritePin>
	addr |= NRF_CMD_W_REGISTER;
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f043 0320 	orr.w	r3, r3, #32
 8005064:	b2db      	uxtb	r3, r3
 8005066:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
 8005068:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <nrf_write_reg+0x5c>)
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	1df9      	adds	r1, r7, #7
 800506e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005072:	2201      	movs	r2, #1
 8005074:	f004 f8ed 	bl	8009252 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_nrf_spi, &dt, 1, 1000);
 8005078:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <nrf_write_reg+0x5c>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	1db9      	adds	r1, r7, #6
 800507e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005082:	2201      	movs	r2, #1
 8005084:	f004 f8e5 	bl	8009252 <HAL_SPI_Transmit>
	CSN(1);
 8005088:	2201      	movs	r2, #1
 800508a:	2110      	movs	r1, #16
 800508c:	4803      	ldr	r0, [pc, #12]	; (800509c <nrf_write_reg+0x58>)
 800508e:	f000 ffa1 	bl	8005fd4 <HAL_GPIO_WritePin>

}
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40020000 	.word	0x40020000
 80050a0:	200005d8 	.word	0x200005d8

080050a4 <nrf_write_buf>:
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
	HAL_SPI_Receive(_nrf_spi, pBuf, bytes, 1000);
	CSN(1);
}

void nrf_write_buf(uint8_t addr, uint8_t *pBuf, uint8_t bytes) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	71fb      	strb	r3, [r7, #7]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71bb      	strb	r3, [r7, #6]
	addr |= NRF_CMD_W_REGISTER;
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	f043 0320 	orr.w	r3, r3, #32
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	71fb      	strb	r3, [r7, #7]
	CSN(0);
 80050be:	2200      	movs	r2, #0
 80050c0:	2110      	movs	r1, #16
 80050c2:	480e      	ldr	r0, [pc, #56]	; (80050fc <nrf_write_buf+0x58>)
 80050c4:	f000 ff86 	bl	8005fd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_nrf_spi, &addr, 1, 1000);
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <nrf_write_buf+0x5c>)
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	1df9      	adds	r1, r7, #7
 80050ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d2:	2201      	movs	r2, #1
 80050d4:	f004 f8bd 	bl	8009252 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(_nrf_spi, pBuf, bytes, 1000);
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <nrf_write_buf+0x5c>)
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	79bb      	ldrb	r3, [r7, #6]
 80050de:	b29a      	uxth	r2, r3
 80050e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050e4:	6839      	ldr	r1, [r7, #0]
 80050e6:	f004 f8b4 	bl	8009252 <HAL_SPI_Transmit>
	CSN(1);
 80050ea:	2201      	movs	r2, #1
 80050ec:	2110      	movs	r1, #16
 80050ee:	4803      	ldr	r0, [pc, #12]	; (80050fc <nrf_write_buf+0x58>)
 80050f0:	f000 ff70 	bl	8005fd4 <HAL_GPIO_WritePin>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40020000 	.word	0x40020000
 8005100:	200005d8 	.word	0x200005d8

08005104 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	607b      	str	r3, [r7, #4]
 800510e:	4b10      	ldr	r3, [pc, #64]	; (8005150 <HAL_MspInit+0x4c>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	4a0f      	ldr	r2, [pc, #60]	; (8005150 <HAL_MspInit+0x4c>)
 8005114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005118:	6453      	str	r3, [r2, #68]	; 0x44
 800511a:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <HAL_MspInit+0x4c>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005122:	607b      	str	r3, [r7, #4]
 8005124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	603b      	str	r3, [r7, #0]
 800512a:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_MspInit+0x4c>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <HAL_MspInit+0x4c>)
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <HAL_MspInit+0x4c>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08a      	sub	sp, #40	; 0x28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800515c:	f107 0314 	add.w	r3, r7, #20
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	609a      	str	r2, [r3, #8]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a20      	ldr	r2, [pc, #128]	; (80051f4 <HAL_I2C_MspInit+0xa0>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d139      	bne.n	80051ea <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
 800517a:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	4a1e      	ldr	r2, [pc, #120]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 8005180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005184:	6413      	str	r3, [r2, #64]	; 0x40
 8005186:	4b1c      	ldr	r3, [pc, #112]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]
  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 8005198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519a:	4a17      	ldr	r2, [pc, #92]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 800519c:	f043 0302 	orr.w	r3, r3, #2
 80051a0:	6313      	str	r3, [r2, #48]	; 0x30
 80051a2:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051ae:	23c0      	movs	r3, #192	; 0xc0
 80051b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051b2:	2312      	movs	r3, #18
 80051b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ba:	2303      	movs	r3, #3
 80051bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051be:	2304      	movs	r3, #4
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c2:	f107 0314 	add.w	r3, r7, #20
 80051c6:	4619      	mov	r1, r3
 80051c8:	480c      	ldr	r0, [pc, #48]	; (80051fc <HAL_I2C_MspInit+0xa8>)
 80051ca:	f000 fc83 	bl	8005ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	60bb      	str	r3, [r7, #8]
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 80051d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051dc:	6413      	str	r3, [r2, #64]	; 0x40
 80051de:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <HAL_I2C_MspInit+0xa4>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051e6:	60bb      	str	r3, [r7, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40005400 	.word	0x40005400
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40020400 	.word	0x40020400

08005200 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a0a      	ldr	r2, [pc, #40]	; (8005238 <HAL_I2C_MspDeInit+0x38>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10d      	bne.n	800522e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <HAL_I2C_MspDeInit+0x3c>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <HAL_I2C_MspDeInit+0x3c>)
 8005218:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800521c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800521e:	2140      	movs	r1, #64	; 0x40
 8005220:	4807      	ldr	r0, [pc, #28]	; (8005240 <HAL_I2C_MspDeInit+0x40>)
 8005222:	f000 fddb 	bl	8005ddc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005226:	2180      	movs	r1, #128	; 0x80
 8005228:	4805      	ldr	r0, [pc, #20]	; (8005240 <HAL_I2C_MspDeInit+0x40>)
 800522a:	f000 fdd7 	bl	8005ddc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40005400 	.word	0x40005400
 800523c:	40023800 	.word	0x40023800
 8005240:	40020400 	.word	0x40020400

08005244 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b08a      	sub	sp, #40	; 0x28
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524c:	f107 0314 	add.w	r3, r7, #20
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	605a      	str	r2, [r3, #4]
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	60da      	str	r2, [r3, #12]
 800525a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a31      	ldr	r2, [pc, #196]	; (8005328 <HAL_SD_MspInit+0xe4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d15b      	bne.n	800531e <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_SD_MspInit+0xe8>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	4a2f      	ldr	r2, [pc, #188]	; (800532c <HAL_SD_MspInit+0xe8>)
 8005270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005274:	6453      	str	r3, [r2, #68]	; 0x44
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_SD_MspInit+0xe8>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <HAL_SD_MspInit+0xe8>)
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	4a28      	ldr	r2, [pc, #160]	; (800532c <HAL_SD_MspInit+0xe8>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6313      	str	r3, [r2, #48]	; 0x30
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <HAL_SD_MspInit+0xe8>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	60bb      	str	r3, [r7, #8]
 80052a2:	4b22      	ldr	r3, [pc, #136]	; (800532c <HAL_SD_MspInit+0xe8>)
 80052a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a6:	4a21      	ldr	r2, [pc, #132]	; (800532c <HAL_SD_MspInit+0xe8>)
 80052a8:	f043 0308 	orr.w	r3, r3, #8
 80052ac:	6313      	str	r3, [r2, #48]	; 0x30
 80052ae:	4b1f      	ldr	r3, [pc, #124]	; (800532c <HAL_SD_MspInit+0xe8>)
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	60bb      	str	r3, [r7, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80052ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c0:	2302      	movs	r3, #2
 80052c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052c4:	2301      	movs	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c8:	2303      	movs	r3, #3
 80052ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052cc:	230c      	movs	r3, #12
 80052ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052d0:	f107 0314 	add.w	r3, r7, #20
 80052d4:	4619      	mov	r1, r3
 80052d6:	4816      	ldr	r0, [pc, #88]	; (8005330 <HAL_SD_MspInit+0xec>)
 80052d8:	f000 fbfc 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80052dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ea:	2303      	movs	r3, #3
 80052ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80052ee:	230c      	movs	r3, #12
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	4619      	mov	r1, r3
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <HAL_SD_MspInit+0xec>)
 80052fa:	f000 fbeb 	bl	8005ad4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80052fe:	2304      	movs	r3, #4
 8005300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005302:	2302      	movs	r3, #2
 8005304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005306:	2301      	movs	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530a:	2303      	movs	r3, #3
 800530c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800530e:	230c      	movs	r3, #12
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	4619      	mov	r1, r3
 8005318:	4806      	ldr	r0, [pc, #24]	; (8005334 <HAL_SD_MspInit+0xf0>)
 800531a:	f000 fbdb 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800531e:	bf00      	nop
 8005320:	3728      	adds	r7, #40	; 0x28
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40012c00 	.word	0x40012c00
 800532c:	40023800 	.word	0x40023800
 8005330:	40020800 	.word	0x40020800
 8005334:	40020c00 	.word	0x40020c00

08005338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	; 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_SPI_MspInit+0x84>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d12b      	bne.n	80053b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	4b18      	ldr	r3, [pc, #96]	; (80053c0 <HAL_SPI_MspInit+0x88>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	4a17      	ldr	r2, [pc, #92]	; (80053c0 <HAL_SPI_MspInit+0x88>)
 8005364:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005368:	6453      	str	r3, [r2, #68]	; 0x44
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_SPI_MspInit+0x88>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_SPI_MspInit+0x88>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <HAL_SPI_MspInit+0x88>)
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	6313      	str	r3, [r2, #48]	; 0x30
 8005386:	4b0e      	ldr	r3, [pc, #56]	; (80053c0 <HAL_SPI_MspInit+0x88>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005392:	23e0      	movs	r3, #224	; 0xe0
 8005394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005396:	2302      	movs	r3, #2
 8005398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539e:	2303      	movs	r3, #3
 80053a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80053a2:	2305      	movs	r3, #5
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	4619      	mov	r1, r3
 80053ac:	4805      	ldr	r0, [pc, #20]	; (80053c4 <HAL_SPI_MspInit+0x8c>)
 80053ae:	f000 fb91 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80053b2:	bf00      	nop
 80053b4:	3728      	adds	r7, #40	; 0x28
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40013000 	.word	0x40013000
 80053c0:	40023800 	.word	0x40023800
 80053c4:	40020000 	.word	0x40020000

080053c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d8:	d10e      	bne.n	80053f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	4b13      	ldr	r3, [pc, #76]	; (800542c <HAL_TIM_Base_MspInit+0x64>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a12      	ldr	r2, [pc, #72]	; (800542c <HAL_TIM_Base_MspInit+0x64>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b10      	ldr	r3, [pc, #64]	; (800542c <HAL_TIM_Base_MspInit+0x64>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80053f6:	e012      	b.n	800541e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0c      	ldr	r2, [pc, #48]	; (8005430 <HAL_TIM_Base_MspInit+0x68>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10d      	bne.n	800541e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <HAL_TIM_Base_MspInit+0x64>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a08      	ldr	r2, [pc, #32]	; (800542c <HAL_TIM_Base_MspInit+0x64>)
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_TIM_Base_MspInit+0x64>)
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
}
 800541e:	bf00      	nop
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800
 8005430:	40000400 	.word	0x40000400

08005434 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800543c:	f107 0314 	add.w	r3, r7, #20
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005454:	d11f      	bne.n	8005496 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <HAL_TIM_MspPostInit+0xb0>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <HAL_TIM_MspPostInit+0xb0>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b1f      	ldr	r3, [pc, #124]	; (80054e4 <HAL_TIM_MspPostInit+0xb0>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	613b      	str	r3, [r7, #16]
 8005470:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005478:	2302      	movs	r3, #2
 800547a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005480:	2300      	movs	r3, #0
 8005482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005484:	2301      	movs	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	4816      	ldr	r0, [pc, #88]	; (80054e8 <HAL_TIM_MspPostInit+0xb4>)
 8005490:	f000 fb20 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005494:	e022      	b.n	80054dc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <HAL_TIM_MspPostInit+0xb8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d11d      	bne.n	80054dc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054a0:	2300      	movs	r3, #0
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	4b0f      	ldr	r3, [pc, #60]	; (80054e4 <HAL_TIM_MspPostInit+0xb0>)
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <HAL_TIM_MspPostInit+0xb0>)
 80054aa:	f043 0304 	orr.w	r3, r3, #4
 80054ae:	6313      	str	r3, [r2, #48]	; 0x30
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <HAL_TIM_MspPostInit+0xb0>)
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80054bc:	2340      	movs	r3, #64	; 0x40
 80054be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c4:	2300      	movs	r3, #0
 80054c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c8:	2300      	movs	r3, #0
 80054ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054cc:	2302      	movs	r3, #2
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054d0:	f107 0314 	add.w	r3, r7, #20
 80054d4:	4619      	mov	r1, r3
 80054d6:	4806      	ldr	r0, [pc, #24]	; (80054f0 <HAL_TIM_MspPostInit+0xbc>)
 80054d8:	f000 fafc 	bl	8005ad4 <HAL_GPIO_Init>
}
 80054dc:	bf00      	nop
 80054de:	3728      	adds	r7, #40	; 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40020000 	.word	0x40020000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40020800 	.word	0x40020800

080054f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <HAL_UART_MspInit+0x84>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d12c      	bne.n	8005570 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	4b18      	ldr	r3, [pc, #96]	; (800557c <HAL_UART_MspInit+0x88>)
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	4a17      	ldr	r2, [pc, #92]	; (800557c <HAL_UART_MspInit+0x88>)
 8005520:	f043 0310 	orr.w	r3, r3, #16
 8005524:	6453      	str	r3, [r2, #68]	; 0x44
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <HAL_UART_MspInit+0x88>)
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b11      	ldr	r3, [pc, #68]	; (800557c <HAL_UART_MspInit+0x88>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4a10      	ldr	r2, [pc, #64]	; (800557c <HAL_UART_MspInit+0x88>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6313      	str	r3, [r2, #48]	; 0x30
 8005542:	4b0e      	ldr	r3, [pc, #56]	; (800557c <HAL_UART_MspInit+0x88>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800554e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005554:	2302      	movs	r3, #2
 8005556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	2300      	movs	r3, #0
 800555a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005560:	2307      	movs	r3, #7
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	4619      	mov	r1, r3
 800556a:	4805      	ldr	r0, [pc, #20]	; (8005580 <HAL_UART_MspInit+0x8c>)
 800556c:	f000 fab2 	bl	8005ad4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005570:	bf00      	nop
 8005572:	3728      	adds	r7, #40	; 0x28
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40011000 	.word	0x40011000
 800557c:	40023800 	.word	0x40023800
 8005580:	40020000 	.word	0x40020000

08005584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005588:	e7fe      	b.n	8005588 <NMI_Handler+0x4>

0800558a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800558e:	e7fe      	b.n	800558e <HardFault_Handler+0x4>

08005590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005594:	e7fe      	b.n	8005594 <MemManage_Handler+0x4>

08005596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005596:	b480      	push	{r7}
 8005598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800559a:	e7fe      	b.n	800559a <BusFault_Handler+0x4>

0800559c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055a0:	e7fe      	b.n	80055a0 <UsageFault_Handler+0x4>

080055a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055a2:	b480      	push	{r7}
 80055a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055a6:	bf00      	nop
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055be:	b480      	push	{r7}
 80055c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055c2:	bf00      	nop
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055d0:	f000 f956 	bl	8005880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055d4:	bf00      	nop
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
	return 1;
 80055dc:	2301      	movs	r3, #1
}
 80055de:	4618      	mov	r0, r3
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <_kill>:

int _kill(int pid, int sig) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80055f2:	f009 f853 	bl	800e69c <__errno>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2216      	movs	r2, #22
 80055fa:	601a      	str	r2, [r3, #0]
	return -1;
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005600:	4618      	mov	r0, r3
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <_exit>:

void _exit(int status) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005610:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ffe7 	bl	80055e8 <_kill>
	while (1) {
 800561a:	e7fe      	b.n	800561a <_exit+0x12>

0800561c <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	e00a      	b.n	8005644 <_read+0x28>
		*ptr++ = __io_getchar();
 800562e:	f3af 8000 	nop.w
 8005632:	4601      	mov	r1, r0
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	1c5a      	adds	r2, r3, #1
 8005638:	60ba      	str	r2, [r7, #8]
 800563a:	b2ca      	uxtb	r2, r1
 800563c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	3301      	adds	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	dbf0      	blt.n	800562e <_read+0x12>
	}

	return len;
 800564c:	687b      	ldr	r3, [r7, #4]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e009      	b.n	800567c <_write+0x26>
		__io_putchar(*ptr++);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	60ba      	str	r2, [r7, #8]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	3301      	adds	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	dbf1      	blt.n	8005668 <_write+0x12>
	}
	return len;
 8005684:	687b      	ldr	r3, [r7, #4]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_close>:

int _close(int file) {
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
	return -1;
 8005696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800569a:	4618      	mov	r0, r3
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <_fstat>:

int _fstat(int file, struct stat *st) {
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056b6:	605a      	str	r2, [r3, #4]
	return 0;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <_isatty>:

int _isatty(int file) {
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
	return 1;
 80056ce:	2301      	movs	r3, #1
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <_lseek>:

int _lseek(int file, int ptr, int dir) {
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	return 0;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800570c:	4b13      	ldr	r3, [pc, #76]	; (800575c <_sbrk+0x64>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <_sbrk+0x64>)
 8005716:	4a12      	ldr	r2, [pc, #72]	; (8005760 <_sbrk+0x68>)
 8005718:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 800571a:	4b10      	ldr	r3, [pc, #64]	; (800575c <_sbrk+0x64>)
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	429a      	cmp	r2, r3
 8005726:	d207      	bcs.n	8005738 <_sbrk+0x40>
		errno = ENOMEM;
 8005728:	f008 ffb8 	bl	800e69c <__errno>
 800572c:	4603      	mov	r3, r0
 800572e:	220c      	movs	r2, #12
 8005730:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005736:	e009      	b.n	800574c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <_sbrk+0x64>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <_sbrk+0x64>)
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	4a05      	ldr	r2, [pc, #20]	; (800575c <_sbrk+0x64>)
 8005748:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800574a:	68fb      	ldr	r3, [r7, #12]
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20018000 	.word	0x20018000
 8005758:	00000400 	.word	0x00000400
 800575c:	200005e0 	.word	0x200005e0
 8005760:	20000638 	.word	0x20000638

08005764 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8005764:	b480      	push	{r7}
 8005766:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <SystemInit+0x20>)
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	4a05      	ldr	r2, [pc, #20]	; (8005784 <SystemInit+0x20>)
 8005770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	e000ed00 	.word	0xe000ed00

08005788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800578c:	480d      	ldr	r0, [pc, #52]	; (80057c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800578e:	490e      	ldr	r1, [pc, #56]	; (80057c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005794:	e002      	b.n	800579c <LoopCopyDataInit>

08005796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800579a:	3304      	adds	r3, #4

0800579c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800579c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800579e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057a0:	d3f9      	bcc.n	8005796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057a2:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057a4:	4c0b      	ldr	r4, [pc, #44]	; (80057d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057a8:	e001      	b.n	80057ae <LoopFillZerobss>

080057aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057ac:	3204      	adds	r2, #4

080057ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057b0:	d3fb      	bcc.n	80057aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80057b2:	f7ff ffd7 	bl	8005764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057b6:	f008 ff77 	bl	800e6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ba:	f7fd fe61 	bl	8003480 <main>
  bx  lr    
 80057be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80057c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057c8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80057cc:	08013450 	.word	0x08013450
  ldr r2, =_sbss
 80057d0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80057d4:	20000634 	.word	0x20000634

080057d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057d8:	e7fe      	b.n	80057d8 <ADC_IRQHandler>
	...

080057dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057e0:	4b0e      	ldr	r3, [pc, #56]	; (800581c <HAL_Init+0x40>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a0d      	ldr	r2, [pc, #52]	; (800581c <HAL_Init+0x40>)
 80057e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_Init+0x40>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0a      	ldr	r2, [pc, #40]	; (800581c <HAL_Init+0x40>)
 80057f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <HAL_Init+0x40>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a07      	ldr	r2, [pc, #28]	; (800581c <HAL_Init+0x40>)
 80057fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005804:	2003      	movs	r0, #3
 8005806:	f000 f931 	bl	8005a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800580a:	200f      	movs	r0, #15
 800580c:	f000 f808 	bl	8005820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005810:	f7ff fc78 	bl	8005104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	40023c00 	.word	0x40023c00

08005820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <HAL_InitTick+0x54>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_InitTick+0x58>)
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	4619      	mov	r1, r3
 8005832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005836:	fbb3 f3f1 	udiv	r3, r3, r1
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f93b 	bl	8005aba <HAL_SYSTICK_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e00e      	b.n	800586c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b0f      	cmp	r3, #15
 8005852:	d80a      	bhi.n	800586a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005854:	2200      	movs	r2, #0
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800585c:	f000 f911 	bl	8005a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005860:	4a06      	ldr	r2, [pc, #24]	; (800587c <HAL_InitTick+0x5c>)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	e000      	b.n	800586c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
}
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	20000018 	.word	0x20000018
 8005878:	20000020 	.word	0x20000020
 800587c:	2000001c 	.word	0x2000001c

08005880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <HAL_IncTick+0x20>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <HAL_IncTick+0x24>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4413      	add	r3, r2
 8005890:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <HAL_IncTick+0x24>)
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000020 	.word	0x20000020
 80058a4:	200005e4 	.word	0x200005e4

080058a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return uwTick;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_GetTick+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	200005e4 	.word	0x200005e4

080058c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058c8:	f7ff ffee 	bl	80058a8 <HAL_GetTick>
 80058cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058d8:	d005      	beq.n	80058e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_Delay+0x44>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4413      	add	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80058e6:	bf00      	nop
 80058e8:	f7ff ffde 	bl	80058a8 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d8f7      	bhi.n	80058e8 <HAL_Delay+0x28>
  {
  }
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000020 	.word	0x20000020

08005908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <__NVIC_SetPriorityGrouping+0x44>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005924:	4013      	ands	r3, r2
 8005926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800593a:	4a04      	ldr	r2, [pc, #16]	; (800594c <__NVIC_SetPriorityGrouping+0x44>)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	60d3      	str	r3, [r2, #12]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	e000ed00 	.word	0xe000ed00

08005950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005954:	4b04      	ldr	r3, [pc, #16]	; (8005968 <__NVIC_GetPriorityGrouping+0x18>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	0a1b      	lsrs	r3, r3, #8
 800595a:	f003 0307 	and.w	r3, r3, #7
}
 800595e:	4618      	mov	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	e000ed00 	.word	0xe000ed00

0800596c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	6039      	str	r1, [r7, #0]
 8005976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800597c:	2b00      	cmp	r3, #0
 800597e:	db0a      	blt.n	8005996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	490c      	ldr	r1, [pc, #48]	; (80059b8 <__NVIC_SetPriority+0x4c>)
 8005986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598a:	0112      	lsls	r2, r2, #4
 800598c:	b2d2      	uxtb	r2, r2
 800598e:	440b      	add	r3, r1
 8005990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005994:	e00a      	b.n	80059ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	4908      	ldr	r1, [pc, #32]	; (80059bc <__NVIC_SetPriority+0x50>)
 800599c:	79fb      	ldrb	r3, [r7, #7]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	3b04      	subs	r3, #4
 80059a4:	0112      	lsls	r2, r2, #4
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	440b      	add	r3, r1
 80059aa:	761a      	strb	r2, [r3, #24]
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	e000e100 	.word	0xe000e100
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b089      	sub	sp, #36	; 0x24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f1c3 0307 	rsb	r3, r3, #7
 80059da:	2b04      	cmp	r3, #4
 80059dc:	bf28      	it	cs
 80059de:	2304      	movcs	r3, #4
 80059e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3304      	adds	r3, #4
 80059e6:	2b06      	cmp	r3, #6
 80059e8:	d902      	bls.n	80059f0 <NVIC_EncodePriority+0x30>
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3b03      	subs	r3, #3
 80059ee:	e000      	b.n	80059f2 <NVIC_EncodePriority+0x32>
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43da      	mvns	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	401a      	ands	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	43d9      	mvns	r1, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a18:	4313      	orrs	r3, r2
         );
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3724      	adds	r7, #36	; 0x24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a38:	d301      	bcc.n	8005a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e00f      	b.n	8005a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <SysTick_Config+0x40>)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a46:	210f      	movs	r1, #15
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a4c:	f7ff ff8e 	bl	800596c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a50:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <SysTick_Config+0x40>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a56:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <SysTick_Config+0x40>)
 8005a58:	2207      	movs	r2, #7
 8005a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	e000e010 	.word	0xe000e010

08005a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ff47 	bl	8005908 <__NVIC_SetPriorityGrouping>
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	4603      	mov	r3, r0
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a94:	f7ff ff5c 	bl	8005950 <__NVIC_GetPriorityGrouping>
 8005a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7ff ff8e 	bl	80059c0 <NVIC_EncodePriority>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff ff5d 	bl	800596c <__NVIC_SetPriority>
}
 8005ab2:	bf00      	nop
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffb0 	bl	8005a28 <SysTick_Config>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b089      	sub	sp, #36	; 0x24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
 8005aee:	e159      	b.n	8005da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005af0:	2201      	movs	r2, #1
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4013      	ands	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	f040 8148 	bne.w	8005d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d005      	beq.n	8005b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d130      	bne.n	8005b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	2203      	movs	r2, #3
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	fa02 f303 	lsl.w	r3, r2, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	091b      	lsrs	r3, r3, #4
 8005b72:	f003 0201 	and.w	r2, r3, #1
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69ba      	ldr	r2, [r7, #24]
 8005b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d017      	beq.n	8005bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	2203      	movs	r2, #3
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d123      	bne.n	8005c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	08da      	lsrs	r2, r3, #3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3208      	adds	r2, #8
 8005bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	220f      	movs	r2, #15
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0307 	and.w	r3, r3, #7
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	08da      	lsrs	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	3208      	adds	r2, #8
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	2203      	movs	r2, #3
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 0203 	and.w	r2, r3, #3
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80a2 	beq.w	8005d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	4b57      	ldr	r3, [pc, #348]	; (8005dbc <HAL_GPIO_Init+0x2e8>)
 8005c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c62:	4a56      	ldr	r2, [pc, #344]	; (8005dbc <HAL_GPIO_Init+0x2e8>)
 8005c64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c68:	6453      	str	r3, [r2, #68]	; 0x44
 8005c6a:	4b54      	ldr	r3, [pc, #336]	; (8005dbc <HAL_GPIO_Init+0x2e8>)
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c76:	4a52      	ldr	r2, [pc, #328]	; (8005dc0 <HAL_GPIO_Init+0x2ec>)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	089b      	lsrs	r3, r3, #2
 8005c7c:	3302      	adds	r3, #2
 8005c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	220f      	movs	r2, #15
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43db      	mvns	r3, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4013      	ands	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a49      	ldr	r2, [pc, #292]	; (8005dc4 <HAL_GPIO_Init+0x2f0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d019      	beq.n	8005cd6 <HAL_GPIO_Init+0x202>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a48      	ldr	r2, [pc, #288]	; (8005dc8 <HAL_GPIO_Init+0x2f4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_GPIO_Init+0x1fe>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a47      	ldr	r2, [pc, #284]	; (8005dcc <HAL_GPIO_Init+0x2f8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00d      	beq.n	8005cce <HAL_GPIO_Init+0x1fa>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a46      	ldr	r2, [pc, #280]	; (8005dd0 <HAL_GPIO_Init+0x2fc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <HAL_GPIO_Init+0x1f6>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a45      	ldr	r2, [pc, #276]	; (8005dd4 <HAL_GPIO_Init+0x300>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_GPIO_Init+0x1f2>
 8005cc2:	2304      	movs	r3, #4
 8005cc4:	e008      	b.n	8005cd8 <HAL_GPIO_Init+0x204>
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	e006      	b.n	8005cd8 <HAL_GPIO_Init+0x204>
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e004      	b.n	8005cd8 <HAL_GPIO_Init+0x204>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e002      	b.n	8005cd8 <HAL_GPIO_Init+0x204>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <HAL_GPIO_Init+0x204>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	f002 0203 	and.w	r2, r2, #3
 8005cde:	0092      	lsls	r2, r2, #2
 8005ce0:	4093      	lsls	r3, r2
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ce8:	4935      	ldr	r1, [pc, #212]	; (8005dc0 <HAL_GPIO_Init+0x2ec>)
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	089b      	lsrs	r3, r3, #2
 8005cee:	3302      	adds	r3, #2
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4013      	ands	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d1a:	4a2f      	ldr	r2, [pc, #188]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d20:	4b2d      	ldr	r3, [pc, #180]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d44:	4a24      	ldr	r2, [pc, #144]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d4a:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d6e:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	4013      	ands	r3, r2
 8005d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d98:	4a0f      	ldr	r2, [pc, #60]	; (8005dd8 <HAL_GPIO_Init+0x304>)
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	3301      	adds	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	2b0f      	cmp	r3, #15
 8005da8:	f67f aea2 	bls.w	8005af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005dac:	bf00      	nop
 8005dae:	bf00      	nop
 8005db0:	3724      	adds	r7, #36	; 0x24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	40023800 	.word	0x40023800
 8005dc0:	40013800 	.word	0x40013800
 8005dc4:	40020000 	.word	0x40020000
 8005dc8:	40020400 	.word	0x40020400
 8005dcc:	40020800 	.word	0x40020800
 8005dd0:	40020c00 	.word	0x40020c00
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	40013c00 	.word	0x40013c00

08005ddc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	e0bb      	b.n	8005f70 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005df8:	2201      	movs	r2, #1
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005e00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	4013      	ands	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	f040 80ab 	bne.w	8005f6a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005e14:	4a5c      	ldr	r2, [pc, #368]	; (8005f88 <HAL_GPIO_DeInit+0x1ac>)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	f003 0303 	and.w	r3, r3, #3
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	220f      	movs	r2, #15
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a54      	ldr	r2, [pc, #336]	; (8005f8c <HAL_GPIO_DeInit+0x1b0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d019      	beq.n	8005e72 <HAL_GPIO_DeInit+0x96>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a53      	ldr	r2, [pc, #332]	; (8005f90 <HAL_GPIO_DeInit+0x1b4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_GPIO_DeInit+0x92>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a52      	ldr	r2, [pc, #328]	; (8005f94 <HAL_GPIO_DeInit+0x1b8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00d      	beq.n	8005e6a <HAL_GPIO_DeInit+0x8e>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a51      	ldr	r2, [pc, #324]	; (8005f98 <HAL_GPIO_DeInit+0x1bc>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <HAL_GPIO_DeInit+0x8a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a50      	ldr	r2, [pc, #320]	; (8005f9c <HAL_GPIO_DeInit+0x1c0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_GPIO_DeInit+0x86>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	e008      	b.n	8005e74 <HAL_GPIO_DeInit+0x98>
 8005e62:	2307      	movs	r3, #7
 8005e64:	e006      	b.n	8005e74 <HAL_GPIO_DeInit+0x98>
 8005e66:	2303      	movs	r3, #3
 8005e68:	e004      	b.n	8005e74 <HAL_GPIO_DeInit+0x98>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e002      	b.n	8005e74 <HAL_GPIO_DeInit+0x98>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e000      	b.n	8005e74 <HAL_GPIO_DeInit+0x98>
 8005e72:	2300      	movs	r3, #0
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	f002 0203 	and.w	r2, r2, #3
 8005e7a:	0092      	lsls	r2, r2, #2
 8005e7c:	4093      	lsls	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d132      	bne.n	8005eea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005e84:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	4944      	ldr	r1, [pc, #272]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005e92:	4b43      	ldr	r3, [pc, #268]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	43db      	mvns	r3, r3
 8005e9a:	4941      	ldr	r1, [pc, #260]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005ea0:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	493d      	ldr	r1, [pc, #244]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005eaa:	4013      	ands	r3, r2
 8005eac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005eae:	4b3c      	ldr	r3, [pc, #240]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	43db      	mvns	r3, r3
 8005eb6:	493a      	ldr	r1, [pc, #232]	; (8005fa0 <HAL_GPIO_DeInit+0x1c4>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	220f      	movs	r2, #15
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005ecc:	4a2e      	ldr	r2, [pc, #184]	; (8005f88 <HAL_GPIO_DeInit+0x1ac>)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	089b      	lsrs	r3, r3, #2
 8005ed2:	3302      	adds	r3, #2
 8005ed4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	43da      	mvns	r2, r3
 8005edc:	482a      	ldr	r0, [pc, #168]	; (8005f88 <HAL_GPIO_DeInit+0x1ac>)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	400a      	ands	r2, r1
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	2103      	movs	r1, #3
 8005ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	08da      	lsrs	r2, r3, #3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3208      	adds	r2, #8
 8005f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	220f      	movs	r2, #15
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	08d2      	lsrs	r2, r2, #3
 8005f20:	4019      	ands	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3208      	adds	r2, #8
 8005f26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	2103      	movs	r1, #3
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	2101      	movs	r1, #1
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	401a      	ands	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689a      	ldr	r2, [r3, #8]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	2103      	movs	r1, #3
 8005f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	401a      	ands	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	f67f af40 	bls.w	8005df8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40013800 	.word	0x40013800
 8005f8c:	40020000 	.word	0x40020000
 8005f90:	40020400 	.word	0x40020400
 8005f94:	40020800 	.word	0x40020800
 8005f98:	40020c00 	.word	0x40020c00
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40013c00 	.word	0x40013c00

08005fa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	887b      	ldrh	r3, [r7, #2]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	73fb      	strb	r3, [r7, #15]
 8005fc0:	e001      	b.n	8005fc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	807b      	strh	r3, [r7, #2]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fe4:	787b      	ldrb	r3, [r7, #1]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fea:	887a      	ldrh	r2, [r7, #2]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ff0:	e003      	b.n	8005ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ff2:	887b      	ldrh	r3, [r7, #2]
 8005ff4:	041a      	lsls	r2, r3, #16
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	619a      	str	r2, [r3, #24]
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006018:	887a      	ldrh	r2, [r7, #2]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	4013      	ands	r3, r2
 800601e:	041a      	lsls	r2, r3, #16
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	43d9      	mvns	r1, r3
 8006024:	887b      	ldrh	r3, [r7, #2]
 8006026:	400b      	ands	r3, r1
 8006028:	431a      	orrs	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	619a      	str	r2, [r3, #24]
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e12b      	b.n	80062a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff f876 	bl	8005154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 0201 	bic.w	r2, r2, #1
 800607e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800608e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800609e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060a0:	f002 f89e 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a81      	ldr	r2, [pc, #516]	; (80062b0 <HAL_I2C_Init+0x274>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d807      	bhi.n	80060c0 <HAL_I2C_Init+0x84>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a80      	ldr	r2, [pc, #512]	; (80062b4 <HAL_I2C_Init+0x278>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bf94      	ite	ls
 80060b8:	2301      	movls	r3, #1
 80060ba:	2300      	movhi	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e006      	b.n	80060ce <HAL_I2C_Init+0x92>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a7d      	ldr	r2, [pc, #500]	; (80062b8 <HAL_I2C_Init+0x27c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	bf94      	ite	ls
 80060c8:	2301      	movls	r3, #1
 80060ca:	2300      	movhi	r3, #0
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e0e7      	b.n	80062a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4a78      	ldr	r2, [pc, #480]	; (80062bc <HAL_I2C_Init+0x280>)
 80060da:	fba2 2303 	umull	r2, r3, r2, r3
 80060de:	0c9b      	lsrs	r3, r3, #18
 80060e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4a6a      	ldr	r2, [pc, #424]	; (80062b0 <HAL_I2C_Init+0x274>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d802      	bhi.n	8006110 <HAL_I2C_Init+0xd4>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	3301      	adds	r3, #1
 800610e:	e009      	b.n	8006124 <HAL_I2C_Init+0xe8>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006116:	fb02 f303 	mul.w	r3, r2, r3
 800611a:	4a69      	ldr	r2, [pc, #420]	; (80062c0 <HAL_I2C_Init+0x284>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	099b      	lsrs	r3, r3, #6
 8006122:	3301      	adds	r3, #1
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	430b      	orrs	r3, r1
 800612a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006136:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	495c      	ldr	r1, [pc, #368]	; (80062b0 <HAL_I2C_Init+0x274>)
 8006140:	428b      	cmp	r3, r1
 8006142:	d819      	bhi.n	8006178 <HAL_I2C_Init+0x13c>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1e59      	subs	r1, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006152:	1c59      	adds	r1, r3, #1
 8006154:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006158:	400b      	ands	r3, r1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_I2C_Init+0x138>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1e59      	subs	r1, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	fbb1 f3f3 	udiv	r3, r1, r3
 800616c:	3301      	adds	r3, #1
 800616e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006172:	e051      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 8006174:	2304      	movs	r3, #4
 8006176:	e04f      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d111      	bne.n	80061a4 <HAL_I2C_Init+0x168>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	1e58      	subs	r0, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6859      	ldr	r1, [r3, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	440b      	add	r3, r1
 800618e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006192:	3301      	adds	r3, #1
 8006194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	e012      	b.n	80061ca <HAL_I2C_Init+0x18e>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1e58      	subs	r0, r3, #1
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6859      	ldr	r1, [r3, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	0099      	lsls	r1, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ba:	3301      	adds	r3, #1
 80061bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <HAL_I2C_Init+0x196>
 80061ce:	2301      	movs	r3, #1
 80061d0:	e022      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10e      	bne.n	80061f8 <HAL_I2C_Init+0x1bc>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1e58      	subs	r0, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6859      	ldr	r1, [r3, #4]
 80061e2:	460b      	mov	r3, r1
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	440b      	add	r3, r1
 80061e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80061ec:	3301      	adds	r3, #1
 80061ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f6:	e00f      	b.n	8006218 <HAL_I2C_Init+0x1dc>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	1e58      	subs	r0, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6859      	ldr	r1, [r3, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	0099      	lsls	r1, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	fbb0 f3f3 	udiv	r3, r0, r3
 800620e:	3301      	adds	r3, #1
 8006210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	6809      	ldr	r1, [r1, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	431a      	orrs	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006246:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6911      	ldr	r1, [r2, #16]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	68d2      	ldr	r2, [r2, #12]
 8006252:	4311      	orrs	r1, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	430b      	orrs	r3, r1
 800625a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	695a      	ldr	r2, [r3, #20]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	000186a0 	.word	0x000186a0
 80062b4:	001e847f 	.word	0x001e847f
 80062b8:	003d08ff 	.word	0x003d08ff
 80062bc:	431bde83 	.word	0x431bde83
 80062c0:	10624dd3 	.word	0x10624dd3

080062c4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e021      	b.n	800631a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2224      	movs	r2, #36	; 0x24
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0201 	bic.w	r2, r2, #1
 80062ec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fe ff86 	bl	8005200 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	461a      	mov	r2, r3
 8006330:	460b      	mov	r3, r1
 8006332:	817b      	strh	r3, [r7, #10]
 8006334:	4613      	mov	r3, r2
 8006336:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006338:	f7ff fab6 	bl	80058a8 <HAL_GetTick>
 800633c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b20      	cmp	r3, #32
 8006348:	f040 80e0 	bne.w	800650c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2319      	movs	r3, #25
 8006352:	2201      	movs	r2, #1
 8006354:	4970      	ldr	r1, [pc, #448]	; (8006518 <HAL_I2C_Master_Transmit+0x1f4>)
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f001 f8f6 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006362:	2302      	movs	r3, #2
 8006364:	e0d3      	b.n	800650e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d101      	bne.n	8006374 <HAL_I2C_Master_Transmit+0x50>
 8006370:	2302      	movs	r3, #2
 8006372:	e0cc      	b.n	800650e <HAL_I2C_Master_Transmit+0x1ea>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b01      	cmp	r3, #1
 8006388:	d007      	beq.n	800639a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2210      	movs	r2, #16
 80063b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	893a      	ldrh	r2, [r7, #8]
 80063ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4a50      	ldr	r2, [pc, #320]	; (800651c <HAL_I2C_Master_Transmit+0x1f8>)
 80063da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80063dc:	8979      	ldrh	r1, [r7, #10]
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	6a3a      	ldr	r2, [r7, #32]
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fde2 	bl	8006fac <I2C_MasterRequestWrite>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e08d      	b.n	800650e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f2:	2300      	movs	r3, #0
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006408:	e066      	b.n	80064d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	6a39      	ldr	r1, [r7, #32]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 f970 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00d      	beq.n	8006436 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	2b04      	cmp	r3, #4
 8006420:	d107      	bne.n	8006432 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006430:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e06b      	b.n	800650e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	781a      	ldrb	r2, [r3, #0]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645e:	3b01      	subs	r3, #1
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b04      	cmp	r3, #4
 8006472:	d11b      	bne.n	80064ac <HAL_I2C_Master_Transmit+0x188>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	d017      	beq.n	80064ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	6a39      	ldr	r1, [r7, #32]
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f001 f960 	bl	8007776 <I2C_WaitOnBTFFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00d      	beq.n	80064d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d107      	bne.n	80064d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e01a      	b.n	800650e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d194      	bne.n	800640a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	e000      	b.n	800650e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800650c:	2302      	movs	r3, #2
  }
}
 800650e:	4618      	mov	r0, r3
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	00100002 	.word	0x00100002
 800651c:	ffff0000 	.word	0xffff0000

08006520 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	; 0x30
 8006524:	af02      	add	r7, sp, #8
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	461a      	mov	r2, r3
 800652c:	460b      	mov	r3, r1
 800652e:	817b      	strh	r3, [r7, #10]
 8006530:	4613      	mov	r3, r2
 8006532:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006534:	f7ff f9b8 	bl	80058a8 <HAL_GetTick>
 8006538:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b20      	cmp	r3, #32
 8006544:	f040 820b 	bne.w	800695e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2319      	movs	r3, #25
 800654e:	2201      	movs	r2, #1
 8006550:	497c      	ldr	r1, [pc, #496]	; (8006744 <HAL_I2C_Master_Receive+0x224>)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fff8 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800655e:	2302      	movs	r3, #2
 8006560:	e1fe      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_I2C_Master_Receive+0x50>
 800656c:	2302      	movs	r3, #2
 800656e:	e1f7      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	2b01      	cmp	r3, #1
 8006584:	d007      	beq.n	8006596 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0201 	orr.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2222      	movs	r2, #34	; 0x22
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2210      	movs	r2, #16
 80065b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	893a      	ldrh	r2, [r7, #8]
 80065c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a5c      	ldr	r2, [pc, #368]	; (8006748 <HAL_I2C_Master_Receive+0x228>)
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80065d8:	8979      	ldrh	r1, [r7, #10]
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fd66 	bl	80070b0 <I2C_MasterRequestRead>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e1b8      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d113      	bne.n	800661e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f6:	2300      	movs	r3, #0
 80065f8:	623b      	str	r3, [r7, #32]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695b      	ldr	r3, [r3, #20]
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e18c      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006622:	2b01      	cmp	r3, #1
 8006624:	d11b      	bne.n	800665e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006634:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e16c      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	2b02      	cmp	r3, #2
 8006664:	d11b      	bne.n	800669e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006674:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006686:	2300      	movs	r3, #0
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	e14c      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80066c4:	e138      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	f200 80f1 	bhi.w	80068b2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d123      	bne.n	8006720 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f001 f88b 	bl	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d001      	beq.n	80066ec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e139      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	1c5a      	adds	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800671e:	e10b      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	2b02      	cmp	r3, #2
 8006726:	d14e      	bne.n	80067c6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	2200      	movs	r2, #0
 8006730:	4906      	ldr	r1, [pc, #24]	; (800674c <HAL_I2C_Master_Receive+0x22c>)
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 ff08 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e10e      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
 8006742:	bf00      	nop
 8006744:	00100002 	.word	0x00100002
 8006748:	ffff0000 	.word	0xffff0000
 800674c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800675e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80067c4:	e0b8      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	2200      	movs	r2, #0
 80067ce:	4966      	ldr	r1, [pc, #408]	; (8006968 <HAL_I2C_Master_Receive+0x448>)
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 feb9 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e0bf      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691a      	ldr	r2, [r3, #16]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006818:	b29b      	uxth	r3, r3
 800681a:	3b01      	subs	r3, #1
 800681c:	b29a      	uxth	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	2200      	movs	r2, #0
 800682a:	494f      	ldr	r1, [pc, #316]	; (8006968 <HAL_I2C_Master_Receive+0x448>)
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fe8b 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e091      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800684a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006868:	3b01      	subs	r3, #1
 800686a:	b29a      	uxth	r2, r3
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	3b01      	subs	r3, #1
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	b2d2      	uxtb	r2, r2
 800688a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	3b01      	subs	r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80068b0:	e042      	b.n	8006938 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 ff9e 	bl	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d001      	beq.n	80068c6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e04c      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	f003 0304 	and.w	r3, r3, #4
 8006902:	2b04      	cmp	r3, #4
 8006904:	d118      	bne.n	8006938 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	2b00      	cmp	r3, #0
 800693e:	f47f aec2 	bne.w	80066c6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800695e:	2302      	movs	r3, #2
  }
}
 8006960:	4618      	mov	r0, r3
 8006962:	3728      	adds	r7, #40	; 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	00010004 	.word	0x00010004

0800696c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	4608      	mov	r0, r1
 8006976:	4611      	mov	r1, r2
 8006978:	461a      	mov	r2, r3
 800697a:	4603      	mov	r3, r0
 800697c:	817b      	strh	r3, [r7, #10]
 800697e:	460b      	mov	r3, r1
 8006980:	813b      	strh	r3, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006986:	f7fe ff8f 	bl	80058a8 <HAL_GetTick>
 800698a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b20      	cmp	r3, #32
 8006996:	f040 80d9 	bne.w	8006b4c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	2319      	movs	r3, #25
 80069a0:	2201      	movs	r2, #1
 80069a2:	496d      	ldr	r1, [pc, #436]	; (8006b58 <HAL_I2C_Mem_Write+0x1ec>)
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fdcf 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80069b0:	2302      	movs	r3, #2
 80069b2:	e0cc      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_I2C_Mem_Write+0x56>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0c5      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d007      	beq.n	80069e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2221      	movs	r2, #33	; 0x21
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a3a      	ldr	r2, [r7, #32]
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4a4d      	ldr	r2, [pc, #308]	; (8006b5c <HAL_I2C_Mem_Write+0x1f0>)
 8006a28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a2a:	88f8      	ldrh	r0, [r7, #6]
 8006a2c:	893a      	ldrh	r2, [r7, #8]
 8006a2e:	8979      	ldrh	r1, [r7, #10]
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	4603      	mov	r3, r0
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 fc06 	bl	800724c <I2C_RequestMemoryWrite>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d052      	beq.n	8006aec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e081      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fe50 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d107      	bne.n	8006a72 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e06b      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a90:	3b01      	subs	r3, #1
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b04      	cmp	r3, #4
 8006ab2:	d11b      	bne.n	8006aec <HAL_I2C_Mem_Write+0x180>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d017      	beq.n	8006aec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1aa      	bne.n	8006a4a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fe3c 	bl	8007776 <I2C_WaitOnBTFFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00d      	beq.n	8006b20 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	2b04      	cmp	r3, #4
 8006b0a:	d107      	bne.n	8006b1c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e016      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e000      	b.n	8006b4e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006b4c:	2302      	movs	r3, #2
  }
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	00100002 	.word	0x00100002
 8006b5c:	ffff0000 	.word	0xffff0000

08006b60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	; 0x30
 8006b64:	af02      	add	r7, sp, #8
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	4608      	mov	r0, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	817b      	strh	r3, [r7, #10]
 8006b72:	460b      	mov	r3, r1
 8006b74:	813b      	strh	r3, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b7a:	f7fe fe95 	bl	80058a8 <HAL_GetTick>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	f040 8208 	bne.w	8006f9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2319      	movs	r3, #25
 8006b94:	2201      	movs	r2, #1
 8006b96:	497b      	ldr	r1, [pc, #492]	; (8006d84 <HAL_I2C_Mem_Read+0x224>)
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fcd5 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e1fb      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_I2C_Mem_Read+0x56>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e1f4      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d007      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2222      	movs	r2, #34	; 0x22
 8006bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	4a5b      	ldr	r2, [pc, #364]	; (8006d88 <HAL_I2C_Mem_Read+0x228>)
 8006c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c1e:	88f8      	ldrh	r0, [r7, #6]
 8006c20:	893a      	ldrh	r2, [r7, #8]
 8006c22:	8979      	ldrh	r1, [r7, #10]
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fba2 	bl	8007378 <I2C_RequestMemoryRead>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e1b0      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d113      	bne.n	8006c6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c46:	2300      	movs	r3, #0
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e184      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d11b      	bne.n	8006cae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c86:	2300      	movs	r3, #0
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	61fb      	str	r3, [r7, #28]
 8006c9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e164      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d11b      	bne.n	8006cee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	e144      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	617b      	str	r3, [r7, #20]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006d04:	e138      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	f200 80f1 	bhi.w	8006ef2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d123      	bne.n	8006d60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fd6b 	bl	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e139      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	3b01      	subs	r3, #1
 8006d58:	b29a      	uxth	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d5e:	e10b      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d14e      	bne.n	8006e06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	2200      	movs	r2, #0
 8006d70:	4906      	ldr	r1, [pc, #24]	; (8006d8c <HAL_I2C_Mem_Read+0x22c>)
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f000 fbe8 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d008      	beq.n	8006d90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e10e      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
 8006d82:	bf00      	nop
 8006d84:	00100002 	.word	0x00100002
 8006d88:	ffff0000 	.word	0xffff0000
 8006d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691a      	ldr	r2, [r3, #16]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29a      	uxth	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e04:	e0b8      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	4966      	ldr	r1, [pc, #408]	; (8006fa8 <HAL_I2C_Mem_Read+0x448>)
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fb99 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0bf      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691a      	ldr	r2, [r3, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	2200      	movs	r2, #0
 8006e6a:	494f      	ldr	r1, [pc, #316]	; (8006fa8 <HAL_I2C_Mem_Read+0x448>)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f000 fb6b 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e091      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	691a      	ldr	r2, [r3, #16]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ef0:	e042      	b.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fc7e 	bl	80077f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e04c      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f003 0304 	and.w	r3, r3, #4
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d118      	bne.n	8006f78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f50:	b2d2      	uxtb	r2, r2
 8006f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f47f aec2 	bne.w	8006d06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	e000      	b.n	8006fa0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006f9e:	2302      	movs	r3, #2
  }
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	; 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	00010004 	.word	0x00010004

08006fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d006      	beq.n	8006fd6 <I2C_MasterRequestWrite+0x2a>
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d003      	beq.n	8006fd6 <I2C_MasterRequestWrite+0x2a>
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006fd4:	d108      	bne.n	8006fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e00b      	b.n	8007000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	2b12      	cmp	r3, #18
 8006fee:	d107      	bne.n	8007000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 fa9b 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00d      	beq.n	8007034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007026:	d103      	bne.n	8007030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e035      	b.n	80070a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800703c:	d108      	bne.n	8007050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800703e:	897b      	ldrh	r3, [r7, #10]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	461a      	mov	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800704c:	611a      	str	r2, [r3, #16]
 800704e:	e01b      	b.n	8007088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007050:	897b      	ldrh	r3, [r7, #10]
 8007052:	11db      	asrs	r3, r3, #7
 8007054:	b2db      	uxtb	r3, r3
 8007056:	f003 0306 	and.w	r3, r3, #6
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f063 030f 	orn	r3, r3, #15
 8007060:	b2da      	uxtb	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	490e      	ldr	r1, [pc, #56]	; (80070a8 <I2C_MasterRequestWrite+0xfc>)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fac1 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e010      	b.n	80070a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800707e:	897b      	ldrh	r3, [r7, #10]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4907      	ldr	r1, [pc, #28]	; (80070ac <I2C_MasterRequestWrite+0x100>)
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 fab1 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e000      	b.n	80070a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	00010008 	.word	0x00010008
 80070ac:	00010002 	.word	0x00010002

080070b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b088      	sub	sp, #32
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	603b      	str	r3, [r7, #0]
 80070bc:	460b      	mov	r3, r1
 80070be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80070d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d006      	beq.n	80070ea <I2C_MasterRequestRead+0x3a>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d003      	beq.n	80070ea <I2C_MasterRequestRead+0x3a>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070e8:	d108      	bne.n	80070fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	e00b      	b.n	8007114 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	2b11      	cmp	r3, #17
 8007102:	d107      	bne.n	8007114 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 fa11 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713a:	d103      	bne.n	8007144 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e079      	b.n	800723c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007150:	d108      	bne.n	8007164 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007152:	897b      	ldrh	r3, [r7, #10]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	f043 0301 	orr.w	r3, r3, #1
 800715a:	b2da      	uxtb	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	611a      	str	r2, [r3, #16]
 8007162:	e05f      	b.n	8007224 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007164:	897b      	ldrh	r3, [r7, #10]
 8007166:	11db      	asrs	r3, r3, #7
 8007168:	b2db      	uxtb	r3, r3
 800716a:	f003 0306 	and.w	r3, r3, #6
 800716e:	b2db      	uxtb	r3, r3
 8007170:	f063 030f 	orn	r3, r3, #15
 8007174:	b2da      	uxtb	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4930      	ldr	r1, [pc, #192]	; (8007244 <I2C_MasterRequestRead+0x194>)
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fa37 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e054      	b.n	800723c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007192:	897b      	ldrh	r3, [r7, #10]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4929      	ldr	r1, [pc, #164]	; (8007248 <I2C_MasterRequestRead+0x198>)
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 fa27 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e044      	b.n	800723c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	613b      	str	r3, [r7, #16]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f9af 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00d      	beq.n	800720c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fe:	d103      	bne.n	8007208 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007206:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e017      	b.n	800723c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800720c:	897b      	ldrh	r3, [r7, #10]
 800720e:	11db      	asrs	r3, r3, #7
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f003 0306 	and.w	r3, r3, #6
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f063 030e 	orn	r3, r3, #14
 800721c:	b2da      	uxtb	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	4907      	ldr	r1, [pc, #28]	; (8007248 <I2C_MasterRequestRead+0x198>)
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f9e3 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	00010008 	.word	0x00010008
 8007248:	00010002 	.word	0x00010002

0800724c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	4608      	mov	r0, r1
 8007256:	4611      	mov	r1, r2
 8007258:	461a      	mov	r2, r3
 800725a:	4603      	mov	r3, r0
 800725c:	817b      	strh	r3, [r7, #10]
 800725e:	460b      	mov	r3, r1
 8007260:	813b      	strh	r3, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	2200      	movs	r2, #0
 800727e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f000 f960 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00d      	beq.n	80072aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729c:	d103      	bne.n	80072a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e05f      	b.n	800736a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80072aa:	897b      	ldrh	r3, [r7, #10]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	461a      	mov	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	492d      	ldr	r1, [pc, #180]	; (8007374 <I2C_RequestMemoryWrite+0x128>)
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 f998 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e04c      	b.n	800736a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d0:	2300      	movs	r3, #0
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e8:	6a39      	ldr	r1, [r7, #32]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fa02 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d107      	bne.n	800730e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e02b      	b.n	800736a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007312:	88fb      	ldrh	r3, [r7, #6]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d105      	bne.n	8007324 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007318:	893b      	ldrh	r3, [r7, #8]
 800731a:	b2da      	uxtb	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	611a      	str	r2, [r3, #16]
 8007322:	e021      	b.n	8007368 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007324:	893b      	ldrh	r3, [r7, #8]
 8007326:	0a1b      	lsrs	r3, r3, #8
 8007328:	b29b      	uxth	r3, r3
 800732a:	b2da      	uxtb	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007334:	6a39      	ldr	r1, [r7, #32]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f9dc 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00d      	beq.n	800735e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	2b04      	cmp	r3, #4
 8007348:	d107      	bne.n	800735a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e005      	b.n	800736a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800735e:	893b      	ldrh	r3, [r7, #8]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	00010002 	.word	0x00010002

08007378 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af02      	add	r7, sp, #8
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	4608      	mov	r0, r1
 8007382:	4611      	mov	r1, r2
 8007384:	461a      	mov	r2, r3
 8007386:	4603      	mov	r3, r0
 8007388:	817b      	strh	r3, [r7, #10]
 800738a:	460b      	mov	r3, r1
 800738c:	813b      	strh	r3, [r7, #8]
 800738e:	4613      	mov	r3, r2
 8007390:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 f8c2 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d8:	d103      	bne.n	80073e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	e0aa      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	461a      	mov	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80073f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	6a3a      	ldr	r2, [r7, #32]
 80073fa:	4952      	ldr	r1, [pc, #328]	; (8007544 <I2C_RequestMemoryRead+0x1cc>)
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f000 f8fa 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e097      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007424:	6a39      	ldr	r1, [r7, #32]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f964 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00d      	beq.n	800744e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	2b04      	cmp	r3, #4
 8007438:	d107      	bne.n	800744a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007448:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e076      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d105      	bne.n	8007460 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007454:	893b      	ldrh	r3, [r7, #8]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	611a      	str	r2, [r3, #16]
 800745e:	e021      	b.n	80074a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007460:	893b      	ldrh	r3, [r7, #8]
 8007462:	0a1b      	lsrs	r3, r3, #8
 8007464:	b29b      	uxth	r3, r3
 8007466:	b2da      	uxtb	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800746e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007470:	6a39      	ldr	r1, [r7, #32]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f93e 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	2b04      	cmp	r3, #4
 8007484:	d107      	bne.n	8007496 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007494:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e050      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800749a:	893b      	ldrh	r3, [r7, #8]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a6:	6a39      	ldr	r1, [r7, #32]
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f923 	bl	80076f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00d      	beq.n	80074d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d107      	bne.n	80074cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e035      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 f82b 	bl	8007548 <I2C_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00d      	beq.n	8007514 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007506:	d103      	bne.n	8007510 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e013      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007514:	897b      	ldrh	r3, [r7, #10]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	f043 0301 	orr.w	r3, r3, #1
 800751c:	b2da      	uxtb	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	6a3a      	ldr	r2, [r7, #32]
 8007528:	4906      	ldr	r1, [pc, #24]	; (8007544 <I2C_RequestMemoryRead+0x1cc>)
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 f863 	bl	80075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	00010002 	.word	0x00010002

08007548 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	4613      	mov	r3, r2
 8007556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007558:	e025      	b.n	80075a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007560:	d021      	beq.n	80075a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007562:	f7fe f9a1 	bl	80058a8 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d116      	bne.n	80075a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f043 0220 	orr.w	r2, r3, #32
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e023      	b.n	80075ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0c1b      	lsrs	r3, r3, #16
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d10d      	bne.n	80075cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	43da      	mvns	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4013      	ands	r3, r2
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	bf0c      	ite	eq
 80075c2:	2301      	moveq	r3, #1
 80075c4:	2300      	movne	r3, #0
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	e00c      	b.n	80075e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	43da      	mvns	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	4013      	ands	r3, r2
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	bf0c      	ite	eq
 80075de:	2301      	moveq	r3, #1
 80075e0:	2300      	movne	r3, #0
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	461a      	mov	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d0b6      	beq.n	800755a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b084      	sub	sp, #16
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	607a      	str	r2, [r7, #4]
 8007602:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007604:	e051      	b.n	80076aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007614:	d123      	bne.n	800765e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007624:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800762e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2220      	movs	r2, #32
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	f043 0204 	orr.w	r2, r3, #4
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e046      	b.n	80076ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007664:	d021      	beq.n	80076aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007666:	f7fe f91f 	bl	80058a8 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	429a      	cmp	r2, r3
 8007674:	d302      	bcc.n	800767c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d116      	bne.n	80076aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	f043 0220 	orr.w	r2, r3, #32
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e020      	b.n	80076ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d10c      	bne.n	80076ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	43da      	mvns	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4013      	ands	r3, r2
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	bf14      	ite	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	2300      	moveq	r3, #0
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	e00b      	b.n	80076e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	43da      	mvns	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	4013      	ands	r3, r2
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bf14      	ite	ne
 80076e0:	2301      	movne	r3, #1
 80076e2:	2300      	moveq	r3, #0
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d18d      	bne.n	8007606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007700:	e02d      	b.n	800775e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f8ce 	bl	80078a4 <I2C_IsAcknowledgeFailed>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e02d      	b.n	800776e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007718:	d021      	beq.n	800775e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771a:	f7fe f8c5 	bl	80058a8 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	429a      	cmp	r2, r3
 8007728:	d302      	bcc.n	8007730 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d116      	bne.n	800775e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774a:	f043 0220 	orr.w	r2, r3, #32
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e007      	b.n	800776e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007768:	2b80      	cmp	r3, #128	; 0x80
 800776a:	d1ca      	bne.n	8007702 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007782:	e02d      	b.n	80077e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f88d 	bl	80078a4 <I2C_IsAcknowledgeFailed>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e02d      	b.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800779a:	d021      	beq.n	80077e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779c:	f7fe f884 	bl	80058a8 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d302      	bcc.n	80077b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d116      	bne.n	80077e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	f043 0220 	orr.w	r2, r3, #32
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e007      	b.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b04      	cmp	r3, #4
 80077ec:	d1ca      	bne.n	8007784 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007804:	e042      	b.n	800788c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	f003 0310 	and.w	r3, r3, #16
 8007810:	2b10      	cmp	r3, #16
 8007812:	d119      	bne.n	8007848 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0210 	mvn.w	r2, #16
 800781c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2220      	movs	r2, #32
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e029      	b.n	800789c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007848:	f7fe f82e 	bl	80058a8 <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	429a      	cmp	r2, r3
 8007856:	d302      	bcc.n	800785e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d116      	bne.n	800788c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	f043 0220 	orr.w	r2, r3, #32
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e007      	b.n	800789c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d1b5      	bne.n	8007806 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ba:	d11b      	bne.n	80078f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e0:	f043 0204 	orr.w	r2, r3, #4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
	...

08007904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e267      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d075      	beq.n	8007a0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007922:	4b88      	ldr	r3, [pc, #544]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 030c 	and.w	r3, r3, #12
 800792a:	2b04      	cmp	r3, #4
 800792c:	d00c      	beq.n	8007948 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800792e:	4b85      	ldr	r3, [pc, #532]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007936:	2b08      	cmp	r3, #8
 8007938:	d112      	bne.n	8007960 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800793a:	4b82      	ldr	r3, [pc, #520]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007946:	d10b      	bne.n	8007960 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007948:	4b7e      	ldr	r3, [pc, #504]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d05b      	beq.n	8007a0c <HAL_RCC_OscConfig+0x108>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d157      	bne.n	8007a0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e242      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007968:	d106      	bne.n	8007978 <HAL_RCC_OscConfig+0x74>
 800796a:	4b76      	ldr	r3, [pc, #472]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a75      	ldr	r2, [pc, #468]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e01d      	b.n	80079b4 <HAL_RCC_OscConfig+0xb0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007980:	d10c      	bne.n	800799c <HAL_RCC_OscConfig+0x98>
 8007982:	4b70      	ldr	r3, [pc, #448]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a6f      	ldr	r2, [pc, #444]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b6d      	ldr	r3, [pc, #436]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a6c      	ldr	r2, [pc, #432]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e00b      	b.n	80079b4 <HAL_RCC_OscConfig+0xb0>
 800799c:	4b69      	ldr	r3, [pc, #420]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a68      	ldr	r2, [pc, #416]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 80079a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079a6:	6013      	str	r3, [r2, #0]
 80079a8:	4b66      	ldr	r3, [pc, #408]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a65      	ldr	r2, [pc, #404]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 80079ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d013      	beq.n	80079e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079bc:	f7fd ff74 	bl	80058a8 <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c2:	e008      	b.n	80079d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079c4:	f7fd ff70 	bl	80058a8 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b64      	cmp	r3, #100	; 0x64
 80079d0:	d901      	bls.n	80079d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079d2:	2303      	movs	r3, #3
 80079d4:	e207      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d6:	4b5b      	ldr	r3, [pc, #364]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d0f0      	beq.n	80079c4 <HAL_RCC_OscConfig+0xc0>
 80079e2:	e014      	b.n	8007a0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079e4:	f7fd ff60 	bl	80058a8 <HAL_GetTick>
 80079e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ea:	e008      	b.n	80079fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ec:	f7fd ff5c 	bl	80058a8 <HAL_GetTick>
 80079f0:	4602      	mov	r2, r0
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	1ad3      	subs	r3, r2, r3
 80079f6:	2b64      	cmp	r3, #100	; 0x64
 80079f8:	d901      	bls.n	80079fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e1f3      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fe:	4b51      	ldr	r3, [pc, #324]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1f0      	bne.n	80079ec <HAL_RCC_OscConfig+0xe8>
 8007a0a:	e000      	b.n	8007a0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d063      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a1a:	4b4a      	ldr	r3, [pc, #296]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f003 030c 	and.w	r3, r3, #12
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00b      	beq.n	8007a3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a26:	4b47      	ldr	r3, [pc, #284]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a2e:	2b08      	cmp	r3, #8
 8007a30:	d11c      	bne.n	8007a6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a32:	4b44      	ldr	r3, [pc, #272]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d116      	bne.n	8007a6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a3e:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <HAL_RCC_OscConfig+0x152>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d001      	beq.n	8007a56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e1c7      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a56:	4b3b      	ldr	r3, [pc, #236]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	4937      	ldr	r1, [pc, #220]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a6a:	e03a      	b.n	8007ae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d020      	beq.n	8007ab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a74:	4b34      	ldr	r3, [pc, #208]	; (8007b48 <HAL_RCC_OscConfig+0x244>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7a:	f7fd ff15 	bl	80058a8 <HAL_GetTick>
 8007a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a82:	f7fd ff11 	bl	80058a8 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e1a8      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a94:	4b2b      	ldr	r3, [pc, #172]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0f0      	beq.n	8007a82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa0:	4b28      	ldr	r3, [pc, #160]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4925      	ldr	r1, [pc, #148]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	600b      	str	r3, [r1, #0]
 8007ab4:	e015      	b.n	8007ae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ab6:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <HAL_RCC_OscConfig+0x244>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abc:	f7fd fef4 	bl	80058a8 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ac4:	f7fd fef0 	bl	80058a8 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e187      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ad6:	4b1b      	ldr	r3, [pc, #108]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f0      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d036      	beq.n	8007b5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d016      	beq.n	8007b24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007af6:	4b15      	ldr	r3, [pc, #84]	; (8007b4c <HAL_RCC_OscConfig+0x248>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afc:	f7fd fed4 	bl	80058a8 <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b04:	f7fd fed0 	bl	80058a8 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e167      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b16:	4b0b      	ldr	r3, [pc, #44]	; (8007b44 <HAL_RCC_OscConfig+0x240>)
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0f0      	beq.n	8007b04 <HAL_RCC_OscConfig+0x200>
 8007b22:	e01b      	b.n	8007b5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b24:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <HAL_RCC_OscConfig+0x248>)
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b2a:	f7fd febd 	bl	80058a8 <HAL_GetTick>
 8007b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b30:	e00e      	b.n	8007b50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b32:	f7fd feb9 	bl	80058a8 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d907      	bls.n	8007b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e150      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
 8007b44:	40023800 	.word	0x40023800
 8007b48:	42470000 	.word	0x42470000
 8007b4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b50:	4b88      	ldr	r3, [pc, #544]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1ea      	bne.n	8007b32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8097 	beq.w	8007c98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b6e:	4b81      	ldr	r3, [pc, #516]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10f      	bne.n	8007b9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	4b7d      	ldr	r3, [pc, #500]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	4a7c      	ldr	r2, [pc, #496]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b88:	6413      	str	r3, [r2, #64]	; 0x40
 8007b8a:	4b7a      	ldr	r3, [pc, #488]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b92:	60bb      	str	r3, [r7, #8]
 8007b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b9a:	4b77      	ldr	r3, [pc, #476]	; (8007d78 <HAL_RCC_OscConfig+0x474>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d118      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ba6:	4b74      	ldr	r3, [pc, #464]	; (8007d78 <HAL_RCC_OscConfig+0x474>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a73      	ldr	r2, [pc, #460]	; (8007d78 <HAL_RCC_OscConfig+0x474>)
 8007bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bb2:	f7fd fe79 	bl	80058a8 <HAL_GetTick>
 8007bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bba:	f7fd fe75 	bl	80058a8 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e10c      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bcc:	4b6a      	ldr	r3, [pc, #424]	; (8007d78 <HAL_RCC_OscConfig+0x474>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d0f0      	beq.n	8007bba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d106      	bne.n	8007bee <HAL_RCC_OscConfig+0x2ea>
 8007be0:	4b64      	ldr	r3, [pc, #400]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be4:	4a63      	ldr	r2, [pc, #396]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	6713      	str	r3, [r2, #112]	; 0x70
 8007bec:	e01c      	b.n	8007c28 <HAL_RCC_OscConfig+0x324>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b05      	cmp	r3, #5
 8007bf4:	d10c      	bne.n	8007c10 <HAL_RCC_OscConfig+0x30c>
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	4a5e      	ldr	r2, [pc, #376]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007bfc:	f043 0304 	orr.w	r3, r3, #4
 8007c00:	6713      	str	r3, [r2, #112]	; 0x70
 8007c02:	4b5c      	ldr	r3, [pc, #368]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	4a5b      	ldr	r2, [pc, #364]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c08:	f043 0301 	orr.w	r3, r3, #1
 8007c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c0e:	e00b      	b.n	8007c28 <HAL_RCC_OscConfig+0x324>
 8007c10:	4b58      	ldr	r3, [pc, #352]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c14:	4a57      	ldr	r2, [pc, #348]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1c:	4b55      	ldr	r3, [pc, #340]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c20:	4a54      	ldr	r2, [pc, #336]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c22:	f023 0304 	bic.w	r3, r3, #4
 8007c26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d015      	beq.n	8007c5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c30:	f7fd fe3a 	bl	80058a8 <HAL_GetTick>
 8007c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c36:	e00a      	b.n	8007c4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c38:	f7fd fe36 	bl	80058a8 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e0cb      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c4e:	4b49      	ldr	r3, [pc, #292]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c52:	f003 0302 	and.w	r3, r3, #2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0ee      	beq.n	8007c38 <HAL_RCC_OscConfig+0x334>
 8007c5a:	e014      	b.n	8007c86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c5c:	f7fd fe24 	bl	80058a8 <HAL_GetTick>
 8007c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c62:	e00a      	b.n	8007c7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f7fd fe20 	bl	80058a8 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e0b5      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c7a:	4b3e      	ldr	r3, [pc, #248]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1ee      	bne.n	8007c64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d105      	bne.n	8007c98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c8c:	4b39      	ldr	r3, [pc, #228]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c90:	4a38      	ldr	r2, [pc, #224]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	699b      	ldr	r3, [r3, #24]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80a1 	beq.w	8007de4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ca2:	4b34      	ldr	r3, [pc, #208]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 030c 	and.w	r3, r3, #12
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d05c      	beq.n	8007d68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d141      	bne.n	8007d3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cb6:	4b31      	ldr	r3, [pc, #196]	; (8007d7c <HAL_RCC_OscConfig+0x478>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cbc:	f7fd fdf4 	bl	80058a8 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007cc4:	f7fd fdf0 	bl	80058a8 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e087      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cd6:	4b27      	ldr	r3, [pc, #156]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f0      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69da      	ldr	r2, [r3, #28]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	085b      	lsrs	r3, r3, #1
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	041b      	lsls	r3, r3, #16
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	061b      	lsls	r3, r3, #24
 8007d06:	491b      	ldr	r1, [pc, #108]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <HAL_RCC_OscConfig+0x478>)
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d12:	f7fd fdc9 	bl	80058a8 <HAL_GetTick>
 8007d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d18:	e008      	b.n	8007d2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d1a:	f7fd fdc5 	bl	80058a8 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e05c      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d2c:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0f0      	beq.n	8007d1a <HAL_RCC_OscConfig+0x416>
 8007d38:	e054      	b.n	8007de4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3a:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <HAL_RCC_OscConfig+0x478>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d40:	f7fd fdb2 	bl	80058a8 <HAL_GetTick>
 8007d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d46:	e008      	b.n	8007d5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d48:	f7fd fdae 	bl	80058a8 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d901      	bls.n	8007d5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e045      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d5a:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <HAL_RCC_OscConfig+0x470>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f0      	bne.n	8007d48 <HAL_RCC_OscConfig+0x444>
 8007d66:	e03d      	b.n	8007de4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d107      	bne.n	8007d80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	e038      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
 8007d74:	40023800 	.word	0x40023800
 8007d78:	40007000 	.word	0x40007000
 8007d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d80:	4b1b      	ldr	r3, [pc, #108]	; (8007df0 <HAL_RCC_OscConfig+0x4ec>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d028      	beq.n	8007de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d121      	bne.n	8007de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d11a      	bne.n	8007de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007db0:	4013      	ands	r3, r2
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d111      	bne.n	8007de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d107      	bne.n	8007de0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d001      	beq.n	8007de4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e000      	b.n	8007de6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40023800 	.word	0x40023800

08007df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d101      	bne.n	8007e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0cc      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e08:	4b68      	ldr	r3, [pc, #416]	; (8007fac <HAL_RCC_ClockConfig+0x1b8>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d90c      	bls.n	8007e30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e16:	4b65      	ldr	r3, [pc, #404]	; (8007fac <HAL_RCC_ClockConfig+0x1b8>)
 8007e18:	683a      	ldr	r2, [r7, #0]
 8007e1a:	b2d2      	uxtb	r2, r2
 8007e1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e1e:	4b63      	ldr	r3, [pc, #396]	; (8007fac <HAL_RCC_ClockConfig+0x1b8>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d001      	beq.n	8007e30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0b8      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 0302 	and.w	r3, r3, #2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d020      	beq.n	8007e7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0304 	and.w	r3, r3, #4
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e48:	4b59      	ldr	r3, [pc, #356]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	4a58      	ldr	r2, [pc, #352]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e60:	4b53      	ldr	r3, [pc, #332]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	4a52      	ldr	r2, [pc, #328]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e6c:	4b50      	ldr	r3, [pc, #320]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	494d      	ldr	r1, [pc, #308]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d044      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d107      	bne.n	8007ea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e92:	4b47      	ldr	r3, [pc, #284]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d119      	bne.n	8007ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e07f      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d107      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eb2:	4b3f      	ldr	r3, [pc, #252]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d109      	bne.n	8007ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e06f      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ec2:	4b3b      	ldr	r3, [pc, #236]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e067      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ed2:	4b37      	ldr	r3, [pc, #220]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f023 0203 	bic.w	r2, r3, #3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4934      	ldr	r1, [pc, #208]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ee4:	f7fd fce0 	bl	80058a8 <HAL_GetTick>
 8007ee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007eea:	e00a      	b.n	8007f02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007eec:	f7fd fcdc 	bl	80058a8 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e04f      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f02:	4b2b      	ldr	r3, [pc, #172]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 020c 	and.w	r2, r3, #12
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d1eb      	bne.n	8007eec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f14:	4b25      	ldr	r3, [pc, #148]	; (8007fac <HAL_RCC_ClockConfig+0x1b8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d20c      	bcs.n	8007f3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f22:	4b22      	ldr	r3, [pc, #136]	; (8007fac <HAL_RCC_ClockConfig+0x1b8>)
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f2a:	4b20      	ldr	r3, [pc, #128]	; (8007fac <HAL_RCC_ClockConfig+0x1b8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d001      	beq.n	8007f3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	e032      	b.n	8007fa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d008      	beq.n	8007f5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4916      	ldr	r1, [pc, #88]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	490e      	ldr	r1, [pc, #56]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f7a:	f000 f821 	bl	8007fc0 <HAL_RCC_GetSysClockFreq>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	091b      	lsrs	r3, r3, #4
 8007f86:	f003 030f 	and.w	r3, r3, #15
 8007f8a:	490a      	ldr	r1, [pc, #40]	; (8007fb4 <HAL_RCC_ClockConfig+0x1c0>)
 8007f8c:	5ccb      	ldrb	r3, [r1, r3]
 8007f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f92:	4a09      	ldr	r2, [pc, #36]	; (8007fb8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <HAL_RCC_ClockConfig+0x1c8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fd fc40 	bl	8005820 <HAL_InitTick>

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40023c00 	.word	0x40023c00
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	08012f4c 	.word	0x08012f4c
 8007fb8:	20000018 	.word	0x20000018
 8007fbc:	2000001c 	.word	0x2000001c

08007fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fc4:	b094      	sub	sp, #80	; 0x50
 8007fc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	647b      	str	r3, [r7, #68]	; 0x44
 8007fcc:	2300      	movs	r3, #0
 8007fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007fd8:	4b79      	ldr	r3, [pc, #484]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f003 030c 	and.w	r3, r3, #12
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d00d      	beq.n	8008000 <HAL_RCC_GetSysClockFreq+0x40>
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	f200 80e1 	bhi.w	80081ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCC_GetSysClockFreq+0x3a>
 8007ff2:	e0db      	b.n	80081ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ff4:	4b73      	ldr	r3, [pc, #460]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ff6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007ff8:	e0db      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ffa:	4b72      	ldr	r3, [pc, #456]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ffc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ffe:	e0d8      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008000:	4b6f      	ldr	r3, [pc, #444]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008008:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800800a:	4b6d      	ldr	r3, [pc, #436]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d063      	beq.n	80080de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008016:	4b6a      	ldr	r3, [pc, #424]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	099b      	lsrs	r3, r3, #6
 800801c:	2200      	movs	r2, #0
 800801e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008020:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008028:	633b      	str	r3, [r7, #48]	; 0x30
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
 800802e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	f04f 0000 	mov.w	r0, #0
 800803a:	f04f 0100 	mov.w	r1, #0
 800803e:	0159      	lsls	r1, r3, #5
 8008040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008044:	0150      	lsls	r0, r2, #5
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4621      	mov	r1, r4
 800804c:	1a51      	subs	r1, r2, r1
 800804e:	6139      	str	r1, [r7, #16]
 8008050:	4629      	mov	r1, r5
 8008052:	eb63 0301 	sbc.w	r3, r3, r1
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	f04f 0300 	mov.w	r3, #0
 8008060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008064:	4659      	mov	r1, fp
 8008066:	018b      	lsls	r3, r1, #6
 8008068:	4651      	mov	r1, sl
 800806a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800806e:	4651      	mov	r1, sl
 8008070:	018a      	lsls	r2, r1, #6
 8008072:	4651      	mov	r1, sl
 8008074:	ebb2 0801 	subs.w	r8, r2, r1
 8008078:	4659      	mov	r1, fp
 800807a:	eb63 0901 	sbc.w	r9, r3, r1
 800807e:	f04f 0200 	mov.w	r2, #0
 8008082:	f04f 0300 	mov.w	r3, #0
 8008086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800808a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800808e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008092:	4690      	mov	r8, r2
 8008094:	4699      	mov	r9, r3
 8008096:	4623      	mov	r3, r4
 8008098:	eb18 0303 	adds.w	r3, r8, r3
 800809c:	60bb      	str	r3, [r7, #8]
 800809e:	462b      	mov	r3, r5
 80080a0:	eb49 0303 	adc.w	r3, r9, r3
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080b2:	4629      	mov	r1, r5
 80080b4:	028b      	lsls	r3, r1, #10
 80080b6:	4621      	mov	r1, r4
 80080b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080bc:	4621      	mov	r1, r4
 80080be:	028a      	lsls	r2, r1, #10
 80080c0:	4610      	mov	r0, r2
 80080c2:	4619      	mov	r1, r3
 80080c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080c6:	2200      	movs	r2, #0
 80080c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80080d0:	f7f8 fdc2 	bl	8000c58 <__aeabi_uldivmod>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4613      	mov	r3, r2
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080dc:	e058      	b.n	8008190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080de:	4b38      	ldr	r3, [pc, #224]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	099b      	lsrs	r3, r3, #6
 80080e4:	2200      	movs	r2, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	4611      	mov	r1, r2
 80080ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80080ee:	623b      	str	r3, [r7, #32]
 80080f0:	2300      	movs	r3, #0
 80080f2:	627b      	str	r3, [r7, #36]	; 0x24
 80080f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80080f8:	4642      	mov	r2, r8
 80080fa:	464b      	mov	r3, r9
 80080fc:	f04f 0000 	mov.w	r0, #0
 8008100:	f04f 0100 	mov.w	r1, #0
 8008104:	0159      	lsls	r1, r3, #5
 8008106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800810a:	0150      	lsls	r0, r2, #5
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4641      	mov	r1, r8
 8008112:	ebb2 0a01 	subs.w	sl, r2, r1
 8008116:	4649      	mov	r1, r9
 8008118:	eb63 0b01 	sbc.w	fp, r3, r1
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f04f 0300 	mov.w	r3, #0
 8008124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800812c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008130:	ebb2 040a 	subs.w	r4, r2, sl
 8008134:	eb63 050b 	sbc.w	r5, r3, fp
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	00eb      	lsls	r3, r5, #3
 8008142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008146:	00e2      	lsls	r2, r4, #3
 8008148:	4614      	mov	r4, r2
 800814a:	461d      	mov	r5, r3
 800814c:	4643      	mov	r3, r8
 800814e:	18e3      	adds	r3, r4, r3
 8008150:	603b      	str	r3, [r7, #0]
 8008152:	464b      	mov	r3, r9
 8008154:	eb45 0303 	adc.w	r3, r5, r3
 8008158:	607b      	str	r3, [r7, #4]
 800815a:	f04f 0200 	mov.w	r2, #0
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008166:	4629      	mov	r1, r5
 8008168:	028b      	lsls	r3, r1, #10
 800816a:	4621      	mov	r1, r4
 800816c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008170:	4621      	mov	r1, r4
 8008172:	028a      	lsls	r2, r1, #10
 8008174:	4610      	mov	r0, r2
 8008176:	4619      	mov	r1, r3
 8008178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800817a:	2200      	movs	r2, #0
 800817c:	61bb      	str	r3, [r7, #24]
 800817e:	61fa      	str	r2, [r7, #28]
 8008180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008184:	f7f8 fd68 	bl	8000c58 <__aeabi_uldivmod>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4613      	mov	r3, r2
 800818e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008190:	4b0b      	ldr	r3, [pc, #44]	; (80081c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	3301      	adds	r3, #1
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80081a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081aa:	e002      	b.n	80081b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081ac:	4b05      	ldr	r3, [pc, #20]	; (80081c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80081ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3750      	adds	r7, #80	; 0x50
 80081b8:	46bd      	mov	sp, r7
 80081ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081be:	bf00      	nop
 80081c0:	40023800 	.word	0x40023800
 80081c4:	00f42400 	.word	0x00f42400

080081c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <HAL_RCC_GetHCLKFreq+0x14>)
 80081ce:	681b      	ldr	r3, [r3, #0]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000018 	.word	0x20000018

080081e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80081e4:	f7ff fff0 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 80081e8:	4602      	mov	r2, r0
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	0a9b      	lsrs	r3, r3, #10
 80081f0:	f003 0307 	and.w	r3, r3, #7
 80081f4:	4903      	ldr	r1, [pc, #12]	; (8008204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081f6:	5ccb      	ldrb	r3, [r1, r3]
 80081f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40023800 	.word	0x40023800
 8008204:	08012f5c 	.word	0x08012f5c

08008208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800820c:	f7ff ffdc 	bl	80081c8 <HAL_RCC_GetHCLKFreq>
 8008210:	4602      	mov	r2, r0
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	0b5b      	lsrs	r3, r3, #13
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	4903      	ldr	r1, [pc, #12]	; (800822c <HAL_RCC_GetPCLK2Freq+0x24>)
 800821e:	5ccb      	ldrb	r3, [r1, r3]
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40023800 	.word	0x40023800
 800822c:	08012f5c 	.word	0x08012f5c

08008230 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e022      	b.n	8008288 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d105      	bne.n	800825a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7fc fff5 	bl	8005244 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2203      	movs	r2, #3
 800825e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 f814 	bl	8008290 <HAL_SD_InitCard>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d001      	beq.n	8008272 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e00a      	b.n	8008288 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2200      	movs	r2, #0
 800827c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008290:	b5b0      	push	{r4, r5, r7, lr}
 8008292:	b08e      	sub	sp, #56	; 0x38
 8008294:	af04      	add	r7, sp, #16
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008298:	2300      	movs	r3, #0
 800829a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800829c:	2300      	movs	r3, #0
 800829e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80082a0:	2300      	movs	r3, #0
 80082a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80082ac:	2376      	movs	r3, #118	; 0x76
 80082ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681d      	ldr	r5, [r3, #0]
 80082b4:	466c      	mov	r4, sp
 80082b6:	f107 0314 	add.w	r3, r7, #20
 80082ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082c2:	f107 0308 	add.w	r3, r7, #8
 80082c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082c8:	4628      	mov	r0, r5
 80082ca:	f002 febf 	bl	800b04c <SDIO_Init>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80082d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e04f      	b.n	8008380 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80082e0:	4b29      	ldr	r3, [pc, #164]	; (8008388 <HAL_SD_InitCard+0xf8>)
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f002 fef7 	bl	800b0de <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80082f0:	4b25      	ldr	r3, [pc, #148]	; (8008388 <HAL_SD_InitCard+0xf8>)
 80082f2:	2201      	movs	r2, #1
 80082f4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80082f6:	2002      	movs	r0, #2
 80082f8:	f7fd fae2 	bl	80058c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fe69 	bl	8008fd4 <SD_PowerON>
 8008302:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e02e      	b.n	8008380 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fd88 	bl	8008e38 <SD_InitCard>
 8008328:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	431a      	orrs	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e01b      	b.n	8008380 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008350:	4618      	mov	r0, r3
 8008352:	f002 ff56 	bl	800b202 <SDMMC_CmdBlockLength>
 8008356:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00f      	beq.n	800837e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a0a      	ldr	r2, [pc, #40]	; (800838c <HAL_SD_InitCard+0xfc>)
 8008364:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e000      	b.n	8008380 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3728      	adds	r7, #40	; 0x28
 8008384:	46bd      	mov	sp, r7
 8008386:	bdb0      	pop	{r4, r5, r7, pc}
 8008388:	422580a0 	.word	0x422580a0
 800838c:	004005ff 	.word	0x004005ff

08008390 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b092      	sub	sp, #72	; 0x48
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
 800839c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800839e:	f7fd fa83 	bl	80058a8 <HAL_GetTick>
 80083a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d107      	bne.n	80083c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e1bd      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	f040 81b0 	bne.w	8008730 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	441a      	add	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d907      	bls.n	80083f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e1a4      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2203      	movs	r2, #3
 80083f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2200      	movs	r2, #0
 8008402:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008408:	2b01      	cmp	r3, #1
 800840a:	d002      	beq.n	8008412 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	025b      	lsls	r3, r3, #9
 8008410:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008416:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	025b      	lsls	r3, r3, #9
 800841c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800841e:	2390      	movs	r3, #144	; 0x90
 8008420:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008422:	2302      	movs	r3, #2
 8008424:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008426:	2300      	movs	r3, #0
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800842a:	2301      	movs	r3, #1
 800842c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f107 0214 	add.w	r2, r7, #20
 8008436:	4611      	mov	r1, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f002 feb6 	bl	800b1aa <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d90a      	bls.n	800845a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2202      	movs	r2, #2
 8008448:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008450:	4618      	mov	r0, r3
 8008452:	f002 ff1a 	bl	800b28a <SDMMC_CmdReadMultiBlock>
 8008456:	6478      	str	r0, [r7, #68]	; 0x44
 8008458:	e009      	b.n	800846e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2201      	movs	r2, #1
 800845e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008466:	4618      	mov	r0, r3
 8008468:	f002 feed 	bl	800b246 <SDMMC_CmdReadSingleBlock>
 800846c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800846e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008470:	2b00      	cmp	r3, #0
 8008472:	d012      	beq.n	800849a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a7a      	ldr	r2, [pc, #488]	; (8008664 <HAL_SD_ReadBlocks+0x2d4>)
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008482:	431a      	orrs	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e151      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800849e:	e061      	b.n	8008564 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d03c      	beq.n	8008528 <HAL_SD_ReadBlocks+0x198>
 80084ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d039      	beq.n	8008528 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80084b4:	2300      	movs	r3, #0
 80084b6:	643b      	str	r3, [r7, #64]	; 0x40
 80084b8:	e033      	b.n	8008522 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f002 fdef 	bl	800b0a2 <SDIO_ReadFIFO>
 80084c4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	b2da      	uxtb	r2, r3
 80084ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	3301      	adds	r3, #1
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d6:	3b01      	subs	r3, #1
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084dc:	0a1b      	lsrs	r3, r3, #8
 80084de:	b2da      	uxtb	r2, r3
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	3301      	adds	r3, #1
 80084e8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	3b01      	subs	r3, #1
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80084f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f2:	0c1b      	lsrs	r3, r3, #16
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fc:	3301      	adds	r3, #1
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008502:	3b01      	subs	r3, #1
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008508:	0e1b      	lsrs	r3, r3, #24
 800850a:	b2da      	uxtb	r2, r3
 800850c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800850e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	3301      	adds	r3, #1
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008518:	3b01      	subs	r3, #1
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800851c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800851e:	3301      	adds	r3, #1
 8008520:	643b      	str	r3, [r7, #64]	; 0x40
 8008522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008524:	2b07      	cmp	r3, #7
 8008526:	d9c8      	bls.n	80084ba <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008528:	f7fd f9be 	bl	80058a8 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008534:	429a      	cmp	r2, r3
 8008536:	d902      	bls.n	800853e <HAL_SD_ReadBlocks+0x1ae>
 8008538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800853a:	2b00      	cmp	r3, #0
 800853c:	d112      	bne.n	8008564 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a48      	ldr	r2, [pc, #288]	; (8008664 <HAL_SD_ReadBlocks+0x2d4>)
 8008544:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2201      	movs	r2, #1
 8008556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2200      	movs	r2, #0
 800855e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e0ec      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800856a:	f240 332a 	movw	r3, #810	; 0x32a
 800856e:	4013      	ands	r3, r2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d095      	beq.n	80084a0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d022      	beq.n	80085c8 <HAL_SD_ReadBlocks+0x238>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d91f      	bls.n	80085c8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858c:	2b03      	cmp	r3, #3
 800858e:	d01b      	beq.n	80085c8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4618      	mov	r0, r3
 8008596:	f002 fedf 	bl	800b358 <SDMMC_CmdStopTransfer>
 800859a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800859c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d012      	beq.n	80085c8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a2f      	ldr	r2, [pc, #188]	; (8008664 <HAL_SD_ReadBlocks+0x2d4>)
 80085a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b0:	431a      	orrs	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e0ba      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d012      	beq.n	80085fc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a22      	ldr	r2, [pc, #136]	; (8008664 <HAL_SD_ReadBlocks+0x2d4>)
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	f043 0208 	orr.w	r2, r3, #8
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0a0      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d012      	beq.n	8008630 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a15      	ldr	r2, [pc, #84]	; (8008664 <HAL_SD_ReadBlocks+0x2d4>)
 8008610:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	f043 0202 	orr.w	r2, r3, #2
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e086      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d063      	beq.n	8008706 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a08      	ldr	r2, [pc, #32]	; (8008664 <HAL_SD_ReadBlocks+0x2d4>)
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e06c      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
 8008664:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f002 fd18 	bl	800b0a2 <SDIO_ReadFIFO>
 8008672:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008676:	b2da      	uxtb	r2, r3
 8008678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800867c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867e:	3301      	adds	r3, #1
 8008680:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008684:	3b01      	subs	r3, #1
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	b2da      	uxtb	r2, r3
 800868e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008690:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008694:	3301      	adds	r3, #1
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869a:	3b01      	subs	r3, #1
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	b2da      	uxtb	r2, r3
 80086a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086aa:	3301      	adds	r3, #1
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80086ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086b0:	3b01      	subs	r3, #1
 80086b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	0e1b      	lsrs	r3, r3, #24
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c0:	3301      	adds	r3, #1
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80086c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c6:	3b01      	subs	r3, #1
 80086c8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80086ca:	f7fd f8ed 	bl	80058a8 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d902      	bls.n	80086e0 <HAL_SD_ReadBlocks+0x350>
 80086da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d112      	bne.n	8008706 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a18      	ldr	r2, [pc, #96]	; (8008748 <HAL_SD_ReadBlocks+0x3b8>)
 80086e6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e01b      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <HAL_SD_ReadBlocks+0x38a>
 8008714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1a6      	bne.n	8008668 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008722:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	e006      	b.n	800873e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008734:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
  }
}
 800873e:	4618      	mov	r0, r3
 8008740:	3748      	adds	r7, #72	; 0x48
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	004005ff 	.word	0x004005ff

0800874c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b092      	sub	sp, #72	; 0x48
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800875a:	f7fd f8a5 	bl	80058a8 <HAL_GetTick>
 800875e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d107      	bne.n	800877e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008772:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e166      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b01      	cmp	r3, #1
 8008788:	f040 8159 	bne.w	8008a3e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	441a      	add	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879c:	429a      	cmp	r2, r3
 800879e:	d907      	bls.n	80087b0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e14d      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2203      	movs	r2, #3
 80087b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2200      	movs	r2, #0
 80087be:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d002      	beq.n	80087ce <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80087c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ca:	025b      	lsls	r3, r3, #9
 80087cc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087d2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	025b      	lsls	r3, r3, #9
 80087d8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80087da:	2390      	movs	r3, #144	; 0x90
 80087dc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80087de:	2300      	movs	r3, #0
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80087e6:	2301      	movs	r3, #1
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f107 0218 	add.w	r2, r7, #24
 80087f2:	4611      	mov	r1, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f002 fcd8 	bl	800b1aa <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d90a      	bls.n	8008816 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2220      	movs	r2, #32
 8008804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800880c:	4618      	mov	r0, r3
 800880e:	f002 fd80 	bl	800b312 <SDMMC_CmdWriteMultiBlock>
 8008812:	6478      	str	r0, [r7, #68]	; 0x44
 8008814:	e009      	b.n	800882a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2210      	movs	r2, #16
 800881a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008822:	4618      	mov	r0, r3
 8008824:	f002 fd53 	bl	800b2ce <SDMMC_CmdWriteSingleBlock>
 8008828:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800882a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800882c:	2b00      	cmp	r3, #0
 800882e:	d012      	beq.n	8008856 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a87      	ldr	r2, [pc, #540]	; (8008a54 <HAL_SD_WriteBlocks+0x308>)
 8008836:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800883e:	431a      	orrs	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e0fa      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800885a:	e065      	b.n	8008928 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d040      	beq.n	80088ec <HAL_SD_WriteBlocks+0x1a0>
 800886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886c:	2b00      	cmp	r3, #0
 800886e:	d03d      	beq.n	80088ec <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008870:	2300      	movs	r3, #0
 8008872:	643b      	str	r3, [r7, #64]	; 0x40
 8008874:	e037      	b.n	80088e6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800887c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887e:	3301      	adds	r3, #1
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008884:	3b01      	subs	r3, #1
 8008886:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	021a      	lsls	r2, r3, #8
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	4313      	orrs	r3, r2
 8008892:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	3301      	adds	r3, #1
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889c:	3b01      	subs	r3, #1
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	041a      	lsls	r2, r3, #16
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	3301      	adds	r3, #1
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b4:	3b01      	subs	r3, #1
 80088b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80088b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	061a      	lsls	r2, r3, #24
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c6:	3301      	adds	r3, #1
 80088c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80088ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088cc:	3b01      	subs	r3, #1
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f107 0214 	add.w	r2, r7, #20
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f002 fbee 	bl	800b0bc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	3301      	adds	r3, #1
 80088e4:	643b      	str	r3, [r7, #64]	; 0x40
 80088e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e8:	2b07      	cmp	r3, #7
 80088ea:	d9c4      	bls.n	8008876 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80088ec:	f7fc ffdc 	bl	80058a8 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d902      	bls.n	8008902 <HAL_SD_WriteBlocks+0x1b6>
 80088fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d112      	bne.n	8008928 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a53      	ldr	r2, [pc, #332]	; (8008a54 <HAL_SD_WriteBlocks+0x308>)
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008910:	431a      	orrs	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e091      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800892e:	f240 331a 	movw	r3, #794	; 0x31a
 8008932:	4013      	ands	r3, r2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d091      	beq.n	800885c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008942:	2b00      	cmp	r3, #0
 8008944:	d022      	beq.n	800898c <HAL_SD_WriteBlocks+0x240>
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d91f      	bls.n	800898c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008950:	2b03      	cmp	r3, #3
 8008952:	d01b      	beq.n	800898c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f002 fcfd 	bl	800b358 <SDMMC_CmdStopTransfer>
 800895e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008962:	2b00      	cmp	r3, #0
 8008964:	d012      	beq.n	800898c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a3a      	ldr	r2, [pc, #232]	; (8008a54 <HAL_SD_WriteBlocks+0x308>)
 800896c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008974:	431a      	orrs	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e05f      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	f003 0308 	and.w	r3, r3, #8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d012      	beq.n	80089c0 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a2d      	ldr	r2, [pc, #180]	; (8008a54 <HAL_SD_WriteBlocks+0x308>)
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	f043 0208 	orr.w	r2, r3, #8
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e045      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d012      	beq.n	80089f4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <HAL_SD_WriteBlocks+0x308>)
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089da:	f043 0202 	orr.w	r2, r3, #2
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e02b      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d012      	beq.n	8008a28 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a13      	ldr	r2, [pc, #76]	; (8008a54 <HAL_SD_WriteBlocks+0x308>)
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f043 0210 	orr.w	r2, r3, #16
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e011      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a30:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e006      	b.n	8008a4c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
  }
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3748      	adds	r7, #72	; 0x48
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	004005ff 	.word	0x004005ff

08008a58 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a66:	0f9b      	lsrs	r3, r3, #30
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a72:	0e9b      	lsrs	r3, r3, #26
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 030f 	and.w	r3, r3, #15
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a84:	0e1b      	lsrs	r3, r3, #24
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a96:	0c1b      	lsrs	r3, r3, #16
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ab8:	0d1b      	lsrs	r3, r3, #20
 8008aba:	b29a      	uxth	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ad6:	0bdb      	lsrs	r3, r3, #15
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	b2da      	uxtb	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ae8:	0b9b      	lsrs	r3, r3, #14
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	f003 0301 	and.w	r3, r3, #1
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008afa:	0b5b      	lsrs	r3, r3, #13
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b0c:	0b1b      	lsrs	r3, r3, #12
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d163      	bne.n	8008bf0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b2c:	009a      	lsls	r2, r3, #2
 8008b2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b32:	4013      	ands	r3, r2
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008b38:	0f92      	lsrs	r2, r2, #30
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	0edb      	lsrs	r3, r3, #27
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b56:	0e1b      	lsrs	r3, r3, #24
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b68:	0d5b      	lsrs	r3, r3, #21
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0307 	and.w	r3, r3, #7
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7a:	0c9b      	lsrs	r3, r3, #18
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b8c:	0bdb      	lsrs	r3, r3, #15
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	f003 0307 	and.w	r3, r3, #7
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	7e1b      	ldrb	r3, [r3, #24]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	3302      	adds	r3, #2
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008bba:	fb03 f202 	mul.w	r2, r3, r2
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	7a1b      	ldrb	r3, [r3, #8]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	2201      	movs	r2, #1
 8008bce:	409a      	lsls	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008bdc:	0a52      	lsrs	r2, r2, #9
 8008bde:	fb03 f202 	mul.w	r2, r3, r2
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bec:	661a      	str	r2, [r3, #96]	; 0x60
 8008bee:	e031      	b.n	8008c54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d11d      	bne.n	8008c34 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c06:	0c1b      	lsrs	r3, r3, #16
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	691b      	ldr	r3, [r3, #16]
 8008c12:	3301      	adds	r3, #1
 8008c14:	029a      	lsls	r2, r3, #10
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c28:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	661a      	str	r2, [r3, #96]	; 0x60
 8008c32:	e00f      	b.n	8008c54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a58      	ldr	r2, [pc, #352]	; (8008d9c <HAL_SD_GetCardCSD+0x344>)
 8008c3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e09d      	b.n	8008d90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c58:	0b9b      	lsrs	r3, r3, #14
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c6a:	09db      	lsrs	r3, r3, #7
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c72:	b2da      	uxtb	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	0fdb      	lsrs	r3, r3, #31
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c98:	0f5b      	lsrs	r3, r3, #29
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	0e9b      	lsrs	r3, r3, #26
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	0d9b      	lsrs	r3, r3, #22
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	b2da      	uxtb	r2, r3
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cce:	0d5b      	lsrs	r3, r3, #21
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cea:	0c1b      	lsrs	r3, r3, #16
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	0bdb      	lsrs	r3, r3, #15
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	b2da      	uxtb	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d12:	0b9b      	lsrs	r3, r3, #14
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	0b5b      	lsrs	r3, r3, #13
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	0b1b      	lsrs	r3, r3, #12
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4e:	0a9b      	lsrs	r3, r3, #10
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d76:	085b      	lsrs	r3, r3, #1
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	004005ff 	.word	0x004005ff

08008da0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008e04:	f107 030c 	add.w	r3, r7, #12
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f970 	bl	80090f0 <SD_SendStatus>
 8008e10:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	0a5b      	lsrs	r3, r3, #9
 8008e28:	f003 030f 	and.w	r3, r3, #15
 8008e2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008e2e:	693b      	ldr	r3, [r7, #16]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e38:	b5b0      	push	{r4, r5, r7, lr}
 8008e3a:	b094      	sub	sp, #80	; 0x50
 8008e3c:	af04      	add	r7, sp, #16
 8008e3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008e40:	2301      	movs	r3, #1
 8008e42:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f002 f956 	bl	800b0fa <SDIO_GetPowerState>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e58:	e0b8      	b.n	8008fcc <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d02f      	beq.n	8008ec2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f002 fb3d 	bl	800b4e6 <SDMMC_CmdSendCID>
 8008e6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d001      	beq.n	8008e78 <SD_InitCard+0x40>
    {
      return errorstate;
 8008e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e76:	e0a9      	b.n	8008fcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f002 f980 	bl	800b184 <SDIO_GetResponse>
 8008e84:	4602      	mov	r2, r0
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2104      	movs	r1, #4
 8008e90:	4618      	mov	r0, r3
 8008e92:	f002 f977 	bl	800b184 <SDIO_GetResponse>
 8008e96:	4602      	mov	r2, r0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2108      	movs	r1, #8
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f002 f96e 	bl	800b184 <SDIO_GetResponse>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	210c      	movs	r1, #12
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f002 f965 	bl	800b184 <SDIO_GetResponse>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	d00d      	beq.n	8008ee6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f107 020e 	add.w	r2, r7, #14
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 fb43 	bl	800b560 <SDMMC_CmdSetRelAdd>
 8008eda:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <SD_InitCard+0xae>
    {
      return errorstate;
 8008ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ee4:	e072      	b.n	8008fcc <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	d036      	beq.n	8008f5c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008eee:	89fb      	ldrh	r3, [r7, #14]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008efe:	041b      	lsls	r3, r3, #16
 8008f00:	4619      	mov	r1, r3
 8008f02:	4610      	mov	r0, r2
 8008f04:	f002 fb0d 	bl	800b522 <SDMMC_CmdSendCSD>
 8008f08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f12:	e05b      	b.n	8008fcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f002 f932 	bl	800b184 <SDIO_GetResponse>
 8008f20:	4602      	mov	r2, r0
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f002 f929 	bl	800b184 <SDIO_GetResponse>
 8008f32:	4602      	mov	r2, r0
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2108      	movs	r1, #8
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f002 f920 	bl	800b184 <SDIO_GetResponse>
 8008f44:	4602      	mov	r2, r0
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	210c      	movs	r1, #12
 8008f50:	4618      	mov	r0, r3
 8008f52:	f002 f917 	bl	800b184 <SDIO_GetResponse>
 8008f56:	4602      	mov	r2, r0
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2104      	movs	r1, #4
 8008f62:	4618      	mov	r0, r3
 8008f64:	f002 f90e 	bl	800b184 <SDIO_GetResponse>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	0d1a      	lsrs	r2, r3, #20
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f70:	f107 0310 	add.w	r3, r7, #16
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff fd6e 	bl	8008a58 <HAL_SD_GetCardCSD>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d002      	beq.n	8008f88 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f82:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f86:	e021      	b.n	8008fcc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6819      	ldr	r1, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f90:	041b      	lsls	r3, r3, #16
 8008f92:	2200      	movs	r2, #0
 8008f94:	461c      	mov	r4, r3
 8008f96:	4615      	mov	r5, r2
 8008f98:	4622      	mov	r2, r4
 8008f9a:	462b      	mov	r3, r5
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	f002 f9fd 	bl	800b39c <SDMMC_CmdSelDesel>
 8008fa2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <SD_InitCard+0x176>
  {
    return errorstate;
 8008faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fac:	e00e      	b.n	8008fcc <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681d      	ldr	r5, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	466c      	mov	r4, sp
 8008fb6:	f103 0210 	add.w	r2, r3, #16
 8008fba:	ca07      	ldmia	r2, {r0, r1, r2}
 8008fbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fc4:	4628      	mov	r0, r5
 8008fc6:	f002 f841 	bl	800b04c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3740      	adds	r7, #64	; 0x40
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bdb0      	pop	{r4, r5, r7, pc}

08008fd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b086      	sub	sp, #24
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f002 f9f8 	bl	800b3e2 <SDMMC_CmdGoIdleState>
 8008ff2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <SD_PowerON+0x2a>
  {
    return errorstate;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	e072      	b.n	80090e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4618      	mov	r0, r3
 8009004:	f002 fa0b 	bl	800b41e <SDMMC_CmdOperCond>
 8009008:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00d      	beq.n	800902c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4618      	mov	r0, r3
 800901c:	f002 f9e1 	bl	800b3e2 <SDMMC_CmdGoIdleState>
 8009020:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	e05b      	b.n	80090e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009036:	2b01      	cmp	r3, #1
 8009038:	d137      	bne.n	80090aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2100      	movs	r1, #0
 8009040:	4618      	mov	r0, r3
 8009042:	f002 fa0b 	bl	800b45c <SDMMC_CmdAppCommand>
 8009046:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d02d      	beq.n	80090aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800904e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009052:	e047      	b.n	80090e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f002 f9fe 	bl	800b45c <SDMMC_CmdAppCommand>
 8009060:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <SD_PowerON+0x98>
    {
      return errorstate;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e03b      	b.n	80090e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	491e      	ldr	r1, [pc, #120]	; (80090ec <SD_PowerON+0x118>)
 8009072:	4618      	mov	r0, r3
 8009074:	f002 fa14 	bl	800b4a0 <SDMMC_CmdAppOperCommand>
 8009078:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009084:	e02e      	b.n	80090e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f002 f879 	bl	800b184 <SDIO_GetResponse>
 8009092:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	0fdb      	lsrs	r3, r3, #31
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <SD_PowerON+0xcc>
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <SD_PowerON+0xce>
 80090a0:	2300      	movs	r3, #0
 80090a2:	613b      	str	r3, [r7, #16]

    count++;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	3301      	adds	r3, #1
 80090a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d802      	bhi.n	80090ba <SD_PowerON+0xe6>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0cc      	beq.n	8009054 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d902      	bls.n	80090ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80090c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c8:	e00c      	b.n	80090e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	645a      	str	r2, [r3, #68]	; 0x44
 80090da:	e002      	b.n	80090e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	c1100000 	.word	0xc1100000

080090f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d102      	bne.n	8009106 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009100:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009104:	e018      	b.n	8009138 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800910e:	041b      	lsls	r3, r3, #16
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f002 fa45 	bl	800b5a2 <SDMMC_CmdSendStatus>
 8009118:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	e009      	b.n	8009138 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f002 f82a 	bl	800b184 <SDIO_GetResponse>
 8009130:	4602      	mov	r2, r0
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d101      	bne.n	8009152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e07b      	b.n	800924a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d108      	bne.n	800916c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009162:	d009      	beq.n	8009178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	61da      	str	r2, [r3, #28]
 800916a:	e005      	b.n	8009178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d106      	bne.n	8009198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f7fc f8d0 	bl	8005338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	431a      	orrs	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091e8:	431a      	orrs	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091f2:	431a      	orrs	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a1b      	ldr	r3, [r3, #32]
 80091f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fc:	ea42 0103 	orr.w	r1, r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	0c1b      	lsrs	r3, r3, #16
 8009216:	f003 0104 	and.w	r1, r3, #4
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	f003 0210 	and.w	r2, r3, #16
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b088      	sub	sp, #32
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	603b      	str	r3, [r7, #0]
 800925e:	4613      	mov	r3, r2
 8009260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_SPI_Transmit+0x22>
 8009270:	2302      	movs	r3, #2
 8009272:	e126      	b.n	80094c2 <HAL_SPI_Transmit+0x270>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800927c:	f7fc fb14 	bl	80058a8 <HAL_GetTick>
 8009280:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b01      	cmp	r3, #1
 8009290:	d002      	beq.n	8009298 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009292:	2302      	movs	r3, #2
 8009294:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009296:	e10b      	b.n	80094b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_SPI_Transmit+0x52>
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d102      	bne.n	80092aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092a8:	e102      	b.n	80094b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2203      	movs	r2, #3
 80092ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	88fa      	ldrh	r2, [r7, #6]
 80092c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	88fa      	ldrh	r2, [r7, #6]
 80092c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2200      	movs	r2, #0
 80092d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f0:	d10f      	bne.n	8009312 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	d007      	beq.n	8009330 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800932e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009338:	d14b      	bne.n	80093d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d002      	beq.n	8009348 <HAL_SPI_Transmit+0xf6>
 8009342:	8afb      	ldrh	r3, [r7, #22]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d13e      	bne.n	80093c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	881a      	ldrh	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	1c9a      	adds	r2, r3, #2
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009362:	b29b      	uxth	r3, r3
 8009364:	3b01      	subs	r3, #1
 8009366:	b29a      	uxth	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800936c:	e02b      	b.n	80093c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	2b02      	cmp	r3, #2
 800937a:	d112      	bne.n	80093a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	881a      	ldrh	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938c:	1c9a      	adds	r2, r3, #2
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009396:	b29b      	uxth	r3, r3
 8009398:	3b01      	subs	r3, #1
 800939a:	b29a      	uxth	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	86da      	strh	r2, [r3, #54]	; 0x36
 80093a0:	e011      	b.n	80093c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093a2:	f7fc fa81 	bl	80058a8 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	683a      	ldr	r2, [r7, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d803      	bhi.n	80093ba <HAL_SPI_Transmit+0x168>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b8:	d102      	bne.n	80093c0 <HAL_SPI_Transmit+0x16e>
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d102      	bne.n	80093c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093c4:	e074      	b.n	80094b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1ce      	bne.n	800936e <HAL_SPI_Transmit+0x11c>
 80093d0:	e04c      	b.n	800946c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <HAL_SPI_Transmit+0x18e>
 80093da:	8afb      	ldrh	r3, [r7, #22]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d140      	bne.n	8009462 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	330c      	adds	r3, #12
 80093ea:	7812      	ldrb	r2, [r2, #0]
 80093ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009406:	e02c      	b.n	8009462 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b02      	cmp	r3, #2
 8009414:	d113      	bne.n	800943e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	330c      	adds	r3, #12
 8009420:	7812      	ldrb	r2, [r2, #0]
 8009422:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	1c5a      	adds	r2, r3, #1
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009432:	b29b      	uxth	r3, r3
 8009434:	3b01      	subs	r3, #1
 8009436:	b29a      	uxth	r2, r3
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	86da      	strh	r2, [r3, #54]	; 0x36
 800943c:	e011      	b.n	8009462 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800943e:	f7fc fa33 	bl	80058a8 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	683a      	ldr	r2, [r7, #0]
 800944a:	429a      	cmp	r2, r3
 800944c:	d803      	bhi.n	8009456 <HAL_SPI_Transmit+0x204>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009454:	d102      	bne.n	800945c <HAL_SPI_Transmit+0x20a>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d102      	bne.n	8009462 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009460:	e026      	b.n	80094b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009466:	b29b      	uxth	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1cd      	bne.n	8009408 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800946c:	69ba      	ldr	r2, [r7, #24]
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fbcb 	bl	8009c0c <SPI_EndRxTxTransaction>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2220      	movs	r2, #32
 8009480:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10a      	bne.n	80094a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	613b      	str	r3, [r7, #16]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	77fb      	strb	r3, [r7, #31]
 80094ac:	e000      	b.n	80094b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80094ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3720      	adds	r7, #32
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b088      	sub	sp, #32
 80094ce:	af02      	add	r7, sp, #8
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	603b      	str	r3, [r7, #0]
 80094d6:	4613      	mov	r3, r2
 80094d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094e6:	d112      	bne.n	800950e <HAL_SPI_Receive+0x44>
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10e      	bne.n	800950e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2204      	movs	r2, #4
 80094f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	4613      	mov	r3, r2
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f8f1 	bl	80096ec <HAL_SPI_TransmitReceive>
 800950a:	4603      	mov	r3, r0
 800950c:	e0ea      	b.n	80096e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009514:	2b01      	cmp	r3, #1
 8009516:	d101      	bne.n	800951c <HAL_SPI_Receive+0x52>
 8009518:	2302      	movs	r3, #2
 800951a:	e0e3      	b.n	80096e4 <HAL_SPI_Receive+0x21a>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009524:	f7fc f9c0 	bl	80058a8 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b01      	cmp	r3, #1
 8009534:	d002      	beq.n	800953c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009536:	2302      	movs	r3, #2
 8009538:	75fb      	strb	r3, [r7, #23]
    goto error;
 800953a:	e0ca      	b.n	80096d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <HAL_SPI_Receive+0x7e>
 8009542:	88fb      	ldrh	r3, [r7, #6]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d102      	bne.n	800954e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800954c:	e0c1      	b.n	80096d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2204      	movs	r2, #4
 8009552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	88fa      	ldrh	r2, [r7, #6]
 800956c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009594:	d10f      	bne.n	80095b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80095b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b40      	cmp	r3, #64	; 0x40
 80095c2:	d007      	beq.n	80095d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	68db      	ldr	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d162      	bne.n	80096a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80095dc:	e02e      	b.n	800963c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d115      	bne.n	8009618 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f103 020c 	add.w	r2, r3, #12
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f8:	7812      	ldrb	r2, [r2, #0]
 80095fa:	b2d2      	uxtb	r2, r2
 80095fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009616:	e011      	b.n	800963c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009618:	f7fc f946 	bl	80058a8 <HAL_GetTick>
 800961c:	4602      	mov	r2, r0
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d803      	bhi.n	8009630 <HAL_SPI_Receive+0x166>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800962e:	d102      	bne.n	8009636 <HAL_SPI_Receive+0x16c>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d102      	bne.n	800963c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8009636:	2303      	movs	r3, #3
 8009638:	75fb      	strb	r3, [r7, #23]
          goto error;
 800963a:	e04a      	b.n	80096d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1cb      	bne.n	80095de <HAL_SPI_Receive+0x114>
 8009646:	e031      	b.n	80096ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b01      	cmp	r3, #1
 8009654:	d113      	bne.n	800967e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009660:	b292      	uxth	r2, r2
 8009662:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	1c9a      	adds	r2, r3, #2
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009672:	b29b      	uxth	r3, r3
 8009674:	3b01      	subs	r3, #1
 8009676:	b29a      	uxth	r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800967c:	e011      	b.n	80096a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800967e:	f7fc f913 	bl	80058a8 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	429a      	cmp	r2, r3
 800968c:	d803      	bhi.n	8009696 <HAL_SPI_Receive+0x1cc>
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009694:	d102      	bne.n	800969c <HAL_SPI_Receive+0x1d2>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d102      	bne.n	80096a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80096a0:	e017      	b.n	80096d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1cd      	bne.n	8009648 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fa45 	bl	8009b40 <SPI_EndRxTransaction>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2220      	movs	r2, #32
 80096c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	75fb      	strb	r3, [r7, #23]
 80096ce:	e000      	b.n	80096d2 <HAL_SPI_Receive+0x208>
  }

error :
 80096d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2201      	movs	r2, #1
 80096d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3718      	adds	r7, #24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b08c      	sub	sp, #48	; 0x30
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80096fa:	2301      	movs	r3, #1
 80096fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800970a:	2b01      	cmp	r3, #1
 800970c:	d101      	bne.n	8009712 <HAL_SPI_TransmitReceive+0x26>
 800970e:	2302      	movs	r3, #2
 8009710:	e18a      	b.n	8009a28 <HAL_SPI_TransmitReceive+0x33c>
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800971a:	f7fc f8c5 	bl	80058a8 <HAL_GetTick>
 800971e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009730:	887b      	ldrh	r3, [r7, #2]
 8009732:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009738:	2b01      	cmp	r3, #1
 800973a:	d00f      	beq.n	800975c <HAL_SPI_TransmitReceive+0x70>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009742:	d107      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d103      	bne.n	8009754 <HAL_SPI_TransmitReceive+0x68>
 800974c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009750:	2b04      	cmp	r3, #4
 8009752:	d003      	beq.n	800975c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009754:	2302      	movs	r3, #2
 8009756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800975a:	e15b      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <HAL_SPI_TransmitReceive+0x82>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d002      	beq.n	800976e <HAL_SPI_TransmitReceive+0x82>
 8009768:	887b      	ldrh	r3, [r7, #2]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d103      	bne.n	8009776 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009774:	e14e      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b04      	cmp	r3, #4
 8009780:	d003      	beq.n	800978a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2205      	movs	r2, #5
 8009786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	887a      	ldrh	r2, [r7, #2]
 800979a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	887a      	ldrh	r2, [r7, #2]
 80097a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	68ba      	ldr	r2, [r7, #8]
 80097a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	887a      	ldrh	r2, [r7, #2]
 80097ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	887a      	ldrh	r2, [r7, #2]
 80097b2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ca:	2b40      	cmp	r3, #64	; 0x40
 80097cc:	d007      	beq.n	80097de <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097e6:	d178      	bne.n	80098da <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <HAL_SPI_TransmitReceive+0x10a>
 80097f0:	8b7b      	ldrh	r3, [r7, #26]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d166      	bne.n	80098c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	881a      	ldrh	r2, [r3, #0]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009806:	1c9a      	adds	r2, r3, #2
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009810:	b29b      	uxth	r3, r3
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800981a:	e053      	b.n	80098c4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b02      	cmp	r3, #2
 8009828:	d11b      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x176>
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800982e:	b29b      	uxth	r3, r3
 8009830:	2b00      	cmp	r3, #0
 8009832:	d016      	beq.n	8009862 <HAL_SPI_TransmitReceive+0x176>
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	2b01      	cmp	r3, #1
 8009838:	d113      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b01      	cmp	r3, #1
 800986e:	d119      	bne.n	80098a4 <HAL_SPI_TransmitReceive+0x1b8>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009874:	b29b      	uxth	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d014      	beq.n	80098a4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68da      	ldr	r2, [r3, #12]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009884:	b292      	uxth	r2, r2
 8009886:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	1c9a      	adds	r2, r3, #2
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	3b01      	subs	r3, #1
 800989a:	b29a      	uxth	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098a0:	2301      	movs	r3, #1
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098a4:	f7fc f800 	bl	80058a8 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d807      	bhi.n	80098c4 <HAL_SPI_TransmitReceive+0x1d8>
 80098b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ba:	d003      	beq.n	80098c4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80098c2:	e0a7      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1a6      	bne.n	800981c <HAL_SPI_TransmitReceive+0x130>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1a1      	bne.n	800981c <HAL_SPI_TransmitReceive+0x130>
 80098d8:	e07c      	b.n	80099d4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <HAL_SPI_TransmitReceive+0x1fc>
 80098e2:	8b7b      	ldrh	r3, [r7, #26]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d16b      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	330c      	adds	r3, #12
 80098f2:	7812      	ldrb	r2, [r2, #0]
 80098f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fa:	1c5a      	adds	r2, r3, #1
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009904:	b29b      	uxth	r3, r3
 8009906:	3b01      	subs	r3, #1
 8009908:	b29a      	uxth	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800990e:	e057      	b.n	80099c0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b02      	cmp	r3, #2
 800991c:	d11c      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x26c>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	d017      	beq.n	8009958 <HAL_SPI_TransmitReceive+0x26c>
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	2b01      	cmp	r3, #1
 800992c:	d114      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	330c      	adds	r3, #12
 8009938:	7812      	ldrb	r2, [r2, #0]
 800993a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	1c5a      	adds	r2, r3, #1
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b01      	cmp	r3, #1
 8009964:	d119      	bne.n	800999a <HAL_SPI_TransmitReceive+0x2ae>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800996a:	b29b      	uxth	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d014      	beq.n	800999a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800998c:	b29b      	uxth	r3, r3
 800998e:	3b01      	subs	r3, #1
 8009990:	b29a      	uxth	r2, r3
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009996:	2301      	movs	r3, #1
 8009998:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800999a:	f7fb ff85 	bl	80058a8 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d803      	bhi.n	80099b2 <HAL_SPI_TransmitReceive+0x2c6>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099b0:	d102      	bne.n	80099b8 <HAL_SPI_TransmitReceive+0x2cc>
 80099b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099be:	e029      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1a2      	bne.n	8009910 <HAL_SPI_TransmitReceive+0x224>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d19d      	bne.n	8009910 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f917 	bl	8009c0c <SPI_EndRxTxTransaction>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2220      	movs	r2, #32
 80099ee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80099f0:	e010      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10b      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	617b      	str	r3, [r7, #20]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	e000      	b.n	8009a14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009a12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3730      	adds	r7, #48	; 0x30
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a40:	f7fb ff32 	bl	80058a8 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	1a9b      	subs	r3, r3, r2
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a50:	f7fb ff2a 	bl	80058a8 <HAL_GetTick>
 8009a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a56:	4b39      	ldr	r3, [pc, #228]	; (8009b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	015b      	lsls	r3, r3, #5
 8009a5c:	0d1b      	lsrs	r3, r3, #20
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
 8009a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a66:	e054      	b.n	8009b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a6e:	d050      	beq.n	8009b12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a70:	f7fb ff1a 	bl	80058a8 <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d902      	bls.n	8009a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d13d      	bne.n	8009b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a9e:	d111      	bne.n	8009ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa8:	d004      	beq.n	8009ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ab2:	d107      	bne.n	8009ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009acc:	d10f      	bne.n	8009aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e017      	b.n	8009b32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	3b01      	subs	r3, #1
 8009b10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	689a      	ldr	r2, [r3, #8]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	bf0c      	ite	eq
 8009b22:	2301      	moveq	r3, #1
 8009b24:	2300      	movne	r3, #0
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	461a      	mov	r2, r3
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d19b      	bne.n	8009a68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3720      	adds	r7, #32
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000018 	.word	0x20000018

08009b40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b54:	d111      	bne.n	8009b7a <SPI_EndRxTransaction+0x3a>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b5e:	d004      	beq.n	8009b6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b68:	d107      	bne.n	8009b7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b82:	d12a      	bne.n	8009bda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b8c:	d012      	beq.n	8009bb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	2200      	movs	r2, #0
 8009b96:	2180      	movs	r1, #128	; 0x80
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f7ff ff49 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d02d      	beq.n	8009c00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba8:	f043 0220 	orr.w	r2, r3, #32
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e026      	b.n	8009c02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f7ff ff36 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01a      	beq.n	8009c00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bce:	f043 0220 	orr.w	r2, r3, #32
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e013      	b.n	8009c02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	2101      	movs	r1, #1
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7ff ff23 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d007      	beq.n	8009c00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf4:	f043 0220 	orr.w	r2, r3, #32
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e000      	b.n	8009c02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
	...

08009c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b088      	sub	sp, #32
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c18:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <SPI_EndRxTxTransaction+0x7c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a1b      	ldr	r2, [pc, #108]	; (8009c8c <SPI_EndRxTxTransaction+0x80>)
 8009c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c22:	0d5b      	lsrs	r3, r3, #21
 8009c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c28:	fb02 f303 	mul.w	r3, r2, r3
 8009c2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c36:	d112      	bne.n	8009c5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2180      	movs	r1, #128	; 0x80
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fef4 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d016      	beq.n	8009c7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c52:	f043 0220 	orr.w	r2, r3, #32
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c5a:	2303      	movs	r3, #3
 8009c5c:	e00f      	b.n	8009c7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00a      	beq.n	8009c7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c74:	2b80      	cmp	r3, #128	; 0x80
 8009c76:	d0f2      	beq.n	8009c5e <SPI_EndRxTxTransaction+0x52>
 8009c78:	e000      	b.n	8009c7c <SPI_EndRxTxTransaction+0x70>
        break;
 8009c7a:	bf00      	nop
  }

  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000018 	.word	0x20000018
 8009c8c:	165e9f81 	.word	0x165e9f81

08009c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e041      	b.n	8009d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d106      	bne.n	8009cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fb fb86 	bl	80053c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2202      	movs	r2, #2
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4610      	mov	r0, r2
 8009cd0:	f000 fac0 	bl	800a254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e041      	b.n	8009dc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d106      	bne.n	8009d5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f839 	bl	8009dcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3304      	adds	r3, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	4610      	mov	r0, r2
 8009d6e:	f000 fa71 	bl	800a254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2201      	movs	r2, #1
 8009d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d109      	bne.n	8009e04 <HAL_TIM_PWM_Start+0x24>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	bf14      	ite	ne
 8009dfc:	2301      	movne	r3, #1
 8009dfe:	2300      	moveq	r3, #0
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	e022      	b.n	8009e4a <HAL_TIM_PWM_Start+0x6a>
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b04      	cmp	r3, #4
 8009e08:	d109      	bne.n	8009e1e <HAL_TIM_PWM_Start+0x3e>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	bf14      	ite	ne
 8009e16:	2301      	movne	r3, #1
 8009e18:	2300      	moveq	r3, #0
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	e015      	b.n	8009e4a <HAL_TIM_PWM_Start+0x6a>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b08      	cmp	r3, #8
 8009e22:	d109      	bne.n	8009e38 <HAL_TIM_PWM_Start+0x58>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	bf14      	ite	ne
 8009e30:	2301      	movne	r3, #1
 8009e32:	2300      	moveq	r3, #0
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	e008      	b.n	8009e4a <HAL_TIM_PWM_Start+0x6a>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	bf14      	ite	ne
 8009e44:	2301      	movne	r3, #1
 8009e46:	2300      	moveq	r3, #0
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e068      	b.n	8009f24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d104      	bne.n	8009e62 <HAL_TIM_PWM_Start+0x82>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e60:	e013      	b.n	8009e8a <HAL_TIM_PWM_Start+0xaa>
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d104      	bne.n	8009e72 <HAL_TIM_PWM_Start+0x92>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e70:	e00b      	b.n	8009e8a <HAL_TIM_PWM_Start+0xaa>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b08      	cmp	r3, #8
 8009e76:	d104      	bne.n	8009e82 <HAL_TIM_PWM_Start+0xa2>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e80:	e003      	b.n	8009e8a <HAL_TIM_PWM_Start+0xaa>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2202      	movs	r2, #2
 8009e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fc84 	bl	800a7a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a23      	ldr	r2, [pc, #140]	; (8009f2c <HAL_TIM_PWM_Start+0x14c>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d107      	bne.n	8009eb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009eb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a1d      	ldr	r2, [pc, #116]	; (8009f2c <HAL_TIM_PWM_Start+0x14c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d018      	beq.n	8009eee <HAL_TIM_PWM_Start+0x10e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec4:	d013      	beq.n	8009eee <HAL_TIM_PWM_Start+0x10e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a19      	ldr	r2, [pc, #100]	; (8009f30 <HAL_TIM_PWM_Start+0x150>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00e      	beq.n	8009eee <HAL_TIM_PWM_Start+0x10e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a17      	ldr	r2, [pc, #92]	; (8009f34 <HAL_TIM_PWM_Start+0x154>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d009      	beq.n	8009eee <HAL_TIM_PWM_Start+0x10e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a16      	ldr	r2, [pc, #88]	; (8009f38 <HAL_TIM_PWM_Start+0x158>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d004      	beq.n	8009eee <HAL_TIM_PWM_Start+0x10e>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a14      	ldr	r2, [pc, #80]	; (8009f3c <HAL_TIM_PWM_Start+0x15c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d111      	bne.n	8009f12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	f003 0307 	and.w	r3, r3, #7
 8009ef8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b06      	cmp	r3, #6
 8009efe:	d010      	beq.n	8009f22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0201 	orr.w	r2, r2, #1
 8009f0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f10:	e007      	b.n	8009f22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0201 	orr.w	r2, r2, #1
 8009f20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3710      	adds	r7, #16
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40000400 	.word	0x40000400
 8009f34:	40000800 	.word	0x40000800
 8009f38:	40000c00 	.word	0x40000c00
 8009f3c:	40014000 	.word	0x40014000

08009f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d101      	bne.n	8009f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e0ae      	b.n	800a0bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b0c      	cmp	r3, #12
 8009f6a:	f200 809f 	bhi.w	800a0ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009f6e:	a201      	add	r2, pc, #4	; (adr r2, 8009f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f74:	08009fa9 	.word	0x08009fa9
 8009f78:	0800a0ad 	.word	0x0800a0ad
 8009f7c:	0800a0ad 	.word	0x0800a0ad
 8009f80:	0800a0ad 	.word	0x0800a0ad
 8009f84:	08009fe9 	.word	0x08009fe9
 8009f88:	0800a0ad 	.word	0x0800a0ad
 8009f8c:	0800a0ad 	.word	0x0800a0ad
 8009f90:	0800a0ad 	.word	0x0800a0ad
 8009f94:	0800a02b 	.word	0x0800a02b
 8009f98:	0800a0ad 	.word	0x0800a0ad
 8009f9c:	0800a0ad 	.word	0x0800a0ad
 8009fa0:	0800a0ad 	.word	0x0800a0ad
 8009fa4:	0800a06b 	.word	0x0800a06b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 f9d0 	bl	800a354 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	699a      	ldr	r2, [r3, #24]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0208 	orr.w	r2, r2, #8
 8009fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	699a      	ldr	r2, [r3, #24]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f022 0204 	bic.w	r2, r2, #4
 8009fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6999      	ldr	r1, [r3, #24]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	691a      	ldr	r2, [r3, #16]
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	619a      	str	r2, [r3, #24]
      break;
 8009fe6:	e064      	b.n	800a0b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68b9      	ldr	r1, [r7, #8]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fa16 	bl	800a420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	699a      	ldr	r2, [r3, #24]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699a      	ldr	r2, [r3, #24]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	6999      	ldr	r1, [r3, #24]
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	021a      	lsls	r2, r3, #8
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	619a      	str	r2, [r3, #24]
      break;
 800a028:	e043      	b.n	800a0b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 fa61 	bl	800a4f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	69da      	ldr	r2, [r3, #28]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f042 0208 	orr.w	r2, r2, #8
 800a044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69da      	ldr	r2, [r3, #28]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f022 0204 	bic.w	r2, r2, #4
 800a054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	69d9      	ldr	r1, [r3, #28]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	430a      	orrs	r2, r1
 800a066:	61da      	str	r2, [r3, #28]
      break;
 800a068:	e023      	b.n	800a0b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68b9      	ldr	r1, [r7, #8]
 800a070:	4618      	mov	r0, r3
 800a072:	f000 faab 	bl	800a5cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	69da      	ldr	r2, [r3, #28]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	69da      	ldr	r2, [r3, #28]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69d9      	ldr	r1, [r3, #28]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	021a      	lsls	r2, r3, #8
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	61da      	str	r2, [r3, #28]
      break;
 800a0aa:	e002      	b.n	800a0b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e0b4      	b.n	800a24a <HAL_TIM_ConfigClockSource+0x186>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68ba      	ldr	r2, [r7, #8]
 800a10e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a118:	d03e      	beq.n	800a198 <HAL_TIM_ConfigClockSource+0xd4>
 800a11a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a11e:	f200 8087 	bhi.w	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a126:	f000 8086 	beq.w	800a236 <HAL_TIM_ConfigClockSource+0x172>
 800a12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a12e:	d87f      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a130:	2b70      	cmp	r3, #112	; 0x70
 800a132:	d01a      	beq.n	800a16a <HAL_TIM_ConfigClockSource+0xa6>
 800a134:	2b70      	cmp	r3, #112	; 0x70
 800a136:	d87b      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a138:	2b60      	cmp	r3, #96	; 0x60
 800a13a:	d050      	beq.n	800a1de <HAL_TIM_ConfigClockSource+0x11a>
 800a13c:	2b60      	cmp	r3, #96	; 0x60
 800a13e:	d877      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a140:	2b50      	cmp	r3, #80	; 0x50
 800a142:	d03c      	beq.n	800a1be <HAL_TIM_ConfigClockSource+0xfa>
 800a144:	2b50      	cmp	r3, #80	; 0x50
 800a146:	d873      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a148:	2b40      	cmp	r3, #64	; 0x40
 800a14a:	d058      	beq.n	800a1fe <HAL_TIM_ConfigClockSource+0x13a>
 800a14c:	2b40      	cmp	r3, #64	; 0x40
 800a14e:	d86f      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a150:	2b30      	cmp	r3, #48	; 0x30
 800a152:	d064      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x15a>
 800a154:	2b30      	cmp	r3, #48	; 0x30
 800a156:	d86b      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a158:	2b20      	cmp	r3, #32
 800a15a:	d060      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x15a>
 800a15c:	2b20      	cmp	r3, #32
 800a15e:	d867      	bhi.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d05c      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x15a>
 800a164:	2b10      	cmp	r3, #16
 800a166:	d05a      	beq.n	800a21e <HAL_TIM_ConfigClockSource+0x15a>
 800a168:	e062      	b.n	800a230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6818      	ldr	r0, [r3, #0]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	6899      	ldr	r1, [r3, #8]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f000 faf1 	bl	800a760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	689b      	ldr	r3, [r3, #8]
 800a184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a18c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	609a      	str	r2, [r3, #8]
      break;
 800a196:	e04f      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6818      	ldr	r0, [r3, #0]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	6899      	ldr	r1, [r3, #8]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f000 fada 	bl	800a760 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689a      	ldr	r2, [r3, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1ba:	609a      	str	r2, [r3, #8]
      break;
 800a1bc:	e03c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	6859      	ldr	r1, [r3, #4]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	f000 fa4e 	bl	800a66c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2150      	movs	r1, #80	; 0x50
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 faa7 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a1dc:	e02c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6818      	ldr	r0, [r3, #0]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	6859      	ldr	r1, [r3, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f000 fa6d 	bl	800a6ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2160      	movs	r1, #96	; 0x60
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fa97 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a1fc:	e01c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6818      	ldr	r0, [r3, #0]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	6859      	ldr	r1, [r3, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f000 fa2e 	bl	800a66c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2140      	movs	r1, #64	; 0x40
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fa87 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a21c:	e00c      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4619      	mov	r1, r3
 800a228:	4610      	mov	r0, r2
 800a22a:	f000 fa7e 	bl	800a72a <TIM_ITRx_SetConfig>
      break;
 800a22e:	e003      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
      break;
 800a234:	e000      	b.n	800a238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a248:	7bfb      	ldrb	r3, [r7, #15]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a34      	ldr	r2, [pc, #208]	; (800a338 <TIM_Base_SetConfig+0xe4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00f      	beq.n	800a28c <TIM_Base_SetConfig+0x38>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a272:	d00b      	beq.n	800a28c <TIM_Base_SetConfig+0x38>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a31      	ldr	r2, [pc, #196]	; (800a33c <TIM_Base_SetConfig+0xe8>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d007      	beq.n	800a28c <TIM_Base_SetConfig+0x38>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a30      	ldr	r2, [pc, #192]	; (800a340 <TIM_Base_SetConfig+0xec>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d003      	beq.n	800a28c <TIM_Base_SetConfig+0x38>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a2f      	ldr	r2, [pc, #188]	; (800a344 <TIM_Base_SetConfig+0xf0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d108      	bne.n	800a29e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a25      	ldr	r2, [pc, #148]	; (800a338 <TIM_Base_SetConfig+0xe4>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d01b      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ac:	d017      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a22      	ldr	r2, [pc, #136]	; (800a33c <TIM_Base_SetConfig+0xe8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d013      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a21      	ldr	r2, [pc, #132]	; (800a340 <TIM_Base_SetConfig+0xec>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00f      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a20      	ldr	r2, [pc, #128]	; (800a344 <TIM_Base_SetConfig+0xf0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00b      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a1f      	ldr	r2, [pc, #124]	; (800a348 <TIM_Base_SetConfig+0xf4>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d007      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a1e      	ldr	r2, [pc, #120]	; (800a34c <TIM_Base_SetConfig+0xf8>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d003      	beq.n	800a2de <TIM_Base_SetConfig+0x8a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <TIM_Base_SetConfig+0xfc>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d108      	bne.n	800a2f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a08      	ldr	r2, [pc, #32]	; (800a338 <TIM_Base_SetConfig+0xe4>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d103      	bne.n	800a324 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	691a      	ldr	r2, [r3, #16]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	615a      	str	r2, [r3, #20]
}
 800a32a:	bf00      	nop
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	40010000 	.word	0x40010000
 800a33c:	40000400 	.word	0x40000400
 800a340:	40000800 	.word	0x40000800
 800a344:	40000c00 	.word	0x40000c00
 800a348:	40014000 	.word	0x40014000
 800a34c:	40014400 	.word	0x40014400
 800a350:	40014800 	.word	0x40014800

0800a354 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a354:	b480      	push	{r7}
 800a356:	b087      	sub	sp, #28
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a1b      	ldr	r3, [r3, #32]
 800a362:	f023 0201 	bic.w	r2, r3, #1
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	699b      	ldr	r3, [r3, #24]
 800a37a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 0303 	bic.w	r3, r3, #3
 800a38a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	4313      	orrs	r3, r2
 800a394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f023 0302 	bic.w	r3, r3, #2
 800a39c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a1c      	ldr	r2, [pc, #112]	; (800a41c <TIM_OC1_SetConfig+0xc8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d10c      	bne.n	800a3ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f023 0308 	bic.w	r3, r3, #8
 800a3b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	4313      	orrs	r3, r2
 800a3c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f023 0304 	bic.w	r3, r3, #4
 800a3c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4a13      	ldr	r2, [pc, #76]	; (800a41c <TIM_OC1_SetConfig+0xc8>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d111      	bne.n	800a3f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	697a      	ldr	r2, [r7, #20]
 800a40e:	621a      	str	r2, [r3, #32]
}
 800a410:	bf00      	nop
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40010000 	.word	0x40010000

0800a420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	f023 0210 	bic.w	r2, r3, #16
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a44e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	021b      	lsls	r3, r3, #8
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	4313      	orrs	r3, r2
 800a462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	f023 0320 	bic.w	r3, r3, #32
 800a46a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	011b      	lsls	r3, r3, #4
 800a472:	697a      	ldr	r2, [r7, #20]
 800a474:	4313      	orrs	r3, r2
 800a476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a1e      	ldr	r2, [pc, #120]	; (800a4f4 <TIM_OC2_SetConfig+0xd4>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d10d      	bne.n	800a49c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	011b      	lsls	r3, r3, #4
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	4313      	orrs	r3, r2
 800a492:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a49a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a15      	ldr	r2, [pc, #84]	; (800a4f4 <TIM_OC2_SetConfig+0xd4>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d113      	bne.n	800a4cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a4aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	695b      	ldr	r3, [r3, #20]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	009b      	lsls	r3, r3, #2
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	621a      	str	r2, [r3, #32]
}
 800a4e6:	bf00      	nop
 800a4e8:	371c      	adds	r7, #28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	40010000 	.word	0x40010000

0800a4f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a1b      	ldr	r3, [r3, #32]
 800a512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a1d      	ldr	r2, [pc, #116]	; (800a5c8 <TIM_OC3_SetConfig+0xd0>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d10d      	bne.n	800a572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a55c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a14      	ldr	r2, [pc, #80]	; (800a5c8 <TIM_OC3_SetConfig+0xd0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d113      	bne.n	800a5a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	011b      	lsls	r3, r3, #4
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4313      	orrs	r3, r2
 800a594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	621a      	str	r2, [r3, #32]
}
 800a5bc:	bf00      	nop
 800a5be:	371c      	adds	r7, #28
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	40010000 	.word	0x40010000

0800a5cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a1b      	ldr	r3, [r3, #32]
 800a5e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	021b      	lsls	r3, r3, #8
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	031b      	lsls	r3, r3, #12
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	4313      	orrs	r3, r2
 800a622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a10      	ldr	r2, [pc, #64]	; (800a668 <TIM_OC4_SetConfig+0x9c>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d109      	bne.n	800a640 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	695b      	ldr	r3, [r3, #20]
 800a638:	019b      	lsls	r3, r3, #6
 800a63a:	697a      	ldr	r2, [r7, #20]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	621a      	str	r2, [r3, #32]
}
 800a65a:	bf00      	nop
 800a65c:	371c      	adds	r7, #28
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	40010000 	.word	0x40010000

0800a66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	693a      	ldr	r2, [r7, #16]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f023 030a 	bic.w	r3, r3, #10
 800a6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	697a      	ldr	r2, [r7, #20]
 800a6bc:	621a      	str	r2, [r3, #32]
}
 800a6be:	bf00      	nop
 800a6c0:	371c      	adds	r7, #28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b087      	sub	sp, #28
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	f023 0210 	bic.w	r2, r3, #16
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a1b      	ldr	r3, [r3, #32]
 800a6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	031b      	lsls	r3, r3, #12
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a706:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	011b      	lsls	r3, r3, #4
 800a70c:	693a      	ldr	r2, [r7, #16]
 800a70e:	4313      	orrs	r3, r2
 800a710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	621a      	str	r2, [r3, #32]
}
 800a71e:	bf00      	nop
 800a720:	371c      	adds	r7, #28
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b085      	sub	sp, #20
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	f043 0307 	orr.w	r3, r3, #7
 800a74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	609a      	str	r2, [r3, #8]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	021a      	lsls	r2, r3, #8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	431a      	orrs	r2, r3
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	4313      	orrs	r3, r2
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	609a      	str	r2, [r3, #8]
}
 800a794:	bf00      	nop
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f003 031f 	and.w	r3, r3, #31
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6a1a      	ldr	r2, [r3, #32]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	43db      	mvns	r3, r3
 800a7c2:	401a      	ands	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a1a      	ldr	r2, [r3, #32]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	f003 031f 	and.w	r3, r3, #31
 800a7d2:	6879      	ldr	r1, [r7, #4]
 800a7d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d8:	431a      	orrs	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	621a      	str	r2, [r3, #32]
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
	...

0800a7ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d101      	bne.n	800a804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a800:	2302      	movs	r3, #2
 800a802:	e050      	b.n	800a8a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a82a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	4313      	orrs	r3, r2
 800a834:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a1c      	ldr	r2, [pc, #112]	; (800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d018      	beq.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a850:	d013      	beq.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a18      	ldr	r2, [pc, #96]	; (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d00e      	beq.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a16      	ldr	r2, [pc, #88]	; (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d009      	beq.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a15      	ldr	r2, [pc, #84]	; (800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d004      	beq.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a13      	ldr	r2, [pc, #76]	; (800a8c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d10c      	bne.n	800a894 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a880:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	4313      	orrs	r3, r2
 800a88a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3714      	adds	r7, #20
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40000400 	.word	0x40000400
 800a8bc:	40000800 	.word	0x40000800
 800a8c0:	40000c00 	.word	0x40000c00
 800a8c4:	40014000 	.word	0x40014000

0800a8c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e03f      	b.n	800a95a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d106      	bne.n	800a8f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7fa fe00 	bl	80054f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	; 0x24
 800a8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a90a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f929 	bl	800ab64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	691a      	ldr	r2, [r3, #16]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	695a      	ldr	r2, [r3, #20]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2200      	movs	r2, #0
 800a946:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2220      	movs	r2, #32
 800a94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2220      	movs	r2, #32
 800a954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a962:	b580      	push	{r7, lr}
 800a964:	b08a      	sub	sp, #40	; 0x28
 800a966:	af02      	add	r7, sp, #8
 800a968:	60f8      	str	r0, [r7, #12]
 800a96a:	60b9      	str	r1, [r7, #8]
 800a96c:	603b      	str	r3, [r7, #0]
 800a96e:	4613      	mov	r3, r2
 800a970:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	2b20      	cmp	r3, #32
 800a980:	d17c      	bne.n	800aa7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <HAL_UART_Transmit+0x2c>
 800a988:	88fb      	ldrh	r3, [r7, #6]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	e075      	b.n	800aa7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d101      	bne.n	800a9a0 <HAL_UART_Transmit+0x3e>
 800a99c:	2302      	movs	r3, #2
 800a99e:	e06e      	b.n	800aa7e <HAL_UART_Transmit+0x11c>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2221      	movs	r2, #33	; 0x21
 800a9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a9b6:	f7fa ff77 	bl	80058a8 <HAL_GetTick>
 800a9ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	88fa      	ldrh	r2, [r7, #6]
 800a9c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	88fa      	ldrh	r2, [r7, #6]
 800a9c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9d0:	d108      	bne.n	800a9e4 <HAL_UART_Transmit+0x82>
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d104      	bne.n	800a9e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	e003      	b.n	800a9ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a9f4:	e02a      	b.n	800aa4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2180      	movs	r1, #128	; 0x80
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f000 f840 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800aa0c:	2303      	movs	r3, #3
 800aa0e:	e036      	b.n	800aa7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10b      	bne.n	800aa2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	3302      	adds	r3, #2
 800aa2a:	61bb      	str	r3, [r7, #24]
 800aa2c:	e007      	b.n	800aa3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	781a      	ldrb	r2, [r3, #0]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1cf      	bne.n	800a9f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	2140      	movs	r1, #64	; 0x40
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 f810 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800aa6c:	2303      	movs	r3, #3
 800aa6e:	e006      	b.n	800aa7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2220      	movs	r2, #32
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e000      	b.n	800aa7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800aa7c:	2302      	movs	r3, #2
  }
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3720      	adds	r7, #32
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b090      	sub	sp, #64	; 0x40
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	603b      	str	r3, [r7, #0]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa96:	e050      	b.n	800ab3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa9e:	d04c      	beq.n	800ab3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800aaa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d007      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x30>
 800aaa6:	f7fa feff 	bl	80058a8 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d241      	bcs.n	800ab3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	330c      	adds	r3, #12
 800aabc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	330c      	adds	r3, #12
 800aad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aad6:	637a      	str	r2, [r7, #52]	; 0x34
 800aad8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aadc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aade:	e841 2300 	strex	r3, r2, [r1]
 800aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1e5      	bne.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3314      	adds	r3, #20
 800aaf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
 800aaf8:	613b      	str	r3, [r7, #16]
   return(result);
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f023 0301 	bic.w	r3, r3, #1
 800ab00:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3314      	adds	r3, #20
 800ab08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab0a:	623a      	str	r2, [r7, #32]
 800ab0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	69f9      	ldr	r1, [r7, #28]
 800ab10:	6a3a      	ldr	r2, [r7, #32]
 800ab12:	e841 2300 	strex	r3, r2, [r1]
 800ab16:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e5      	bne.n	800aaea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e00f      	b.n	800ab5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	4013      	ands	r3, r2
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	bf0c      	ite	eq
 800ab4a:	2301      	moveq	r3, #1
 800ab4c:	2300      	movne	r3, #0
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	461a      	mov	r2, r3
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d09f      	beq.n	800aa98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3740      	adds	r7, #64	; 0x40
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ab68:	b0c0      	sub	sp, #256	; 0x100
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab80:	68d9      	ldr	r1, [r3, #12]
 800ab82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	ea40 0301 	orr.w	r3, r0, r1
 800ab8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab98:	691b      	ldr	r3, [r3, #16]
 800ab9a:	431a      	orrs	r2, r3
 800ab9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba0:	695b      	ldr	r3, [r3, #20]
 800aba2:	431a      	orrs	r2, r3
 800aba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	4313      	orrs	r3, r2
 800abac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800abb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800abbc:	f021 010c 	bic.w	r1, r1, #12
 800abc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800abca:	430b      	orrs	r3, r1
 800abcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800abce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800abda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abde:	6999      	ldr	r1, [r3, #24]
 800abe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	ea40 0301 	orr.w	r3, r0, r1
 800abea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800abec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	4b8f      	ldr	r3, [pc, #572]	; (800ae30 <UART_SetConfig+0x2cc>)
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d005      	beq.n	800ac04 <UART_SetConfig+0xa0>
 800abf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	4b8d      	ldr	r3, [pc, #564]	; (800ae34 <UART_SetConfig+0x2d0>)
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d104      	bne.n	800ac0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac04:	f7fd fb00 	bl	8008208 <HAL_RCC_GetPCLK2Freq>
 800ac08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ac0c:	e003      	b.n	800ac16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac0e:	f7fd fae7 	bl	80081e0 <HAL_RCC_GetPCLK1Freq>
 800ac12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac1a:	69db      	ldr	r3, [r3, #28]
 800ac1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac20:	f040 810c 	bne.w	800ae3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ac32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ac36:	4622      	mov	r2, r4
 800ac38:	462b      	mov	r3, r5
 800ac3a:	1891      	adds	r1, r2, r2
 800ac3c:	65b9      	str	r1, [r7, #88]	; 0x58
 800ac3e:	415b      	adcs	r3, r3
 800ac40:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ac46:	4621      	mov	r1, r4
 800ac48:	eb12 0801 	adds.w	r8, r2, r1
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	eb43 0901 	adc.w	r9, r3, r1
 800ac52:	f04f 0200 	mov.w	r2, #0
 800ac56:	f04f 0300 	mov.w	r3, #0
 800ac5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ac5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ac62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ac66:	4690      	mov	r8, r2
 800ac68:	4699      	mov	r9, r3
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	eb18 0303 	adds.w	r3, r8, r3
 800ac70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac74:	462b      	mov	r3, r5
 800ac76:	eb49 0303 	adc.w	r3, r9, r3
 800ac7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ac8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ac92:	460b      	mov	r3, r1
 800ac94:	18db      	adds	r3, r3, r3
 800ac96:	653b      	str	r3, [r7, #80]	; 0x50
 800ac98:	4613      	mov	r3, r2
 800ac9a:	eb42 0303 	adc.w	r3, r2, r3
 800ac9e:	657b      	str	r3, [r7, #84]	; 0x54
 800aca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aca8:	f7f5 ffd6 	bl	8000c58 <__aeabi_uldivmod>
 800acac:	4602      	mov	r2, r0
 800acae:	460b      	mov	r3, r1
 800acb0:	4b61      	ldr	r3, [pc, #388]	; (800ae38 <UART_SetConfig+0x2d4>)
 800acb2:	fba3 2302 	umull	r2, r3, r3, r2
 800acb6:	095b      	lsrs	r3, r3, #5
 800acb8:	011c      	lsls	r4, r3, #4
 800acba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acbe:	2200      	movs	r2, #0
 800acc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800acc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800acc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800accc:	4642      	mov	r2, r8
 800acce:	464b      	mov	r3, r9
 800acd0:	1891      	adds	r1, r2, r2
 800acd2:	64b9      	str	r1, [r7, #72]	; 0x48
 800acd4:	415b      	adcs	r3, r3
 800acd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800acd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800acdc:	4641      	mov	r1, r8
 800acde:	eb12 0a01 	adds.w	sl, r2, r1
 800ace2:	4649      	mov	r1, r9
 800ace4:	eb43 0b01 	adc.w	fp, r3, r1
 800ace8:	f04f 0200 	mov.w	r2, #0
 800acec:	f04f 0300 	mov.w	r3, #0
 800acf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800acf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800acf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acfc:	4692      	mov	sl, r2
 800acfe:	469b      	mov	fp, r3
 800ad00:	4643      	mov	r3, r8
 800ad02:	eb1a 0303 	adds.w	r3, sl, r3
 800ad06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	eb4b 0303 	adc.w	r3, fp, r3
 800ad10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ad14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ad24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	18db      	adds	r3, r3, r3
 800ad2c:	643b      	str	r3, [r7, #64]	; 0x40
 800ad2e:	4613      	mov	r3, r2
 800ad30:	eb42 0303 	adc.w	r3, r2, r3
 800ad34:	647b      	str	r3, [r7, #68]	; 0x44
 800ad36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ad3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ad3e:	f7f5 ff8b 	bl	8000c58 <__aeabi_uldivmod>
 800ad42:	4602      	mov	r2, r0
 800ad44:	460b      	mov	r3, r1
 800ad46:	4611      	mov	r1, r2
 800ad48:	4b3b      	ldr	r3, [pc, #236]	; (800ae38 <UART_SetConfig+0x2d4>)
 800ad4a:	fba3 2301 	umull	r2, r3, r3, r1
 800ad4e:	095b      	lsrs	r3, r3, #5
 800ad50:	2264      	movs	r2, #100	; 0x64
 800ad52:	fb02 f303 	mul.w	r3, r2, r3
 800ad56:	1acb      	subs	r3, r1, r3
 800ad58:	00db      	lsls	r3, r3, #3
 800ad5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ad5e:	4b36      	ldr	r3, [pc, #216]	; (800ae38 <UART_SetConfig+0x2d4>)
 800ad60:	fba3 2302 	umull	r2, r3, r3, r2
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	005b      	lsls	r3, r3, #1
 800ad68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad6c:	441c      	add	r4, r3
 800ad6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ad78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ad7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	1891      	adds	r1, r2, r2
 800ad86:	63b9      	str	r1, [r7, #56]	; 0x38
 800ad88:	415b      	adcs	r3, r3
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad90:	4641      	mov	r1, r8
 800ad92:	1851      	adds	r1, r2, r1
 800ad94:	6339      	str	r1, [r7, #48]	; 0x30
 800ad96:	4649      	mov	r1, r9
 800ad98:	414b      	adcs	r3, r1
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9c:	f04f 0200 	mov.w	r2, #0
 800ada0:	f04f 0300 	mov.w	r3, #0
 800ada4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ada8:	4659      	mov	r1, fp
 800adaa:	00cb      	lsls	r3, r1, #3
 800adac:	4651      	mov	r1, sl
 800adae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800adb2:	4651      	mov	r1, sl
 800adb4:	00ca      	lsls	r2, r1, #3
 800adb6:	4610      	mov	r0, r2
 800adb8:	4619      	mov	r1, r3
 800adba:	4603      	mov	r3, r0
 800adbc:	4642      	mov	r2, r8
 800adbe:	189b      	adds	r3, r3, r2
 800adc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800adc4:	464b      	mov	r3, r9
 800adc6:	460a      	mov	r2, r1
 800adc8:	eb42 0303 	adc.w	r3, r2, r3
 800adcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800add0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800addc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ade0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ade4:	460b      	mov	r3, r1
 800ade6:	18db      	adds	r3, r3, r3
 800ade8:	62bb      	str	r3, [r7, #40]	; 0x28
 800adea:	4613      	mov	r3, r2
 800adec:	eb42 0303 	adc.w	r3, r2, r3
 800adf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800adf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800adfa:	f7f5 ff2d 	bl	8000c58 <__aeabi_uldivmod>
 800adfe:	4602      	mov	r2, r0
 800ae00:	460b      	mov	r3, r1
 800ae02:	4b0d      	ldr	r3, [pc, #52]	; (800ae38 <UART_SetConfig+0x2d4>)
 800ae04:	fba3 1302 	umull	r1, r3, r3, r2
 800ae08:	095b      	lsrs	r3, r3, #5
 800ae0a:	2164      	movs	r1, #100	; 0x64
 800ae0c:	fb01 f303 	mul.w	r3, r1, r3
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	00db      	lsls	r3, r3, #3
 800ae14:	3332      	adds	r3, #50	; 0x32
 800ae16:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <UART_SetConfig+0x2d4>)
 800ae18:	fba2 2303 	umull	r2, r3, r2, r3
 800ae1c:	095b      	lsrs	r3, r3, #5
 800ae1e:	f003 0207 	and.w	r2, r3, #7
 800ae22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4422      	add	r2, r4
 800ae2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ae2c:	e105      	b.n	800b03a <UART_SetConfig+0x4d6>
 800ae2e:	bf00      	nop
 800ae30:	40011000 	.word	0x40011000
 800ae34:	40011400 	.word	0x40011400
 800ae38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ae40:	2200      	movs	r2, #0
 800ae42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ae4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ae4e:	4642      	mov	r2, r8
 800ae50:	464b      	mov	r3, r9
 800ae52:	1891      	adds	r1, r2, r2
 800ae54:	6239      	str	r1, [r7, #32]
 800ae56:	415b      	adcs	r3, r3
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ae5e:	4641      	mov	r1, r8
 800ae60:	1854      	adds	r4, r2, r1
 800ae62:	4649      	mov	r1, r9
 800ae64:	eb43 0501 	adc.w	r5, r3, r1
 800ae68:	f04f 0200 	mov.w	r2, #0
 800ae6c:	f04f 0300 	mov.w	r3, #0
 800ae70:	00eb      	lsls	r3, r5, #3
 800ae72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae76:	00e2      	lsls	r2, r4, #3
 800ae78:	4614      	mov	r4, r2
 800ae7a:	461d      	mov	r5, r3
 800ae7c:	4643      	mov	r3, r8
 800ae7e:	18e3      	adds	r3, r4, r3
 800ae80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ae84:	464b      	mov	r3, r9
 800ae86:	eb45 0303 	adc.w	r3, r5, r3
 800ae8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ae8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ae9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ae9e:	f04f 0200 	mov.w	r2, #0
 800aea2:	f04f 0300 	mov.w	r3, #0
 800aea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aeaa:	4629      	mov	r1, r5
 800aeac:	008b      	lsls	r3, r1, #2
 800aeae:	4621      	mov	r1, r4
 800aeb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aeb4:	4621      	mov	r1, r4
 800aeb6:	008a      	lsls	r2, r1, #2
 800aeb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aebc:	f7f5 fecc 	bl	8000c58 <__aeabi_uldivmod>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	4b60      	ldr	r3, [pc, #384]	; (800b048 <UART_SetConfig+0x4e4>)
 800aec6:	fba3 2302 	umull	r2, r3, r3, r2
 800aeca:	095b      	lsrs	r3, r3, #5
 800aecc:	011c      	lsls	r4, r3, #4
 800aece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aed8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aedc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aee0:	4642      	mov	r2, r8
 800aee2:	464b      	mov	r3, r9
 800aee4:	1891      	adds	r1, r2, r2
 800aee6:	61b9      	str	r1, [r7, #24]
 800aee8:	415b      	adcs	r3, r3
 800aeea:	61fb      	str	r3, [r7, #28]
 800aeec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aef0:	4641      	mov	r1, r8
 800aef2:	1851      	adds	r1, r2, r1
 800aef4:	6139      	str	r1, [r7, #16]
 800aef6:	4649      	mov	r1, r9
 800aef8:	414b      	adcs	r3, r1
 800aefa:	617b      	str	r3, [r7, #20]
 800aefc:	f04f 0200 	mov.w	r2, #0
 800af00:	f04f 0300 	mov.w	r3, #0
 800af04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800af08:	4659      	mov	r1, fp
 800af0a:	00cb      	lsls	r3, r1, #3
 800af0c:	4651      	mov	r1, sl
 800af0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800af12:	4651      	mov	r1, sl
 800af14:	00ca      	lsls	r2, r1, #3
 800af16:	4610      	mov	r0, r2
 800af18:	4619      	mov	r1, r3
 800af1a:	4603      	mov	r3, r0
 800af1c:	4642      	mov	r2, r8
 800af1e:	189b      	adds	r3, r3, r2
 800af20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800af24:	464b      	mov	r3, r9
 800af26:	460a      	mov	r2, r1
 800af28:	eb42 0303 	adc.w	r3, r2, r3
 800af2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	2200      	movs	r2, #0
 800af38:	67bb      	str	r3, [r7, #120]	; 0x78
 800af3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800af3c:	f04f 0200 	mov.w	r2, #0
 800af40:	f04f 0300 	mov.w	r3, #0
 800af44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800af48:	4649      	mov	r1, r9
 800af4a:	008b      	lsls	r3, r1, #2
 800af4c:	4641      	mov	r1, r8
 800af4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800af52:	4641      	mov	r1, r8
 800af54:	008a      	lsls	r2, r1, #2
 800af56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800af5a:	f7f5 fe7d 	bl	8000c58 <__aeabi_uldivmod>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4b39      	ldr	r3, [pc, #228]	; (800b048 <UART_SetConfig+0x4e4>)
 800af64:	fba3 1302 	umull	r1, r3, r3, r2
 800af68:	095b      	lsrs	r3, r3, #5
 800af6a:	2164      	movs	r1, #100	; 0x64
 800af6c:	fb01 f303 	mul.w	r3, r1, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	3332      	adds	r3, #50	; 0x32
 800af76:	4a34      	ldr	r2, [pc, #208]	; (800b048 <UART_SetConfig+0x4e4>)
 800af78:	fba2 2303 	umull	r2, r3, r2, r3
 800af7c:	095b      	lsrs	r3, r3, #5
 800af7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af82:	441c      	add	r4, r3
 800af84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800af88:	2200      	movs	r2, #0
 800af8a:	673b      	str	r3, [r7, #112]	; 0x70
 800af8c:	677a      	str	r2, [r7, #116]	; 0x74
 800af8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800af92:	4642      	mov	r2, r8
 800af94:	464b      	mov	r3, r9
 800af96:	1891      	adds	r1, r2, r2
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	415b      	adcs	r3, r3
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afa2:	4641      	mov	r1, r8
 800afa4:	1851      	adds	r1, r2, r1
 800afa6:	6039      	str	r1, [r7, #0]
 800afa8:	4649      	mov	r1, r9
 800afaa:	414b      	adcs	r3, r1
 800afac:	607b      	str	r3, [r7, #4]
 800afae:	f04f 0200 	mov.w	r2, #0
 800afb2:	f04f 0300 	mov.w	r3, #0
 800afb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800afba:	4659      	mov	r1, fp
 800afbc:	00cb      	lsls	r3, r1, #3
 800afbe:	4651      	mov	r1, sl
 800afc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800afc4:	4651      	mov	r1, sl
 800afc6:	00ca      	lsls	r2, r1, #3
 800afc8:	4610      	mov	r0, r2
 800afca:	4619      	mov	r1, r3
 800afcc:	4603      	mov	r3, r0
 800afce:	4642      	mov	r2, r8
 800afd0:	189b      	adds	r3, r3, r2
 800afd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800afd4:	464b      	mov	r3, r9
 800afd6:	460a      	mov	r2, r1
 800afd8:	eb42 0303 	adc.w	r3, r2, r3
 800afdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	663b      	str	r3, [r7, #96]	; 0x60
 800afe8:	667a      	str	r2, [r7, #100]	; 0x64
 800afea:	f04f 0200 	mov.w	r2, #0
 800afee:	f04f 0300 	mov.w	r3, #0
 800aff2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aff6:	4649      	mov	r1, r9
 800aff8:	008b      	lsls	r3, r1, #2
 800affa:	4641      	mov	r1, r8
 800affc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b000:	4641      	mov	r1, r8
 800b002:	008a      	lsls	r2, r1, #2
 800b004:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b008:	f7f5 fe26 	bl	8000c58 <__aeabi_uldivmod>
 800b00c:	4602      	mov	r2, r0
 800b00e:	460b      	mov	r3, r1
 800b010:	4b0d      	ldr	r3, [pc, #52]	; (800b048 <UART_SetConfig+0x4e4>)
 800b012:	fba3 1302 	umull	r1, r3, r3, r2
 800b016:	095b      	lsrs	r3, r3, #5
 800b018:	2164      	movs	r1, #100	; 0x64
 800b01a:	fb01 f303 	mul.w	r3, r1, r3
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	3332      	adds	r3, #50	; 0x32
 800b024:	4a08      	ldr	r2, [pc, #32]	; (800b048 <UART_SetConfig+0x4e4>)
 800b026:	fba2 2303 	umull	r2, r3, r2, r3
 800b02a:	095b      	lsrs	r3, r3, #5
 800b02c:	f003 020f 	and.w	r2, r3, #15
 800b030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4422      	add	r2, r4
 800b038:	609a      	str	r2, [r3, #8]
}
 800b03a:	bf00      	nop
 800b03c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b040:	46bd      	mov	sp, r7
 800b042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b046:	bf00      	nop
 800b048:	51eb851f 	.word	0x51eb851f

0800b04c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b04c:	b084      	sub	sp, #16
 800b04e:	b480      	push	{r7}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	f107 001c 	add.w	r0, r7, #28
 800b05a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b062:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b064:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b066:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b06a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b06e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b072:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b076:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	b004      	add	sp, #16
 800b0a0:	4770      	bx	lr

0800b0a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b083      	sub	sp, #12
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2203      	movs	r2, #3
 800b0ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f003 0303 	and.w	r3, r3, #3
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	370c      	adds	r7, #12
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr

0800b116 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b116:	b480      	push	{r7}
 800b118:	b085      	sub	sp, #20
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
 800b11e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b134:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b13a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b140:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4313      	orrs	r3, r2
 800b146:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b150:	f023 030f 	bic.w	r3, r3, #15
 800b154:	68fa      	ldr	r2, [r7, #12]
 800b156:	431a      	orrs	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr

0800b16a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b16a:	b480      	push	{r7}
 800b16c:	b083      	sub	sp, #12
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	b2db      	uxtb	r3, r3
}
 800b178:	4618      	mov	r0, r3
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3314      	adds	r3, #20
 800b192:	461a      	mov	r2, r3
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	4413      	add	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
}  
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3714      	adds	r7, #20
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a8:	4770      	bx	lr

0800b1aa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b085      	sub	sp, #20
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	685a      	ldr	r2, [r3, #4]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1d0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b1d6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b1dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0

}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b088      	sub	sp, #32
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b210:	2310      	movs	r3, #16
 800b212:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b214:	2340      	movs	r3, #64	; 0x40
 800b216:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b218:	2300      	movs	r3, #0
 800b21a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b220:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b222:	f107 0308 	add.w	r3, r7, #8
 800b226:	4619      	mov	r1, r3
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7ff ff74 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b232:	2110      	movs	r1, #16
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f9d7 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b23a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b23c:	69fb      	ldr	r3, [r7, #28]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3720      	adds	r7, #32
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b088      	sub	sp, #32
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b254:	2311      	movs	r3, #17
 800b256:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b258:	2340      	movs	r3, #64	; 0x40
 800b25a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b25c:	2300      	movs	r3, #0
 800b25e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b264:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b266:	f107 0308 	add.w	r3, r7, #8
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ff52 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b272:	f241 3288 	movw	r2, #5000	; 0x1388
 800b276:	2111      	movs	r1, #17
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f9b5 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b27e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b280:	69fb      	ldr	r3, [r7, #28]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3720      	adds	r7, #32
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b088      	sub	sp, #32
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b298:	2312      	movs	r3, #18
 800b29a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b29c:	2340      	movs	r3, #64	; 0x40
 800b29e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2aa:	f107 0308 	add.w	r3, r7, #8
 800b2ae:	4619      	mov	r1, r3
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff ff30 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b2b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ba:	2112      	movs	r1, #18
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 f993 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b2c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3720      	adds	r7, #32
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b088      	sub	sp, #32
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b2dc:	2318      	movs	r3, #24
 800b2de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2e0:	2340      	movs	r3, #64	; 0x40
 800b2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2ee:	f107 0308 	add.w	r3, r7, #8
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7ff ff0e 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800b2fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2fe:	2118      	movs	r1, #24
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f971 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b308:	69fb      	ldr	r3, [r7, #28]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3720      	adds	r7, #32
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b088      	sub	sp, #32
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b320:	2319      	movs	r3, #25
 800b322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b324:	2340      	movs	r3, #64	; 0x40
 800b326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b32c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b330:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b332:	f107 0308 	add.w	r3, r7, #8
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff feec 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800b33e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b342:	2119      	movs	r1, #25
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f94f 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b34a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b34c:	69fb      	ldr	r3, [r7, #28]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3720      	adds	r7, #32
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b360:	2300      	movs	r3, #0
 800b362:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b364:	230c      	movs	r3, #12
 800b366:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b368:	2340      	movs	r3, #64	; 0x40
 800b36a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b374:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b376:	f107 0308 	add.w	r3, r7, #8
 800b37a:	4619      	mov	r1, r3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f7ff feca 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800b382:	4a05      	ldr	r2, [pc, #20]	; (800b398 <SDMMC_CmdStopTransfer+0x40>)
 800b384:	210c      	movs	r1, #12
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f92e 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b38e:	69fb      	ldr	r3, [r7, #28]
}
 800b390:	4618      	mov	r0, r3
 800b392:	3720      	adds	r7, #32
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	05f5e100 	.word	0x05f5e100

0800b39c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b08a      	sub	sp, #40	; 0x28
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b3ac:	2307      	movs	r3, #7
 800b3ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3b0:	2340      	movs	r3, #64	; 0x40
 800b3b2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3bc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3be:	f107 0310 	add.w	r3, r7, #16
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff fea6 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3ce:	2107      	movs	r1, #7
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f909 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b3d6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3728      	adds	r7, #40	; 0x28
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b088      	sub	sp, #32
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	4619      	mov	r1, r3
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff fe85 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 fb23 	bl	800ba58 <SDMMC_GetCmdError>
 800b412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b414:	69fb      	ldr	r3, [r7, #28]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}

0800b41e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b088      	sub	sp, #32
 800b422:	af00      	add	r7, sp, #0
 800b424:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b426:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b42a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b42c:	2308      	movs	r3, #8
 800b42e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b430:	2340      	movs	r3, #64	; 0x40
 800b432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b434:	2300      	movs	r3, #0
 800b436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b43c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b43e:	f107 0308 	add.w	r3, r7, #8
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff fe66 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fab6 	bl	800b9bc <SDMMC_GetCmdResp7>
 800b450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b452:	69fb      	ldr	r3, [r7, #28]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3720      	adds	r7, #32
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b46a:	2337      	movs	r3, #55	; 0x37
 800b46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b46e:	2340      	movs	r3, #64	; 0x40
 800b470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b47a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff fe47 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b488:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48c:	2137      	movs	r1, #55	; 0x37
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 f8aa 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b496:	69fb      	ldr	r3, [r7, #28]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b4b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b4b6:	2329      	movs	r3, #41	; 0x29
 800b4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b4ba:	2340      	movs	r3, #64	; 0x40
 800b4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b4c8:	f107 0308 	add.w	r3, r7, #8
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff fe21 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f9bd 	bl	800b854 <SDMMC_GetCmdResp3>
 800b4da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3720      	adds	r7, #32
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b088      	sub	sp, #32
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b4f6:	23c0      	movs	r3, #192	; 0xc0
 800b4f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b502:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b504:	f107 0308 	add.w	r3, r7, #8
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff fe03 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f957 	bl	800b7c4 <SDMMC_GetCmdResp2>
 800b516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b518:	69fb      	ldr	r3, [r7, #28]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b088      	sub	sp, #32
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b530:	2309      	movs	r3, #9
 800b532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b534:	23c0      	movs	r3, #192	; 0xc0
 800b536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b542:	f107 0308 	add.w	r3, r7, #8
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff fde4 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f938 	bl	800b7c4 <SDMMC_GetCmdResp2>
 800b554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b556:	69fb      	ldr	r3, [r7, #28]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3720      	adds	r7, #32
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b56e:	2303      	movs	r3, #3
 800b570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b572:	2340      	movs	r3, #64	; 0x40
 800b574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b576:	2300      	movs	r3, #0
 800b578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b57e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b580:	f107 0308 	add.w	r3, r7, #8
 800b584:	4619      	mov	r1, r3
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff fdc5 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	2103      	movs	r1, #3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f99d 	bl	800b8d0 <SDMMC_GetCmdResp6>
 800b596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b598:	69fb      	ldr	r3, [r7, #28]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5b0:	230d      	movs	r3, #13
 800b5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b5b4:	2340      	movs	r3, #64	; 0x40
 800b5b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b5bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b5c2:	f107 0308 	add.w	r3, r7, #8
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f7ff fda4 	bl	800b116 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b5ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d2:	210d      	movs	r1, #13
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f807 	bl	800b5e8 <SDMMC_GetCmdResp1>
 800b5da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5dc:	69fb      	ldr	r3, [r7, #28]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3720      	adds	r7, #32
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
	...

0800b5e8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b5f6:	4b70      	ldr	r3, [pc, #448]	; (800b7b8 <SDMMC_GetCmdResp1+0x1d0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a70      	ldr	r2, [pc, #448]	; (800b7bc <SDMMC_GetCmdResp1+0x1d4>)
 800b5fc:	fba2 2303 	umull	r2, r3, r2, r3
 800b600:	0a5a      	lsrs	r2, r3, #9
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	fb02 f303 	mul.w	r3, r2, r3
 800b608:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	1e5a      	subs	r2, r3, #1
 800b60e:	61fa      	str	r2, [r7, #28]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d102      	bne.n	800b61a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b618:	e0c9      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b61e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b620:	69bb      	ldr	r3, [r7, #24]
 800b622:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b626:	2b00      	cmp	r3, #0
 800b628:	d0ef      	beq.n	800b60a <SDMMC_GetCmdResp1+0x22>
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1ea      	bne.n	800b60a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2204      	movs	r2, #4
 800b644:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b646:	2304      	movs	r3, #4
 800b648:	e0b1      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d004      	beq.n	800b660 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2201      	movs	r2, #1
 800b65a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b65c:	2301      	movs	r3, #1
 800b65e:	e0a6      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	22c5      	movs	r2, #197	; 0xc5
 800b664:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7ff fd7f 	bl	800b16a <SDIO_GetCommandResponse>
 800b66c:	4603      	mov	r3, r0
 800b66e:	461a      	mov	r2, r3
 800b670:	7afb      	ldrb	r3, [r7, #11]
 800b672:	4293      	cmp	r3, r2
 800b674:	d001      	beq.n	800b67a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b676:	2301      	movs	r3, #1
 800b678:	e099      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b67a:	2100      	movs	r1, #0
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f7ff fd81 	bl	800b184 <SDIO_GetResponse>
 800b682:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	4b4e      	ldr	r3, [pc, #312]	; (800b7c0 <SDMMC_GetCmdResp1+0x1d8>)
 800b688:	4013      	ands	r3, r2
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d101      	bne.n	800b692 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b68e:	2300      	movs	r3, #0
 800b690:	e08d      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2b00      	cmp	r3, #0
 800b696:	da02      	bge.n	800b69e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b698:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b69c:	e087      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b6a8:	2340      	movs	r3, #64	; 0x40
 800b6aa:	e080      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b6b6:	2380      	movs	r3, #128	; 0x80
 800b6b8:	e079      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d002      	beq.n	800b6ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b6c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6c8:	e071      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d002      	beq.n	800b6da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b6d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6d8:	e069      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b6e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6e8:	e061      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d002      	beq.n	800b6fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b6f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6f8:	e059      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b708:	e051      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b718:	e049      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b724:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b728:	e041      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b738:	e039      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b748:	e031      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b750:	2b00      	cmp	r3, #0
 800b752:	d002      	beq.n	800b75a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b754:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b758:	e029      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b768:	e021      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b774:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b778:	e019      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d002      	beq.n	800b78a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b784:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b788:	e011      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b794:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b798:	e009      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	f003 0308 	and.w	r3, r3, #8
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d002      	beq.n	800b7aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b7a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b7a8:	e001      	b.n	800b7ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b7aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3720      	adds	r7, #32
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20000018 	.word	0x20000018
 800b7bc:	10624dd3 	.word	0x10624dd3
 800b7c0:	fdffe008 	.word	0xfdffe008

0800b7c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7cc:	4b1f      	ldr	r3, [pc, #124]	; (800b84c <SDMMC_GetCmdResp2+0x88>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a1f      	ldr	r2, [pc, #124]	; (800b850 <SDMMC_GetCmdResp2+0x8c>)
 800b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d6:	0a5b      	lsrs	r3, r3, #9
 800b7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7dc:	fb02 f303 	mul.w	r3, r2, r3
 800b7e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	1e5a      	subs	r2, r3, #1
 800b7e6:	60fa      	str	r2, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b7ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7f0:	e026      	b.n	800b840 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0ef      	beq.n	800b7e2 <SDMMC_GetCmdResp2+0x1e>
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1ea      	bne.n	800b7e2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b810:	f003 0304 	and.w	r3, r3, #4
 800b814:	2b00      	cmp	r3, #0
 800b816:	d004      	beq.n	800b822 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2204      	movs	r2, #4
 800b81c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b81e:	2304      	movs	r3, #4
 800b820:	e00e      	b.n	800b840 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d004      	beq.n	800b838 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b834:	2301      	movs	r3, #1
 800b836:	e003      	b.n	800b840 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	22c5      	movs	r2, #197	; 0xc5
 800b83c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	20000018 	.word	0x20000018
 800b850:	10624dd3 	.word	0x10624dd3

0800b854 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b854:	b480      	push	{r7}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b85c:	4b1a      	ldr	r3, [pc, #104]	; (800b8c8 <SDMMC_GetCmdResp3+0x74>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a1a      	ldr	r2, [pc, #104]	; (800b8cc <SDMMC_GetCmdResp3+0x78>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	0a5b      	lsrs	r3, r3, #9
 800b868:	f241 3288 	movw	r2, #5000	; 0x1388
 800b86c:	fb02 f303 	mul.w	r3, r2, r3
 800b870:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	1e5a      	subs	r2, r3, #1
 800b876:	60fa      	str	r2, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d102      	bne.n	800b882 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b87c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b880:	e01b      	b.n	800b8ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b886:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d0ef      	beq.n	800b872 <SDMMC_GetCmdResp3+0x1e>
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1ea      	bne.n	800b872 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d004      	beq.n	800b8b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2204      	movs	r2, #4
 800b8ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8ae:	2304      	movs	r3, #4
 800b8b0:	e003      	b.n	800b8ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	22c5      	movs	r2, #197	; 0xc5
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	20000018 	.word	0x20000018
 800b8cc:	10624dd3 	.word	0x10624dd3

0800b8d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b088      	sub	sp, #32
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	460b      	mov	r3, r1
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8de:	4b35      	ldr	r3, [pc, #212]	; (800b9b4 <SDMMC_GetCmdResp6+0xe4>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a35      	ldr	r2, [pc, #212]	; (800b9b8 <SDMMC_GetCmdResp6+0xe8>)
 800b8e4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e8:	0a5b      	lsrs	r3, r3, #9
 800b8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ee:	fb02 f303 	mul.w	r3, r2, r3
 800b8f2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	1e5a      	subs	r2, r3, #1
 800b8f8:	61fa      	str	r2, [r7, #28]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b902:	e052      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b908:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b910:	2b00      	cmp	r3, #0
 800b912:	d0ef      	beq.n	800b8f4 <SDMMC_GetCmdResp6+0x24>
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1ea      	bne.n	800b8f4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b922:	f003 0304 	and.w	r3, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2204      	movs	r2, #4
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b930:	2304      	movs	r3, #4
 800b932:	e03a      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2201      	movs	r2, #1
 800b944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b946:	2301      	movs	r3, #1
 800b948:	e02f      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f7ff fc0d 	bl	800b16a <SDIO_GetCommandResponse>
 800b950:	4603      	mov	r3, r0
 800b952:	461a      	mov	r2, r3
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	4293      	cmp	r3, r2
 800b958:	d001      	beq.n	800b95e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e025      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	22c5      	movs	r2, #197	; 0xc5
 800b962:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b964:	2100      	movs	r1, #0
 800b966:	68f8      	ldr	r0, [r7, #12]
 800b968:	f7ff fc0c 	bl	800b184 <SDIO_GetResponse>
 800b96c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d106      	bne.n	800b986 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	0c1b      	lsrs	r3, r3, #16
 800b97c:	b29a      	uxth	r2, r3
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b982:	2300      	movs	r3, #0
 800b984:	e011      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b994:	e009      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d002      	beq.n	800b9a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b9a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a4:	e001      	b.n	800b9aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3720      	adds	r7, #32
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000018 	.word	0x20000018
 800b9b8:	10624dd3 	.word	0x10624dd3

0800b9bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9c4:	4b22      	ldr	r3, [pc, #136]	; (800ba50 <SDMMC_GetCmdResp7+0x94>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a22      	ldr	r2, [pc, #136]	; (800ba54 <SDMMC_GetCmdResp7+0x98>)
 800b9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ce:	0a5b      	lsrs	r3, r3, #9
 800b9d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9d4:	fb02 f303 	mul.w	r3, r2, r3
 800b9d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	1e5a      	subs	r2, r3, #1
 800b9de:	60fa      	str	r2, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9e8:	e02c      	b.n	800ba44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d0ef      	beq.n	800b9da <SDMMC_GetCmdResp7+0x1e>
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1ea      	bne.n	800b9da <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d004      	beq.n	800ba1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2204      	movs	r2, #4
 800ba14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba16:	2304      	movs	r3, #4
 800ba18:	e014      	b.n	800ba44 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba1e:	f003 0301 	and.w	r3, r3, #1
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d004      	beq.n	800ba30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e009      	b.n	800ba44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d002      	beq.n	800ba42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2240      	movs	r2, #64	; 0x40
 800ba40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ba42:	2300      	movs	r3, #0
  
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3714      	adds	r7, #20
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr
 800ba50:	20000018 	.word	0x20000018
 800ba54:	10624dd3 	.word	0x10624dd3

0800ba58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ba60:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <SDMMC_GetCmdError+0x50>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a11      	ldr	r2, [pc, #68]	; (800baac <SDMMC_GetCmdError+0x54>)
 800ba66:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6a:	0a5b      	lsrs	r3, r3, #9
 800ba6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba70:	fb02 f303 	mul.w	r3, r2, r3
 800ba74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	1e5a      	subs	r2, r3, #1
 800ba7a:	60fa      	str	r2, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba84:	e009      	b.n	800ba9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d0f1      	beq.n	800ba76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	22c5      	movs	r2, #197	; 0xc5
 800ba96:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ba98:	2300      	movs	r3, #0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3714      	adds	r7, #20
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	20000018 	.word	0x20000018
 800baac:	10624dd3 	.word	0x10624dd3

0800bab0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bab4:	4904      	ldr	r1, [pc, #16]	; (800bac8 <MX_FATFS_Init+0x18>)
 800bab6:	4805      	ldr	r0, [pc, #20]	; (800bacc <MX_FATFS_Init+0x1c>)
 800bab8:	f002 fde0 	bl	800e67c <FATFS_LinkDriver>
 800babc:	4603      	mov	r3, r0
 800babe:	461a      	mov	r2, r3
 800bac0:	4b03      	ldr	r3, [pc, #12]	; (800bad0 <MX_FATFS_Init+0x20>)
 800bac2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
	/* additional user code for init */
  /* USER CODE END Init */
}
 800bac4:	bf00      	nop
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	200005ec 	.word	0x200005ec
 800bacc:	08012f64 	.word	0x08012f64
 800bad0:	200005e8 	.word	0x200005e8

0800bad4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bad4:	b480      	push	{r7}
 800bad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	return 0;
 800bad8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bada:	4618      	mov	r0, r3
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800baea:	2300      	movs	r3, #0
 800baec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800baee:	f000 f86b 	bl	800bbc8 <BSP_SD_IsDetected>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d001      	beq.n	800bafc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	e005      	b.n	800bb08 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bafc:	4804      	ldr	r0, [pc, #16]	; (800bb10 <BSP_SD_Init+0x2c>)
 800bafe:	f7fc fb97 	bl	8008230 <HAL_SD_Init>
 800bb02:	4603      	mov	r3, r0
 800bb04:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bb06:	79fb      	ldrb	r3, [r7, #7]
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	200003dc 	.word	0x200003dc

0800bb14 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b088      	sub	sp, #32
 800bb18:	af02      	add	r7, sp, #8
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	68f9      	ldr	r1, [r7, #12]
 800bb30:	4806      	ldr	r0, [pc, #24]	; (800bb4c <BSP_SD_ReadBlocks+0x38>)
 800bb32:	f7fc fc2d 	bl	8008390 <HAL_SD_ReadBlocks>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3718      	adds	r7, #24
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	200003dc 	.word	0x200003dc

0800bb50 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b088      	sub	sp, #32
 800bb54:	af02      	add	r7, sp, #8
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
 800bb5c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	68ba      	ldr	r2, [r7, #8]
 800bb6a:	68f9      	ldr	r1, [r7, #12]
 800bb6c:	4806      	ldr	r0, [pc, #24]	; (800bb88 <BSP_SD_WriteBlocks+0x38>)
 800bb6e:	f7fc fded 	bl	800874c <HAL_SD_WriteBlocks>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	200003dc 	.word	0x200003dc

0800bb8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb90:	4805      	ldr	r0, [pc, #20]	; (800bba8 <BSP_SD_GetCardState+0x1c>)
 800bb92:	f7fd f931 	bl	8008df8 <HAL_SD_GetCardState>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b04      	cmp	r3, #4
 800bb9a:	bf14      	ite	ne
 800bb9c:	2301      	movne	r3, #1
 800bb9e:	2300      	moveq	r3, #0
 800bba0:	b2db      	uxtb	r3, r3
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	200003dc 	.word	0x200003dc

0800bbac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4803      	ldr	r0, [pc, #12]	; (800bbc4 <BSP_SD_GetCardInfo+0x18>)
 800bbb8:	f7fd f8f2 	bl	8008da0 <HAL_SD_GetCardInfo>
}
 800bbbc:	bf00      	nop
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	200003dc 	.word	0x200003dc

0800bbc8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bbd2:	f000 f80b 	bl	800bbec <BSP_PlatformIsDetected>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	b2db      	uxtb	r3, r3
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3708      	adds	r7, #8
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <BSP_PlatformIsDetected>:
 ******************************************************************************
 */
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bbf6:	2104      	movs	r1, #4
 800bbf8:	4806      	ldr	r0, [pc, #24]	; (800bc14 <BSP_PlatformIsDetected+0x28>)
 800bbfa:	f7fa f9d3 	bl	8005fa4 <HAL_GPIO_ReadPin>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d001      	beq.n	800bc08 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bc04:	2300      	movs	r3, #0
 800bc06:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
	/* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bc08:	79fb      	ldrb	r3, [r7, #7]
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	40020400 	.word	0x40020400

0800bc18 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	4603      	mov	r3, r0
 800bc20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc22:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <SD_CheckStatus+0x38>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bc28:	f7ff ffb0 	bl	800bb8c <BSP_SD_GetCardState>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d107      	bne.n	800bc42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc32:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <SD_CheckStatus+0x38>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	f023 0301 	bic.w	r3, r3, #1
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	4b04      	ldr	r3, [pc, #16]	; (800bc50 <SD_CheckStatus+0x38>)
 800bc40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bc42:	4b03      	ldr	r3, [pc, #12]	; (800bc50 <SD_CheckStatus+0x38>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	b2db      	uxtb	r3, r3
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20000021 	.word	0x20000021

0800bc54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bc5e:	4b0b      	ldr	r3, [pc, #44]	; (800bc8c <SD_initialize+0x38>)
 800bc60:	2201      	movs	r2, #1
 800bc62:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bc64:	f7ff ff3e 	bl	800bae4 <BSP_SD_Init>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d107      	bne.n	800bc7e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f7ff ffd1 	bl	800bc18 <SD_CheckStatus>
 800bc76:	4603      	mov	r3, r0
 800bc78:	461a      	mov	r2, r3
 800bc7a:	4b04      	ldr	r3, [pc, #16]	; (800bc8c <SD_initialize+0x38>)
 800bc7c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bc7e:	4b03      	ldr	r3, [pc, #12]	; (800bc8c <SD_initialize+0x38>)
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	b2db      	uxtb	r3, r3
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20000021 	.word	0x20000021

0800bc90 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc9a:	79fb      	ldrb	r3, [r7, #7]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7ff ffbb 	bl	800bc18 <SD_CheckStatus>
 800bca2:	4603      	mov	r3, r0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b086      	sub	sp, #24
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60b9      	str	r1, [r7, #8]
 800bcb4:	607a      	str	r2, [r7, #4]
 800bcb6:	603b      	str	r3, [r7, #0]
 800bcb8:	4603      	mov	r3, r0
 800bcba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800bcc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	68b8      	ldr	r0, [r7, #8]
 800bcca:	f7ff ff23 	bl	800bb14 <BSP_SD_ReadBlocks>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d107      	bne.n	800bce4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800bcd4:	bf00      	nop
 800bcd6:	f7ff ff59 	bl	800bb8c <BSP_SD_GetCardState>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1fa      	bne.n	800bcd6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bce4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b086      	sub	sp, #24
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	603b      	str	r3, [r7, #0]
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800bd02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	68b8      	ldr	r0, [r7, #8]
 800bd0c:	f7ff ff20 	bl	800bb50 <BSP_SD_WriteBlocks>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d107      	bne.n	800bd26 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800bd16:	bf00      	nop
 800bd18:	f7ff ff38 	bl	800bb8c <BSP_SD_GetCardState>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1fa      	bne.n	800bd18 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800bd26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08c      	sub	sp, #48	; 0x30
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	603a      	str	r2, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bd46:	4b25      	ldr	r3, [pc, #148]	; (800bddc <SD_ioctl+0xac>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	f003 0301 	and.w	r3, r3, #1
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d001      	beq.n	800bd58 <SD_ioctl+0x28>
 800bd54:	2303      	movs	r3, #3
 800bd56:	e03c      	b.n	800bdd2 <SD_ioctl+0xa2>

  switch (cmd)
 800bd58:	79bb      	ldrb	r3, [r7, #6]
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d834      	bhi.n	800bdc8 <SD_ioctl+0x98>
 800bd5e:	a201      	add	r2, pc, #4	; (adr r2, 800bd64 <SD_ioctl+0x34>)
 800bd60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800bd7d 	.word	0x0800bd7d
 800bd6c:	0800bd95 	.word	0x0800bd95
 800bd70:	0800bdaf 	.word	0x0800bdaf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd7a:	e028      	b.n	800bdce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd7c:	f107 030c 	add.w	r3, r7, #12
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff ff13 	bl	800bbac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bd86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bd92:	e01c      	b.n	800bdce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bd94:	f107 030c 	add.w	r3, r7, #12
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff ff07 	bl	800bbac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdac:	e00f      	b.n	800bdce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdae:	f107 030c 	add.w	r3, r7, #12
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7ff fefa 	bl	800bbac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	0a5a      	lsrs	r2, r3, #9
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdc6:	e002      	b.n	800bdce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bdc8:	2304      	movs	r3, #4
 800bdca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bdce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3730      	adds	r7, #48	; 0x30
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	20000021 	.word	0x20000021

0800bde0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	4a08      	ldr	r2, [pc, #32]	; (800be10 <disk_status+0x30>)
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	79fa      	ldrb	r2, [r7, #7]
 800bdf8:	4905      	ldr	r1, [pc, #20]	; (800be10 <disk_status+0x30>)
 800bdfa:	440a      	add	r2, r1
 800bdfc:	7a12      	ldrb	r2, [r2, #8]
 800bdfe:	4610      	mov	r0, r2
 800be00:	4798      	blx	r3
 800be02:	4603      	mov	r3, r0
 800be04:	73fb      	strb	r3, [r7, #15]
  return stat;
 800be06:	7bfb      	ldrb	r3, [r7, #15]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20000618 	.word	0x20000618

0800be14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800be1e:	2300      	movs	r3, #0
 800be20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800be22:	79fb      	ldrb	r3, [r7, #7]
 800be24:	4a0d      	ldr	r2, [pc, #52]	; (800be5c <disk_initialize+0x48>)
 800be26:	5cd3      	ldrb	r3, [r2, r3]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d111      	bne.n	800be50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800be2c:	79fb      	ldrb	r3, [r7, #7]
 800be2e:	4a0b      	ldr	r2, [pc, #44]	; (800be5c <disk_initialize+0x48>)
 800be30:	2101      	movs	r1, #1
 800be32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	4a09      	ldr	r2, [pc, #36]	; (800be5c <disk_initialize+0x48>)
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	4413      	add	r3, r2
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	79fa      	ldrb	r2, [r7, #7]
 800be42:	4906      	ldr	r1, [pc, #24]	; (800be5c <disk_initialize+0x48>)
 800be44:	440a      	add	r2, r1
 800be46:	7a12      	ldrb	r2, [r2, #8]
 800be48:	4610      	mov	r0, r2
 800be4a:	4798      	blx	r3
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20000618 	.word	0x20000618

0800be60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	607a      	str	r2, [r7, #4]
 800be6a:	603b      	str	r3, [r7, #0]
 800be6c:	4603      	mov	r3, r0
 800be6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800be70:	7bfb      	ldrb	r3, [r7, #15]
 800be72:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <disk_read+0x3c>)
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	689c      	ldr	r4, [r3, #8]
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	4a07      	ldr	r2, [pc, #28]	; (800be9c <disk_read+0x3c>)
 800be80:	4413      	add	r3, r2
 800be82:	7a18      	ldrb	r0, [r3, #8]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	68b9      	ldr	r1, [r7, #8]
 800be8a:	47a0      	blx	r4
 800be8c:	4603      	mov	r3, r0
 800be8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800be90:	7dfb      	ldrb	r3, [r7, #23]
}
 800be92:	4618      	mov	r0, r3
 800be94:	371c      	adds	r7, #28
 800be96:	46bd      	mov	sp, r7
 800be98:	bd90      	pop	{r4, r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20000618 	.word	0x20000618

0800bea0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bea0:	b590      	push	{r4, r7, lr}
 800bea2:	b087      	sub	sp, #28
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60b9      	str	r1, [r7, #8]
 800bea8:	607a      	str	r2, [r7, #4]
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	4a0a      	ldr	r2, [pc, #40]	; (800bedc <disk_write+0x3c>)
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	4413      	add	r3, r2
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	68dc      	ldr	r4, [r3, #12]
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	4a07      	ldr	r2, [pc, #28]	; (800bedc <disk_write+0x3c>)
 800bec0:	4413      	add	r3, r2
 800bec2:	7a18      	ldrb	r0, [r3, #8]
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68b9      	ldr	r1, [r7, #8]
 800beca:	47a0      	blx	r4
 800becc:	4603      	mov	r3, r0
 800bece:	75fb      	strb	r3, [r7, #23]
  return res;
 800bed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd90      	pop	{r4, r7, pc}
 800beda:	bf00      	nop
 800bedc:	20000618 	.word	0x20000618

0800bee0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	4603      	mov	r3, r0
 800bee8:	603a      	str	r2, [r7, #0]
 800beea:	71fb      	strb	r3, [r7, #7]
 800beec:	460b      	mov	r3, r1
 800beee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bef0:	79fb      	ldrb	r3, [r7, #7]
 800bef2:	4a09      	ldr	r2, [pc, #36]	; (800bf18 <disk_ioctl+0x38>)
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	79fa      	ldrb	r2, [r7, #7]
 800befe:	4906      	ldr	r1, [pc, #24]	; (800bf18 <disk_ioctl+0x38>)
 800bf00:	440a      	add	r2, r1
 800bf02:	7a10      	ldrb	r0, [r2, #8]
 800bf04:	79b9      	ldrb	r1, [r7, #6]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	4798      	blx	r3
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800bf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20000618 	.word	0x20000618

0800bf1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3301      	adds	r3, #1
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bf2c:	89fb      	ldrh	r3, [r7, #14]
 800bf2e:	021b      	lsls	r3, r3, #8
 800bf30:	b21a      	sxth	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	b21b      	sxth	r3, r3
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	b21b      	sxth	r3, r3
 800bf3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bf3e:	89fb      	ldrh	r3, [r7, #14]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3303      	adds	r3, #3
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	021b      	lsls	r3, r3, #8
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	3202      	adds	r2, #2
 800bf64:	7812      	ldrb	r2, [r2, #0]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	3201      	adds	r2, #1
 800bf72:	7812      	ldrb	r2, [r2, #0]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	021b      	lsls	r3, r3, #8
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	7812      	ldrb	r2, [r2, #0]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	60fb      	str	r3, [r7, #12]
	return rv;
 800bf84:	68fb      	ldr	r3, [r7, #12]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3714      	adds	r7, #20
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	1c5a      	adds	r2, r3, #1
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	887a      	ldrh	r2, [r7, #2]
 800bfa6:	b2d2      	uxtb	r2, r2
 800bfa8:	701a      	strb	r2, [r3, #0]
 800bfaa:	887b      	ldrh	r3, [r7, #2]
 800bfac:	0a1b      	lsrs	r3, r3, #8
 800bfae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	1c5a      	adds	r2, r3, #1
 800bfb4:	607a      	str	r2, [r7, #4]
 800bfb6:	887a      	ldrh	r2, [r7, #2]
 800bfb8:	b2d2      	uxtb	r2, r2
 800bfba:	701a      	strb	r2, [r3, #0]
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	b2d2      	uxtb	r2, r2
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	0a1b      	lsrs	r3, r3, #8
 800bfe2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	607a      	str	r2, [r7, #4]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	b2d2      	uxtb	r2, r2
 800bfee:	701a      	strb	r2, [r3, #0]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	0a1b      	lsrs	r3, r3, #8
 800bff4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	1c5a      	adds	r2, r3, #1
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	683a      	ldr	r2, [r7, #0]
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	0a1b      	lsrs	r3, r3, #8
 800c006:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	607a      	str	r2, [r7, #4]
 800c00e:	683a      	ldr	r2, [r7, #0]
 800c010:	b2d2      	uxtb	r2, r2
 800c012:	701a      	strb	r2, [r3, #0]
}
 800c014:	bf00      	nop
 800c016:	370c      	adds	r7, #12
 800c018:	46bd      	mov	sp, r7
 800c01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01e:	4770      	bx	lr

0800c020 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00d      	beq.n	800c056 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c03a:	693a      	ldr	r2, [r7, #16]
 800c03c:	1c53      	adds	r3, r2, #1
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	1c59      	adds	r1, r3, #1
 800c044:	6179      	str	r1, [r7, #20]
 800c046:	7812      	ldrb	r2, [r2, #0]
 800c048:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3b01      	subs	r3, #1
 800c04e:	607b      	str	r3, [r7, #4]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1f1      	bne.n	800c03a <mem_cpy+0x1a>
	}
}
 800c056:	bf00      	nop
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c062:	b480      	push	{r7}
 800c064:	b087      	sub	sp, #28
 800c066:	af00      	add	r7, sp, #0
 800c068:	60f8      	str	r0, [r7, #12]
 800c06a:	60b9      	str	r1, [r7, #8]
 800c06c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	1c5a      	adds	r2, r3, #1
 800c076:	617a      	str	r2, [r7, #20]
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3b01      	subs	r3, #1
 800c082:	607b      	str	r3, [r7, #4]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1f3      	bne.n	800c072 <mem_set+0x10>
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	371c      	adds	r7, #28
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr

0800c098 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c098:	b480      	push	{r7}
 800c09a:	b089      	sub	sp, #36	; 0x24
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	61fb      	str	r3, [r7, #28]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	61fa      	str	r2, [r7, #28]
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	61ba      	str	r2, [r7, #24]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	1acb      	subs	r3, r1, r3
 800c0c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	607b      	str	r3, [r7, #4]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d002      	beq.n	800c0d8 <mem_cmp+0x40>
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0eb      	beq.n	800c0b0 <mem_cmp+0x18>

	return r;
 800c0d8:	697b      	ldr	r3, [r7, #20]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3724      	adds	r7, #36	; 0x24
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c0e6:	b480      	push	{r7}
 800c0e8:	b083      	sub	sp, #12
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
 800c0ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c0f0:	e002      	b.n	800c0f8 <chk_chr+0x12>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	607b      	str	r3, [r7, #4]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <chk_chr+0x26>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	461a      	mov	r2, r3
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	4293      	cmp	r3, r2
 800c10a:	d1f2      	bne.n	800c0f2 <chk_chr+0xc>
	return *str;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	781b      	ldrb	r3, [r3, #0]
}
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c126:	2300      	movs	r3, #0
 800c128:	60bb      	str	r3, [r7, #8]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	60fb      	str	r3, [r7, #12]
 800c12e:	e029      	b.n	800c184 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c130:	4a27      	ldr	r2, [pc, #156]	; (800c1d0 <chk_lock+0xb4>)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	4413      	add	r3, r2
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d01d      	beq.n	800c17a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c13e:	4a24      	ldr	r2, [pc, #144]	; (800c1d0 <chk_lock+0xb4>)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	011b      	lsls	r3, r3, #4
 800c144:	4413      	add	r3, r2
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d116      	bne.n	800c17e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c150:	4a1f      	ldr	r2, [pc, #124]	; (800c1d0 <chk_lock+0xb4>)
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	011b      	lsls	r3, r3, #4
 800c156:	4413      	add	r3, r2
 800c158:	3304      	adds	r3, #4
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c160:	429a      	cmp	r2, r3
 800c162:	d10c      	bne.n	800c17e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c164:	4a1a      	ldr	r2, [pc, #104]	; (800c1d0 <chk_lock+0xb4>)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	011b      	lsls	r3, r3, #4
 800c16a:	4413      	add	r3, r2
 800c16c:	3308      	adds	r3, #8
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c174:	429a      	cmp	r2, r3
 800c176:	d102      	bne.n	800c17e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c178:	e007      	b.n	800c18a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c17a:	2301      	movs	r3, #1
 800c17c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3301      	adds	r3, #1
 800c182:	60fb      	str	r3, [r7, #12]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d9d2      	bls.n	800c130 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d109      	bne.n	800c1a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <chk_lock+0x80>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d101      	bne.n	800c1a0 <chk_lock+0x84>
 800c19c:	2300      	movs	r3, #0
 800c19e:	e010      	b.n	800c1c2 <chk_lock+0xa6>
 800c1a0:	2312      	movs	r3, #18
 800c1a2:	e00e      	b.n	800c1c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d108      	bne.n	800c1bc <chk_lock+0xa0>
 800c1aa:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <chk_lock+0xb4>)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	011b      	lsls	r3, r3, #4
 800c1b0:	4413      	add	r3, r2
 800c1b2:	330c      	adds	r3, #12
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ba:	d101      	bne.n	800c1c0 <chk_lock+0xa4>
 800c1bc:	2310      	movs	r3, #16
 800c1be:	e000      	b.n	800c1c2 <chk_lock+0xa6>
 800c1c0:	2300      	movs	r3, #0
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3714      	adds	r7, #20
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	200005f8 	.word	0x200005f8

0800c1d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	607b      	str	r3, [r7, #4]
 800c1de:	e002      	b.n	800c1e6 <enq_lock+0x12>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	607b      	str	r3, [r7, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d806      	bhi.n	800c1fa <enq_lock+0x26>
 800c1ec:	4a09      	ldr	r2, [pc, #36]	; (800c214 <enq_lock+0x40>)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	4413      	add	r3, r2
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d1f2      	bne.n	800c1e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b02      	cmp	r3, #2
 800c1fe:	bf14      	ite	ne
 800c200:	2301      	movne	r3, #1
 800c202:	2300      	moveq	r3, #0
 800c204:	b2db      	uxtb	r3, r3
}
 800c206:	4618      	mov	r0, r3
 800c208:	370c      	adds	r7, #12
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	200005f8 	.word	0x200005f8

0800c218 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c222:	2300      	movs	r3, #0
 800c224:	60fb      	str	r3, [r7, #12]
 800c226:	e01f      	b.n	800c268 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c228:	4a41      	ldr	r2, [pc, #260]	; (800c330 <inc_lock+0x118>)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	4413      	add	r3, r2
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d113      	bne.n	800c262 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c23a:	4a3d      	ldr	r2, [pc, #244]	; (800c330 <inc_lock+0x118>)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	011b      	lsls	r3, r3, #4
 800c240:	4413      	add	r3, r2
 800c242:	3304      	adds	r3, #4
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d109      	bne.n	800c262 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c24e:	4a38      	ldr	r2, [pc, #224]	; (800c330 <inc_lock+0x118>)
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	011b      	lsls	r3, r3, #4
 800c254:	4413      	add	r3, r2
 800c256:	3308      	adds	r3, #8
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c25e:	429a      	cmp	r2, r3
 800c260:	d006      	beq.n	800c270 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3301      	adds	r3, #1
 800c266:	60fb      	str	r3, [r7, #12]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d9dc      	bls.n	800c228 <inc_lock+0x10>
 800c26e:	e000      	b.n	800c272 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c270:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2b02      	cmp	r3, #2
 800c276:	d132      	bne.n	800c2de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c278:	2300      	movs	r3, #0
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	e002      	b.n	800c284 <inc_lock+0x6c>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	3301      	adds	r3, #1
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2b01      	cmp	r3, #1
 800c288:	d806      	bhi.n	800c298 <inc_lock+0x80>
 800c28a:	4a29      	ldr	r2, [pc, #164]	; (800c330 <inc_lock+0x118>)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	4413      	add	r3, r2
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1f2      	bne.n	800c27e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b02      	cmp	r3, #2
 800c29c:	d101      	bne.n	800c2a2 <inc_lock+0x8a>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	e040      	b.n	800c324 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	4922      	ldr	r1, [pc, #136]	; (800c330 <inc_lock+0x118>)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	440b      	add	r3, r1
 800c2ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	689a      	ldr	r2, [r3, #8]
 800c2b4:	491e      	ldr	r1, [pc, #120]	; (800c330 <inc_lock+0x118>)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	011b      	lsls	r3, r3, #4
 800c2ba:	440b      	add	r3, r1
 800c2bc:	3304      	adds	r3, #4
 800c2be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	695a      	ldr	r2, [r3, #20]
 800c2c4:	491a      	ldr	r1, [pc, #104]	; (800c330 <inc_lock+0x118>)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	011b      	lsls	r3, r3, #4
 800c2ca:	440b      	add	r3, r1
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c2d0:	4a17      	ldr	r2, [pc, #92]	; (800c330 <inc_lock+0x118>)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	011b      	lsls	r3, r3, #4
 800c2d6:	4413      	add	r3, r2
 800c2d8:	330c      	adds	r3, #12
 800c2da:	2200      	movs	r2, #0
 800c2dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d009      	beq.n	800c2f8 <inc_lock+0xe0>
 800c2e4:	4a12      	ldr	r2, [pc, #72]	; (800c330 <inc_lock+0x118>)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	011b      	lsls	r3, r3, #4
 800c2ea:	4413      	add	r3, r2
 800c2ec:	330c      	adds	r3, #12
 800c2ee:	881b      	ldrh	r3, [r3, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <inc_lock+0xe0>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	e015      	b.n	800c324 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d108      	bne.n	800c310 <inc_lock+0xf8>
 800c2fe:	4a0c      	ldr	r2, [pc, #48]	; (800c330 <inc_lock+0x118>)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	4413      	add	r3, r2
 800c306:	330c      	adds	r3, #12
 800c308:	881b      	ldrh	r3, [r3, #0]
 800c30a:	3301      	adds	r3, #1
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	e001      	b.n	800c314 <inc_lock+0xfc>
 800c310:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c314:	4906      	ldr	r1, [pc, #24]	; (800c330 <inc_lock+0x118>)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	011b      	lsls	r3, r3, #4
 800c31a:	440b      	add	r3, r1
 800c31c:	330c      	adds	r3, #12
 800c31e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	3301      	adds	r3, #1
}
 800c324:	4618      	mov	r0, r3
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	200005f8 	.word	0x200005f8

0800c334 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c33c:	2300      	movs	r3, #0
 800c33e:	60fb      	str	r3, [r7, #12]
 800c340:	e010      	b.n	800c364 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c342:	4a0d      	ldr	r2, [pc, #52]	; (800c378 <clear_lock+0x44>)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	011b      	lsls	r3, r3, #4
 800c348:	4413      	add	r3, r2
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d105      	bne.n	800c35e <clear_lock+0x2a>
 800c352:	4a09      	ldr	r2, [pc, #36]	; (800c378 <clear_lock+0x44>)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	011b      	lsls	r3, r3, #4
 800c358:	4413      	add	r3, r2
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d9eb      	bls.n	800c342 <clear_lock+0xe>
	}
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	200005f8 	.word	0x200005f8

0800c37c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b086      	sub	sp, #24
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	78db      	ldrb	r3, [r3, #3]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d034      	beq.n	800c3fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c394:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7858      	ldrb	r0, [r3, #1]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	697a      	ldr	r2, [r7, #20]
 800c3a4:	f7ff fd7c 	bl	800bea0 <disk_write>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d002      	beq.n	800c3b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	73fb      	strb	r3, [r7, #15]
 800c3b2:	e022      	b.n	800c3fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	1ad2      	subs	r2, r2, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d217      	bcs.n	800c3fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	789b      	ldrb	r3, [r3, #2]
 800c3ce:	613b      	str	r3, [r7, #16]
 800c3d0:	e010      	b.n	800c3f4 <sync_window+0x78>
					wsect += fs->fsize;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	69db      	ldr	r3, [r3, #28]
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	4413      	add	r3, r2
 800c3da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7858      	ldrb	r0, [r3, #1]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	f7ff fd59 	bl	800bea0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d8eb      	bhi.n	800c3d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3718      	adds	r7, #24
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c416:	683a      	ldr	r2, [r7, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d01b      	beq.n	800c454 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c41c:	6878      	ldr	r0, [r7, #4]
 800c41e:	f7ff ffad 	bl	800c37c <sync_window>
 800c422:	4603      	mov	r3, r0
 800c424:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c426:	7bfb      	ldrb	r3, [r7, #15]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d113      	bne.n	800c454 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	7858      	ldrb	r0, [r3, #1]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c436:	2301      	movs	r3, #1
 800c438:	683a      	ldr	r2, [r7, #0]
 800c43a:	f7ff fd11 	bl	800be60 <disk_read>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d004      	beq.n	800c44e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c448:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	683a      	ldr	r2, [r7, #0]
 800c452:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
	...

0800c460 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f7ff ff87 	bl	800c37c <sync_window>
 800c46e:	4603      	mov	r3, r0
 800c470:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c472:	7bfb      	ldrb	r3, [r7, #15]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d159      	bne.n	800c52c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b03      	cmp	r3, #3
 800c47e:	d149      	bne.n	800c514 <sync_fs+0xb4>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	791b      	ldrb	r3, [r3, #4]
 800c484:	2b01      	cmp	r3, #1
 800c486:	d145      	bne.n	800c514 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	899b      	ldrh	r3, [r3, #12]
 800c492:	461a      	mov	r2, r3
 800c494:	2100      	movs	r1, #0
 800c496:	f7ff fde4 	bl	800c062 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	3334      	adds	r3, #52	; 0x34
 800c49e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff fd73 	bl	800bf92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3334      	adds	r3, #52	; 0x34
 800c4b0:	4921      	ldr	r1, [pc, #132]	; (800c538 <sync_fs+0xd8>)
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff fd88 	bl	800bfc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	3334      	adds	r3, #52	; 0x34
 800c4bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4c0:	491e      	ldr	r1, [pc, #120]	; (800c53c <sync_fs+0xdc>)
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff fd80 	bl	800bfc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3334      	adds	r3, #52	; 0x34
 800c4cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	f7ff fd76 	bl	800bfc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3334      	adds	r3, #52	; 0x34
 800c4e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	691b      	ldr	r3, [r3, #16]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	f7ff fd6c 	bl	800bfc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a1b      	ldr	r3, [r3, #32]
 800c4f4:	1c5a      	adds	r2, r3, #1
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	7858      	ldrb	r0, [r3, #1]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c508:	2301      	movs	r3, #1
 800c50a:	f7ff fcc9 	bl	800bea0 <disk_write>
			fs->fsi_flag = 0;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	2200      	movs	r2, #0
 800c51a:	2100      	movs	r1, #0
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7ff fcdf 	bl	800bee0 <disk_ioctl>
 800c522:	4603      	mov	r3, r0
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <sync_fs+0xcc>
 800c528:	2301      	movs	r3, #1
 800c52a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	41615252 	.word	0x41615252
 800c53c:	61417272 	.word	0x61417272

0800c540 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	3b02      	subs	r3, #2
 800c54e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	699b      	ldr	r3, [r3, #24]
 800c554:	3b02      	subs	r3, #2
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d301      	bcc.n	800c560 <clust2sect+0x20>
 800c55c:	2300      	movs	r3, #0
 800c55e:	e008      	b.n	800c572 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	895b      	ldrh	r3, [r3, #10]
 800c564:	461a      	mov	r2, r3
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	fb03 f202 	mul.w	r2, r3, r2
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	4413      	add	r3, r2
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b086      	sub	sp, #24
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d904      	bls.n	800c59e <get_fat+0x20>
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	699b      	ldr	r3, [r3, #24]
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d302      	bcc.n	800c5a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c59e:	2301      	movs	r3, #1
 800c5a0:	617b      	str	r3, [r7, #20]
 800c5a2:	e0bb      	b.n	800c71c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	f000 8083 	beq.w	800c6ba <get_fat+0x13c>
 800c5b4:	2b03      	cmp	r3, #3
 800c5b6:	f300 80a7 	bgt.w	800c708 <get_fat+0x18a>
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d002      	beq.n	800c5c4 <get_fat+0x46>
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d056      	beq.n	800c670 <get_fat+0xf2>
 800c5c2:	e0a1      	b.n	800c708 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	085b      	lsrs	r3, r3, #1
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	899b      	ldrh	r3, [r3, #12]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5e2:	4413      	add	r3, r2
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	6938      	ldr	r0, [r7, #16]
 800c5e8:	f7ff ff0c 	bl	800c404 <move_window>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f040 808d 	bne.w	800c70e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	1c5a      	adds	r2, r3, #1
 800c5f8:	60fa      	str	r2, [r7, #12]
 800c5fa:	693a      	ldr	r2, [r7, #16]
 800c5fc:	8992      	ldrh	r2, [r2, #12]
 800c5fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800c602:	fb01 f202 	mul.w	r2, r1, r2
 800c606:	1a9b      	subs	r3, r3, r2
 800c608:	693a      	ldr	r2, [r7, #16]
 800c60a:	4413      	add	r3, r2
 800c60c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c610:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	899b      	ldrh	r3, [r3, #12]
 800c61a:	4619      	mov	r1, r3
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c622:	4413      	add	r3, r2
 800c624:	4619      	mov	r1, r3
 800c626:	6938      	ldr	r0, [r7, #16]
 800c628:	f7ff feec 	bl	800c404 <move_window>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d16f      	bne.n	800c712 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	899b      	ldrh	r3, [r3, #12]
 800c636:	461a      	mov	r2, r3
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c63e:	fb01 f202 	mul.w	r2, r1, r2
 800c642:	1a9b      	subs	r3, r3, r2
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	4413      	add	r3, r2
 800c648:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	461a      	mov	r2, r3
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	4313      	orrs	r3, r2
 800c654:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <get_fat+0xe8>
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	091b      	lsrs	r3, r3, #4
 800c664:	e002      	b.n	800c66c <get_fat+0xee>
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c66c:	617b      	str	r3, [r7, #20]
			break;
 800c66e:	e055      	b.n	800c71c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c670:	693b      	ldr	r3, [r7, #16]
 800c672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	899b      	ldrh	r3, [r3, #12]
 800c678:	085b      	lsrs	r3, r3, #1
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4619      	mov	r1, r3
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	fbb3 f3f1 	udiv	r3, r3, r1
 800c684:	4413      	add	r3, r2
 800c686:	4619      	mov	r1, r3
 800c688:	6938      	ldr	r0, [r7, #16]
 800c68a:	f7ff febb 	bl	800c404 <move_window>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d140      	bne.n	800c716 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	8992      	ldrh	r2, [r2, #12]
 800c6a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6a6:	fb00 f202 	mul.w	r2, r0, r2
 800c6aa:	1a9b      	subs	r3, r3, r2
 800c6ac:	440b      	add	r3, r1
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7ff fc34 	bl	800bf1c <ld_word>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	617b      	str	r3, [r7, #20]
			break;
 800c6b8:	e030      	b.n	800c71c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	899b      	ldrh	r3, [r3, #12]
 800c6c2:	089b      	lsrs	r3, r3, #2
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800c6ce:	4413      	add	r3, r2
 800c6d0:	4619      	mov	r1, r3
 800c6d2:	6938      	ldr	r0, [r7, #16]
 800c6d4:	f7ff fe96 	bl	800c404 <move_window>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d11d      	bne.n	800c71a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	8992      	ldrh	r2, [r2, #12]
 800c6ec:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6f0:	fb00 f202 	mul.w	r2, r0, r2
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	440b      	add	r3, r1
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff fc27 	bl	800bf4c <ld_dword>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c704:	617b      	str	r3, [r7, #20]
			break;
 800c706:	e009      	b.n	800c71c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c708:	2301      	movs	r3, #1
 800c70a:	617b      	str	r3, [r7, #20]
 800c70c:	e006      	b.n	800c71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c70e:	bf00      	nop
 800c710:	e004      	b.n	800c71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c712:	bf00      	nop
 800c714:	e002      	b.n	800c71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c716:	bf00      	nop
 800c718:	e000      	b.n	800c71c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c71a:	bf00      	nop
		}
	}

	return val;
 800c71c:	697b      	ldr	r3, [r7, #20]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c726:	b590      	push	{r4, r7, lr}
 800c728:	b089      	sub	sp, #36	; 0x24
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	60f8      	str	r0, [r7, #12]
 800c72e:	60b9      	str	r1, [r7, #8]
 800c730:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c732:	2302      	movs	r3, #2
 800c734:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	f240 8102 	bls.w	800c942 <put_fat+0x21c>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	699b      	ldr	r3, [r3, #24]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	429a      	cmp	r2, r3
 800c746:	f080 80fc 	bcs.w	800c942 <put_fat+0x21c>
		switch (fs->fs_type) {
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b03      	cmp	r3, #3
 800c750:	f000 80b6 	beq.w	800c8c0 <put_fat+0x19a>
 800c754:	2b03      	cmp	r3, #3
 800c756:	f300 80fd 	bgt.w	800c954 <put_fat+0x22e>
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d003      	beq.n	800c766 <put_fat+0x40>
 800c75e:	2b02      	cmp	r3, #2
 800c760:	f000 8083 	beq.w	800c86a <put_fat+0x144>
 800c764:	e0f6      	b.n	800c954 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	61bb      	str	r3, [r7, #24]
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	085b      	lsrs	r3, r3, #1
 800c76e:	69ba      	ldr	r2, [r7, #24]
 800c770:	4413      	add	r3, r2
 800c772:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	899b      	ldrh	r3, [r3, #12]
 800c77c:	4619      	mov	r1, r3
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	fbb3 f3f1 	udiv	r3, r3, r1
 800c784:	4413      	add	r3, r2
 800c786:	4619      	mov	r1, r3
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7ff fe3b 	bl	800c404 <move_window>
 800c78e:	4603      	mov	r3, r0
 800c790:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c792:	7ffb      	ldrb	r3, [r7, #31]
 800c794:	2b00      	cmp	r3, #0
 800c796:	f040 80d6 	bne.w	800c946 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c7a0:	69bb      	ldr	r3, [r7, #24]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	61ba      	str	r2, [r7, #24]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	8992      	ldrh	r2, [r2, #12]
 800c7aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7ae:	fb00 f202 	mul.w	r2, r0, r2
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	440b      	add	r3, r1
 800c7b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00d      	beq.n	800c7de <put_fat+0xb8>
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	b25b      	sxtb	r3, r3
 800c7c8:	f003 030f 	and.w	r3, r3, #15
 800c7cc:	b25a      	sxtb	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	011b      	lsls	r3, r3, #4
 800c7d4:	b25b      	sxtb	r3, r3
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	b25b      	sxtb	r3, r3
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	e001      	b.n	800c7e2 <put_fat+0xbc>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	899b      	ldrh	r3, [r3, #12]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7fc:	4413      	add	r3, r2
 800c7fe:	4619      	mov	r1, r3
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f7ff fdff 	bl	800c404 <move_window>
 800c806:	4603      	mov	r3, r0
 800c808:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c80a:	7ffb      	ldrb	r3, [r7, #31]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f040 809c 	bne.w	800c94a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	899b      	ldrh	r3, [r3, #12]
 800c81c:	461a      	mov	r2, r3
 800c81e:	69bb      	ldr	r3, [r7, #24]
 800c820:	fbb3 f0f2 	udiv	r0, r3, r2
 800c824:	fb00 f202 	mul.w	r2, r0, r2
 800c828:	1a9b      	subs	r3, r3, r2
 800c82a:	440b      	add	r3, r1
 800c82c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <put_fat+0x11a>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	091b      	lsrs	r3, r3, #4
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	e00e      	b.n	800c85e <put_fat+0x138>
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	b25b      	sxtb	r3, r3
 800c846:	f023 030f 	bic.w	r3, r3, #15
 800c84a:	b25a      	sxtb	r2, r3
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	0a1b      	lsrs	r3, r3, #8
 800c850:	b25b      	sxtb	r3, r3
 800c852:	f003 030f 	and.w	r3, r3, #15
 800c856:	b25b      	sxtb	r3, r3
 800c858:	4313      	orrs	r3, r2
 800c85a:	b25b      	sxtb	r3, r3
 800c85c:	b2db      	uxtb	r3, r3
 800c85e:	697a      	ldr	r2, [r7, #20]
 800c860:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2201      	movs	r2, #1
 800c866:	70da      	strb	r2, [r3, #3]
			break;
 800c868:	e074      	b.n	800c954 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	899b      	ldrh	r3, [r3, #12]
 800c872:	085b      	lsrs	r3, r3, #1
 800c874:	b29b      	uxth	r3, r3
 800c876:	4619      	mov	r1, r3
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	fbb3 f3f1 	udiv	r3, r3, r1
 800c87e:	4413      	add	r3, r2
 800c880:	4619      	mov	r1, r3
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff fdbe 	bl	800c404 <move_window>
 800c888:	4603      	mov	r3, r0
 800c88a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c88c:	7ffb      	ldrb	r3, [r7, #31]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d15d      	bne.n	800c94e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	8992      	ldrh	r2, [r2, #12]
 800c8a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8a4:	fb00 f202 	mul.w	r2, r0, r2
 800c8a8:	1a9b      	subs	r3, r3, r2
 800c8aa:	440b      	add	r3, r1
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	b292      	uxth	r2, r2
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7ff fb6d 	bl	800bf92 <st_word>
			fs->wflag = 1;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	70da      	strb	r2, [r3, #3]
			break;
 800c8be:	e049      	b.n	800c954 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	899b      	ldrh	r3, [r3, #12]
 800c8c8:	089b      	lsrs	r3, r3, #2
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c8d4:	4413      	add	r3, r2
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f7ff fd93 	bl	800c404 <move_window>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8e2:	7ffb      	ldrb	r3, [r7, #31]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d134      	bne.n	800c952 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	68fa      	ldr	r2, [r7, #12]
 800c8fa:	8992      	ldrh	r2, [r2, #12]
 800c8fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800c900:	fb00 f202 	mul.w	r2, r0, r2
 800c904:	1a9b      	subs	r3, r3, r2
 800c906:	440b      	add	r3, r1
 800c908:	4618      	mov	r0, r3
 800c90a:	f7ff fb1f 	bl	800bf4c <ld_dword>
 800c90e:	4603      	mov	r3, r0
 800c910:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c914:	4323      	orrs	r3, r4
 800c916:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	8992      	ldrh	r2, [r2, #12]
 800c926:	fbb3 f0f2 	udiv	r0, r3, r2
 800c92a:	fb00 f202 	mul.w	r2, r0, r2
 800c92e:	1a9b      	subs	r3, r3, r2
 800c930:	440b      	add	r3, r1
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff fb47 	bl	800bfc8 <st_dword>
			fs->wflag = 1;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2201      	movs	r2, #1
 800c93e:	70da      	strb	r2, [r3, #3]
			break;
 800c940:	e008      	b.n	800c954 <put_fat+0x22e>
		}
	}
 800c942:	bf00      	nop
 800c944:	e006      	b.n	800c954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c946:	bf00      	nop
 800c948:	e004      	b.n	800c954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c94a:	bf00      	nop
 800c94c:	e002      	b.n	800c954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c94e:	bf00      	nop
 800c950:	e000      	b.n	800c954 <put_fat+0x22e>
			if (res != FR_OK) break;
 800c952:	bf00      	nop
	return res;
 800c954:	7ffb      	ldrb	r3, [r7, #31]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3724      	adds	r7, #36	; 0x24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd90      	pop	{r4, r7, pc}

0800c95e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b088      	sub	sp, #32
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c96a:	2300      	movs	r3, #0
 800c96c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d904      	bls.n	800c984 <remove_chain+0x26>
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	429a      	cmp	r2, r3
 800c982:	d301      	bcc.n	800c988 <remove_chain+0x2a>
 800c984:	2302      	movs	r3, #2
 800c986:	e04b      	b.n	800ca20 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00c      	beq.n	800c9a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c98e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	69b8      	ldr	r0, [r7, #24]
 800c996:	f7ff fec6 	bl	800c726 <put_fat>
 800c99a:	4603      	mov	r3, r0
 800c99c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c99e:	7ffb      	ldrb	r3, [r7, #31]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d001      	beq.n	800c9a8 <remove_chain+0x4a>
 800c9a4:	7ffb      	ldrb	r3, [r7, #31]
 800c9a6:	e03b      	b.n	800ca20 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7ff fde7 	bl	800c57e <get_fat>
 800c9b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d031      	beq.n	800ca1c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d101      	bne.n	800c9c2 <remove_chain+0x64>
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e02e      	b.n	800ca20 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9c8:	d101      	bne.n	800c9ce <remove_chain+0x70>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e028      	b.n	800ca20 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	68b9      	ldr	r1, [r7, #8]
 800c9d2:	69b8      	ldr	r0, [r7, #24]
 800c9d4:	f7ff fea7 	bl	800c726 <put_fat>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c9dc:	7ffb      	ldrb	r3, [r7, #31]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <remove_chain+0x88>
 800c9e2:	7ffb      	ldrb	r3, [r7, #31]
 800c9e4:	e01c      	b.n	800ca20 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	695a      	ldr	r2, [r3, #20]
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	699b      	ldr	r3, [r3, #24]
 800c9ee:	3b02      	subs	r3, #2
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d20b      	bcs.n	800ca0c <remove_chain+0xae>
			fs->free_clst++;
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	791b      	ldrb	r3, [r3, #4]
 800ca02:	f043 0301 	orr.w	r3, r3, #1
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d3c6      	bcc.n	800c9a8 <remove_chain+0x4a>
 800ca1a:	e000      	b.n	800ca1e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ca1c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3720      	adds	r7, #32
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b088      	sub	sp, #32
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d10d      	bne.n	800ca5a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d004      	beq.n	800ca54 <create_chain+0x2c>
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	69ba      	ldr	r2, [r7, #24]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d31b      	bcc.n	800ca8c <create_chain+0x64>
 800ca54:	2301      	movs	r3, #1
 800ca56:	61bb      	str	r3, [r7, #24]
 800ca58:	e018      	b.n	800ca8c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ca5a:	6839      	ldr	r1, [r7, #0]
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff fd8e 	bl	800c57e <get_fat>
 800ca62:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d801      	bhi.n	800ca6e <create_chain+0x46>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e070      	b.n	800cb50 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca74:	d101      	bne.n	800ca7a <create_chain+0x52>
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	e06a      	b.n	800cb50 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d201      	bcs.n	800ca88 <create_chain+0x60>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	e063      	b.n	800cb50 <create_chain+0x128>
		scl = clst;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	3301      	adds	r3, #1
 800ca94:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	69fa      	ldr	r2, [r7, #28]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d307      	bcc.n	800cab0 <create_chain+0x88>
				ncl = 2;
 800caa0:	2302      	movs	r3, #2
 800caa2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800caa4:	69fa      	ldr	r2, [r7, #28]
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d901      	bls.n	800cab0 <create_chain+0x88>
 800caac:	2300      	movs	r3, #0
 800caae:	e04f      	b.n	800cb50 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cab0:	69f9      	ldr	r1, [r7, #28]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fd63 	bl	800c57e <get_fat>
 800cab8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00e      	beq.n	800cade <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d003      	beq.n	800cace <create_chain+0xa6>
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cacc:	d101      	bne.n	800cad2 <create_chain+0xaa>
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	e03e      	b.n	800cb50 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cad2:	69fa      	ldr	r2, [r7, #28]
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d1da      	bne.n	800ca90 <create_chain+0x68>
 800cada:	2300      	movs	r3, #0
 800cadc:	e038      	b.n	800cb50 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cade:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cae4:	69f9      	ldr	r1, [r7, #28]
 800cae6:	6938      	ldr	r0, [r7, #16]
 800cae8:	f7ff fe1d 	bl	800c726 <put_fat>
 800caec:	4603      	mov	r3, r0
 800caee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d109      	bne.n	800cb0a <create_chain+0xe2>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d006      	beq.n	800cb0a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cafc:	69fa      	ldr	r2, [r7, #28]
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6938      	ldr	r0, [r7, #16]
 800cb02:	f7ff fe10 	bl	800c726 <put_fat>
 800cb06:	4603      	mov	r3, r0
 800cb08:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cb0a:	7dfb      	ldrb	r3, [r7, #23]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d116      	bne.n	800cb3e <create_chain+0x116>
		fs->last_clst = ncl;
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	69fa      	ldr	r2, [r7, #28]
 800cb14:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	695a      	ldr	r2, [r3, #20]
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	699b      	ldr	r3, [r3, #24]
 800cb1e:	3b02      	subs	r3, #2
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d804      	bhi.n	800cb2e <create_chain+0x106>
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	1e5a      	subs	r2, r3, #1
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	791b      	ldrb	r3, [r3, #4]
 800cb32:	f043 0301 	orr.w	r3, r3, #1
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	711a      	strb	r2, [r3, #4]
 800cb3c:	e007      	b.n	800cb4e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d102      	bne.n	800cb4a <create_chain+0x122>
 800cb44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb48:	e000      	b.n	800cb4c <create_chain+0x124>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cb4e:	69fb      	ldr	r3, [r7, #28]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3720      	adds	r7, #32
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	899b      	ldrh	r3, [r3, #12]
 800cb74:	461a      	mov	r2, r3
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	8952      	ldrh	r2, [r2, #10]
 800cb80:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb84:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	1d1a      	adds	r2, r3, #4
 800cb8a:	613a      	str	r2, [r7, #16]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <clmt_clust+0x42>
 800cb96:	2300      	movs	r3, #0
 800cb98:	e010      	b.n	800cbbc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800cb9a:	697a      	ldr	r2, [r7, #20]
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d307      	bcc.n	800cbb2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800cba2:	697a      	ldr	r2, [r7, #20]
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	1ad3      	subs	r3, r2, r3
 800cba8:	617b      	str	r3, [r7, #20]
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	3304      	adds	r3, #4
 800cbae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cbb0:	e7e9      	b.n	800cb86 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800cbb2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	4413      	add	r3, r2
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	371c      	adds	r7, #28
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc6:	4770      	bx	lr

0800cbc8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b086      	sub	sp, #24
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cbde:	d204      	bcs.n	800cbea <dir_sdi+0x22>
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	f003 031f 	and.w	r3, r3, #31
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <dir_sdi+0x26>
		return FR_INT_ERR;
 800cbea:	2302      	movs	r3, #2
 800cbec:	e071      	b.n	800ccd2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	683a      	ldr	r2, [r7, #0]
 800cbf2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	689b      	ldr	r3, [r3, #8]
 800cbf8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d106      	bne.n	800cc0e <dir_sdi+0x46>
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d902      	bls.n	800cc0e <dir_sdi+0x46>
		clst = fs->dirbase;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10c      	bne.n	800cc2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	095b      	lsrs	r3, r3, #5
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	8912      	ldrh	r2, [r2, #8]
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d301      	bcc.n	800cc24 <dir_sdi+0x5c>
 800cc20:	2302      	movs	r3, #2
 800cc22:	e056      	b.n	800ccd2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	61da      	str	r2, [r3, #28]
 800cc2c:	e02d      	b.n	800cc8a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	895b      	ldrh	r3, [r3, #10]
 800cc32:	461a      	mov	r2, r3
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	899b      	ldrh	r3, [r3, #12]
 800cc38:	fb02 f303 	mul.w	r3, r2, r3
 800cc3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc3e:	e019      	b.n	800cc74 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6979      	ldr	r1, [r7, #20]
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fc9a 	bl	800c57e <get_fat>
 800cc4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc52:	d101      	bne.n	800cc58 <dir_sdi+0x90>
 800cc54:	2301      	movs	r3, #1
 800cc56:	e03c      	b.n	800ccd2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d904      	bls.n	800cc68 <dir_sdi+0xa0>
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d301      	bcc.n	800cc6c <dir_sdi+0xa4>
 800cc68:	2302      	movs	r3, #2
 800cc6a:	e032      	b.n	800ccd2 <dir_sdi+0x10a>
			ofs -= csz;
 800cc6c:	683a      	ldr	r2, [r7, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d2e1      	bcs.n	800cc40 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800cc7c:	6979      	ldr	r1, [r7, #20]
 800cc7e:	6938      	ldr	r0, [r7, #16]
 800cc80:	f7ff fc5e 	bl	800c540 <clust2sect>
 800cc84:	4602      	mov	r2, r0
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	697a      	ldr	r2, [r7, #20]
 800cc8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	69db      	ldr	r3, [r3, #28]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <dir_sdi+0xd4>
 800cc98:	2302      	movs	r3, #2
 800cc9a:	e01a      	b.n	800ccd2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	69da      	ldr	r2, [r3, #28]
 800cca0:	693b      	ldr	r3, [r7, #16]
 800cca2:	899b      	ldrh	r3, [r3, #12]
 800cca4:	4619      	mov	r1, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccac:	441a      	add	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	899b      	ldrh	r3, [r3, #12]
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800ccc4:	fb00 f202 	mul.w	r2, r0, r2
 800ccc8:	1a9b      	subs	r3, r3, r2
 800ccca:	18ca      	adds	r2, r1, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3718      	adds	r7, #24
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b086      	sub	sp, #24
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	3320      	adds	r3, #32
 800ccf0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	69db      	ldr	r3, [r3, #28]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d003      	beq.n	800cd02 <dir_next+0x28>
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd00:	d301      	bcc.n	800cd06 <dir_next+0x2c>
 800cd02:	2304      	movs	r3, #4
 800cd04:	e0bb      	b.n	800ce7e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	899b      	ldrh	r3, [r3, #12]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd12:	fb01 f202 	mul.w	r2, r1, r2
 800cd16:	1a9b      	subs	r3, r3, r2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f040 809d 	bne.w	800ce58 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	69db      	ldr	r3, [r3, #28]
 800cd22:	1c5a      	adds	r2, r3, #1
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	699b      	ldr	r3, [r3, #24]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d10b      	bne.n	800cd48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	095b      	lsrs	r3, r3, #5
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	8912      	ldrh	r2, [r2, #8]
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	f0c0 808d 	bcc.w	800ce58 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	2200      	movs	r2, #0
 800cd42:	61da      	str	r2, [r3, #28]
 800cd44:	2304      	movs	r3, #4
 800cd46:	e09a      	b.n	800ce7e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	899b      	ldrh	r3, [r3, #12]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd54:	68fa      	ldr	r2, [r7, #12]
 800cd56:	8952      	ldrh	r2, [r2, #10]
 800cd58:	3a01      	subs	r2, #1
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d17b      	bne.n	800ce58 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	699b      	ldr	r3, [r3, #24]
 800cd66:	4619      	mov	r1, r3
 800cd68:	4610      	mov	r0, r2
 800cd6a:	f7ff fc08 	bl	800c57e <get_fat>
 800cd6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	d801      	bhi.n	800cd7a <dir_next+0xa0>
 800cd76:	2302      	movs	r3, #2
 800cd78:	e081      	b.n	800ce7e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd80:	d101      	bne.n	800cd86 <dir_next+0xac>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e07b      	b.n	800ce7e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d359      	bcc.n	800ce44 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d104      	bne.n	800cda0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	61da      	str	r2, [r3, #28]
 800cd9c:	2304      	movs	r3, #4
 800cd9e:	e06e      	b.n	800ce7e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	4619      	mov	r1, r3
 800cda8:	4610      	mov	r0, r2
 800cdaa:	f7ff fe3d 	bl	800ca28 <create_chain>
 800cdae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <dir_next+0xe0>
 800cdb6:	2307      	movs	r3, #7
 800cdb8:	e061      	b.n	800ce7e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d101      	bne.n	800cdc4 <dir_next+0xea>
 800cdc0:	2302      	movs	r3, #2
 800cdc2:	e05c      	b.n	800ce7e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdca:	d101      	bne.n	800cdd0 <dir_next+0xf6>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e056      	b.n	800ce7e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff fad3 	bl	800c37c <sync_window>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <dir_next+0x106>
 800cddc:	2301      	movs	r3, #1
 800cdde:	e04e      	b.n	800ce7e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	899b      	ldrh	r3, [r3, #12]
 800cdea:	461a      	mov	r2, r3
 800cdec:	2100      	movs	r1, #0
 800cdee:	f7ff f938 	bl	800c062 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	613b      	str	r3, [r7, #16]
 800cdf6:	6979      	ldr	r1, [r7, #20]
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f7ff fba1 	bl	800c540 <clust2sect>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	631a      	str	r2, [r3, #48]	; 0x30
 800ce04:	e012      	b.n	800ce2c <dir_next+0x152>
						fs->wflag = 1;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f7ff fab5 	bl	800c37c <sync_window>
 800ce12:	4603      	mov	r3, r0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <dir_next+0x142>
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e030      	b.n	800ce7e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	613b      	str	r3, [r7, #16]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce26:	1c5a      	adds	r2, r3, #1
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	631a      	str	r2, [r3, #48]	; 0x30
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	895b      	ldrh	r3, [r3, #10]
 800ce30:	461a      	mov	r2, r3
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d3e6      	bcc.n	800ce06 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	1ad2      	subs	r2, r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ce4a:	6979      	ldr	r1, [r7, #20]
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f7ff fb77 	bl	800c540 <clust2sect>
 800ce52:	4602      	mov	r2, r0
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	68ba      	ldr	r2, [r7, #8]
 800ce5c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	899b      	ldrh	r3, [r3, #12]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce70:	fb00 f202 	mul.w	r2, r0, r2
 800ce74:	1a9b      	subs	r3, r3, r2
 800ce76:	18ca      	adds	r2, r1, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ce86:	b580      	push	{r7, lr}
 800ce88:	b086      	sub	sp, #24
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	6078      	str	r0, [r7, #4]
 800ce8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ce96:	2100      	movs	r1, #0
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f7ff fe95 	bl	800cbc8 <dir_sdi>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cea2:	7dfb      	ldrb	r3, [r7, #23]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d12b      	bne.n	800cf00 <dir_alloc+0x7a>
		n = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	69db      	ldr	r3, [r3, #28]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	68f8      	ldr	r0, [r7, #12]
 800ceb4:	f7ff faa6 	bl	800c404 <move_window>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cebc:	7dfb      	ldrb	r3, [r7, #23]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d11d      	bne.n	800cefe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6a1b      	ldr	r3, [r3, #32]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	2be5      	cmp	r3, #229	; 0xe5
 800ceca:	d004      	beq.n	800ced6 <dir_alloc+0x50>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a1b      	ldr	r3, [r3, #32]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d107      	bne.n	800cee6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	3301      	adds	r3, #1
 800ceda:	613b      	str	r3, [r7, #16]
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d102      	bne.n	800ceea <dir_alloc+0x64>
 800cee4:	e00c      	b.n	800cf00 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cee6:	2300      	movs	r3, #0
 800cee8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ceea:	2101      	movs	r1, #1
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f7ff fef4 	bl	800ccda <dir_next>
 800cef2:	4603      	mov	r3, r0
 800cef4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cef6:	7dfb      	ldrb	r3, [r7, #23]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0d7      	beq.n	800ceac <dir_alloc+0x26>
 800cefc:	e000      	b.n	800cf00 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cefe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	2b04      	cmp	r3, #4
 800cf04:	d101      	bne.n	800cf0a <dir_alloc+0x84>
 800cf06:	2307      	movs	r3, #7
 800cf08:	75fb      	strb	r3, [r7, #23]
	return res;
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3718      	adds	r7, #24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	331a      	adds	r3, #26
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe fffa 	bl	800bf1c <ld_word>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	d109      	bne.n	800cf48 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	3314      	adds	r3, #20
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fe ffef 	bl	800bf1c <ld_word>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	041b      	lsls	r3, r3, #16
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cf48:	68fb      	ldr	r3, [r7, #12]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	331a      	adds	r3, #26
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	b292      	uxth	r2, r2
 800cf66:	4611      	mov	r1, r2
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7ff f812 	bl	800bf92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b03      	cmp	r3, #3
 800cf74:	d109      	bne.n	800cf8a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	f103 0214 	add.w	r2, r3, #20
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	0c1b      	lsrs	r3, r3, #16
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	4619      	mov	r1, r3
 800cf84:	4610      	mov	r0, r2
 800cf86:	f7ff f804 	bl	800bf92 <st_word>
	}
}
 800cf8a:	bf00      	nop
 800cf8c:	3710      	adds	r7, #16
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b086      	sub	sp, #24
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f7ff fe10 	bl	800cbc8 <dir_sdi>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cfac:	7dfb      	ldrb	r3, [r7, #23]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <dir_find+0x24>
 800cfb2:	7dfb      	ldrb	r3, [r7, #23]
 800cfb4:	e03e      	b.n	800d034 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	69db      	ldr	r3, [r3, #28]
 800cfba:	4619      	mov	r1, r3
 800cfbc:	6938      	ldr	r0, [r7, #16]
 800cfbe:	f7ff fa21 	bl	800c404 <move_window>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d12f      	bne.n	800d02c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6a1b      	ldr	r3, [r3, #32]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d102      	bne.n	800cfe0 <dir_find+0x4e>
 800cfda:	2304      	movs	r3, #4
 800cfdc:	75fb      	strb	r3, [r7, #23]
 800cfde:	e028      	b.n	800d032 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	330b      	adds	r3, #11
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a1b      	ldr	r3, [r3, #32]
 800cff6:	330b      	adds	r3, #11
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	f003 0308 	and.w	r3, r3, #8
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <dir_find+0x86>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6a18      	ldr	r0, [r3, #32]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	3324      	adds	r3, #36	; 0x24
 800d00a:	220b      	movs	r2, #11
 800d00c:	4619      	mov	r1, r3
 800d00e:	f7ff f843 	bl	800c098 <mem_cmp>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00b      	beq.n	800d030 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d018:	2100      	movs	r1, #0
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7ff fe5d 	bl	800ccda <dir_next>
 800d020:	4603      	mov	r3, r0
 800d022:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0c5      	beq.n	800cfb6 <dir_find+0x24>
 800d02a:	e002      	b.n	800d032 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d02c:	bf00      	nop
 800d02e:	e000      	b.n	800d032 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d030:	bf00      	nop

	return res;
 800d032:	7dfb      	ldrb	r3, [r7, #23]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3718      	adds	r7, #24
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d04a:	2101      	movs	r1, #1
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7ff ff1a 	bl	800ce86 <dir_alloc>
 800d052:	4603      	mov	r3, r0
 800d054:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d056:	7bfb      	ldrb	r3, [r7, #15]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d11c      	bne.n	800d096 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	69db      	ldr	r3, [r3, #28]
 800d060:	4619      	mov	r1, r3
 800d062:	68b8      	ldr	r0, [r7, #8]
 800d064:	f7ff f9ce 	bl	800c404 <move_window>
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d111      	bne.n	800d096 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	2220      	movs	r2, #32
 800d078:	2100      	movs	r1, #0
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fe fff1 	bl	800c062 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a18      	ldr	r0, [r3, #32]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3324      	adds	r3, #36	; 0x24
 800d088:	220b      	movs	r2, #11
 800d08a:	4619      	mov	r1, r3
 800d08c:	f7fe ffc8 	bl	800c020 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	2201      	movs	r2, #1
 800d094:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d096:	7bfb      	ldrb	r3, [r7, #15]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b088      	sub	sp, #32
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	3324      	adds	r3, #36	; 0x24
 800d0b4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d0b6:	220b      	movs	r2, #11
 800d0b8:	2120      	movs	r1, #32
 800d0ba:	68b8      	ldr	r0, [r7, #8]
 800d0bc:	f7fe ffd1 	bl	800c062 <mem_set>
	si = i = 0; ni = 8;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	613b      	str	r3, [r7, #16]
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	61fb      	str	r3, [r7, #28]
 800d0c8:	2308      	movs	r3, #8
 800d0ca:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	61fa      	str	r2, [r7, #28]
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d0da:	7efb      	ldrb	r3, [r7, #27]
 800d0dc:	2b20      	cmp	r3, #32
 800d0de:	d94e      	bls.n	800d17e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d0e0:	7efb      	ldrb	r3, [r7, #27]
 800d0e2:	2b2f      	cmp	r3, #47	; 0x2f
 800d0e4:	d006      	beq.n	800d0f4 <create_name+0x54>
 800d0e6:	7efb      	ldrb	r3, [r7, #27]
 800d0e8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0ea:	d110      	bne.n	800d10e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d0ec:	e002      	b.n	800d0f4 <create_name+0x54>
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	3301      	adds	r3, #1
 800d0f2:	61fb      	str	r3, [r7, #28]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	69fb      	ldr	r3, [r7, #28]
 800d0f8:	4413      	add	r3, r2
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	2b2f      	cmp	r3, #47	; 0x2f
 800d0fe:	d0f6      	beq.n	800d0ee <create_name+0x4e>
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	4413      	add	r3, r2
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b5c      	cmp	r3, #92	; 0x5c
 800d10a:	d0f0      	beq.n	800d0ee <create_name+0x4e>
			break;
 800d10c:	e038      	b.n	800d180 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d10e:	7efb      	ldrb	r3, [r7, #27]
 800d110:	2b2e      	cmp	r3, #46	; 0x2e
 800d112:	d003      	beq.n	800d11c <create_name+0x7c>
 800d114:	693a      	ldr	r2, [r7, #16]
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d30c      	bcc.n	800d136 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	2b0b      	cmp	r3, #11
 800d120:	d002      	beq.n	800d128 <create_name+0x88>
 800d122:	7efb      	ldrb	r3, [r7, #27]
 800d124:	2b2e      	cmp	r3, #46	; 0x2e
 800d126:	d001      	beq.n	800d12c <create_name+0x8c>
 800d128:	2306      	movs	r3, #6
 800d12a:	e044      	b.n	800d1b6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d12c:	2308      	movs	r3, #8
 800d12e:	613b      	str	r3, [r7, #16]
 800d130:	230b      	movs	r3, #11
 800d132:	617b      	str	r3, [r7, #20]
			continue;
 800d134:	e022      	b.n	800d17c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d136:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	da04      	bge.n	800d148 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d13e:	7efb      	ldrb	r3, [r7, #27]
 800d140:	3b80      	subs	r3, #128	; 0x80
 800d142:	4a1f      	ldr	r2, [pc, #124]	; (800d1c0 <create_name+0x120>)
 800d144:	5cd3      	ldrb	r3, [r2, r3]
 800d146:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d148:	7efb      	ldrb	r3, [r7, #27]
 800d14a:	4619      	mov	r1, r3
 800d14c:	481d      	ldr	r0, [pc, #116]	; (800d1c4 <create_name+0x124>)
 800d14e:	f7fe ffca 	bl	800c0e6 <chk_chr>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d001      	beq.n	800d15c <create_name+0xbc>
 800d158:	2306      	movs	r3, #6
 800d15a:	e02c      	b.n	800d1b6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d15c:	7efb      	ldrb	r3, [r7, #27]
 800d15e:	2b60      	cmp	r3, #96	; 0x60
 800d160:	d905      	bls.n	800d16e <create_name+0xce>
 800d162:	7efb      	ldrb	r3, [r7, #27]
 800d164:	2b7a      	cmp	r3, #122	; 0x7a
 800d166:	d802      	bhi.n	800d16e <create_name+0xce>
 800d168:	7efb      	ldrb	r3, [r7, #27]
 800d16a:	3b20      	subs	r3, #32
 800d16c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	613a      	str	r2, [r7, #16]
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	4413      	add	r3, r2
 800d178:	7efa      	ldrb	r2, [r7, #27]
 800d17a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d17c:	e7a6      	b.n	800d0cc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d17e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	441a      	add	r2, r3
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <create_name+0xf4>
 800d190:	2306      	movs	r3, #6
 800d192:	e010      	b.n	800d1b6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2be5      	cmp	r3, #229	; 0xe5
 800d19a:	d102      	bne.n	800d1a2 <create_name+0x102>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	2205      	movs	r2, #5
 800d1a0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d1a2:	7efb      	ldrb	r3, [r7, #27]
 800d1a4:	2b20      	cmp	r3, #32
 800d1a6:	d801      	bhi.n	800d1ac <create_name+0x10c>
 800d1a8:	2204      	movs	r2, #4
 800d1aa:	e000      	b.n	800d1ae <create_name+0x10e>
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	330b      	adds	r3, #11
 800d1b2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d1b4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3720      	adds	r7, #32
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	08012f78 	.word	0x08012f78
 800d1c4:	08012f08 	.word	0x08012f08

0800d1c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b086      	sub	sp, #24
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d1dc:	e002      	b.n	800d1e4 <follow_path+0x1c>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	603b      	str	r3, [r7, #0]
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	2b2f      	cmp	r3, #47	; 0x2f
 800d1ea:	d0f8      	beq.n	800d1de <follow_path+0x16>
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	2b5c      	cmp	r3, #92	; 0x5c
 800d1f2:	d0f4      	beq.n	800d1de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b1f      	cmp	r3, #31
 800d200:	d80a      	bhi.n	800d218 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2280      	movs	r2, #128	; 0x80
 800d206:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d20a:	2100      	movs	r1, #0
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f7ff fcdb 	bl	800cbc8 <dir_sdi>
 800d212:	4603      	mov	r3, r0
 800d214:	75fb      	strb	r3, [r7, #23]
 800d216:	e048      	b.n	800d2aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d218:	463b      	mov	r3, r7
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff ff3f 	bl	800d0a0 <create_name>
 800d222:	4603      	mov	r3, r0
 800d224:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d226:	7dfb      	ldrb	r3, [r7, #23]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d139      	bne.n	800d2a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f7ff feb0 	bl	800cf92 <dir_find>
 800d232:	4603      	mov	r3, r0
 800d234:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d23c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00a      	beq.n	800d25a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	2b04      	cmp	r3, #4
 800d248:	d12c      	bne.n	800d2a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d24a:	7afb      	ldrb	r3, [r7, #11]
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d127      	bne.n	800d2a4 <follow_path+0xdc>
 800d254:	2305      	movs	r3, #5
 800d256:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d258:	e024      	b.n	800d2a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d25a:	7afb      	ldrb	r3, [r7, #11]
 800d25c:	f003 0304 	and.w	r3, r3, #4
 800d260:	2b00      	cmp	r3, #0
 800d262:	d121      	bne.n	800d2a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	799b      	ldrb	r3, [r3, #6]
 800d268:	f003 0310 	and.w	r3, r3, #16
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d102      	bne.n	800d276 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d270:	2305      	movs	r3, #5
 800d272:	75fb      	strb	r3, [r7, #23]
 800d274:	e019      	b.n	800d2aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	695b      	ldr	r3, [r3, #20]
 800d280:	68fa      	ldr	r2, [r7, #12]
 800d282:	8992      	ldrh	r2, [r2, #12]
 800d284:	fbb3 f0f2 	udiv	r0, r3, r2
 800d288:	fb00 f202 	mul.w	r2, r0, r2
 800d28c:	1a9b      	subs	r3, r3, r2
 800d28e:	440b      	add	r3, r1
 800d290:	4619      	mov	r1, r3
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f7ff fe3e 	bl	800cf14 <ld_clust>
 800d298:	4602      	mov	r2, r0
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d29e:	e7bb      	b.n	800d218 <follow_path+0x50>
			if (res != FR_OK) break;
 800d2a0:	bf00      	nop
 800d2a2:	e002      	b.n	800d2aa <follow_path+0xe2>
				break;
 800d2a4:	bf00      	nop
 800d2a6:	e000      	b.n	800d2aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2a8:	bf00      	nop
			}
		}
	}

	return res;
 800d2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3718      	adds	r7, #24
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d031      	beq.n	800d32e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	617b      	str	r3, [r7, #20]
 800d2d0:	e002      	b.n	800d2d8 <get_ldnumber+0x24>
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	617b      	str	r3, [r7, #20]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b20      	cmp	r3, #32
 800d2de:	d903      	bls.n	800d2e8 <get_ldnumber+0x34>
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	2b3a      	cmp	r3, #58	; 0x3a
 800d2e6:	d1f4      	bne.n	800d2d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2b3a      	cmp	r3, #58	; 0x3a
 800d2ee:	d11c      	bne.n	800d32a <get_ldnumber+0x76>
			tp = *path;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	1c5a      	adds	r2, r3, #1
 800d2fa:	60fa      	str	r2, [r7, #12]
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	3b30      	subs	r3, #48	; 0x30
 800d300:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	2b09      	cmp	r3, #9
 800d306:	d80e      	bhi.n	800d326 <get_ldnumber+0x72>
 800d308:	68fa      	ldr	r2, [r7, #12]
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d10a      	bne.n	800d326 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d107      	bne.n	800d326 <get_ldnumber+0x72>
					vol = (int)i;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	3301      	adds	r3, #1
 800d31e:	617b      	str	r3, [r7, #20]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	697a      	ldr	r2, [r7, #20]
 800d324:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	e002      	b.n	800d330 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d32e:	693b      	ldr	r3, [r7, #16]
}
 800d330:	4618      	mov	r0, r3
 800d332:	371c      	adds	r7, #28
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	70da      	strb	r2, [r3, #3]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d352:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff f854 	bl	800c404 <move_window>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <check_fs+0x2a>
 800d362:	2304      	movs	r3, #4
 800d364:	e038      	b.n	800d3d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	3334      	adds	r3, #52	; 0x34
 800d36a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fdd4 	bl	800bf1c <ld_word>
 800d374:	4603      	mov	r3, r0
 800d376:	461a      	mov	r2, r3
 800d378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d001      	beq.n	800d384 <check_fs+0x48>
 800d380:	2303      	movs	r3, #3
 800d382:	e029      	b.n	800d3d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d38a:	2be9      	cmp	r3, #233	; 0xe9
 800d38c:	d009      	beq.n	800d3a2 <check_fs+0x66>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d394:	2beb      	cmp	r3, #235	; 0xeb
 800d396:	d11e      	bne.n	800d3d6 <check_fs+0x9a>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d39e:	2b90      	cmp	r3, #144	; 0x90
 800d3a0:	d119      	bne.n	800d3d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3334      	adds	r3, #52	; 0x34
 800d3a6:	3336      	adds	r3, #54	; 0x36
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f7fe fdcf 	bl	800bf4c <ld_dword>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d3b4:	4a0a      	ldr	r2, [pc, #40]	; (800d3e0 <check_fs+0xa4>)
 800d3b6:	4293      	cmp	r3, r2
 800d3b8:	d101      	bne.n	800d3be <check_fs+0x82>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e00c      	b.n	800d3d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3334      	adds	r3, #52	; 0x34
 800d3c2:	3352      	adds	r3, #82	; 0x52
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fdc1 	bl	800bf4c <ld_dword>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	4a05      	ldr	r2, [pc, #20]	; (800d3e4 <check_fs+0xa8>)
 800d3ce:	4293      	cmp	r3, r2
 800d3d0:	d101      	bne.n	800d3d6 <check_fs+0x9a>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	e000      	b.n	800d3d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d3d6:	2302      	movs	r3, #2
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3708      	adds	r7, #8
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	00544146 	.word	0x00544146
 800d3e4:	33544146 	.word	0x33544146

0800d3e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b096      	sub	sp, #88	; 0x58
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f7ff ff59 	bl	800d2b4 <get_ldnumber>
 800d402:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d406:	2b00      	cmp	r3, #0
 800d408:	da01      	bge.n	800d40e <find_volume+0x26>
 800d40a:	230b      	movs	r3, #11
 800d40c:	e262      	b.n	800d8d4 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d40e:	4a9f      	ldr	r2, [pc, #636]	; (800d68c <find_volume+0x2a4>)
 800d410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d416:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d101      	bne.n	800d422 <find_volume+0x3a>
 800d41e:	230c      	movs	r3, #12
 800d420:	e258      	b.n	800d8d4 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d426:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d428:	79fb      	ldrb	r3, [r7, #7]
 800d42a:	f023 0301 	bic.w	r3, r3, #1
 800d42e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d01a      	beq.n	800d46e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	785b      	ldrb	r3, [r3, #1]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fccf 	bl	800bde0 <disk_status>
 800d442:	4603      	mov	r3, r0
 800d444:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d448:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d44c:	f003 0301 	and.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	d10c      	bne.n	800d46e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d454:	79fb      	ldrb	r3, [r7, #7]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d007      	beq.n	800d46a <find_volume+0x82>
 800d45a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d45e:	f003 0304 	and.w	r3, r3, #4
 800d462:	2b00      	cmp	r3, #0
 800d464:	d001      	beq.n	800d46a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d466:	230a      	movs	r3, #10
 800d468:	e234      	b.n	800d8d4 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800d46a:	2300      	movs	r3, #0
 800d46c:	e232      	b.n	800d8d4 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d470:	2200      	movs	r2, #0
 800d472:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d476:	b2da      	uxtb	r2, r3
 800d478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	785b      	ldrb	r3, [r3, #1]
 800d480:	4618      	mov	r0, r3
 800d482:	f7fe fcc7 	bl	800be14 <disk_initialize>
 800d486:	4603      	mov	r3, r0
 800d488:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d48c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d490:	f003 0301 	and.w	r3, r3, #1
 800d494:	2b00      	cmp	r3, #0
 800d496:	d001      	beq.n	800d49c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d498:	2303      	movs	r3, #3
 800d49a:	e21b      	b.n	800d8d4 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d49c:	79fb      	ldrb	r3, [r7, #7]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d007      	beq.n	800d4b2 <find_volume+0xca>
 800d4a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4a6:	f003 0304 	and.w	r3, r3, #4
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d001      	beq.n	800d4b2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d4ae:	230a      	movs	r3, #10
 800d4b0:	e210      	b.n	800d8d4 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b4:	7858      	ldrb	r0, [r3, #1]
 800d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b8:	330c      	adds	r3, #12
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	2102      	movs	r1, #2
 800d4be:	f7fe fd0f 	bl	800bee0 <disk_ioctl>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <find_volume+0xe4>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e203      	b.n	800d8d4 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ce:	899b      	ldrh	r3, [r3, #12]
 800d4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4d4:	d80d      	bhi.n	800d4f2 <find_volume+0x10a>
 800d4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d8:	899b      	ldrh	r3, [r3, #12]
 800d4da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4de:	d308      	bcc.n	800d4f2 <find_volume+0x10a>
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	899b      	ldrh	r3, [r3, #12]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e8:	899b      	ldrh	r3, [r3, #12]
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <find_volume+0x10e>
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	e1ee      	b.n	800d8d4 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d4fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4fe:	f7ff ff1d 	bl	800d33c <check_fs>
 800d502:	4603      	mov	r3, r0
 800d504:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d508:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d50c:	2b02      	cmp	r3, #2
 800d50e:	d149      	bne.n	800d5a4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d510:	2300      	movs	r3, #0
 800d512:	643b      	str	r3, [r7, #64]	; 0x40
 800d514:	e01e      	b.n	800d554 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d518:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d51e:	011b      	lsls	r3, r3, #4
 800d520:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d524:	4413      	add	r3, r2
 800d526:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	3304      	adds	r3, #4
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d006      	beq.n	800d540 <find_volume+0x158>
 800d532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d534:	3308      	adds	r3, #8
 800d536:	4618      	mov	r0, r3
 800d538:	f7fe fd08 	bl	800bf4c <ld_dword>
 800d53c:	4602      	mov	r2, r0
 800d53e:	e000      	b.n	800d542 <find_volume+0x15a>
 800d540:	2200      	movs	r2, #0
 800d542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	3358      	adds	r3, #88	; 0x58
 800d548:	443b      	add	r3, r7
 800d54a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d54e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d550:	3301      	adds	r3, #1
 800d552:	643b      	str	r3, [r7, #64]	; 0x40
 800d554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d556:	2b03      	cmp	r3, #3
 800d558:	d9dd      	bls.n	800d516 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d55a:	2300      	movs	r3, #0
 800d55c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d55e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <find_volume+0x182>
 800d564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d566:	3b01      	subs	r3, #1
 800d568:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d56a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56c:	009b      	lsls	r3, r3, #2
 800d56e:	3358      	adds	r3, #88	; 0x58
 800d570:	443b      	add	r3, r7
 800d572:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d576:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d005      	beq.n	800d58a <find_volume+0x1a2>
 800d57e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d580:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d582:	f7ff fedb 	bl	800d33c <check_fs>
 800d586:	4603      	mov	r3, r0
 800d588:	e000      	b.n	800d58c <find_volume+0x1a4>
 800d58a:	2303      	movs	r3, #3
 800d58c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d594:	2b01      	cmp	r3, #1
 800d596:	d905      	bls.n	800d5a4 <find_volume+0x1bc>
 800d598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59a:	3301      	adds	r3, #1
 800d59c:	643b      	str	r3, [r7, #64]	; 0x40
 800d59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d9e2      	bls.n	800d56a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d5a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d101      	bne.n	800d5b0 <find_volume+0x1c8>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e191      	b.n	800d8d4 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d5b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d901      	bls.n	800d5bc <find_volume+0x1d4>
 800d5b8:	230d      	movs	r3, #13
 800d5ba:	e18b      	b.n	800d8d4 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	3334      	adds	r3, #52	; 0x34
 800d5c0:	330b      	adds	r3, #11
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fe fcaa 	bl	800bf1c <ld_word>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ce:	899b      	ldrh	r3, [r3, #12]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d001      	beq.n	800d5d8 <find_volume+0x1f0>
 800d5d4:	230d      	movs	r3, #13
 800d5d6:	e17d      	b.n	800d8d4 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5da:	3334      	adds	r3, #52	; 0x34
 800d5dc:	3316      	adds	r3, #22
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe fc9c 	bl	800bf1c <ld_word>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d5e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d106      	bne.n	800d5fc <find_volume+0x214>
 800d5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5f0:	3334      	adds	r3, #52	; 0x34
 800d5f2:	3324      	adds	r3, #36	; 0x24
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe fca9 	bl	800bf4c <ld_dword>
 800d5fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d600:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d604:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d60e:	789b      	ldrb	r3, [r3, #2]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d005      	beq.n	800d620 <find_volume+0x238>
 800d614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d616:	789b      	ldrb	r3, [r3, #2]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d001      	beq.n	800d620 <find_volume+0x238>
 800d61c:	230d      	movs	r3, #13
 800d61e:	e159      	b.n	800d8d4 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d622:	789b      	ldrb	r3, [r3, #2]
 800d624:	461a      	mov	r2, r3
 800d626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d628:	fb02 f303 	mul.w	r3, r2, r3
 800d62c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d634:	b29a      	uxth	r2, r3
 800d636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d638:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63c:	895b      	ldrh	r3, [r3, #10]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d008      	beq.n	800d654 <find_volume+0x26c>
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	895b      	ldrh	r3, [r3, #10]
 800d646:	461a      	mov	r2, r3
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	895b      	ldrh	r3, [r3, #10]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	4013      	ands	r3, r2
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <find_volume+0x270>
 800d654:	230d      	movs	r3, #13
 800d656:	e13d      	b.n	800d8d4 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	3334      	adds	r3, #52	; 0x34
 800d65c:	3311      	adds	r3, #17
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fc5c 	bl	800bf1c <ld_word>
 800d664:	4603      	mov	r3, r0
 800d666:	461a      	mov	r2, r3
 800d668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66e:	891b      	ldrh	r3, [r3, #8]
 800d670:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d672:	8992      	ldrh	r2, [r2, #12]
 800d674:	0952      	lsrs	r2, r2, #5
 800d676:	b292      	uxth	r2, r2
 800d678:	fbb3 f1f2 	udiv	r1, r3, r2
 800d67c:	fb01 f202 	mul.w	r2, r1, r2
 800d680:	1a9b      	subs	r3, r3, r2
 800d682:	b29b      	uxth	r3, r3
 800d684:	2b00      	cmp	r3, #0
 800d686:	d003      	beq.n	800d690 <find_volume+0x2a8>
 800d688:	230d      	movs	r3, #13
 800d68a:	e123      	b.n	800d8d4 <find_volume+0x4ec>
 800d68c:	200005f0 	.word	0x200005f0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d692:	3334      	adds	r3, #52	; 0x34
 800d694:	3313      	adds	r3, #19
 800d696:	4618      	mov	r0, r3
 800d698:	f7fe fc40 	bl	800bf1c <ld_word>
 800d69c:	4603      	mov	r3, r0
 800d69e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d106      	bne.n	800d6b4 <find_volume+0x2cc>
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	3334      	adds	r3, #52	; 0x34
 800d6aa:	3320      	adds	r3, #32
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fe fc4d 	bl	800bf4c <ld_dword>
 800d6b2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b6:	3334      	adds	r3, #52	; 0x34
 800d6b8:	330e      	adds	r3, #14
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fe fc2e 	bl	800bf1c <ld_word>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <find_volume+0x2e6>
 800d6ca:	230d      	movs	r3, #13
 800d6cc:	e102      	b.n	800d8d4 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d6ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6d2:	4413      	add	r3, r2
 800d6d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6d6:	8911      	ldrh	r1, [r2, #8]
 800d6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6da:	8992      	ldrh	r2, [r2, #12]
 800d6dc:	0952      	lsrs	r2, r2, #5
 800d6de:	b292      	uxth	r2, r2
 800d6e0:	fbb1 f2f2 	udiv	r2, r1, r2
 800d6e4:	b292      	uxth	r2, r2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d6ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d201      	bcs.n	800d6f6 <find_volume+0x30e>
 800d6f2:	230d      	movs	r3, #13
 800d6f4:	e0ee      	b.n	800d8d4 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d6f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6fa:	1ad3      	subs	r3, r2, r3
 800d6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d6fe:	8952      	ldrh	r2, [r2, #10]
 800d700:	fbb3 f3f2 	udiv	r3, r3, r2
 800d704:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <find_volume+0x328>
 800d70c:	230d      	movs	r3, #13
 800d70e:	e0e1      	b.n	800d8d4 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800d710:	2303      	movs	r3, #3
 800d712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d802      	bhi.n	800d726 <find_volume+0x33e>
 800d720:	2302      	movs	r3, #2
 800d722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d802      	bhi.n	800d736 <find_volume+0x34e>
 800d730:	2301      	movs	r3, #1
 800d732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d738:	1c9a      	adds	r2, r3, #2
 800d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d740:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d742:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d744:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d748:	441a      	add	r2, r3
 800d74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d74c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d74e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	441a      	add	r2, r3
 800d754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d756:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d75c:	2b03      	cmp	r3, #3
 800d75e:	d11e      	bne.n	800d79e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d762:	3334      	adds	r3, #52	; 0x34
 800d764:	332a      	adds	r3, #42	; 0x2a
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fbd8 	bl	800bf1c <ld_word>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <find_volume+0x38e>
 800d772:	230d      	movs	r3, #13
 800d774:	e0ae      	b.n	800d8d4 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d001      	beq.n	800d782 <find_volume+0x39a>
 800d77e:	230d      	movs	r3, #13
 800d780:	e0a8      	b.n	800d8d4 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d784:	3334      	adds	r3, #52	; 0x34
 800d786:	332c      	adds	r3, #44	; 0x2c
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fe fbdf 	bl	800bf4c <ld_dword>
 800d78e:	4602      	mov	r2, r0
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	647b      	str	r3, [r7, #68]	; 0x44
 800d79c:	e01f      	b.n	800d7de <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	891b      	ldrh	r3, [r3, #8]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d101      	bne.n	800d7aa <find_volume+0x3c2>
 800d7a6:	230d      	movs	r3, #13
 800d7a8:	e094      	b.n	800d8d4 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7b0:	441a      	add	r2, r3
 800d7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d7b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	d103      	bne.n	800d7c6 <find_volume+0x3de>
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	005b      	lsls	r3, r3, #1
 800d7c4:	e00a      	b.n	800d7dc <find_volume+0x3f4>
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	699a      	ldr	r2, [r3, #24]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	005b      	lsls	r3, r3, #1
 800d7ce:	4413      	add	r3, r2
 800d7d0:	085a      	lsrs	r2, r3, #1
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d7dc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e0:	69da      	ldr	r2, [r3, #28]
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	899b      	ldrh	r3, [r3, #12]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7ea:	440b      	add	r3, r1
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d7f0:	8989      	ldrh	r1, [r1, #12]
 800d7f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d201      	bcs.n	800d7fe <find_volume+0x416>
 800d7fa:	230d      	movs	r3, #13
 800d7fc:	e06a      	b.n	800d8d4 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d804:	615a      	str	r2, [r3, #20]
 800d806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d808:	695a      	ldr	r2, [r3, #20]
 800d80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d810:	2280      	movs	r2, #128	; 0x80
 800d812:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d814:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d818:	2b03      	cmp	r3, #3
 800d81a:	d149      	bne.n	800d8b0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81e:	3334      	adds	r3, #52	; 0x34
 800d820:	3330      	adds	r3, #48	; 0x30
 800d822:	4618      	mov	r0, r3
 800d824:	f7fe fb7a 	bl	800bf1c <ld_word>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d140      	bne.n	800d8b0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d830:	3301      	adds	r3, #1
 800d832:	4619      	mov	r1, r3
 800d834:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d836:	f7fe fde5 	bl	800c404 <move_window>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d137      	bne.n	800d8b0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	2200      	movs	r2, #0
 800d844:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d848:	3334      	adds	r3, #52	; 0x34
 800d84a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fe fb64 	bl	800bf1c <ld_word>
 800d854:	4603      	mov	r3, r0
 800d856:	461a      	mov	r2, r3
 800d858:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d127      	bne.n	800d8b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d862:	3334      	adds	r3, #52	; 0x34
 800d864:	4618      	mov	r0, r3
 800d866:	f7fe fb71 	bl	800bf4c <ld_dword>
 800d86a:	4603      	mov	r3, r0
 800d86c:	4a1b      	ldr	r2, [pc, #108]	; (800d8dc <find_volume+0x4f4>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d11e      	bne.n	800d8b0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d874:	3334      	adds	r3, #52	; 0x34
 800d876:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fe fb66 	bl	800bf4c <ld_dword>
 800d880:	4603      	mov	r3, r0
 800d882:	4a17      	ldr	r2, [pc, #92]	; (800d8e0 <find_volume+0x4f8>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d113      	bne.n	800d8b0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d88a:	3334      	adds	r3, #52	; 0x34
 800d88c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fb5b 	bl	800bf4c <ld_dword>
 800d896:	4602      	mov	r2, r0
 800d898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d89e:	3334      	adds	r3, #52	; 0x34
 800d8a0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7fe fb51 	bl	800bf4c <ld_dword>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ae:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d8b6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d8b8:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <find_volume+0x4fc>)
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	3301      	adds	r3, #1
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	4b08      	ldr	r3, [pc, #32]	; (800d8e4 <find_volume+0x4fc>)
 800d8c2:	801a      	strh	r2, [r3, #0]
 800d8c4:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <find_volume+0x4fc>)
 800d8c6:	881a      	ldrh	r2, [r3, #0]
 800d8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ca:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d8cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8ce:	f7fe fd31 	bl	800c334 <clear_lock>
#endif
	return FR_OK;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3758      	adds	r7, #88	; 0x58
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	41615252 	.word	0x41615252
 800d8e0:	61417272 	.word	0x61417272
 800d8e4:	200005f4 	.word	0x200005f4

0800d8e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d8f2:	2309      	movs	r3, #9
 800d8f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d01c      	beq.n	800d936 <validate+0x4e>
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d018      	beq.n	800d936 <validate+0x4e>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d013      	beq.n	800d936 <validate+0x4e>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	889a      	ldrh	r2, [r3, #4]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	88db      	ldrh	r3, [r3, #6]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d10c      	bne.n	800d936 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	785b      	ldrb	r3, [r3, #1]
 800d922:	4618      	mov	r0, r3
 800d924:	f7fe fa5c 	bl	800bde0 <disk_status>
 800d928:	4603      	mov	r3, r0
 800d92a:	f003 0301 	and.w	r3, r3, #1
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d101      	bne.n	800d936 <validate+0x4e>
			res = FR_OK;
 800d932:	2300      	movs	r3, #0
 800d934:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d936:	7bfb      	ldrb	r3, [r7, #15]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d102      	bne.n	800d942 <validate+0x5a>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	e000      	b.n	800d944 <validate+0x5c>
 800d942:	2300      	movs	r3, #0
 800d944:	683a      	ldr	r2, [r7, #0]
 800d946:	6013      	str	r3, [r2, #0]
	return res;
 800d948:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
	...

0800d954 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	4613      	mov	r3, r2
 800d960:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d966:	f107 0310 	add.w	r3, r7, #16
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff fca2 	bl	800d2b4 <get_ldnumber>
 800d970:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	2b00      	cmp	r3, #0
 800d976:	da01      	bge.n	800d97c <f_mount+0x28>
 800d978:	230b      	movs	r3, #11
 800d97a:	e02b      	b.n	800d9d4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d97c:	4a17      	ldr	r2, [pc, #92]	; (800d9dc <f_mount+0x88>)
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d984:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d98c:	69b8      	ldr	r0, [r7, #24]
 800d98e:	f7fe fcd1 	bl	800c334 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	2200      	movs	r2, #0
 800d996:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	490d      	ldr	r1, [pc, #52]	; (800d9dc <f_mount+0x88>)
 800d9a8:	69fb      	ldr	r3, [r7, #28]
 800d9aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <f_mount+0x66>
 800d9b4:	79fb      	ldrb	r3, [r7, #7]
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d001      	beq.n	800d9be <f_mount+0x6a>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e00a      	b.n	800d9d4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d9be:	f107 010c 	add.w	r1, r7, #12
 800d9c2:	f107 0308 	add.w	r3, r7, #8
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7ff fd0d 	bl	800d3e8 <find_volume>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3720      	adds	r7, #32
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}
 800d9dc:	200005f0 	.word	0x200005f0

0800d9e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b098      	sub	sp, #96	; 0x60
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <f_open+0x18>
 800d9f4:	2309      	movs	r3, #9
 800d9f6:	e1bb      	b.n	800dd70 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d9f8:	79fb      	ldrb	r3, [r7, #7]
 800d9fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9fe:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800da00:	79fa      	ldrb	r2, [r7, #7]
 800da02:	f107 0110 	add.w	r1, r7, #16
 800da06:	f107 0308 	add.w	r3, r7, #8
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff fcec 	bl	800d3e8 <find_volume>
 800da10:	4603      	mov	r3, r0
 800da12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800da16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	f040 819f 	bne.w	800dd5e <f_open+0x37e>
		dj.obj.fs = fs;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800da24:	68ba      	ldr	r2, [r7, #8]
 800da26:	f107 0314 	add.w	r3, r7, #20
 800da2a:	4611      	mov	r1, r2
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fbcb 	bl	800d1c8 <follow_path>
 800da32:	4603      	mov	r3, r0
 800da34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d11a      	bne.n	800da76 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800da40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da44:	b25b      	sxtb	r3, r3
 800da46:	2b00      	cmp	r3, #0
 800da48:	da03      	bge.n	800da52 <f_open+0x72>
				res = FR_INVALID_NAME;
 800da4a:	2306      	movs	r3, #6
 800da4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da50:	e011      	b.n	800da76 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800da52:	79fb      	ldrb	r3, [r7, #7]
 800da54:	f023 0301 	bic.w	r3, r3, #1
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bf14      	ite	ne
 800da5c:	2301      	movne	r3, #1
 800da5e:	2300      	moveq	r3, #0
 800da60:	b2db      	uxtb	r3, r3
 800da62:	461a      	mov	r2, r3
 800da64:	f107 0314 	add.w	r3, r7, #20
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe fb56 	bl	800c11c <chk_lock>
 800da70:	4603      	mov	r3, r0
 800da72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	f003 031c 	and.w	r3, r3, #28
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d07f      	beq.n	800db80 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800da80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da84:	2b00      	cmp	r3, #0
 800da86:	d017      	beq.n	800dab8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800da88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da8c:	2b04      	cmp	r3, #4
 800da8e:	d10e      	bne.n	800daae <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800da90:	f7fe fba0 	bl	800c1d4 <enq_lock>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d006      	beq.n	800daa8 <f_open+0xc8>
 800da9a:	f107 0314 	add.w	r3, r7, #20
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff facc 	bl	800d03c <dir_register>
 800daa4:	4603      	mov	r3, r0
 800daa6:	e000      	b.n	800daaa <f_open+0xca>
 800daa8:	2312      	movs	r3, #18
 800daaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800daae:	79fb      	ldrb	r3, [r7, #7]
 800dab0:	f043 0308 	orr.w	r3, r3, #8
 800dab4:	71fb      	strb	r3, [r7, #7]
 800dab6:	e010      	b.n	800dada <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dab8:	7ebb      	ldrb	r3, [r7, #26]
 800daba:	f003 0311 	and.w	r3, r3, #17
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <f_open+0xea>
					res = FR_DENIED;
 800dac2:	2307      	movs	r3, #7
 800dac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dac8:	e007      	b.n	800dada <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800daca:	79fb      	ldrb	r3, [r7, #7]
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <f_open+0xfa>
 800dad4:	2308      	movs	r3, #8
 800dad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d168      	bne.n	800dbb4 <f_open+0x1d4>
 800dae2:	79fb      	ldrb	r3, [r7, #7]
 800dae4:	f003 0308 	and.w	r3, r3, #8
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d063      	beq.n	800dbb4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800daec:	f7fd fff2 	bl	800bad4 <get_fattime>
 800daf0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800daf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf4:	330e      	adds	r3, #14
 800daf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800daf8:	4618      	mov	r0, r3
 800dafa:	f7fe fa65 	bl	800bfc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db00:	3316      	adds	r3, #22
 800db02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db04:	4618      	mov	r0, r3
 800db06:	f7fe fa5f 	bl	800bfc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db0c:	330b      	adds	r3, #11
 800db0e:	2220      	movs	r2, #32
 800db10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db16:	4611      	mov	r1, r2
 800db18:	4618      	mov	r0, r3
 800db1a:	f7ff f9fb 	bl	800cf14 <ld_clust>
 800db1e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800db24:	2200      	movs	r2, #0
 800db26:	4618      	mov	r0, r3
 800db28:	f7ff fa13 	bl	800cf52 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	331c      	adds	r3, #28
 800db30:	2100      	movs	r1, #0
 800db32:	4618      	mov	r0, r3
 800db34:	f7fe fa48 	bl	800bfc8 <st_dword>
					fs->wflag = 1;
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	2201      	movs	r2, #1
 800db3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db40:	2b00      	cmp	r3, #0
 800db42:	d037      	beq.n	800dbb4 <f_open+0x1d4>
						dw = fs->winsect;
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db48:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800db4a:	f107 0314 	add.w	r3, r7, #20
 800db4e:	2200      	movs	r2, #0
 800db50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800db52:	4618      	mov	r0, r3
 800db54:	f7fe ff03 	bl	800c95e <remove_chain>
 800db58:	4603      	mov	r3, r0
 800db5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800db5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db62:	2b00      	cmp	r3, #0
 800db64:	d126      	bne.n	800dbb4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe fc4a 	bl	800c404 <move_window>
 800db70:	4603      	mov	r3, r0
 800db72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db7a:	3a01      	subs	r2, #1
 800db7c:	611a      	str	r2, [r3, #16]
 800db7e:	e019      	b.n	800dbb4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800db80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db84:	2b00      	cmp	r3, #0
 800db86:	d115      	bne.n	800dbb4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800db88:	7ebb      	ldrb	r3, [r7, #26]
 800db8a:	f003 0310 	and.w	r3, r3, #16
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d003      	beq.n	800db9a <f_open+0x1ba>
					res = FR_NO_FILE;
 800db92:	2304      	movs	r3, #4
 800db94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db98:	e00c      	b.n	800dbb4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800db9a:	79fb      	ldrb	r3, [r7, #7]
 800db9c:	f003 0302 	and.w	r3, r3, #2
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d007      	beq.n	800dbb4 <f_open+0x1d4>
 800dba4:	7ebb      	ldrb	r3, [r7, #26]
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d002      	beq.n	800dbb4 <f_open+0x1d4>
						res = FR_DENIED;
 800dbae:	2307      	movs	r3, #7
 800dbb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dbb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d128      	bne.n	800dc0e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dbbc:	79fb      	ldrb	r3, [r7, #7]
 800dbbe:	f003 0308 	and.w	r3, r3, #8
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d003      	beq.n	800dbce <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dbc6:	79fb      	ldrb	r3, [r7, #7]
 800dbc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbcc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dbd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbdc:	79fb      	ldrb	r3, [r7, #7]
 800dbde:	f023 0301 	bic.w	r3, r3, #1
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	bf14      	ite	ne
 800dbe6:	2301      	movne	r3, #1
 800dbe8:	2300      	moveq	r3, #0
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	461a      	mov	r2, r3
 800dbee:	f107 0314 	add.w	r3, r7, #20
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fe fb0f 	bl	800c218 <inc_lock>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d102      	bne.n	800dc0e <f_open+0x22e>
 800dc08:	2302      	movs	r3, #2
 800dc0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f040 80a3 	bne.w	800dd5e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7ff f978 	bl	800cf14 <ld_clust>
 800dc24:	4602      	mov	r2, r0
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2c:	331c      	adds	r3, #28
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe f98c 	bl	800bf4c <ld_dword>
 800dc34:	4602      	mov	r2, r0
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc40:	693a      	ldr	r2, [r7, #16]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	88da      	ldrh	r2, [r3, #6]
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	79fa      	ldrb	r2, [r7, #7]
 800dc52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2200      	movs	r2, #0
 800dc64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	3330      	adds	r3, #48	; 0x30
 800dc6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800dc6e:	2100      	movs	r1, #0
 800dc70:	4618      	mov	r0, r3
 800dc72:	f7fe f9f6 	bl	800c062 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	f003 0320 	and.w	r3, r3, #32
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d06e      	beq.n	800dd5e <f_open+0x37e>
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d06a      	beq.n	800dd5e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	461a      	mov	r2, r3
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	899b      	ldrh	r3, [r3, #12]
 800dc9a:	fb02 f303 	mul.w	r3, r2, r3
 800dc9e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	689b      	ldr	r3, [r3, #8]
 800dca4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	657b      	str	r3, [r7, #84]	; 0x54
 800dcac:	e016      	b.n	800dcdc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe fc63 	bl	800c57e <get_fat>
 800dcb8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dcba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d802      	bhi.n	800dcc6 <f_open+0x2e6>
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dcc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dccc:	d102      	bne.n	800dcd4 <f_open+0x2f4>
 800dcce:	2301      	movs	r3, #1
 800dcd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dcd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dcd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcd8:	1ad3      	subs	r3, r2, r3
 800dcda:	657b      	str	r3, [r7, #84]	; 0x54
 800dcdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d103      	bne.n	800dcec <f_open+0x30c>
 800dce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d8e0      	bhi.n	800dcae <f_open+0x2ce>
				}
				fp->clust = clst;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dcf0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dcf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d131      	bne.n	800dd5e <f_open+0x37e>
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	899b      	ldrh	r3, [r3, #12]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd02:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd06:	fb01 f202 	mul.w	r2, r1, r2
 800dd0a:	1a9b      	subs	r3, r3, r2
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d026      	beq.n	800dd5e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd14:	4618      	mov	r0, r3
 800dd16:	f7fe fc13 	bl	800c540 <clust2sect>
 800dd1a:	6478      	str	r0, [r7, #68]	; 0x44
 800dd1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d103      	bne.n	800dd2a <f_open+0x34a>
						res = FR_INT_ERR;
 800dd22:	2302      	movs	r3, #2
 800dd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd28:	e019      	b.n	800dd5e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	899b      	ldrh	r3, [r3, #12]
 800dd2e:	461a      	mov	r2, r3
 800dd30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd32:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd38:	441a      	add	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	7858      	ldrb	r0, [r3, #1]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6a1a      	ldr	r2, [r3, #32]
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	f7fe f887 	bl	800be60 <disk_read>
 800dd52:	4603      	mov	r3, r0
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d002      	beq.n	800dd5e <f_open+0x37e>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dd5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d002      	beq.n	800dd6c <f_open+0x38c>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3760      	adds	r7, #96	; 0x60
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b08c      	sub	sp, #48	; 0x30
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f107 0210 	add.w	r2, r7, #16
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7ff fda5 	bl	800d8e8 <validate>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dda4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d107      	bne.n	800ddbc <f_write+0x44>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	7d5b      	ldrb	r3, [r3, #21]
 800ddb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ddb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <f_write+0x4a>
 800ddbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ddc0:	e16a      	b.n	800e098 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	7d1b      	ldrb	r3, [r3, #20]
 800ddc6:	f003 0302 	and.w	r3, r3, #2
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d101      	bne.n	800ddd2 <f_write+0x5a>
 800ddce:	2307      	movs	r3, #7
 800ddd0:	e162      	b.n	800e098 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	699a      	ldr	r2, [r3, #24]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	441a      	add	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	699b      	ldr	r3, [r3, #24]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	f080 814c 	bcs.w	800e07c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	699b      	ldr	r3, [r3, #24]
 800dde8:	43db      	mvns	r3, r3
 800ddea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ddec:	e146      	b.n	800e07c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	699b      	ldr	r3, [r3, #24]
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	8992      	ldrh	r2, [r2, #12]
 800ddf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ddfa:	fb01 f202 	mul.w	r2, r1, r2
 800ddfe:	1a9b      	subs	r3, r3, r2
 800de00:	2b00      	cmp	r3, #0
 800de02:	f040 80f1 	bne.w	800dfe8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	693a      	ldr	r2, [r7, #16]
 800de0c:	8992      	ldrh	r2, [r2, #12]
 800de0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	8952      	ldrh	r2, [r2, #10]
 800de16:	3a01      	subs	r2, #1
 800de18:	4013      	ands	r3, r2
 800de1a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800de1c:	69bb      	ldr	r3, [r7, #24]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d143      	bne.n	800deaa <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	699b      	ldr	r3, [r3, #24]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d10c      	bne.n	800de44 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800de30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de32:	2b00      	cmp	r3, #0
 800de34:	d11a      	bne.n	800de6c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2100      	movs	r1, #0
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fe fdf4 	bl	800ca28 <create_chain>
 800de40:	62b8      	str	r0, [r7, #40]	; 0x28
 800de42:	e013      	b.n	800de6c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d007      	beq.n	800de5c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	4619      	mov	r1, r3
 800de52:	68f8      	ldr	r0, [r7, #12]
 800de54:	f7fe fe80 	bl	800cb58 <clmt_clust>
 800de58:	62b8      	str	r0, [r7, #40]	; 0x28
 800de5a:	e007      	b.n	800de6c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	69db      	ldr	r3, [r3, #28]
 800de62:	4619      	mov	r1, r3
 800de64:	4610      	mov	r0, r2
 800de66:	f7fe fddf 	bl	800ca28 <create_chain>
 800de6a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800de6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f000 8109 	beq.w	800e086 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800de74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de76:	2b01      	cmp	r3, #1
 800de78:	d104      	bne.n	800de84 <f_write+0x10c>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2202      	movs	r2, #2
 800de7e:	755a      	strb	r2, [r3, #21]
 800de80:	2302      	movs	r3, #2
 800de82:	e109      	b.n	800e098 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de8a:	d104      	bne.n	800de96 <f_write+0x11e>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2201      	movs	r2, #1
 800de90:	755a      	strb	r2, [r3, #21]
 800de92:	2301      	movs	r3, #1
 800de94:	e100      	b.n	800e098 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de9a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d102      	bne.n	800deaa <f_write+0x132>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dea8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	7d1b      	ldrb	r3, [r3, #20]
 800deae:	b25b      	sxtb	r3, r3
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	da18      	bge.n	800dee6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	7858      	ldrb	r0, [r3, #1]
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6a1a      	ldr	r2, [r3, #32]
 800dec2:	2301      	movs	r3, #1
 800dec4:	f7fd ffec 	bl	800bea0 <disk_write>
 800dec8:	4603      	mov	r3, r0
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <f_write+0x160>
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2201      	movs	r2, #1
 800ded2:	755a      	strb	r2, [r3, #21]
 800ded4:	2301      	movs	r3, #1
 800ded6:	e0df      	b.n	800e098 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	7d1b      	ldrb	r3, [r3, #20]
 800dedc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dee6:	693a      	ldr	r2, [r7, #16]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	69db      	ldr	r3, [r3, #28]
 800deec:	4619      	mov	r1, r3
 800deee:	4610      	mov	r0, r2
 800def0:	f7fe fb26 	bl	800c540 <clust2sect>
 800def4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d104      	bne.n	800df06 <f_write+0x18e>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2202      	movs	r2, #2
 800df00:	755a      	strb	r2, [r3, #21]
 800df02:	2302      	movs	r3, #2
 800df04:	e0c8      	b.n	800e098 <f_write+0x320>
			sect += csect;
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	4413      	add	r3, r2
 800df0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	899b      	ldrh	r3, [r3, #12]
 800df12:	461a      	mov	r2, r3
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	fbb3 f3f2 	udiv	r3, r3, r2
 800df1a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d043      	beq.n	800dfaa <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df22:	69ba      	ldr	r2, [r7, #24]
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	4413      	add	r3, r2
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	8952      	ldrh	r2, [r2, #10]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d905      	bls.n	800df3c <f_write+0x1c4>
					cc = fs->csize - csect;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	895b      	ldrh	r3, [r3, #10]
 800df34:	461a      	mov	r2, r3
 800df36:	69bb      	ldr	r3, [r7, #24]
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	7858      	ldrb	r0, [r3, #1]
 800df40:	6a3b      	ldr	r3, [r7, #32]
 800df42:	697a      	ldr	r2, [r7, #20]
 800df44:	69f9      	ldr	r1, [r7, #28]
 800df46:	f7fd ffab 	bl	800bea0 <disk_write>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d004      	beq.n	800df5a <f_write+0x1e2>
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2201      	movs	r2, #1
 800df54:	755a      	strb	r2, [r3, #21]
 800df56:	2301      	movs	r3, #1
 800df58:	e09e      	b.n	800e098 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6a1a      	ldr	r2, [r3, #32]
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	1ad3      	subs	r3, r2, r3
 800df62:	6a3a      	ldr	r2, [r7, #32]
 800df64:	429a      	cmp	r2, r3
 800df66:	d918      	bls.n	800df9a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6a1a      	ldr	r2, [r3, #32]
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	693a      	ldr	r2, [r7, #16]
 800df78:	8992      	ldrh	r2, [r2, #12]
 800df7a:	fb02 f303 	mul.w	r3, r2, r3
 800df7e:	69fa      	ldr	r2, [r7, #28]
 800df80:	18d1      	adds	r1, r2, r3
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	899b      	ldrh	r3, [r3, #12]
 800df86:	461a      	mov	r2, r3
 800df88:	f7fe f84a 	bl	800c020 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	7d1b      	ldrb	r3, [r3, #20]
 800df90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df94:	b2da      	uxtb	r2, r3
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	899b      	ldrh	r3, [r3, #12]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
 800dfa2:	fb02 f303 	mul.w	r3, r2, r3
 800dfa6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800dfa8:	e04b      	b.n	800e042 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	6a1b      	ldr	r3, [r3, #32]
 800dfae:	697a      	ldr	r2, [r7, #20]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d016      	beq.n	800dfe2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	699a      	ldr	r2, [r3, #24]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d210      	bcs.n	800dfe2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	7858      	ldrb	r0, [r3, #1]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dfca:	2301      	movs	r3, #1
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	f7fd ff47 	bl	800be60 <disk_read>
 800dfd2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d004      	beq.n	800dfe2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	755a      	strb	r2, [r3, #21]
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e05a      	b.n	800e098 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	697a      	ldr	r2, [r7, #20]
 800dfe6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	899b      	ldrh	r3, [r3, #12]
 800dfec:	4618      	mov	r0, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	8992      	ldrh	r2, [r2, #12]
 800dff6:	fbb3 f1f2 	udiv	r1, r3, r2
 800dffa:	fb01 f202 	mul.w	r2, r1, r2
 800dffe:	1a9b      	subs	r3, r3, r2
 800e000:	1ac3      	subs	r3, r0, r3
 800e002:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d901      	bls.n	800e010 <f_write+0x298>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	699b      	ldr	r3, [r3, #24]
 800e01a:	693a      	ldr	r2, [r7, #16]
 800e01c:	8992      	ldrh	r2, [r2, #12]
 800e01e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e022:	fb00 f202 	mul.w	r2, r0, r2
 800e026:	1a9b      	subs	r3, r3, r2
 800e028:	440b      	add	r3, r1
 800e02a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e02c:	69f9      	ldr	r1, [r7, #28]
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fd fff6 	bl	800c020 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	7d1b      	ldrb	r3, [r3, #20]
 800e038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e03c:	b2da      	uxtb	r2, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e042:	69fa      	ldr	r2, [r7, #28]
 800e044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e046:	4413      	add	r3, r2
 800e048:	61fb      	str	r3, [r7, #28]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	699a      	ldr	r2, [r3, #24]
 800e04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e050:	441a      	add	r2, r3
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	619a      	str	r2, [r3, #24]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	68da      	ldr	r2, [r3, #12]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	699b      	ldr	r3, [r3, #24]
 800e05e:	429a      	cmp	r2, r3
 800e060:	bf38      	it	cc
 800e062:	461a      	movcc	r2, r3
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	60da      	str	r2, [r3, #12]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06e:	441a      	add	r2, r3
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	1ad3      	subs	r3, r2, r3
 800e07a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f47f aeb5 	bne.w	800ddee <f_write+0x76>
 800e084:	e000      	b.n	800e088 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e086:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	7d1b      	ldrb	r3, [r3, #20]
 800e08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e090:	b2da      	uxtb	r2, r3
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3730      	adds	r7, #48	; 0x30
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f107 0208 	add.w	r2, r7, #8
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7ff fc19 	bl	800d8e8 <validate>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0ba:	7dfb      	ldrb	r3, [r7, #23]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d168      	bne.n	800e192 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	7d1b      	ldrb	r3, [r3, #20]
 800e0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d062      	beq.n	800e192 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	7d1b      	ldrb	r3, [r3, #20]
 800e0d0:	b25b      	sxtb	r3, r3
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	da15      	bge.n	800e102 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	7858      	ldrb	r0, [r3, #1]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a1a      	ldr	r2, [r3, #32]
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	f7fd fedb 	bl	800bea0 <disk_write>
 800e0ea:	4603      	mov	r3, r0
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d001      	beq.n	800e0f4 <f_sync+0x54>
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	e04f      	b.n	800e194 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7d1b      	ldrb	r3, [r3, #20]
 800e0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e102:	f7fd fce7 	bl	800bad4 <get_fattime>
 800e106:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10e:	4619      	mov	r1, r3
 800e110:	4610      	mov	r0, r2
 800e112:	f7fe f977 	bl	800c404 <move_window>
 800e116:	4603      	mov	r3, r0
 800e118:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e11a:	7dfb      	ldrb	r3, [r7, #23]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d138      	bne.n	800e192 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e124:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	330b      	adds	r3, #11
 800e12a:	781a      	ldrb	r2, [r3, #0]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	330b      	adds	r3, #11
 800e130:	f042 0220 	orr.w	r2, r2, #32
 800e134:	b2d2      	uxtb	r2, r2
 800e136:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6818      	ldr	r0, [r3, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	461a      	mov	r2, r3
 800e142:	68f9      	ldr	r1, [r7, #12]
 800e144:	f7fe ff05 	bl	800cf52 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f103 021c 	add.w	r2, r3, #28
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	68db      	ldr	r3, [r3, #12]
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f7fd ff37 	bl	800bfc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	3316      	adds	r3, #22
 800e15e:	6939      	ldr	r1, [r7, #16]
 800e160:	4618      	mov	r0, r3
 800e162:	f7fd ff31 	bl	800bfc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	3312      	adds	r3, #18
 800e16a:	2100      	movs	r1, #0
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fd ff10 	bl	800bf92 <st_word>
					fs->wflag = 1;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2201      	movs	r2, #1
 800e176:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e178:	68bb      	ldr	r3, [r7, #8]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe f970 	bl	800c460 <sync_fs>
 800e180:	4603      	mov	r3, r0
 800e182:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d1b      	ldrb	r3, [r3, #20]
 800e188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e18c:	b2da      	uxtb	r2, r3
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e192:	7dfb      	ldrb	r3, [r7, #23]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b090      	sub	sp, #64	; 0x40
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f107 0208 	add.w	r2, r7, #8
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7ff fb9a 	bl	800d8e8 <validate>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e1ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d103      	bne.n	800e1ca <f_lseek+0x2e>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	7d5b      	ldrb	r3, [r3, #21]
 800e1c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e1ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <f_lseek+0x3c>
 800e1d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e1d6:	e201      	b.n	800e5dc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	f000 80d9 	beq.w	800e394 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1e8:	d15a      	bne.n	800e2a0 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ee:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	1d1a      	adds	r2, r3, #4
 800e1f4:	627a      	str	r2, [r7, #36]	; 0x24
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689b      	ldr	r3, [r3, #8]
 800e202:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e206:	2b00      	cmp	r3, #0
 800e208:	d03a      	beq.n	800e280 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	2300      	movs	r3, #0
 800e210:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e214:	3302      	adds	r3, #2
 800e216:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21a:	60fb      	str	r3, [r7, #12]
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	3301      	adds	r3, #1
 800e220:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e226:	4618      	mov	r0, r3
 800e228:	f7fe f9a9 	bl	800c57e <get_fat>
 800e22c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e230:	2b01      	cmp	r3, #1
 800e232:	d804      	bhi.n	800e23e <f_lseek+0xa2>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2202      	movs	r2, #2
 800e238:	755a      	strb	r2, [r3, #21]
 800e23a:	2302      	movs	r3, #2
 800e23c:	e1ce      	b.n	800e5dc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e244:	d104      	bne.n	800e250 <f_lseek+0xb4>
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2201      	movs	r2, #1
 800e24a:	755a      	strb	r2, [r3, #21]
 800e24c:	2301      	movs	r3, #1
 800e24e:	e1c5      	b.n	800e5dc <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	3301      	adds	r3, #1
 800e254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e256:	429a      	cmp	r2, r3
 800e258:	d0de      	beq.n	800e218 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e25c:	697b      	ldr	r3, [r7, #20]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d809      	bhi.n	800e276 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	1d1a      	adds	r2, r3, #4
 800e266:	627a      	str	r2, [r7, #36]	; 0x24
 800e268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26e:	1d1a      	adds	r2, r3, #4
 800e270:	627a      	str	r2, [r7, #36]	; 0x24
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d3c4      	bcc.n	800e20a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e286:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d803      	bhi.n	800e298 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
 800e296:	e19f      	b.n	800e5d8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e298:	2311      	movs	r3, #17
 800e29a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e29e:	e19b      	b.n	800e5d8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d902      	bls.n	800e2b0 <f_lseek+0x114>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	683a      	ldr	r2, [r7, #0]
 800e2b4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f000 818d 	beq.w	800e5d8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	3b01      	subs	r3, #1
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7fe fc47 	bl	800cb58 <clmt_clust>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	4610      	mov	r0, r2
 800e2da:	f7fe f931 	bl	800c540 <clust2sect>
 800e2de:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d104      	bne.n	800e2f0 <f_lseek+0x154>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	755a      	strb	r2, [r3, #21]
 800e2ec:	2302      	movs	r3, #2
 800e2ee:	e175      	b.n	800e5dc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	8992      	ldrh	r2, [r2, #12]
 800e2f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	8952      	ldrh	r2, [r2, #10]
 800e300:	3a01      	subs	r2, #1
 800e302:	4013      	ands	r3, r2
 800e304:	69ba      	ldr	r2, [r7, #24]
 800e306:	4413      	add	r3, r2
 800e308:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	68ba      	ldr	r2, [r7, #8]
 800e310:	8992      	ldrh	r2, [r2, #12]
 800e312:	fbb3 f1f2 	udiv	r1, r3, r2
 800e316:	fb01 f202 	mul.w	r2, r1, r2
 800e31a:	1a9b      	subs	r3, r3, r2
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f000 815b 	beq.w	800e5d8 <f_lseek+0x43c>
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6a1b      	ldr	r3, [r3, #32]
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	429a      	cmp	r2, r3
 800e32a:	f000 8155 	beq.w	800e5d8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	7d1b      	ldrb	r3, [r3, #20]
 800e332:	b25b      	sxtb	r3, r3
 800e334:	2b00      	cmp	r3, #0
 800e336:	da18      	bge.n	800e36a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	7858      	ldrb	r0, [r3, #1]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a1a      	ldr	r2, [r3, #32]
 800e346:	2301      	movs	r3, #1
 800e348:	f7fd fdaa 	bl	800bea0 <disk_write>
 800e34c:	4603      	mov	r3, r0
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d004      	beq.n	800e35c <f_lseek+0x1c0>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2201      	movs	r2, #1
 800e356:	755a      	strb	r2, [r3, #21]
 800e358:	2301      	movs	r3, #1
 800e35a:	e13f      	b.n	800e5dc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	7d1b      	ldrb	r3, [r3, #20]
 800e360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e364:	b2da      	uxtb	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	7858      	ldrb	r0, [r3, #1]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e374:	2301      	movs	r3, #1
 800e376:	69ba      	ldr	r2, [r7, #24]
 800e378:	f7fd fd72 	bl	800be60 <disk_read>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d004      	beq.n	800e38c <f_lseek+0x1f0>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	755a      	strb	r2, [r3, #21]
 800e388:	2301      	movs	r3, #1
 800e38a:	e127      	b.n	800e5dc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	69ba      	ldr	r2, [r7, #24]
 800e390:	621a      	str	r2, [r3, #32]
 800e392:	e121      	b.n	800e5d8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	68db      	ldr	r3, [r3, #12]
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d908      	bls.n	800e3b0 <f_lseek+0x214>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	7d1b      	ldrb	r3, [r3, #20]
 800e3a2:	f003 0302 	and.w	r3, r3, #2
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d102      	bne.n	800e3b0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	699b      	ldr	r3, [r3, #24]
 800e3b4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	637b      	str	r3, [r7, #52]	; 0x34
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3be:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	f000 80b5 	beq.w	800e532 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	895b      	ldrh	r3, [r3, #10]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	899b      	ldrh	r3, [r3, #12]
 800e3d2:	fb02 f303 	mul.w	r3, r2, r3
 800e3d6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e3d8:	6a3b      	ldr	r3, [r7, #32]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d01b      	beq.n	800e416 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	1e5a      	subs	r2, r3, #1
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	fbb2 f2f3 	udiv	r2, r2, r3
 800e3e8:	6a3b      	ldr	r3, [r7, #32]
 800e3ea:	1e59      	subs	r1, r3, #1
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d30f      	bcc.n	800e416 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	1e5a      	subs	r2, r3, #1
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	425b      	negs	r3, r3
 800e3fe:	401a      	ands	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	683a      	ldr	r2, [r7, #0]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	69db      	ldr	r3, [r3, #28]
 800e412:	63bb      	str	r3, [r7, #56]	; 0x38
 800e414:	e022      	b.n	800e45c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	689b      	ldr	r3, [r3, #8]
 800e41a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d119      	bne.n	800e456 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2100      	movs	r1, #0
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fafe 	bl	800ca28 <create_chain>
 800e42c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	2b01      	cmp	r3, #1
 800e432:	d104      	bne.n	800e43e <f_lseek+0x2a2>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2202      	movs	r2, #2
 800e438:	755a      	strb	r2, [r3, #21]
 800e43a:	2302      	movs	r3, #2
 800e43c:	e0ce      	b.n	800e5dc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e444:	d104      	bne.n	800e450 <f_lseek+0x2b4>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2201      	movs	r2, #1
 800e44a:	755a      	strb	r2, [r3, #21]
 800e44c:	2301      	movs	r3, #1
 800e44e:	e0c5      	b.n	800e5dc <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e454:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e45a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d067      	beq.n	800e532 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e462:	e03a      	b.n	800e4da <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	1ad3      	subs	r3, r2, r3
 800e46a:	603b      	str	r3, [r7, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	699a      	ldr	r2, [r3, #24]
 800e470:	69fb      	ldr	r3, [r7, #28]
 800e472:	441a      	add	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	7d1b      	ldrb	r3, [r3, #20]
 800e47c:	f003 0302 	and.w	r3, r3, #2
 800e480:	2b00      	cmp	r3, #0
 800e482:	d00b      	beq.n	800e49c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e488:	4618      	mov	r0, r3
 800e48a:	f7fe facd 	bl	800ca28 <create_chain>
 800e48e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	2b00      	cmp	r3, #0
 800e494:	d108      	bne.n	800e4a8 <f_lseek+0x30c>
							ofs = 0; break;
 800e496:	2300      	movs	r3, #0
 800e498:	603b      	str	r3, [r7, #0]
 800e49a:	e022      	b.n	800e4e2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7fe f86c 	bl	800c57e <get_fat>
 800e4a6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4ae:	d104      	bne.n	800e4ba <f_lseek+0x31e>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	755a      	strb	r2, [r3, #21]
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e090      	b.n	800e5dc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d904      	bls.n	800e4ca <f_lseek+0x32e>
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d304      	bcc.n	800e4d4 <f_lseek+0x338>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2202      	movs	r2, #2
 800e4ce:	755a      	strb	r2, [r3, #21]
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	e083      	b.n	800e5dc <f_lseek+0x440>
					fp->clust = clst;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4d8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e4da:	683a      	ldr	r2, [r7, #0]
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	d8c0      	bhi.n	800e464 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	699a      	ldr	r2, [r3, #24]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	441a      	add	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	899b      	ldrh	r3, [r3, #12]
 800e4f2:	461a      	mov	r2, r3
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4fa:	fb01 f202 	mul.w	r2, r1, r2
 800e4fe:	1a9b      	subs	r3, r3, r2
 800e500:	2b00      	cmp	r3, #0
 800e502:	d016      	beq.n	800e532 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fe f819 	bl	800c540 <clust2sect>
 800e50e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e512:	2b00      	cmp	r3, #0
 800e514:	d104      	bne.n	800e520 <f_lseek+0x384>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2202      	movs	r2, #2
 800e51a:	755a      	strb	r2, [r3, #21]
 800e51c:	2302      	movs	r3, #2
 800e51e:	e05d      	b.n	800e5dc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	899b      	ldrh	r3, [r3, #12]
 800e524:	461a      	mov	r2, r3
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	fbb3 f3f2 	udiv	r3, r3, r2
 800e52c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e52e:	4413      	add	r3, r2
 800e530:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	699a      	ldr	r2, [r3, #24]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d90a      	bls.n	800e554 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	699a      	ldr	r2, [r3, #24]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	7d1b      	ldrb	r3, [r3, #20]
 800e54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	699b      	ldr	r3, [r3, #24]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	8992      	ldrh	r2, [r2, #12]
 800e55c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e560:	fb01 f202 	mul.w	r2, r1, r2
 800e564:	1a9b      	subs	r3, r3, r2
 800e566:	2b00      	cmp	r3, #0
 800e568:	d036      	beq.n	800e5d8 <f_lseek+0x43c>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6a1b      	ldr	r3, [r3, #32]
 800e56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e570:	429a      	cmp	r2, r3
 800e572:	d031      	beq.n	800e5d8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7d1b      	ldrb	r3, [r3, #20]
 800e578:	b25b      	sxtb	r3, r3
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	da18      	bge.n	800e5b0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	7858      	ldrb	r0, [r3, #1]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6a1a      	ldr	r2, [r3, #32]
 800e58c:	2301      	movs	r3, #1
 800e58e:	f7fd fc87 	bl	800bea0 <disk_write>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d004      	beq.n	800e5a2 <f_lseek+0x406>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2201      	movs	r2, #1
 800e59c:	755a      	strb	r2, [r3, #21]
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e01c      	b.n	800e5dc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7d1b      	ldrb	r3, [r3, #20]
 800e5a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	7858      	ldrb	r0, [r3, #1]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5be:	f7fd fc4f 	bl	800be60 <disk_read>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d004      	beq.n	800e5d2 <f_lseek+0x436>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	755a      	strb	r2, [r3, #21]
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e004      	b.n	800e5dc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5d6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e5d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3740      	adds	r7, #64	; 0x40
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b087      	sub	sp, #28
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4613      	mov	r3, r2
 800e5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e5fa:	4b1f      	ldr	r3, [pc, #124]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e5fc:	7a5b      	ldrb	r3, [r3, #9]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	d131      	bne.n	800e668 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e604:	4b1c      	ldr	r3, [pc, #112]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e606:	7a5b      	ldrb	r3, [r3, #9]
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	461a      	mov	r2, r3
 800e60c:	4b1a      	ldr	r3, [pc, #104]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e60e:	2100      	movs	r1, #0
 800e610:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e612:	4b19      	ldr	r3, [pc, #100]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e614:	7a5b      	ldrb	r3, [r3, #9]
 800e616:	b2db      	uxtb	r3, r3
 800e618:	4a17      	ldr	r2, [pc, #92]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	4413      	add	r3, r2
 800e61e:	68fa      	ldr	r2, [r7, #12]
 800e620:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e622:	4b15      	ldr	r3, [pc, #84]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e624:	7a5b      	ldrb	r3, [r3, #9]
 800e626:	b2db      	uxtb	r3, r3
 800e628:	461a      	mov	r2, r3
 800e62a:	4b13      	ldr	r3, [pc, #76]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e62c:	4413      	add	r3, r2
 800e62e:	79fa      	ldrb	r2, [r7, #7]
 800e630:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e632:	4b11      	ldr	r3, [pc, #68]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e634:	7a5b      	ldrb	r3, [r3, #9]
 800e636:	b2db      	uxtb	r3, r3
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	b2d1      	uxtb	r1, r2
 800e63c:	4a0e      	ldr	r2, [pc, #56]	; (800e678 <FATFS_LinkDriverEx+0x94>)
 800e63e:	7251      	strb	r1, [r2, #9]
 800e640:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e642:	7dbb      	ldrb	r3, [r7, #22]
 800e644:	3330      	adds	r3, #48	; 0x30
 800e646:	b2da      	uxtb	r2, r3
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	3301      	adds	r3, #1
 800e650:	223a      	movs	r2, #58	; 0x3a
 800e652:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	3302      	adds	r3, #2
 800e658:	222f      	movs	r2, #47	; 0x2f
 800e65a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	3303      	adds	r3, #3
 800e660:	2200      	movs	r2, #0
 800e662:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e664:	2300      	movs	r3, #0
 800e666:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e668:	7dfb      	ldrb	r3, [r7, #23]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	371c      	adds	r7, #28
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	20000618 	.word	0x20000618

0800e67c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
 800e684:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e686:	2200      	movs	r2, #0
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff ffaa 	bl	800e5e4 <FATFS_LinkDriverEx>
 800e690:	4603      	mov	r3, r0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <__errno>:
 800e69c:	4b01      	ldr	r3, [pc, #4]	; (800e6a4 <__errno+0x8>)
 800e69e:	6818      	ldr	r0, [r3, #0]
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	20000024 	.word	0x20000024

0800e6a8 <__libc_init_array>:
 800e6a8:	b570      	push	{r4, r5, r6, lr}
 800e6aa:	4d0d      	ldr	r5, [pc, #52]	; (800e6e0 <__libc_init_array+0x38>)
 800e6ac:	4c0d      	ldr	r4, [pc, #52]	; (800e6e4 <__libc_init_array+0x3c>)
 800e6ae:	1b64      	subs	r4, r4, r5
 800e6b0:	10a4      	asrs	r4, r4, #2
 800e6b2:	2600      	movs	r6, #0
 800e6b4:	42a6      	cmp	r6, r4
 800e6b6:	d109      	bne.n	800e6cc <__libc_init_array+0x24>
 800e6b8:	4d0b      	ldr	r5, [pc, #44]	; (800e6e8 <__libc_init_array+0x40>)
 800e6ba:	4c0c      	ldr	r4, [pc, #48]	; (800e6ec <__libc_init_array+0x44>)
 800e6bc:	f004 fb08 	bl	8012cd0 <_init>
 800e6c0:	1b64      	subs	r4, r4, r5
 800e6c2:	10a4      	asrs	r4, r4, #2
 800e6c4:	2600      	movs	r6, #0
 800e6c6:	42a6      	cmp	r6, r4
 800e6c8:	d105      	bne.n	800e6d6 <__libc_init_array+0x2e>
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
 800e6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6d0:	4798      	blx	r3
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	e7ee      	b.n	800e6b4 <__libc_init_array+0xc>
 800e6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6da:	4798      	blx	r3
 800e6dc:	3601      	adds	r6, #1
 800e6de:	e7f2      	b.n	800e6c6 <__libc_init_array+0x1e>
 800e6e0:	08013448 	.word	0x08013448
 800e6e4:	08013448 	.word	0x08013448
 800e6e8:	08013448 	.word	0x08013448
 800e6ec:	0801344c 	.word	0x0801344c

0800e6f0 <memset>:
 800e6f0:	4402      	add	r2, r0
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d100      	bne.n	800e6fa <memset+0xa>
 800e6f8:	4770      	bx	lr
 800e6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800e6fe:	e7f9      	b.n	800e6f4 <memset+0x4>

0800e700 <__cvt>:
 800e700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e704:	ec55 4b10 	vmov	r4, r5, d0
 800e708:	2d00      	cmp	r5, #0
 800e70a:	460e      	mov	r6, r1
 800e70c:	4619      	mov	r1, r3
 800e70e:	462b      	mov	r3, r5
 800e710:	bfbb      	ittet	lt
 800e712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e716:	461d      	movlt	r5, r3
 800e718:	2300      	movge	r3, #0
 800e71a:	232d      	movlt	r3, #45	; 0x2d
 800e71c:	700b      	strb	r3, [r1, #0]
 800e71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e720:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e724:	4691      	mov	r9, r2
 800e726:	f023 0820 	bic.w	r8, r3, #32
 800e72a:	bfbc      	itt	lt
 800e72c:	4622      	movlt	r2, r4
 800e72e:	4614      	movlt	r4, r2
 800e730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e734:	d005      	beq.n	800e742 <__cvt+0x42>
 800e736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e73a:	d100      	bne.n	800e73e <__cvt+0x3e>
 800e73c:	3601      	adds	r6, #1
 800e73e:	2102      	movs	r1, #2
 800e740:	e000      	b.n	800e744 <__cvt+0x44>
 800e742:	2103      	movs	r1, #3
 800e744:	ab03      	add	r3, sp, #12
 800e746:	9301      	str	r3, [sp, #4]
 800e748:	ab02      	add	r3, sp, #8
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	ec45 4b10 	vmov	d0, r4, r5
 800e750:	4653      	mov	r3, sl
 800e752:	4632      	mov	r2, r6
 800e754:	f000 fcec 	bl	800f130 <_dtoa_r>
 800e758:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e75c:	4607      	mov	r7, r0
 800e75e:	d102      	bne.n	800e766 <__cvt+0x66>
 800e760:	f019 0f01 	tst.w	r9, #1
 800e764:	d022      	beq.n	800e7ac <__cvt+0xac>
 800e766:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e76a:	eb07 0906 	add.w	r9, r7, r6
 800e76e:	d110      	bne.n	800e792 <__cvt+0x92>
 800e770:	783b      	ldrb	r3, [r7, #0]
 800e772:	2b30      	cmp	r3, #48	; 0x30
 800e774:	d10a      	bne.n	800e78c <__cvt+0x8c>
 800e776:	2200      	movs	r2, #0
 800e778:	2300      	movs	r3, #0
 800e77a:	4620      	mov	r0, r4
 800e77c:	4629      	mov	r1, r5
 800e77e:	f7f2 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 800e782:	b918      	cbnz	r0, 800e78c <__cvt+0x8c>
 800e784:	f1c6 0601 	rsb	r6, r6, #1
 800e788:	f8ca 6000 	str.w	r6, [sl]
 800e78c:	f8da 3000 	ldr.w	r3, [sl]
 800e790:	4499      	add	r9, r3
 800e792:	2200      	movs	r2, #0
 800e794:	2300      	movs	r3, #0
 800e796:	4620      	mov	r0, r4
 800e798:	4629      	mov	r1, r5
 800e79a:	f7f2 f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e79e:	b108      	cbz	r0, 800e7a4 <__cvt+0xa4>
 800e7a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7a4:	2230      	movs	r2, #48	; 0x30
 800e7a6:	9b03      	ldr	r3, [sp, #12]
 800e7a8:	454b      	cmp	r3, r9
 800e7aa:	d307      	bcc.n	800e7bc <__cvt+0xbc>
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7b0:	1bdb      	subs	r3, r3, r7
 800e7b2:	4638      	mov	r0, r7
 800e7b4:	6013      	str	r3, [r2, #0]
 800e7b6:	b004      	add	sp, #16
 800e7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7bc:	1c59      	adds	r1, r3, #1
 800e7be:	9103      	str	r1, [sp, #12]
 800e7c0:	701a      	strb	r2, [r3, #0]
 800e7c2:	e7f0      	b.n	800e7a6 <__cvt+0xa6>

0800e7c4 <__exponent>:
 800e7c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	bfb8      	it	lt
 800e7cc:	4249      	neglt	r1, r1
 800e7ce:	f803 2b02 	strb.w	r2, [r3], #2
 800e7d2:	bfb4      	ite	lt
 800e7d4:	222d      	movlt	r2, #45	; 0x2d
 800e7d6:	222b      	movge	r2, #43	; 0x2b
 800e7d8:	2909      	cmp	r1, #9
 800e7da:	7042      	strb	r2, [r0, #1]
 800e7dc:	dd2a      	ble.n	800e834 <__exponent+0x70>
 800e7de:	f10d 0407 	add.w	r4, sp, #7
 800e7e2:	46a4      	mov	ip, r4
 800e7e4:	270a      	movs	r7, #10
 800e7e6:	46a6      	mov	lr, r4
 800e7e8:	460a      	mov	r2, r1
 800e7ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7ee:	fb07 1516 	mls	r5, r7, r6, r1
 800e7f2:	3530      	adds	r5, #48	; 0x30
 800e7f4:	2a63      	cmp	r2, #99	; 0x63
 800e7f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e7fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7fe:	4631      	mov	r1, r6
 800e800:	dcf1      	bgt.n	800e7e6 <__exponent+0x22>
 800e802:	3130      	adds	r1, #48	; 0x30
 800e804:	f1ae 0502 	sub.w	r5, lr, #2
 800e808:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e80c:	1c44      	adds	r4, r0, #1
 800e80e:	4629      	mov	r1, r5
 800e810:	4561      	cmp	r1, ip
 800e812:	d30a      	bcc.n	800e82a <__exponent+0x66>
 800e814:	f10d 0209 	add.w	r2, sp, #9
 800e818:	eba2 020e 	sub.w	r2, r2, lr
 800e81c:	4565      	cmp	r5, ip
 800e81e:	bf88      	it	hi
 800e820:	2200      	movhi	r2, #0
 800e822:	4413      	add	r3, r2
 800e824:	1a18      	subs	r0, r3, r0
 800e826:	b003      	add	sp, #12
 800e828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e82e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e832:	e7ed      	b.n	800e810 <__exponent+0x4c>
 800e834:	2330      	movs	r3, #48	; 0x30
 800e836:	3130      	adds	r1, #48	; 0x30
 800e838:	7083      	strb	r3, [r0, #2]
 800e83a:	70c1      	strb	r1, [r0, #3]
 800e83c:	1d03      	adds	r3, r0, #4
 800e83e:	e7f1      	b.n	800e824 <__exponent+0x60>

0800e840 <_printf_float>:
 800e840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e844:	ed2d 8b02 	vpush	{d8}
 800e848:	b08d      	sub	sp, #52	; 0x34
 800e84a:	460c      	mov	r4, r1
 800e84c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e850:	4616      	mov	r6, r2
 800e852:	461f      	mov	r7, r3
 800e854:	4605      	mov	r5, r0
 800e856:	f001 fa59 	bl	800fd0c <_localeconv_r>
 800e85a:	f8d0 a000 	ldr.w	sl, [r0]
 800e85e:	4650      	mov	r0, sl
 800e860:	f7f1 fcbe 	bl	80001e0 <strlen>
 800e864:	2300      	movs	r3, #0
 800e866:	930a      	str	r3, [sp, #40]	; 0x28
 800e868:	6823      	ldr	r3, [r4, #0]
 800e86a:	9305      	str	r3, [sp, #20]
 800e86c:	f8d8 3000 	ldr.w	r3, [r8]
 800e870:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e874:	3307      	adds	r3, #7
 800e876:	f023 0307 	bic.w	r3, r3, #7
 800e87a:	f103 0208 	add.w	r2, r3, #8
 800e87e:	f8c8 2000 	str.w	r2, [r8]
 800e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e886:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e88a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e88e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e892:	9307      	str	r3, [sp, #28]
 800e894:	f8cd 8018 	str.w	r8, [sp, #24]
 800e898:	ee08 0a10 	vmov	s16, r0
 800e89c:	4b9f      	ldr	r3, [pc, #636]	; (800eb1c <_printf_float+0x2dc>)
 800e89e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8a6:	f7f2 f949 	bl	8000b3c <__aeabi_dcmpun>
 800e8aa:	bb88      	cbnz	r0, 800e910 <_printf_float+0xd0>
 800e8ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8b0:	4b9a      	ldr	r3, [pc, #616]	; (800eb1c <_printf_float+0x2dc>)
 800e8b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8b6:	f7f2 f923 	bl	8000b00 <__aeabi_dcmple>
 800e8ba:	bb48      	cbnz	r0, 800e910 <_printf_float+0xd0>
 800e8bc:	2200      	movs	r2, #0
 800e8be:	2300      	movs	r3, #0
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	4649      	mov	r1, r9
 800e8c4:	f7f2 f912 	bl	8000aec <__aeabi_dcmplt>
 800e8c8:	b110      	cbz	r0, 800e8d0 <_printf_float+0x90>
 800e8ca:	232d      	movs	r3, #45	; 0x2d
 800e8cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8d0:	4b93      	ldr	r3, [pc, #588]	; (800eb20 <_printf_float+0x2e0>)
 800e8d2:	4894      	ldr	r0, [pc, #592]	; (800eb24 <_printf_float+0x2e4>)
 800e8d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e8d8:	bf94      	ite	ls
 800e8da:	4698      	movls	r8, r3
 800e8dc:	4680      	movhi	r8, r0
 800e8de:	2303      	movs	r3, #3
 800e8e0:	6123      	str	r3, [r4, #16]
 800e8e2:	9b05      	ldr	r3, [sp, #20]
 800e8e4:	f023 0204 	bic.w	r2, r3, #4
 800e8e8:	6022      	str	r2, [r4, #0]
 800e8ea:	f04f 0900 	mov.w	r9, #0
 800e8ee:	9700      	str	r7, [sp, #0]
 800e8f0:	4633      	mov	r3, r6
 800e8f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	f000 f9d8 	bl	800ecac <_printf_common>
 800e8fc:	3001      	adds	r0, #1
 800e8fe:	f040 8090 	bne.w	800ea22 <_printf_float+0x1e2>
 800e902:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e906:	b00d      	add	sp, #52	; 0x34
 800e908:	ecbd 8b02 	vpop	{d8}
 800e90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e910:	4642      	mov	r2, r8
 800e912:	464b      	mov	r3, r9
 800e914:	4640      	mov	r0, r8
 800e916:	4649      	mov	r1, r9
 800e918:	f7f2 f910 	bl	8000b3c <__aeabi_dcmpun>
 800e91c:	b140      	cbz	r0, 800e930 <_printf_float+0xf0>
 800e91e:	464b      	mov	r3, r9
 800e920:	2b00      	cmp	r3, #0
 800e922:	bfbc      	itt	lt
 800e924:	232d      	movlt	r3, #45	; 0x2d
 800e926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e92a:	487f      	ldr	r0, [pc, #508]	; (800eb28 <_printf_float+0x2e8>)
 800e92c:	4b7f      	ldr	r3, [pc, #508]	; (800eb2c <_printf_float+0x2ec>)
 800e92e:	e7d1      	b.n	800e8d4 <_printf_float+0x94>
 800e930:	6863      	ldr	r3, [r4, #4]
 800e932:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e936:	9206      	str	r2, [sp, #24]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	d13f      	bne.n	800e9bc <_printf_float+0x17c>
 800e93c:	2306      	movs	r3, #6
 800e93e:	6063      	str	r3, [r4, #4]
 800e940:	9b05      	ldr	r3, [sp, #20]
 800e942:	6861      	ldr	r1, [r4, #4]
 800e944:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e948:	2300      	movs	r3, #0
 800e94a:	9303      	str	r3, [sp, #12]
 800e94c:	ab0a      	add	r3, sp, #40	; 0x28
 800e94e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e952:	ab09      	add	r3, sp, #36	; 0x24
 800e954:	ec49 8b10 	vmov	d0, r8, r9
 800e958:	9300      	str	r3, [sp, #0]
 800e95a:	6022      	str	r2, [r4, #0]
 800e95c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e960:	4628      	mov	r0, r5
 800e962:	f7ff fecd 	bl	800e700 <__cvt>
 800e966:	9b06      	ldr	r3, [sp, #24]
 800e968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e96a:	2b47      	cmp	r3, #71	; 0x47
 800e96c:	4680      	mov	r8, r0
 800e96e:	d108      	bne.n	800e982 <_printf_float+0x142>
 800e970:	1cc8      	adds	r0, r1, #3
 800e972:	db02      	blt.n	800e97a <_printf_float+0x13a>
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	4299      	cmp	r1, r3
 800e978:	dd41      	ble.n	800e9fe <_printf_float+0x1be>
 800e97a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e97e:	fa5f fb8b 	uxtb.w	fp, fp
 800e982:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e986:	d820      	bhi.n	800e9ca <_printf_float+0x18a>
 800e988:	3901      	subs	r1, #1
 800e98a:	465a      	mov	r2, fp
 800e98c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e990:	9109      	str	r1, [sp, #36]	; 0x24
 800e992:	f7ff ff17 	bl	800e7c4 <__exponent>
 800e996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e998:	1813      	adds	r3, r2, r0
 800e99a:	2a01      	cmp	r2, #1
 800e99c:	4681      	mov	r9, r0
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	dc02      	bgt.n	800e9a8 <_printf_float+0x168>
 800e9a2:	6822      	ldr	r2, [r4, #0]
 800e9a4:	07d2      	lsls	r2, r2, #31
 800e9a6:	d501      	bpl.n	800e9ac <_printf_float+0x16c>
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d09c      	beq.n	800e8ee <_printf_float+0xae>
 800e9b4:	232d      	movs	r3, #45	; 0x2d
 800e9b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9ba:	e798      	b.n	800e8ee <_printf_float+0xae>
 800e9bc:	9a06      	ldr	r2, [sp, #24]
 800e9be:	2a47      	cmp	r2, #71	; 0x47
 800e9c0:	d1be      	bne.n	800e940 <_printf_float+0x100>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1bc      	bne.n	800e940 <_printf_float+0x100>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e7b9      	b.n	800e93e <_printf_float+0xfe>
 800e9ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e9ce:	d118      	bne.n	800ea02 <_printf_float+0x1c2>
 800e9d0:	2900      	cmp	r1, #0
 800e9d2:	6863      	ldr	r3, [r4, #4]
 800e9d4:	dd0b      	ble.n	800e9ee <_printf_float+0x1ae>
 800e9d6:	6121      	str	r1, [r4, #16]
 800e9d8:	b913      	cbnz	r3, 800e9e0 <_printf_float+0x1a0>
 800e9da:	6822      	ldr	r2, [r4, #0]
 800e9dc:	07d0      	lsls	r0, r2, #31
 800e9de:	d502      	bpl.n	800e9e6 <_printf_float+0x1a6>
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	440b      	add	r3, r1
 800e9e4:	6123      	str	r3, [r4, #16]
 800e9e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9e8:	f04f 0900 	mov.w	r9, #0
 800e9ec:	e7de      	b.n	800e9ac <_printf_float+0x16c>
 800e9ee:	b913      	cbnz	r3, 800e9f6 <_printf_float+0x1b6>
 800e9f0:	6822      	ldr	r2, [r4, #0]
 800e9f2:	07d2      	lsls	r2, r2, #31
 800e9f4:	d501      	bpl.n	800e9fa <_printf_float+0x1ba>
 800e9f6:	3302      	adds	r3, #2
 800e9f8:	e7f4      	b.n	800e9e4 <_printf_float+0x1a4>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e7f2      	b.n	800e9e4 <_printf_float+0x1a4>
 800e9fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ea02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea04:	4299      	cmp	r1, r3
 800ea06:	db05      	blt.n	800ea14 <_printf_float+0x1d4>
 800ea08:	6823      	ldr	r3, [r4, #0]
 800ea0a:	6121      	str	r1, [r4, #16]
 800ea0c:	07d8      	lsls	r0, r3, #31
 800ea0e:	d5ea      	bpl.n	800e9e6 <_printf_float+0x1a6>
 800ea10:	1c4b      	adds	r3, r1, #1
 800ea12:	e7e7      	b.n	800e9e4 <_printf_float+0x1a4>
 800ea14:	2900      	cmp	r1, #0
 800ea16:	bfd4      	ite	le
 800ea18:	f1c1 0202 	rsble	r2, r1, #2
 800ea1c:	2201      	movgt	r2, #1
 800ea1e:	4413      	add	r3, r2
 800ea20:	e7e0      	b.n	800e9e4 <_printf_float+0x1a4>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	055a      	lsls	r2, r3, #21
 800ea26:	d407      	bmi.n	800ea38 <_printf_float+0x1f8>
 800ea28:	6923      	ldr	r3, [r4, #16]
 800ea2a:	4642      	mov	r2, r8
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	47b8      	blx	r7
 800ea32:	3001      	adds	r0, #1
 800ea34:	d12c      	bne.n	800ea90 <_printf_float+0x250>
 800ea36:	e764      	b.n	800e902 <_printf_float+0xc2>
 800ea38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea3c:	f240 80e0 	bls.w	800ec00 <_printf_float+0x3c0>
 800ea40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea44:	2200      	movs	r2, #0
 800ea46:	2300      	movs	r3, #0
 800ea48:	f7f2 f846 	bl	8000ad8 <__aeabi_dcmpeq>
 800ea4c:	2800      	cmp	r0, #0
 800ea4e:	d034      	beq.n	800eaba <_printf_float+0x27a>
 800ea50:	4a37      	ldr	r2, [pc, #220]	; (800eb30 <_printf_float+0x2f0>)
 800ea52:	2301      	movs	r3, #1
 800ea54:	4631      	mov	r1, r6
 800ea56:	4628      	mov	r0, r5
 800ea58:	47b8      	blx	r7
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	f43f af51 	beq.w	800e902 <_printf_float+0xc2>
 800ea60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea64:	429a      	cmp	r2, r3
 800ea66:	db02      	blt.n	800ea6e <_printf_float+0x22e>
 800ea68:	6823      	ldr	r3, [r4, #0]
 800ea6a:	07d8      	lsls	r0, r3, #31
 800ea6c:	d510      	bpl.n	800ea90 <_printf_float+0x250>
 800ea6e:	ee18 3a10 	vmov	r3, s16
 800ea72:	4652      	mov	r2, sl
 800ea74:	4631      	mov	r1, r6
 800ea76:	4628      	mov	r0, r5
 800ea78:	47b8      	blx	r7
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	f43f af41 	beq.w	800e902 <_printf_float+0xc2>
 800ea80:	f04f 0800 	mov.w	r8, #0
 800ea84:	f104 091a 	add.w	r9, r4, #26
 800ea88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea8a:	3b01      	subs	r3, #1
 800ea8c:	4543      	cmp	r3, r8
 800ea8e:	dc09      	bgt.n	800eaa4 <_printf_float+0x264>
 800ea90:	6823      	ldr	r3, [r4, #0]
 800ea92:	079b      	lsls	r3, r3, #30
 800ea94:	f100 8105 	bmi.w	800eca2 <_printf_float+0x462>
 800ea98:	68e0      	ldr	r0, [r4, #12]
 800ea9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea9c:	4298      	cmp	r0, r3
 800ea9e:	bfb8      	it	lt
 800eaa0:	4618      	movlt	r0, r3
 800eaa2:	e730      	b.n	800e906 <_printf_float+0xc6>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	464a      	mov	r2, r9
 800eaa8:	4631      	mov	r1, r6
 800eaaa:	4628      	mov	r0, r5
 800eaac:	47b8      	blx	r7
 800eaae:	3001      	adds	r0, #1
 800eab0:	f43f af27 	beq.w	800e902 <_printf_float+0xc2>
 800eab4:	f108 0801 	add.w	r8, r8, #1
 800eab8:	e7e6      	b.n	800ea88 <_printf_float+0x248>
 800eaba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	dc39      	bgt.n	800eb34 <_printf_float+0x2f4>
 800eac0:	4a1b      	ldr	r2, [pc, #108]	; (800eb30 <_printf_float+0x2f0>)
 800eac2:	2301      	movs	r3, #1
 800eac4:	4631      	mov	r1, r6
 800eac6:	4628      	mov	r0, r5
 800eac8:	47b8      	blx	r7
 800eaca:	3001      	adds	r0, #1
 800eacc:	f43f af19 	beq.w	800e902 <_printf_float+0xc2>
 800ead0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ead4:	4313      	orrs	r3, r2
 800ead6:	d102      	bne.n	800eade <_printf_float+0x29e>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	07d9      	lsls	r1, r3, #31
 800eadc:	d5d8      	bpl.n	800ea90 <_printf_float+0x250>
 800eade:	ee18 3a10 	vmov	r3, s16
 800eae2:	4652      	mov	r2, sl
 800eae4:	4631      	mov	r1, r6
 800eae6:	4628      	mov	r0, r5
 800eae8:	47b8      	blx	r7
 800eaea:	3001      	adds	r0, #1
 800eaec:	f43f af09 	beq.w	800e902 <_printf_float+0xc2>
 800eaf0:	f04f 0900 	mov.w	r9, #0
 800eaf4:	f104 0a1a 	add.w	sl, r4, #26
 800eaf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafa:	425b      	negs	r3, r3
 800eafc:	454b      	cmp	r3, r9
 800eafe:	dc01      	bgt.n	800eb04 <_printf_float+0x2c4>
 800eb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb02:	e792      	b.n	800ea2a <_printf_float+0x1ea>
 800eb04:	2301      	movs	r3, #1
 800eb06:	4652      	mov	r2, sl
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f43f aef7 	beq.w	800e902 <_printf_float+0xc2>
 800eb14:	f109 0901 	add.w	r9, r9, #1
 800eb18:	e7ee      	b.n	800eaf8 <_printf_float+0x2b8>
 800eb1a:	bf00      	nop
 800eb1c:	7fefffff 	.word	0x7fefffff
 800eb20:	08012ffc 	.word	0x08012ffc
 800eb24:	08013000 	.word	0x08013000
 800eb28:	08013008 	.word	0x08013008
 800eb2c:	08013004 	.word	0x08013004
 800eb30:	0801300c 	.word	0x0801300c
 800eb34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	bfa8      	it	ge
 800eb3c:	461a      	movge	r2, r3
 800eb3e:	2a00      	cmp	r2, #0
 800eb40:	4691      	mov	r9, r2
 800eb42:	dc37      	bgt.n	800ebb4 <_printf_float+0x374>
 800eb44:	f04f 0b00 	mov.w	fp, #0
 800eb48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb4c:	f104 021a 	add.w	r2, r4, #26
 800eb50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb52:	9305      	str	r3, [sp, #20]
 800eb54:	eba3 0309 	sub.w	r3, r3, r9
 800eb58:	455b      	cmp	r3, fp
 800eb5a:	dc33      	bgt.n	800ebc4 <_printf_float+0x384>
 800eb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb60:	429a      	cmp	r2, r3
 800eb62:	db3b      	blt.n	800ebdc <_printf_float+0x39c>
 800eb64:	6823      	ldr	r3, [r4, #0]
 800eb66:	07da      	lsls	r2, r3, #31
 800eb68:	d438      	bmi.n	800ebdc <_printf_float+0x39c>
 800eb6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb6c:	9a05      	ldr	r2, [sp, #20]
 800eb6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb70:	1a9a      	subs	r2, r3, r2
 800eb72:	eba3 0901 	sub.w	r9, r3, r1
 800eb76:	4591      	cmp	r9, r2
 800eb78:	bfa8      	it	ge
 800eb7a:	4691      	movge	r9, r2
 800eb7c:	f1b9 0f00 	cmp.w	r9, #0
 800eb80:	dc35      	bgt.n	800ebee <_printf_float+0x3ae>
 800eb82:	f04f 0800 	mov.w	r8, #0
 800eb86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb8a:	f104 0a1a 	add.w	sl, r4, #26
 800eb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb92:	1a9b      	subs	r3, r3, r2
 800eb94:	eba3 0309 	sub.w	r3, r3, r9
 800eb98:	4543      	cmp	r3, r8
 800eb9a:	f77f af79 	ble.w	800ea90 <_printf_float+0x250>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	4652      	mov	r2, sl
 800eba2:	4631      	mov	r1, r6
 800eba4:	4628      	mov	r0, r5
 800eba6:	47b8      	blx	r7
 800eba8:	3001      	adds	r0, #1
 800ebaa:	f43f aeaa 	beq.w	800e902 <_printf_float+0xc2>
 800ebae:	f108 0801 	add.w	r8, r8, #1
 800ebb2:	e7ec      	b.n	800eb8e <_printf_float+0x34e>
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	4631      	mov	r1, r6
 800ebb8:	4642      	mov	r2, r8
 800ebba:	4628      	mov	r0, r5
 800ebbc:	47b8      	blx	r7
 800ebbe:	3001      	adds	r0, #1
 800ebc0:	d1c0      	bne.n	800eb44 <_printf_float+0x304>
 800ebc2:	e69e      	b.n	800e902 <_printf_float+0xc2>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4628      	mov	r0, r5
 800ebca:	9205      	str	r2, [sp, #20]
 800ebcc:	47b8      	blx	r7
 800ebce:	3001      	adds	r0, #1
 800ebd0:	f43f ae97 	beq.w	800e902 <_printf_float+0xc2>
 800ebd4:	9a05      	ldr	r2, [sp, #20]
 800ebd6:	f10b 0b01 	add.w	fp, fp, #1
 800ebda:	e7b9      	b.n	800eb50 <_printf_float+0x310>
 800ebdc:	ee18 3a10 	vmov	r3, s16
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	47b8      	blx	r7
 800ebe8:	3001      	adds	r0, #1
 800ebea:	d1be      	bne.n	800eb6a <_printf_float+0x32a>
 800ebec:	e689      	b.n	800e902 <_printf_float+0xc2>
 800ebee:	9a05      	ldr	r2, [sp, #20]
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	4442      	add	r2, r8
 800ebf4:	4631      	mov	r1, r6
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	47b8      	blx	r7
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	d1c1      	bne.n	800eb82 <_printf_float+0x342>
 800ebfe:	e680      	b.n	800e902 <_printf_float+0xc2>
 800ec00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec02:	2a01      	cmp	r2, #1
 800ec04:	dc01      	bgt.n	800ec0a <_printf_float+0x3ca>
 800ec06:	07db      	lsls	r3, r3, #31
 800ec08:	d538      	bpl.n	800ec7c <_printf_float+0x43c>
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	4642      	mov	r2, r8
 800ec0e:	4631      	mov	r1, r6
 800ec10:	4628      	mov	r0, r5
 800ec12:	47b8      	blx	r7
 800ec14:	3001      	adds	r0, #1
 800ec16:	f43f ae74 	beq.w	800e902 <_printf_float+0xc2>
 800ec1a:	ee18 3a10 	vmov	r3, s16
 800ec1e:	4652      	mov	r2, sl
 800ec20:	4631      	mov	r1, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b8      	blx	r7
 800ec26:	3001      	adds	r0, #1
 800ec28:	f43f ae6b 	beq.w	800e902 <_printf_float+0xc2>
 800ec2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec30:	2200      	movs	r2, #0
 800ec32:	2300      	movs	r3, #0
 800ec34:	f7f1 ff50 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec38:	b9d8      	cbnz	r0, 800ec72 <_printf_float+0x432>
 800ec3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec3c:	f108 0201 	add.w	r2, r8, #1
 800ec40:	3b01      	subs	r3, #1
 800ec42:	4631      	mov	r1, r6
 800ec44:	4628      	mov	r0, r5
 800ec46:	47b8      	blx	r7
 800ec48:	3001      	adds	r0, #1
 800ec4a:	d10e      	bne.n	800ec6a <_printf_float+0x42a>
 800ec4c:	e659      	b.n	800e902 <_printf_float+0xc2>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	4652      	mov	r2, sl
 800ec52:	4631      	mov	r1, r6
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b8      	blx	r7
 800ec58:	3001      	adds	r0, #1
 800ec5a:	f43f ae52 	beq.w	800e902 <_printf_float+0xc2>
 800ec5e:	f108 0801 	add.w	r8, r8, #1
 800ec62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec64:	3b01      	subs	r3, #1
 800ec66:	4543      	cmp	r3, r8
 800ec68:	dcf1      	bgt.n	800ec4e <_printf_float+0x40e>
 800ec6a:	464b      	mov	r3, r9
 800ec6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec70:	e6dc      	b.n	800ea2c <_printf_float+0x1ec>
 800ec72:	f04f 0800 	mov.w	r8, #0
 800ec76:	f104 0a1a 	add.w	sl, r4, #26
 800ec7a:	e7f2      	b.n	800ec62 <_printf_float+0x422>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	4642      	mov	r2, r8
 800ec80:	e7df      	b.n	800ec42 <_printf_float+0x402>
 800ec82:	2301      	movs	r3, #1
 800ec84:	464a      	mov	r2, r9
 800ec86:	4631      	mov	r1, r6
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b8      	blx	r7
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	f43f ae38 	beq.w	800e902 <_printf_float+0xc2>
 800ec92:	f108 0801 	add.w	r8, r8, #1
 800ec96:	68e3      	ldr	r3, [r4, #12]
 800ec98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ec9a:	1a5b      	subs	r3, r3, r1
 800ec9c:	4543      	cmp	r3, r8
 800ec9e:	dcf0      	bgt.n	800ec82 <_printf_float+0x442>
 800eca0:	e6fa      	b.n	800ea98 <_printf_float+0x258>
 800eca2:	f04f 0800 	mov.w	r8, #0
 800eca6:	f104 0919 	add.w	r9, r4, #25
 800ecaa:	e7f4      	b.n	800ec96 <_printf_float+0x456>

0800ecac <_printf_common>:
 800ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	4699      	mov	r9, r3
 800ecb4:	688a      	ldr	r2, [r1, #8]
 800ecb6:	690b      	ldr	r3, [r1, #16]
 800ecb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	bfb8      	it	lt
 800ecc0:	4613      	movlt	r3, r2
 800ecc2:	6033      	str	r3, [r6, #0]
 800ecc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecc8:	4607      	mov	r7, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	b10a      	cbz	r2, 800ecd2 <_printf_common+0x26>
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6033      	str	r3, [r6, #0]
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	0699      	lsls	r1, r3, #26
 800ecd6:	bf42      	ittt	mi
 800ecd8:	6833      	ldrmi	r3, [r6, #0]
 800ecda:	3302      	addmi	r3, #2
 800ecdc:	6033      	strmi	r3, [r6, #0]
 800ecde:	6825      	ldr	r5, [r4, #0]
 800ece0:	f015 0506 	ands.w	r5, r5, #6
 800ece4:	d106      	bne.n	800ecf4 <_printf_common+0x48>
 800ece6:	f104 0a19 	add.w	sl, r4, #25
 800ecea:	68e3      	ldr	r3, [r4, #12]
 800ecec:	6832      	ldr	r2, [r6, #0]
 800ecee:	1a9b      	subs	r3, r3, r2
 800ecf0:	42ab      	cmp	r3, r5
 800ecf2:	dc26      	bgt.n	800ed42 <_printf_common+0x96>
 800ecf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecf8:	1e13      	subs	r3, r2, #0
 800ecfa:	6822      	ldr	r2, [r4, #0]
 800ecfc:	bf18      	it	ne
 800ecfe:	2301      	movne	r3, #1
 800ed00:	0692      	lsls	r2, r2, #26
 800ed02:	d42b      	bmi.n	800ed5c <_printf_common+0xb0>
 800ed04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed08:	4649      	mov	r1, r9
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	47c0      	blx	r8
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d01e      	beq.n	800ed50 <_printf_common+0xa4>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	68e5      	ldr	r5, [r4, #12]
 800ed16:	6832      	ldr	r2, [r6, #0]
 800ed18:	f003 0306 	and.w	r3, r3, #6
 800ed1c:	2b04      	cmp	r3, #4
 800ed1e:	bf08      	it	eq
 800ed20:	1aad      	subeq	r5, r5, r2
 800ed22:	68a3      	ldr	r3, [r4, #8]
 800ed24:	6922      	ldr	r2, [r4, #16]
 800ed26:	bf0c      	ite	eq
 800ed28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed2c:	2500      	movne	r5, #0
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	bfc4      	itt	gt
 800ed32:	1a9b      	subgt	r3, r3, r2
 800ed34:	18ed      	addgt	r5, r5, r3
 800ed36:	2600      	movs	r6, #0
 800ed38:	341a      	adds	r4, #26
 800ed3a:	42b5      	cmp	r5, r6
 800ed3c:	d11a      	bne.n	800ed74 <_printf_common+0xc8>
 800ed3e:	2000      	movs	r0, #0
 800ed40:	e008      	b.n	800ed54 <_printf_common+0xa8>
 800ed42:	2301      	movs	r3, #1
 800ed44:	4652      	mov	r2, sl
 800ed46:	4649      	mov	r1, r9
 800ed48:	4638      	mov	r0, r7
 800ed4a:	47c0      	blx	r8
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	d103      	bne.n	800ed58 <_printf_common+0xac>
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed58:	3501      	adds	r5, #1
 800ed5a:	e7c6      	b.n	800ecea <_printf_common+0x3e>
 800ed5c:	18e1      	adds	r1, r4, r3
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	2030      	movs	r0, #48	; 0x30
 800ed62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed66:	4422      	add	r2, r4
 800ed68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed70:	3302      	adds	r3, #2
 800ed72:	e7c7      	b.n	800ed04 <_printf_common+0x58>
 800ed74:	2301      	movs	r3, #1
 800ed76:	4622      	mov	r2, r4
 800ed78:	4649      	mov	r1, r9
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	47c0      	blx	r8
 800ed7e:	3001      	adds	r0, #1
 800ed80:	d0e6      	beq.n	800ed50 <_printf_common+0xa4>
 800ed82:	3601      	adds	r6, #1
 800ed84:	e7d9      	b.n	800ed3a <_printf_common+0x8e>
	...

0800ed88 <_printf_i>:
 800ed88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	7e0f      	ldrb	r7, [r1, #24]
 800ed8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed90:	2f78      	cmp	r7, #120	; 0x78
 800ed92:	4691      	mov	r9, r2
 800ed94:	4680      	mov	r8, r0
 800ed96:	460c      	mov	r4, r1
 800ed98:	469a      	mov	sl, r3
 800ed9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed9e:	d807      	bhi.n	800edb0 <_printf_i+0x28>
 800eda0:	2f62      	cmp	r7, #98	; 0x62
 800eda2:	d80a      	bhi.n	800edba <_printf_i+0x32>
 800eda4:	2f00      	cmp	r7, #0
 800eda6:	f000 80d8 	beq.w	800ef5a <_printf_i+0x1d2>
 800edaa:	2f58      	cmp	r7, #88	; 0x58
 800edac:	f000 80a3 	beq.w	800eef6 <_printf_i+0x16e>
 800edb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edb8:	e03a      	b.n	800ee30 <_printf_i+0xa8>
 800edba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edbe:	2b15      	cmp	r3, #21
 800edc0:	d8f6      	bhi.n	800edb0 <_printf_i+0x28>
 800edc2:	a101      	add	r1, pc, #4	; (adr r1, 800edc8 <_printf_i+0x40>)
 800edc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edc8:	0800ee21 	.word	0x0800ee21
 800edcc:	0800ee35 	.word	0x0800ee35
 800edd0:	0800edb1 	.word	0x0800edb1
 800edd4:	0800edb1 	.word	0x0800edb1
 800edd8:	0800edb1 	.word	0x0800edb1
 800eddc:	0800edb1 	.word	0x0800edb1
 800ede0:	0800ee35 	.word	0x0800ee35
 800ede4:	0800edb1 	.word	0x0800edb1
 800ede8:	0800edb1 	.word	0x0800edb1
 800edec:	0800edb1 	.word	0x0800edb1
 800edf0:	0800edb1 	.word	0x0800edb1
 800edf4:	0800ef41 	.word	0x0800ef41
 800edf8:	0800ee65 	.word	0x0800ee65
 800edfc:	0800ef23 	.word	0x0800ef23
 800ee00:	0800edb1 	.word	0x0800edb1
 800ee04:	0800edb1 	.word	0x0800edb1
 800ee08:	0800ef63 	.word	0x0800ef63
 800ee0c:	0800edb1 	.word	0x0800edb1
 800ee10:	0800ee65 	.word	0x0800ee65
 800ee14:	0800edb1 	.word	0x0800edb1
 800ee18:	0800edb1 	.word	0x0800edb1
 800ee1c:	0800ef2b 	.word	0x0800ef2b
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	602a      	str	r2, [r5, #0]
 800ee28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee30:	2301      	movs	r3, #1
 800ee32:	e0a3      	b.n	800ef7c <_printf_i+0x1f4>
 800ee34:	6820      	ldr	r0, [r4, #0]
 800ee36:	6829      	ldr	r1, [r5, #0]
 800ee38:	0606      	lsls	r6, r0, #24
 800ee3a:	f101 0304 	add.w	r3, r1, #4
 800ee3e:	d50a      	bpl.n	800ee56 <_printf_i+0xce>
 800ee40:	680e      	ldr	r6, [r1, #0]
 800ee42:	602b      	str	r3, [r5, #0]
 800ee44:	2e00      	cmp	r6, #0
 800ee46:	da03      	bge.n	800ee50 <_printf_i+0xc8>
 800ee48:	232d      	movs	r3, #45	; 0x2d
 800ee4a:	4276      	negs	r6, r6
 800ee4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee50:	485e      	ldr	r0, [pc, #376]	; (800efcc <_printf_i+0x244>)
 800ee52:	230a      	movs	r3, #10
 800ee54:	e019      	b.n	800ee8a <_printf_i+0x102>
 800ee56:	680e      	ldr	r6, [r1, #0]
 800ee58:	602b      	str	r3, [r5, #0]
 800ee5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee5e:	bf18      	it	ne
 800ee60:	b236      	sxthne	r6, r6
 800ee62:	e7ef      	b.n	800ee44 <_printf_i+0xbc>
 800ee64:	682b      	ldr	r3, [r5, #0]
 800ee66:	6820      	ldr	r0, [r4, #0]
 800ee68:	1d19      	adds	r1, r3, #4
 800ee6a:	6029      	str	r1, [r5, #0]
 800ee6c:	0601      	lsls	r1, r0, #24
 800ee6e:	d501      	bpl.n	800ee74 <_printf_i+0xec>
 800ee70:	681e      	ldr	r6, [r3, #0]
 800ee72:	e002      	b.n	800ee7a <_printf_i+0xf2>
 800ee74:	0646      	lsls	r6, r0, #25
 800ee76:	d5fb      	bpl.n	800ee70 <_printf_i+0xe8>
 800ee78:	881e      	ldrh	r6, [r3, #0]
 800ee7a:	4854      	ldr	r0, [pc, #336]	; (800efcc <_printf_i+0x244>)
 800ee7c:	2f6f      	cmp	r7, #111	; 0x6f
 800ee7e:	bf0c      	ite	eq
 800ee80:	2308      	moveq	r3, #8
 800ee82:	230a      	movne	r3, #10
 800ee84:	2100      	movs	r1, #0
 800ee86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee8a:	6865      	ldr	r5, [r4, #4]
 800ee8c:	60a5      	str	r5, [r4, #8]
 800ee8e:	2d00      	cmp	r5, #0
 800ee90:	bfa2      	ittt	ge
 800ee92:	6821      	ldrge	r1, [r4, #0]
 800ee94:	f021 0104 	bicge.w	r1, r1, #4
 800ee98:	6021      	strge	r1, [r4, #0]
 800ee9a:	b90e      	cbnz	r6, 800eea0 <_printf_i+0x118>
 800ee9c:	2d00      	cmp	r5, #0
 800ee9e:	d04d      	beq.n	800ef3c <_printf_i+0x1b4>
 800eea0:	4615      	mov	r5, r2
 800eea2:	fbb6 f1f3 	udiv	r1, r6, r3
 800eea6:	fb03 6711 	mls	r7, r3, r1, r6
 800eeaa:	5dc7      	ldrb	r7, [r0, r7]
 800eeac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eeb0:	4637      	mov	r7, r6
 800eeb2:	42bb      	cmp	r3, r7
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	d9f4      	bls.n	800eea2 <_printf_i+0x11a>
 800eeb8:	2b08      	cmp	r3, #8
 800eeba:	d10b      	bne.n	800eed4 <_printf_i+0x14c>
 800eebc:	6823      	ldr	r3, [r4, #0]
 800eebe:	07de      	lsls	r6, r3, #31
 800eec0:	d508      	bpl.n	800eed4 <_printf_i+0x14c>
 800eec2:	6923      	ldr	r3, [r4, #16]
 800eec4:	6861      	ldr	r1, [r4, #4]
 800eec6:	4299      	cmp	r1, r3
 800eec8:	bfde      	ittt	le
 800eeca:	2330      	movle	r3, #48	; 0x30
 800eecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eed0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eed4:	1b52      	subs	r2, r2, r5
 800eed6:	6122      	str	r2, [r4, #16]
 800eed8:	f8cd a000 	str.w	sl, [sp]
 800eedc:	464b      	mov	r3, r9
 800eede:	aa03      	add	r2, sp, #12
 800eee0:	4621      	mov	r1, r4
 800eee2:	4640      	mov	r0, r8
 800eee4:	f7ff fee2 	bl	800ecac <_printf_common>
 800eee8:	3001      	adds	r0, #1
 800eeea:	d14c      	bne.n	800ef86 <_printf_i+0x1fe>
 800eeec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eef0:	b004      	add	sp, #16
 800eef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eef6:	4835      	ldr	r0, [pc, #212]	; (800efcc <_printf_i+0x244>)
 800eef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eefc:	6829      	ldr	r1, [r5, #0]
 800eefe:	6823      	ldr	r3, [r4, #0]
 800ef00:	f851 6b04 	ldr.w	r6, [r1], #4
 800ef04:	6029      	str	r1, [r5, #0]
 800ef06:	061d      	lsls	r5, r3, #24
 800ef08:	d514      	bpl.n	800ef34 <_printf_i+0x1ac>
 800ef0a:	07df      	lsls	r7, r3, #31
 800ef0c:	bf44      	itt	mi
 800ef0e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef12:	6023      	strmi	r3, [r4, #0]
 800ef14:	b91e      	cbnz	r6, 800ef1e <_printf_i+0x196>
 800ef16:	6823      	ldr	r3, [r4, #0]
 800ef18:	f023 0320 	bic.w	r3, r3, #32
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	2310      	movs	r3, #16
 800ef20:	e7b0      	b.n	800ee84 <_printf_i+0xfc>
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	f043 0320 	orr.w	r3, r3, #32
 800ef28:	6023      	str	r3, [r4, #0]
 800ef2a:	2378      	movs	r3, #120	; 0x78
 800ef2c:	4828      	ldr	r0, [pc, #160]	; (800efd0 <_printf_i+0x248>)
 800ef2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef32:	e7e3      	b.n	800eefc <_printf_i+0x174>
 800ef34:	0659      	lsls	r1, r3, #25
 800ef36:	bf48      	it	mi
 800ef38:	b2b6      	uxthmi	r6, r6
 800ef3a:	e7e6      	b.n	800ef0a <_printf_i+0x182>
 800ef3c:	4615      	mov	r5, r2
 800ef3e:	e7bb      	b.n	800eeb8 <_printf_i+0x130>
 800ef40:	682b      	ldr	r3, [r5, #0]
 800ef42:	6826      	ldr	r6, [r4, #0]
 800ef44:	6961      	ldr	r1, [r4, #20]
 800ef46:	1d18      	adds	r0, r3, #4
 800ef48:	6028      	str	r0, [r5, #0]
 800ef4a:	0635      	lsls	r5, r6, #24
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	d501      	bpl.n	800ef54 <_printf_i+0x1cc>
 800ef50:	6019      	str	r1, [r3, #0]
 800ef52:	e002      	b.n	800ef5a <_printf_i+0x1d2>
 800ef54:	0670      	lsls	r0, r6, #25
 800ef56:	d5fb      	bpl.n	800ef50 <_printf_i+0x1c8>
 800ef58:	8019      	strh	r1, [r3, #0]
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	6123      	str	r3, [r4, #16]
 800ef5e:	4615      	mov	r5, r2
 800ef60:	e7ba      	b.n	800eed8 <_printf_i+0x150>
 800ef62:	682b      	ldr	r3, [r5, #0]
 800ef64:	1d1a      	adds	r2, r3, #4
 800ef66:	602a      	str	r2, [r5, #0]
 800ef68:	681d      	ldr	r5, [r3, #0]
 800ef6a:	6862      	ldr	r2, [r4, #4]
 800ef6c:	2100      	movs	r1, #0
 800ef6e:	4628      	mov	r0, r5
 800ef70:	f7f1 f93e 	bl	80001f0 <memchr>
 800ef74:	b108      	cbz	r0, 800ef7a <_printf_i+0x1f2>
 800ef76:	1b40      	subs	r0, r0, r5
 800ef78:	6060      	str	r0, [r4, #4]
 800ef7a:	6863      	ldr	r3, [r4, #4]
 800ef7c:	6123      	str	r3, [r4, #16]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef84:	e7a8      	b.n	800eed8 <_printf_i+0x150>
 800ef86:	6923      	ldr	r3, [r4, #16]
 800ef88:	462a      	mov	r2, r5
 800ef8a:	4649      	mov	r1, r9
 800ef8c:	4640      	mov	r0, r8
 800ef8e:	47d0      	blx	sl
 800ef90:	3001      	adds	r0, #1
 800ef92:	d0ab      	beq.n	800eeec <_printf_i+0x164>
 800ef94:	6823      	ldr	r3, [r4, #0]
 800ef96:	079b      	lsls	r3, r3, #30
 800ef98:	d413      	bmi.n	800efc2 <_printf_i+0x23a>
 800ef9a:	68e0      	ldr	r0, [r4, #12]
 800ef9c:	9b03      	ldr	r3, [sp, #12]
 800ef9e:	4298      	cmp	r0, r3
 800efa0:	bfb8      	it	lt
 800efa2:	4618      	movlt	r0, r3
 800efa4:	e7a4      	b.n	800eef0 <_printf_i+0x168>
 800efa6:	2301      	movs	r3, #1
 800efa8:	4632      	mov	r2, r6
 800efaa:	4649      	mov	r1, r9
 800efac:	4640      	mov	r0, r8
 800efae:	47d0      	blx	sl
 800efb0:	3001      	adds	r0, #1
 800efb2:	d09b      	beq.n	800eeec <_printf_i+0x164>
 800efb4:	3501      	adds	r5, #1
 800efb6:	68e3      	ldr	r3, [r4, #12]
 800efb8:	9903      	ldr	r1, [sp, #12]
 800efba:	1a5b      	subs	r3, r3, r1
 800efbc:	42ab      	cmp	r3, r5
 800efbe:	dcf2      	bgt.n	800efa6 <_printf_i+0x21e>
 800efc0:	e7eb      	b.n	800ef9a <_printf_i+0x212>
 800efc2:	2500      	movs	r5, #0
 800efc4:	f104 0619 	add.w	r6, r4, #25
 800efc8:	e7f5      	b.n	800efb6 <_printf_i+0x22e>
 800efca:	bf00      	nop
 800efcc:	0801300e 	.word	0x0801300e
 800efd0:	0801301f 	.word	0x0801301f

0800efd4 <siprintf>:
 800efd4:	b40e      	push	{r1, r2, r3}
 800efd6:	b500      	push	{lr}
 800efd8:	b09c      	sub	sp, #112	; 0x70
 800efda:	ab1d      	add	r3, sp, #116	; 0x74
 800efdc:	9002      	str	r0, [sp, #8]
 800efde:	9006      	str	r0, [sp, #24]
 800efe0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800efe4:	4809      	ldr	r0, [pc, #36]	; (800f00c <siprintf+0x38>)
 800efe6:	9107      	str	r1, [sp, #28]
 800efe8:	9104      	str	r1, [sp, #16]
 800efea:	4909      	ldr	r1, [pc, #36]	; (800f010 <siprintf+0x3c>)
 800efec:	f853 2b04 	ldr.w	r2, [r3], #4
 800eff0:	9105      	str	r1, [sp, #20]
 800eff2:	6800      	ldr	r0, [r0, #0]
 800eff4:	9301      	str	r3, [sp, #4]
 800eff6:	a902      	add	r1, sp, #8
 800eff8:	f001 fb78 	bl	80106ec <_svfiprintf_r>
 800effc:	9b02      	ldr	r3, [sp, #8]
 800effe:	2200      	movs	r2, #0
 800f000:	701a      	strb	r2, [r3, #0]
 800f002:	b01c      	add	sp, #112	; 0x70
 800f004:	f85d eb04 	ldr.w	lr, [sp], #4
 800f008:	b003      	add	sp, #12
 800f00a:	4770      	bx	lr
 800f00c:	20000024 	.word	0x20000024
 800f010:	ffff0208 	.word	0xffff0208

0800f014 <quorem>:
 800f014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f018:	6903      	ldr	r3, [r0, #16]
 800f01a:	690c      	ldr	r4, [r1, #16]
 800f01c:	42a3      	cmp	r3, r4
 800f01e:	4607      	mov	r7, r0
 800f020:	f2c0 8081 	blt.w	800f126 <quorem+0x112>
 800f024:	3c01      	subs	r4, #1
 800f026:	f101 0814 	add.w	r8, r1, #20
 800f02a:	f100 0514 	add.w	r5, r0, #20
 800f02e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f032:	9301      	str	r3, [sp, #4]
 800f034:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f038:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f03c:	3301      	adds	r3, #1
 800f03e:	429a      	cmp	r2, r3
 800f040:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f044:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f048:	fbb2 f6f3 	udiv	r6, r2, r3
 800f04c:	d331      	bcc.n	800f0b2 <quorem+0x9e>
 800f04e:	f04f 0e00 	mov.w	lr, #0
 800f052:	4640      	mov	r0, r8
 800f054:	46ac      	mov	ip, r5
 800f056:	46f2      	mov	sl, lr
 800f058:	f850 2b04 	ldr.w	r2, [r0], #4
 800f05c:	b293      	uxth	r3, r2
 800f05e:	fb06 e303 	mla	r3, r6, r3, lr
 800f062:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f066:	b29b      	uxth	r3, r3
 800f068:	ebaa 0303 	sub.w	r3, sl, r3
 800f06c:	f8dc a000 	ldr.w	sl, [ip]
 800f070:	0c12      	lsrs	r2, r2, #16
 800f072:	fa13 f38a 	uxtah	r3, r3, sl
 800f076:	fb06 e202 	mla	r2, r6, r2, lr
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	9b00      	ldr	r3, [sp, #0]
 800f07e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f082:	b292      	uxth	r2, r2
 800f084:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f08c:	f8bd 3000 	ldrh.w	r3, [sp]
 800f090:	4581      	cmp	r9, r0
 800f092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f096:	f84c 3b04 	str.w	r3, [ip], #4
 800f09a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f09e:	d2db      	bcs.n	800f058 <quorem+0x44>
 800f0a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800f0a4:	b92b      	cbnz	r3, 800f0b2 <quorem+0x9e>
 800f0a6:	9b01      	ldr	r3, [sp, #4]
 800f0a8:	3b04      	subs	r3, #4
 800f0aa:	429d      	cmp	r5, r3
 800f0ac:	461a      	mov	r2, r3
 800f0ae:	d32e      	bcc.n	800f10e <quorem+0xfa>
 800f0b0:	613c      	str	r4, [r7, #16]
 800f0b2:	4638      	mov	r0, r7
 800f0b4:	f001 f8c6 	bl	8010244 <__mcmp>
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	db24      	blt.n	800f106 <quorem+0xf2>
 800f0bc:	3601      	adds	r6, #1
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f04f 0c00 	mov.w	ip, #0
 800f0c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0c8:	f8d0 e000 	ldr.w	lr, [r0]
 800f0cc:	b293      	uxth	r3, r2
 800f0ce:	ebac 0303 	sub.w	r3, ip, r3
 800f0d2:	0c12      	lsrs	r2, r2, #16
 800f0d4:	fa13 f38e 	uxtah	r3, r3, lr
 800f0d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f0dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0e0:	b29b      	uxth	r3, r3
 800f0e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0e6:	45c1      	cmp	r9, r8
 800f0e8:	f840 3b04 	str.w	r3, [r0], #4
 800f0ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f0f0:	d2e8      	bcs.n	800f0c4 <quorem+0xb0>
 800f0f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0fa:	b922      	cbnz	r2, 800f106 <quorem+0xf2>
 800f0fc:	3b04      	subs	r3, #4
 800f0fe:	429d      	cmp	r5, r3
 800f100:	461a      	mov	r2, r3
 800f102:	d30a      	bcc.n	800f11a <quorem+0x106>
 800f104:	613c      	str	r4, [r7, #16]
 800f106:	4630      	mov	r0, r6
 800f108:	b003      	add	sp, #12
 800f10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f10e:	6812      	ldr	r2, [r2, #0]
 800f110:	3b04      	subs	r3, #4
 800f112:	2a00      	cmp	r2, #0
 800f114:	d1cc      	bne.n	800f0b0 <quorem+0x9c>
 800f116:	3c01      	subs	r4, #1
 800f118:	e7c7      	b.n	800f0aa <quorem+0x96>
 800f11a:	6812      	ldr	r2, [r2, #0]
 800f11c:	3b04      	subs	r3, #4
 800f11e:	2a00      	cmp	r2, #0
 800f120:	d1f0      	bne.n	800f104 <quorem+0xf0>
 800f122:	3c01      	subs	r4, #1
 800f124:	e7eb      	b.n	800f0fe <quorem+0xea>
 800f126:	2000      	movs	r0, #0
 800f128:	e7ee      	b.n	800f108 <quorem+0xf4>
 800f12a:	0000      	movs	r0, r0
 800f12c:	0000      	movs	r0, r0
	...

0800f130 <_dtoa_r>:
 800f130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f134:	ed2d 8b04 	vpush	{d8-d9}
 800f138:	ec57 6b10 	vmov	r6, r7, d0
 800f13c:	b093      	sub	sp, #76	; 0x4c
 800f13e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f140:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f144:	9106      	str	r1, [sp, #24]
 800f146:	ee10 aa10 	vmov	sl, s0
 800f14a:	4604      	mov	r4, r0
 800f14c:	9209      	str	r2, [sp, #36]	; 0x24
 800f14e:	930c      	str	r3, [sp, #48]	; 0x30
 800f150:	46bb      	mov	fp, r7
 800f152:	b975      	cbnz	r5, 800f172 <_dtoa_r+0x42>
 800f154:	2010      	movs	r0, #16
 800f156:	f000 fddd 	bl	800fd14 <malloc>
 800f15a:	4602      	mov	r2, r0
 800f15c:	6260      	str	r0, [r4, #36]	; 0x24
 800f15e:	b920      	cbnz	r0, 800f16a <_dtoa_r+0x3a>
 800f160:	4ba7      	ldr	r3, [pc, #668]	; (800f400 <_dtoa_r+0x2d0>)
 800f162:	21ea      	movs	r1, #234	; 0xea
 800f164:	48a7      	ldr	r0, [pc, #668]	; (800f404 <_dtoa_r+0x2d4>)
 800f166:	f001 fbd1 	bl	801090c <__assert_func>
 800f16a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f16e:	6005      	str	r5, [r0, #0]
 800f170:	60c5      	str	r5, [r0, #12]
 800f172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f174:	6819      	ldr	r1, [r3, #0]
 800f176:	b151      	cbz	r1, 800f18e <_dtoa_r+0x5e>
 800f178:	685a      	ldr	r2, [r3, #4]
 800f17a:	604a      	str	r2, [r1, #4]
 800f17c:	2301      	movs	r3, #1
 800f17e:	4093      	lsls	r3, r2
 800f180:	608b      	str	r3, [r1, #8]
 800f182:	4620      	mov	r0, r4
 800f184:	f000 fe1c 	bl	800fdc0 <_Bfree>
 800f188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
 800f18e:	1e3b      	subs	r3, r7, #0
 800f190:	bfaa      	itet	ge
 800f192:	2300      	movge	r3, #0
 800f194:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f198:	f8c8 3000 	strge.w	r3, [r8]
 800f19c:	4b9a      	ldr	r3, [pc, #616]	; (800f408 <_dtoa_r+0x2d8>)
 800f19e:	bfbc      	itt	lt
 800f1a0:	2201      	movlt	r2, #1
 800f1a2:	f8c8 2000 	strlt.w	r2, [r8]
 800f1a6:	ea33 030b 	bics.w	r3, r3, fp
 800f1aa:	d11b      	bne.n	800f1e4 <_dtoa_r+0xb4>
 800f1ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1b8:	4333      	orrs	r3, r6
 800f1ba:	f000 8592 	beq.w	800fce2 <_dtoa_r+0xbb2>
 800f1be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1c0:	b963      	cbnz	r3, 800f1dc <_dtoa_r+0xac>
 800f1c2:	4b92      	ldr	r3, [pc, #584]	; (800f40c <_dtoa_r+0x2dc>)
 800f1c4:	e022      	b.n	800f20c <_dtoa_r+0xdc>
 800f1c6:	4b92      	ldr	r3, [pc, #584]	; (800f410 <_dtoa_r+0x2e0>)
 800f1c8:	9301      	str	r3, [sp, #4]
 800f1ca:	3308      	adds	r3, #8
 800f1cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	9801      	ldr	r0, [sp, #4]
 800f1d2:	b013      	add	sp, #76	; 0x4c
 800f1d4:	ecbd 8b04 	vpop	{d8-d9}
 800f1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1dc:	4b8b      	ldr	r3, [pc, #556]	; (800f40c <_dtoa_r+0x2dc>)
 800f1de:	9301      	str	r3, [sp, #4]
 800f1e0:	3303      	adds	r3, #3
 800f1e2:	e7f3      	b.n	800f1cc <_dtoa_r+0x9c>
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	4650      	mov	r0, sl
 800f1ea:	4659      	mov	r1, fp
 800f1ec:	f7f1 fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 800f1f0:	ec4b ab19 	vmov	d9, sl, fp
 800f1f4:	4680      	mov	r8, r0
 800f1f6:	b158      	cbz	r0, 800f210 <_dtoa_r+0xe0>
 800f1f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	6013      	str	r3, [r2, #0]
 800f1fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 856b 	beq.w	800fcdc <_dtoa_r+0xbac>
 800f206:	4883      	ldr	r0, [pc, #524]	; (800f414 <_dtoa_r+0x2e4>)
 800f208:	6018      	str	r0, [r3, #0]
 800f20a:	1e43      	subs	r3, r0, #1
 800f20c:	9301      	str	r3, [sp, #4]
 800f20e:	e7df      	b.n	800f1d0 <_dtoa_r+0xa0>
 800f210:	ec4b ab10 	vmov	d0, sl, fp
 800f214:	aa10      	add	r2, sp, #64	; 0x40
 800f216:	a911      	add	r1, sp, #68	; 0x44
 800f218:	4620      	mov	r0, r4
 800f21a:	f001 f8b9 	bl	8010390 <__d2b>
 800f21e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f222:	ee08 0a10 	vmov	s16, r0
 800f226:	2d00      	cmp	r5, #0
 800f228:	f000 8084 	beq.w	800f334 <_dtoa_r+0x204>
 800f22c:	ee19 3a90 	vmov	r3, s19
 800f230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f234:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f238:	4656      	mov	r6, sl
 800f23a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f23e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f242:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f246:	4b74      	ldr	r3, [pc, #464]	; (800f418 <_dtoa_r+0x2e8>)
 800f248:	2200      	movs	r2, #0
 800f24a:	4630      	mov	r0, r6
 800f24c:	4639      	mov	r1, r7
 800f24e:	f7f1 f823 	bl	8000298 <__aeabi_dsub>
 800f252:	a365      	add	r3, pc, #404	; (adr r3, 800f3e8 <_dtoa_r+0x2b8>)
 800f254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f258:	f7f1 f9d6 	bl	8000608 <__aeabi_dmul>
 800f25c:	a364      	add	r3, pc, #400	; (adr r3, 800f3f0 <_dtoa_r+0x2c0>)
 800f25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f262:	f7f1 f81b 	bl	800029c <__adddf3>
 800f266:	4606      	mov	r6, r0
 800f268:	4628      	mov	r0, r5
 800f26a:	460f      	mov	r7, r1
 800f26c:	f7f1 f962 	bl	8000534 <__aeabi_i2d>
 800f270:	a361      	add	r3, pc, #388	; (adr r3, 800f3f8 <_dtoa_r+0x2c8>)
 800f272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f276:	f7f1 f9c7 	bl	8000608 <__aeabi_dmul>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4630      	mov	r0, r6
 800f280:	4639      	mov	r1, r7
 800f282:	f7f1 f80b 	bl	800029c <__adddf3>
 800f286:	4606      	mov	r6, r0
 800f288:	460f      	mov	r7, r1
 800f28a:	f7f1 fc6d 	bl	8000b68 <__aeabi_d2iz>
 800f28e:	2200      	movs	r2, #0
 800f290:	9000      	str	r0, [sp, #0]
 800f292:	2300      	movs	r3, #0
 800f294:	4630      	mov	r0, r6
 800f296:	4639      	mov	r1, r7
 800f298:	f7f1 fc28 	bl	8000aec <__aeabi_dcmplt>
 800f29c:	b150      	cbz	r0, 800f2b4 <_dtoa_r+0x184>
 800f29e:	9800      	ldr	r0, [sp, #0]
 800f2a0:	f7f1 f948 	bl	8000534 <__aeabi_i2d>
 800f2a4:	4632      	mov	r2, r6
 800f2a6:	463b      	mov	r3, r7
 800f2a8:	f7f1 fc16 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2ac:	b910      	cbnz	r0, 800f2b4 <_dtoa_r+0x184>
 800f2ae:	9b00      	ldr	r3, [sp, #0]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	9300      	str	r3, [sp, #0]
 800f2b4:	9b00      	ldr	r3, [sp, #0]
 800f2b6:	2b16      	cmp	r3, #22
 800f2b8:	d85a      	bhi.n	800f370 <_dtoa_r+0x240>
 800f2ba:	9a00      	ldr	r2, [sp, #0]
 800f2bc:	4b57      	ldr	r3, [pc, #348]	; (800f41c <_dtoa_r+0x2ec>)
 800f2be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c6:	ec51 0b19 	vmov	r0, r1, d9
 800f2ca:	f7f1 fc0f 	bl	8000aec <__aeabi_dcmplt>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	d050      	beq.n	800f374 <_dtoa_r+0x244>
 800f2d2:	9b00      	ldr	r3, [sp, #0]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	2300      	movs	r3, #0
 800f2da:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2de:	1b5d      	subs	r5, r3, r5
 800f2e0:	1e6b      	subs	r3, r5, #1
 800f2e2:	9305      	str	r3, [sp, #20]
 800f2e4:	bf45      	ittet	mi
 800f2e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800f2ea:	9304      	strmi	r3, [sp, #16]
 800f2ec:	2300      	movpl	r3, #0
 800f2ee:	2300      	movmi	r3, #0
 800f2f0:	bf4c      	ite	mi
 800f2f2:	9305      	strmi	r3, [sp, #20]
 800f2f4:	9304      	strpl	r3, [sp, #16]
 800f2f6:	9b00      	ldr	r3, [sp, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	db3d      	blt.n	800f378 <_dtoa_r+0x248>
 800f2fc:	9b05      	ldr	r3, [sp, #20]
 800f2fe:	9a00      	ldr	r2, [sp, #0]
 800f300:	920a      	str	r2, [sp, #40]	; 0x28
 800f302:	4413      	add	r3, r2
 800f304:	9305      	str	r3, [sp, #20]
 800f306:	2300      	movs	r3, #0
 800f308:	9307      	str	r3, [sp, #28]
 800f30a:	9b06      	ldr	r3, [sp, #24]
 800f30c:	2b09      	cmp	r3, #9
 800f30e:	f200 8089 	bhi.w	800f424 <_dtoa_r+0x2f4>
 800f312:	2b05      	cmp	r3, #5
 800f314:	bfc4      	itt	gt
 800f316:	3b04      	subgt	r3, #4
 800f318:	9306      	strgt	r3, [sp, #24]
 800f31a:	9b06      	ldr	r3, [sp, #24]
 800f31c:	f1a3 0302 	sub.w	r3, r3, #2
 800f320:	bfcc      	ite	gt
 800f322:	2500      	movgt	r5, #0
 800f324:	2501      	movle	r5, #1
 800f326:	2b03      	cmp	r3, #3
 800f328:	f200 8087 	bhi.w	800f43a <_dtoa_r+0x30a>
 800f32c:	e8df f003 	tbb	[pc, r3]
 800f330:	59383a2d 	.word	0x59383a2d
 800f334:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f338:	441d      	add	r5, r3
 800f33a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f33e:	2b20      	cmp	r3, #32
 800f340:	bfc1      	itttt	gt
 800f342:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f346:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f34a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f34e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f352:	bfda      	itte	le
 800f354:	f1c3 0320 	rsble	r3, r3, #32
 800f358:	fa06 f003 	lslle.w	r0, r6, r3
 800f35c:	4318      	orrgt	r0, r3
 800f35e:	f7f1 f8d9 	bl	8000514 <__aeabi_ui2d>
 800f362:	2301      	movs	r3, #1
 800f364:	4606      	mov	r6, r0
 800f366:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f36a:	3d01      	subs	r5, #1
 800f36c:	930e      	str	r3, [sp, #56]	; 0x38
 800f36e:	e76a      	b.n	800f246 <_dtoa_r+0x116>
 800f370:	2301      	movs	r3, #1
 800f372:	e7b2      	b.n	800f2da <_dtoa_r+0x1aa>
 800f374:	900b      	str	r0, [sp, #44]	; 0x2c
 800f376:	e7b1      	b.n	800f2dc <_dtoa_r+0x1ac>
 800f378:	9b04      	ldr	r3, [sp, #16]
 800f37a:	9a00      	ldr	r2, [sp, #0]
 800f37c:	1a9b      	subs	r3, r3, r2
 800f37e:	9304      	str	r3, [sp, #16]
 800f380:	4253      	negs	r3, r2
 800f382:	9307      	str	r3, [sp, #28]
 800f384:	2300      	movs	r3, #0
 800f386:	930a      	str	r3, [sp, #40]	; 0x28
 800f388:	e7bf      	b.n	800f30a <_dtoa_r+0x1da>
 800f38a:	2300      	movs	r3, #0
 800f38c:	9308      	str	r3, [sp, #32]
 800f38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f390:	2b00      	cmp	r3, #0
 800f392:	dc55      	bgt.n	800f440 <_dtoa_r+0x310>
 800f394:	2301      	movs	r3, #1
 800f396:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f39a:	461a      	mov	r2, r3
 800f39c:	9209      	str	r2, [sp, #36]	; 0x24
 800f39e:	e00c      	b.n	800f3ba <_dtoa_r+0x28a>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e7f3      	b.n	800f38c <_dtoa_r+0x25c>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3a8:	9308      	str	r3, [sp, #32]
 800f3aa:	9b00      	ldr	r3, [sp, #0]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	9302      	str	r3, [sp, #8]
 800f3b0:	3301      	adds	r3, #1
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	9303      	str	r3, [sp, #12]
 800f3b6:	bfb8      	it	lt
 800f3b8:	2301      	movlt	r3, #1
 800f3ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f3bc:	2200      	movs	r2, #0
 800f3be:	6042      	str	r2, [r0, #4]
 800f3c0:	2204      	movs	r2, #4
 800f3c2:	f102 0614 	add.w	r6, r2, #20
 800f3c6:	429e      	cmp	r6, r3
 800f3c8:	6841      	ldr	r1, [r0, #4]
 800f3ca:	d93d      	bls.n	800f448 <_dtoa_r+0x318>
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 fcb7 	bl	800fd40 <_Balloc>
 800f3d2:	9001      	str	r0, [sp, #4]
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	d13b      	bne.n	800f450 <_dtoa_r+0x320>
 800f3d8:	4b11      	ldr	r3, [pc, #68]	; (800f420 <_dtoa_r+0x2f0>)
 800f3da:	4602      	mov	r2, r0
 800f3dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f3e0:	e6c0      	b.n	800f164 <_dtoa_r+0x34>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e7df      	b.n	800f3a6 <_dtoa_r+0x276>
 800f3e6:	bf00      	nop
 800f3e8:	636f4361 	.word	0x636f4361
 800f3ec:	3fd287a7 	.word	0x3fd287a7
 800f3f0:	8b60c8b3 	.word	0x8b60c8b3
 800f3f4:	3fc68a28 	.word	0x3fc68a28
 800f3f8:	509f79fb 	.word	0x509f79fb
 800f3fc:	3fd34413 	.word	0x3fd34413
 800f400:	0801303d 	.word	0x0801303d
 800f404:	08013054 	.word	0x08013054
 800f408:	7ff00000 	.word	0x7ff00000
 800f40c:	08013039 	.word	0x08013039
 800f410:	08013030 	.word	0x08013030
 800f414:	0801300d 	.word	0x0801300d
 800f418:	3ff80000 	.word	0x3ff80000
 800f41c:	08013148 	.word	0x08013148
 800f420:	080130af 	.word	0x080130af
 800f424:	2501      	movs	r5, #1
 800f426:	2300      	movs	r3, #0
 800f428:	9306      	str	r3, [sp, #24]
 800f42a:	9508      	str	r5, [sp, #32]
 800f42c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f430:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f434:	2200      	movs	r2, #0
 800f436:	2312      	movs	r3, #18
 800f438:	e7b0      	b.n	800f39c <_dtoa_r+0x26c>
 800f43a:	2301      	movs	r3, #1
 800f43c:	9308      	str	r3, [sp, #32]
 800f43e:	e7f5      	b.n	800f42c <_dtoa_r+0x2fc>
 800f440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f442:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f446:	e7b8      	b.n	800f3ba <_dtoa_r+0x28a>
 800f448:	3101      	adds	r1, #1
 800f44a:	6041      	str	r1, [r0, #4]
 800f44c:	0052      	lsls	r2, r2, #1
 800f44e:	e7b8      	b.n	800f3c2 <_dtoa_r+0x292>
 800f450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f452:	9a01      	ldr	r2, [sp, #4]
 800f454:	601a      	str	r2, [r3, #0]
 800f456:	9b03      	ldr	r3, [sp, #12]
 800f458:	2b0e      	cmp	r3, #14
 800f45a:	f200 809d 	bhi.w	800f598 <_dtoa_r+0x468>
 800f45e:	2d00      	cmp	r5, #0
 800f460:	f000 809a 	beq.w	800f598 <_dtoa_r+0x468>
 800f464:	9b00      	ldr	r3, [sp, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	dd32      	ble.n	800f4d0 <_dtoa_r+0x3a0>
 800f46a:	4ab7      	ldr	r2, [pc, #732]	; (800f748 <_dtoa_r+0x618>)
 800f46c:	f003 030f 	and.w	r3, r3, #15
 800f470:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f474:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f478:	9b00      	ldr	r3, [sp, #0]
 800f47a:	05d8      	lsls	r0, r3, #23
 800f47c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f480:	d516      	bpl.n	800f4b0 <_dtoa_r+0x380>
 800f482:	4bb2      	ldr	r3, [pc, #712]	; (800f74c <_dtoa_r+0x61c>)
 800f484:	ec51 0b19 	vmov	r0, r1, d9
 800f488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f48c:	f7f1 f9e6 	bl	800085c <__aeabi_ddiv>
 800f490:	f007 070f 	and.w	r7, r7, #15
 800f494:	4682      	mov	sl, r0
 800f496:	468b      	mov	fp, r1
 800f498:	2503      	movs	r5, #3
 800f49a:	4eac      	ldr	r6, [pc, #688]	; (800f74c <_dtoa_r+0x61c>)
 800f49c:	b957      	cbnz	r7, 800f4b4 <_dtoa_r+0x384>
 800f49e:	4642      	mov	r2, r8
 800f4a0:	464b      	mov	r3, r9
 800f4a2:	4650      	mov	r0, sl
 800f4a4:	4659      	mov	r1, fp
 800f4a6:	f7f1 f9d9 	bl	800085c <__aeabi_ddiv>
 800f4aa:	4682      	mov	sl, r0
 800f4ac:	468b      	mov	fp, r1
 800f4ae:	e028      	b.n	800f502 <_dtoa_r+0x3d2>
 800f4b0:	2502      	movs	r5, #2
 800f4b2:	e7f2      	b.n	800f49a <_dtoa_r+0x36a>
 800f4b4:	07f9      	lsls	r1, r7, #31
 800f4b6:	d508      	bpl.n	800f4ca <_dtoa_r+0x39a>
 800f4b8:	4640      	mov	r0, r8
 800f4ba:	4649      	mov	r1, r9
 800f4bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4c0:	f7f1 f8a2 	bl	8000608 <__aeabi_dmul>
 800f4c4:	3501      	adds	r5, #1
 800f4c6:	4680      	mov	r8, r0
 800f4c8:	4689      	mov	r9, r1
 800f4ca:	107f      	asrs	r7, r7, #1
 800f4cc:	3608      	adds	r6, #8
 800f4ce:	e7e5      	b.n	800f49c <_dtoa_r+0x36c>
 800f4d0:	f000 809b 	beq.w	800f60a <_dtoa_r+0x4da>
 800f4d4:	9b00      	ldr	r3, [sp, #0]
 800f4d6:	4f9d      	ldr	r7, [pc, #628]	; (800f74c <_dtoa_r+0x61c>)
 800f4d8:	425e      	negs	r6, r3
 800f4da:	4b9b      	ldr	r3, [pc, #620]	; (800f748 <_dtoa_r+0x618>)
 800f4dc:	f006 020f 	and.w	r2, r6, #15
 800f4e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e8:	ec51 0b19 	vmov	r0, r1, d9
 800f4ec:	f7f1 f88c 	bl	8000608 <__aeabi_dmul>
 800f4f0:	1136      	asrs	r6, r6, #4
 800f4f2:	4682      	mov	sl, r0
 800f4f4:	468b      	mov	fp, r1
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	2502      	movs	r5, #2
 800f4fa:	2e00      	cmp	r6, #0
 800f4fc:	d17a      	bne.n	800f5f4 <_dtoa_r+0x4c4>
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1d3      	bne.n	800f4aa <_dtoa_r+0x37a>
 800f502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 8082 	beq.w	800f60e <_dtoa_r+0x4de>
 800f50a:	4b91      	ldr	r3, [pc, #580]	; (800f750 <_dtoa_r+0x620>)
 800f50c:	2200      	movs	r2, #0
 800f50e:	4650      	mov	r0, sl
 800f510:	4659      	mov	r1, fp
 800f512:	f7f1 faeb 	bl	8000aec <__aeabi_dcmplt>
 800f516:	2800      	cmp	r0, #0
 800f518:	d079      	beq.n	800f60e <_dtoa_r+0x4de>
 800f51a:	9b03      	ldr	r3, [sp, #12]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d076      	beq.n	800f60e <_dtoa_r+0x4de>
 800f520:	9b02      	ldr	r3, [sp, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	dd36      	ble.n	800f594 <_dtoa_r+0x464>
 800f526:	9b00      	ldr	r3, [sp, #0]
 800f528:	4650      	mov	r0, sl
 800f52a:	4659      	mov	r1, fp
 800f52c:	1e5f      	subs	r7, r3, #1
 800f52e:	2200      	movs	r2, #0
 800f530:	4b88      	ldr	r3, [pc, #544]	; (800f754 <_dtoa_r+0x624>)
 800f532:	f7f1 f869 	bl	8000608 <__aeabi_dmul>
 800f536:	9e02      	ldr	r6, [sp, #8]
 800f538:	4682      	mov	sl, r0
 800f53a:	468b      	mov	fp, r1
 800f53c:	3501      	adds	r5, #1
 800f53e:	4628      	mov	r0, r5
 800f540:	f7f0 fff8 	bl	8000534 <__aeabi_i2d>
 800f544:	4652      	mov	r2, sl
 800f546:	465b      	mov	r3, fp
 800f548:	f7f1 f85e 	bl	8000608 <__aeabi_dmul>
 800f54c:	4b82      	ldr	r3, [pc, #520]	; (800f758 <_dtoa_r+0x628>)
 800f54e:	2200      	movs	r2, #0
 800f550:	f7f0 fea4 	bl	800029c <__adddf3>
 800f554:	46d0      	mov	r8, sl
 800f556:	46d9      	mov	r9, fp
 800f558:	4682      	mov	sl, r0
 800f55a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f55e:	2e00      	cmp	r6, #0
 800f560:	d158      	bne.n	800f614 <_dtoa_r+0x4e4>
 800f562:	4b7e      	ldr	r3, [pc, #504]	; (800f75c <_dtoa_r+0x62c>)
 800f564:	2200      	movs	r2, #0
 800f566:	4640      	mov	r0, r8
 800f568:	4649      	mov	r1, r9
 800f56a:	f7f0 fe95 	bl	8000298 <__aeabi_dsub>
 800f56e:	4652      	mov	r2, sl
 800f570:	465b      	mov	r3, fp
 800f572:	4680      	mov	r8, r0
 800f574:	4689      	mov	r9, r1
 800f576:	f7f1 fad7 	bl	8000b28 <__aeabi_dcmpgt>
 800f57a:	2800      	cmp	r0, #0
 800f57c:	f040 8295 	bne.w	800faaa <_dtoa_r+0x97a>
 800f580:	4652      	mov	r2, sl
 800f582:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f586:	4640      	mov	r0, r8
 800f588:	4649      	mov	r1, r9
 800f58a:	f7f1 faaf 	bl	8000aec <__aeabi_dcmplt>
 800f58e:	2800      	cmp	r0, #0
 800f590:	f040 8289 	bne.w	800faa6 <_dtoa_r+0x976>
 800f594:	ec5b ab19 	vmov	sl, fp, d9
 800f598:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f2c0 8148 	blt.w	800f830 <_dtoa_r+0x700>
 800f5a0:	9a00      	ldr	r2, [sp, #0]
 800f5a2:	2a0e      	cmp	r2, #14
 800f5a4:	f300 8144 	bgt.w	800f830 <_dtoa_r+0x700>
 800f5a8:	4b67      	ldr	r3, [pc, #412]	; (800f748 <_dtoa_r+0x618>)
 800f5aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	f280 80d5 	bge.w	800f764 <_dtoa_r+0x634>
 800f5ba:	9b03      	ldr	r3, [sp, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f300 80d1 	bgt.w	800f764 <_dtoa_r+0x634>
 800f5c2:	f040 826f 	bne.w	800faa4 <_dtoa_r+0x974>
 800f5c6:	4b65      	ldr	r3, [pc, #404]	; (800f75c <_dtoa_r+0x62c>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	4640      	mov	r0, r8
 800f5cc:	4649      	mov	r1, r9
 800f5ce:	f7f1 f81b 	bl	8000608 <__aeabi_dmul>
 800f5d2:	4652      	mov	r2, sl
 800f5d4:	465b      	mov	r3, fp
 800f5d6:	f7f1 fa9d 	bl	8000b14 <__aeabi_dcmpge>
 800f5da:	9e03      	ldr	r6, [sp, #12]
 800f5dc:	4637      	mov	r7, r6
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	f040 8245 	bne.w	800fa6e <_dtoa_r+0x93e>
 800f5e4:	9d01      	ldr	r5, [sp, #4]
 800f5e6:	2331      	movs	r3, #49	; 0x31
 800f5e8:	f805 3b01 	strb.w	r3, [r5], #1
 800f5ec:	9b00      	ldr	r3, [sp, #0]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	e240      	b.n	800fa76 <_dtoa_r+0x946>
 800f5f4:	07f2      	lsls	r2, r6, #31
 800f5f6:	d505      	bpl.n	800f604 <_dtoa_r+0x4d4>
 800f5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5fc:	f7f1 f804 	bl	8000608 <__aeabi_dmul>
 800f600:	3501      	adds	r5, #1
 800f602:	2301      	movs	r3, #1
 800f604:	1076      	asrs	r6, r6, #1
 800f606:	3708      	adds	r7, #8
 800f608:	e777      	b.n	800f4fa <_dtoa_r+0x3ca>
 800f60a:	2502      	movs	r5, #2
 800f60c:	e779      	b.n	800f502 <_dtoa_r+0x3d2>
 800f60e:	9f00      	ldr	r7, [sp, #0]
 800f610:	9e03      	ldr	r6, [sp, #12]
 800f612:	e794      	b.n	800f53e <_dtoa_r+0x40e>
 800f614:	9901      	ldr	r1, [sp, #4]
 800f616:	4b4c      	ldr	r3, [pc, #304]	; (800f748 <_dtoa_r+0x618>)
 800f618:	4431      	add	r1, r6
 800f61a:	910d      	str	r1, [sp, #52]	; 0x34
 800f61c:	9908      	ldr	r1, [sp, #32]
 800f61e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f622:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f626:	2900      	cmp	r1, #0
 800f628:	d043      	beq.n	800f6b2 <_dtoa_r+0x582>
 800f62a:	494d      	ldr	r1, [pc, #308]	; (800f760 <_dtoa_r+0x630>)
 800f62c:	2000      	movs	r0, #0
 800f62e:	f7f1 f915 	bl	800085c <__aeabi_ddiv>
 800f632:	4652      	mov	r2, sl
 800f634:	465b      	mov	r3, fp
 800f636:	f7f0 fe2f 	bl	8000298 <__aeabi_dsub>
 800f63a:	9d01      	ldr	r5, [sp, #4]
 800f63c:	4682      	mov	sl, r0
 800f63e:	468b      	mov	fp, r1
 800f640:	4649      	mov	r1, r9
 800f642:	4640      	mov	r0, r8
 800f644:	f7f1 fa90 	bl	8000b68 <__aeabi_d2iz>
 800f648:	4606      	mov	r6, r0
 800f64a:	f7f0 ff73 	bl	8000534 <__aeabi_i2d>
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	4640      	mov	r0, r8
 800f654:	4649      	mov	r1, r9
 800f656:	f7f0 fe1f 	bl	8000298 <__aeabi_dsub>
 800f65a:	3630      	adds	r6, #48	; 0x30
 800f65c:	f805 6b01 	strb.w	r6, [r5], #1
 800f660:	4652      	mov	r2, sl
 800f662:	465b      	mov	r3, fp
 800f664:	4680      	mov	r8, r0
 800f666:	4689      	mov	r9, r1
 800f668:	f7f1 fa40 	bl	8000aec <__aeabi_dcmplt>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d163      	bne.n	800f738 <_dtoa_r+0x608>
 800f670:	4642      	mov	r2, r8
 800f672:	464b      	mov	r3, r9
 800f674:	4936      	ldr	r1, [pc, #216]	; (800f750 <_dtoa_r+0x620>)
 800f676:	2000      	movs	r0, #0
 800f678:	f7f0 fe0e 	bl	8000298 <__aeabi_dsub>
 800f67c:	4652      	mov	r2, sl
 800f67e:	465b      	mov	r3, fp
 800f680:	f7f1 fa34 	bl	8000aec <__aeabi_dcmplt>
 800f684:	2800      	cmp	r0, #0
 800f686:	f040 80b5 	bne.w	800f7f4 <_dtoa_r+0x6c4>
 800f68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f68c:	429d      	cmp	r5, r3
 800f68e:	d081      	beq.n	800f594 <_dtoa_r+0x464>
 800f690:	4b30      	ldr	r3, [pc, #192]	; (800f754 <_dtoa_r+0x624>)
 800f692:	2200      	movs	r2, #0
 800f694:	4650      	mov	r0, sl
 800f696:	4659      	mov	r1, fp
 800f698:	f7f0 ffb6 	bl	8000608 <__aeabi_dmul>
 800f69c:	4b2d      	ldr	r3, [pc, #180]	; (800f754 <_dtoa_r+0x624>)
 800f69e:	4682      	mov	sl, r0
 800f6a0:	468b      	mov	fp, r1
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	4649      	mov	r1, r9
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f7f0 ffae 	bl	8000608 <__aeabi_dmul>
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	4689      	mov	r9, r1
 800f6b0:	e7c6      	b.n	800f640 <_dtoa_r+0x510>
 800f6b2:	4650      	mov	r0, sl
 800f6b4:	4659      	mov	r1, fp
 800f6b6:	f7f0 ffa7 	bl	8000608 <__aeabi_dmul>
 800f6ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6bc:	9d01      	ldr	r5, [sp, #4]
 800f6be:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6c0:	4682      	mov	sl, r0
 800f6c2:	468b      	mov	fp, r1
 800f6c4:	4649      	mov	r1, r9
 800f6c6:	4640      	mov	r0, r8
 800f6c8:	f7f1 fa4e 	bl	8000b68 <__aeabi_d2iz>
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	f7f0 ff31 	bl	8000534 <__aeabi_i2d>
 800f6d2:	3630      	adds	r6, #48	; 0x30
 800f6d4:	4602      	mov	r2, r0
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	4640      	mov	r0, r8
 800f6da:	4649      	mov	r1, r9
 800f6dc:	f7f0 fddc 	bl	8000298 <__aeabi_dsub>
 800f6e0:	f805 6b01 	strb.w	r6, [r5], #1
 800f6e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6e6:	429d      	cmp	r5, r3
 800f6e8:	4680      	mov	r8, r0
 800f6ea:	4689      	mov	r9, r1
 800f6ec:	f04f 0200 	mov.w	r2, #0
 800f6f0:	d124      	bne.n	800f73c <_dtoa_r+0x60c>
 800f6f2:	4b1b      	ldr	r3, [pc, #108]	; (800f760 <_dtoa_r+0x630>)
 800f6f4:	4650      	mov	r0, sl
 800f6f6:	4659      	mov	r1, fp
 800f6f8:	f7f0 fdd0 	bl	800029c <__adddf3>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
 800f700:	4640      	mov	r0, r8
 800f702:	4649      	mov	r1, r9
 800f704:	f7f1 fa10 	bl	8000b28 <__aeabi_dcmpgt>
 800f708:	2800      	cmp	r0, #0
 800f70a:	d173      	bne.n	800f7f4 <_dtoa_r+0x6c4>
 800f70c:	4652      	mov	r2, sl
 800f70e:	465b      	mov	r3, fp
 800f710:	4913      	ldr	r1, [pc, #76]	; (800f760 <_dtoa_r+0x630>)
 800f712:	2000      	movs	r0, #0
 800f714:	f7f0 fdc0 	bl	8000298 <__aeabi_dsub>
 800f718:	4602      	mov	r2, r0
 800f71a:	460b      	mov	r3, r1
 800f71c:	4640      	mov	r0, r8
 800f71e:	4649      	mov	r1, r9
 800f720:	f7f1 f9e4 	bl	8000aec <__aeabi_dcmplt>
 800f724:	2800      	cmp	r0, #0
 800f726:	f43f af35 	beq.w	800f594 <_dtoa_r+0x464>
 800f72a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f72c:	1e6b      	subs	r3, r5, #1
 800f72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f730:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f734:	2b30      	cmp	r3, #48	; 0x30
 800f736:	d0f8      	beq.n	800f72a <_dtoa_r+0x5fa>
 800f738:	9700      	str	r7, [sp, #0]
 800f73a:	e049      	b.n	800f7d0 <_dtoa_r+0x6a0>
 800f73c:	4b05      	ldr	r3, [pc, #20]	; (800f754 <_dtoa_r+0x624>)
 800f73e:	f7f0 ff63 	bl	8000608 <__aeabi_dmul>
 800f742:	4680      	mov	r8, r0
 800f744:	4689      	mov	r9, r1
 800f746:	e7bd      	b.n	800f6c4 <_dtoa_r+0x594>
 800f748:	08013148 	.word	0x08013148
 800f74c:	08013120 	.word	0x08013120
 800f750:	3ff00000 	.word	0x3ff00000
 800f754:	40240000 	.word	0x40240000
 800f758:	401c0000 	.word	0x401c0000
 800f75c:	40140000 	.word	0x40140000
 800f760:	3fe00000 	.word	0x3fe00000
 800f764:	9d01      	ldr	r5, [sp, #4]
 800f766:	4656      	mov	r6, sl
 800f768:	465f      	mov	r7, fp
 800f76a:	4642      	mov	r2, r8
 800f76c:	464b      	mov	r3, r9
 800f76e:	4630      	mov	r0, r6
 800f770:	4639      	mov	r1, r7
 800f772:	f7f1 f873 	bl	800085c <__aeabi_ddiv>
 800f776:	f7f1 f9f7 	bl	8000b68 <__aeabi_d2iz>
 800f77a:	4682      	mov	sl, r0
 800f77c:	f7f0 feda 	bl	8000534 <__aeabi_i2d>
 800f780:	4642      	mov	r2, r8
 800f782:	464b      	mov	r3, r9
 800f784:	f7f0 ff40 	bl	8000608 <__aeabi_dmul>
 800f788:	4602      	mov	r2, r0
 800f78a:	460b      	mov	r3, r1
 800f78c:	4630      	mov	r0, r6
 800f78e:	4639      	mov	r1, r7
 800f790:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f794:	f7f0 fd80 	bl	8000298 <__aeabi_dsub>
 800f798:	f805 6b01 	strb.w	r6, [r5], #1
 800f79c:	9e01      	ldr	r6, [sp, #4]
 800f79e:	9f03      	ldr	r7, [sp, #12]
 800f7a0:	1bae      	subs	r6, r5, r6
 800f7a2:	42b7      	cmp	r7, r6
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	d135      	bne.n	800f816 <_dtoa_r+0x6e6>
 800f7aa:	f7f0 fd77 	bl	800029c <__adddf3>
 800f7ae:	4642      	mov	r2, r8
 800f7b0:	464b      	mov	r3, r9
 800f7b2:	4606      	mov	r6, r0
 800f7b4:	460f      	mov	r7, r1
 800f7b6:	f7f1 f9b7 	bl	8000b28 <__aeabi_dcmpgt>
 800f7ba:	b9d0      	cbnz	r0, 800f7f2 <_dtoa_r+0x6c2>
 800f7bc:	4642      	mov	r2, r8
 800f7be:	464b      	mov	r3, r9
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	4639      	mov	r1, r7
 800f7c4:	f7f1 f988 	bl	8000ad8 <__aeabi_dcmpeq>
 800f7c8:	b110      	cbz	r0, 800f7d0 <_dtoa_r+0x6a0>
 800f7ca:	f01a 0f01 	tst.w	sl, #1
 800f7ce:	d110      	bne.n	800f7f2 <_dtoa_r+0x6c2>
 800f7d0:	4620      	mov	r0, r4
 800f7d2:	ee18 1a10 	vmov	r1, s16
 800f7d6:	f000 faf3 	bl	800fdc0 <_Bfree>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	9800      	ldr	r0, [sp, #0]
 800f7de:	702b      	strb	r3, [r5, #0]
 800f7e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7e2:	3001      	adds	r0, #1
 800f7e4:	6018      	str	r0, [r3, #0]
 800f7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f43f acf1 	beq.w	800f1d0 <_dtoa_r+0xa0>
 800f7ee:	601d      	str	r5, [r3, #0]
 800f7f0:	e4ee      	b.n	800f1d0 <_dtoa_r+0xa0>
 800f7f2:	9f00      	ldr	r7, [sp, #0]
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	461d      	mov	r5, r3
 800f7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f7fc:	2a39      	cmp	r2, #57	; 0x39
 800f7fe:	d106      	bne.n	800f80e <_dtoa_r+0x6de>
 800f800:	9a01      	ldr	r2, [sp, #4]
 800f802:	429a      	cmp	r2, r3
 800f804:	d1f7      	bne.n	800f7f6 <_dtoa_r+0x6c6>
 800f806:	9901      	ldr	r1, [sp, #4]
 800f808:	2230      	movs	r2, #48	; 0x30
 800f80a:	3701      	adds	r7, #1
 800f80c:	700a      	strb	r2, [r1, #0]
 800f80e:	781a      	ldrb	r2, [r3, #0]
 800f810:	3201      	adds	r2, #1
 800f812:	701a      	strb	r2, [r3, #0]
 800f814:	e790      	b.n	800f738 <_dtoa_r+0x608>
 800f816:	4ba6      	ldr	r3, [pc, #664]	; (800fab0 <_dtoa_r+0x980>)
 800f818:	2200      	movs	r2, #0
 800f81a:	f7f0 fef5 	bl	8000608 <__aeabi_dmul>
 800f81e:	2200      	movs	r2, #0
 800f820:	2300      	movs	r3, #0
 800f822:	4606      	mov	r6, r0
 800f824:	460f      	mov	r7, r1
 800f826:	f7f1 f957 	bl	8000ad8 <__aeabi_dcmpeq>
 800f82a:	2800      	cmp	r0, #0
 800f82c:	d09d      	beq.n	800f76a <_dtoa_r+0x63a>
 800f82e:	e7cf      	b.n	800f7d0 <_dtoa_r+0x6a0>
 800f830:	9a08      	ldr	r2, [sp, #32]
 800f832:	2a00      	cmp	r2, #0
 800f834:	f000 80d7 	beq.w	800f9e6 <_dtoa_r+0x8b6>
 800f838:	9a06      	ldr	r2, [sp, #24]
 800f83a:	2a01      	cmp	r2, #1
 800f83c:	f300 80ba 	bgt.w	800f9b4 <_dtoa_r+0x884>
 800f840:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f842:	2a00      	cmp	r2, #0
 800f844:	f000 80b2 	beq.w	800f9ac <_dtoa_r+0x87c>
 800f848:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f84c:	9e07      	ldr	r6, [sp, #28]
 800f84e:	9d04      	ldr	r5, [sp, #16]
 800f850:	9a04      	ldr	r2, [sp, #16]
 800f852:	441a      	add	r2, r3
 800f854:	9204      	str	r2, [sp, #16]
 800f856:	9a05      	ldr	r2, [sp, #20]
 800f858:	2101      	movs	r1, #1
 800f85a:	441a      	add	r2, r3
 800f85c:	4620      	mov	r0, r4
 800f85e:	9205      	str	r2, [sp, #20]
 800f860:	f000 fb66 	bl	800ff30 <__i2b>
 800f864:	4607      	mov	r7, r0
 800f866:	2d00      	cmp	r5, #0
 800f868:	dd0c      	ble.n	800f884 <_dtoa_r+0x754>
 800f86a:	9b05      	ldr	r3, [sp, #20]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	dd09      	ble.n	800f884 <_dtoa_r+0x754>
 800f870:	42ab      	cmp	r3, r5
 800f872:	9a04      	ldr	r2, [sp, #16]
 800f874:	bfa8      	it	ge
 800f876:	462b      	movge	r3, r5
 800f878:	1ad2      	subs	r2, r2, r3
 800f87a:	9204      	str	r2, [sp, #16]
 800f87c:	9a05      	ldr	r2, [sp, #20]
 800f87e:	1aed      	subs	r5, r5, r3
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	9b07      	ldr	r3, [sp, #28]
 800f886:	b31b      	cbz	r3, 800f8d0 <_dtoa_r+0x7a0>
 800f888:	9b08      	ldr	r3, [sp, #32]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	f000 80af 	beq.w	800f9ee <_dtoa_r+0x8be>
 800f890:	2e00      	cmp	r6, #0
 800f892:	dd13      	ble.n	800f8bc <_dtoa_r+0x78c>
 800f894:	4639      	mov	r1, r7
 800f896:	4632      	mov	r2, r6
 800f898:	4620      	mov	r0, r4
 800f89a:	f000 fc09 	bl	80100b0 <__pow5mult>
 800f89e:	ee18 2a10 	vmov	r2, s16
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	4607      	mov	r7, r0
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 fb58 	bl	800ff5c <__multiply>
 800f8ac:	ee18 1a10 	vmov	r1, s16
 800f8b0:	4680      	mov	r8, r0
 800f8b2:	4620      	mov	r0, r4
 800f8b4:	f000 fa84 	bl	800fdc0 <_Bfree>
 800f8b8:	ee08 8a10 	vmov	s16, r8
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	1b9a      	subs	r2, r3, r6
 800f8c0:	d006      	beq.n	800f8d0 <_dtoa_r+0x7a0>
 800f8c2:	ee18 1a10 	vmov	r1, s16
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 fbf2 	bl	80100b0 <__pow5mult>
 800f8cc:	ee08 0a10 	vmov	s16, r0
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	4620      	mov	r0, r4
 800f8d4:	f000 fb2c 	bl	800ff30 <__i2b>
 800f8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	4606      	mov	r6, r0
 800f8de:	f340 8088 	ble.w	800f9f2 <_dtoa_r+0x8c2>
 800f8e2:	461a      	mov	r2, r3
 800f8e4:	4601      	mov	r1, r0
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	f000 fbe2 	bl	80100b0 <__pow5mult>
 800f8ec:	9b06      	ldr	r3, [sp, #24]
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	4606      	mov	r6, r0
 800f8f2:	f340 8081 	ble.w	800f9f8 <_dtoa_r+0x8c8>
 800f8f6:	f04f 0800 	mov.w	r8, #0
 800f8fa:	6933      	ldr	r3, [r6, #16]
 800f8fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f900:	6918      	ldr	r0, [r3, #16]
 800f902:	f000 fac5 	bl	800fe90 <__hi0bits>
 800f906:	f1c0 0020 	rsb	r0, r0, #32
 800f90a:	9b05      	ldr	r3, [sp, #20]
 800f90c:	4418      	add	r0, r3
 800f90e:	f010 001f 	ands.w	r0, r0, #31
 800f912:	f000 8092 	beq.w	800fa3a <_dtoa_r+0x90a>
 800f916:	f1c0 0320 	rsb	r3, r0, #32
 800f91a:	2b04      	cmp	r3, #4
 800f91c:	f340 808a 	ble.w	800fa34 <_dtoa_r+0x904>
 800f920:	f1c0 001c 	rsb	r0, r0, #28
 800f924:	9b04      	ldr	r3, [sp, #16]
 800f926:	4403      	add	r3, r0
 800f928:	9304      	str	r3, [sp, #16]
 800f92a:	9b05      	ldr	r3, [sp, #20]
 800f92c:	4403      	add	r3, r0
 800f92e:	4405      	add	r5, r0
 800f930:	9305      	str	r3, [sp, #20]
 800f932:	9b04      	ldr	r3, [sp, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	dd07      	ble.n	800f948 <_dtoa_r+0x818>
 800f938:	ee18 1a10 	vmov	r1, s16
 800f93c:	461a      	mov	r2, r3
 800f93e:	4620      	mov	r0, r4
 800f940:	f000 fc10 	bl	8010164 <__lshift>
 800f944:	ee08 0a10 	vmov	s16, r0
 800f948:	9b05      	ldr	r3, [sp, #20]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	dd05      	ble.n	800f95a <_dtoa_r+0x82a>
 800f94e:	4631      	mov	r1, r6
 800f950:	461a      	mov	r2, r3
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fc06 	bl	8010164 <__lshift>
 800f958:	4606      	mov	r6, r0
 800f95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d06e      	beq.n	800fa3e <_dtoa_r+0x90e>
 800f960:	ee18 0a10 	vmov	r0, s16
 800f964:	4631      	mov	r1, r6
 800f966:	f000 fc6d 	bl	8010244 <__mcmp>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	da67      	bge.n	800fa3e <_dtoa_r+0x90e>
 800f96e:	9b00      	ldr	r3, [sp, #0]
 800f970:	3b01      	subs	r3, #1
 800f972:	ee18 1a10 	vmov	r1, s16
 800f976:	9300      	str	r3, [sp, #0]
 800f978:	220a      	movs	r2, #10
 800f97a:	2300      	movs	r3, #0
 800f97c:	4620      	mov	r0, r4
 800f97e:	f000 fa41 	bl	800fe04 <__multadd>
 800f982:	9b08      	ldr	r3, [sp, #32]
 800f984:	ee08 0a10 	vmov	s16, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f000 81b1 	beq.w	800fcf0 <_dtoa_r+0xbc0>
 800f98e:	2300      	movs	r3, #0
 800f990:	4639      	mov	r1, r7
 800f992:	220a      	movs	r2, #10
 800f994:	4620      	mov	r0, r4
 800f996:	f000 fa35 	bl	800fe04 <__multadd>
 800f99a:	9b02      	ldr	r3, [sp, #8]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	4607      	mov	r7, r0
 800f9a0:	f300 808e 	bgt.w	800fac0 <_dtoa_r+0x990>
 800f9a4:	9b06      	ldr	r3, [sp, #24]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	dc51      	bgt.n	800fa4e <_dtoa_r+0x91e>
 800f9aa:	e089      	b.n	800fac0 <_dtoa_r+0x990>
 800f9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9b2:	e74b      	b.n	800f84c <_dtoa_r+0x71c>
 800f9b4:	9b03      	ldr	r3, [sp, #12]
 800f9b6:	1e5e      	subs	r6, r3, #1
 800f9b8:	9b07      	ldr	r3, [sp, #28]
 800f9ba:	42b3      	cmp	r3, r6
 800f9bc:	bfbf      	itttt	lt
 800f9be:	9b07      	ldrlt	r3, [sp, #28]
 800f9c0:	9607      	strlt	r6, [sp, #28]
 800f9c2:	1af2      	sublt	r2, r6, r3
 800f9c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f9c6:	bfb6      	itet	lt
 800f9c8:	189b      	addlt	r3, r3, r2
 800f9ca:	1b9e      	subge	r6, r3, r6
 800f9cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f9ce:	9b03      	ldr	r3, [sp, #12]
 800f9d0:	bfb8      	it	lt
 800f9d2:	2600      	movlt	r6, #0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	bfb7      	itett	lt
 800f9d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f9dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f9e0:	1a9d      	sublt	r5, r3, r2
 800f9e2:	2300      	movlt	r3, #0
 800f9e4:	e734      	b.n	800f850 <_dtoa_r+0x720>
 800f9e6:	9e07      	ldr	r6, [sp, #28]
 800f9e8:	9d04      	ldr	r5, [sp, #16]
 800f9ea:	9f08      	ldr	r7, [sp, #32]
 800f9ec:	e73b      	b.n	800f866 <_dtoa_r+0x736>
 800f9ee:	9a07      	ldr	r2, [sp, #28]
 800f9f0:	e767      	b.n	800f8c2 <_dtoa_r+0x792>
 800f9f2:	9b06      	ldr	r3, [sp, #24]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	dc18      	bgt.n	800fa2a <_dtoa_r+0x8fa>
 800f9f8:	f1ba 0f00 	cmp.w	sl, #0
 800f9fc:	d115      	bne.n	800fa2a <_dtoa_r+0x8fa>
 800f9fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fa02:	b993      	cbnz	r3, 800fa2a <_dtoa_r+0x8fa>
 800fa04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa08:	0d1b      	lsrs	r3, r3, #20
 800fa0a:	051b      	lsls	r3, r3, #20
 800fa0c:	b183      	cbz	r3, 800fa30 <_dtoa_r+0x900>
 800fa0e:	9b04      	ldr	r3, [sp, #16]
 800fa10:	3301      	adds	r3, #1
 800fa12:	9304      	str	r3, [sp, #16]
 800fa14:	9b05      	ldr	r3, [sp, #20]
 800fa16:	3301      	adds	r3, #1
 800fa18:	9305      	str	r3, [sp, #20]
 800fa1a:	f04f 0801 	mov.w	r8, #1
 800fa1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f47f af6a 	bne.w	800f8fa <_dtoa_r+0x7ca>
 800fa26:	2001      	movs	r0, #1
 800fa28:	e76f      	b.n	800f90a <_dtoa_r+0x7da>
 800fa2a:	f04f 0800 	mov.w	r8, #0
 800fa2e:	e7f6      	b.n	800fa1e <_dtoa_r+0x8ee>
 800fa30:	4698      	mov	r8, r3
 800fa32:	e7f4      	b.n	800fa1e <_dtoa_r+0x8ee>
 800fa34:	f43f af7d 	beq.w	800f932 <_dtoa_r+0x802>
 800fa38:	4618      	mov	r0, r3
 800fa3a:	301c      	adds	r0, #28
 800fa3c:	e772      	b.n	800f924 <_dtoa_r+0x7f4>
 800fa3e:	9b03      	ldr	r3, [sp, #12]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	dc37      	bgt.n	800fab4 <_dtoa_r+0x984>
 800fa44:	9b06      	ldr	r3, [sp, #24]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	dd34      	ble.n	800fab4 <_dtoa_r+0x984>
 800fa4a:	9b03      	ldr	r3, [sp, #12]
 800fa4c:	9302      	str	r3, [sp, #8]
 800fa4e:	9b02      	ldr	r3, [sp, #8]
 800fa50:	b96b      	cbnz	r3, 800fa6e <_dtoa_r+0x93e>
 800fa52:	4631      	mov	r1, r6
 800fa54:	2205      	movs	r2, #5
 800fa56:	4620      	mov	r0, r4
 800fa58:	f000 f9d4 	bl	800fe04 <__multadd>
 800fa5c:	4601      	mov	r1, r0
 800fa5e:	4606      	mov	r6, r0
 800fa60:	ee18 0a10 	vmov	r0, s16
 800fa64:	f000 fbee 	bl	8010244 <__mcmp>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	f73f adbb 	bgt.w	800f5e4 <_dtoa_r+0x4b4>
 800fa6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa70:	9d01      	ldr	r5, [sp, #4]
 800fa72:	43db      	mvns	r3, r3
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	f04f 0800 	mov.w	r8, #0
 800fa7a:	4631      	mov	r1, r6
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 f99f 	bl	800fdc0 <_Bfree>
 800fa82:	2f00      	cmp	r7, #0
 800fa84:	f43f aea4 	beq.w	800f7d0 <_dtoa_r+0x6a0>
 800fa88:	f1b8 0f00 	cmp.w	r8, #0
 800fa8c:	d005      	beq.n	800fa9a <_dtoa_r+0x96a>
 800fa8e:	45b8      	cmp	r8, r7
 800fa90:	d003      	beq.n	800fa9a <_dtoa_r+0x96a>
 800fa92:	4641      	mov	r1, r8
 800fa94:	4620      	mov	r0, r4
 800fa96:	f000 f993 	bl	800fdc0 <_Bfree>
 800fa9a:	4639      	mov	r1, r7
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f000 f98f 	bl	800fdc0 <_Bfree>
 800faa2:	e695      	b.n	800f7d0 <_dtoa_r+0x6a0>
 800faa4:	2600      	movs	r6, #0
 800faa6:	4637      	mov	r7, r6
 800faa8:	e7e1      	b.n	800fa6e <_dtoa_r+0x93e>
 800faaa:	9700      	str	r7, [sp, #0]
 800faac:	4637      	mov	r7, r6
 800faae:	e599      	b.n	800f5e4 <_dtoa_r+0x4b4>
 800fab0:	40240000 	.word	0x40240000
 800fab4:	9b08      	ldr	r3, [sp, #32]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f000 80ca 	beq.w	800fc50 <_dtoa_r+0xb20>
 800fabc:	9b03      	ldr	r3, [sp, #12]
 800fabe:	9302      	str	r3, [sp, #8]
 800fac0:	2d00      	cmp	r5, #0
 800fac2:	dd05      	ble.n	800fad0 <_dtoa_r+0x9a0>
 800fac4:	4639      	mov	r1, r7
 800fac6:	462a      	mov	r2, r5
 800fac8:	4620      	mov	r0, r4
 800faca:	f000 fb4b 	bl	8010164 <__lshift>
 800face:	4607      	mov	r7, r0
 800fad0:	f1b8 0f00 	cmp.w	r8, #0
 800fad4:	d05b      	beq.n	800fb8e <_dtoa_r+0xa5e>
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	4620      	mov	r0, r4
 800fada:	f000 f931 	bl	800fd40 <_Balloc>
 800fade:	4605      	mov	r5, r0
 800fae0:	b928      	cbnz	r0, 800faee <_dtoa_r+0x9be>
 800fae2:	4b87      	ldr	r3, [pc, #540]	; (800fd00 <_dtoa_r+0xbd0>)
 800fae4:	4602      	mov	r2, r0
 800fae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800faea:	f7ff bb3b 	b.w	800f164 <_dtoa_r+0x34>
 800faee:	693a      	ldr	r2, [r7, #16]
 800faf0:	3202      	adds	r2, #2
 800faf2:	0092      	lsls	r2, r2, #2
 800faf4:	f107 010c 	add.w	r1, r7, #12
 800faf8:	300c      	adds	r0, #12
 800fafa:	f000 f913 	bl	800fd24 <memcpy>
 800fafe:	2201      	movs	r2, #1
 800fb00:	4629      	mov	r1, r5
 800fb02:	4620      	mov	r0, r4
 800fb04:	f000 fb2e 	bl	8010164 <__lshift>
 800fb08:	9b01      	ldr	r3, [sp, #4]
 800fb0a:	f103 0901 	add.w	r9, r3, #1
 800fb0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fb12:	4413      	add	r3, r2
 800fb14:	9305      	str	r3, [sp, #20]
 800fb16:	f00a 0301 	and.w	r3, sl, #1
 800fb1a:	46b8      	mov	r8, r7
 800fb1c:	9304      	str	r3, [sp, #16]
 800fb1e:	4607      	mov	r7, r0
 800fb20:	4631      	mov	r1, r6
 800fb22:	ee18 0a10 	vmov	r0, s16
 800fb26:	f7ff fa75 	bl	800f014 <quorem>
 800fb2a:	4641      	mov	r1, r8
 800fb2c:	9002      	str	r0, [sp, #8]
 800fb2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fb32:	ee18 0a10 	vmov	r0, s16
 800fb36:	f000 fb85 	bl	8010244 <__mcmp>
 800fb3a:	463a      	mov	r2, r7
 800fb3c:	9003      	str	r0, [sp, #12]
 800fb3e:	4631      	mov	r1, r6
 800fb40:	4620      	mov	r0, r4
 800fb42:	f000 fb9b 	bl	801027c <__mdiff>
 800fb46:	68c2      	ldr	r2, [r0, #12]
 800fb48:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800fb4c:	4605      	mov	r5, r0
 800fb4e:	bb02      	cbnz	r2, 800fb92 <_dtoa_r+0xa62>
 800fb50:	4601      	mov	r1, r0
 800fb52:	ee18 0a10 	vmov	r0, s16
 800fb56:	f000 fb75 	bl	8010244 <__mcmp>
 800fb5a:	4602      	mov	r2, r0
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	4620      	mov	r0, r4
 800fb60:	9207      	str	r2, [sp, #28]
 800fb62:	f000 f92d 	bl	800fdc0 <_Bfree>
 800fb66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fb6a:	ea43 0102 	orr.w	r1, r3, r2
 800fb6e:	9b04      	ldr	r3, [sp, #16]
 800fb70:	430b      	orrs	r3, r1
 800fb72:	464d      	mov	r5, r9
 800fb74:	d10f      	bne.n	800fb96 <_dtoa_r+0xa66>
 800fb76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fb7a:	d02a      	beq.n	800fbd2 <_dtoa_r+0xaa2>
 800fb7c:	9b03      	ldr	r3, [sp, #12]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	dd02      	ble.n	800fb88 <_dtoa_r+0xa58>
 800fb82:	9b02      	ldr	r3, [sp, #8]
 800fb84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fb88:	f88b a000 	strb.w	sl, [fp]
 800fb8c:	e775      	b.n	800fa7a <_dtoa_r+0x94a>
 800fb8e:	4638      	mov	r0, r7
 800fb90:	e7ba      	b.n	800fb08 <_dtoa_r+0x9d8>
 800fb92:	2201      	movs	r2, #1
 800fb94:	e7e2      	b.n	800fb5c <_dtoa_r+0xa2c>
 800fb96:	9b03      	ldr	r3, [sp, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	db04      	blt.n	800fba6 <_dtoa_r+0xa76>
 800fb9c:	9906      	ldr	r1, [sp, #24]
 800fb9e:	430b      	orrs	r3, r1
 800fba0:	9904      	ldr	r1, [sp, #16]
 800fba2:	430b      	orrs	r3, r1
 800fba4:	d122      	bne.n	800fbec <_dtoa_r+0xabc>
 800fba6:	2a00      	cmp	r2, #0
 800fba8:	ddee      	ble.n	800fb88 <_dtoa_r+0xa58>
 800fbaa:	ee18 1a10 	vmov	r1, s16
 800fbae:	2201      	movs	r2, #1
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f000 fad7 	bl	8010164 <__lshift>
 800fbb6:	4631      	mov	r1, r6
 800fbb8:	ee08 0a10 	vmov	s16, r0
 800fbbc:	f000 fb42 	bl	8010244 <__mcmp>
 800fbc0:	2800      	cmp	r0, #0
 800fbc2:	dc03      	bgt.n	800fbcc <_dtoa_r+0xa9c>
 800fbc4:	d1e0      	bne.n	800fb88 <_dtoa_r+0xa58>
 800fbc6:	f01a 0f01 	tst.w	sl, #1
 800fbca:	d0dd      	beq.n	800fb88 <_dtoa_r+0xa58>
 800fbcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbd0:	d1d7      	bne.n	800fb82 <_dtoa_r+0xa52>
 800fbd2:	2339      	movs	r3, #57	; 0x39
 800fbd4:	f88b 3000 	strb.w	r3, [fp]
 800fbd8:	462b      	mov	r3, r5
 800fbda:	461d      	mov	r5, r3
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbe2:	2a39      	cmp	r2, #57	; 0x39
 800fbe4:	d071      	beq.n	800fcca <_dtoa_r+0xb9a>
 800fbe6:	3201      	adds	r2, #1
 800fbe8:	701a      	strb	r2, [r3, #0]
 800fbea:	e746      	b.n	800fa7a <_dtoa_r+0x94a>
 800fbec:	2a00      	cmp	r2, #0
 800fbee:	dd07      	ble.n	800fc00 <_dtoa_r+0xad0>
 800fbf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fbf4:	d0ed      	beq.n	800fbd2 <_dtoa_r+0xaa2>
 800fbf6:	f10a 0301 	add.w	r3, sl, #1
 800fbfa:	f88b 3000 	strb.w	r3, [fp]
 800fbfe:	e73c      	b.n	800fa7a <_dtoa_r+0x94a>
 800fc00:	9b05      	ldr	r3, [sp, #20]
 800fc02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fc06:	4599      	cmp	r9, r3
 800fc08:	d047      	beq.n	800fc9a <_dtoa_r+0xb6a>
 800fc0a:	ee18 1a10 	vmov	r1, s16
 800fc0e:	2300      	movs	r3, #0
 800fc10:	220a      	movs	r2, #10
 800fc12:	4620      	mov	r0, r4
 800fc14:	f000 f8f6 	bl	800fe04 <__multadd>
 800fc18:	45b8      	cmp	r8, r7
 800fc1a:	ee08 0a10 	vmov	s16, r0
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	f04f 020a 	mov.w	r2, #10
 800fc26:	4641      	mov	r1, r8
 800fc28:	4620      	mov	r0, r4
 800fc2a:	d106      	bne.n	800fc3a <_dtoa_r+0xb0a>
 800fc2c:	f000 f8ea 	bl	800fe04 <__multadd>
 800fc30:	4680      	mov	r8, r0
 800fc32:	4607      	mov	r7, r0
 800fc34:	f109 0901 	add.w	r9, r9, #1
 800fc38:	e772      	b.n	800fb20 <_dtoa_r+0x9f0>
 800fc3a:	f000 f8e3 	bl	800fe04 <__multadd>
 800fc3e:	4639      	mov	r1, r7
 800fc40:	4680      	mov	r8, r0
 800fc42:	2300      	movs	r3, #0
 800fc44:	220a      	movs	r2, #10
 800fc46:	4620      	mov	r0, r4
 800fc48:	f000 f8dc 	bl	800fe04 <__multadd>
 800fc4c:	4607      	mov	r7, r0
 800fc4e:	e7f1      	b.n	800fc34 <_dtoa_r+0xb04>
 800fc50:	9b03      	ldr	r3, [sp, #12]
 800fc52:	9302      	str	r3, [sp, #8]
 800fc54:	9d01      	ldr	r5, [sp, #4]
 800fc56:	ee18 0a10 	vmov	r0, s16
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	f7ff f9da 	bl	800f014 <quorem>
 800fc60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fc64:	9b01      	ldr	r3, [sp, #4]
 800fc66:	f805 ab01 	strb.w	sl, [r5], #1
 800fc6a:	1aea      	subs	r2, r5, r3
 800fc6c:	9b02      	ldr	r3, [sp, #8]
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	dd09      	ble.n	800fc86 <_dtoa_r+0xb56>
 800fc72:	ee18 1a10 	vmov	r1, s16
 800fc76:	2300      	movs	r3, #0
 800fc78:	220a      	movs	r2, #10
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	f000 f8c2 	bl	800fe04 <__multadd>
 800fc80:	ee08 0a10 	vmov	s16, r0
 800fc84:	e7e7      	b.n	800fc56 <_dtoa_r+0xb26>
 800fc86:	9b02      	ldr	r3, [sp, #8]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	bfc8      	it	gt
 800fc8c:	461d      	movgt	r5, r3
 800fc8e:	9b01      	ldr	r3, [sp, #4]
 800fc90:	bfd8      	it	le
 800fc92:	2501      	movle	r5, #1
 800fc94:	441d      	add	r5, r3
 800fc96:	f04f 0800 	mov.w	r8, #0
 800fc9a:	ee18 1a10 	vmov	r1, s16
 800fc9e:	2201      	movs	r2, #1
 800fca0:	4620      	mov	r0, r4
 800fca2:	f000 fa5f 	bl	8010164 <__lshift>
 800fca6:	4631      	mov	r1, r6
 800fca8:	ee08 0a10 	vmov	s16, r0
 800fcac:	f000 faca 	bl	8010244 <__mcmp>
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	dc91      	bgt.n	800fbd8 <_dtoa_r+0xaa8>
 800fcb4:	d102      	bne.n	800fcbc <_dtoa_r+0xb8c>
 800fcb6:	f01a 0f01 	tst.w	sl, #1
 800fcba:	d18d      	bne.n	800fbd8 <_dtoa_r+0xaa8>
 800fcbc:	462b      	mov	r3, r5
 800fcbe:	461d      	mov	r5, r3
 800fcc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcc4:	2a30      	cmp	r2, #48	; 0x30
 800fcc6:	d0fa      	beq.n	800fcbe <_dtoa_r+0xb8e>
 800fcc8:	e6d7      	b.n	800fa7a <_dtoa_r+0x94a>
 800fcca:	9a01      	ldr	r2, [sp, #4]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d184      	bne.n	800fbda <_dtoa_r+0xaaa>
 800fcd0:	9b00      	ldr	r3, [sp, #0]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	2331      	movs	r3, #49	; 0x31
 800fcd8:	7013      	strb	r3, [r2, #0]
 800fcda:	e6ce      	b.n	800fa7a <_dtoa_r+0x94a>
 800fcdc:	4b09      	ldr	r3, [pc, #36]	; (800fd04 <_dtoa_r+0xbd4>)
 800fcde:	f7ff ba95 	b.w	800f20c <_dtoa_r+0xdc>
 800fce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f47f aa6e 	bne.w	800f1c6 <_dtoa_r+0x96>
 800fcea:	4b07      	ldr	r3, [pc, #28]	; (800fd08 <_dtoa_r+0xbd8>)
 800fcec:	f7ff ba8e 	b.w	800f20c <_dtoa_r+0xdc>
 800fcf0:	9b02      	ldr	r3, [sp, #8]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	dcae      	bgt.n	800fc54 <_dtoa_r+0xb24>
 800fcf6:	9b06      	ldr	r3, [sp, #24]
 800fcf8:	2b02      	cmp	r3, #2
 800fcfa:	f73f aea8 	bgt.w	800fa4e <_dtoa_r+0x91e>
 800fcfe:	e7a9      	b.n	800fc54 <_dtoa_r+0xb24>
 800fd00:	080130af 	.word	0x080130af
 800fd04:	0801300c 	.word	0x0801300c
 800fd08:	08013030 	.word	0x08013030

0800fd0c <_localeconv_r>:
 800fd0c:	4800      	ldr	r0, [pc, #0]	; (800fd10 <_localeconv_r+0x4>)
 800fd0e:	4770      	bx	lr
 800fd10:	20000178 	.word	0x20000178

0800fd14 <malloc>:
 800fd14:	4b02      	ldr	r3, [pc, #8]	; (800fd20 <malloc+0xc>)
 800fd16:	4601      	mov	r1, r0
 800fd18:	6818      	ldr	r0, [r3, #0]
 800fd1a:	f000 bc17 	b.w	801054c <_malloc_r>
 800fd1e:	bf00      	nop
 800fd20:	20000024 	.word	0x20000024

0800fd24 <memcpy>:
 800fd24:	440a      	add	r2, r1
 800fd26:	4291      	cmp	r1, r2
 800fd28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fd2c:	d100      	bne.n	800fd30 <memcpy+0xc>
 800fd2e:	4770      	bx	lr
 800fd30:	b510      	push	{r4, lr}
 800fd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd3a:	4291      	cmp	r1, r2
 800fd3c:	d1f9      	bne.n	800fd32 <memcpy+0xe>
 800fd3e:	bd10      	pop	{r4, pc}

0800fd40 <_Balloc>:
 800fd40:	b570      	push	{r4, r5, r6, lr}
 800fd42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd44:	4604      	mov	r4, r0
 800fd46:	460d      	mov	r5, r1
 800fd48:	b976      	cbnz	r6, 800fd68 <_Balloc+0x28>
 800fd4a:	2010      	movs	r0, #16
 800fd4c:	f7ff ffe2 	bl	800fd14 <malloc>
 800fd50:	4602      	mov	r2, r0
 800fd52:	6260      	str	r0, [r4, #36]	; 0x24
 800fd54:	b920      	cbnz	r0, 800fd60 <_Balloc+0x20>
 800fd56:	4b18      	ldr	r3, [pc, #96]	; (800fdb8 <_Balloc+0x78>)
 800fd58:	4818      	ldr	r0, [pc, #96]	; (800fdbc <_Balloc+0x7c>)
 800fd5a:	2166      	movs	r1, #102	; 0x66
 800fd5c:	f000 fdd6 	bl	801090c <__assert_func>
 800fd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd64:	6006      	str	r6, [r0, #0]
 800fd66:	60c6      	str	r6, [r0, #12]
 800fd68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fd6a:	68f3      	ldr	r3, [r6, #12]
 800fd6c:	b183      	cbz	r3, 800fd90 <_Balloc+0x50>
 800fd6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fd76:	b9b8      	cbnz	r0, 800fda8 <_Balloc+0x68>
 800fd78:	2101      	movs	r1, #1
 800fd7a:	fa01 f605 	lsl.w	r6, r1, r5
 800fd7e:	1d72      	adds	r2, r6, #5
 800fd80:	0092      	lsls	r2, r2, #2
 800fd82:	4620      	mov	r0, r4
 800fd84:	f000 fb60 	bl	8010448 <_calloc_r>
 800fd88:	b160      	cbz	r0, 800fda4 <_Balloc+0x64>
 800fd8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd8e:	e00e      	b.n	800fdae <_Balloc+0x6e>
 800fd90:	2221      	movs	r2, #33	; 0x21
 800fd92:	2104      	movs	r1, #4
 800fd94:	4620      	mov	r0, r4
 800fd96:	f000 fb57 	bl	8010448 <_calloc_r>
 800fd9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd9c:	60f0      	str	r0, [r6, #12]
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1e4      	bne.n	800fd6e <_Balloc+0x2e>
 800fda4:	2000      	movs	r0, #0
 800fda6:	bd70      	pop	{r4, r5, r6, pc}
 800fda8:	6802      	ldr	r2, [r0, #0]
 800fdaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fdae:	2300      	movs	r3, #0
 800fdb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fdb4:	e7f7      	b.n	800fda6 <_Balloc+0x66>
 800fdb6:	bf00      	nop
 800fdb8:	0801303d 	.word	0x0801303d
 800fdbc:	080130c0 	.word	0x080130c0

0800fdc0 <_Bfree>:
 800fdc0:	b570      	push	{r4, r5, r6, lr}
 800fdc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	460c      	mov	r4, r1
 800fdc8:	b976      	cbnz	r6, 800fde8 <_Bfree+0x28>
 800fdca:	2010      	movs	r0, #16
 800fdcc:	f7ff ffa2 	bl	800fd14 <malloc>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	6268      	str	r0, [r5, #36]	; 0x24
 800fdd4:	b920      	cbnz	r0, 800fde0 <_Bfree+0x20>
 800fdd6:	4b09      	ldr	r3, [pc, #36]	; (800fdfc <_Bfree+0x3c>)
 800fdd8:	4809      	ldr	r0, [pc, #36]	; (800fe00 <_Bfree+0x40>)
 800fdda:	218a      	movs	r1, #138	; 0x8a
 800fddc:	f000 fd96 	bl	801090c <__assert_func>
 800fde0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fde4:	6006      	str	r6, [r0, #0]
 800fde6:	60c6      	str	r6, [r0, #12]
 800fde8:	b13c      	cbz	r4, 800fdfa <_Bfree+0x3a>
 800fdea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fdec:	6862      	ldr	r2, [r4, #4]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fdf4:	6021      	str	r1, [r4, #0]
 800fdf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fdfa:	bd70      	pop	{r4, r5, r6, pc}
 800fdfc:	0801303d 	.word	0x0801303d
 800fe00:	080130c0 	.word	0x080130c0

0800fe04 <__multadd>:
 800fe04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe08:	690d      	ldr	r5, [r1, #16]
 800fe0a:	4607      	mov	r7, r0
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	461e      	mov	r6, r3
 800fe10:	f101 0c14 	add.w	ip, r1, #20
 800fe14:	2000      	movs	r0, #0
 800fe16:	f8dc 3000 	ldr.w	r3, [ip]
 800fe1a:	b299      	uxth	r1, r3
 800fe1c:	fb02 6101 	mla	r1, r2, r1, r6
 800fe20:	0c1e      	lsrs	r6, r3, #16
 800fe22:	0c0b      	lsrs	r3, r1, #16
 800fe24:	fb02 3306 	mla	r3, r2, r6, r3
 800fe28:	b289      	uxth	r1, r1
 800fe2a:	3001      	adds	r0, #1
 800fe2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fe30:	4285      	cmp	r5, r0
 800fe32:	f84c 1b04 	str.w	r1, [ip], #4
 800fe36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fe3a:	dcec      	bgt.n	800fe16 <__multadd+0x12>
 800fe3c:	b30e      	cbz	r6, 800fe82 <__multadd+0x7e>
 800fe3e:	68a3      	ldr	r3, [r4, #8]
 800fe40:	42ab      	cmp	r3, r5
 800fe42:	dc19      	bgt.n	800fe78 <__multadd+0x74>
 800fe44:	6861      	ldr	r1, [r4, #4]
 800fe46:	4638      	mov	r0, r7
 800fe48:	3101      	adds	r1, #1
 800fe4a:	f7ff ff79 	bl	800fd40 <_Balloc>
 800fe4e:	4680      	mov	r8, r0
 800fe50:	b928      	cbnz	r0, 800fe5e <__multadd+0x5a>
 800fe52:	4602      	mov	r2, r0
 800fe54:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <__multadd+0x84>)
 800fe56:	480d      	ldr	r0, [pc, #52]	; (800fe8c <__multadd+0x88>)
 800fe58:	21b5      	movs	r1, #181	; 0xb5
 800fe5a:	f000 fd57 	bl	801090c <__assert_func>
 800fe5e:	6922      	ldr	r2, [r4, #16]
 800fe60:	3202      	adds	r2, #2
 800fe62:	f104 010c 	add.w	r1, r4, #12
 800fe66:	0092      	lsls	r2, r2, #2
 800fe68:	300c      	adds	r0, #12
 800fe6a:	f7ff ff5b 	bl	800fd24 <memcpy>
 800fe6e:	4621      	mov	r1, r4
 800fe70:	4638      	mov	r0, r7
 800fe72:	f7ff ffa5 	bl	800fdc0 <_Bfree>
 800fe76:	4644      	mov	r4, r8
 800fe78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe7c:	3501      	adds	r5, #1
 800fe7e:	615e      	str	r6, [r3, #20]
 800fe80:	6125      	str	r5, [r4, #16]
 800fe82:	4620      	mov	r0, r4
 800fe84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe88:	080130af 	.word	0x080130af
 800fe8c:	080130c0 	.word	0x080130c0

0800fe90 <__hi0bits>:
 800fe90:	0c03      	lsrs	r3, r0, #16
 800fe92:	041b      	lsls	r3, r3, #16
 800fe94:	b9d3      	cbnz	r3, 800fecc <__hi0bits+0x3c>
 800fe96:	0400      	lsls	r0, r0, #16
 800fe98:	2310      	movs	r3, #16
 800fe9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe9e:	bf04      	itt	eq
 800fea0:	0200      	lsleq	r0, r0, #8
 800fea2:	3308      	addeq	r3, #8
 800fea4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fea8:	bf04      	itt	eq
 800feaa:	0100      	lsleq	r0, r0, #4
 800feac:	3304      	addeq	r3, #4
 800feae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800feb2:	bf04      	itt	eq
 800feb4:	0080      	lsleq	r0, r0, #2
 800feb6:	3302      	addeq	r3, #2
 800feb8:	2800      	cmp	r0, #0
 800feba:	db05      	blt.n	800fec8 <__hi0bits+0x38>
 800febc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fec0:	f103 0301 	add.w	r3, r3, #1
 800fec4:	bf08      	it	eq
 800fec6:	2320      	moveq	r3, #32
 800fec8:	4618      	mov	r0, r3
 800feca:	4770      	bx	lr
 800fecc:	2300      	movs	r3, #0
 800fece:	e7e4      	b.n	800fe9a <__hi0bits+0xa>

0800fed0 <__lo0bits>:
 800fed0:	6803      	ldr	r3, [r0, #0]
 800fed2:	f013 0207 	ands.w	r2, r3, #7
 800fed6:	4601      	mov	r1, r0
 800fed8:	d00b      	beq.n	800fef2 <__lo0bits+0x22>
 800feda:	07da      	lsls	r2, r3, #31
 800fedc:	d423      	bmi.n	800ff26 <__lo0bits+0x56>
 800fede:	0798      	lsls	r0, r3, #30
 800fee0:	bf49      	itett	mi
 800fee2:	085b      	lsrmi	r3, r3, #1
 800fee4:	089b      	lsrpl	r3, r3, #2
 800fee6:	2001      	movmi	r0, #1
 800fee8:	600b      	strmi	r3, [r1, #0]
 800feea:	bf5c      	itt	pl
 800feec:	600b      	strpl	r3, [r1, #0]
 800feee:	2002      	movpl	r0, #2
 800fef0:	4770      	bx	lr
 800fef2:	b298      	uxth	r0, r3
 800fef4:	b9a8      	cbnz	r0, 800ff22 <__lo0bits+0x52>
 800fef6:	0c1b      	lsrs	r3, r3, #16
 800fef8:	2010      	movs	r0, #16
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	b90a      	cbnz	r2, 800ff02 <__lo0bits+0x32>
 800fefe:	3008      	adds	r0, #8
 800ff00:	0a1b      	lsrs	r3, r3, #8
 800ff02:	071a      	lsls	r2, r3, #28
 800ff04:	bf04      	itt	eq
 800ff06:	091b      	lsreq	r3, r3, #4
 800ff08:	3004      	addeq	r0, #4
 800ff0a:	079a      	lsls	r2, r3, #30
 800ff0c:	bf04      	itt	eq
 800ff0e:	089b      	lsreq	r3, r3, #2
 800ff10:	3002      	addeq	r0, #2
 800ff12:	07da      	lsls	r2, r3, #31
 800ff14:	d403      	bmi.n	800ff1e <__lo0bits+0x4e>
 800ff16:	085b      	lsrs	r3, r3, #1
 800ff18:	f100 0001 	add.w	r0, r0, #1
 800ff1c:	d005      	beq.n	800ff2a <__lo0bits+0x5a>
 800ff1e:	600b      	str	r3, [r1, #0]
 800ff20:	4770      	bx	lr
 800ff22:	4610      	mov	r0, r2
 800ff24:	e7e9      	b.n	800fefa <__lo0bits+0x2a>
 800ff26:	2000      	movs	r0, #0
 800ff28:	4770      	bx	lr
 800ff2a:	2020      	movs	r0, #32
 800ff2c:	4770      	bx	lr
	...

0800ff30 <__i2b>:
 800ff30:	b510      	push	{r4, lr}
 800ff32:	460c      	mov	r4, r1
 800ff34:	2101      	movs	r1, #1
 800ff36:	f7ff ff03 	bl	800fd40 <_Balloc>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	b928      	cbnz	r0, 800ff4a <__i2b+0x1a>
 800ff3e:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <__i2b+0x24>)
 800ff40:	4805      	ldr	r0, [pc, #20]	; (800ff58 <__i2b+0x28>)
 800ff42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ff46:	f000 fce1 	bl	801090c <__assert_func>
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	6144      	str	r4, [r0, #20]
 800ff4e:	6103      	str	r3, [r0, #16]
 800ff50:	bd10      	pop	{r4, pc}
 800ff52:	bf00      	nop
 800ff54:	080130af 	.word	0x080130af
 800ff58:	080130c0 	.word	0x080130c0

0800ff5c <__multiply>:
 800ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff60:	4691      	mov	r9, r2
 800ff62:	690a      	ldr	r2, [r1, #16]
 800ff64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	bfb8      	it	lt
 800ff6c:	460b      	movlt	r3, r1
 800ff6e:	460c      	mov	r4, r1
 800ff70:	bfbc      	itt	lt
 800ff72:	464c      	movlt	r4, r9
 800ff74:	4699      	movlt	r9, r3
 800ff76:	6927      	ldr	r7, [r4, #16]
 800ff78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ff7c:	68a3      	ldr	r3, [r4, #8]
 800ff7e:	6861      	ldr	r1, [r4, #4]
 800ff80:	eb07 060a 	add.w	r6, r7, sl
 800ff84:	42b3      	cmp	r3, r6
 800ff86:	b085      	sub	sp, #20
 800ff88:	bfb8      	it	lt
 800ff8a:	3101      	addlt	r1, #1
 800ff8c:	f7ff fed8 	bl	800fd40 <_Balloc>
 800ff90:	b930      	cbnz	r0, 800ffa0 <__multiply+0x44>
 800ff92:	4602      	mov	r2, r0
 800ff94:	4b44      	ldr	r3, [pc, #272]	; (80100a8 <__multiply+0x14c>)
 800ff96:	4845      	ldr	r0, [pc, #276]	; (80100ac <__multiply+0x150>)
 800ff98:	f240 115d 	movw	r1, #349	; 0x15d
 800ff9c:	f000 fcb6 	bl	801090c <__assert_func>
 800ffa0:	f100 0514 	add.w	r5, r0, #20
 800ffa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ffa8:	462b      	mov	r3, r5
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4543      	cmp	r3, r8
 800ffae:	d321      	bcc.n	800fff4 <__multiply+0x98>
 800ffb0:	f104 0314 	add.w	r3, r4, #20
 800ffb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ffb8:	f109 0314 	add.w	r3, r9, #20
 800ffbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ffc0:	9202      	str	r2, [sp, #8]
 800ffc2:	1b3a      	subs	r2, r7, r4
 800ffc4:	3a15      	subs	r2, #21
 800ffc6:	f022 0203 	bic.w	r2, r2, #3
 800ffca:	3204      	adds	r2, #4
 800ffcc:	f104 0115 	add.w	r1, r4, #21
 800ffd0:	428f      	cmp	r7, r1
 800ffd2:	bf38      	it	cc
 800ffd4:	2204      	movcc	r2, #4
 800ffd6:	9201      	str	r2, [sp, #4]
 800ffd8:	9a02      	ldr	r2, [sp, #8]
 800ffda:	9303      	str	r3, [sp, #12]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d80c      	bhi.n	800fffa <__multiply+0x9e>
 800ffe0:	2e00      	cmp	r6, #0
 800ffe2:	dd03      	ble.n	800ffec <__multiply+0x90>
 800ffe4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d05a      	beq.n	80100a2 <__multiply+0x146>
 800ffec:	6106      	str	r6, [r0, #16]
 800ffee:	b005      	add	sp, #20
 800fff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff4:	f843 2b04 	str.w	r2, [r3], #4
 800fff8:	e7d8      	b.n	800ffac <__multiply+0x50>
 800fffa:	f8b3 a000 	ldrh.w	sl, [r3]
 800fffe:	f1ba 0f00 	cmp.w	sl, #0
 8010002:	d024      	beq.n	801004e <__multiply+0xf2>
 8010004:	f104 0e14 	add.w	lr, r4, #20
 8010008:	46a9      	mov	r9, r5
 801000a:	f04f 0c00 	mov.w	ip, #0
 801000e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010012:	f8d9 1000 	ldr.w	r1, [r9]
 8010016:	fa1f fb82 	uxth.w	fp, r2
 801001a:	b289      	uxth	r1, r1
 801001c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010020:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010024:	f8d9 2000 	ldr.w	r2, [r9]
 8010028:	4461      	add	r1, ip
 801002a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801002e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010032:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010036:	b289      	uxth	r1, r1
 8010038:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801003c:	4577      	cmp	r7, lr
 801003e:	f849 1b04 	str.w	r1, [r9], #4
 8010042:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010046:	d8e2      	bhi.n	801000e <__multiply+0xb2>
 8010048:	9a01      	ldr	r2, [sp, #4]
 801004a:	f845 c002 	str.w	ip, [r5, r2]
 801004e:	9a03      	ldr	r2, [sp, #12]
 8010050:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010054:	3304      	adds	r3, #4
 8010056:	f1b9 0f00 	cmp.w	r9, #0
 801005a:	d020      	beq.n	801009e <__multiply+0x142>
 801005c:	6829      	ldr	r1, [r5, #0]
 801005e:	f104 0c14 	add.w	ip, r4, #20
 8010062:	46ae      	mov	lr, r5
 8010064:	f04f 0a00 	mov.w	sl, #0
 8010068:	f8bc b000 	ldrh.w	fp, [ip]
 801006c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010070:	fb09 220b 	mla	r2, r9, fp, r2
 8010074:	4492      	add	sl, r2
 8010076:	b289      	uxth	r1, r1
 8010078:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801007c:	f84e 1b04 	str.w	r1, [lr], #4
 8010080:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010084:	f8be 1000 	ldrh.w	r1, [lr]
 8010088:	0c12      	lsrs	r2, r2, #16
 801008a:	fb09 1102 	mla	r1, r9, r2, r1
 801008e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010092:	4567      	cmp	r7, ip
 8010094:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010098:	d8e6      	bhi.n	8010068 <__multiply+0x10c>
 801009a:	9a01      	ldr	r2, [sp, #4]
 801009c:	50a9      	str	r1, [r5, r2]
 801009e:	3504      	adds	r5, #4
 80100a0:	e79a      	b.n	800ffd8 <__multiply+0x7c>
 80100a2:	3e01      	subs	r6, #1
 80100a4:	e79c      	b.n	800ffe0 <__multiply+0x84>
 80100a6:	bf00      	nop
 80100a8:	080130af 	.word	0x080130af
 80100ac:	080130c0 	.word	0x080130c0

080100b0 <__pow5mult>:
 80100b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100b4:	4615      	mov	r5, r2
 80100b6:	f012 0203 	ands.w	r2, r2, #3
 80100ba:	4606      	mov	r6, r0
 80100bc:	460f      	mov	r7, r1
 80100be:	d007      	beq.n	80100d0 <__pow5mult+0x20>
 80100c0:	4c25      	ldr	r4, [pc, #148]	; (8010158 <__pow5mult+0xa8>)
 80100c2:	3a01      	subs	r2, #1
 80100c4:	2300      	movs	r3, #0
 80100c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80100ca:	f7ff fe9b 	bl	800fe04 <__multadd>
 80100ce:	4607      	mov	r7, r0
 80100d0:	10ad      	asrs	r5, r5, #2
 80100d2:	d03d      	beq.n	8010150 <__pow5mult+0xa0>
 80100d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80100d6:	b97c      	cbnz	r4, 80100f8 <__pow5mult+0x48>
 80100d8:	2010      	movs	r0, #16
 80100da:	f7ff fe1b 	bl	800fd14 <malloc>
 80100de:	4602      	mov	r2, r0
 80100e0:	6270      	str	r0, [r6, #36]	; 0x24
 80100e2:	b928      	cbnz	r0, 80100f0 <__pow5mult+0x40>
 80100e4:	4b1d      	ldr	r3, [pc, #116]	; (801015c <__pow5mult+0xac>)
 80100e6:	481e      	ldr	r0, [pc, #120]	; (8010160 <__pow5mult+0xb0>)
 80100e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80100ec:	f000 fc0e 	bl	801090c <__assert_func>
 80100f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100f4:	6004      	str	r4, [r0, #0]
 80100f6:	60c4      	str	r4, [r0, #12]
 80100f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80100fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010100:	b94c      	cbnz	r4, 8010116 <__pow5mult+0x66>
 8010102:	f240 2171 	movw	r1, #625	; 0x271
 8010106:	4630      	mov	r0, r6
 8010108:	f7ff ff12 	bl	800ff30 <__i2b>
 801010c:	2300      	movs	r3, #0
 801010e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010112:	4604      	mov	r4, r0
 8010114:	6003      	str	r3, [r0, #0]
 8010116:	f04f 0900 	mov.w	r9, #0
 801011a:	07eb      	lsls	r3, r5, #31
 801011c:	d50a      	bpl.n	8010134 <__pow5mult+0x84>
 801011e:	4639      	mov	r1, r7
 8010120:	4622      	mov	r2, r4
 8010122:	4630      	mov	r0, r6
 8010124:	f7ff ff1a 	bl	800ff5c <__multiply>
 8010128:	4639      	mov	r1, r7
 801012a:	4680      	mov	r8, r0
 801012c:	4630      	mov	r0, r6
 801012e:	f7ff fe47 	bl	800fdc0 <_Bfree>
 8010132:	4647      	mov	r7, r8
 8010134:	106d      	asrs	r5, r5, #1
 8010136:	d00b      	beq.n	8010150 <__pow5mult+0xa0>
 8010138:	6820      	ldr	r0, [r4, #0]
 801013a:	b938      	cbnz	r0, 801014c <__pow5mult+0x9c>
 801013c:	4622      	mov	r2, r4
 801013e:	4621      	mov	r1, r4
 8010140:	4630      	mov	r0, r6
 8010142:	f7ff ff0b 	bl	800ff5c <__multiply>
 8010146:	6020      	str	r0, [r4, #0]
 8010148:	f8c0 9000 	str.w	r9, [r0]
 801014c:	4604      	mov	r4, r0
 801014e:	e7e4      	b.n	801011a <__pow5mult+0x6a>
 8010150:	4638      	mov	r0, r7
 8010152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010156:	bf00      	nop
 8010158:	08013210 	.word	0x08013210
 801015c:	0801303d 	.word	0x0801303d
 8010160:	080130c0 	.word	0x080130c0

08010164 <__lshift>:
 8010164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010168:	460c      	mov	r4, r1
 801016a:	6849      	ldr	r1, [r1, #4]
 801016c:	6923      	ldr	r3, [r4, #16]
 801016e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010172:	68a3      	ldr	r3, [r4, #8]
 8010174:	4607      	mov	r7, r0
 8010176:	4691      	mov	r9, r2
 8010178:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801017c:	f108 0601 	add.w	r6, r8, #1
 8010180:	42b3      	cmp	r3, r6
 8010182:	db0b      	blt.n	801019c <__lshift+0x38>
 8010184:	4638      	mov	r0, r7
 8010186:	f7ff fddb 	bl	800fd40 <_Balloc>
 801018a:	4605      	mov	r5, r0
 801018c:	b948      	cbnz	r0, 80101a2 <__lshift+0x3e>
 801018e:	4602      	mov	r2, r0
 8010190:	4b2a      	ldr	r3, [pc, #168]	; (801023c <__lshift+0xd8>)
 8010192:	482b      	ldr	r0, [pc, #172]	; (8010240 <__lshift+0xdc>)
 8010194:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010198:	f000 fbb8 	bl	801090c <__assert_func>
 801019c:	3101      	adds	r1, #1
 801019e:	005b      	lsls	r3, r3, #1
 80101a0:	e7ee      	b.n	8010180 <__lshift+0x1c>
 80101a2:	2300      	movs	r3, #0
 80101a4:	f100 0114 	add.w	r1, r0, #20
 80101a8:	f100 0210 	add.w	r2, r0, #16
 80101ac:	4618      	mov	r0, r3
 80101ae:	4553      	cmp	r3, sl
 80101b0:	db37      	blt.n	8010222 <__lshift+0xbe>
 80101b2:	6920      	ldr	r0, [r4, #16]
 80101b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80101b8:	f104 0314 	add.w	r3, r4, #20
 80101bc:	f019 091f 	ands.w	r9, r9, #31
 80101c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80101c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80101c8:	d02f      	beq.n	801022a <__lshift+0xc6>
 80101ca:	f1c9 0e20 	rsb	lr, r9, #32
 80101ce:	468a      	mov	sl, r1
 80101d0:	f04f 0c00 	mov.w	ip, #0
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	fa02 f209 	lsl.w	r2, r2, r9
 80101da:	ea42 020c 	orr.w	r2, r2, ip
 80101de:	f84a 2b04 	str.w	r2, [sl], #4
 80101e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101e6:	4298      	cmp	r0, r3
 80101e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80101ec:	d8f2      	bhi.n	80101d4 <__lshift+0x70>
 80101ee:	1b03      	subs	r3, r0, r4
 80101f0:	3b15      	subs	r3, #21
 80101f2:	f023 0303 	bic.w	r3, r3, #3
 80101f6:	3304      	adds	r3, #4
 80101f8:	f104 0215 	add.w	r2, r4, #21
 80101fc:	4290      	cmp	r0, r2
 80101fe:	bf38      	it	cc
 8010200:	2304      	movcc	r3, #4
 8010202:	f841 c003 	str.w	ip, [r1, r3]
 8010206:	f1bc 0f00 	cmp.w	ip, #0
 801020a:	d001      	beq.n	8010210 <__lshift+0xac>
 801020c:	f108 0602 	add.w	r6, r8, #2
 8010210:	3e01      	subs	r6, #1
 8010212:	4638      	mov	r0, r7
 8010214:	612e      	str	r6, [r5, #16]
 8010216:	4621      	mov	r1, r4
 8010218:	f7ff fdd2 	bl	800fdc0 <_Bfree>
 801021c:	4628      	mov	r0, r5
 801021e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010222:	f842 0f04 	str.w	r0, [r2, #4]!
 8010226:	3301      	adds	r3, #1
 8010228:	e7c1      	b.n	80101ae <__lshift+0x4a>
 801022a:	3904      	subs	r1, #4
 801022c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010230:	f841 2f04 	str.w	r2, [r1, #4]!
 8010234:	4298      	cmp	r0, r3
 8010236:	d8f9      	bhi.n	801022c <__lshift+0xc8>
 8010238:	e7ea      	b.n	8010210 <__lshift+0xac>
 801023a:	bf00      	nop
 801023c:	080130af 	.word	0x080130af
 8010240:	080130c0 	.word	0x080130c0

08010244 <__mcmp>:
 8010244:	b530      	push	{r4, r5, lr}
 8010246:	6902      	ldr	r2, [r0, #16]
 8010248:	690c      	ldr	r4, [r1, #16]
 801024a:	1b12      	subs	r2, r2, r4
 801024c:	d10e      	bne.n	801026c <__mcmp+0x28>
 801024e:	f100 0314 	add.w	r3, r0, #20
 8010252:	3114      	adds	r1, #20
 8010254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801025c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010264:	42a5      	cmp	r5, r4
 8010266:	d003      	beq.n	8010270 <__mcmp+0x2c>
 8010268:	d305      	bcc.n	8010276 <__mcmp+0x32>
 801026a:	2201      	movs	r2, #1
 801026c:	4610      	mov	r0, r2
 801026e:	bd30      	pop	{r4, r5, pc}
 8010270:	4283      	cmp	r3, r0
 8010272:	d3f3      	bcc.n	801025c <__mcmp+0x18>
 8010274:	e7fa      	b.n	801026c <__mcmp+0x28>
 8010276:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801027a:	e7f7      	b.n	801026c <__mcmp+0x28>

0801027c <__mdiff>:
 801027c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010280:	460c      	mov	r4, r1
 8010282:	4606      	mov	r6, r0
 8010284:	4611      	mov	r1, r2
 8010286:	4620      	mov	r0, r4
 8010288:	4690      	mov	r8, r2
 801028a:	f7ff ffdb 	bl	8010244 <__mcmp>
 801028e:	1e05      	subs	r5, r0, #0
 8010290:	d110      	bne.n	80102b4 <__mdiff+0x38>
 8010292:	4629      	mov	r1, r5
 8010294:	4630      	mov	r0, r6
 8010296:	f7ff fd53 	bl	800fd40 <_Balloc>
 801029a:	b930      	cbnz	r0, 80102aa <__mdiff+0x2e>
 801029c:	4b3a      	ldr	r3, [pc, #232]	; (8010388 <__mdiff+0x10c>)
 801029e:	4602      	mov	r2, r0
 80102a0:	f240 2132 	movw	r1, #562	; 0x232
 80102a4:	4839      	ldr	r0, [pc, #228]	; (801038c <__mdiff+0x110>)
 80102a6:	f000 fb31 	bl	801090c <__assert_func>
 80102aa:	2301      	movs	r3, #1
 80102ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80102b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b4:	bfa4      	itt	ge
 80102b6:	4643      	movge	r3, r8
 80102b8:	46a0      	movge	r8, r4
 80102ba:	4630      	mov	r0, r6
 80102bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80102c0:	bfa6      	itte	ge
 80102c2:	461c      	movge	r4, r3
 80102c4:	2500      	movge	r5, #0
 80102c6:	2501      	movlt	r5, #1
 80102c8:	f7ff fd3a 	bl	800fd40 <_Balloc>
 80102cc:	b920      	cbnz	r0, 80102d8 <__mdiff+0x5c>
 80102ce:	4b2e      	ldr	r3, [pc, #184]	; (8010388 <__mdiff+0x10c>)
 80102d0:	4602      	mov	r2, r0
 80102d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80102d6:	e7e5      	b.n	80102a4 <__mdiff+0x28>
 80102d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80102dc:	6926      	ldr	r6, [r4, #16]
 80102de:	60c5      	str	r5, [r0, #12]
 80102e0:	f104 0914 	add.w	r9, r4, #20
 80102e4:	f108 0514 	add.w	r5, r8, #20
 80102e8:	f100 0e14 	add.w	lr, r0, #20
 80102ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80102f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80102f4:	f108 0210 	add.w	r2, r8, #16
 80102f8:	46f2      	mov	sl, lr
 80102fa:	2100      	movs	r1, #0
 80102fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010304:	fa1f f883 	uxth.w	r8, r3
 8010308:	fa11 f18b 	uxtah	r1, r1, fp
 801030c:	0c1b      	lsrs	r3, r3, #16
 801030e:	eba1 0808 	sub.w	r8, r1, r8
 8010312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801031a:	fa1f f888 	uxth.w	r8, r8
 801031e:	1419      	asrs	r1, r3, #16
 8010320:	454e      	cmp	r6, r9
 8010322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010326:	f84a 3b04 	str.w	r3, [sl], #4
 801032a:	d8e7      	bhi.n	80102fc <__mdiff+0x80>
 801032c:	1b33      	subs	r3, r6, r4
 801032e:	3b15      	subs	r3, #21
 8010330:	f023 0303 	bic.w	r3, r3, #3
 8010334:	3304      	adds	r3, #4
 8010336:	3415      	adds	r4, #21
 8010338:	42a6      	cmp	r6, r4
 801033a:	bf38      	it	cc
 801033c:	2304      	movcc	r3, #4
 801033e:	441d      	add	r5, r3
 8010340:	4473      	add	r3, lr
 8010342:	469e      	mov	lr, r3
 8010344:	462e      	mov	r6, r5
 8010346:	4566      	cmp	r6, ip
 8010348:	d30e      	bcc.n	8010368 <__mdiff+0xec>
 801034a:	f10c 0203 	add.w	r2, ip, #3
 801034e:	1b52      	subs	r2, r2, r5
 8010350:	f022 0203 	bic.w	r2, r2, #3
 8010354:	3d03      	subs	r5, #3
 8010356:	45ac      	cmp	ip, r5
 8010358:	bf38      	it	cc
 801035a:	2200      	movcc	r2, #0
 801035c:	441a      	add	r2, r3
 801035e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010362:	b17b      	cbz	r3, 8010384 <__mdiff+0x108>
 8010364:	6107      	str	r7, [r0, #16]
 8010366:	e7a3      	b.n	80102b0 <__mdiff+0x34>
 8010368:	f856 8b04 	ldr.w	r8, [r6], #4
 801036c:	fa11 f288 	uxtah	r2, r1, r8
 8010370:	1414      	asrs	r4, r2, #16
 8010372:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010376:	b292      	uxth	r2, r2
 8010378:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801037c:	f84e 2b04 	str.w	r2, [lr], #4
 8010380:	1421      	asrs	r1, r4, #16
 8010382:	e7e0      	b.n	8010346 <__mdiff+0xca>
 8010384:	3f01      	subs	r7, #1
 8010386:	e7ea      	b.n	801035e <__mdiff+0xe2>
 8010388:	080130af 	.word	0x080130af
 801038c:	080130c0 	.word	0x080130c0

08010390 <__d2b>:
 8010390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010394:	4689      	mov	r9, r1
 8010396:	2101      	movs	r1, #1
 8010398:	ec57 6b10 	vmov	r6, r7, d0
 801039c:	4690      	mov	r8, r2
 801039e:	f7ff fccf 	bl	800fd40 <_Balloc>
 80103a2:	4604      	mov	r4, r0
 80103a4:	b930      	cbnz	r0, 80103b4 <__d2b+0x24>
 80103a6:	4602      	mov	r2, r0
 80103a8:	4b25      	ldr	r3, [pc, #148]	; (8010440 <__d2b+0xb0>)
 80103aa:	4826      	ldr	r0, [pc, #152]	; (8010444 <__d2b+0xb4>)
 80103ac:	f240 310a 	movw	r1, #778	; 0x30a
 80103b0:	f000 faac 	bl	801090c <__assert_func>
 80103b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80103b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80103bc:	bb35      	cbnz	r5, 801040c <__d2b+0x7c>
 80103be:	2e00      	cmp	r6, #0
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	d028      	beq.n	8010416 <__d2b+0x86>
 80103c4:	4668      	mov	r0, sp
 80103c6:	9600      	str	r6, [sp, #0]
 80103c8:	f7ff fd82 	bl	800fed0 <__lo0bits>
 80103cc:	9900      	ldr	r1, [sp, #0]
 80103ce:	b300      	cbz	r0, 8010412 <__d2b+0x82>
 80103d0:	9a01      	ldr	r2, [sp, #4]
 80103d2:	f1c0 0320 	rsb	r3, r0, #32
 80103d6:	fa02 f303 	lsl.w	r3, r2, r3
 80103da:	430b      	orrs	r3, r1
 80103dc:	40c2      	lsrs	r2, r0
 80103de:	6163      	str	r3, [r4, #20]
 80103e0:	9201      	str	r2, [sp, #4]
 80103e2:	9b01      	ldr	r3, [sp, #4]
 80103e4:	61a3      	str	r3, [r4, #24]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	bf14      	ite	ne
 80103ea:	2202      	movne	r2, #2
 80103ec:	2201      	moveq	r2, #1
 80103ee:	6122      	str	r2, [r4, #16]
 80103f0:	b1d5      	cbz	r5, 8010428 <__d2b+0x98>
 80103f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80103f6:	4405      	add	r5, r0
 80103f8:	f8c9 5000 	str.w	r5, [r9]
 80103fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010400:	f8c8 0000 	str.w	r0, [r8]
 8010404:	4620      	mov	r0, r4
 8010406:	b003      	add	sp, #12
 8010408:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801040c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010410:	e7d5      	b.n	80103be <__d2b+0x2e>
 8010412:	6161      	str	r1, [r4, #20]
 8010414:	e7e5      	b.n	80103e2 <__d2b+0x52>
 8010416:	a801      	add	r0, sp, #4
 8010418:	f7ff fd5a 	bl	800fed0 <__lo0bits>
 801041c:	9b01      	ldr	r3, [sp, #4]
 801041e:	6163      	str	r3, [r4, #20]
 8010420:	2201      	movs	r2, #1
 8010422:	6122      	str	r2, [r4, #16]
 8010424:	3020      	adds	r0, #32
 8010426:	e7e3      	b.n	80103f0 <__d2b+0x60>
 8010428:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801042c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010430:	f8c9 0000 	str.w	r0, [r9]
 8010434:	6918      	ldr	r0, [r3, #16]
 8010436:	f7ff fd2b 	bl	800fe90 <__hi0bits>
 801043a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801043e:	e7df      	b.n	8010400 <__d2b+0x70>
 8010440:	080130af 	.word	0x080130af
 8010444:	080130c0 	.word	0x080130c0

08010448 <_calloc_r>:
 8010448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801044a:	fba1 2402 	umull	r2, r4, r1, r2
 801044e:	b94c      	cbnz	r4, 8010464 <_calloc_r+0x1c>
 8010450:	4611      	mov	r1, r2
 8010452:	9201      	str	r2, [sp, #4]
 8010454:	f000 f87a 	bl	801054c <_malloc_r>
 8010458:	9a01      	ldr	r2, [sp, #4]
 801045a:	4605      	mov	r5, r0
 801045c:	b930      	cbnz	r0, 801046c <_calloc_r+0x24>
 801045e:	4628      	mov	r0, r5
 8010460:	b003      	add	sp, #12
 8010462:	bd30      	pop	{r4, r5, pc}
 8010464:	220c      	movs	r2, #12
 8010466:	6002      	str	r2, [r0, #0]
 8010468:	2500      	movs	r5, #0
 801046a:	e7f8      	b.n	801045e <_calloc_r+0x16>
 801046c:	4621      	mov	r1, r4
 801046e:	f7fe f93f 	bl	800e6f0 <memset>
 8010472:	e7f4      	b.n	801045e <_calloc_r+0x16>

08010474 <_free_r>:
 8010474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010476:	2900      	cmp	r1, #0
 8010478:	d044      	beq.n	8010504 <_free_r+0x90>
 801047a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801047e:	9001      	str	r0, [sp, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	f1a1 0404 	sub.w	r4, r1, #4
 8010486:	bfb8      	it	lt
 8010488:	18e4      	addlt	r4, r4, r3
 801048a:	f000 fa9b 	bl	80109c4 <__malloc_lock>
 801048e:	4a1e      	ldr	r2, [pc, #120]	; (8010508 <_free_r+0x94>)
 8010490:	9801      	ldr	r0, [sp, #4]
 8010492:	6813      	ldr	r3, [r2, #0]
 8010494:	b933      	cbnz	r3, 80104a4 <_free_r+0x30>
 8010496:	6063      	str	r3, [r4, #4]
 8010498:	6014      	str	r4, [r2, #0]
 801049a:	b003      	add	sp, #12
 801049c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80104a0:	f000 ba96 	b.w	80109d0 <__malloc_unlock>
 80104a4:	42a3      	cmp	r3, r4
 80104a6:	d908      	bls.n	80104ba <_free_r+0x46>
 80104a8:	6825      	ldr	r5, [r4, #0]
 80104aa:	1961      	adds	r1, r4, r5
 80104ac:	428b      	cmp	r3, r1
 80104ae:	bf01      	itttt	eq
 80104b0:	6819      	ldreq	r1, [r3, #0]
 80104b2:	685b      	ldreq	r3, [r3, #4]
 80104b4:	1949      	addeq	r1, r1, r5
 80104b6:	6021      	streq	r1, [r4, #0]
 80104b8:	e7ed      	b.n	8010496 <_free_r+0x22>
 80104ba:	461a      	mov	r2, r3
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	b10b      	cbz	r3, 80104c4 <_free_r+0x50>
 80104c0:	42a3      	cmp	r3, r4
 80104c2:	d9fa      	bls.n	80104ba <_free_r+0x46>
 80104c4:	6811      	ldr	r1, [r2, #0]
 80104c6:	1855      	adds	r5, r2, r1
 80104c8:	42a5      	cmp	r5, r4
 80104ca:	d10b      	bne.n	80104e4 <_free_r+0x70>
 80104cc:	6824      	ldr	r4, [r4, #0]
 80104ce:	4421      	add	r1, r4
 80104d0:	1854      	adds	r4, r2, r1
 80104d2:	42a3      	cmp	r3, r4
 80104d4:	6011      	str	r1, [r2, #0]
 80104d6:	d1e0      	bne.n	801049a <_free_r+0x26>
 80104d8:	681c      	ldr	r4, [r3, #0]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	6053      	str	r3, [r2, #4]
 80104de:	4421      	add	r1, r4
 80104e0:	6011      	str	r1, [r2, #0]
 80104e2:	e7da      	b.n	801049a <_free_r+0x26>
 80104e4:	d902      	bls.n	80104ec <_free_r+0x78>
 80104e6:	230c      	movs	r3, #12
 80104e8:	6003      	str	r3, [r0, #0]
 80104ea:	e7d6      	b.n	801049a <_free_r+0x26>
 80104ec:	6825      	ldr	r5, [r4, #0]
 80104ee:	1961      	adds	r1, r4, r5
 80104f0:	428b      	cmp	r3, r1
 80104f2:	bf04      	itt	eq
 80104f4:	6819      	ldreq	r1, [r3, #0]
 80104f6:	685b      	ldreq	r3, [r3, #4]
 80104f8:	6063      	str	r3, [r4, #4]
 80104fa:	bf04      	itt	eq
 80104fc:	1949      	addeq	r1, r1, r5
 80104fe:	6021      	streq	r1, [r4, #0]
 8010500:	6054      	str	r4, [r2, #4]
 8010502:	e7ca      	b.n	801049a <_free_r+0x26>
 8010504:	b003      	add	sp, #12
 8010506:	bd30      	pop	{r4, r5, pc}
 8010508:	20000624 	.word	0x20000624

0801050c <sbrk_aligned>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	4e0e      	ldr	r6, [pc, #56]	; (8010548 <sbrk_aligned+0x3c>)
 8010510:	460c      	mov	r4, r1
 8010512:	6831      	ldr	r1, [r6, #0]
 8010514:	4605      	mov	r5, r0
 8010516:	b911      	cbnz	r1, 801051e <sbrk_aligned+0x12>
 8010518:	f000 f9e8 	bl	80108ec <_sbrk_r>
 801051c:	6030      	str	r0, [r6, #0]
 801051e:	4621      	mov	r1, r4
 8010520:	4628      	mov	r0, r5
 8010522:	f000 f9e3 	bl	80108ec <_sbrk_r>
 8010526:	1c43      	adds	r3, r0, #1
 8010528:	d00a      	beq.n	8010540 <sbrk_aligned+0x34>
 801052a:	1cc4      	adds	r4, r0, #3
 801052c:	f024 0403 	bic.w	r4, r4, #3
 8010530:	42a0      	cmp	r0, r4
 8010532:	d007      	beq.n	8010544 <sbrk_aligned+0x38>
 8010534:	1a21      	subs	r1, r4, r0
 8010536:	4628      	mov	r0, r5
 8010538:	f000 f9d8 	bl	80108ec <_sbrk_r>
 801053c:	3001      	adds	r0, #1
 801053e:	d101      	bne.n	8010544 <sbrk_aligned+0x38>
 8010540:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010544:	4620      	mov	r0, r4
 8010546:	bd70      	pop	{r4, r5, r6, pc}
 8010548:	20000628 	.word	0x20000628

0801054c <_malloc_r>:
 801054c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010550:	1ccd      	adds	r5, r1, #3
 8010552:	f025 0503 	bic.w	r5, r5, #3
 8010556:	3508      	adds	r5, #8
 8010558:	2d0c      	cmp	r5, #12
 801055a:	bf38      	it	cc
 801055c:	250c      	movcc	r5, #12
 801055e:	2d00      	cmp	r5, #0
 8010560:	4607      	mov	r7, r0
 8010562:	db01      	blt.n	8010568 <_malloc_r+0x1c>
 8010564:	42a9      	cmp	r1, r5
 8010566:	d905      	bls.n	8010574 <_malloc_r+0x28>
 8010568:	230c      	movs	r3, #12
 801056a:	603b      	str	r3, [r7, #0]
 801056c:	2600      	movs	r6, #0
 801056e:	4630      	mov	r0, r6
 8010570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010574:	4e2e      	ldr	r6, [pc, #184]	; (8010630 <_malloc_r+0xe4>)
 8010576:	f000 fa25 	bl	80109c4 <__malloc_lock>
 801057a:	6833      	ldr	r3, [r6, #0]
 801057c:	461c      	mov	r4, r3
 801057e:	bb34      	cbnz	r4, 80105ce <_malloc_r+0x82>
 8010580:	4629      	mov	r1, r5
 8010582:	4638      	mov	r0, r7
 8010584:	f7ff ffc2 	bl	801050c <sbrk_aligned>
 8010588:	1c43      	adds	r3, r0, #1
 801058a:	4604      	mov	r4, r0
 801058c:	d14d      	bne.n	801062a <_malloc_r+0xde>
 801058e:	6834      	ldr	r4, [r6, #0]
 8010590:	4626      	mov	r6, r4
 8010592:	2e00      	cmp	r6, #0
 8010594:	d140      	bne.n	8010618 <_malloc_r+0xcc>
 8010596:	6823      	ldr	r3, [r4, #0]
 8010598:	4631      	mov	r1, r6
 801059a:	4638      	mov	r0, r7
 801059c:	eb04 0803 	add.w	r8, r4, r3
 80105a0:	f000 f9a4 	bl	80108ec <_sbrk_r>
 80105a4:	4580      	cmp	r8, r0
 80105a6:	d13a      	bne.n	801061e <_malloc_r+0xd2>
 80105a8:	6821      	ldr	r1, [r4, #0]
 80105aa:	3503      	adds	r5, #3
 80105ac:	1a6d      	subs	r5, r5, r1
 80105ae:	f025 0503 	bic.w	r5, r5, #3
 80105b2:	3508      	adds	r5, #8
 80105b4:	2d0c      	cmp	r5, #12
 80105b6:	bf38      	it	cc
 80105b8:	250c      	movcc	r5, #12
 80105ba:	4629      	mov	r1, r5
 80105bc:	4638      	mov	r0, r7
 80105be:	f7ff ffa5 	bl	801050c <sbrk_aligned>
 80105c2:	3001      	adds	r0, #1
 80105c4:	d02b      	beq.n	801061e <_malloc_r+0xd2>
 80105c6:	6823      	ldr	r3, [r4, #0]
 80105c8:	442b      	add	r3, r5
 80105ca:	6023      	str	r3, [r4, #0]
 80105cc:	e00e      	b.n	80105ec <_malloc_r+0xa0>
 80105ce:	6822      	ldr	r2, [r4, #0]
 80105d0:	1b52      	subs	r2, r2, r5
 80105d2:	d41e      	bmi.n	8010612 <_malloc_r+0xc6>
 80105d4:	2a0b      	cmp	r2, #11
 80105d6:	d916      	bls.n	8010606 <_malloc_r+0xba>
 80105d8:	1961      	adds	r1, r4, r5
 80105da:	42a3      	cmp	r3, r4
 80105dc:	6025      	str	r5, [r4, #0]
 80105de:	bf18      	it	ne
 80105e0:	6059      	strne	r1, [r3, #4]
 80105e2:	6863      	ldr	r3, [r4, #4]
 80105e4:	bf08      	it	eq
 80105e6:	6031      	streq	r1, [r6, #0]
 80105e8:	5162      	str	r2, [r4, r5]
 80105ea:	604b      	str	r3, [r1, #4]
 80105ec:	4638      	mov	r0, r7
 80105ee:	f104 060b 	add.w	r6, r4, #11
 80105f2:	f000 f9ed 	bl	80109d0 <__malloc_unlock>
 80105f6:	f026 0607 	bic.w	r6, r6, #7
 80105fa:	1d23      	adds	r3, r4, #4
 80105fc:	1af2      	subs	r2, r6, r3
 80105fe:	d0b6      	beq.n	801056e <_malloc_r+0x22>
 8010600:	1b9b      	subs	r3, r3, r6
 8010602:	50a3      	str	r3, [r4, r2]
 8010604:	e7b3      	b.n	801056e <_malloc_r+0x22>
 8010606:	6862      	ldr	r2, [r4, #4]
 8010608:	42a3      	cmp	r3, r4
 801060a:	bf0c      	ite	eq
 801060c:	6032      	streq	r2, [r6, #0]
 801060e:	605a      	strne	r2, [r3, #4]
 8010610:	e7ec      	b.n	80105ec <_malloc_r+0xa0>
 8010612:	4623      	mov	r3, r4
 8010614:	6864      	ldr	r4, [r4, #4]
 8010616:	e7b2      	b.n	801057e <_malloc_r+0x32>
 8010618:	4634      	mov	r4, r6
 801061a:	6876      	ldr	r6, [r6, #4]
 801061c:	e7b9      	b.n	8010592 <_malloc_r+0x46>
 801061e:	230c      	movs	r3, #12
 8010620:	603b      	str	r3, [r7, #0]
 8010622:	4638      	mov	r0, r7
 8010624:	f000 f9d4 	bl	80109d0 <__malloc_unlock>
 8010628:	e7a1      	b.n	801056e <_malloc_r+0x22>
 801062a:	6025      	str	r5, [r4, #0]
 801062c:	e7de      	b.n	80105ec <_malloc_r+0xa0>
 801062e:	bf00      	nop
 8010630:	20000624 	.word	0x20000624

08010634 <__ssputs_r>:
 8010634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010638:	688e      	ldr	r6, [r1, #8]
 801063a:	429e      	cmp	r6, r3
 801063c:	4682      	mov	sl, r0
 801063e:	460c      	mov	r4, r1
 8010640:	4690      	mov	r8, r2
 8010642:	461f      	mov	r7, r3
 8010644:	d838      	bhi.n	80106b8 <__ssputs_r+0x84>
 8010646:	898a      	ldrh	r2, [r1, #12]
 8010648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801064c:	d032      	beq.n	80106b4 <__ssputs_r+0x80>
 801064e:	6825      	ldr	r5, [r4, #0]
 8010650:	6909      	ldr	r1, [r1, #16]
 8010652:	eba5 0901 	sub.w	r9, r5, r1
 8010656:	6965      	ldr	r5, [r4, #20]
 8010658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801065c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010660:	3301      	adds	r3, #1
 8010662:	444b      	add	r3, r9
 8010664:	106d      	asrs	r5, r5, #1
 8010666:	429d      	cmp	r5, r3
 8010668:	bf38      	it	cc
 801066a:	461d      	movcc	r5, r3
 801066c:	0553      	lsls	r3, r2, #21
 801066e:	d531      	bpl.n	80106d4 <__ssputs_r+0xa0>
 8010670:	4629      	mov	r1, r5
 8010672:	f7ff ff6b 	bl	801054c <_malloc_r>
 8010676:	4606      	mov	r6, r0
 8010678:	b950      	cbnz	r0, 8010690 <__ssputs_r+0x5c>
 801067a:	230c      	movs	r3, #12
 801067c:	f8ca 3000 	str.w	r3, [sl]
 8010680:	89a3      	ldrh	r3, [r4, #12]
 8010682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010686:	81a3      	strh	r3, [r4, #12]
 8010688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010690:	6921      	ldr	r1, [r4, #16]
 8010692:	464a      	mov	r2, r9
 8010694:	f7ff fb46 	bl	800fd24 <memcpy>
 8010698:	89a3      	ldrh	r3, [r4, #12]
 801069a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801069e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a2:	81a3      	strh	r3, [r4, #12]
 80106a4:	6126      	str	r6, [r4, #16]
 80106a6:	6165      	str	r5, [r4, #20]
 80106a8:	444e      	add	r6, r9
 80106aa:	eba5 0509 	sub.w	r5, r5, r9
 80106ae:	6026      	str	r6, [r4, #0]
 80106b0:	60a5      	str	r5, [r4, #8]
 80106b2:	463e      	mov	r6, r7
 80106b4:	42be      	cmp	r6, r7
 80106b6:	d900      	bls.n	80106ba <__ssputs_r+0x86>
 80106b8:	463e      	mov	r6, r7
 80106ba:	6820      	ldr	r0, [r4, #0]
 80106bc:	4632      	mov	r2, r6
 80106be:	4641      	mov	r1, r8
 80106c0:	f000 f966 	bl	8010990 <memmove>
 80106c4:	68a3      	ldr	r3, [r4, #8]
 80106c6:	1b9b      	subs	r3, r3, r6
 80106c8:	60a3      	str	r3, [r4, #8]
 80106ca:	6823      	ldr	r3, [r4, #0]
 80106cc:	4433      	add	r3, r6
 80106ce:	6023      	str	r3, [r4, #0]
 80106d0:	2000      	movs	r0, #0
 80106d2:	e7db      	b.n	801068c <__ssputs_r+0x58>
 80106d4:	462a      	mov	r2, r5
 80106d6:	f000 f981 	bl	80109dc <_realloc_r>
 80106da:	4606      	mov	r6, r0
 80106dc:	2800      	cmp	r0, #0
 80106de:	d1e1      	bne.n	80106a4 <__ssputs_r+0x70>
 80106e0:	6921      	ldr	r1, [r4, #16]
 80106e2:	4650      	mov	r0, sl
 80106e4:	f7ff fec6 	bl	8010474 <_free_r>
 80106e8:	e7c7      	b.n	801067a <__ssputs_r+0x46>
	...

080106ec <_svfiprintf_r>:
 80106ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	4698      	mov	r8, r3
 80106f2:	898b      	ldrh	r3, [r1, #12]
 80106f4:	061b      	lsls	r3, r3, #24
 80106f6:	b09d      	sub	sp, #116	; 0x74
 80106f8:	4607      	mov	r7, r0
 80106fa:	460d      	mov	r5, r1
 80106fc:	4614      	mov	r4, r2
 80106fe:	d50e      	bpl.n	801071e <_svfiprintf_r+0x32>
 8010700:	690b      	ldr	r3, [r1, #16]
 8010702:	b963      	cbnz	r3, 801071e <_svfiprintf_r+0x32>
 8010704:	2140      	movs	r1, #64	; 0x40
 8010706:	f7ff ff21 	bl	801054c <_malloc_r>
 801070a:	6028      	str	r0, [r5, #0]
 801070c:	6128      	str	r0, [r5, #16]
 801070e:	b920      	cbnz	r0, 801071a <_svfiprintf_r+0x2e>
 8010710:	230c      	movs	r3, #12
 8010712:	603b      	str	r3, [r7, #0]
 8010714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010718:	e0d1      	b.n	80108be <_svfiprintf_r+0x1d2>
 801071a:	2340      	movs	r3, #64	; 0x40
 801071c:	616b      	str	r3, [r5, #20]
 801071e:	2300      	movs	r3, #0
 8010720:	9309      	str	r3, [sp, #36]	; 0x24
 8010722:	2320      	movs	r3, #32
 8010724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010728:	f8cd 800c 	str.w	r8, [sp, #12]
 801072c:	2330      	movs	r3, #48	; 0x30
 801072e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108d8 <_svfiprintf_r+0x1ec>
 8010732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010736:	f04f 0901 	mov.w	r9, #1
 801073a:	4623      	mov	r3, r4
 801073c:	469a      	mov	sl, r3
 801073e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010742:	b10a      	cbz	r2, 8010748 <_svfiprintf_r+0x5c>
 8010744:	2a25      	cmp	r2, #37	; 0x25
 8010746:	d1f9      	bne.n	801073c <_svfiprintf_r+0x50>
 8010748:	ebba 0b04 	subs.w	fp, sl, r4
 801074c:	d00b      	beq.n	8010766 <_svfiprintf_r+0x7a>
 801074e:	465b      	mov	r3, fp
 8010750:	4622      	mov	r2, r4
 8010752:	4629      	mov	r1, r5
 8010754:	4638      	mov	r0, r7
 8010756:	f7ff ff6d 	bl	8010634 <__ssputs_r>
 801075a:	3001      	adds	r0, #1
 801075c:	f000 80aa 	beq.w	80108b4 <_svfiprintf_r+0x1c8>
 8010760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010762:	445a      	add	r2, fp
 8010764:	9209      	str	r2, [sp, #36]	; 0x24
 8010766:	f89a 3000 	ldrb.w	r3, [sl]
 801076a:	2b00      	cmp	r3, #0
 801076c:	f000 80a2 	beq.w	80108b4 <_svfiprintf_r+0x1c8>
 8010770:	2300      	movs	r3, #0
 8010772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801077a:	f10a 0a01 	add.w	sl, sl, #1
 801077e:	9304      	str	r3, [sp, #16]
 8010780:	9307      	str	r3, [sp, #28]
 8010782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010786:	931a      	str	r3, [sp, #104]	; 0x68
 8010788:	4654      	mov	r4, sl
 801078a:	2205      	movs	r2, #5
 801078c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010790:	4851      	ldr	r0, [pc, #324]	; (80108d8 <_svfiprintf_r+0x1ec>)
 8010792:	f7ef fd2d 	bl	80001f0 <memchr>
 8010796:	9a04      	ldr	r2, [sp, #16]
 8010798:	b9d8      	cbnz	r0, 80107d2 <_svfiprintf_r+0xe6>
 801079a:	06d0      	lsls	r0, r2, #27
 801079c:	bf44      	itt	mi
 801079e:	2320      	movmi	r3, #32
 80107a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107a4:	0711      	lsls	r1, r2, #28
 80107a6:	bf44      	itt	mi
 80107a8:	232b      	movmi	r3, #43	; 0x2b
 80107aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ae:	f89a 3000 	ldrb.w	r3, [sl]
 80107b2:	2b2a      	cmp	r3, #42	; 0x2a
 80107b4:	d015      	beq.n	80107e2 <_svfiprintf_r+0xf6>
 80107b6:	9a07      	ldr	r2, [sp, #28]
 80107b8:	4654      	mov	r4, sl
 80107ba:	2000      	movs	r0, #0
 80107bc:	f04f 0c0a 	mov.w	ip, #10
 80107c0:	4621      	mov	r1, r4
 80107c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107c6:	3b30      	subs	r3, #48	; 0x30
 80107c8:	2b09      	cmp	r3, #9
 80107ca:	d94e      	bls.n	801086a <_svfiprintf_r+0x17e>
 80107cc:	b1b0      	cbz	r0, 80107fc <_svfiprintf_r+0x110>
 80107ce:	9207      	str	r2, [sp, #28]
 80107d0:	e014      	b.n	80107fc <_svfiprintf_r+0x110>
 80107d2:	eba0 0308 	sub.w	r3, r0, r8
 80107d6:	fa09 f303 	lsl.w	r3, r9, r3
 80107da:	4313      	orrs	r3, r2
 80107dc:	9304      	str	r3, [sp, #16]
 80107de:	46a2      	mov	sl, r4
 80107e0:	e7d2      	b.n	8010788 <_svfiprintf_r+0x9c>
 80107e2:	9b03      	ldr	r3, [sp, #12]
 80107e4:	1d19      	adds	r1, r3, #4
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	9103      	str	r1, [sp, #12]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	bfbb      	ittet	lt
 80107ee:	425b      	neglt	r3, r3
 80107f0:	f042 0202 	orrlt.w	r2, r2, #2
 80107f4:	9307      	strge	r3, [sp, #28]
 80107f6:	9307      	strlt	r3, [sp, #28]
 80107f8:	bfb8      	it	lt
 80107fa:	9204      	strlt	r2, [sp, #16]
 80107fc:	7823      	ldrb	r3, [r4, #0]
 80107fe:	2b2e      	cmp	r3, #46	; 0x2e
 8010800:	d10c      	bne.n	801081c <_svfiprintf_r+0x130>
 8010802:	7863      	ldrb	r3, [r4, #1]
 8010804:	2b2a      	cmp	r3, #42	; 0x2a
 8010806:	d135      	bne.n	8010874 <_svfiprintf_r+0x188>
 8010808:	9b03      	ldr	r3, [sp, #12]
 801080a:	1d1a      	adds	r2, r3, #4
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	9203      	str	r2, [sp, #12]
 8010810:	2b00      	cmp	r3, #0
 8010812:	bfb8      	it	lt
 8010814:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010818:	3402      	adds	r4, #2
 801081a:	9305      	str	r3, [sp, #20]
 801081c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80108e8 <_svfiprintf_r+0x1fc>
 8010820:	7821      	ldrb	r1, [r4, #0]
 8010822:	2203      	movs	r2, #3
 8010824:	4650      	mov	r0, sl
 8010826:	f7ef fce3 	bl	80001f0 <memchr>
 801082a:	b140      	cbz	r0, 801083e <_svfiprintf_r+0x152>
 801082c:	2340      	movs	r3, #64	; 0x40
 801082e:	eba0 000a 	sub.w	r0, r0, sl
 8010832:	fa03 f000 	lsl.w	r0, r3, r0
 8010836:	9b04      	ldr	r3, [sp, #16]
 8010838:	4303      	orrs	r3, r0
 801083a:	3401      	adds	r4, #1
 801083c:	9304      	str	r3, [sp, #16]
 801083e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010842:	4826      	ldr	r0, [pc, #152]	; (80108dc <_svfiprintf_r+0x1f0>)
 8010844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010848:	2206      	movs	r2, #6
 801084a:	f7ef fcd1 	bl	80001f0 <memchr>
 801084e:	2800      	cmp	r0, #0
 8010850:	d038      	beq.n	80108c4 <_svfiprintf_r+0x1d8>
 8010852:	4b23      	ldr	r3, [pc, #140]	; (80108e0 <_svfiprintf_r+0x1f4>)
 8010854:	bb1b      	cbnz	r3, 801089e <_svfiprintf_r+0x1b2>
 8010856:	9b03      	ldr	r3, [sp, #12]
 8010858:	3307      	adds	r3, #7
 801085a:	f023 0307 	bic.w	r3, r3, #7
 801085e:	3308      	adds	r3, #8
 8010860:	9303      	str	r3, [sp, #12]
 8010862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010864:	4433      	add	r3, r6
 8010866:	9309      	str	r3, [sp, #36]	; 0x24
 8010868:	e767      	b.n	801073a <_svfiprintf_r+0x4e>
 801086a:	fb0c 3202 	mla	r2, ip, r2, r3
 801086e:	460c      	mov	r4, r1
 8010870:	2001      	movs	r0, #1
 8010872:	e7a5      	b.n	80107c0 <_svfiprintf_r+0xd4>
 8010874:	2300      	movs	r3, #0
 8010876:	3401      	adds	r4, #1
 8010878:	9305      	str	r3, [sp, #20]
 801087a:	4619      	mov	r1, r3
 801087c:	f04f 0c0a 	mov.w	ip, #10
 8010880:	4620      	mov	r0, r4
 8010882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010886:	3a30      	subs	r2, #48	; 0x30
 8010888:	2a09      	cmp	r2, #9
 801088a:	d903      	bls.n	8010894 <_svfiprintf_r+0x1a8>
 801088c:	2b00      	cmp	r3, #0
 801088e:	d0c5      	beq.n	801081c <_svfiprintf_r+0x130>
 8010890:	9105      	str	r1, [sp, #20]
 8010892:	e7c3      	b.n	801081c <_svfiprintf_r+0x130>
 8010894:	fb0c 2101 	mla	r1, ip, r1, r2
 8010898:	4604      	mov	r4, r0
 801089a:	2301      	movs	r3, #1
 801089c:	e7f0      	b.n	8010880 <_svfiprintf_r+0x194>
 801089e:	ab03      	add	r3, sp, #12
 80108a0:	9300      	str	r3, [sp, #0]
 80108a2:	462a      	mov	r2, r5
 80108a4:	4b0f      	ldr	r3, [pc, #60]	; (80108e4 <_svfiprintf_r+0x1f8>)
 80108a6:	a904      	add	r1, sp, #16
 80108a8:	4638      	mov	r0, r7
 80108aa:	f7fd ffc9 	bl	800e840 <_printf_float>
 80108ae:	1c42      	adds	r2, r0, #1
 80108b0:	4606      	mov	r6, r0
 80108b2:	d1d6      	bne.n	8010862 <_svfiprintf_r+0x176>
 80108b4:	89ab      	ldrh	r3, [r5, #12]
 80108b6:	065b      	lsls	r3, r3, #25
 80108b8:	f53f af2c 	bmi.w	8010714 <_svfiprintf_r+0x28>
 80108bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108be:	b01d      	add	sp, #116	; 0x74
 80108c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108c4:	ab03      	add	r3, sp, #12
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	462a      	mov	r2, r5
 80108ca:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <_svfiprintf_r+0x1f8>)
 80108cc:	a904      	add	r1, sp, #16
 80108ce:	4638      	mov	r0, r7
 80108d0:	f7fe fa5a 	bl	800ed88 <_printf_i>
 80108d4:	e7eb      	b.n	80108ae <_svfiprintf_r+0x1c2>
 80108d6:	bf00      	nop
 80108d8:	0801321c 	.word	0x0801321c
 80108dc:	08013226 	.word	0x08013226
 80108e0:	0800e841 	.word	0x0800e841
 80108e4:	08010635 	.word	0x08010635
 80108e8:	08013222 	.word	0x08013222

080108ec <_sbrk_r>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	4d06      	ldr	r5, [pc, #24]	; (8010908 <_sbrk_r+0x1c>)
 80108f0:	2300      	movs	r3, #0
 80108f2:	4604      	mov	r4, r0
 80108f4:	4608      	mov	r0, r1
 80108f6:	602b      	str	r3, [r5, #0]
 80108f8:	f7f4 fefe 	bl	80056f8 <_sbrk>
 80108fc:	1c43      	adds	r3, r0, #1
 80108fe:	d102      	bne.n	8010906 <_sbrk_r+0x1a>
 8010900:	682b      	ldr	r3, [r5, #0]
 8010902:	b103      	cbz	r3, 8010906 <_sbrk_r+0x1a>
 8010904:	6023      	str	r3, [r4, #0]
 8010906:	bd38      	pop	{r3, r4, r5, pc}
 8010908:	2000062c 	.word	0x2000062c

0801090c <__assert_func>:
 801090c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801090e:	4614      	mov	r4, r2
 8010910:	461a      	mov	r2, r3
 8010912:	4b09      	ldr	r3, [pc, #36]	; (8010938 <__assert_func+0x2c>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4605      	mov	r5, r0
 8010918:	68d8      	ldr	r0, [r3, #12]
 801091a:	b14c      	cbz	r4, 8010930 <__assert_func+0x24>
 801091c:	4b07      	ldr	r3, [pc, #28]	; (801093c <__assert_func+0x30>)
 801091e:	9100      	str	r1, [sp, #0]
 8010920:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010924:	4906      	ldr	r1, [pc, #24]	; (8010940 <__assert_func+0x34>)
 8010926:	462b      	mov	r3, r5
 8010928:	f000 f80e 	bl	8010948 <fiprintf>
 801092c:	f000 faac 	bl	8010e88 <abort>
 8010930:	4b04      	ldr	r3, [pc, #16]	; (8010944 <__assert_func+0x38>)
 8010932:	461c      	mov	r4, r3
 8010934:	e7f3      	b.n	801091e <__assert_func+0x12>
 8010936:	bf00      	nop
 8010938:	20000024 	.word	0x20000024
 801093c:	0801322d 	.word	0x0801322d
 8010940:	0801323a 	.word	0x0801323a
 8010944:	08013268 	.word	0x08013268

08010948 <fiprintf>:
 8010948:	b40e      	push	{r1, r2, r3}
 801094a:	b503      	push	{r0, r1, lr}
 801094c:	4601      	mov	r1, r0
 801094e:	ab03      	add	r3, sp, #12
 8010950:	4805      	ldr	r0, [pc, #20]	; (8010968 <fiprintf+0x20>)
 8010952:	f853 2b04 	ldr.w	r2, [r3], #4
 8010956:	6800      	ldr	r0, [r0, #0]
 8010958:	9301      	str	r3, [sp, #4]
 801095a:	f000 f897 	bl	8010a8c <_vfiprintf_r>
 801095e:	b002      	add	sp, #8
 8010960:	f85d eb04 	ldr.w	lr, [sp], #4
 8010964:	b003      	add	sp, #12
 8010966:	4770      	bx	lr
 8010968:	20000024 	.word	0x20000024

0801096c <__ascii_mbtowc>:
 801096c:	b082      	sub	sp, #8
 801096e:	b901      	cbnz	r1, 8010972 <__ascii_mbtowc+0x6>
 8010970:	a901      	add	r1, sp, #4
 8010972:	b142      	cbz	r2, 8010986 <__ascii_mbtowc+0x1a>
 8010974:	b14b      	cbz	r3, 801098a <__ascii_mbtowc+0x1e>
 8010976:	7813      	ldrb	r3, [r2, #0]
 8010978:	600b      	str	r3, [r1, #0]
 801097a:	7812      	ldrb	r2, [r2, #0]
 801097c:	1e10      	subs	r0, r2, #0
 801097e:	bf18      	it	ne
 8010980:	2001      	movne	r0, #1
 8010982:	b002      	add	sp, #8
 8010984:	4770      	bx	lr
 8010986:	4610      	mov	r0, r2
 8010988:	e7fb      	b.n	8010982 <__ascii_mbtowc+0x16>
 801098a:	f06f 0001 	mvn.w	r0, #1
 801098e:	e7f8      	b.n	8010982 <__ascii_mbtowc+0x16>

08010990 <memmove>:
 8010990:	4288      	cmp	r0, r1
 8010992:	b510      	push	{r4, lr}
 8010994:	eb01 0402 	add.w	r4, r1, r2
 8010998:	d902      	bls.n	80109a0 <memmove+0x10>
 801099a:	4284      	cmp	r4, r0
 801099c:	4623      	mov	r3, r4
 801099e:	d807      	bhi.n	80109b0 <memmove+0x20>
 80109a0:	1e43      	subs	r3, r0, #1
 80109a2:	42a1      	cmp	r1, r4
 80109a4:	d008      	beq.n	80109b8 <memmove+0x28>
 80109a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109ae:	e7f8      	b.n	80109a2 <memmove+0x12>
 80109b0:	4402      	add	r2, r0
 80109b2:	4601      	mov	r1, r0
 80109b4:	428a      	cmp	r2, r1
 80109b6:	d100      	bne.n	80109ba <memmove+0x2a>
 80109b8:	bd10      	pop	{r4, pc}
 80109ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109c2:	e7f7      	b.n	80109b4 <memmove+0x24>

080109c4 <__malloc_lock>:
 80109c4:	4801      	ldr	r0, [pc, #4]	; (80109cc <__malloc_lock+0x8>)
 80109c6:	f000 bc1f 	b.w	8011208 <__retarget_lock_acquire_recursive>
 80109ca:	bf00      	nop
 80109cc:	20000630 	.word	0x20000630

080109d0 <__malloc_unlock>:
 80109d0:	4801      	ldr	r0, [pc, #4]	; (80109d8 <__malloc_unlock+0x8>)
 80109d2:	f000 bc1a 	b.w	801120a <__retarget_lock_release_recursive>
 80109d6:	bf00      	nop
 80109d8:	20000630 	.word	0x20000630

080109dc <_realloc_r>:
 80109dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109e0:	4680      	mov	r8, r0
 80109e2:	4614      	mov	r4, r2
 80109e4:	460e      	mov	r6, r1
 80109e6:	b921      	cbnz	r1, 80109f2 <_realloc_r+0x16>
 80109e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109ec:	4611      	mov	r1, r2
 80109ee:	f7ff bdad 	b.w	801054c <_malloc_r>
 80109f2:	b92a      	cbnz	r2, 8010a00 <_realloc_r+0x24>
 80109f4:	f7ff fd3e 	bl	8010474 <_free_r>
 80109f8:	4625      	mov	r5, r4
 80109fa:	4628      	mov	r0, r5
 80109fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a00:	f000 fc6a 	bl	80112d8 <_malloc_usable_size_r>
 8010a04:	4284      	cmp	r4, r0
 8010a06:	4607      	mov	r7, r0
 8010a08:	d802      	bhi.n	8010a10 <_realloc_r+0x34>
 8010a0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010a0e:	d812      	bhi.n	8010a36 <_realloc_r+0x5a>
 8010a10:	4621      	mov	r1, r4
 8010a12:	4640      	mov	r0, r8
 8010a14:	f7ff fd9a 	bl	801054c <_malloc_r>
 8010a18:	4605      	mov	r5, r0
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	d0ed      	beq.n	80109fa <_realloc_r+0x1e>
 8010a1e:	42bc      	cmp	r4, r7
 8010a20:	4622      	mov	r2, r4
 8010a22:	4631      	mov	r1, r6
 8010a24:	bf28      	it	cs
 8010a26:	463a      	movcs	r2, r7
 8010a28:	f7ff f97c 	bl	800fd24 <memcpy>
 8010a2c:	4631      	mov	r1, r6
 8010a2e:	4640      	mov	r0, r8
 8010a30:	f7ff fd20 	bl	8010474 <_free_r>
 8010a34:	e7e1      	b.n	80109fa <_realloc_r+0x1e>
 8010a36:	4635      	mov	r5, r6
 8010a38:	e7df      	b.n	80109fa <_realloc_r+0x1e>

08010a3a <__sfputc_r>:
 8010a3a:	6893      	ldr	r3, [r2, #8]
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	b410      	push	{r4}
 8010a42:	6093      	str	r3, [r2, #8]
 8010a44:	da08      	bge.n	8010a58 <__sfputc_r+0x1e>
 8010a46:	6994      	ldr	r4, [r2, #24]
 8010a48:	42a3      	cmp	r3, r4
 8010a4a:	db01      	blt.n	8010a50 <__sfputc_r+0x16>
 8010a4c:	290a      	cmp	r1, #10
 8010a4e:	d103      	bne.n	8010a58 <__sfputc_r+0x1e>
 8010a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a54:	f000 b94a 	b.w	8010cec <__swbuf_r>
 8010a58:	6813      	ldr	r3, [r2, #0]
 8010a5a:	1c58      	adds	r0, r3, #1
 8010a5c:	6010      	str	r0, [r2, #0]
 8010a5e:	7019      	strb	r1, [r3, #0]
 8010a60:	4608      	mov	r0, r1
 8010a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <__sfputs_r>:
 8010a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a6a:	4606      	mov	r6, r0
 8010a6c:	460f      	mov	r7, r1
 8010a6e:	4614      	mov	r4, r2
 8010a70:	18d5      	adds	r5, r2, r3
 8010a72:	42ac      	cmp	r4, r5
 8010a74:	d101      	bne.n	8010a7a <__sfputs_r+0x12>
 8010a76:	2000      	movs	r0, #0
 8010a78:	e007      	b.n	8010a8a <__sfputs_r+0x22>
 8010a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a7e:	463a      	mov	r2, r7
 8010a80:	4630      	mov	r0, r6
 8010a82:	f7ff ffda 	bl	8010a3a <__sfputc_r>
 8010a86:	1c43      	adds	r3, r0, #1
 8010a88:	d1f3      	bne.n	8010a72 <__sfputs_r+0xa>
 8010a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010a8c <_vfiprintf_r>:
 8010a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	460d      	mov	r5, r1
 8010a92:	b09d      	sub	sp, #116	; 0x74
 8010a94:	4614      	mov	r4, r2
 8010a96:	4698      	mov	r8, r3
 8010a98:	4606      	mov	r6, r0
 8010a9a:	b118      	cbz	r0, 8010aa4 <_vfiprintf_r+0x18>
 8010a9c:	6983      	ldr	r3, [r0, #24]
 8010a9e:	b90b      	cbnz	r3, 8010aa4 <_vfiprintf_r+0x18>
 8010aa0:	f000 fb14 	bl	80110cc <__sinit>
 8010aa4:	4b89      	ldr	r3, [pc, #548]	; (8010ccc <_vfiprintf_r+0x240>)
 8010aa6:	429d      	cmp	r5, r3
 8010aa8:	d11b      	bne.n	8010ae2 <_vfiprintf_r+0x56>
 8010aaa:	6875      	ldr	r5, [r6, #4]
 8010aac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010aae:	07d9      	lsls	r1, r3, #31
 8010ab0:	d405      	bmi.n	8010abe <_vfiprintf_r+0x32>
 8010ab2:	89ab      	ldrh	r3, [r5, #12]
 8010ab4:	059a      	lsls	r2, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_vfiprintf_r+0x32>
 8010ab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010aba:	f000 fba5 	bl	8011208 <__retarget_lock_acquire_recursive>
 8010abe:	89ab      	ldrh	r3, [r5, #12]
 8010ac0:	071b      	lsls	r3, r3, #28
 8010ac2:	d501      	bpl.n	8010ac8 <_vfiprintf_r+0x3c>
 8010ac4:	692b      	ldr	r3, [r5, #16]
 8010ac6:	b9eb      	cbnz	r3, 8010b04 <_vfiprintf_r+0x78>
 8010ac8:	4629      	mov	r1, r5
 8010aca:	4630      	mov	r0, r6
 8010acc:	f000 f96e 	bl	8010dac <__swsetup_r>
 8010ad0:	b1c0      	cbz	r0, 8010b04 <_vfiprintf_r+0x78>
 8010ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ad4:	07dc      	lsls	r4, r3, #31
 8010ad6:	d50e      	bpl.n	8010af6 <_vfiprintf_r+0x6a>
 8010ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010adc:	b01d      	add	sp, #116	; 0x74
 8010ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae2:	4b7b      	ldr	r3, [pc, #492]	; (8010cd0 <_vfiprintf_r+0x244>)
 8010ae4:	429d      	cmp	r5, r3
 8010ae6:	d101      	bne.n	8010aec <_vfiprintf_r+0x60>
 8010ae8:	68b5      	ldr	r5, [r6, #8]
 8010aea:	e7df      	b.n	8010aac <_vfiprintf_r+0x20>
 8010aec:	4b79      	ldr	r3, [pc, #484]	; (8010cd4 <_vfiprintf_r+0x248>)
 8010aee:	429d      	cmp	r5, r3
 8010af0:	bf08      	it	eq
 8010af2:	68f5      	ldreq	r5, [r6, #12]
 8010af4:	e7da      	b.n	8010aac <_vfiprintf_r+0x20>
 8010af6:	89ab      	ldrh	r3, [r5, #12]
 8010af8:	0598      	lsls	r0, r3, #22
 8010afa:	d4ed      	bmi.n	8010ad8 <_vfiprintf_r+0x4c>
 8010afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010afe:	f000 fb84 	bl	801120a <__retarget_lock_release_recursive>
 8010b02:	e7e9      	b.n	8010ad8 <_vfiprintf_r+0x4c>
 8010b04:	2300      	movs	r3, #0
 8010b06:	9309      	str	r3, [sp, #36]	; 0x24
 8010b08:	2320      	movs	r3, #32
 8010b0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b12:	2330      	movs	r3, #48	; 0x30
 8010b14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010cd8 <_vfiprintf_r+0x24c>
 8010b18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b1c:	f04f 0901 	mov.w	r9, #1
 8010b20:	4623      	mov	r3, r4
 8010b22:	469a      	mov	sl, r3
 8010b24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b28:	b10a      	cbz	r2, 8010b2e <_vfiprintf_r+0xa2>
 8010b2a:	2a25      	cmp	r2, #37	; 0x25
 8010b2c:	d1f9      	bne.n	8010b22 <_vfiprintf_r+0x96>
 8010b2e:	ebba 0b04 	subs.w	fp, sl, r4
 8010b32:	d00b      	beq.n	8010b4c <_vfiprintf_r+0xc0>
 8010b34:	465b      	mov	r3, fp
 8010b36:	4622      	mov	r2, r4
 8010b38:	4629      	mov	r1, r5
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f7ff ff94 	bl	8010a68 <__sfputs_r>
 8010b40:	3001      	adds	r0, #1
 8010b42:	f000 80aa 	beq.w	8010c9a <_vfiprintf_r+0x20e>
 8010b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b48:	445a      	add	r2, fp
 8010b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8010b4c:	f89a 3000 	ldrb.w	r3, [sl]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f000 80a2 	beq.w	8010c9a <_vfiprintf_r+0x20e>
 8010b56:	2300      	movs	r3, #0
 8010b58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b60:	f10a 0a01 	add.w	sl, sl, #1
 8010b64:	9304      	str	r3, [sp, #16]
 8010b66:	9307      	str	r3, [sp, #28]
 8010b68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b6c:	931a      	str	r3, [sp, #104]	; 0x68
 8010b6e:	4654      	mov	r4, sl
 8010b70:	2205      	movs	r2, #5
 8010b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b76:	4858      	ldr	r0, [pc, #352]	; (8010cd8 <_vfiprintf_r+0x24c>)
 8010b78:	f7ef fb3a 	bl	80001f0 <memchr>
 8010b7c:	9a04      	ldr	r2, [sp, #16]
 8010b7e:	b9d8      	cbnz	r0, 8010bb8 <_vfiprintf_r+0x12c>
 8010b80:	06d1      	lsls	r1, r2, #27
 8010b82:	bf44      	itt	mi
 8010b84:	2320      	movmi	r3, #32
 8010b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b8a:	0713      	lsls	r3, r2, #28
 8010b8c:	bf44      	itt	mi
 8010b8e:	232b      	movmi	r3, #43	; 0x2b
 8010b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010b94:	f89a 3000 	ldrb.w	r3, [sl]
 8010b98:	2b2a      	cmp	r3, #42	; 0x2a
 8010b9a:	d015      	beq.n	8010bc8 <_vfiprintf_r+0x13c>
 8010b9c:	9a07      	ldr	r2, [sp, #28]
 8010b9e:	4654      	mov	r4, sl
 8010ba0:	2000      	movs	r0, #0
 8010ba2:	f04f 0c0a 	mov.w	ip, #10
 8010ba6:	4621      	mov	r1, r4
 8010ba8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bac:	3b30      	subs	r3, #48	; 0x30
 8010bae:	2b09      	cmp	r3, #9
 8010bb0:	d94e      	bls.n	8010c50 <_vfiprintf_r+0x1c4>
 8010bb2:	b1b0      	cbz	r0, 8010be2 <_vfiprintf_r+0x156>
 8010bb4:	9207      	str	r2, [sp, #28]
 8010bb6:	e014      	b.n	8010be2 <_vfiprintf_r+0x156>
 8010bb8:	eba0 0308 	sub.w	r3, r0, r8
 8010bbc:	fa09 f303 	lsl.w	r3, r9, r3
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	9304      	str	r3, [sp, #16]
 8010bc4:	46a2      	mov	sl, r4
 8010bc6:	e7d2      	b.n	8010b6e <_vfiprintf_r+0xe2>
 8010bc8:	9b03      	ldr	r3, [sp, #12]
 8010bca:	1d19      	adds	r1, r3, #4
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	9103      	str	r1, [sp, #12]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	bfbb      	ittet	lt
 8010bd4:	425b      	neglt	r3, r3
 8010bd6:	f042 0202 	orrlt.w	r2, r2, #2
 8010bda:	9307      	strge	r3, [sp, #28]
 8010bdc:	9307      	strlt	r3, [sp, #28]
 8010bde:	bfb8      	it	lt
 8010be0:	9204      	strlt	r2, [sp, #16]
 8010be2:	7823      	ldrb	r3, [r4, #0]
 8010be4:	2b2e      	cmp	r3, #46	; 0x2e
 8010be6:	d10c      	bne.n	8010c02 <_vfiprintf_r+0x176>
 8010be8:	7863      	ldrb	r3, [r4, #1]
 8010bea:	2b2a      	cmp	r3, #42	; 0x2a
 8010bec:	d135      	bne.n	8010c5a <_vfiprintf_r+0x1ce>
 8010bee:	9b03      	ldr	r3, [sp, #12]
 8010bf0:	1d1a      	adds	r2, r3, #4
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	9203      	str	r2, [sp, #12]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	bfb8      	it	lt
 8010bfa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010bfe:	3402      	adds	r4, #2
 8010c00:	9305      	str	r3, [sp, #20]
 8010c02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010ce8 <_vfiprintf_r+0x25c>
 8010c06:	7821      	ldrb	r1, [r4, #0]
 8010c08:	2203      	movs	r2, #3
 8010c0a:	4650      	mov	r0, sl
 8010c0c:	f7ef faf0 	bl	80001f0 <memchr>
 8010c10:	b140      	cbz	r0, 8010c24 <_vfiprintf_r+0x198>
 8010c12:	2340      	movs	r3, #64	; 0x40
 8010c14:	eba0 000a 	sub.w	r0, r0, sl
 8010c18:	fa03 f000 	lsl.w	r0, r3, r0
 8010c1c:	9b04      	ldr	r3, [sp, #16]
 8010c1e:	4303      	orrs	r3, r0
 8010c20:	3401      	adds	r4, #1
 8010c22:	9304      	str	r3, [sp, #16]
 8010c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c28:	482c      	ldr	r0, [pc, #176]	; (8010cdc <_vfiprintf_r+0x250>)
 8010c2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c2e:	2206      	movs	r2, #6
 8010c30:	f7ef fade 	bl	80001f0 <memchr>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d03f      	beq.n	8010cb8 <_vfiprintf_r+0x22c>
 8010c38:	4b29      	ldr	r3, [pc, #164]	; (8010ce0 <_vfiprintf_r+0x254>)
 8010c3a:	bb1b      	cbnz	r3, 8010c84 <_vfiprintf_r+0x1f8>
 8010c3c:	9b03      	ldr	r3, [sp, #12]
 8010c3e:	3307      	adds	r3, #7
 8010c40:	f023 0307 	bic.w	r3, r3, #7
 8010c44:	3308      	adds	r3, #8
 8010c46:	9303      	str	r3, [sp, #12]
 8010c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c4a:	443b      	add	r3, r7
 8010c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8010c4e:	e767      	b.n	8010b20 <_vfiprintf_r+0x94>
 8010c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c54:	460c      	mov	r4, r1
 8010c56:	2001      	movs	r0, #1
 8010c58:	e7a5      	b.n	8010ba6 <_vfiprintf_r+0x11a>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	3401      	adds	r4, #1
 8010c5e:	9305      	str	r3, [sp, #20]
 8010c60:	4619      	mov	r1, r3
 8010c62:	f04f 0c0a 	mov.w	ip, #10
 8010c66:	4620      	mov	r0, r4
 8010c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c6c:	3a30      	subs	r2, #48	; 0x30
 8010c6e:	2a09      	cmp	r2, #9
 8010c70:	d903      	bls.n	8010c7a <_vfiprintf_r+0x1ee>
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d0c5      	beq.n	8010c02 <_vfiprintf_r+0x176>
 8010c76:	9105      	str	r1, [sp, #20]
 8010c78:	e7c3      	b.n	8010c02 <_vfiprintf_r+0x176>
 8010c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c7e:	4604      	mov	r4, r0
 8010c80:	2301      	movs	r3, #1
 8010c82:	e7f0      	b.n	8010c66 <_vfiprintf_r+0x1da>
 8010c84:	ab03      	add	r3, sp, #12
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	462a      	mov	r2, r5
 8010c8a:	4b16      	ldr	r3, [pc, #88]	; (8010ce4 <_vfiprintf_r+0x258>)
 8010c8c:	a904      	add	r1, sp, #16
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7fd fdd6 	bl	800e840 <_printf_float>
 8010c94:	4607      	mov	r7, r0
 8010c96:	1c78      	adds	r0, r7, #1
 8010c98:	d1d6      	bne.n	8010c48 <_vfiprintf_r+0x1bc>
 8010c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c9c:	07d9      	lsls	r1, r3, #31
 8010c9e:	d405      	bmi.n	8010cac <_vfiprintf_r+0x220>
 8010ca0:	89ab      	ldrh	r3, [r5, #12]
 8010ca2:	059a      	lsls	r2, r3, #22
 8010ca4:	d402      	bmi.n	8010cac <_vfiprintf_r+0x220>
 8010ca6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ca8:	f000 faaf 	bl	801120a <__retarget_lock_release_recursive>
 8010cac:	89ab      	ldrh	r3, [r5, #12]
 8010cae:	065b      	lsls	r3, r3, #25
 8010cb0:	f53f af12 	bmi.w	8010ad8 <_vfiprintf_r+0x4c>
 8010cb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cb6:	e711      	b.n	8010adc <_vfiprintf_r+0x50>
 8010cb8:	ab03      	add	r3, sp, #12
 8010cba:	9300      	str	r3, [sp, #0]
 8010cbc:	462a      	mov	r2, r5
 8010cbe:	4b09      	ldr	r3, [pc, #36]	; (8010ce4 <_vfiprintf_r+0x258>)
 8010cc0:	a904      	add	r1, sp, #16
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	f7fe f860 	bl	800ed88 <_printf_i>
 8010cc8:	e7e4      	b.n	8010c94 <_vfiprintf_r+0x208>
 8010cca:	bf00      	nop
 8010ccc:	08013394 	.word	0x08013394
 8010cd0:	080133b4 	.word	0x080133b4
 8010cd4:	08013374 	.word	0x08013374
 8010cd8:	0801321c 	.word	0x0801321c
 8010cdc:	08013226 	.word	0x08013226
 8010ce0:	0800e841 	.word	0x0800e841
 8010ce4:	08010a69 	.word	0x08010a69
 8010ce8:	08013222 	.word	0x08013222

08010cec <__swbuf_r>:
 8010cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cee:	460e      	mov	r6, r1
 8010cf0:	4614      	mov	r4, r2
 8010cf2:	4605      	mov	r5, r0
 8010cf4:	b118      	cbz	r0, 8010cfe <__swbuf_r+0x12>
 8010cf6:	6983      	ldr	r3, [r0, #24]
 8010cf8:	b90b      	cbnz	r3, 8010cfe <__swbuf_r+0x12>
 8010cfa:	f000 f9e7 	bl	80110cc <__sinit>
 8010cfe:	4b21      	ldr	r3, [pc, #132]	; (8010d84 <__swbuf_r+0x98>)
 8010d00:	429c      	cmp	r4, r3
 8010d02:	d12b      	bne.n	8010d5c <__swbuf_r+0x70>
 8010d04:	686c      	ldr	r4, [r5, #4]
 8010d06:	69a3      	ldr	r3, [r4, #24]
 8010d08:	60a3      	str	r3, [r4, #8]
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	071a      	lsls	r2, r3, #28
 8010d0e:	d52f      	bpl.n	8010d70 <__swbuf_r+0x84>
 8010d10:	6923      	ldr	r3, [r4, #16]
 8010d12:	b36b      	cbz	r3, 8010d70 <__swbuf_r+0x84>
 8010d14:	6923      	ldr	r3, [r4, #16]
 8010d16:	6820      	ldr	r0, [r4, #0]
 8010d18:	1ac0      	subs	r0, r0, r3
 8010d1a:	6963      	ldr	r3, [r4, #20]
 8010d1c:	b2f6      	uxtb	r6, r6
 8010d1e:	4283      	cmp	r3, r0
 8010d20:	4637      	mov	r7, r6
 8010d22:	dc04      	bgt.n	8010d2e <__swbuf_r+0x42>
 8010d24:	4621      	mov	r1, r4
 8010d26:	4628      	mov	r0, r5
 8010d28:	f000 f93c 	bl	8010fa4 <_fflush_r>
 8010d2c:	bb30      	cbnz	r0, 8010d7c <__swbuf_r+0x90>
 8010d2e:	68a3      	ldr	r3, [r4, #8]
 8010d30:	3b01      	subs	r3, #1
 8010d32:	60a3      	str	r3, [r4, #8]
 8010d34:	6823      	ldr	r3, [r4, #0]
 8010d36:	1c5a      	adds	r2, r3, #1
 8010d38:	6022      	str	r2, [r4, #0]
 8010d3a:	701e      	strb	r6, [r3, #0]
 8010d3c:	6963      	ldr	r3, [r4, #20]
 8010d3e:	3001      	adds	r0, #1
 8010d40:	4283      	cmp	r3, r0
 8010d42:	d004      	beq.n	8010d4e <__swbuf_r+0x62>
 8010d44:	89a3      	ldrh	r3, [r4, #12]
 8010d46:	07db      	lsls	r3, r3, #31
 8010d48:	d506      	bpl.n	8010d58 <__swbuf_r+0x6c>
 8010d4a:	2e0a      	cmp	r6, #10
 8010d4c:	d104      	bne.n	8010d58 <__swbuf_r+0x6c>
 8010d4e:	4621      	mov	r1, r4
 8010d50:	4628      	mov	r0, r5
 8010d52:	f000 f927 	bl	8010fa4 <_fflush_r>
 8010d56:	b988      	cbnz	r0, 8010d7c <__swbuf_r+0x90>
 8010d58:	4638      	mov	r0, r7
 8010d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d5c:	4b0a      	ldr	r3, [pc, #40]	; (8010d88 <__swbuf_r+0x9c>)
 8010d5e:	429c      	cmp	r4, r3
 8010d60:	d101      	bne.n	8010d66 <__swbuf_r+0x7a>
 8010d62:	68ac      	ldr	r4, [r5, #8]
 8010d64:	e7cf      	b.n	8010d06 <__swbuf_r+0x1a>
 8010d66:	4b09      	ldr	r3, [pc, #36]	; (8010d8c <__swbuf_r+0xa0>)
 8010d68:	429c      	cmp	r4, r3
 8010d6a:	bf08      	it	eq
 8010d6c:	68ec      	ldreq	r4, [r5, #12]
 8010d6e:	e7ca      	b.n	8010d06 <__swbuf_r+0x1a>
 8010d70:	4621      	mov	r1, r4
 8010d72:	4628      	mov	r0, r5
 8010d74:	f000 f81a 	bl	8010dac <__swsetup_r>
 8010d78:	2800      	cmp	r0, #0
 8010d7a:	d0cb      	beq.n	8010d14 <__swbuf_r+0x28>
 8010d7c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010d80:	e7ea      	b.n	8010d58 <__swbuf_r+0x6c>
 8010d82:	bf00      	nop
 8010d84:	08013394 	.word	0x08013394
 8010d88:	080133b4 	.word	0x080133b4
 8010d8c:	08013374 	.word	0x08013374

08010d90 <__ascii_wctomb>:
 8010d90:	b149      	cbz	r1, 8010da6 <__ascii_wctomb+0x16>
 8010d92:	2aff      	cmp	r2, #255	; 0xff
 8010d94:	bf85      	ittet	hi
 8010d96:	238a      	movhi	r3, #138	; 0x8a
 8010d98:	6003      	strhi	r3, [r0, #0]
 8010d9a:	700a      	strbls	r2, [r1, #0]
 8010d9c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010da0:	bf98      	it	ls
 8010da2:	2001      	movls	r0, #1
 8010da4:	4770      	bx	lr
 8010da6:	4608      	mov	r0, r1
 8010da8:	4770      	bx	lr
	...

08010dac <__swsetup_r>:
 8010dac:	4b32      	ldr	r3, [pc, #200]	; (8010e78 <__swsetup_r+0xcc>)
 8010dae:	b570      	push	{r4, r5, r6, lr}
 8010db0:	681d      	ldr	r5, [r3, #0]
 8010db2:	4606      	mov	r6, r0
 8010db4:	460c      	mov	r4, r1
 8010db6:	b125      	cbz	r5, 8010dc2 <__swsetup_r+0x16>
 8010db8:	69ab      	ldr	r3, [r5, #24]
 8010dba:	b913      	cbnz	r3, 8010dc2 <__swsetup_r+0x16>
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	f000 f985 	bl	80110cc <__sinit>
 8010dc2:	4b2e      	ldr	r3, [pc, #184]	; (8010e7c <__swsetup_r+0xd0>)
 8010dc4:	429c      	cmp	r4, r3
 8010dc6:	d10f      	bne.n	8010de8 <__swsetup_r+0x3c>
 8010dc8:	686c      	ldr	r4, [r5, #4]
 8010dca:	89a3      	ldrh	r3, [r4, #12]
 8010dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010dd0:	0719      	lsls	r1, r3, #28
 8010dd2:	d42c      	bmi.n	8010e2e <__swsetup_r+0x82>
 8010dd4:	06dd      	lsls	r5, r3, #27
 8010dd6:	d411      	bmi.n	8010dfc <__swsetup_r+0x50>
 8010dd8:	2309      	movs	r3, #9
 8010dda:	6033      	str	r3, [r6, #0]
 8010ddc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010de0:	81a3      	strh	r3, [r4, #12]
 8010de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010de6:	e03e      	b.n	8010e66 <__swsetup_r+0xba>
 8010de8:	4b25      	ldr	r3, [pc, #148]	; (8010e80 <__swsetup_r+0xd4>)
 8010dea:	429c      	cmp	r4, r3
 8010dec:	d101      	bne.n	8010df2 <__swsetup_r+0x46>
 8010dee:	68ac      	ldr	r4, [r5, #8]
 8010df0:	e7eb      	b.n	8010dca <__swsetup_r+0x1e>
 8010df2:	4b24      	ldr	r3, [pc, #144]	; (8010e84 <__swsetup_r+0xd8>)
 8010df4:	429c      	cmp	r4, r3
 8010df6:	bf08      	it	eq
 8010df8:	68ec      	ldreq	r4, [r5, #12]
 8010dfa:	e7e6      	b.n	8010dca <__swsetup_r+0x1e>
 8010dfc:	0758      	lsls	r0, r3, #29
 8010dfe:	d512      	bpl.n	8010e26 <__swsetup_r+0x7a>
 8010e00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e02:	b141      	cbz	r1, 8010e16 <__swsetup_r+0x6a>
 8010e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e08:	4299      	cmp	r1, r3
 8010e0a:	d002      	beq.n	8010e12 <__swsetup_r+0x66>
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	f7ff fb31 	bl	8010474 <_free_r>
 8010e12:	2300      	movs	r3, #0
 8010e14:	6363      	str	r3, [r4, #52]	; 0x34
 8010e16:	89a3      	ldrh	r3, [r4, #12]
 8010e18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e1c:	81a3      	strh	r3, [r4, #12]
 8010e1e:	2300      	movs	r3, #0
 8010e20:	6063      	str	r3, [r4, #4]
 8010e22:	6923      	ldr	r3, [r4, #16]
 8010e24:	6023      	str	r3, [r4, #0]
 8010e26:	89a3      	ldrh	r3, [r4, #12]
 8010e28:	f043 0308 	orr.w	r3, r3, #8
 8010e2c:	81a3      	strh	r3, [r4, #12]
 8010e2e:	6923      	ldr	r3, [r4, #16]
 8010e30:	b94b      	cbnz	r3, 8010e46 <__swsetup_r+0x9a>
 8010e32:	89a3      	ldrh	r3, [r4, #12]
 8010e34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e3c:	d003      	beq.n	8010e46 <__swsetup_r+0x9a>
 8010e3e:	4621      	mov	r1, r4
 8010e40:	4630      	mov	r0, r6
 8010e42:	f000 fa09 	bl	8011258 <__smakebuf_r>
 8010e46:	89a0      	ldrh	r0, [r4, #12]
 8010e48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e4c:	f010 0301 	ands.w	r3, r0, #1
 8010e50:	d00a      	beq.n	8010e68 <__swsetup_r+0xbc>
 8010e52:	2300      	movs	r3, #0
 8010e54:	60a3      	str	r3, [r4, #8]
 8010e56:	6963      	ldr	r3, [r4, #20]
 8010e58:	425b      	negs	r3, r3
 8010e5a:	61a3      	str	r3, [r4, #24]
 8010e5c:	6923      	ldr	r3, [r4, #16]
 8010e5e:	b943      	cbnz	r3, 8010e72 <__swsetup_r+0xc6>
 8010e60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010e64:	d1ba      	bne.n	8010ddc <__swsetup_r+0x30>
 8010e66:	bd70      	pop	{r4, r5, r6, pc}
 8010e68:	0781      	lsls	r1, r0, #30
 8010e6a:	bf58      	it	pl
 8010e6c:	6963      	ldrpl	r3, [r4, #20]
 8010e6e:	60a3      	str	r3, [r4, #8]
 8010e70:	e7f4      	b.n	8010e5c <__swsetup_r+0xb0>
 8010e72:	2000      	movs	r0, #0
 8010e74:	e7f7      	b.n	8010e66 <__swsetup_r+0xba>
 8010e76:	bf00      	nop
 8010e78:	20000024 	.word	0x20000024
 8010e7c:	08013394 	.word	0x08013394
 8010e80:	080133b4 	.word	0x080133b4
 8010e84:	08013374 	.word	0x08013374

08010e88 <abort>:
 8010e88:	b508      	push	{r3, lr}
 8010e8a:	2006      	movs	r0, #6
 8010e8c:	f000 fa54 	bl	8011338 <raise>
 8010e90:	2001      	movs	r0, #1
 8010e92:	f7f4 fbb9 	bl	8005608 <_exit>
	...

08010e98 <__sflush_r>:
 8010e98:	898a      	ldrh	r2, [r1, #12]
 8010e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9e:	4605      	mov	r5, r0
 8010ea0:	0710      	lsls	r0, r2, #28
 8010ea2:	460c      	mov	r4, r1
 8010ea4:	d458      	bmi.n	8010f58 <__sflush_r+0xc0>
 8010ea6:	684b      	ldr	r3, [r1, #4]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	dc05      	bgt.n	8010eb8 <__sflush_r+0x20>
 8010eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	dc02      	bgt.n	8010eb8 <__sflush_r+0x20>
 8010eb2:	2000      	movs	r0, #0
 8010eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010eba:	2e00      	cmp	r6, #0
 8010ebc:	d0f9      	beq.n	8010eb2 <__sflush_r+0x1a>
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010ec4:	682f      	ldr	r7, [r5, #0]
 8010ec6:	602b      	str	r3, [r5, #0]
 8010ec8:	d032      	beq.n	8010f30 <__sflush_r+0x98>
 8010eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ecc:	89a3      	ldrh	r3, [r4, #12]
 8010ece:	075a      	lsls	r2, r3, #29
 8010ed0:	d505      	bpl.n	8010ede <__sflush_r+0x46>
 8010ed2:	6863      	ldr	r3, [r4, #4]
 8010ed4:	1ac0      	subs	r0, r0, r3
 8010ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ed8:	b10b      	cbz	r3, 8010ede <__sflush_r+0x46>
 8010eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010edc:	1ac0      	subs	r0, r0, r3
 8010ede:	2300      	movs	r3, #0
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ee4:	6a21      	ldr	r1, [r4, #32]
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	47b0      	blx	r6
 8010eea:	1c43      	adds	r3, r0, #1
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	d106      	bne.n	8010efe <__sflush_r+0x66>
 8010ef0:	6829      	ldr	r1, [r5, #0]
 8010ef2:	291d      	cmp	r1, #29
 8010ef4:	d82c      	bhi.n	8010f50 <__sflush_r+0xb8>
 8010ef6:	4a2a      	ldr	r2, [pc, #168]	; (8010fa0 <__sflush_r+0x108>)
 8010ef8:	40ca      	lsrs	r2, r1
 8010efa:	07d6      	lsls	r6, r2, #31
 8010efc:	d528      	bpl.n	8010f50 <__sflush_r+0xb8>
 8010efe:	2200      	movs	r2, #0
 8010f00:	6062      	str	r2, [r4, #4]
 8010f02:	04d9      	lsls	r1, r3, #19
 8010f04:	6922      	ldr	r2, [r4, #16]
 8010f06:	6022      	str	r2, [r4, #0]
 8010f08:	d504      	bpl.n	8010f14 <__sflush_r+0x7c>
 8010f0a:	1c42      	adds	r2, r0, #1
 8010f0c:	d101      	bne.n	8010f12 <__sflush_r+0x7a>
 8010f0e:	682b      	ldr	r3, [r5, #0]
 8010f10:	b903      	cbnz	r3, 8010f14 <__sflush_r+0x7c>
 8010f12:	6560      	str	r0, [r4, #84]	; 0x54
 8010f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f16:	602f      	str	r7, [r5, #0]
 8010f18:	2900      	cmp	r1, #0
 8010f1a:	d0ca      	beq.n	8010eb2 <__sflush_r+0x1a>
 8010f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f20:	4299      	cmp	r1, r3
 8010f22:	d002      	beq.n	8010f2a <__sflush_r+0x92>
 8010f24:	4628      	mov	r0, r5
 8010f26:	f7ff faa5 	bl	8010474 <_free_r>
 8010f2a:	2000      	movs	r0, #0
 8010f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8010f2e:	e7c1      	b.n	8010eb4 <__sflush_r+0x1c>
 8010f30:	6a21      	ldr	r1, [r4, #32]
 8010f32:	2301      	movs	r3, #1
 8010f34:	4628      	mov	r0, r5
 8010f36:	47b0      	blx	r6
 8010f38:	1c41      	adds	r1, r0, #1
 8010f3a:	d1c7      	bne.n	8010ecc <__sflush_r+0x34>
 8010f3c:	682b      	ldr	r3, [r5, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d0c4      	beq.n	8010ecc <__sflush_r+0x34>
 8010f42:	2b1d      	cmp	r3, #29
 8010f44:	d001      	beq.n	8010f4a <__sflush_r+0xb2>
 8010f46:	2b16      	cmp	r3, #22
 8010f48:	d101      	bne.n	8010f4e <__sflush_r+0xb6>
 8010f4a:	602f      	str	r7, [r5, #0]
 8010f4c:	e7b1      	b.n	8010eb2 <__sflush_r+0x1a>
 8010f4e:	89a3      	ldrh	r3, [r4, #12]
 8010f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f54:	81a3      	strh	r3, [r4, #12]
 8010f56:	e7ad      	b.n	8010eb4 <__sflush_r+0x1c>
 8010f58:	690f      	ldr	r7, [r1, #16]
 8010f5a:	2f00      	cmp	r7, #0
 8010f5c:	d0a9      	beq.n	8010eb2 <__sflush_r+0x1a>
 8010f5e:	0793      	lsls	r3, r2, #30
 8010f60:	680e      	ldr	r6, [r1, #0]
 8010f62:	bf08      	it	eq
 8010f64:	694b      	ldreq	r3, [r1, #20]
 8010f66:	600f      	str	r7, [r1, #0]
 8010f68:	bf18      	it	ne
 8010f6a:	2300      	movne	r3, #0
 8010f6c:	eba6 0807 	sub.w	r8, r6, r7
 8010f70:	608b      	str	r3, [r1, #8]
 8010f72:	f1b8 0f00 	cmp.w	r8, #0
 8010f76:	dd9c      	ble.n	8010eb2 <__sflush_r+0x1a>
 8010f78:	6a21      	ldr	r1, [r4, #32]
 8010f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f7c:	4643      	mov	r3, r8
 8010f7e:	463a      	mov	r2, r7
 8010f80:	4628      	mov	r0, r5
 8010f82:	47b0      	blx	r6
 8010f84:	2800      	cmp	r0, #0
 8010f86:	dc06      	bgt.n	8010f96 <__sflush_r+0xfe>
 8010f88:	89a3      	ldrh	r3, [r4, #12]
 8010f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f8e:	81a3      	strh	r3, [r4, #12]
 8010f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f94:	e78e      	b.n	8010eb4 <__sflush_r+0x1c>
 8010f96:	4407      	add	r7, r0
 8010f98:	eba8 0800 	sub.w	r8, r8, r0
 8010f9c:	e7e9      	b.n	8010f72 <__sflush_r+0xda>
 8010f9e:	bf00      	nop
 8010fa0:	20400001 	.word	0x20400001

08010fa4 <_fflush_r>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	690b      	ldr	r3, [r1, #16]
 8010fa8:	4605      	mov	r5, r0
 8010faa:	460c      	mov	r4, r1
 8010fac:	b913      	cbnz	r3, 8010fb4 <_fflush_r+0x10>
 8010fae:	2500      	movs	r5, #0
 8010fb0:	4628      	mov	r0, r5
 8010fb2:	bd38      	pop	{r3, r4, r5, pc}
 8010fb4:	b118      	cbz	r0, 8010fbe <_fflush_r+0x1a>
 8010fb6:	6983      	ldr	r3, [r0, #24]
 8010fb8:	b90b      	cbnz	r3, 8010fbe <_fflush_r+0x1a>
 8010fba:	f000 f887 	bl	80110cc <__sinit>
 8010fbe:	4b14      	ldr	r3, [pc, #80]	; (8011010 <_fflush_r+0x6c>)
 8010fc0:	429c      	cmp	r4, r3
 8010fc2:	d11b      	bne.n	8010ffc <_fflush_r+0x58>
 8010fc4:	686c      	ldr	r4, [r5, #4]
 8010fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d0ef      	beq.n	8010fae <_fflush_r+0xa>
 8010fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010fd0:	07d0      	lsls	r0, r2, #31
 8010fd2:	d404      	bmi.n	8010fde <_fflush_r+0x3a>
 8010fd4:	0599      	lsls	r1, r3, #22
 8010fd6:	d402      	bmi.n	8010fde <_fflush_r+0x3a>
 8010fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010fda:	f000 f915 	bl	8011208 <__retarget_lock_acquire_recursive>
 8010fde:	4628      	mov	r0, r5
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	f7ff ff59 	bl	8010e98 <__sflush_r>
 8010fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010fe8:	07da      	lsls	r2, r3, #31
 8010fea:	4605      	mov	r5, r0
 8010fec:	d4e0      	bmi.n	8010fb0 <_fflush_r+0xc>
 8010fee:	89a3      	ldrh	r3, [r4, #12]
 8010ff0:	059b      	lsls	r3, r3, #22
 8010ff2:	d4dd      	bmi.n	8010fb0 <_fflush_r+0xc>
 8010ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ff6:	f000 f908 	bl	801120a <__retarget_lock_release_recursive>
 8010ffa:	e7d9      	b.n	8010fb0 <_fflush_r+0xc>
 8010ffc:	4b05      	ldr	r3, [pc, #20]	; (8011014 <_fflush_r+0x70>)
 8010ffe:	429c      	cmp	r4, r3
 8011000:	d101      	bne.n	8011006 <_fflush_r+0x62>
 8011002:	68ac      	ldr	r4, [r5, #8]
 8011004:	e7df      	b.n	8010fc6 <_fflush_r+0x22>
 8011006:	4b04      	ldr	r3, [pc, #16]	; (8011018 <_fflush_r+0x74>)
 8011008:	429c      	cmp	r4, r3
 801100a:	bf08      	it	eq
 801100c:	68ec      	ldreq	r4, [r5, #12]
 801100e:	e7da      	b.n	8010fc6 <_fflush_r+0x22>
 8011010:	08013394 	.word	0x08013394
 8011014:	080133b4 	.word	0x080133b4
 8011018:	08013374 	.word	0x08013374

0801101c <std>:
 801101c:	2300      	movs	r3, #0
 801101e:	b510      	push	{r4, lr}
 8011020:	4604      	mov	r4, r0
 8011022:	e9c0 3300 	strd	r3, r3, [r0]
 8011026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801102a:	6083      	str	r3, [r0, #8]
 801102c:	8181      	strh	r1, [r0, #12]
 801102e:	6643      	str	r3, [r0, #100]	; 0x64
 8011030:	81c2      	strh	r2, [r0, #14]
 8011032:	6183      	str	r3, [r0, #24]
 8011034:	4619      	mov	r1, r3
 8011036:	2208      	movs	r2, #8
 8011038:	305c      	adds	r0, #92	; 0x5c
 801103a:	f7fd fb59 	bl	800e6f0 <memset>
 801103e:	4b05      	ldr	r3, [pc, #20]	; (8011054 <std+0x38>)
 8011040:	6263      	str	r3, [r4, #36]	; 0x24
 8011042:	4b05      	ldr	r3, [pc, #20]	; (8011058 <std+0x3c>)
 8011044:	62a3      	str	r3, [r4, #40]	; 0x28
 8011046:	4b05      	ldr	r3, [pc, #20]	; (801105c <std+0x40>)
 8011048:	62e3      	str	r3, [r4, #44]	; 0x2c
 801104a:	4b05      	ldr	r3, [pc, #20]	; (8011060 <std+0x44>)
 801104c:	6224      	str	r4, [r4, #32]
 801104e:	6323      	str	r3, [r4, #48]	; 0x30
 8011050:	bd10      	pop	{r4, pc}
 8011052:	bf00      	nop
 8011054:	08011371 	.word	0x08011371
 8011058:	08011393 	.word	0x08011393
 801105c:	080113cb 	.word	0x080113cb
 8011060:	080113ef 	.word	0x080113ef

08011064 <_cleanup_r>:
 8011064:	4901      	ldr	r1, [pc, #4]	; (801106c <_cleanup_r+0x8>)
 8011066:	f000 b8af 	b.w	80111c8 <_fwalk_reent>
 801106a:	bf00      	nop
 801106c:	08010fa5 	.word	0x08010fa5

08011070 <__sfmoreglue>:
 8011070:	b570      	push	{r4, r5, r6, lr}
 8011072:	2268      	movs	r2, #104	; 0x68
 8011074:	1e4d      	subs	r5, r1, #1
 8011076:	4355      	muls	r5, r2
 8011078:	460e      	mov	r6, r1
 801107a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801107e:	f7ff fa65 	bl	801054c <_malloc_r>
 8011082:	4604      	mov	r4, r0
 8011084:	b140      	cbz	r0, 8011098 <__sfmoreglue+0x28>
 8011086:	2100      	movs	r1, #0
 8011088:	e9c0 1600 	strd	r1, r6, [r0]
 801108c:	300c      	adds	r0, #12
 801108e:	60a0      	str	r0, [r4, #8]
 8011090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011094:	f7fd fb2c 	bl	800e6f0 <memset>
 8011098:	4620      	mov	r0, r4
 801109a:	bd70      	pop	{r4, r5, r6, pc}

0801109c <__sfp_lock_acquire>:
 801109c:	4801      	ldr	r0, [pc, #4]	; (80110a4 <__sfp_lock_acquire+0x8>)
 801109e:	f000 b8b3 	b.w	8011208 <__retarget_lock_acquire_recursive>
 80110a2:	bf00      	nop
 80110a4:	20000631 	.word	0x20000631

080110a8 <__sfp_lock_release>:
 80110a8:	4801      	ldr	r0, [pc, #4]	; (80110b0 <__sfp_lock_release+0x8>)
 80110aa:	f000 b8ae 	b.w	801120a <__retarget_lock_release_recursive>
 80110ae:	bf00      	nop
 80110b0:	20000631 	.word	0x20000631

080110b4 <__sinit_lock_acquire>:
 80110b4:	4801      	ldr	r0, [pc, #4]	; (80110bc <__sinit_lock_acquire+0x8>)
 80110b6:	f000 b8a7 	b.w	8011208 <__retarget_lock_acquire_recursive>
 80110ba:	bf00      	nop
 80110bc:	20000632 	.word	0x20000632

080110c0 <__sinit_lock_release>:
 80110c0:	4801      	ldr	r0, [pc, #4]	; (80110c8 <__sinit_lock_release+0x8>)
 80110c2:	f000 b8a2 	b.w	801120a <__retarget_lock_release_recursive>
 80110c6:	bf00      	nop
 80110c8:	20000632 	.word	0x20000632

080110cc <__sinit>:
 80110cc:	b510      	push	{r4, lr}
 80110ce:	4604      	mov	r4, r0
 80110d0:	f7ff fff0 	bl	80110b4 <__sinit_lock_acquire>
 80110d4:	69a3      	ldr	r3, [r4, #24]
 80110d6:	b11b      	cbz	r3, 80110e0 <__sinit+0x14>
 80110d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110dc:	f7ff bff0 	b.w	80110c0 <__sinit_lock_release>
 80110e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110e4:	6523      	str	r3, [r4, #80]	; 0x50
 80110e6:	4b13      	ldr	r3, [pc, #76]	; (8011134 <__sinit+0x68>)
 80110e8:	4a13      	ldr	r2, [pc, #76]	; (8011138 <__sinit+0x6c>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80110ee:	42a3      	cmp	r3, r4
 80110f0:	bf04      	itt	eq
 80110f2:	2301      	moveq	r3, #1
 80110f4:	61a3      	streq	r3, [r4, #24]
 80110f6:	4620      	mov	r0, r4
 80110f8:	f000 f820 	bl	801113c <__sfp>
 80110fc:	6060      	str	r0, [r4, #4]
 80110fe:	4620      	mov	r0, r4
 8011100:	f000 f81c 	bl	801113c <__sfp>
 8011104:	60a0      	str	r0, [r4, #8]
 8011106:	4620      	mov	r0, r4
 8011108:	f000 f818 	bl	801113c <__sfp>
 801110c:	2200      	movs	r2, #0
 801110e:	60e0      	str	r0, [r4, #12]
 8011110:	2104      	movs	r1, #4
 8011112:	6860      	ldr	r0, [r4, #4]
 8011114:	f7ff ff82 	bl	801101c <std>
 8011118:	68a0      	ldr	r0, [r4, #8]
 801111a:	2201      	movs	r2, #1
 801111c:	2109      	movs	r1, #9
 801111e:	f7ff ff7d 	bl	801101c <std>
 8011122:	68e0      	ldr	r0, [r4, #12]
 8011124:	2202      	movs	r2, #2
 8011126:	2112      	movs	r1, #18
 8011128:	f7ff ff78 	bl	801101c <std>
 801112c:	2301      	movs	r3, #1
 801112e:	61a3      	str	r3, [r4, #24]
 8011130:	e7d2      	b.n	80110d8 <__sinit+0xc>
 8011132:	bf00      	nop
 8011134:	08012ff8 	.word	0x08012ff8
 8011138:	08011065 	.word	0x08011065

0801113c <__sfp>:
 801113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113e:	4607      	mov	r7, r0
 8011140:	f7ff ffac 	bl	801109c <__sfp_lock_acquire>
 8011144:	4b1e      	ldr	r3, [pc, #120]	; (80111c0 <__sfp+0x84>)
 8011146:	681e      	ldr	r6, [r3, #0]
 8011148:	69b3      	ldr	r3, [r6, #24]
 801114a:	b913      	cbnz	r3, 8011152 <__sfp+0x16>
 801114c:	4630      	mov	r0, r6
 801114e:	f7ff ffbd 	bl	80110cc <__sinit>
 8011152:	3648      	adds	r6, #72	; 0x48
 8011154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011158:	3b01      	subs	r3, #1
 801115a:	d503      	bpl.n	8011164 <__sfp+0x28>
 801115c:	6833      	ldr	r3, [r6, #0]
 801115e:	b30b      	cbz	r3, 80111a4 <__sfp+0x68>
 8011160:	6836      	ldr	r6, [r6, #0]
 8011162:	e7f7      	b.n	8011154 <__sfp+0x18>
 8011164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011168:	b9d5      	cbnz	r5, 80111a0 <__sfp+0x64>
 801116a:	4b16      	ldr	r3, [pc, #88]	; (80111c4 <__sfp+0x88>)
 801116c:	60e3      	str	r3, [r4, #12]
 801116e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011172:	6665      	str	r5, [r4, #100]	; 0x64
 8011174:	f000 f847 	bl	8011206 <__retarget_lock_init_recursive>
 8011178:	f7ff ff96 	bl	80110a8 <__sfp_lock_release>
 801117c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011184:	6025      	str	r5, [r4, #0]
 8011186:	61a5      	str	r5, [r4, #24]
 8011188:	2208      	movs	r2, #8
 801118a:	4629      	mov	r1, r5
 801118c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011190:	f7fd faae 	bl	800e6f0 <memset>
 8011194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801119c:	4620      	mov	r0, r4
 801119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111a0:	3468      	adds	r4, #104	; 0x68
 80111a2:	e7d9      	b.n	8011158 <__sfp+0x1c>
 80111a4:	2104      	movs	r1, #4
 80111a6:	4638      	mov	r0, r7
 80111a8:	f7ff ff62 	bl	8011070 <__sfmoreglue>
 80111ac:	4604      	mov	r4, r0
 80111ae:	6030      	str	r0, [r6, #0]
 80111b0:	2800      	cmp	r0, #0
 80111b2:	d1d5      	bne.n	8011160 <__sfp+0x24>
 80111b4:	f7ff ff78 	bl	80110a8 <__sfp_lock_release>
 80111b8:	230c      	movs	r3, #12
 80111ba:	603b      	str	r3, [r7, #0]
 80111bc:	e7ee      	b.n	801119c <__sfp+0x60>
 80111be:	bf00      	nop
 80111c0:	08012ff8 	.word	0x08012ff8
 80111c4:	ffff0001 	.word	0xffff0001

080111c8 <_fwalk_reent>:
 80111c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80111cc:	4606      	mov	r6, r0
 80111ce:	4688      	mov	r8, r1
 80111d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80111d4:	2700      	movs	r7, #0
 80111d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80111da:	f1b9 0901 	subs.w	r9, r9, #1
 80111de:	d505      	bpl.n	80111ec <_fwalk_reent+0x24>
 80111e0:	6824      	ldr	r4, [r4, #0]
 80111e2:	2c00      	cmp	r4, #0
 80111e4:	d1f7      	bne.n	80111d6 <_fwalk_reent+0xe>
 80111e6:	4638      	mov	r0, r7
 80111e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ec:	89ab      	ldrh	r3, [r5, #12]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d907      	bls.n	8011202 <_fwalk_reent+0x3a>
 80111f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80111f6:	3301      	adds	r3, #1
 80111f8:	d003      	beq.n	8011202 <_fwalk_reent+0x3a>
 80111fa:	4629      	mov	r1, r5
 80111fc:	4630      	mov	r0, r6
 80111fe:	47c0      	blx	r8
 8011200:	4307      	orrs	r7, r0
 8011202:	3568      	adds	r5, #104	; 0x68
 8011204:	e7e9      	b.n	80111da <_fwalk_reent+0x12>

08011206 <__retarget_lock_init_recursive>:
 8011206:	4770      	bx	lr

08011208 <__retarget_lock_acquire_recursive>:
 8011208:	4770      	bx	lr

0801120a <__retarget_lock_release_recursive>:
 801120a:	4770      	bx	lr

0801120c <__swhatbuf_r>:
 801120c:	b570      	push	{r4, r5, r6, lr}
 801120e:	460e      	mov	r6, r1
 8011210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011214:	2900      	cmp	r1, #0
 8011216:	b096      	sub	sp, #88	; 0x58
 8011218:	4614      	mov	r4, r2
 801121a:	461d      	mov	r5, r3
 801121c:	da08      	bge.n	8011230 <__swhatbuf_r+0x24>
 801121e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011222:	2200      	movs	r2, #0
 8011224:	602a      	str	r2, [r5, #0]
 8011226:	061a      	lsls	r2, r3, #24
 8011228:	d410      	bmi.n	801124c <__swhatbuf_r+0x40>
 801122a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801122e:	e00e      	b.n	801124e <__swhatbuf_r+0x42>
 8011230:	466a      	mov	r2, sp
 8011232:	f000 f903 	bl	801143c <_fstat_r>
 8011236:	2800      	cmp	r0, #0
 8011238:	dbf1      	blt.n	801121e <__swhatbuf_r+0x12>
 801123a:	9a01      	ldr	r2, [sp, #4]
 801123c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011240:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011244:	425a      	negs	r2, r3
 8011246:	415a      	adcs	r2, r3
 8011248:	602a      	str	r2, [r5, #0]
 801124a:	e7ee      	b.n	801122a <__swhatbuf_r+0x1e>
 801124c:	2340      	movs	r3, #64	; 0x40
 801124e:	2000      	movs	r0, #0
 8011250:	6023      	str	r3, [r4, #0]
 8011252:	b016      	add	sp, #88	; 0x58
 8011254:	bd70      	pop	{r4, r5, r6, pc}
	...

08011258 <__smakebuf_r>:
 8011258:	898b      	ldrh	r3, [r1, #12]
 801125a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801125c:	079d      	lsls	r5, r3, #30
 801125e:	4606      	mov	r6, r0
 8011260:	460c      	mov	r4, r1
 8011262:	d507      	bpl.n	8011274 <__smakebuf_r+0x1c>
 8011264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011268:	6023      	str	r3, [r4, #0]
 801126a:	6123      	str	r3, [r4, #16]
 801126c:	2301      	movs	r3, #1
 801126e:	6163      	str	r3, [r4, #20]
 8011270:	b002      	add	sp, #8
 8011272:	bd70      	pop	{r4, r5, r6, pc}
 8011274:	ab01      	add	r3, sp, #4
 8011276:	466a      	mov	r2, sp
 8011278:	f7ff ffc8 	bl	801120c <__swhatbuf_r>
 801127c:	9900      	ldr	r1, [sp, #0]
 801127e:	4605      	mov	r5, r0
 8011280:	4630      	mov	r0, r6
 8011282:	f7ff f963 	bl	801054c <_malloc_r>
 8011286:	b948      	cbnz	r0, 801129c <__smakebuf_r+0x44>
 8011288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801128c:	059a      	lsls	r2, r3, #22
 801128e:	d4ef      	bmi.n	8011270 <__smakebuf_r+0x18>
 8011290:	f023 0303 	bic.w	r3, r3, #3
 8011294:	f043 0302 	orr.w	r3, r3, #2
 8011298:	81a3      	strh	r3, [r4, #12]
 801129a:	e7e3      	b.n	8011264 <__smakebuf_r+0xc>
 801129c:	4b0d      	ldr	r3, [pc, #52]	; (80112d4 <__smakebuf_r+0x7c>)
 801129e:	62b3      	str	r3, [r6, #40]	; 0x28
 80112a0:	89a3      	ldrh	r3, [r4, #12]
 80112a2:	6020      	str	r0, [r4, #0]
 80112a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112a8:	81a3      	strh	r3, [r4, #12]
 80112aa:	9b00      	ldr	r3, [sp, #0]
 80112ac:	6163      	str	r3, [r4, #20]
 80112ae:	9b01      	ldr	r3, [sp, #4]
 80112b0:	6120      	str	r0, [r4, #16]
 80112b2:	b15b      	cbz	r3, 80112cc <__smakebuf_r+0x74>
 80112b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112b8:	4630      	mov	r0, r6
 80112ba:	f000 f8d1 	bl	8011460 <_isatty_r>
 80112be:	b128      	cbz	r0, 80112cc <__smakebuf_r+0x74>
 80112c0:	89a3      	ldrh	r3, [r4, #12]
 80112c2:	f023 0303 	bic.w	r3, r3, #3
 80112c6:	f043 0301 	orr.w	r3, r3, #1
 80112ca:	81a3      	strh	r3, [r4, #12]
 80112cc:	89a0      	ldrh	r0, [r4, #12]
 80112ce:	4305      	orrs	r5, r0
 80112d0:	81a5      	strh	r5, [r4, #12]
 80112d2:	e7cd      	b.n	8011270 <__smakebuf_r+0x18>
 80112d4:	08011065 	.word	0x08011065

080112d8 <_malloc_usable_size_r>:
 80112d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112dc:	1f18      	subs	r0, r3, #4
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bfbc      	itt	lt
 80112e2:	580b      	ldrlt	r3, [r1, r0]
 80112e4:	18c0      	addlt	r0, r0, r3
 80112e6:	4770      	bx	lr

080112e8 <_raise_r>:
 80112e8:	291f      	cmp	r1, #31
 80112ea:	b538      	push	{r3, r4, r5, lr}
 80112ec:	4604      	mov	r4, r0
 80112ee:	460d      	mov	r5, r1
 80112f0:	d904      	bls.n	80112fc <_raise_r+0x14>
 80112f2:	2316      	movs	r3, #22
 80112f4:	6003      	str	r3, [r0, #0]
 80112f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80112fa:	bd38      	pop	{r3, r4, r5, pc}
 80112fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80112fe:	b112      	cbz	r2, 8011306 <_raise_r+0x1e>
 8011300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011304:	b94b      	cbnz	r3, 801131a <_raise_r+0x32>
 8011306:	4620      	mov	r0, r4
 8011308:	f000 f830 	bl	801136c <_getpid_r>
 801130c:	462a      	mov	r2, r5
 801130e:	4601      	mov	r1, r0
 8011310:	4620      	mov	r0, r4
 8011312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011316:	f000 b817 	b.w	8011348 <_kill_r>
 801131a:	2b01      	cmp	r3, #1
 801131c:	d00a      	beq.n	8011334 <_raise_r+0x4c>
 801131e:	1c59      	adds	r1, r3, #1
 8011320:	d103      	bne.n	801132a <_raise_r+0x42>
 8011322:	2316      	movs	r3, #22
 8011324:	6003      	str	r3, [r0, #0]
 8011326:	2001      	movs	r0, #1
 8011328:	e7e7      	b.n	80112fa <_raise_r+0x12>
 801132a:	2400      	movs	r4, #0
 801132c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011330:	4628      	mov	r0, r5
 8011332:	4798      	blx	r3
 8011334:	2000      	movs	r0, #0
 8011336:	e7e0      	b.n	80112fa <_raise_r+0x12>

08011338 <raise>:
 8011338:	4b02      	ldr	r3, [pc, #8]	; (8011344 <raise+0xc>)
 801133a:	4601      	mov	r1, r0
 801133c:	6818      	ldr	r0, [r3, #0]
 801133e:	f7ff bfd3 	b.w	80112e8 <_raise_r>
 8011342:	bf00      	nop
 8011344:	20000024 	.word	0x20000024

08011348 <_kill_r>:
 8011348:	b538      	push	{r3, r4, r5, lr}
 801134a:	4d07      	ldr	r5, [pc, #28]	; (8011368 <_kill_r+0x20>)
 801134c:	2300      	movs	r3, #0
 801134e:	4604      	mov	r4, r0
 8011350:	4608      	mov	r0, r1
 8011352:	4611      	mov	r1, r2
 8011354:	602b      	str	r3, [r5, #0]
 8011356:	f7f4 f947 	bl	80055e8 <_kill>
 801135a:	1c43      	adds	r3, r0, #1
 801135c:	d102      	bne.n	8011364 <_kill_r+0x1c>
 801135e:	682b      	ldr	r3, [r5, #0]
 8011360:	b103      	cbz	r3, 8011364 <_kill_r+0x1c>
 8011362:	6023      	str	r3, [r4, #0]
 8011364:	bd38      	pop	{r3, r4, r5, pc}
 8011366:	bf00      	nop
 8011368:	2000062c 	.word	0x2000062c

0801136c <_getpid_r>:
 801136c:	f7f4 b934 	b.w	80055d8 <_getpid>

08011370 <__sread>:
 8011370:	b510      	push	{r4, lr}
 8011372:	460c      	mov	r4, r1
 8011374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011378:	f000 f894 	bl	80114a4 <_read_r>
 801137c:	2800      	cmp	r0, #0
 801137e:	bfab      	itete	ge
 8011380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011382:	89a3      	ldrhlt	r3, [r4, #12]
 8011384:	181b      	addge	r3, r3, r0
 8011386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801138a:	bfac      	ite	ge
 801138c:	6563      	strge	r3, [r4, #84]	; 0x54
 801138e:	81a3      	strhlt	r3, [r4, #12]
 8011390:	bd10      	pop	{r4, pc}

08011392 <__swrite>:
 8011392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011396:	461f      	mov	r7, r3
 8011398:	898b      	ldrh	r3, [r1, #12]
 801139a:	05db      	lsls	r3, r3, #23
 801139c:	4605      	mov	r5, r0
 801139e:	460c      	mov	r4, r1
 80113a0:	4616      	mov	r6, r2
 80113a2:	d505      	bpl.n	80113b0 <__swrite+0x1e>
 80113a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a8:	2302      	movs	r3, #2
 80113aa:	2200      	movs	r2, #0
 80113ac:	f000 f868 	bl	8011480 <_lseek_r>
 80113b0:	89a3      	ldrh	r3, [r4, #12]
 80113b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113ba:	81a3      	strh	r3, [r4, #12]
 80113bc:	4632      	mov	r2, r6
 80113be:	463b      	mov	r3, r7
 80113c0:	4628      	mov	r0, r5
 80113c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113c6:	f000 b817 	b.w	80113f8 <_write_r>

080113ca <__sseek>:
 80113ca:	b510      	push	{r4, lr}
 80113cc:	460c      	mov	r4, r1
 80113ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d2:	f000 f855 	bl	8011480 <_lseek_r>
 80113d6:	1c43      	adds	r3, r0, #1
 80113d8:	89a3      	ldrh	r3, [r4, #12]
 80113da:	bf15      	itete	ne
 80113dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80113de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80113e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80113e6:	81a3      	strheq	r3, [r4, #12]
 80113e8:	bf18      	it	ne
 80113ea:	81a3      	strhne	r3, [r4, #12]
 80113ec:	bd10      	pop	{r4, pc}

080113ee <__sclose>:
 80113ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113f2:	f000 b813 	b.w	801141c <_close_r>
	...

080113f8 <_write_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4d07      	ldr	r5, [pc, #28]	; (8011418 <_write_r+0x20>)
 80113fc:	4604      	mov	r4, r0
 80113fe:	4608      	mov	r0, r1
 8011400:	4611      	mov	r1, r2
 8011402:	2200      	movs	r2, #0
 8011404:	602a      	str	r2, [r5, #0]
 8011406:	461a      	mov	r2, r3
 8011408:	f7f4 f925 	bl	8005656 <_write>
 801140c:	1c43      	adds	r3, r0, #1
 801140e:	d102      	bne.n	8011416 <_write_r+0x1e>
 8011410:	682b      	ldr	r3, [r5, #0]
 8011412:	b103      	cbz	r3, 8011416 <_write_r+0x1e>
 8011414:	6023      	str	r3, [r4, #0]
 8011416:	bd38      	pop	{r3, r4, r5, pc}
 8011418:	2000062c 	.word	0x2000062c

0801141c <_close_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4d06      	ldr	r5, [pc, #24]	; (8011438 <_close_r+0x1c>)
 8011420:	2300      	movs	r3, #0
 8011422:	4604      	mov	r4, r0
 8011424:	4608      	mov	r0, r1
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	f7f4 f931 	bl	800568e <_close>
 801142c:	1c43      	adds	r3, r0, #1
 801142e:	d102      	bne.n	8011436 <_close_r+0x1a>
 8011430:	682b      	ldr	r3, [r5, #0]
 8011432:	b103      	cbz	r3, 8011436 <_close_r+0x1a>
 8011434:	6023      	str	r3, [r4, #0]
 8011436:	bd38      	pop	{r3, r4, r5, pc}
 8011438:	2000062c 	.word	0x2000062c

0801143c <_fstat_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	4d07      	ldr	r5, [pc, #28]	; (801145c <_fstat_r+0x20>)
 8011440:	2300      	movs	r3, #0
 8011442:	4604      	mov	r4, r0
 8011444:	4608      	mov	r0, r1
 8011446:	4611      	mov	r1, r2
 8011448:	602b      	str	r3, [r5, #0]
 801144a:	f7f4 f92c 	bl	80056a6 <_fstat>
 801144e:	1c43      	adds	r3, r0, #1
 8011450:	d102      	bne.n	8011458 <_fstat_r+0x1c>
 8011452:	682b      	ldr	r3, [r5, #0]
 8011454:	b103      	cbz	r3, 8011458 <_fstat_r+0x1c>
 8011456:	6023      	str	r3, [r4, #0]
 8011458:	bd38      	pop	{r3, r4, r5, pc}
 801145a:	bf00      	nop
 801145c:	2000062c 	.word	0x2000062c

08011460 <_isatty_r>:
 8011460:	b538      	push	{r3, r4, r5, lr}
 8011462:	4d06      	ldr	r5, [pc, #24]	; (801147c <_isatty_r+0x1c>)
 8011464:	2300      	movs	r3, #0
 8011466:	4604      	mov	r4, r0
 8011468:	4608      	mov	r0, r1
 801146a:	602b      	str	r3, [r5, #0]
 801146c:	f7f4 f92b 	bl	80056c6 <_isatty>
 8011470:	1c43      	adds	r3, r0, #1
 8011472:	d102      	bne.n	801147a <_isatty_r+0x1a>
 8011474:	682b      	ldr	r3, [r5, #0]
 8011476:	b103      	cbz	r3, 801147a <_isatty_r+0x1a>
 8011478:	6023      	str	r3, [r4, #0]
 801147a:	bd38      	pop	{r3, r4, r5, pc}
 801147c:	2000062c 	.word	0x2000062c

08011480 <_lseek_r>:
 8011480:	b538      	push	{r3, r4, r5, lr}
 8011482:	4d07      	ldr	r5, [pc, #28]	; (80114a0 <_lseek_r+0x20>)
 8011484:	4604      	mov	r4, r0
 8011486:	4608      	mov	r0, r1
 8011488:	4611      	mov	r1, r2
 801148a:	2200      	movs	r2, #0
 801148c:	602a      	str	r2, [r5, #0]
 801148e:	461a      	mov	r2, r3
 8011490:	f7f4 f924 	bl	80056dc <_lseek>
 8011494:	1c43      	adds	r3, r0, #1
 8011496:	d102      	bne.n	801149e <_lseek_r+0x1e>
 8011498:	682b      	ldr	r3, [r5, #0]
 801149a:	b103      	cbz	r3, 801149e <_lseek_r+0x1e>
 801149c:	6023      	str	r3, [r4, #0]
 801149e:	bd38      	pop	{r3, r4, r5, pc}
 80114a0:	2000062c 	.word	0x2000062c

080114a4 <_read_r>:
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	4d07      	ldr	r5, [pc, #28]	; (80114c4 <_read_r+0x20>)
 80114a8:	4604      	mov	r4, r0
 80114aa:	4608      	mov	r0, r1
 80114ac:	4611      	mov	r1, r2
 80114ae:	2200      	movs	r2, #0
 80114b0:	602a      	str	r2, [r5, #0]
 80114b2:	461a      	mov	r2, r3
 80114b4:	f7f4 f8b2 	bl	800561c <_read>
 80114b8:	1c43      	adds	r3, r0, #1
 80114ba:	d102      	bne.n	80114c2 <_read_r+0x1e>
 80114bc:	682b      	ldr	r3, [r5, #0]
 80114be:	b103      	cbz	r3, 80114c2 <_read_r+0x1e>
 80114c0:	6023      	str	r3, [r4, #0]
 80114c2:	bd38      	pop	{r3, r4, r5, pc}
 80114c4:	2000062c 	.word	0x2000062c

080114c8 <log>:
 80114c8:	b538      	push	{r3, r4, r5, lr}
 80114ca:	ed2d 8b02 	vpush	{d8}
 80114ce:	ec55 4b10 	vmov	r4, r5, d0
 80114d2:	f000 f921 	bl	8011718 <__ieee754_log>
 80114d6:	4622      	mov	r2, r4
 80114d8:	462b      	mov	r3, r5
 80114da:	4620      	mov	r0, r4
 80114dc:	4629      	mov	r1, r5
 80114de:	eeb0 8a40 	vmov.f32	s16, s0
 80114e2:	eef0 8a60 	vmov.f32	s17, s1
 80114e6:	f7ef fb29 	bl	8000b3c <__aeabi_dcmpun>
 80114ea:	b998      	cbnz	r0, 8011514 <log+0x4c>
 80114ec:	2200      	movs	r2, #0
 80114ee:	2300      	movs	r3, #0
 80114f0:	4620      	mov	r0, r4
 80114f2:	4629      	mov	r1, r5
 80114f4:	f7ef fb18 	bl	8000b28 <__aeabi_dcmpgt>
 80114f8:	b960      	cbnz	r0, 8011514 <log+0x4c>
 80114fa:	2200      	movs	r2, #0
 80114fc:	2300      	movs	r3, #0
 80114fe:	4620      	mov	r0, r4
 8011500:	4629      	mov	r1, r5
 8011502:	f7ef fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8011506:	b160      	cbz	r0, 8011522 <log+0x5a>
 8011508:	f7fd f8c8 	bl	800e69c <__errno>
 801150c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8011538 <log+0x70>
 8011510:	2322      	movs	r3, #34	; 0x22
 8011512:	6003      	str	r3, [r0, #0]
 8011514:	eeb0 0a48 	vmov.f32	s0, s16
 8011518:	eef0 0a68 	vmov.f32	s1, s17
 801151c:	ecbd 8b02 	vpop	{d8}
 8011520:	bd38      	pop	{r3, r4, r5, pc}
 8011522:	f7fd f8bb 	bl	800e69c <__errno>
 8011526:	ecbd 8b02 	vpop	{d8}
 801152a:	2321      	movs	r3, #33	; 0x21
 801152c:	6003      	str	r3, [r0, #0]
 801152e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011532:	4803      	ldr	r0, [pc, #12]	; (8011540 <log+0x78>)
 8011534:	f001 ba5c 	b.w	80129f0 <nan>
 8011538:	00000000 	.word	0x00000000
 801153c:	fff00000 	.word	0xfff00000
 8011540:	08013268 	.word	0x08013268

08011544 <pow>:
 8011544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011546:	ed2d 8b02 	vpush	{d8}
 801154a:	eeb0 8a40 	vmov.f32	s16, s0
 801154e:	eef0 8a60 	vmov.f32	s17, s1
 8011552:	ec55 4b11 	vmov	r4, r5, d1
 8011556:	f000 fa9b 	bl	8011a90 <__ieee754_pow>
 801155a:	4622      	mov	r2, r4
 801155c:	462b      	mov	r3, r5
 801155e:	4620      	mov	r0, r4
 8011560:	4629      	mov	r1, r5
 8011562:	ec57 6b10 	vmov	r6, r7, d0
 8011566:	f7ef fae9 	bl	8000b3c <__aeabi_dcmpun>
 801156a:	2800      	cmp	r0, #0
 801156c:	d13b      	bne.n	80115e6 <pow+0xa2>
 801156e:	ec51 0b18 	vmov	r0, r1, d8
 8011572:	2200      	movs	r2, #0
 8011574:	2300      	movs	r3, #0
 8011576:	f7ef faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 801157a:	b1b8      	cbz	r0, 80115ac <pow+0x68>
 801157c:	2200      	movs	r2, #0
 801157e:	2300      	movs	r3, #0
 8011580:	4620      	mov	r0, r4
 8011582:	4629      	mov	r1, r5
 8011584:	f7ef faa8 	bl	8000ad8 <__aeabi_dcmpeq>
 8011588:	2800      	cmp	r0, #0
 801158a:	d146      	bne.n	801161a <pow+0xd6>
 801158c:	ec45 4b10 	vmov	d0, r4, r5
 8011590:	f001 fa20 	bl	80129d4 <finite>
 8011594:	b338      	cbz	r0, 80115e6 <pow+0xa2>
 8011596:	2200      	movs	r2, #0
 8011598:	2300      	movs	r3, #0
 801159a:	4620      	mov	r0, r4
 801159c:	4629      	mov	r1, r5
 801159e:	f7ef faa5 	bl	8000aec <__aeabi_dcmplt>
 80115a2:	b300      	cbz	r0, 80115e6 <pow+0xa2>
 80115a4:	f7fd f87a 	bl	800e69c <__errno>
 80115a8:	2322      	movs	r3, #34	; 0x22
 80115aa:	e01b      	b.n	80115e4 <pow+0xa0>
 80115ac:	ec47 6b10 	vmov	d0, r6, r7
 80115b0:	f001 fa10 	bl	80129d4 <finite>
 80115b4:	b9e0      	cbnz	r0, 80115f0 <pow+0xac>
 80115b6:	eeb0 0a48 	vmov.f32	s0, s16
 80115ba:	eef0 0a68 	vmov.f32	s1, s17
 80115be:	f001 fa09 	bl	80129d4 <finite>
 80115c2:	b1a8      	cbz	r0, 80115f0 <pow+0xac>
 80115c4:	ec45 4b10 	vmov	d0, r4, r5
 80115c8:	f001 fa04 	bl	80129d4 <finite>
 80115cc:	b180      	cbz	r0, 80115f0 <pow+0xac>
 80115ce:	4632      	mov	r2, r6
 80115d0:	463b      	mov	r3, r7
 80115d2:	4630      	mov	r0, r6
 80115d4:	4639      	mov	r1, r7
 80115d6:	f7ef fab1 	bl	8000b3c <__aeabi_dcmpun>
 80115da:	2800      	cmp	r0, #0
 80115dc:	d0e2      	beq.n	80115a4 <pow+0x60>
 80115de:	f7fd f85d 	bl	800e69c <__errno>
 80115e2:	2321      	movs	r3, #33	; 0x21
 80115e4:	6003      	str	r3, [r0, #0]
 80115e6:	ecbd 8b02 	vpop	{d8}
 80115ea:	ec47 6b10 	vmov	d0, r6, r7
 80115ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115f0:	2200      	movs	r2, #0
 80115f2:	2300      	movs	r3, #0
 80115f4:	4630      	mov	r0, r6
 80115f6:	4639      	mov	r1, r7
 80115f8:	f7ef fa6e 	bl	8000ad8 <__aeabi_dcmpeq>
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d0f2      	beq.n	80115e6 <pow+0xa2>
 8011600:	eeb0 0a48 	vmov.f32	s0, s16
 8011604:	eef0 0a68 	vmov.f32	s1, s17
 8011608:	f001 f9e4 	bl	80129d4 <finite>
 801160c:	2800      	cmp	r0, #0
 801160e:	d0ea      	beq.n	80115e6 <pow+0xa2>
 8011610:	ec45 4b10 	vmov	d0, r4, r5
 8011614:	f001 f9de 	bl	80129d4 <finite>
 8011618:	e7c3      	b.n	80115a2 <pow+0x5e>
 801161a:	4f01      	ldr	r7, [pc, #4]	; (8011620 <pow+0xdc>)
 801161c:	2600      	movs	r6, #0
 801161e:	e7e2      	b.n	80115e6 <pow+0xa2>
 8011620:	3ff00000 	.word	0x3ff00000

08011624 <sqrt>:
 8011624:	b538      	push	{r3, r4, r5, lr}
 8011626:	ed2d 8b02 	vpush	{d8}
 801162a:	ec55 4b10 	vmov	r4, r5, d0
 801162e:	f000 ff5d 	bl	80124ec <__ieee754_sqrt>
 8011632:	4622      	mov	r2, r4
 8011634:	462b      	mov	r3, r5
 8011636:	4620      	mov	r0, r4
 8011638:	4629      	mov	r1, r5
 801163a:	eeb0 8a40 	vmov.f32	s16, s0
 801163e:	eef0 8a60 	vmov.f32	s17, s1
 8011642:	f7ef fa7b 	bl	8000b3c <__aeabi_dcmpun>
 8011646:	b990      	cbnz	r0, 801166e <sqrt+0x4a>
 8011648:	2200      	movs	r2, #0
 801164a:	2300      	movs	r3, #0
 801164c:	4620      	mov	r0, r4
 801164e:	4629      	mov	r1, r5
 8011650:	f7ef fa4c 	bl	8000aec <__aeabi_dcmplt>
 8011654:	b158      	cbz	r0, 801166e <sqrt+0x4a>
 8011656:	f7fd f821 	bl	800e69c <__errno>
 801165a:	2321      	movs	r3, #33	; 0x21
 801165c:	6003      	str	r3, [r0, #0]
 801165e:	2200      	movs	r2, #0
 8011660:	2300      	movs	r3, #0
 8011662:	4610      	mov	r0, r2
 8011664:	4619      	mov	r1, r3
 8011666:	f7ef f8f9 	bl	800085c <__aeabi_ddiv>
 801166a:	ec41 0b18 	vmov	d8, r0, r1
 801166e:	eeb0 0a48 	vmov.f32	s0, s16
 8011672:	eef0 0a68 	vmov.f32	s1, s17
 8011676:	ecbd 8b02 	vpop	{d8}
 801167a:	bd38      	pop	{r3, r4, r5, pc}

0801167c <asinf>:
 801167c:	b508      	push	{r3, lr}
 801167e:	ed2d 8b02 	vpush	{d8}
 8011682:	eeb0 8a40 	vmov.f32	s16, s0
 8011686:	f000 ffe3 	bl	8012650 <__ieee754_asinf>
 801168a:	eeb4 8a48 	vcmp.f32	s16, s16
 801168e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011692:	eef0 8a40 	vmov.f32	s17, s0
 8011696:	d615      	bvs.n	80116c4 <asinf+0x48>
 8011698:	eeb0 0a48 	vmov.f32	s0, s16
 801169c:	f001 fb0a 	bl	8012cb4 <fabsf>
 80116a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80116a4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80116a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ac:	dd0a      	ble.n	80116c4 <asinf+0x48>
 80116ae:	f7fc fff5 	bl	800e69c <__errno>
 80116b2:	ecbd 8b02 	vpop	{d8}
 80116b6:	2321      	movs	r3, #33	; 0x21
 80116b8:	6003      	str	r3, [r0, #0]
 80116ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80116be:	4804      	ldr	r0, [pc, #16]	; (80116d0 <asinf+0x54>)
 80116c0:	f001 bb00 	b.w	8012cc4 <nanf>
 80116c4:	eeb0 0a68 	vmov.f32	s0, s17
 80116c8:	ecbd 8b02 	vpop	{d8}
 80116cc:	bd08      	pop	{r3, pc}
 80116ce:	bf00      	nop
 80116d0:	08013268 	.word	0x08013268

080116d4 <atan2f>:
 80116d4:	f001 b8a2 	b.w	801281c <__ieee754_atan2f>

080116d8 <sqrtf>:
 80116d8:	b508      	push	{r3, lr}
 80116da:	ed2d 8b02 	vpush	{d8}
 80116de:	eeb0 8a40 	vmov.f32	s16, s0
 80116e2:	f001 f93b 	bl	801295c <__ieee754_sqrtf>
 80116e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80116ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ee:	d60c      	bvs.n	801170a <sqrtf+0x32>
 80116f0:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011710 <sqrtf+0x38>
 80116f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80116f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fc:	d505      	bpl.n	801170a <sqrtf+0x32>
 80116fe:	f7fc ffcd 	bl	800e69c <__errno>
 8011702:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011706:	2321      	movs	r3, #33	; 0x21
 8011708:	6003      	str	r3, [r0, #0]
 801170a:	ecbd 8b02 	vpop	{d8}
 801170e:	bd08      	pop	{r3, pc}
	...

08011718 <__ieee754_log>:
 8011718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801171c:	ec51 0b10 	vmov	r0, r1, d0
 8011720:	ed2d 8b04 	vpush	{d8-d9}
 8011724:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8011728:	b083      	sub	sp, #12
 801172a:	460d      	mov	r5, r1
 801172c:	da29      	bge.n	8011782 <__ieee754_log+0x6a>
 801172e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011732:	4303      	orrs	r3, r0
 8011734:	ee10 2a10 	vmov	r2, s0
 8011738:	d10c      	bne.n	8011754 <__ieee754_log+0x3c>
 801173a:	49cf      	ldr	r1, [pc, #828]	; (8011a78 <__ieee754_log+0x360>)
 801173c:	2200      	movs	r2, #0
 801173e:	2300      	movs	r3, #0
 8011740:	2000      	movs	r0, #0
 8011742:	f7ef f88b 	bl	800085c <__aeabi_ddiv>
 8011746:	ec41 0b10 	vmov	d0, r0, r1
 801174a:	b003      	add	sp, #12
 801174c:	ecbd 8b04 	vpop	{d8-d9}
 8011750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011754:	2900      	cmp	r1, #0
 8011756:	da05      	bge.n	8011764 <__ieee754_log+0x4c>
 8011758:	460b      	mov	r3, r1
 801175a:	f7ee fd9d 	bl	8000298 <__aeabi_dsub>
 801175e:	2200      	movs	r2, #0
 8011760:	2300      	movs	r3, #0
 8011762:	e7ee      	b.n	8011742 <__ieee754_log+0x2a>
 8011764:	4bc5      	ldr	r3, [pc, #788]	; (8011a7c <__ieee754_log+0x364>)
 8011766:	2200      	movs	r2, #0
 8011768:	f7ee ff4e 	bl	8000608 <__aeabi_dmul>
 801176c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8011770:	460d      	mov	r5, r1
 8011772:	4ac3      	ldr	r2, [pc, #780]	; (8011a80 <__ieee754_log+0x368>)
 8011774:	4295      	cmp	r5, r2
 8011776:	dd06      	ble.n	8011786 <__ieee754_log+0x6e>
 8011778:	4602      	mov	r2, r0
 801177a:	460b      	mov	r3, r1
 801177c:	f7ee fd8e 	bl	800029c <__adddf3>
 8011780:	e7e1      	b.n	8011746 <__ieee754_log+0x2e>
 8011782:	2300      	movs	r3, #0
 8011784:	e7f5      	b.n	8011772 <__ieee754_log+0x5a>
 8011786:	152c      	asrs	r4, r5, #20
 8011788:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801178c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8011790:	441c      	add	r4, r3
 8011792:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8011796:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801179a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801179e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80117a2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80117a6:	ea42 0105 	orr.w	r1, r2, r5
 80117aa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80117ae:	2200      	movs	r2, #0
 80117b0:	4bb4      	ldr	r3, [pc, #720]	; (8011a84 <__ieee754_log+0x36c>)
 80117b2:	f7ee fd71 	bl	8000298 <__aeabi_dsub>
 80117b6:	1cab      	adds	r3, r5, #2
 80117b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80117bc:	2b02      	cmp	r3, #2
 80117be:	4682      	mov	sl, r0
 80117c0:	468b      	mov	fp, r1
 80117c2:	f04f 0200 	mov.w	r2, #0
 80117c6:	dc53      	bgt.n	8011870 <__ieee754_log+0x158>
 80117c8:	2300      	movs	r3, #0
 80117ca:	f7ef f985 	bl	8000ad8 <__aeabi_dcmpeq>
 80117ce:	b1d0      	cbz	r0, 8011806 <__ieee754_log+0xee>
 80117d0:	2c00      	cmp	r4, #0
 80117d2:	f000 8122 	beq.w	8011a1a <__ieee754_log+0x302>
 80117d6:	4620      	mov	r0, r4
 80117d8:	f7ee feac 	bl	8000534 <__aeabi_i2d>
 80117dc:	a390      	add	r3, pc, #576	; (adr r3, 8011a20 <__ieee754_log+0x308>)
 80117de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e2:	4606      	mov	r6, r0
 80117e4:	460f      	mov	r7, r1
 80117e6:	f7ee ff0f 	bl	8000608 <__aeabi_dmul>
 80117ea:	a38f      	add	r3, pc, #572	; (adr r3, 8011a28 <__ieee754_log+0x310>)
 80117ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f0:	4604      	mov	r4, r0
 80117f2:	460d      	mov	r5, r1
 80117f4:	4630      	mov	r0, r6
 80117f6:	4639      	mov	r1, r7
 80117f8:	f7ee ff06 	bl	8000608 <__aeabi_dmul>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4620      	mov	r0, r4
 8011802:	4629      	mov	r1, r5
 8011804:	e7ba      	b.n	801177c <__ieee754_log+0x64>
 8011806:	a38a      	add	r3, pc, #552	; (adr r3, 8011a30 <__ieee754_log+0x318>)
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	4650      	mov	r0, sl
 801180e:	4659      	mov	r1, fp
 8011810:	f7ee fefa 	bl	8000608 <__aeabi_dmul>
 8011814:	4602      	mov	r2, r0
 8011816:	460b      	mov	r3, r1
 8011818:	2000      	movs	r0, #0
 801181a:	499b      	ldr	r1, [pc, #620]	; (8011a88 <__ieee754_log+0x370>)
 801181c:	f7ee fd3c 	bl	8000298 <__aeabi_dsub>
 8011820:	4652      	mov	r2, sl
 8011822:	4606      	mov	r6, r0
 8011824:	460f      	mov	r7, r1
 8011826:	465b      	mov	r3, fp
 8011828:	4650      	mov	r0, sl
 801182a:	4659      	mov	r1, fp
 801182c:	f7ee feec 	bl	8000608 <__aeabi_dmul>
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	4630      	mov	r0, r6
 8011836:	4639      	mov	r1, r7
 8011838:	f7ee fee6 	bl	8000608 <__aeabi_dmul>
 801183c:	4606      	mov	r6, r0
 801183e:	460f      	mov	r7, r1
 8011840:	b914      	cbnz	r4, 8011848 <__ieee754_log+0x130>
 8011842:	4632      	mov	r2, r6
 8011844:	463b      	mov	r3, r7
 8011846:	e0a2      	b.n	801198e <__ieee754_log+0x276>
 8011848:	4620      	mov	r0, r4
 801184a:	f7ee fe73 	bl	8000534 <__aeabi_i2d>
 801184e:	a374      	add	r3, pc, #464	; (adr r3, 8011a20 <__ieee754_log+0x308>)
 8011850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011854:	4680      	mov	r8, r0
 8011856:	4689      	mov	r9, r1
 8011858:	f7ee fed6 	bl	8000608 <__aeabi_dmul>
 801185c:	a372      	add	r3, pc, #456	; (adr r3, 8011a28 <__ieee754_log+0x310>)
 801185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011862:	4604      	mov	r4, r0
 8011864:	460d      	mov	r5, r1
 8011866:	4640      	mov	r0, r8
 8011868:	4649      	mov	r1, r9
 801186a:	f7ee fecd 	bl	8000608 <__aeabi_dmul>
 801186e:	e0a7      	b.n	80119c0 <__ieee754_log+0x2a8>
 8011870:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011874:	f7ee fd12 	bl	800029c <__adddf3>
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	4650      	mov	r0, sl
 801187e:	4659      	mov	r1, fp
 8011880:	f7ee ffec 	bl	800085c <__aeabi_ddiv>
 8011884:	ec41 0b18 	vmov	d8, r0, r1
 8011888:	4620      	mov	r0, r4
 801188a:	f7ee fe53 	bl	8000534 <__aeabi_i2d>
 801188e:	ec53 2b18 	vmov	r2, r3, d8
 8011892:	ec41 0b19 	vmov	d9, r0, r1
 8011896:	ec51 0b18 	vmov	r0, r1, d8
 801189a:	f7ee feb5 	bl	8000608 <__aeabi_dmul>
 801189e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80118a2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80118a6:	9301      	str	r3, [sp, #4]
 80118a8:	4602      	mov	r2, r0
 80118aa:	460b      	mov	r3, r1
 80118ac:	4680      	mov	r8, r0
 80118ae:	4689      	mov	r9, r1
 80118b0:	f7ee feaa 	bl	8000608 <__aeabi_dmul>
 80118b4:	a360      	add	r3, pc, #384	; (adr r3, 8011a38 <__ieee754_log+0x320>)
 80118b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	f7ee fea3 	bl	8000608 <__aeabi_dmul>
 80118c2:	a35f      	add	r3, pc, #380	; (adr r3, 8011a40 <__ieee754_log+0x328>)
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	f7ee fce8 	bl	800029c <__adddf3>
 80118cc:	4632      	mov	r2, r6
 80118ce:	463b      	mov	r3, r7
 80118d0:	f7ee fe9a 	bl	8000608 <__aeabi_dmul>
 80118d4:	a35c      	add	r3, pc, #368	; (adr r3, 8011a48 <__ieee754_log+0x330>)
 80118d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118da:	f7ee fcdf 	bl	800029c <__adddf3>
 80118de:	4632      	mov	r2, r6
 80118e0:	463b      	mov	r3, r7
 80118e2:	f7ee fe91 	bl	8000608 <__aeabi_dmul>
 80118e6:	a35a      	add	r3, pc, #360	; (adr r3, 8011a50 <__ieee754_log+0x338>)
 80118e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ec:	f7ee fcd6 	bl	800029c <__adddf3>
 80118f0:	4642      	mov	r2, r8
 80118f2:	464b      	mov	r3, r9
 80118f4:	f7ee fe88 	bl	8000608 <__aeabi_dmul>
 80118f8:	a357      	add	r3, pc, #348	; (adr r3, 8011a58 <__ieee754_log+0x340>)
 80118fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fe:	4680      	mov	r8, r0
 8011900:	4689      	mov	r9, r1
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ee fe7f 	bl	8000608 <__aeabi_dmul>
 801190a:	a355      	add	r3, pc, #340	; (adr r3, 8011a60 <__ieee754_log+0x348>)
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	f7ee fcc4 	bl	800029c <__adddf3>
 8011914:	4632      	mov	r2, r6
 8011916:	463b      	mov	r3, r7
 8011918:	f7ee fe76 	bl	8000608 <__aeabi_dmul>
 801191c:	a352      	add	r3, pc, #328	; (adr r3, 8011a68 <__ieee754_log+0x350>)
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	f7ee fcbb 	bl	800029c <__adddf3>
 8011926:	4632      	mov	r2, r6
 8011928:	463b      	mov	r3, r7
 801192a:	f7ee fe6d 	bl	8000608 <__aeabi_dmul>
 801192e:	460b      	mov	r3, r1
 8011930:	4602      	mov	r2, r0
 8011932:	4649      	mov	r1, r9
 8011934:	4640      	mov	r0, r8
 8011936:	f7ee fcb1 	bl	800029c <__adddf3>
 801193a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801193e:	9b01      	ldr	r3, [sp, #4]
 8011940:	3551      	adds	r5, #81	; 0x51
 8011942:	431d      	orrs	r5, r3
 8011944:	2d00      	cmp	r5, #0
 8011946:	4680      	mov	r8, r0
 8011948:	4689      	mov	r9, r1
 801194a:	dd48      	ble.n	80119de <__ieee754_log+0x2c6>
 801194c:	4b4e      	ldr	r3, [pc, #312]	; (8011a88 <__ieee754_log+0x370>)
 801194e:	2200      	movs	r2, #0
 8011950:	4650      	mov	r0, sl
 8011952:	4659      	mov	r1, fp
 8011954:	f7ee fe58 	bl	8000608 <__aeabi_dmul>
 8011958:	4652      	mov	r2, sl
 801195a:	465b      	mov	r3, fp
 801195c:	f7ee fe54 	bl	8000608 <__aeabi_dmul>
 8011960:	4602      	mov	r2, r0
 8011962:	460b      	mov	r3, r1
 8011964:	4606      	mov	r6, r0
 8011966:	460f      	mov	r7, r1
 8011968:	4640      	mov	r0, r8
 801196a:	4649      	mov	r1, r9
 801196c:	f7ee fc96 	bl	800029c <__adddf3>
 8011970:	ec53 2b18 	vmov	r2, r3, d8
 8011974:	f7ee fe48 	bl	8000608 <__aeabi_dmul>
 8011978:	4680      	mov	r8, r0
 801197a:	4689      	mov	r9, r1
 801197c:	b964      	cbnz	r4, 8011998 <__ieee754_log+0x280>
 801197e:	4602      	mov	r2, r0
 8011980:	460b      	mov	r3, r1
 8011982:	4630      	mov	r0, r6
 8011984:	4639      	mov	r1, r7
 8011986:	f7ee fc87 	bl	8000298 <__aeabi_dsub>
 801198a:	4602      	mov	r2, r0
 801198c:	460b      	mov	r3, r1
 801198e:	4650      	mov	r0, sl
 8011990:	4659      	mov	r1, fp
 8011992:	f7ee fc81 	bl	8000298 <__aeabi_dsub>
 8011996:	e6d6      	b.n	8011746 <__ieee754_log+0x2e>
 8011998:	a321      	add	r3, pc, #132	; (adr r3, 8011a20 <__ieee754_log+0x308>)
 801199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199e:	ec51 0b19 	vmov	r0, r1, d9
 80119a2:	f7ee fe31 	bl	8000608 <__aeabi_dmul>
 80119a6:	a320      	add	r3, pc, #128	; (adr r3, 8011a28 <__ieee754_log+0x310>)
 80119a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ac:	4604      	mov	r4, r0
 80119ae:	460d      	mov	r5, r1
 80119b0:	ec51 0b19 	vmov	r0, r1, d9
 80119b4:	f7ee fe28 	bl	8000608 <__aeabi_dmul>
 80119b8:	4642      	mov	r2, r8
 80119ba:	464b      	mov	r3, r9
 80119bc:	f7ee fc6e 	bl	800029c <__adddf3>
 80119c0:	4602      	mov	r2, r0
 80119c2:	460b      	mov	r3, r1
 80119c4:	4630      	mov	r0, r6
 80119c6:	4639      	mov	r1, r7
 80119c8:	f7ee fc66 	bl	8000298 <__aeabi_dsub>
 80119cc:	4652      	mov	r2, sl
 80119ce:	465b      	mov	r3, fp
 80119d0:	f7ee fc62 	bl	8000298 <__aeabi_dsub>
 80119d4:	4602      	mov	r2, r0
 80119d6:	460b      	mov	r3, r1
 80119d8:	4620      	mov	r0, r4
 80119da:	4629      	mov	r1, r5
 80119dc:	e7d9      	b.n	8011992 <__ieee754_log+0x27a>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	4650      	mov	r0, sl
 80119e4:	4659      	mov	r1, fp
 80119e6:	f7ee fc57 	bl	8000298 <__aeabi_dsub>
 80119ea:	ec53 2b18 	vmov	r2, r3, d8
 80119ee:	f7ee fe0b 	bl	8000608 <__aeabi_dmul>
 80119f2:	4606      	mov	r6, r0
 80119f4:	460f      	mov	r7, r1
 80119f6:	2c00      	cmp	r4, #0
 80119f8:	f43f af23 	beq.w	8011842 <__ieee754_log+0x12a>
 80119fc:	a308      	add	r3, pc, #32	; (adr r3, 8011a20 <__ieee754_log+0x308>)
 80119fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a02:	ec51 0b19 	vmov	r0, r1, d9
 8011a06:	f7ee fdff 	bl	8000608 <__aeabi_dmul>
 8011a0a:	a307      	add	r3, pc, #28	; (adr r3, 8011a28 <__ieee754_log+0x310>)
 8011a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a10:	4604      	mov	r4, r0
 8011a12:	460d      	mov	r5, r1
 8011a14:	ec51 0b19 	vmov	r0, r1, d9
 8011a18:	e727      	b.n	801186a <__ieee754_log+0x152>
 8011a1a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8011a70 <__ieee754_log+0x358>
 8011a1e:	e694      	b.n	801174a <__ieee754_log+0x32>
 8011a20:	fee00000 	.word	0xfee00000
 8011a24:	3fe62e42 	.word	0x3fe62e42
 8011a28:	35793c76 	.word	0x35793c76
 8011a2c:	3dea39ef 	.word	0x3dea39ef
 8011a30:	55555555 	.word	0x55555555
 8011a34:	3fd55555 	.word	0x3fd55555
 8011a38:	df3e5244 	.word	0xdf3e5244
 8011a3c:	3fc2f112 	.word	0x3fc2f112
 8011a40:	96cb03de 	.word	0x96cb03de
 8011a44:	3fc74664 	.word	0x3fc74664
 8011a48:	94229359 	.word	0x94229359
 8011a4c:	3fd24924 	.word	0x3fd24924
 8011a50:	55555593 	.word	0x55555593
 8011a54:	3fe55555 	.word	0x3fe55555
 8011a58:	d078c69f 	.word	0xd078c69f
 8011a5c:	3fc39a09 	.word	0x3fc39a09
 8011a60:	1d8e78af 	.word	0x1d8e78af
 8011a64:	3fcc71c5 	.word	0x3fcc71c5
 8011a68:	9997fa04 	.word	0x9997fa04
 8011a6c:	3fd99999 	.word	0x3fd99999
	...
 8011a78:	c3500000 	.word	0xc3500000
 8011a7c:	43500000 	.word	0x43500000
 8011a80:	7fefffff 	.word	0x7fefffff
 8011a84:	3ff00000 	.word	0x3ff00000
 8011a88:	3fe00000 	.word	0x3fe00000
 8011a8c:	00000000 	.word	0x00000000

08011a90 <__ieee754_pow>:
 8011a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	ed2d 8b06 	vpush	{d8-d10}
 8011a98:	b089      	sub	sp, #36	; 0x24
 8011a9a:	ed8d 1b00 	vstr	d1, [sp]
 8011a9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011aa2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011aa6:	ea58 0102 	orrs.w	r1, r8, r2
 8011aaa:	ec57 6b10 	vmov	r6, r7, d0
 8011aae:	d115      	bne.n	8011adc <__ieee754_pow+0x4c>
 8011ab0:	19b3      	adds	r3, r6, r6
 8011ab2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011ab6:	4152      	adcs	r2, r2
 8011ab8:	4299      	cmp	r1, r3
 8011aba:	4b89      	ldr	r3, [pc, #548]	; (8011ce0 <__ieee754_pow+0x250>)
 8011abc:	4193      	sbcs	r3, r2
 8011abe:	f080 84d2 	bcs.w	8012466 <__ieee754_pow+0x9d6>
 8011ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	4639      	mov	r1, r7
 8011aca:	f7ee fbe7 	bl	800029c <__adddf3>
 8011ace:	ec41 0b10 	vmov	d0, r0, r1
 8011ad2:	b009      	add	sp, #36	; 0x24
 8011ad4:	ecbd 8b06 	vpop	{d8-d10}
 8011ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011adc:	4b81      	ldr	r3, [pc, #516]	; (8011ce4 <__ieee754_pow+0x254>)
 8011ade:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011ae2:	429c      	cmp	r4, r3
 8011ae4:	ee10 aa10 	vmov	sl, s0
 8011ae8:	463d      	mov	r5, r7
 8011aea:	dc06      	bgt.n	8011afa <__ieee754_pow+0x6a>
 8011aec:	d101      	bne.n	8011af2 <__ieee754_pow+0x62>
 8011aee:	2e00      	cmp	r6, #0
 8011af0:	d1e7      	bne.n	8011ac2 <__ieee754_pow+0x32>
 8011af2:	4598      	cmp	r8, r3
 8011af4:	dc01      	bgt.n	8011afa <__ieee754_pow+0x6a>
 8011af6:	d10f      	bne.n	8011b18 <__ieee754_pow+0x88>
 8011af8:	b172      	cbz	r2, 8011b18 <__ieee754_pow+0x88>
 8011afa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011afe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011b02:	ea55 050a 	orrs.w	r5, r5, sl
 8011b06:	d1dc      	bne.n	8011ac2 <__ieee754_pow+0x32>
 8011b08:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b0c:	18db      	adds	r3, r3, r3
 8011b0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011b12:	4152      	adcs	r2, r2
 8011b14:	429d      	cmp	r5, r3
 8011b16:	e7d0      	b.n	8011aba <__ieee754_pow+0x2a>
 8011b18:	2d00      	cmp	r5, #0
 8011b1a:	da3b      	bge.n	8011b94 <__ieee754_pow+0x104>
 8011b1c:	4b72      	ldr	r3, [pc, #456]	; (8011ce8 <__ieee754_pow+0x258>)
 8011b1e:	4598      	cmp	r8, r3
 8011b20:	dc51      	bgt.n	8011bc6 <__ieee754_pow+0x136>
 8011b22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011b26:	4598      	cmp	r8, r3
 8011b28:	f340 84ac 	ble.w	8012484 <__ieee754_pow+0x9f4>
 8011b2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011b30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011b34:	2b14      	cmp	r3, #20
 8011b36:	dd0f      	ble.n	8011b58 <__ieee754_pow+0xc8>
 8011b38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011b3c:	fa22 f103 	lsr.w	r1, r2, r3
 8011b40:	fa01 f303 	lsl.w	r3, r1, r3
 8011b44:	4293      	cmp	r3, r2
 8011b46:	f040 849d 	bne.w	8012484 <__ieee754_pow+0x9f4>
 8011b4a:	f001 0101 	and.w	r1, r1, #1
 8011b4e:	f1c1 0302 	rsb	r3, r1, #2
 8011b52:	9304      	str	r3, [sp, #16]
 8011b54:	b182      	cbz	r2, 8011b78 <__ieee754_pow+0xe8>
 8011b56:	e05f      	b.n	8011c18 <__ieee754_pow+0x188>
 8011b58:	2a00      	cmp	r2, #0
 8011b5a:	d15b      	bne.n	8011c14 <__ieee754_pow+0x184>
 8011b5c:	f1c3 0314 	rsb	r3, r3, #20
 8011b60:	fa48 f103 	asr.w	r1, r8, r3
 8011b64:	fa01 f303 	lsl.w	r3, r1, r3
 8011b68:	4543      	cmp	r3, r8
 8011b6a:	f040 8488 	bne.w	801247e <__ieee754_pow+0x9ee>
 8011b6e:	f001 0101 	and.w	r1, r1, #1
 8011b72:	f1c1 0302 	rsb	r3, r1, #2
 8011b76:	9304      	str	r3, [sp, #16]
 8011b78:	4b5c      	ldr	r3, [pc, #368]	; (8011cec <__ieee754_pow+0x25c>)
 8011b7a:	4598      	cmp	r8, r3
 8011b7c:	d132      	bne.n	8011be4 <__ieee754_pow+0x154>
 8011b7e:	f1b9 0f00 	cmp.w	r9, #0
 8011b82:	f280 8478 	bge.w	8012476 <__ieee754_pow+0x9e6>
 8011b86:	4959      	ldr	r1, [pc, #356]	; (8011cec <__ieee754_pow+0x25c>)
 8011b88:	4632      	mov	r2, r6
 8011b8a:	463b      	mov	r3, r7
 8011b8c:	2000      	movs	r0, #0
 8011b8e:	f7ee fe65 	bl	800085c <__aeabi_ddiv>
 8011b92:	e79c      	b.n	8011ace <__ieee754_pow+0x3e>
 8011b94:	2300      	movs	r3, #0
 8011b96:	9304      	str	r3, [sp, #16]
 8011b98:	2a00      	cmp	r2, #0
 8011b9a:	d13d      	bne.n	8011c18 <__ieee754_pow+0x188>
 8011b9c:	4b51      	ldr	r3, [pc, #324]	; (8011ce4 <__ieee754_pow+0x254>)
 8011b9e:	4598      	cmp	r8, r3
 8011ba0:	d1ea      	bne.n	8011b78 <__ieee754_pow+0xe8>
 8011ba2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011ba6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011baa:	ea53 030a 	orrs.w	r3, r3, sl
 8011bae:	f000 845a 	beq.w	8012466 <__ieee754_pow+0x9d6>
 8011bb2:	4b4f      	ldr	r3, [pc, #316]	; (8011cf0 <__ieee754_pow+0x260>)
 8011bb4:	429c      	cmp	r4, r3
 8011bb6:	dd08      	ble.n	8011bca <__ieee754_pow+0x13a>
 8011bb8:	f1b9 0f00 	cmp.w	r9, #0
 8011bbc:	f2c0 8457 	blt.w	801246e <__ieee754_pow+0x9de>
 8011bc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bc4:	e783      	b.n	8011ace <__ieee754_pow+0x3e>
 8011bc6:	2302      	movs	r3, #2
 8011bc8:	e7e5      	b.n	8011b96 <__ieee754_pow+0x106>
 8011bca:	f1b9 0f00 	cmp.w	r9, #0
 8011bce:	f04f 0000 	mov.w	r0, #0
 8011bd2:	f04f 0100 	mov.w	r1, #0
 8011bd6:	f6bf af7a 	bge.w	8011ace <__ieee754_pow+0x3e>
 8011bda:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011bde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011be2:	e774      	b.n	8011ace <__ieee754_pow+0x3e>
 8011be4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011be8:	d106      	bne.n	8011bf8 <__ieee754_pow+0x168>
 8011bea:	4632      	mov	r2, r6
 8011bec:	463b      	mov	r3, r7
 8011bee:	4630      	mov	r0, r6
 8011bf0:	4639      	mov	r1, r7
 8011bf2:	f7ee fd09 	bl	8000608 <__aeabi_dmul>
 8011bf6:	e76a      	b.n	8011ace <__ieee754_pow+0x3e>
 8011bf8:	4b3e      	ldr	r3, [pc, #248]	; (8011cf4 <__ieee754_pow+0x264>)
 8011bfa:	4599      	cmp	r9, r3
 8011bfc:	d10c      	bne.n	8011c18 <__ieee754_pow+0x188>
 8011bfe:	2d00      	cmp	r5, #0
 8011c00:	db0a      	blt.n	8011c18 <__ieee754_pow+0x188>
 8011c02:	ec47 6b10 	vmov	d0, r6, r7
 8011c06:	b009      	add	sp, #36	; 0x24
 8011c08:	ecbd 8b06 	vpop	{d8-d10}
 8011c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c10:	f000 bc6c 	b.w	80124ec <__ieee754_sqrt>
 8011c14:	2300      	movs	r3, #0
 8011c16:	9304      	str	r3, [sp, #16]
 8011c18:	ec47 6b10 	vmov	d0, r6, r7
 8011c1c:	f000 fed1 	bl	80129c2 <fabs>
 8011c20:	ec51 0b10 	vmov	r0, r1, d0
 8011c24:	f1ba 0f00 	cmp.w	sl, #0
 8011c28:	d129      	bne.n	8011c7e <__ieee754_pow+0x1ee>
 8011c2a:	b124      	cbz	r4, 8011c36 <__ieee754_pow+0x1a6>
 8011c2c:	4b2f      	ldr	r3, [pc, #188]	; (8011cec <__ieee754_pow+0x25c>)
 8011c2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d123      	bne.n	8011c7e <__ieee754_pow+0x1ee>
 8011c36:	f1b9 0f00 	cmp.w	r9, #0
 8011c3a:	da05      	bge.n	8011c48 <__ieee754_pow+0x1b8>
 8011c3c:	4602      	mov	r2, r0
 8011c3e:	460b      	mov	r3, r1
 8011c40:	2000      	movs	r0, #0
 8011c42:	492a      	ldr	r1, [pc, #168]	; (8011cec <__ieee754_pow+0x25c>)
 8011c44:	f7ee fe0a 	bl	800085c <__aeabi_ddiv>
 8011c48:	2d00      	cmp	r5, #0
 8011c4a:	f6bf af40 	bge.w	8011ace <__ieee754_pow+0x3e>
 8011c4e:	9b04      	ldr	r3, [sp, #16]
 8011c50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011c54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011c58:	4323      	orrs	r3, r4
 8011c5a:	d108      	bne.n	8011c6e <__ieee754_pow+0x1de>
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	460b      	mov	r3, r1
 8011c60:	4610      	mov	r0, r2
 8011c62:	4619      	mov	r1, r3
 8011c64:	f7ee fb18 	bl	8000298 <__aeabi_dsub>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	e78f      	b.n	8011b8e <__ieee754_pow+0xfe>
 8011c6e:	9b04      	ldr	r3, [sp, #16]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	f47f af2c 	bne.w	8011ace <__ieee754_pow+0x3e>
 8011c76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	e727      	b.n	8011ace <__ieee754_pow+0x3e>
 8011c7e:	0feb      	lsrs	r3, r5, #31
 8011c80:	3b01      	subs	r3, #1
 8011c82:	9306      	str	r3, [sp, #24]
 8011c84:	9a06      	ldr	r2, [sp, #24]
 8011c86:	9b04      	ldr	r3, [sp, #16]
 8011c88:	4313      	orrs	r3, r2
 8011c8a:	d102      	bne.n	8011c92 <__ieee754_pow+0x202>
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	463b      	mov	r3, r7
 8011c90:	e7e6      	b.n	8011c60 <__ieee754_pow+0x1d0>
 8011c92:	4b19      	ldr	r3, [pc, #100]	; (8011cf8 <__ieee754_pow+0x268>)
 8011c94:	4598      	cmp	r8, r3
 8011c96:	f340 80fb 	ble.w	8011e90 <__ieee754_pow+0x400>
 8011c9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011c9e:	4598      	cmp	r8, r3
 8011ca0:	4b13      	ldr	r3, [pc, #76]	; (8011cf0 <__ieee754_pow+0x260>)
 8011ca2:	dd0c      	ble.n	8011cbe <__ieee754_pow+0x22e>
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	dc0f      	bgt.n	8011cc8 <__ieee754_pow+0x238>
 8011ca8:	f1b9 0f00 	cmp.w	r9, #0
 8011cac:	da0f      	bge.n	8011cce <__ieee754_pow+0x23e>
 8011cae:	2000      	movs	r0, #0
 8011cb0:	b009      	add	sp, #36	; 0x24
 8011cb2:	ecbd 8b06 	vpop	{d8-d10}
 8011cb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cba:	f000 be79 	b.w	80129b0 <__math_oflow>
 8011cbe:	429c      	cmp	r4, r3
 8011cc0:	dbf2      	blt.n	8011ca8 <__ieee754_pow+0x218>
 8011cc2:	4b0a      	ldr	r3, [pc, #40]	; (8011cec <__ieee754_pow+0x25c>)
 8011cc4:	429c      	cmp	r4, r3
 8011cc6:	dd19      	ble.n	8011cfc <__ieee754_pow+0x26c>
 8011cc8:	f1b9 0f00 	cmp.w	r9, #0
 8011ccc:	dcef      	bgt.n	8011cae <__ieee754_pow+0x21e>
 8011cce:	2000      	movs	r0, #0
 8011cd0:	b009      	add	sp, #36	; 0x24
 8011cd2:	ecbd 8b06 	vpop	{d8-d10}
 8011cd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cda:	f000 be60 	b.w	801299e <__math_uflow>
 8011cde:	bf00      	nop
 8011ce0:	fff00000 	.word	0xfff00000
 8011ce4:	7ff00000 	.word	0x7ff00000
 8011ce8:	433fffff 	.word	0x433fffff
 8011cec:	3ff00000 	.word	0x3ff00000
 8011cf0:	3fefffff 	.word	0x3fefffff
 8011cf4:	3fe00000 	.word	0x3fe00000
 8011cf8:	41e00000 	.word	0x41e00000
 8011cfc:	4b60      	ldr	r3, [pc, #384]	; (8011e80 <__ieee754_pow+0x3f0>)
 8011cfe:	2200      	movs	r2, #0
 8011d00:	f7ee faca 	bl	8000298 <__aeabi_dsub>
 8011d04:	a354      	add	r3, pc, #336	; (adr r3, 8011e58 <__ieee754_pow+0x3c8>)
 8011d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	f7ee fc7b 	bl	8000608 <__aeabi_dmul>
 8011d12:	a353      	add	r3, pc, #332	; (adr r3, 8011e60 <__ieee754_pow+0x3d0>)
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	4606      	mov	r6, r0
 8011d1a:	460f      	mov	r7, r1
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	4629      	mov	r1, r5
 8011d20:	f7ee fc72 	bl	8000608 <__aeabi_dmul>
 8011d24:	4b57      	ldr	r3, [pc, #348]	; (8011e84 <__ieee754_pow+0x3f4>)
 8011d26:	4682      	mov	sl, r0
 8011d28:	468b      	mov	fp, r1
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	4629      	mov	r1, r5
 8011d30:	f7ee fc6a 	bl	8000608 <__aeabi_dmul>
 8011d34:	4602      	mov	r2, r0
 8011d36:	460b      	mov	r3, r1
 8011d38:	a14b      	add	r1, pc, #300	; (adr r1, 8011e68 <__ieee754_pow+0x3d8>)
 8011d3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d3e:	f7ee faab 	bl	8000298 <__aeabi_dsub>
 8011d42:	4622      	mov	r2, r4
 8011d44:	462b      	mov	r3, r5
 8011d46:	f7ee fc5f 	bl	8000608 <__aeabi_dmul>
 8011d4a:	4602      	mov	r2, r0
 8011d4c:	460b      	mov	r3, r1
 8011d4e:	2000      	movs	r0, #0
 8011d50:	494d      	ldr	r1, [pc, #308]	; (8011e88 <__ieee754_pow+0x3f8>)
 8011d52:	f7ee faa1 	bl	8000298 <__aeabi_dsub>
 8011d56:	4622      	mov	r2, r4
 8011d58:	4680      	mov	r8, r0
 8011d5a:	4689      	mov	r9, r1
 8011d5c:	462b      	mov	r3, r5
 8011d5e:	4620      	mov	r0, r4
 8011d60:	4629      	mov	r1, r5
 8011d62:	f7ee fc51 	bl	8000608 <__aeabi_dmul>
 8011d66:	4602      	mov	r2, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	4640      	mov	r0, r8
 8011d6c:	4649      	mov	r1, r9
 8011d6e:	f7ee fc4b 	bl	8000608 <__aeabi_dmul>
 8011d72:	a33f      	add	r3, pc, #252	; (adr r3, 8011e70 <__ieee754_pow+0x3e0>)
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	f7ee fc46 	bl	8000608 <__aeabi_dmul>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	4650      	mov	r0, sl
 8011d82:	4659      	mov	r1, fp
 8011d84:	f7ee fa88 	bl	8000298 <__aeabi_dsub>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	4680      	mov	r8, r0
 8011d8e:	4689      	mov	r9, r1
 8011d90:	4630      	mov	r0, r6
 8011d92:	4639      	mov	r1, r7
 8011d94:	f7ee fa82 	bl	800029c <__adddf3>
 8011d98:	2000      	movs	r0, #0
 8011d9a:	4632      	mov	r2, r6
 8011d9c:	463b      	mov	r3, r7
 8011d9e:	4604      	mov	r4, r0
 8011da0:	460d      	mov	r5, r1
 8011da2:	f7ee fa79 	bl	8000298 <__aeabi_dsub>
 8011da6:	4602      	mov	r2, r0
 8011da8:	460b      	mov	r3, r1
 8011daa:	4640      	mov	r0, r8
 8011dac:	4649      	mov	r1, r9
 8011dae:	f7ee fa73 	bl	8000298 <__aeabi_dsub>
 8011db2:	9b04      	ldr	r3, [sp, #16]
 8011db4:	9a06      	ldr	r2, [sp, #24]
 8011db6:	3b01      	subs	r3, #1
 8011db8:	4313      	orrs	r3, r2
 8011dba:	4682      	mov	sl, r0
 8011dbc:	468b      	mov	fp, r1
 8011dbe:	f040 81e7 	bne.w	8012190 <__ieee754_pow+0x700>
 8011dc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011e78 <__ieee754_pow+0x3e8>
 8011dc6:	eeb0 8a47 	vmov.f32	s16, s14
 8011dca:	eef0 8a67 	vmov.f32	s17, s15
 8011dce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011dd2:	2600      	movs	r6, #0
 8011dd4:	4632      	mov	r2, r6
 8011dd6:	463b      	mov	r3, r7
 8011dd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ddc:	f7ee fa5c 	bl	8000298 <__aeabi_dsub>
 8011de0:	4622      	mov	r2, r4
 8011de2:	462b      	mov	r3, r5
 8011de4:	f7ee fc10 	bl	8000608 <__aeabi_dmul>
 8011de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dec:	4680      	mov	r8, r0
 8011dee:	4689      	mov	r9, r1
 8011df0:	4650      	mov	r0, sl
 8011df2:	4659      	mov	r1, fp
 8011df4:	f7ee fc08 	bl	8000608 <__aeabi_dmul>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4640      	mov	r0, r8
 8011dfe:	4649      	mov	r1, r9
 8011e00:	f7ee fa4c 	bl	800029c <__adddf3>
 8011e04:	4632      	mov	r2, r6
 8011e06:	463b      	mov	r3, r7
 8011e08:	4680      	mov	r8, r0
 8011e0a:	4689      	mov	r9, r1
 8011e0c:	4620      	mov	r0, r4
 8011e0e:	4629      	mov	r1, r5
 8011e10:	f7ee fbfa 	bl	8000608 <__aeabi_dmul>
 8011e14:	460b      	mov	r3, r1
 8011e16:	4604      	mov	r4, r0
 8011e18:	460d      	mov	r5, r1
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	4649      	mov	r1, r9
 8011e1e:	4640      	mov	r0, r8
 8011e20:	f7ee fa3c 	bl	800029c <__adddf3>
 8011e24:	4b19      	ldr	r3, [pc, #100]	; (8011e8c <__ieee754_pow+0x3fc>)
 8011e26:	4299      	cmp	r1, r3
 8011e28:	ec45 4b19 	vmov	d9, r4, r5
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	460f      	mov	r7, r1
 8011e30:	468b      	mov	fp, r1
 8011e32:	f340 82f1 	ble.w	8012418 <__ieee754_pow+0x988>
 8011e36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011e3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011e3e:	4303      	orrs	r3, r0
 8011e40:	f000 81e4 	beq.w	801220c <__ieee754_pow+0x77c>
 8011e44:	ec51 0b18 	vmov	r0, r1, d8
 8011e48:	2200      	movs	r2, #0
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f7ee fe4e 	bl	8000aec <__aeabi_dcmplt>
 8011e50:	3800      	subs	r0, #0
 8011e52:	bf18      	it	ne
 8011e54:	2001      	movne	r0, #1
 8011e56:	e72b      	b.n	8011cb0 <__ieee754_pow+0x220>
 8011e58:	60000000 	.word	0x60000000
 8011e5c:	3ff71547 	.word	0x3ff71547
 8011e60:	f85ddf44 	.word	0xf85ddf44
 8011e64:	3e54ae0b 	.word	0x3e54ae0b
 8011e68:	55555555 	.word	0x55555555
 8011e6c:	3fd55555 	.word	0x3fd55555
 8011e70:	652b82fe 	.word	0x652b82fe
 8011e74:	3ff71547 	.word	0x3ff71547
 8011e78:	00000000 	.word	0x00000000
 8011e7c:	bff00000 	.word	0xbff00000
 8011e80:	3ff00000 	.word	0x3ff00000
 8011e84:	3fd00000 	.word	0x3fd00000
 8011e88:	3fe00000 	.word	0x3fe00000
 8011e8c:	408fffff 	.word	0x408fffff
 8011e90:	4bd5      	ldr	r3, [pc, #852]	; (80121e8 <__ieee754_pow+0x758>)
 8011e92:	402b      	ands	r3, r5
 8011e94:	2200      	movs	r2, #0
 8011e96:	b92b      	cbnz	r3, 8011ea4 <__ieee754_pow+0x414>
 8011e98:	4bd4      	ldr	r3, [pc, #848]	; (80121ec <__ieee754_pow+0x75c>)
 8011e9a:	f7ee fbb5 	bl	8000608 <__aeabi_dmul>
 8011e9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	1523      	asrs	r3, r4, #20
 8011ea6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011eaa:	4413      	add	r3, r2
 8011eac:	9305      	str	r3, [sp, #20]
 8011eae:	4bd0      	ldr	r3, [pc, #832]	; (80121f0 <__ieee754_pow+0x760>)
 8011eb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011eb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011eb8:	429c      	cmp	r4, r3
 8011eba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011ebe:	dd08      	ble.n	8011ed2 <__ieee754_pow+0x442>
 8011ec0:	4bcc      	ldr	r3, [pc, #816]	; (80121f4 <__ieee754_pow+0x764>)
 8011ec2:	429c      	cmp	r4, r3
 8011ec4:	f340 8162 	ble.w	801218c <__ieee754_pow+0x6fc>
 8011ec8:	9b05      	ldr	r3, [sp, #20]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	9305      	str	r3, [sp, #20]
 8011ece:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011ed2:	2400      	movs	r4, #0
 8011ed4:	00e3      	lsls	r3, r4, #3
 8011ed6:	9307      	str	r3, [sp, #28]
 8011ed8:	4bc7      	ldr	r3, [pc, #796]	; (80121f8 <__ieee754_pow+0x768>)
 8011eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ede:	ed93 7b00 	vldr	d7, [r3]
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	ec53 2b17 	vmov	r2, r3, d7
 8011ee8:	eeb0 9a47 	vmov.f32	s18, s14
 8011eec:	eef0 9a67 	vmov.f32	s19, s15
 8011ef0:	4682      	mov	sl, r0
 8011ef2:	f7ee f9d1 	bl	8000298 <__aeabi_dsub>
 8011ef6:	4652      	mov	r2, sl
 8011ef8:	4606      	mov	r6, r0
 8011efa:	460f      	mov	r7, r1
 8011efc:	462b      	mov	r3, r5
 8011efe:	ec51 0b19 	vmov	r0, r1, d9
 8011f02:	f7ee f9cb 	bl	800029c <__adddf3>
 8011f06:	4602      	mov	r2, r0
 8011f08:	460b      	mov	r3, r1
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	49bb      	ldr	r1, [pc, #748]	; (80121fc <__ieee754_pow+0x76c>)
 8011f0e:	f7ee fca5 	bl	800085c <__aeabi_ddiv>
 8011f12:	ec41 0b1a 	vmov	d10, r0, r1
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	f7ee fb73 	bl	8000608 <__aeabi_dmul>
 8011f22:	2300      	movs	r3, #0
 8011f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f28:	9302      	str	r3, [sp, #8]
 8011f2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011f2e:	46ab      	mov	fp, r5
 8011f30:	106d      	asrs	r5, r5, #1
 8011f32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011f36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011f3a:	ec41 0b18 	vmov	d8, r0, r1
 8011f3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011f42:	2200      	movs	r2, #0
 8011f44:	4640      	mov	r0, r8
 8011f46:	4649      	mov	r1, r9
 8011f48:	4614      	mov	r4, r2
 8011f4a:	461d      	mov	r5, r3
 8011f4c:	f7ee fb5c 	bl	8000608 <__aeabi_dmul>
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	4630      	mov	r0, r6
 8011f56:	4639      	mov	r1, r7
 8011f58:	f7ee f99e 	bl	8000298 <__aeabi_dsub>
 8011f5c:	ec53 2b19 	vmov	r2, r3, d9
 8011f60:	4606      	mov	r6, r0
 8011f62:	460f      	mov	r7, r1
 8011f64:	4620      	mov	r0, r4
 8011f66:	4629      	mov	r1, r5
 8011f68:	f7ee f996 	bl	8000298 <__aeabi_dsub>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	460b      	mov	r3, r1
 8011f70:	4650      	mov	r0, sl
 8011f72:	4659      	mov	r1, fp
 8011f74:	f7ee f990 	bl	8000298 <__aeabi_dsub>
 8011f78:	4642      	mov	r2, r8
 8011f7a:	464b      	mov	r3, r9
 8011f7c:	f7ee fb44 	bl	8000608 <__aeabi_dmul>
 8011f80:	4602      	mov	r2, r0
 8011f82:	460b      	mov	r3, r1
 8011f84:	4630      	mov	r0, r6
 8011f86:	4639      	mov	r1, r7
 8011f88:	f7ee f986 	bl	8000298 <__aeabi_dsub>
 8011f8c:	ec53 2b1a 	vmov	r2, r3, d10
 8011f90:	f7ee fb3a 	bl	8000608 <__aeabi_dmul>
 8011f94:	ec53 2b18 	vmov	r2, r3, d8
 8011f98:	ec41 0b19 	vmov	d9, r0, r1
 8011f9c:	ec51 0b18 	vmov	r0, r1, d8
 8011fa0:	f7ee fb32 	bl	8000608 <__aeabi_dmul>
 8011fa4:	a37c      	add	r3, pc, #496	; (adr r3, 8012198 <__ieee754_pow+0x708>)
 8011fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011faa:	4604      	mov	r4, r0
 8011fac:	460d      	mov	r5, r1
 8011fae:	f7ee fb2b 	bl	8000608 <__aeabi_dmul>
 8011fb2:	a37b      	add	r3, pc, #492	; (adr r3, 80121a0 <__ieee754_pow+0x710>)
 8011fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb8:	f7ee f970 	bl	800029c <__adddf3>
 8011fbc:	4622      	mov	r2, r4
 8011fbe:	462b      	mov	r3, r5
 8011fc0:	f7ee fb22 	bl	8000608 <__aeabi_dmul>
 8011fc4:	a378      	add	r3, pc, #480	; (adr r3, 80121a8 <__ieee754_pow+0x718>)
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	f7ee f967 	bl	800029c <__adddf3>
 8011fce:	4622      	mov	r2, r4
 8011fd0:	462b      	mov	r3, r5
 8011fd2:	f7ee fb19 	bl	8000608 <__aeabi_dmul>
 8011fd6:	a376      	add	r3, pc, #472	; (adr r3, 80121b0 <__ieee754_pow+0x720>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	f7ee f95e 	bl	800029c <__adddf3>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	462b      	mov	r3, r5
 8011fe4:	f7ee fb10 	bl	8000608 <__aeabi_dmul>
 8011fe8:	a373      	add	r3, pc, #460	; (adr r3, 80121b8 <__ieee754_pow+0x728>)
 8011fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fee:	f7ee f955 	bl	800029c <__adddf3>
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	462b      	mov	r3, r5
 8011ff6:	f7ee fb07 	bl	8000608 <__aeabi_dmul>
 8011ffa:	a371      	add	r3, pc, #452	; (adr r3, 80121c0 <__ieee754_pow+0x730>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	f7ee f94c 	bl	800029c <__adddf3>
 8012004:	4622      	mov	r2, r4
 8012006:	4606      	mov	r6, r0
 8012008:	460f      	mov	r7, r1
 801200a:	462b      	mov	r3, r5
 801200c:	4620      	mov	r0, r4
 801200e:	4629      	mov	r1, r5
 8012010:	f7ee fafa 	bl	8000608 <__aeabi_dmul>
 8012014:	4602      	mov	r2, r0
 8012016:	460b      	mov	r3, r1
 8012018:	4630      	mov	r0, r6
 801201a:	4639      	mov	r1, r7
 801201c:	f7ee faf4 	bl	8000608 <__aeabi_dmul>
 8012020:	4642      	mov	r2, r8
 8012022:	4604      	mov	r4, r0
 8012024:	460d      	mov	r5, r1
 8012026:	464b      	mov	r3, r9
 8012028:	ec51 0b18 	vmov	r0, r1, d8
 801202c:	f7ee f936 	bl	800029c <__adddf3>
 8012030:	ec53 2b19 	vmov	r2, r3, d9
 8012034:	f7ee fae8 	bl	8000608 <__aeabi_dmul>
 8012038:	4622      	mov	r2, r4
 801203a:	462b      	mov	r3, r5
 801203c:	f7ee f92e 	bl	800029c <__adddf3>
 8012040:	4642      	mov	r2, r8
 8012042:	4682      	mov	sl, r0
 8012044:	468b      	mov	fp, r1
 8012046:	464b      	mov	r3, r9
 8012048:	4640      	mov	r0, r8
 801204a:	4649      	mov	r1, r9
 801204c:	f7ee fadc 	bl	8000608 <__aeabi_dmul>
 8012050:	4b6b      	ldr	r3, [pc, #428]	; (8012200 <__ieee754_pow+0x770>)
 8012052:	2200      	movs	r2, #0
 8012054:	4606      	mov	r6, r0
 8012056:	460f      	mov	r7, r1
 8012058:	f7ee f920 	bl	800029c <__adddf3>
 801205c:	4652      	mov	r2, sl
 801205e:	465b      	mov	r3, fp
 8012060:	f7ee f91c 	bl	800029c <__adddf3>
 8012064:	2000      	movs	r0, #0
 8012066:	4604      	mov	r4, r0
 8012068:	460d      	mov	r5, r1
 801206a:	4602      	mov	r2, r0
 801206c:	460b      	mov	r3, r1
 801206e:	4640      	mov	r0, r8
 8012070:	4649      	mov	r1, r9
 8012072:	f7ee fac9 	bl	8000608 <__aeabi_dmul>
 8012076:	4b62      	ldr	r3, [pc, #392]	; (8012200 <__ieee754_pow+0x770>)
 8012078:	4680      	mov	r8, r0
 801207a:	4689      	mov	r9, r1
 801207c:	2200      	movs	r2, #0
 801207e:	4620      	mov	r0, r4
 8012080:	4629      	mov	r1, r5
 8012082:	f7ee f909 	bl	8000298 <__aeabi_dsub>
 8012086:	4632      	mov	r2, r6
 8012088:	463b      	mov	r3, r7
 801208a:	f7ee f905 	bl	8000298 <__aeabi_dsub>
 801208e:	4602      	mov	r2, r0
 8012090:	460b      	mov	r3, r1
 8012092:	4650      	mov	r0, sl
 8012094:	4659      	mov	r1, fp
 8012096:	f7ee f8ff 	bl	8000298 <__aeabi_dsub>
 801209a:	ec53 2b18 	vmov	r2, r3, d8
 801209e:	f7ee fab3 	bl	8000608 <__aeabi_dmul>
 80120a2:	4622      	mov	r2, r4
 80120a4:	4606      	mov	r6, r0
 80120a6:	460f      	mov	r7, r1
 80120a8:	462b      	mov	r3, r5
 80120aa:	ec51 0b19 	vmov	r0, r1, d9
 80120ae:	f7ee faab 	bl	8000608 <__aeabi_dmul>
 80120b2:	4602      	mov	r2, r0
 80120b4:	460b      	mov	r3, r1
 80120b6:	4630      	mov	r0, r6
 80120b8:	4639      	mov	r1, r7
 80120ba:	f7ee f8ef 	bl	800029c <__adddf3>
 80120be:	4606      	mov	r6, r0
 80120c0:	460f      	mov	r7, r1
 80120c2:	4602      	mov	r2, r0
 80120c4:	460b      	mov	r3, r1
 80120c6:	4640      	mov	r0, r8
 80120c8:	4649      	mov	r1, r9
 80120ca:	f7ee f8e7 	bl	800029c <__adddf3>
 80120ce:	a33e      	add	r3, pc, #248	; (adr r3, 80121c8 <__ieee754_pow+0x738>)
 80120d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d4:	2000      	movs	r0, #0
 80120d6:	4604      	mov	r4, r0
 80120d8:	460d      	mov	r5, r1
 80120da:	f7ee fa95 	bl	8000608 <__aeabi_dmul>
 80120de:	4642      	mov	r2, r8
 80120e0:	ec41 0b18 	vmov	d8, r0, r1
 80120e4:	464b      	mov	r3, r9
 80120e6:	4620      	mov	r0, r4
 80120e8:	4629      	mov	r1, r5
 80120ea:	f7ee f8d5 	bl	8000298 <__aeabi_dsub>
 80120ee:	4602      	mov	r2, r0
 80120f0:	460b      	mov	r3, r1
 80120f2:	4630      	mov	r0, r6
 80120f4:	4639      	mov	r1, r7
 80120f6:	f7ee f8cf 	bl	8000298 <__aeabi_dsub>
 80120fa:	a335      	add	r3, pc, #212	; (adr r3, 80121d0 <__ieee754_pow+0x740>)
 80120fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012100:	f7ee fa82 	bl	8000608 <__aeabi_dmul>
 8012104:	a334      	add	r3, pc, #208	; (adr r3, 80121d8 <__ieee754_pow+0x748>)
 8012106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210a:	4606      	mov	r6, r0
 801210c:	460f      	mov	r7, r1
 801210e:	4620      	mov	r0, r4
 8012110:	4629      	mov	r1, r5
 8012112:	f7ee fa79 	bl	8000608 <__aeabi_dmul>
 8012116:	4602      	mov	r2, r0
 8012118:	460b      	mov	r3, r1
 801211a:	4630      	mov	r0, r6
 801211c:	4639      	mov	r1, r7
 801211e:	f7ee f8bd 	bl	800029c <__adddf3>
 8012122:	9a07      	ldr	r2, [sp, #28]
 8012124:	4b37      	ldr	r3, [pc, #220]	; (8012204 <__ieee754_pow+0x774>)
 8012126:	4413      	add	r3, r2
 8012128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801212c:	f7ee f8b6 	bl	800029c <__adddf3>
 8012130:	4682      	mov	sl, r0
 8012132:	9805      	ldr	r0, [sp, #20]
 8012134:	468b      	mov	fp, r1
 8012136:	f7ee f9fd 	bl	8000534 <__aeabi_i2d>
 801213a:	9a07      	ldr	r2, [sp, #28]
 801213c:	4b32      	ldr	r3, [pc, #200]	; (8012208 <__ieee754_pow+0x778>)
 801213e:	4413      	add	r3, r2
 8012140:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012144:	4606      	mov	r6, r0
 8012146:	460f      	mov	r7, r1
 8012148:	4652      	mov	r2, sl
 801214a:	465b      	mov	r3, fp
 801214c:	ec51 0b18 	vmov	r0, r1, d8
 8012150:	f7ee f8a4 	bl	800029c <__adddf3>
 8012154:	4642      	mov	r2, r8
 8012156:	464b      	mov	r3, r9
 8012158:	f7ee f8a0 	bl	800029c <__adddf3>
 801215c:	4632      	mov	r2, r6
 801215e:	463b      	mov	r3, r7
 8012160:	f7ee f89c 	bl	800029c <__adddf3>
 8012164:	2000      	movs	r0, #0
 8012166:	4632      	mov	r2, r6
 8012168:	463b      	mov	r3, r7
 801216a:	4604      	mov	r4, r0
 801216c:	460d      	mov	r5, r1
 801216e:	f7ee f893 	bl	8000298 <__aeabi_dsub>
 8012172:	4642      	mov	r2, r8
 8012174:	464b      	mov	r3, r9
 8012176:	f7ee f88f 	bl	8000298 <__aeabi_dsub>
 801217a:	ec53 2b18 	vmov	r2, r3, d8
 801217e:	f7ee f88b 	bl	8000298 <__aeabi_dsub>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4650      	mov	r0, sl
 8012188:	4659      	mov	r1, fp
 801218a:	e610      	b.n	8011dae <__ieee754_pow+0x31e>
 801218c:	2401      	movs	r4, #1
 801218e:	e6a1      	b.n	8011ed4 <__ieee754_pow+0x444>
 8012190:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80121e0 <__ieee754_pow+0x750>
 8012194:	e617      	b.n	8011dc6 <__ieee754_pow+0x336>
 8012196:	bf00      	nop
 8012198:	4a454eef 	.word	0x4a454eef
 801219c:	3fca7e28 	.word	0x3fca7e28
 80121a0:	93c9db65 	.word	0x93c9db65
 80121a4:	3fcd864a 	.word	0x3fcd864a
 80121a8:	a91d4101 	.word	0xa91d4101
 80121ac:	3fd17460 	.word	0x3fd17460
 80121b0:	518f264d 	.word	0x518f264d
 80121b4:	3fd55555 	.word	0x3fd55555
 80121b8:	db6fabff 	.word	0xdb6fabff
 80121bc:	3fdb6db6 	.word	0x3fdb6db6
 80121c0:	33333303 	.word	0x33333303
 80121c4:	3fe33333 	.word	0x3fe33333
 80121c8:	e0000000 	.word	0xe0000000
 80121cc:	3feec709 	.word	0x3feec709
 80121d0:	dc3a03fd 	.word	0xdc3a03fd
 80121d4:	3feec709 	.word	0x3feec709
 80121d8:	145b01f5 	.word	0x145b01f5
 80121dc:	be3e2fe0 	.word	0xbe3e2fe0
 80121e0:	00000000 	.word	0x00000000
 80121e4:	3ff00000 	.word	0x3ff00000
 80121e8:	7ff00000 	.word	0x7ff00000
 80121ec:	43400000 	.word	0x43400000
 80121f0:	0003988e 	.word	0x0003988e
 80121f4:	000bb679 	.word	0x000bb679
 80121f8:	080133d8 	.word	0x080133d8
 80121fc:	3ff00000 	.word	0x3ff00000
 8012200:	40080000 	.word	0x40080000
 8012204:	080133f8 	.word	0x080133f8
 8012208:	080133e8 	.word	0x080133e8
 801220c:	a3b5      	add	r3, pc, #724	; (adr r3, 80124e4 <__ieee754_pow+0xa54>)
 801220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012212:	4640      	mov	r0, r8
 8012214:	4649      	mov	r1, r9
 8012216:	f7ee f841 	bl	800029c <__adddf3>
 801221a:	4622      	mov	r2, r4
 801221c:	ec41 0b1a 	vmov	d10, r0, r1
 8012220:	462b      	mov	r3, r5
 8012222:	4630      	mov	r0, r6
 8012224:	4639      	mov	r1, r7
 8012226:	f7ee f837 	bl	8000298 <__aeabi_dsub>
 801222a:	4602      	mov	r2, r0
 801222c:	460b      	mov	r3, r1
 801222e:	ec51 0b1a 	vmov	r0, r1, d10
 8012232:	f7ee fc79 	bl	8000b28 <__aeabi_dcmpgt>
 8012236:	2800      	cmp	r0, #0
 8012238:	f47f ae04 	bne.w	8011e44 <__ieee754_pow+0x3b4>
 801223c:	4aa4      	ldr	r2, [pc, #656]	; (80124d0 <__ieee754_pow+0xa40>)
 801223e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012242:	4293      	cmp	r3, r2
 8012244:	f340 8108 	ble.w	8012458 <__ieee754_pow+0x9c8>
 8012248:	151b      	asrs	r3, r3, #20
 801224a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801224e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012252:	fa4a f303 	asr.w	r3, sl, r3
 8012256:	445b      	add	r3, fp
 8012258:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801225c:	4e9d      	ldr	r6, [pc, #628]	; (80124d4 <__ieee754_pow+0xa44>)
 801225e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012262:	4116      	asrs	r6, r2
 8012264:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012268:	2000      	movs	r0, #0
 801226a:	ea23 0106 	bic.w	r1, r3, r6
 801226e:	f1c2 0214 	rsb	r2, r2, #20
 8012272:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012276:	fa4a fa02 	asr.w	sl, sl, r2
 801227a:	f1bb 0f00 	cmp.w	fp, #0
 801227e:	4602      	mov	r2, r0
 8012280:	460b      	mov	r3, r1
 8012282:	4620      	mov	r0, r4
 8012284:	4629      	mov	r1, r5
 8012286:	bfb8      	it	lt
 8012288:	f1ca 0a00 	rsblt	sl, sl, #0
 801228c:	f7ee f804 	bl	8000298 <__aeabi_dsub>
 8012290:	ec41 0b19 	vmov	d9, r0, r1
 8012294:	4642      	mov	r2, r8
 8012296:	464b      	mov	r3, r9
 8012298:	ec51 0b19 	vmov	r0, r1, d9
 801229c:	f7ed fffe 	bl	800029c <__adddf3>
 80122a0:	a37b      	add	r3, pc, #492	; (adr r3, 8012490 <__ieee754_pow+0xa00>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	2000      	movs	r0, #0
 80122a8:	4604      	mov	r4, r0
 80122aa:	460d      	mov	r5, r1
 80122ac:	f7ee f9ac 	bl	8000608 <__aeabi_dmul>
 80122b0:	ec53 2b19 	vmov	r2, r3, d9
 80122b4:	4606      	mov	r6, r0
 80122b6:	460f      	mov	r7, r1
 80122b8:	4620      	mov	r0, r4
 80122ba:	4629      	mov	r1, r5
 80122bc:	f7ed ffec 	bl	8000298 <__aeabi_dsub>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	4640      	mov	r0, r8
 80122c6:	4649      	mov	r1, r9
 80122c8:	f7ed ffe6 	bl	8000298 <__aeabi_dsub>
 80122cc:	a372      	add	r3, pc, #456	; (adr r3, 8012498 <__ieee754_pow+0xa08>)
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	f7ee f999 	bl	8000608 <__aeabi_dmul>
 80122d6:	a372      	add	r3, pc, #456	; (adr r3, 80124a0 <__ieee754_pow+0xa10>)
 80122d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122dc:	4680      	mov	r8, r0
 80122de:	4689      	mov	r9, r1
 80122e0:	4620      	mov	r0, r4
 80122e2:	4629      	mov	r1, r5
 80122e4:	f7ee f990 	bl	8000608 <__aeabi_dmul>
 80122e8:	4602      	mov	r2, r0
 80122ea:	460b      	mov	r3, r1
 80122ec:	4640      	mov	r0, r8
 80122ee:	4649      	mov	r1, r9
 80122f0:	f7ed ffd4 	bl	800029c <__adddf3>
 80122f4:	4604      	mov	r4, r0
 80122f6:	460d      	mov	r5, r1
 80122f8:	4602      	mov	r2, r0
 80122fa:	460b      	mov	r3, r1
 80122fc:	4630      	mov	r0, r6
 80122fe:	4639      	mov	r1, r7
 8012300:	f7ed ffcc 	bl	800029c <__adddf3>
 8012304:	4632      	mov	r2, r6
 8012306:	463b      	mov	r3, r7
 8012308:	4680      	mov	r8, r0
 801230a:	4689      	mov	r9, r1
 801230c:	f7ed ffc4 	bl	8000298 <__aeabi_dsub>
 8012310:	4602      	mov	r2, r0
 8012312:	460b      	mov	r3, r1
 8012314:	4620      	mov	r0, r4
 8012316:	4629      	mov	r1, r5
 8012318:	f7ed ffbe 	bl	8000298 <__aeabi_dsub>
 801231c:	4642      	mov	r2, r8
 801231e:	4606      	mov	r6, r0
 8012320:	460f      	mov	r7, r1
 8012322:	464b      	mov	r3, r9
 8012324:	4640      	mov	r0, r8
 8012326:	4649      	mov	r1, r9
 8012328:	f7ee f96e 	bl	8000608 <__aeabi_dmul>
 801232c:	a35e      	add	r3, pc, #376	; (adr r3, 80124a8 <__ieee754_pow+0xa18>)
 801232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012332:	4604      	mov	r4, r0
 8012334:	460d      	mov	r5, r1
 8012336:	f7ee f967 	bl	8000608 <__aeabi_dmul>
 801233a:	a35d      	add	r3, pc, #372	; (adr r3, 80124b0 <__ieee754_pow+0xa20>)
 801233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012340:	f7ed ffaa 	bl	8000298 <__aeabi_dsub>
 8012344:	4622      	mov	r2, r4
 8012346:	462b      	mov	r3, r5
 8012348:	f7ee f95e 	bl	8000608 <__aeabi_dmul>
 801234c:	a35a      	add	r3, pc, #360	; (adr r3, 80124b8 <__ieee754_pow+0xa28>)
 801234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012352:	f7ed ffa3 	bl	800029c <__adddf3>
 8012356:	4622      	mov	r2, r4
 8012358:	462b      	mov	r3, r5
 801235a:	f7ee f955 	bl	8000608 <__aeabi_dmul>
 801235e:	a358      	add	r3, pc, #352	; (adr r3, 80124c0 <__ieee754_pow+0xa30>)
 8012360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012364:	f7ed ff98 	bl	8000298 <__aeabi_dsub>
 8012368:	4622      	mov	r2, r4
 801236a:	462b      	mov	r3, r5
 801236c:	f7ee f94c 	bl	8000608 <__aeabi_dmul>
 8012370:	a355      	add	r3, pc, #340	; (adr r3, 80124c8 <__ieee754_pow+0xa38>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	f7ed ff91 	bl	800029c <__adddf3>
 801237a:	4622      	mov	r2, r4
 801237c:	462b      	mov	r3, r5
 801237e:	f7ee f943 	bl	8000608 <__aeabi_dmul>
 8012382:	4602      	mov	r2, r0
 8012384:	460b      	mov	r3, r1
 8012386:	4640      	mov	r0, r8
 8012388:	4649      	mov	r1, r9
 801238a:	f7ed ff85 	bl	8000298 <__aeabi_dsub>
 801238e:	4604      	mov	r4, r0
 8012390:	460d      	mov	r5, r1
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	4640      	mov	r0, r8
 8012398:	4649      	mov	r1, r9
 801239a:	f7ee f935 	bl	8000608 <__aeabi_dmul>
 801239e:	2200      	movs	r2, #0
 80123a0:	ec41 0b19 	vmov	d9, r0, r1
 80123a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123a8:	4620      	mov	r0, r4
 80123aa:	4629      	mov	r1, r5
 80123ac:	f7ed ff74 	bl	8000298 <__aeabi_dsub>
 80123b0:	4602      	mov	r2, r0
 80123b2:	460b      	mov	r3, r1
 80123b4:	ec51 0b19 	vmov	r0, r1, d9
 80123b8:	f7ee fa50 	bl	800085c <__aeabi_ddiv>
 80123bc:	4632      	mov	r2, r6
 80123be:	4604      	mov	r4, r0
 80123c0:	460d      	mov	r5, r1
 80123c2:	463b      	mov	r3, r7
 80123c4:	4640      	mov	r0, r8
 80123c6:	4649      	mov	r1, r9
 80123c8:	f7ee f91e 	bl	8000608 <__aeabi_dmul>
 80123cc:	4632      	mov	r2, r6
 80123ce:	463b      	mov	r3, r7
 80123d0:	f7ed ff64 	bl	800029c <__adddf3>
 80123d4:	4602      	mov	r2, r0
 80123d6:	460b      	mov	r3, r1
 80123d8:	4620      	mov	r0, r4
 80123da:	4629      	mov	r1, r5
 80123dc:	f7ed ff5c 	bl	8000298 <__aeabi_dsub>
 80123e0:	4642      	mov	r2, r8
 80123e2:	464b      	mov	r3, r9
 80123e4:	f7ed ff58 	bl	8000298 <__aeabi_dsub>
 80123e8:	460b      	mov	r3, r1
 80123ea:	4602      	mov	r2, r0
 80123ec:	493a      	ldr	r1, [pc, #232]	; (80124d8 <__ieee754_pow+0xa48>)
 80123ee:	2000      	movs	r0, #0
 80123f0:	f7ed ff52 	bl	8000298 <__aeabi_dsub>
 80123f4:	ec41 0b10 	vmov	d0, r0, r1
 80123f8:	ee10 3a90 	vmov	r3, s1
 80123fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012404:	da2b      	bge.n	801245e <__ieee754_pow+0x9ce>
 8012406:	4650      	mov	r0, sl
 8012408:	f000 fafa 	bl	8012a00 <scalbn>
 801240c:	ec51 0b10 	vmov	r0, r1, d0
 8012410:	ec53 2b18 	vmov	r2, r3, d8
 8012414:	f7ff bbed 	b.w	8011bf2 <__ieee754_pow+0x162>
 8012418:	4b30      	ldr	r3, [pc, #192]	; (80124dc <__ieee754_pow+0xa4c>)
 801241a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801241e:	429e      	cmp	r6, r3
 8012420:	f77f af0c 	ble.w	801223c <__ieee754_pow+0x7ac>
 8012424:	4b2e      	ldr	r3, [pc, #184]	; (80124e0 <__ieee754_pow+0xa50>)
 8012426:	440b      	add	r3, r1
 8012428:	4303      	orrs	r3, r0
 801242a:	d009      	beq.n	8012440 <__ieee754_pow+0x9b0>
 801242c:	ec51 0b18 	vmov	r0, r1, d8
 8012430:	2200      	movs	r2, #0
 8012432:	2300      	movs	r3, #0
 8012434:	f7ee fb5a 	bl	8000aec <__aeabi_dcmplt>
 8012438:	3800      	subs	r0, #0
 801243a:	bf18      	it	ne
 801243c:	2001      	movne	r0, #1
 801243e:	e447      	b.n	8011cd0 <__ieee754_pow+0x240>
 8012440:	4622      	mov	r2, r4
 8012442:	462b      	mov	r3, r5
 8012444:	f7ed ff28 	bl	8000298 <__aeabi_dsub>
 8012448:	4642      	mov	r2, r8
 801244a:	464b      	mov	r3, r9
 801244c:	f7ee fb62 	bl	8000b14 <__aeabi_dcmpge>
 8012450:	2800      	cmp	r0, #0
 8012452:	f43f aef3 	beq.w	801223c <__ieee754_pow+0x7ac>
 8012456:	e7e9      	b.n	801242c <__ieee754_pow+0x99c>
 8012458:	f04f 0a00 	mov.w	sl, #0
 801245c:	e71a      	b.n	8012294 <__ieee754_pow+0x804>
 801245e:	ec51 0b10 	vmov	r0, r1, d0
 8012462:	4619      	mov	r1, r3
 8012464:	e7d4      	b.n	8012410 <__ieee754_pow+0x980>
 8012466:	491c      	ldr	r1, [pc, #112]	; (80124d8 <__ieee754_pow+0xa48>)
 8012468:	2000      	movs	r0, #0
 801246a:	f7ff bb30 	b.w	8011ace <__ieee754_pow+0x3e>
 801246e:	2000      	movs	r0, #0
 8012470:	2100      	movs	r1, #0
 8012472:	f7ff bb2c 	b.w	8011ace <__ieee754_pow+0x3e>
 8012476:	4630      	mov	r0, r6
 8012478:	4639      	mov	r1, r7
 801247a:	f7ff bb28 	b.w	8011ace <__ieee754_pow+0x3e>
 801247e:	9204      	str	r2, [sp, #16]
 8012480:	f7ff bb7a 	b.w	8011b78 <__ieee754_pow+0xe8>
 8012484:	2300      	movs	r3, #0
 8012486:	f7ff bb64 	b.w	8011b52 <__ieee754_pow+0xc2>
 801248a:	bf00      	nop
 801248c:	f3af 8000 	nop.w
 8012490:	00000000 	.word	0x00000000
 8012494:	3fe62e43 	.word	0x3fe62e43
 8012498:	fefa39ef 	.word	0xfefa39ef
 801249c:	3fe62e42 	.word	0x3fe62e42
 80124a0:	0ca86c39 	.word	0x0ca86c39
 80124a4:	be205c61 	.word	0xbe205c61
 80124a8:	72bea4d0 	.word	0x72bea4d0
 80124ac:	3e663769 	.word	0x3e663769
 80124b0:	c5d26bf1 	.word	0xc5d26bf1
 80124b4:	3ebbbd41 	.word	0x3ebbbd41
 80124b8:	af25de2c 	.word	0xaf25de2c
 80124bc:	3f11566a 	.word	0x3f11566a
 80124c0:	16bebd93 	.word	0x16bebd93
 80124c4:	3f66c16c 	.word	0x3f66c16c
 80124c8:	5555553e 	.word	0x5555553e
 80124cc:	3fc55555 	.word	0x3fc55555
 80124d0:	3fe00000 	.word	0x3fe00000
 80124d4:	000fffff 	.word	0x000fffff
 80124d8:	3ff00000 	.word	0x3ff00000
 80124dc:	4090cbff 	.word	0x4090cbff
 80124e0:	3f6f3400 	.word	0x3f6f3400
 80124e4:	652b82fe 	.word	0x652b82fe
 80124e8:	3c971547 	.word	0x3c971547

080124ec <__ieee754_sqrt>:
 80124ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124f0:	ec55 4b10 	vmov	r4, r5, d0
 80124f4:	4e55      	ldr	r6, [pc, #340]	; (801264c <__ieee754_sqrt+0x160>)
 80124f6:	43ae      	bics	r6, r5
 80124f8:	ee10 0a10 	vmov	r0, s0
 80124fc:	ee10 3a10 	vmov	r3, s0
 8012500:	462a      	mov	r2, r5
 8012502:	4629      	mov	r1, r5
 8012504:	d110      	bne.n	8012528 <__ieee754_sqrt+0x3c>
 8012506:	ee10 2a10 	vmov	r2, s0
 801250a:	462b      	mov	r3, r5
 801250c:	f7ee f87c 	bl	8000608 <__aeabi_dmul>
 8012510:	4602      	mov	r2, r0
 8012512:	460b      	mov	r3, r1
 8012514:	4620      	mov	r0, r4
 8012516:	4629      	mov	r1, r5
 8012518:	f7ed fec0 	bl	800029c <__adddf3>
 801251c:	4604      	mov	r4, r0
 801251e:	460d      	mov	r5, r1
 8012520:	ec45 4b10 	vmov	d0, r4, r5
 8012524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012528:	2d00      	cmp	r5, #0
 801252a:	dc10      	bgt.n	801254e <__ieee754_sqrt+0x62>
 801252c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012530:	4330      	orrs	r0, r6
 8012532:	d0f5      	beq.n	8012520 <__ieee754_sqrt+0x34>
 8012534:	b15d      	cbz	r5, 801254e <__ieee754_sqrt+0x62>
 8012536:	ee10 2a10 	vmov	r2, s0
 801253a:	462b      	mov	r3, r5
 801253c:	ee10 0a10 	vmov	r0, s0
 8012540:	f7ed feaa 	bl	8000298 <__aeabi_dsub>
 8012544:	4602      	mov	r2, r0
 8012546:	460b      	mov	r3, r1
 8012548:	f7ee f988 	bl	800085c <__aeabi_ddiv>
 801254c:	e7e6      	b.n	801251c <__ieee754_sqrt+0x30>
 801254e:	1512      	asrs	r2, r2, #20
 8012550:	d074      	beq.n	801263c <__ieee754_sqrt+0x150>
 8012552:	07d4      	lsls	r4, r2, #31
 8012554:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012558:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801255c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012560:	bf5e      	ittt	pl
 8012562:	0fda      	lsrpl	r2, r3, #31
 8012564:	005b      	lslpl	r3, r3, #1
 8012566:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801256a:	2400      	movs	r4, #0
 801256c:	0fda      	lsrs	r2, r3, #31
 801256e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012572:	107f      	asrs	r7, r7, #1
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	2516      	movs	r5, #22
 8012578:	4620      	mov	r0, r4
 801257a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801257e:	1886      	adds	r6, r0, r2
 8012580:	428e      	cmp	r6, r1
 8012582:	bfde      	ittt	le
 8012584:	1b89      	suble	r1, r1, r6
 8012586:	18b0      	addle	r0, r6, r2
 8012588:	18a4      	addle	r4, r4, r2
 801258a:	0049      	lsls	r1, r1, #1
 801258c:	3d01      	subs	r5, #1
 801258e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012592:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012596:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801259a:	d1f0      	bne.n	801257e <__ieee754_sqrt+0x92>
 801259c:	462a      	mov	r2, r5
 801259e:	f04f 0e20 	mov.w	lr, #32
 80125a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80125a6:	4281      	cmp	r1, r0
 80125a8:	eb06 0c05 	add.w	ip, r6, r5
 80125ac:	dc02      	bgt.n	80125b4 <__ieee754_sqrt+0xc8>
 80125ae:	d113      	bne.n	80125d8 <__ieee754_sqrt+0xec>
 80125b0:	459c      	cmp	ip, r3
 80125b2:	d811      	bhi.n	80125d8 <__ieee754_sqrt+0xec>
 80125b4:	f1bc 0f00 	cmp.w	ip, #0
 80125b8:	eb0c 0506 	add.w	r5, ip, r6
 80125bc:	da43      	bge.n	8012646 <__ieee754_sqrt+0x15a>
 80125be:	2d00      	cmp	r5, #0
 80125c0:	db41      	blt.n	8012646 <__ieee754_sqrt+0x15a>
 80125c2:	f100 0801 	add.w	r8, r0, #1
 80125c6:	1a09      	subs	r1, r1, r0
 80125c8:	459c      	cmp	ip, r3
 80125ca:	bf88      	it	hi
 80125cc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80125d0:	eba3 030c 	sub.w	r3, r3, ip
 80125d4:	4432      	add	r2, r6
 80125d6:	4640      	mov	r0, r8
 80125d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80125dc:	f1be 0e01 	subs.w	lr, lr, #1
 80125e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80125e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80125e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80125ec:	d1db      	bne.n	80125a6 <__ieee754_sqrt+0xba>
 80125ee:	430b      	orrs	r3, r1
 80125f0:	d006      	beq.n	8012600 <__ieee754_sqrt+0x114>
 80125f2:	1c50      	adds	r0, r2, #1
 80125f4:	bf13      	iteet	ne
 80125f6:	3201      	addne	r2, #1
 80125f8:	3401      	addeq	r4, #1
 80125fa:	4672      	moveq	r2, lr
 80125fc:	f022 0201 	bicne.w	r2, r2, #1
 8012600:	1063      	asrs	r3, r4, #1
 8012602:	0852      	lsrs	r2, r2, #1
 8012604:	07e1      	lsls	r1, r4, #31
 8012606:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801260a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801260e:	bf48      	it	mi
 8012610:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012614:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012618:	4614      	mov	r4, r2
 801261a:	e781      	b.n	8012520 <__ieee754_sqrt+0x34>
 801261c:	0ad9      	lsrs	r1, r3, #11
 801261e:	3815      	subs	r0, #21
 8012620:	055b      	lsls	r3, r3, #21
 8012622:	2900      	cmp	r1, #0
 8012624:	d0fa      	beq.n	801261c <__ieee754_sqrt+0x130>
 8012626:	02cd      	lsls	r5, r1, #11
 8012628:	d50a      	bpl.n	8012640 <__ieee754_sqrt+0x154>
 801262a:	f1c2 0420 	rsb	r4, r2, #32
 801262e:	fa23 f404 	lsr.w	r4, r3, r4
 8012632:	1e55      	subs	r5, r2, #1
 8012634:	4093      	lsls	r3, r2
 8012636:	4321      	orrs	r1, r4
 8012638:	1b42      	subs	r2, r0, r5
 801263a:	e78a      	b.n	8012552 <__ieee754_sqrt+0x66>
 801263c:	4610      	mov	r0, r2
 801263e:	e7f0      	b.n	8012622 <__ieee754_sqrt+0x136>
 8012640:	0049      	lsls	r1, r1, #1
 8012642:	3201      	adds	r2, #1
 8012644:	e7ef      	b.n	8012626 <__ieee754_sqrt+0x13a>
 8012646:	4680      	mov	r8, r0
 8012648:	e7bd      	b.n	80125c6 <__ieee754_sqrt+0xda>
 801264a:	bf00      	nop
 801264c:	7ff00000 	.word	0x7ff00000

08012650 <__ieee754_asinf>:
 8012650:	b538      	push	{r3, r4, r5, lr}
 8012652:	ee10 5a10 	vmov	r5, s0
 8012656:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801265a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801265e:	ed2d 8b04 	vpush	{d8-d9}
 8012662:	d10c      	bne.n	801267e <__ieee754_asinf+0x2e>
 8012664:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80127dc <__ieee754_asinf+0x18c>
 8012668:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80127e0 <__ieee754_asinf+0x190>
 801266c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012670:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012674:	eeb0 0a67 	vmov.f32	s0, s15
 8012678:	ecbd 8b04 	vpop	{d8-d9}
 801267c:	bd38      	pop	{r3, r4, r5, pc}
 801267e:	dd04      	ble.n	801268a <__ieee754_asinf+0x3a>
 8012680:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012684:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8012688:	e7f6      	b.n	8012678 <__ieee754_asinf+0x28>
 801268a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 801268e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012692:	da0b      	bge.n	80126ac <__ieee754_asinf+0x5c>
 8012694:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8012698:	da52      	bge.n	8012740 <__ieee754_asinf+0xf0>
 801269a:	eddf 7a52 	vldr	s15, [pc, #328]	; 80127e4 <__ieee754_asinf+0x194>
 801269e:	ee70 7a27 	vadd.f32	s15, s0, s15
 80126a2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126aa:	dce5      	bgt.n	8012678 <__ieee754_asinf+0x28>
 80126ac:	f000 fb02 	bl	8012cb4 <fabsf>
 80126b0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80126b4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80126b8:	ee20 8a08 	vmul.f32	s16, s0, s16
 80126bc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80127e8 <__ieee754_asinf+0x198>
 80126c0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80127ec <__ieee754_asinf+0x19c>
 80126c4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80127f0 <__ieee754_asinf+0x1a0>
 80126c8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80126cc:	eddf 7a49 	vldr	s15, [pc, #292]	; 80127f4 <__ieee754_asinf+0x1a4>
 80126d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80126d4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80127f8 <__ieee754_asinf+0x1a8>
 80126d8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80126dc:	eddf 7a47 	vldr	s15, [pc, #284]	; 80127fc <__ieee754_asinf+0x1ac>
 80126e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80126e4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8012800 <__ieee754_asinf+0x1b0>
 80126e8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80126ec:	eddf 7a45 	vldr	s15, [pc, #276]	; 8012804 <__ieee754_asinf+0x1b4>
 80126f0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80126f4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8012808 <__ieee754_asinf+0x1b8>
 80126f8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80126fc:	eddf 7a43 	vldr	s15, [pc, #268]	; 801280c <__ieee754_asinf+0x1bc>
 8012700:	eee7 7a08 	vfma.f32	s15, s14, s16
 8012704:	eeb0 0a48 	vmov.f32	s0, s16
 8012708:	eee7 8a88 	vfma.f32	s17, s15, s16
 801270c:	f000 f926 	bl	801295c <__ieee754_sqrtf>
 8012710:	4b3f      	ldr	r3, [pc, #252]	; (8012810 <__ieee754_asinf+0x1c0>)
 8012712:	ee29 9a08 	vmul.f32	s18, s18, s16
 8012716:	429c      	cmp	r4, r3
 8012718:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801271c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8012720:	dd3d      	ble.n	801279e <__ieee754_asinf+0x14e>
 8012722:	eea0 0a06 	vfma.f32	s0, s0, s12
 8012726:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8012814 <__ieee754_asinf+0x1c4>
 801272a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801272e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80127e0 <__ieee754_asinf+0x190>
 8012732:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012736:	2d00      	cmp	r5, #0
 8012738:	bfd8      	it	le
 801273a:	eeb1 0a40 	vnegle.f32	s0, s0
 801273e:	e79b      	b.n	8012678 <__ieee754_asinf+0x28>
 8012740:	ee60 7a00 	vmul.f32	s15, s0, s0
 8012744:	eddf 6a28 	vldr	s13, [pc, #160]	; 80127e8 <__ieee754_asinf+0x198>
 8012748:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80127ec <__ieee754_asinf+0x19c>
 801274c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8012800 <__ieee754_asinf+0x1b0>
 8012750:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8012754:	eddf 6a27 	vldr	s13, [pc, #156]	; 80127f4 <__ieee754_asinf+0x1a4>
 8012758:	eee7 6a27 	vfma.f32	s13, s14, s15
 801275c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80127f8 <__ieee754_asinf+0x1a8>
 8012760:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012764:	eddf 6a25 	vldr	s13, [pc, #148]	; 80127fc <__ieee754_asinf+0x1ac>
 8012768:	eee7 6a27 	vfma.f32	s13, s14, s15
 801276c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80127f0 <__ieee754_asinf+0x1a0>
 8012770:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012774:	eddf 6a23 	vldr	s13, [pc, #140]	; 8012804 <__ieee754_asinf+0x1b4>
 8012778:	eee7 6a86 	vfma.f32	s13, s15, s12
 801277c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8012808 <__ieee754_asinf+0x1b8>
 8012780:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8012784:	eddf 6a21 	vldr	s13, [pc, #132]	; 801280c <__ieee754_asinf+0x1bc>
 8012788:	eee6 6a27 	vfma.f32	s13, s12, s15
 801278c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012790:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8012794:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8012798:	eea0 0a27 	vfma.f32	s0, s0, s15
 801279c:	e76c      	b.n	8012678 <__ieee754_asinf+0x28>
 801279e:	ee10 3a10 	vmov	r3, s0
 80127a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80127a6:	f023 030f 	bic.w	r3, r3, #15
 80127aa:	ee07 3a10 	vmov	s14, r3
 80127ae:	eea7 8a47 	vfms.f32	s16, s14, s14
 80127b2:	ee70 7a07 	vadd.f32	s15, s0, s14
 80127b6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80127ba:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80127be:	eddf 7a07 	vldr	s15, [pc, #28]	; 80127dc <__ieee754_asinf+0x18c>
 80127c2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80127c6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80127ca:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012818 <__ieee754_asinf+0x1c8>
 80127ce:	eeb0 6a40 	vmov.f32	s12, s0
 80127d2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80127d6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80127da:	e7aa      	b.n	8012732 <__ieee754_asinf+0xe2>
 80127dc:	b33bbd2e 	.word	0xb33bbd2e
 80127e0:	3fc90fdb 	.word	0x3fc90fdb
 80127e4:	7149f2ca 	.word	0x7149f2ca
 80127e8:	3811ef08 	.word	0x3811ef08
 80127ec:	3a4f7f04 	.word	0x3a4f7f04
 80127f0:	3e2aaaab 	.word	0x3e2aaaab
 80127f4:	bd241146 	.word	0xbd241146
 80127f8:	3e4e0aa8 	.word	0x3e4e0aa8
 80127fc:	bea6b090 	.word	0xbea6b090
 8012800:	3d9dc62e 	.word	0x3d9dc62e
 8012804:	bf303361 	.word	0xbf303361
 8012808:	4001572d 	.word	0x4001572d
 801280c:	c019d139 	.word	0xc019d139
 8012810:	3f799999 	.word	0x3f799999
 8012814:	333bbd2e 	.word	0x333bbd2e
 8012818:	3f490fdb 	.word	0x3f490fdb

0801281c <__ieee754_atan2f>:
 801281c:	ee10 2a90 	vmov	r2, s1
 8012820:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8012824:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012828:	b510      	push	{r4, lr}
 801282a:	eef0 7a40 	vmov.f32	s15, s0
 801282e:	dc06      	bgt.n	801283e <__ieee754_atan2f+0x22>
 8012830:	ee10 0a10 	vmov	r0, s0
 8012834:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8012838:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801283c:	dd04      	ble.n	8012848 <__ieee754_atan2f+0x2c>
 801283e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8012842:	eeb0 0a67 	vmov.f32	s0, s15
 8012846:	bd10      	pop	{r4, pc}
 8012848:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801284c:	d103      	bne.n	8012856 <__ieee754_atan2f+0x3a>
 801284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012852:	f000 b95b 	b.w	8012b0c <atanf>
 8012856:	1794      	asrs	r4, r2, #30
 8012858:	f004 0402 	and.w	r4, r4, #2
 801285c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012860:	b943      	cbnz	r3, 8012874 <__ieee754_atan2f+0x58>
 8012862:	2c02      	cmp	r4, #2
 8012864:	d05e      	beq.n	8012924 <__ieee754_atan2f+0x108>
 8012866:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012938 <__ieee754_atan2f+0x11c>
 801286a:	2c03      	cmp	r4, #3
 801286c:	bf08      	it	eq
 801286e:	eef0 7a47 	vmoveq.f32	s15, s14
 8012872:	e7e6      	b.n	8012842 <__ieee754_atan2f+0x26>
 8012874:	b941      	cbnz	r1, 8012888 <__ieee754_atan2f+0x6c>
 8012876:	eddf 7a31 	vldr	s15, [pc, #196]	; 801293c <__ieee754_atan2f+0x120>
 801287a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8012940 <__ieee754_atan2f+0x124>
 801287e:	2800      	cmp	r0, #0
 8012880:	bfb8      	it	lt
 8012882:	eef0 7a40 	vmovlt.f32	s15, s0
 8012886:	e7dc      	b.n	8012842 <__ieee754_atan2f+0x26>
 8012888:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801288c:	d110      	bne.n	80128b0 <__ieee754_atan2f+0x94>
 801288e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012892:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8012896:	d107      	bne.n	80128a8 <__ieee754_atan2f+0x8c>
 8012898:	2c02      	cmp	r4, #2
 801289a:	d846      	bhi.n	801292a <__ieee754_atan2f+0x10e>
 801289c:	4b29      	ldr	r3, [pc, #164]	; (8012944 <__ieee754_atan2f+0x128>)
 801289e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80128a2:	edd4 7a00 	vldr	s15, [r4]
 80128a6:	e7cc      	b.n	8012842 <__ieee754_atan2f+0x26>
 80128a8:	2c02      	cmp	r4, #2
 80128aa:	d841      	bhi.n	8012930 <__ieee754_atan2f+0x114>
 80128ac:	4b26      	ldr	r3, [pc, #152]	; (8012948 <__ieee754_atan2f+0x12c>)
 80128ae:	e7f6      	b.n	801289e <__ieee754_atan2f+0x82>
 80128b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80128b4:	d0df      	beq.n	8012876 <__ieee754_atan2f+0x5a>
 80128b6:	1a5b      	subs	r3, r3, r1
 80128b8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80128bc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80128c0:	da1a      	bge.n	80128f8 <__ieee754_atan2f+0xdc>
 80128c2:	2a00      	cmp	r2, #0
 80128c4:	da01      	bge.n	80128ca <__ieee754_atan2f+0xae>
 80128c6:	313c      	adds	r1, #60	; 0x3c
 80128c8:	db19      	blt.n	80128fe <__ieee754_atan2f+0xe2>
 80128ca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80128ce:	f000 f9f1 	bl	8012cb4 <fabsf>
 80128d2:	f000 f91b 	bl	8012b0c <atanf>
 80128d6:	eef0 7a40 	vmov.f32	s15, s0
 80128da:	2c01      	cmp	r4, #1
 80128dc:	d012      	beq.n	8012904 <__ieee754_atan2f+0xe8>
 80128de:	2c02      	cmp	r4, #2
 80128e0:	d017      	beq.n	8012912 <__ieee754_atan2f+0xf6>
 80128e2:	2c00      	cmp	r4, #0
 80128e4:	d0ad      	beq.n	8012842 <__ieee754_atan2f+0x26>
 80128e6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801294c <__ieee754_atan2f+0x130>
 80128ea:	ee77 7a80 	vadd.f32	s15, s15, s0
 80128ee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012950 <__ieee754_atan2f+0x134>
 80128f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80128f6:	e7a4      	b.n	8012842 <__ieee754_atan2f+0x26>
 80128f8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801293c <__ieee754_atan2f+0x120>
 80128fc:	e7ed      	b.n	80128da <__ieee754_atan2f+0xbe>
 80128fe:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012954 <__ieee754_atan2f+0x138>
 8012902:	e7ea      	b.n	80128da <__ieee754_atan2f+0xbe>
 8012904:	ee17 3a90 	vmov	r3, s15
 8012908:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801290c:	ee07 3a90 	vmov	s15, r3
 8012910:	e797      	b.n	8012842 <__ieee754_atan2f+0x26>
 8012912:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801294c <__ieee754_atan2f+0x130>
 8012916:	ee77 7a80 	vadd.f32	s15, s15, s0
 801291a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8012950 <__ieee754_atan2f+0x134>
 801291e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012922:	e78e      	b.n	8012842 <__ieee754_atan2f+0x26>
 8012924:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8012950 <__ieee754_atan2f+0x134>
 8012928:	e78b      	b.n	8012842 <__ieee754_atan2f+0x26>
 801292a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8012958 <__ieee754_atan2f+0x13c>
 801292e:	e788      	b.n	8012842 <__ieee754_atan2f+0x26>
 8012930:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012954 <__ieee754_atan2f+0x138>
 8012934:	e785      	b.n	8012842 <__ieee754_atan2f+0x26>
 8012936:	bf00      	nop
 8012938:	c0490fdb 	.word	0xc0490fdb
 801293c:	3fc90fdb 	.word	0x3fc90fdb
 8012940:	bfc90fdb 	.word	0xbfc90fdb
 8012944:	08013408 	.word	0x08013408
 8012948:	08013414 	.word	0x08013414
 801294c:	33bbbd2e 	.word	0x33bbbd2e
 8012950:	40490fdb 	.word	0x40490fdb
 8012954:	00000000 	.word	0x00000000
 8012958:	3f490fdb 	.word	0x3f490fdb

0801295c <__ieee754_sqrtf>:
 801295c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012960:	4770      	bx	lr

08012962 <with_errno>:
 8012962:	b570      	push	{r4, r5, r6, lr}
 8012964:	4604      	mov	r4, r0
 8012966:	460d      	mov	r5, r1
 8012968:	4616      	mov	r6, r2
 801296a:	f7fb fe97 	bl	800e69c <__errno>
 801296e:	4629      	mov	r1, r5
 8012970:	6006      	str	r6, [r0, #0]
 8012972:	4620      	mov	r0, r4
 8012974:	bd70      	pop	{r4, r5, r6, pc}

08012976 <xflow>:
 8012976:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012978:	4614      	mov	r4, r2
 801297a:	461d      	mov	r5, r3
 801297c:	b108      	cbz	r0, 8012982 <xflow+0xc>
 801297e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012982:	e9cd 2300 	strd	r2, r3, [sp]
 8012986:	e9dd 2300 	ldrd	r2, r3, [sp]
 801298a:	4620      	mov	r0, r4
 801298c:	4629      	mov	r1, r5
 801298e:	f7ed fe3b 	bl	8000608 <__aeabi_dmul>
 8012992:	2222      	movs	r2, #34	; 0x22
 8012994:	b003      	add	sp, #12
 8012996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801299a:	f7ff bfe2 	b.w	8012962 <with_errno>

0801299e <__math_uflow>:
 801299e:	b508      	push	{r3, lr}
 80129a0:	2200      	movs	r2, #0
 80129a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80129a6:	f7ff ffe6 	bl	8012976 <xflow>
 80129aa:	ec41 0b10 	vmov	d0, r0, r1
 80129ae:	bd08      	pop	{r3, pc}

080129b0 <__math_oflow>:
 80129b0:	b508      	push	{r3, lr}
 80129b2:	2200      	movs	r2, #0
 80129b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80129b8:	f7ff ffdd 	bl	8012976 <xflow>
 80129bc:	ec41 0b10 	vmov	d0, r0, r1
 80129c0:	bd08      	pop	{r3, pc}

080129c2 <fabs>:
 80129c2:	ec51 0b10 	vmov	r0, r1, d0
 80129c6:	ee10 2a10 	vmov	r2, s0
 80129ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80129ce:	ec43 2b10 	vmov	d0, r2, r3
 80129d2:	4770      	bx	lr

080129d4 <finite>:
 80129d4:	b082      	sub	sp, #8
 80129d6:	ed8d 0b00 	vstr	d0, [sp]
 80129da:	9801      	ldr	r0, [sp, #4]
 80129dc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80129e0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80129e4:	0fc0      	lsrs	r0, r0, #31
 80129e6:	b002      	add	sp, #8
 80129e8:	4770      	bx	lr
 80129ea:	0000      	movs	r0, r0
 80129ec:	0000      	movs	r0, r0
	...

080129f0 <nan>:
 80129f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80129f8 <nan+0x8>
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	00000000 	.word	0x00000000
 80129fc:	7ff80000 	.word	0x7ff80000

08012a00 <scalbn>:
 8012a00:	b570      	push	{r4, r5, r6, lr}
 8012a02:	ec55 4b10 	vmov	r4, r5, d0
 8012a06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a0a:	4606      	mov	r6, r0
 8012a0c:	462b      	mov	r3, r5
 8012a0e:	b99a      	cbnz	r2, 8012a38 <scalbn+0x38>
 8012a10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a14:	4323      	orrs	r3, r4
 8012a16:	d036      	beq.n	8012a86 <scalbn+0x86>
 8012a18:	4b39      	ldr	r3, [pc, #228]	; (8012b00 <scalbn+0x100>)
 8012a1a:	4629      	mov	r1, r5
 8012a1c:	ee10 0a10 	vmov	r0, s0
 8012a20:	2200      	movs	r2, #0
 8012a22:	f7ed fdf1 	bl	8000608 <__aeabi_dmul>
 8012a26:	4b37      	ldr	r3, [pc, #220]	; (8012b04 <scalbn+0x104>)
 8012a28:	429e      	cmp	r6, r3
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	460d      	mov	r5, r1
 8012a2e:	da10      	bge.n	8012a52 <scalbn+0x52>
 8012a30:	a32b      	add	r3, pc, #172	; (adr r3, 8012ae0 <scalbn+0xe0>)
 8012a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a36:	e03a      	b.n	8012aae <scalbn+0xae>
 8012a38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012a3c:	428a      	cmp	r2, r1
 8012a3e:	d10c      	bne.n	8012a5a <scalbn+0x5a>
 8012a40:	ee10 2a10 	vmov	r2, s0
 8012a44:	4620      	mov	r0, r4
 8012a46:	4629      	mov	r1, r5
 8012a48:	f7ed fc28 	bl	800029c <__adddf3>
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	460d      	mov	r5, r1
 8012a50:	e019      	b.n	8012a86 <scalbn+0x86>
 8012a52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012a56:	460b      	mov	r3, r1
 8012a58:	3a36      	subs	r2, #54	; 0x36
 8012a5a:	4432      	add	r2, r6
 8012a5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012a60:	428a      	cmp	r2, r1
 8012a62:	dd08      	ble.n	8012a76 <scalbn+0x76>
 8012a64:	2d00      	cmp	r5, #0
 8012a66:	a120      	add	r1, pc, #128	; (adr r1, 8012ae8 <scalbn+0xe8>)
 8012a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a6c:	da1c      	bge.n	8012aa8 <scalbn+0xa8>
 8012a6e:	a120      	add	r1, pc, #128	; (adr r1, 8012af0 <scalbn+0xf0>)
 8012a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a74:	e018      	b.n	8012aa8 <scalbn+0xa8>
 8012a76:	2a00      	cmp	r2, #0
 8012a78:	dd08      	ble.n	8012a8c <scalbn+0x8c>
 8012a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012a7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012a82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012a86:	ec45 4b10 	vmov	d0, r4, r5
 8012a8a:	bd70      	pop	{r4, r5, r6, pc}
 8012a8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012a90:	da19      	bge.n	8012ac6 <scalbn+0xc6>
 8012a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012a96:	429e      	cmp	r6, r3
 8012a98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012a9c:	dd0a      	ble.n	8012ab4 <scalbn+0xb4>
 8012a9e:	a112      	add	r1, pc, #72	; (adr r1, 8012ae8 <scalbn+0xe8>)
 8012aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d1e2      	bne.n	8012a6e <scalbn+0x6e>
 8012aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8012ae8 <scalbn+0xe8>)
 8012aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aae:	f7ed fdab 	bl	8000608 <__aeabi_dmul>
 8012ab2:	e7cb      	b.n	8012a4c <scalbn+0x4c>
 8012ab4:	a10a      	add	r1, pc, #40	; (adr r1, 8012ae0 <scalbn+0xe0>)
 8012ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d0b8      	beq.n	8012a30 <scalbn+0x30>
 8012abe:	a10e      	add	r1, pc, #56	; (adr r1, 8012af8 <scalbn+0xf8>)
 8012ac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ac4:	e7b4      	b.n	8012a30 <scalbn+0x30>
 8012ac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012aca:	3236      	adds	r2, #54	; 0x36
 8012acc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ad0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	4b0c      	ldr	r3, [pc, #48]	; (8012b08 <scalbn+0x108>)
 8012ad8:	2200      	movs	r2, #0
 8012ada:	e7e8      	b.n	8012aae <scalbn+0xae>
 8012adc:	f3af 8000 	nop.w
 8012ae0:	c2f8f359 	.word	0xc2f8f359
 8012ae4:	01a56e1f 	.word	0x01a56e1f
 8012ae8:	8800759c 	.word	0x8800759c
 8012aec:	7e37e43c 	.word	0x7e37e43c
 8012af0:	8800759c 	.word	0x8800759c
 8012af4:	fe37e43c 	.word	0xfe37e43c
 8012af8:	c2f8f359 	.word	0xc2f8f359
 8012afc:	81a56e1f 	.word	0x81a56e1f
 8012b00:	43500000 	.word	0x43500000
 8012b04:	ffff3cb0 	.word	0xffff3cb0
 8012b08:	3c900000 	.word	0x3c900000

08012b0c <atanf>:
 8012b0c:	b538      	push	{r3, r4, r5, lr}
 8012b0e:	ee10 5a10 	vmov	r5, s0
 8012b12:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8012b16:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012b1a:	eef0 7a40 	vmov.f32	s15, s0
 8012b1e:	db10      	blt.n	8012b42 <atanf+0x36>
 8012b20:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012b24:	dd04      	ble.n	8012b30 <atanf+0x24>
 8012b26:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8012b2e:	bd38      	pop	{r3, r4, r5, pc}
 8012b30:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8012c68 <atanf+0x15c>
 8012b34:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8012c6c <atanf+0x160>
 8012b38:	2d00      	cmp	r5, #0
 8012b3a:	bfd8      	it	le
 8012b3c:	eef0 7a40 	vmovle.f32	s15, s0
 8012b40:	e7f3      	b.n	8012b2a <atanf+0x1e>
 8012b42:	4b4b      	ldr	r3, [pc, #300]	; (8012c70 <atanf+0x164>)
 8012b44:	429c      	cmp	r4, r3
 8012b46:	dc10      	bgt.n	8012b6a <atanf+0x5e>
 8012b48:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012b4c:	da0a      	bge.n	8012b64 <atanf+0x58>
 8012b4e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8012c74 <atanf+0x168>
 8012b52:	ee30 7a07 	vadd.f32	s14, s0, s14
 8012b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012b5a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b62:	dce2      	bgt.n	8012b2a <atanf+0x1e>
 8012b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b68:	e013      	b.n	8012b92 <atanf+0x86>
 8012b6a:	f000 f8a3 	bl	8012cb4 <fabsf>
 8012b6e:	4b42      	ldr	r3, [pc, #264]	; (8012c78 <atanf+0x16c>)
 8012b70:	429c      	cmp	r4, r3
 8012b72:	dc4f      	bgt.n	8012c14 <atanf+0x108>
 8012b74:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8012b78:	429c      	cmp	r4, r3
 8012b7a:	dc41      	bgt.n	8012c00 <atanf+0xf4>
 8012b7c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8012b80:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012b84:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012b88:	2300      	movs	r3, #0
 8012b8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012b8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012b92:	1c5a      	adds	r2, r3, #1
 8012b94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8012b98:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8012c7c <atanf+0x170>
 8012b9c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8012c80 <atanf+0x174>
 8012ba0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8012c84 <atanf+0x178>
 8012ba4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8012ba8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8012bac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8012c88 <atanf+0x17c>
 8012bb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012bb4:	eddf 5a35 	vldr	s11, [pc, #212]	; 8012c8c <atanf+0x180>
 8012bb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012bbc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8012c90 <atanf+0x184>
 8012bc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8012bc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012c94 <atanf+0x188>
 8012bc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012bcc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8012c98 <atanf+0x18c>
 8012bd0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8012bd4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8012c9c <atanf+0x190>
 8012bd8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012bdc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8012ca0 <atanf+0x194>
 8012be0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8012be4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8012ca4 <atanf+0x198>
 8012be8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012bec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012bf0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8012bf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012bf8:	d121      	bne.n	8012c3e <atanf+0x132>
 8012bfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bfe:	e794      	b.n	8012b2a <atanf+0x1e>
 8012c00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c04:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012c08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012c12:	e7be      	b.n	8012b92 <atanf+0x86>
 8012c14:	4b24      	ldr	r3, [pc, #144]	; (8012ca8 <atanf+0x19c>)
 8012c16:	429c      	cmp	r4, r3
 8012c18:	dc0b      	bgt.n	8012c32 <atanf+0x126>
 8012c1a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012c1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012c22:	eea0 7a27 	vfma.f32	s14, s0, s15
 8012c26:	2302      	movs	r3, #2
 8012c28:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012c30:	e7af      	b.n	8012b92 <atanf+0x86>
 8012c32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8012c36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012c3a:	2303      	movs	r3, #3
 8012c3c:	e7a9      	b.n	8012b92 <atanf+0x86>
 8012c3e:	4a1b      	ldr	r2, [pc, #108]	; (8012cac <atanf+0x1a0>)
 8012c40:	491b      	ldr	r1, [pc, #108]	; (8012cb0 <atanf+0x1a4>)
 8012c42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012c46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012c4a:	ed93 0a00 	vldr	s0, [r3]
 8012c4e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012c52:	ed92 0a00 	vldr	s0, [r2]
 8012c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c5a:	2d00      	cmp	r5, #0
 8012c5c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012c60:	bfb8      	it	lt
 8012c62:	eef1 7a67 	vneglt.f32	s15, s15
 8012c66:	e760      	b.n	8012b2a <atanf+0x1e>
 8012c68:	3fc90fdb 	.word	0x3fc90fdb
 8012c6c:	bfc90fdb 	.word	0xbfc90fdb
 8012c70:	3edfffff 	.word	0x3edfffff
 8012c74:	7149f2ca 	.word	0x7149f2ca
 8012c78:	3f97ffff 	.word	0x3f97ffff
 8012c7c:	3c8569d7 	.word	0x3c8569d7
 8012c80:	3d4bda59 	.word	0x3d4bda59
 8012c84:	bd6ef16b 	.word	0xbd6ef16b
 8012c88:	3d886b35 	.word	0x3d886b35
 8012c8c:	3dba2e6e 	.word	0x3dba2e6e
 8012c90:	3e124925 	.word	0x3e124925
 8012c94:	3eaaaaab 	.word	0x3eaaaaab
 8012c98:	bd15a221 	.word	0xbd15a221
 8012c9c:	bd9d8795 	.word	0xbd9d8795
 8012ca0:	bde38e38 	.word	0xbde38e38
 8012ca4:	be4ccccd 	.word	0xbe4ccccd
 8012ca8:	401bffff 	.word	0x401bffff
 8012cac:	08013420 	.word	0x08013420
 8012cb0:	08013430 	.word	0x08013430

08012cb4 <fabsf>:
 8012cb4:	ee10 3a10 	vmov	r3, s0
 8012cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012cbc:	ee00 3a10 	vmov	s0, r3
 8012cc0:	4770      	bx	lr
	...

08012cc4 <nanf>:
 8012cc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012ccc <nanf+0x8>
 8012cc8:	4770      	bx	lr
 8012cca:	bf00      	nop
 8012ccc:	7fc00000 	.word	0x7fc00000

08012cd0 <_init>:
 8012cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd2:	bf00      	nop
 8012cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cd6:	bc08      	pop	{r3}
 8012cd8:	469e      	mov	lr, r3
 8012cda:	4770      	bx	lr

08012cdc <_fini>:
 8012cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cde:	bf00      	nop
 8012ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ce2:	bc08      	pop	{r3}
 8012ce4:	469e      	mov	lr, r3
 8012ce6:	4770      	bx	lr
