
sporadic_s_board_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a968  0800a968  0001a968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aebc  0800aebc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aebc  0800aebc  0001aebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aec4  0800aec4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aec4  0800aec4  0001aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec8  0800aec8  0001aec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800aecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001e0  0800b0a8  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800b0a8  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ae7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e91  00000000  00000000  00035cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00038b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  00039eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a16  00000000  00000000  0003b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ab8  00000000  00000000  00054ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000940fc  00000000  00000000  0006c586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006480  00000000  00000000  001006d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a950 	.word	0x0800a950

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800a950 	.word	0x0800a950

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <ADXL_init>:
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_adxl_i2c;
readings *_adxl_data;
uint16_t scale=0;
void ADXL_init(I2C_HandleTypeDef *i2c,readings *data){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	_adxl_i2c=i2c;
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <ADXL_init+0x54>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6013      	str	r3, [r2, #0]
	_adxl_data=data;
 8000f6c:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <ADXL_init+0x58>)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6013      	str	r3, [r2, #0]
	log_s_wnl("ADXL345 started---");
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <ADXL_init+0x5c>)
 8000f74:	f000 fa62 	bl	800143c <log_s_wnl>
	if(ADXL_ReadReg(ADXL345_DEVID)==229){
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f841 	bl	8001000 <ADXL_ReadReg>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2be5      	cmp	r3, #229	; 0xe5
 8000f82:	d103      	bne.n	8000f8c <ADXL_init+0x30>
		log_s("ok");
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <ADXL_init+0x60>)
 8000f86:	f000 fa37 	bl	80013f8 <log_s>
 8000f8a:	e002      	b.n	8000f92 <ADXL_init+0x36>
	}
	else{
		log_s("ERROR");
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <ADXL_init+0x64>)
 8000f8e:	f000 fa33 	bl	80013f8 <log_s>
	}
	_adxl_data->adxl345.scale=2*(1<<(7-ADXL_get_range()));
 8000f92:	f000 f873 	bl	800107c <ADXL_get_range>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f1c3 0307 	rsb	r3, r3, #7
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <ADXL_init+0x58>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	b292      	uxth	r2, r2
 8000fa6:	81da      	strh	r2, [r3, #14]
	//log_s_int("dev id=",ADXL_ReadReg(ADXL345_DEVID));
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	200001fc 	.word	0x200001fc
 8000fb4:	20000200 	.word	0x20000200
 8000fb8:	0800a968 	.word	0x0800a968
 8000fbc:	0800a97c 	.word	0x0800a97c
 8000fc0:	0800a980 	.word	0x0800a980

08000fc4 <ADXL_WriteReg>:




void ADXL_WriteReg(uint8_t reg, uint8_t cmd) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	733b      	strb	r3, [r7, #12]
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, arr, 2, 1000);
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <ADXL_WriteReg+0x38>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f107 020c 	add.w	r2, r7, #12
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2302      	movs	r3, #2
 8000fec:	21a6      	movs	r1, #166	; 0xa6
 8000fee:	f003 f94f 	bl	8004290 <HAL_I2C_Master_Transmit>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001fc 	.word	0x200001fc

08001000 <ADXL_ReadReg>:

uint8_t ADXL_ReadReg(uint8_t reg) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_adxl_i2c, ADXL_ADDR<<1, &reg, 1, 1000);
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <ADXL_ReadReg+0x40>)
 800100c:	6818      	ldr	r0, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	21a6      	movs	r1, #166	; 0xa6
 800101a:	f003 f939 	bl	8004290 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_adxl_i2c, ADXL_ADDR<<1, &result, 1, 1000);
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <ADXL_ReadReg+0x40>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	f107 020f 	add.w	r2, r7, #15
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	21a6      	movs	r1, #166	; 0xa6
 8001030:	f003 fa2c 	bl	800448c <HAL_I2C_Master_Receive>
	return result;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
	/*uint8_t result;
	HAL_I2C_Mem_Read (_adxl_i2c, ADXL_ADDR<<1, reg, 1, (uint8_t *)result, 1, 100);
	return result;*/
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001fc 	.word	0x200001fc

08001044 <ADXL_set_range>:
void ADXL_set_range(ADXLRANGE rng){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0x3)| rng);
 800104e:	2031      	movs	r0, #49	; 0x31
 8001050:	f7ff ffd6 	bl	8001000 <ADXL_ReadReg>
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4619      	mov	r1, r3
 8001058:	2031      	movs	r0, #49	; 0x31
 800105a:	f7ff ffb3 	bl	8000fc4 <ADXL_WriteReg>
	_adxl_data->adxl345.scale=2*(1<<(7-rng));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f1c3 0307 	rsb	r3, r3, #7
 8001064:	2202      	movs	r2, #2
 8001066:	409a      	lsls	r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <ADXL_set_range+0x34>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b292      	uxth	r2, r2
 800106e:	81da      	strh	r2, [r3, #14]
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000200 	.word	0x20000200

0800107c <ADXL_get_range>:

uint8_t ADXL_get_range(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	return ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)%4;
 8001080:	2031      	movs	r0, #49	; 0x31
 8001082:	f7ff ffbd 	bl	8001000 <ADXL_ReadReg>
 8001086:	4603      	mov	r3, r0
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	b2db      	uxtb	r3, r3
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}

08001092 <ADXL_set_rate>:

void ADXL_set_rate(ADXLBITRATE rate){
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	ADXL_WriteReg(ADXL345_REG_BW_RATE,(ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !0b111)| rate);
 800109c:	2031      	movs	r0, #49	; 0x31
 800109e:	f7ff ffaf 	bl	8001000 <ADXL_ReadReg>
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	202c      	movs	r0, #44	; 0x2c
 80010a8:	f7ff ff8c 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <ADXL_power>:
		case HZ3200:
			return 3200;
	}
}

void ADXL_power(uint8_t pw){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
	if(pw==1){
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d10b      	bne.n	80010dc <ADXL_power+0x28>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL)| ADXL345_BIT_PWR_REG_MEASURE);
 80010c4:	202d      	movs	r0, #45	; 0x2d
 80010c6:	f7ff ff9b 	bl	8001000 <ADXL_ReadReg>
 80010ca:	4603      	mov	r3, r0
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4619      	mov	r1, r3
 80010d4:	202d      	movs	r0, #45	; 0x2d
 80010d6:	f7ff ff75 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
	}
}
 80010da:	e006      	b.n	80010ea <ADXL_power+0x36>
		ADXL_WriteReg(ADXL345_REG_POWER_CTL,ADXL_ReadReg(ADXL345_REG_POWER_CTL) & !ADXL345_BIT_PWR_REG_MEASURE);
 80010dc:	202d      	movs	r0, #45	; 0x2d
 80010de:	f7ff ff8f 	bl	8001000 <ADXL_ReadReg>
 80010e2:	2100      	movs	r1, #0
 80010e4:	202d      	movs	r0, #45	; 0x2d
 80010e6:	f7ff ff6d 	bl	8000fc4 <ADXL_WriteReg>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <ADXL_full_res>:
void ADXL_full_res(uint8_t res){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
	if(res==1){
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d108      	bne.n	8001114 <ADXL_full_res+0x22>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT)| ADXL345_BIT_FULL_RES_SET);
 8001102:	2031      	movs	r0, #49	; 0x31
 8001104:	f7ff ff7c 	bl	8001000 <ADXL_ReadReg>
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	2031      	movs	r0, #49	; 0x31
 800110e:	f7ff ff59 	bl	8000fc4 <ADXL_WriteReg>
	}
	else{
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
	}
}
 8001112:	e00a      	b.n	800112a <ADXL_full_res+0x38>
		ADXL_WriteReg(ADXL345_REG_DATA_FORMAT,ADXL_ReadReg(ADXL345_REG_DATA_FORMAT) & !ADXL345_BIT_FULL_RES_SET);
 8001114:	2031      	movs	r0, #49	; 0x31
 8001116:	f7ff ff73 	bl	8001000 <ADXL_ReadReg>
 800111a:	4603      	mov	r3, r0
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	2031      	movs	r0, #49	; 0x31
 8001126:	f7ff ff4d 	bl	8000fc4 <ADXL_WriteReg>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <BMP180_init>:
const uint8_t BMP180_EEPROM_ADDR_LSB[11] = { 0xab, 0xad, 0xaf, 0xb1, 0xb3, 0xb5, 0xb7, 0xb9, 0xbb, 0xbd, 0xbf };

BMP180_SETTINGS _calib_data;
BMP180_REGS _regs;

void BMP180_init(I2C_HandleTypeDef *i2c,readings *data){
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	_bmp_i2c=i2c;
 800113e:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <BMP180_init+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6013      	str	r3, [r2, #0]
	_bmp_data=data;
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <BMP180_init+0x44>)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6013      	str	r3, [r2, #0]
	log_s_wnl("BMP180 started---");
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <BMP180_init+0x48>)
 800114c:	f000 f976 	bl	800143c <log_s_wnl>
	if (BMP180_ReadReg(BMP180_GET_ID_REG)==BMP180_CHIP_ID){
 8001150:	20d0      	movs	r0, #208	; 0xd0
 8001152:	f000 f819 	bl	8001188 <BMP180_ReadReg>
 8001156:	4603      	mov	r3, r0
 8001158:	2b55      	cmp	r3, #85	; 0x55
 800115a:	d103      	bne.n	8001164 <BMP180_init+0x30>
		log_s("ok");
 800115c:	4808      	ldr	r0, [pc, #32]	; (8001180 <BMP180_init+0x4c>)
 800115e:	f000 f94b 	bl	80013f8 <log_s>
	}
	else{
		log_s("ERROR");
	}
}
 8001162:	e002      	b.n	800116a <BMP180_init+0x36>
		log_s("ERROR");
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <BMP180_init+0x50>)
 8001166:	f000 f947 	bl	80013f8 <log_s>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000204 	.word	0x20000204
 8001178:	20000208 	.word	0x20000208
 800117c:	0800a988 	.word	0x0800a988
 8001180:	0800a99c 	.word	0x0800a99c
 8001184:	0800a9a0 	.word	0x0800a9a0

08001188 <BMP180_ReadReg>:
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
	uint8_t arr[2] = { reg, cmd };
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, arr, 2, 1000);
}

uint8_t BMP180_ReadReg(uint8_t reg) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_bmp_i2c, BMP180_ADDR << 1, &reg, 1, 1000);
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <BMP180_ReadReg+0x40>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2301      	movs	r3, #1
 80011a0:	21ee      	movs	r1, #238	; 0xee
 80011a2:	f003 f875 	bl	8004290 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp_i2c, BMP180_ADDR << 1, &result, 1, 1000);
 80011a6:	4b08      	ldr	r3, [pc, #32]	; (80011c8 <BMP180_ReadReg+0x40>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	f107 020f 	add.w	r2, r7, #15
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	21ee      	movs	r1, #238	; 0xee
 80011b8:	f003 f968 	bl	800448c <HAL_I2C_Master_Receive>
	return result;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000204 	.word	0x20000204

080011cc <BMP180_set_oss>:

int16_t _raw_t;
uint32_t _raw_p;

uint8_t _oss=0;
void BMP180_set_oss(uint8_t oss){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	71fb      	strb	r3, [r7, #7]
	_oss=oss;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <BMP180_set_oss+0x1c>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	7013      	strb	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000222 	.word	0x20000222

080011ec <BMP180_get_calibration_coefficients>:
		HAL_Delay (26);
	}
}

void BMP180_get_calibration_coefficients()
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	f5ad 7d57 	sub.w	sp, sp, #860	; 0x35c
 80011f2:	af0a      	add	r7, sp, #40	; 0x28
	_calib_data.AC1 = (BMP180_ReadReg(BMP180_AC1_MSB) << 8) | BMP180_ReadReg(BMP180_AC1_LSB);
 80011f4:	20aa      	movs	r0, #170	; 0xaa
 80011f6:	f7ff ffc7 	bl	8001188 <BMP180_ReadReg>
 80011fa:	4603      	mov	r3, r0
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21c      	sxth	r4, r3
 8001200:	20ab      	movs	r0, #171	; 0xab
 8001202:	f7ff ffc1 	bl	8001188 <BMP180_ReadReg>
 8001206:	4603      	mov	r3, r0
 8001208:	b21b      	sxth	r3, r3
 800120a:	4323      	orrs	r3, r4
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001210:	801a      	strh	r2, [r3, #0]
	_calib_data.AC2 = (BMP180_ReadReg(BMP180_AC2_MSB) << 8) | BMP180_ReadReg(BMP180_AC2_LSB);
 8001212:	20ac      	movs	r0, #172	; 0xac
 8001214:	f7ff ffb8 	bl	8001188 <BMP180_ReadReg>
 8001218:	4603      	mov	r3, r0
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21c      	sxth	r4, r3
 800121e:	20ad      	movs	r0, #173	; 0xad
 8001220:	f7ff ffb2 	bl	8001188 <BMP180_ReadReg>
 8001224:	4603      	mov	r3, r0
 8001226:	b21b      	sxth	r3, r3
 8001228:	4323      	orrs	r3, r4
 800122a:	b21a      	sxth	r2, r3
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800122e:	805a      	strh	r2, [r3, #2]
	_calib_data.AC3 = (BMP180_ReadReg(BMP180_AC3_MSB) << 8) | BMP180_ReadReg(BMP180_AC3_LSB);
 8001230:	20ae      	movs	r0, #174	; 0xae
 8001232:	f7ff ffa9 	bl	8001188 <BMP180_ReadReg>
 8001236:	4603      	mov	r3, r0
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21c      	sxth	r4, r3
 800123c:	20af      	movs	r0, #175	; 0xaf
 800123e:	f7ff ffa3 	bl	8001188 <BMP180_ReadReg>
 8001242:	4603      	mov	r3, r0
 8001244:	b21b      	sxth	r3, r3
 8001246:	4323      	orrs	r3, r4
 8001248:	b21a      	sxth	r2, r3
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800124c:	809a      	strh	r2, [r3, #4]
	_calib_data.AC4 = (BMP180_ReadReg(BMP180_AC4_MSB) << 8) | BMP180_ReadReg(BMP180_AC4_LSB);
 800124e:	20b0      	movs	r0, #176	; 0xb0
 8001250:	f7ff ff9a 	bl	8001188 <BMP180_ReadReg>
 8001254:	4603      	mov	r3, r0
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21c      	sxth	r4, r3
 800125a:	20b1      	movs	r0, #177	; 0xb1
 800125c:	f7ff ff94 	bl	8001188 <BMP180_ReadReg>
 8001260:	4603      	mov	r3, r0
 8001262:	b21b      	sxth	r3, r3
 8001264:	4323      	orrs	r3, r4
 8001266:	b21b      	sxth	r3, r3
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800126c:	80da      	strh	r2, [r3, #6]
	_calib_data.AC5 = (BMP180_ReadReg(BMP180_AC5_MSB) << 8) | BMP180_ReadReg(BMP180_AC5_LSB);
 800126e:	20b2      	movs	r0, #178	; 0xb2
 8001270:	f7ff ff8a 	bl	8001188 <BMP180_ReadReg>
 8001274:	4603      	mov	r3, r0
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21c      	sxth	r4, r3
 800127a:	20b3      	movs	r0, #179	; 0xb3
 800127c:	f7ff ff84 	bl	8001188 <BMP180_ReadReg>
 8001280:	4603      	mov	r3, r0
 8001282:	b21b      	sxth	r3, r3
 8001284:	4323      	orrs	r3, r4
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29a      	uxth	r2, r3
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800128c:	811a      	strh	r2, [r3, #8]
	_calib_data.AC6 = (BMP180_ReadReg(BMP180_AC6_MSB) << 8) | BMP180_ReadReg(BMP180_AC6_LSB);
 800128e:	20b4      	movs	r0, #180	; 0xb4
 8001290:	f7ff ff7a 	bl	8001188 <BMP180_ReadReg>
 8001294:	4603      	mov	r3, r0
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21c      	sxth	r4, r3
 800129a:	20b5      	movs	r0, #181	; 0xb5
 800129c:	f7ff ff74 	bl	8001188 <BMP180_ReadReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	b21b      	sxth	r3, r3
 80012a4:	4323      	orrs	r3, r4
 80012a6:	b21b      	sxth	r3, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 80012ac:	815a      	strh	r2, [r3, #10]
	_calib_data.B1 =  (BMP180_ReadReg(BMP180_B1_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 80012ae:	20b6      	movs	r0, #182	; 0xb6
 80012b0:	f7ff ff6a 	bl	8001188 <BMP180_ReadReg>
 80012b4:	4603      	mov	r3, r0
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21c      	sxth	r4, r3
 80012ba:	20b7      	movs	r0, #183	; 0xb7
 80012bc:	f7ff ff64 	bl	8001188 <BMP180_ReadReg>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4323      	orrs	r3, r4
 80012c6:	b21a      	sxth	r2, r3
 80012c8:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 80012ca:	819a      	strh	r2, [r3, #12]
	_calib_data.B2 =  (BMP180_ReadReg(BMP180_B2_MSB) << 8)  | BMP180_ReadReg(BMP180_B1_LSB);
 80012cc:	20b8      	movs	r0, #184	; 0xb8
 80012ce:	f7ff ff5b 	bl	8001188 <BMP180_ReadReg>
 80012d2:	4603      	mov	r3, r0
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21c      	sxth	r4, r3
 80012d8:	20b7      	movs	r0, #183	; 0xb7
 80012da:	f7ff ff55 	bl	8001188 <BMP180_ReadReg>
 80012de:	4603      	mov	r3, r0
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4323      	orrs	r3, r4
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 80012e8:	81da      	strh	r2, [r3, #14]
	_calib_data.MB =  (BMP180_ReadReg(BMP180_MB_MSB) << 8)  | BMP180_ReadReg(BMP180_MB_LSB);
 80012ea:	20ba      	movs	r0, #186	; 0xba
 80012ec:	f7ff ff4c 	bl	8001188 <BMP180_ReadReg>
 80012f0:	4603      	mov	r3, r0
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b21c      	sxth	r4, r3
 80012f6:	20bb      	movs	r0, #187	; 0xbb
 80012f8:	f7ff ff46 	bl	8001188 <BMP180_ReadReg>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b21b      	sxth	r3, r3
 8001300:	4323      	orrs	r3, r4
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001306:	821a      	strh	r2, [r3, #16]
	_calib_data.MC =  (BMP180_ReadReg(BMP180_MC_MSB) << 8)  | BMP180_ReadReg(BMP180_MC_LSB);
 8001308:	20bc      	movs	r0, #188	; 0xbc
 800130a:	f7ff ff3d 	bl	8001188 <BMP180_ReadReg>
 800130e:	4603      	mov	r3, r0
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21c      	sxth	r4, r3
 8001314:	20bd      	movs	r0, #189	; 0xbd
 8001316:	f7ff ff37 	bl	8001188 <BMP180_ReadReg>
 800131a:	4603      	mov	r3, r0
 800131c:	b21b      	sxth	r3, r3
 800131e:	4323      	orrs	r3, r4
 8001320:	b21a      	sxth	r2, r3
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001324:	825a      	strh	r2, [r3, #18]
	_calib_data.MD =  (BMP180_ReadReg(BMP180_MD_MSB) << 8)  | BMP180_ReadReg(BMP180_MD_LSB);
 8001326:	20be      	movs	r0, #190	; 0xbe
 8001328:	f7ff ff2e 	bl	8001188 <BMP180_ReadReg>
 800132c:	4603      	mov	r3, r0
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21c      	sxth	r4, r3
 8001332:	20bf      	movs	r0, #191	; 0xbf
 8001334:	f7ff ff28 	bl	8001188 <BMP180_ReadReg>
 8001338:	4603      	mov	r3, r0
 800133a:	b21b      	sxth	r3, r3
 800133c:	4323      	orrs	r3, r4
 800133e:	b21a      	sxth	r2, r3
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001342:	829a      	strh	r2, [r3, #20]
	char* test[200];
	sprintf((char*)test,"Calib coef:%d %d %d %d %d %d %d %d %d %d %d",_calib_data.AC1,_calib_data.AC2,_calib_data.AC3,_calib_data.AC4,_calib_data.AC5,_calib_data.AC6,_calib_data.B1,_calib_data.B1,_calib_data.MB,_calib_data.MC,_calib_data.MD);
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	469c      	mov	ip, r3
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800134e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001352:	469e      	mov	lr, r3
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001356:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800135a:	461a      	mov	r2, r3
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800135e:	88db      	ldrh	r3, [r3, #6]
 8001360:	4619      	mov	r1, r3
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001364:	891b      	ldrh	r3, [r3, #8]
 8001366:	461c      	mov	r4, r3
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 800136a:	895b      	ldrh	r3, [r3, #10]
 800136c:	461d      	mov	r5, r3
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001370:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001374:	461e      	mov	r6, r3
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001378:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001380:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001388:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <BMP180_get_calibration_coefficients+0x1e4>)
 8001390:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001394:	f107 0010 	add.w	r0, r7, #16
 8001398:	9308      	str	r3, [sp, #32]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	9307      	str	r3, [sp, #28]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	9306      	str	r3, [sp, #24]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	9305      	str	r3, [sp, #20]
 80013a6:	9604      	str	r6, [sp, #16]
 80013a8:	9503      	str	r5, [sp, #12]
 80013aa:	9402      	str	r4, [sp, #8]
 80013ac:	9101      	str	r1, [sp, #4]
 80013ae:	9200      	str	r2, [sp, #0]
 80013b0:	4673      	mov	r3, lr
 80013b2:	4662      	mov	r2, ip
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <BMP180_get_calibration_coefficients+0x1e8>)
 80013b6:	f006 fd9b 	bl	8007ef0 <siprintf>
	log_s(test);
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f81a 	bl	80013f8 <log_s>
}
 80013c4:	bf00      	nop
 80013c6:	f507 774d 	add.w	r7, r7, #820	; 0x334
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000020c 	.word	0x2000020c
 80013d4:	0800a9a8 	.word	0x0800a9a8

080013d8 <debug_init>:
#include "debug.h"
#include <stdio.h>
UART_HandleTypeDef *_dbg_uart;

void debug_init(UART_HandleTypeDef *uart){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	_dbg_uart=uart;
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <debug_init+0x1c>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000224 	.word	0x20000224

080013f8 <log_s>:



void log_s(const char *str){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <log_s+0x3c>)
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7fe feeb 	bl	80001e0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	b29a      	uxth	r2, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	4620      	mov	r0, r4
 8001416:	f005 fd26 	bl	8006e66 <HAL_UART_Transmit>
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)"\r\n",2,1000);
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <log_s+0x3c>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001422:	2202      	movs	r2, #2
 8001424:	4904      	ldr	r1, [pc, #16]	; (8001438 <log_s+0x40>)
 8001426:	f005 fd1e 	bl	8006e66 <HAL_UART_Transmit>
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bd90      	pop	{r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000224 	.word	0x20000224
 8001438:	0800a9d4 	.word	0x0800a9d4

0800143c <log_s_wnl>:

void log_s_wnl(const char *str){
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(_dbg_uart,(uint8_t*)str,strlen(str),1000);
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <log_s_wnl+0x2c>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7fe fec9 	bl	80001e0 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29a      	uxth	r2, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4620      	mov	r0, r4
 800145a:	f005 fd04 	bl	8006e66 <HAL_UART_Transmit>
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bd90      	pop	{r4, r7, pc}
 8001466:	bf00      	nop
 8001468:	20000224 	.word	0x20000224

0800146c <log_s_int>:
char* char_log[50];
void log_s_int(const char *str,int32_t i){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
	sprintf((char*)char_log,"%s %ld\r\n",str,i);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4905      	ldr	r1, [pc, #20]	; (8001490 <log_s_int+0x24>)
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <log_s_int+0x28>)
 800147e:	f006 fd37 	bl	8007ef0 <siprintf>
	log_s_wnl((const char*)char_log);
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <log_s_int+0x28>)
 8001484:	f7ff ffda 	bl	800143c <log_s_wnl>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0800a9d8 	.word	0x0800a9d8
 8001494:	20000228 	.word	0x20000228

08001498 <log_p>:
void log_p(int16_t *data_p){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	sprintf((char*)char_log,"%p\r\n",data_p);
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4905      	ldr	r1, [pc, #20]	; (80014b8 <log_p+0x20>)
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <log_p+0x24>)
 80014a6:	f006 fd23 	bl	8007ef0 <siprintf>
	log_s_wnl((const char*)char_log);
 80014aa:	4804      	ldr	r0, [pc, #16]	; (80014bc <log_p+0x24>)
 80014ac:	f7ff ffc6 	bl	800143c <log_s_wnl>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800a9e4 	.word	0x0800a9e4
 80014bc:	20000228 	.word	0x20000228

080014c0 <log_p_imu>:
void log_p_imu(float *data_p){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
	sprintf((char*)char_log,"%p %p %p\r\n",data_p,data_p+1,data_p+2);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	1d1a      	adds	r2, r3, #4
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3308      	adds	r3, #8
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4905      	ldr	r1, [pc, #20]	; (80014ec <log_p_imu+0x2c>)
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <log_p_imu+0x30>)
 80014da:	f006 fd09 	bl	8007ef0 <siprintf>
	log_s_wnl((const char*)char_log);
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <log_p_imu+0x30>)
 80014e0:	f7ff ffac 	bl	800143c <log_s_wnl>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	0800a9ec 	.word	0x0800a9ec
 80014f0:	20000228 	.word	0x20000228

080014f4 <GY801_init>:
#include "gy801.h"
#include <stdio.h>
#include <math.h>
readings *_data_gy;
void GY801_init(I2C_HandleTypeDef *i2c,readings *data){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	//_i2c=i2c;
	_data_gy=data;
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <GY801_init+0x60>)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6013      	str	r3, [r2, #0]
	ADXL_init(i2c,data);
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fd28 	bl	8000f5c <ADXL_init>
	ADXL_set_range(RANGE_2G);
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff fd99 	bl	8001044 <ADXL_set_range>
	ADXL_full_res(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f7ff fded 	bl	80010f2 <ADXL_full_res>
	ADXL_set_rate(HZ100);
 8001518:	200a      	movs	r0, #10
 800151a:	f7ff fdba 	bl	8001092 <ADXL_set_rate>
	ADXL_power(1);
 800151e:	2001      	movs	r0, #1
 8001520:	f7ff fdc8 	bl	80010b4 <ADXL_power>
	BMP180_init(i2c,data);
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff fe04 	bl	8001134 <BMP180_init>
	BMP180_set_oss(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fe4d 	bl	80011cc <BMP180_set_oss>
	BMP180_get_calibration_coefficients();
 8001532:	f7ff fe5b 	bl	80011ec <BMP180_get_calibration_coefficients>
	GYRO_init(i2c,data);
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f817 	bl	800156c <GYRO_init>
	GYRO_power(1);
 800153e:	2001      	movs	r0, #1
 8001540:	f000 f88a 	bl	8001658 <GYRO_power>
	mag_init(i2c,data);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f8d0 	bl	80016ec <mag_init>


}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200002f0 	.word	0x200002f0

08001558 <GY801_update_data>:

void GY801_update_data(){
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/*BMP180_get_data();
	BMP180_upd_data();
	ADXL_get_data();*/
	GYRO_get_data();
 800155c:	f000 f890 	bl	8001680 <GYRO_get_data>
	//mag_get_data();
	lsm303dlhc_get_acc();
 8001560:	f000 f95e 	bl	8001820 <lsm303dlhc_get_acc>
	lsm303dlhc_get_mag();
 8001564:	f000 f998 	bl	8001898 <lsm303dlhc_get_mag>
	//sprintf((char*)gy_data,"X:%06d Y:%06d Z:%06d",_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	//sprintf((char*)gy_data,"%ld;%ld;%ld.%ld;%d;%d;%d;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),_data_gy->bmp180.pressure,_data_gy->bmp180.temp/10,_data_gy->bmp180.temp%10,_data_gy->adxl345.ax,_data_gy->adxl345.ay,_data_gy->adxl345.az,(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx,_data_gy->lsm303dlhc_mag.my,_data_gy->lsm303dlhc_mag.mz);
	sprintf((char*)gy_data,"%ld;%f;%f;%f;%f;%f;%f;%f;%f;%f|",HAL_GetTick(),(float)_data_gy->l3g4200d.gx*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gy*M_PI/180/ 131.0,(float)_data_gy->l3g4200d.gz*M_PI/180/ 131.0,(float)_data_gy->lsm303dlhc.ax*21.5625,(float)_data_gy->lsm303dlhc.ay*21.5625,(float)_data_gy->lsm303dlhc.az*21.5625,_data_gy->lsm303dlhc_mag.mx*0.1388,_data_gy->lsm303dlhc_mag.my*0.1388,_data_gy->lsm303dlhc_mag.mz*0.1388);
	log_s((char*)gy_data);*/

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}

0800156c <GYRO_init>:
#include "math.h"
#include "stdio.h"
#include "string.h"
I2C_HandleTypeDef *_gyro_i2c;
readings *_gyro_data;
void GYRO_init(I2C_HandleTypeDef *i2c,readings *data){
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	_gyro_i2c=i2c;
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <GYRO_init+0x58>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6013      	str	r3, [r2, #0]
	_gyro_data=data;
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <GYRO_init+0x5c>)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	6013      	str	r3, [r2, #0]
	log_s_wnl("L3G4200D started---");
 8001582:	4812      	ldr	r0, [pc, #72]	; (80015cc <GYRO_init+0x60>)
 8001584:	f7ff ff5a 	bl	800143c <log_s_wnl>
	if(GYRO_ReadReg(GYRO_REG_DEVID)==211){
 8001588:	200f      	movs	r0, #15
 800158a:	f000 f843 	bl	8001614 <GYRO_ReadReg>
 800158e:	4603      	mov	r3, r0
 8001590:	2bd3      	cmp	r3, #211	; 0xd3
 8001592:	d103      	bne.n	800159c <GYRO_init+0x30>
		log_s("ok");
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <GYRO_init+0x64>)
 8001596:	f7ff ff2f 	bl	80013f8 <log_s>
 800159a:	e002      	b.n	80015a2 <GYRO_init+0x36>
	}
	else{
		log_s("ERROR");
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <GYRO_init+0x68>)
 800159e:	f7ff ff2b 	bl	80013f8 <log_s>
	}
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,0b11111111);
 80015a2:	21ff      	movs	r1, #255	; 0xff
 80015a4:	2020      	movs	r0, #32
 80015a6:	f000 f817 	bl	80015d8 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG2,0b0010000);
 80015aa:	2110      	movs	r1, #16
 80015ac:	2021      	movs	r0, #33	; 0x21
 80015ae:	f000 f813 	bl	80015d8 <GYRO_WriteReg>
	GYRO_WriteReg(GYRO_REG_CTRL_REG4,0b00110000);
 80015b2:	2130      	movs	r1, #48	; 0x30
 80015b4:	2023      	movs	r0, #35	; 0x23
 80015b6:	f000 f80f 	bl	80015d8 <GYRO_WriteReg>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200002f4 	.word	0x200002f4
 80015c8:	200002f8 	.word	0x200002f8
 80015cc:	0800aa10 	.word	0x0800aa10
 80015d0:	0800aa24 	.word	0x0800aa24
 80015d4:	0800aa28 	.word	0x0800aa28

080015d8 <GYRO_WriteReg>:

void GYRO_WriteReg(uint8_t reg, uint8_t cmd) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
	uint8_t arr[2] = { reg, cmd };
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	733b      	strb	r3, [r7, #12]
 80015ec:	79bb      	ldrb	r3, [r7, #6]
 80015ee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, arr, 2, 1000);
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <GYRO_WriteReg+0x38>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f107 020c 	add.w	r2, r7, #12
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2302      	movs	r3, #2
 8001600:	21d2      	movs	r1, #210	; 0xd2
 8001602:	f002 fe45 	bl	8004290 <HAL_I2C_Master_Transmit>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200002f4 	.word	0x200002f4

08001614 <GYRO_ReadReg>:

uint8_t GYRO_ReadReg(uint8_t reg) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af02      	add	r7, sp, #8
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(_gyro_i2c, GYRO_ADDR<<1, &reg, 1, 1000);
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <GYRO_ReadReg+0x40>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	1dfa      	adds	r2, r7, #7
 8001624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	21d2      	movs	r1, #210	; 0xd2
 800162e:	f002 fe2f 	bl	8004290 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_gyro_i2c, GYRO_ADDR<<1, &result, 1, 1000);
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <GYRO_ReadReg+0x40>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f107 020f 	add.w	r2, r7, #15
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2301      	movs	r3, #1
 8001642:	21d2      	movs	r1, #210	; 0xd2
 8001644:	f002 ff22 	bl	800448c <HAL_I2C_Master_Receive>
	return result;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002f4 	.word	0x200002f4

08001658 <GYRO_power>:

void GYRO_power(uint8_t pwr){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
	GYRO_WriteReg(GYRO_REG_CTRL_REG1,pwr?0x0F:0x00);
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <GYRO_power+0x14>
 8001668:	230f      	movs	r3, #15
 800166a:	e000      	b.n	800166e <GYRO_power+0x16>
 800166c:	2300      	movs	r3, #0
 800166e:	4619      	mov	r1, r3
 8001670:	2020      	movs	r0, #32
 8001672:	f7ff ffb1 	bl	80015d8 <GYRO_WriteReg>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <GYRO_get_data>:

void GYRO_get_data(){
 8001680:	b598      	push	{r3, r4, r7, lr}
 8001682:	af00      	add	r7, sp, #0
	_gyro_data->l3g4200d.gx=((GYRO_ReadReg(0x29)<<8)|GYRO_ReadReg(0x28));
 8001684:	2029      	movs	r0, #41	; 0x29
 8001686:	f7ff ffc5 	bl	8001614 <GYRO_ReadReg>
 800168a:	4603      	mov	r3, r0
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b21c      	sxth	r4, r3
 8001690:	2028      	movs	r0, #40	; 0x28
 8001692:	f7ff ffbf 	bl	8001614 <GYRO_ReadReg>
 8001696:	4603      	mov	r3, r0
 8001698:	b21a      	sxth	r2, r3
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <GYRO_get_data+0x68>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4322      	orrs	r2, r4
 80016a0:	b212      	sxth	r2, r2
 80016a2:	831a      	strh	r2, [r3, #24]
	_gyro_data->l3g4200d.gy=((GYRO_ReadReg(0x2B)<<8)|GYRO_ReadReg(0x2A));
 80016a4:	202b      	movs	r0, #43	; 0x2b
 80016a6:	f7ff ffb5 	bl	8001614 <GYRO_ReadReg>
 80016aa:	4603      	mov	r3, r0
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	b21c      	sxth	r4, r3
 80016b0:	202a      	movs	r0, #42	; 0x2a
 80016b2:	f7ff ffaf 	bl	8001614 <GYRO_ReadReg>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <GYRO_get_data+0x68>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4322      	orrs	r2, r4
 80016c0:	b212      	sxth	r2, r2
 80016c2:	835a      	strh	r2, [r3, #26]
	_gyro_data->l3g4200d.gz=((GYRO_ReadReg(0x2D)<<8)|GYRO_ReadReg(0x2C));
 80016c4:	202d      	movs	r0, #45	; 0x2d
 80016c6:	f7ff ffa5 	bl	8001614 <GYRO_ReadReg>
 80016ca:	4603      	mov	r3, r0
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	b21c      	sxth	r4, r3
 80016d0:	202c      	movs	r0, #44	; 0x2c
 80016d2:	f7ff ff9f 	bl	8001614 <GYRO_ReadReg>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <GYRO_get_data+0x68>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4322      	orrs	r2, r4
 80016e0:	b212      	sxth	r2, r2
 80016e2:	839a      	strh	r2, [r3, #28]
}
 80016e4:	bf00      	nop
 80016e6:	bd98      	pop	{r3, r4, r7, pc}
 80016e8:	200002f8 	.word	0x200002f8

080016ec <mag_init>:
#include "lsm303dlhc.h"
I2C_HandleTypeDef *_mag_i2c;
readings *_mag_data;
void mag_init(I2C_HandleTypeDef *i2c,readings *data){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	_mag_i2c=i2c;
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <mag_init+0x7c>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6013      	str	r3, [r2, #0]
	_mag_data=data;
 80016fc:	4a1b      	ldr	r2, [pc, #108]	; (800176c <mag_init+0x80>)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	6013      	str	r3, [r2, #0]
	log_s_wnl("LSM303DLHC started---");
 8001702:	481b      	ldr	r0, [pc, #108]	; (8001770 <mag_init+0x84>)
 8001704:	f7ff fe9a 	bl	800143c <log_s_wnl>
	if(mag_read_data(1,LSM303DLHC_REG_WHOAMI)==0x33){
 8001708:	210f      	movs	r1, #15
 800170a:	2001      	movs	r0, #1
 800170c:	f000 f836 	bl	800177c <mag_read_data>
 8001710:	4603      	mov	r3, r0
 8001712:	2b33      	cmp	r3, #51	; 0x33
 8001714:	d121      	bne.n	800175a <mag_init+0x6e>
		log_s("ok");
 8001716:	4817      	ldr	r0, [pc, #92]	; (8001774 <mag_init+0x88>)
 8001718:	f7ff fe6e 	bl	80013f8 <log_s>
	else{
		log_s("ERROR");
		return;
	}
	/* accel config */
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG1_A,0b01110111);
 800171c:	2277      	movs	r2, #119	; 0x77
 800171e:	2120      	movs	r1, #32
 8001720:	2001      	movs	r0, #1
 8001722:	f000 f859 	bl	80017d8 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG2_A,0b10010000);
 8001726:	2290      	movs	r2, #144	; 0x90
 8001728:	2121      	movs	r1, #33	; 0x21
 800172a:	2001      	movs	r0, #1
 800172c:	f000 f854 	bl	80017d8 <mag_write_data>
	mag_write_data(1,LSM303DLHC_REG_CTRL_REG4_A,0b00111000);
 8001730:	2238      	movs	r2, #56	; 0x38
 8001732:	2123      	movs	r1, #35	; 0x23
 8001734:	2001      	movs	r0, #1
 8001736:	f000 f84f 	bl	80017d8 <mag_write_data>
	/* mag config */
	mag_write_data(0,LSM303DLHC_REG_CRA_REG_M,0b00011100);
 800173a:	221c      	movs	r2, #28
 800173c:	2100      	movs	r1, #0
 800173e:	2000      	movs	r0, #0
 8001740:	f000 f84a 	bl	80017d8 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_CRB_REG_M,0b10000000);
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	2101      	movs	r1, #1
 8001748:	2000      	movs	r0, #0
 800174a:	f000 f845 	bl	80017d8 <mag_write_data>
	mag_write_data(0,LSM303DLHC_REG_MR_REG_M,0b00000000);
 800174e:	2200      	movs	r2, #0
 8001750:	2102      	movs	r1, #2
 8001752:	2000      	movs	r0, #0
 8001754:	f000 f840 	bl	80017d8 <mag_write_data>
 8001758:	e003      	b.n	8001762 <mag_init+0x76>
		log_s("ERROR");
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <mag_init+0x8c>)
 800175c:	f7ff fe4c 	bl	80013f8 <log_s>
		return;
 8001760:	bf00      	nop
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200002fc 	.word	0x200002fc
 800176c:	20000300 	.word	0x20000300
 8001770:	0800aa30 	.word	0x0800aa30
 8001774:	0800aa48 	.word	0x0800aa48
 8001778:	0800aa4c 	.word	0x0800aa4c

0800177c <mag_read_data>:


uint8_t mag_read_data(uint8_t type,uint8_t reg){
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af04      	add	r7, sp, #16
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
	//log_s_int("addr",((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1);
	uint8_t result;
	HAL_I2C_Mem_Read(_mag_i2c, (((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1)+!type, reg, I2C_MEMADD_SIZE_8BIT, &result, 1, 1000);
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <mag_read_data+0x58>)
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <mag_read_data+0x1e>
 8001796:	2232      	movs	r2, #50	; 0x32
 8001798:	e000      	b.n	800179c <mag_read_data+0x20>
 800179a:	223c      	movs	r2, #60	; 0x3c
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	4413      	add	r3, r2
 80017ac:	b299      	uxth	r1, r3
 80017ae:	79bb      	ldrb	r3, [r7, #6]
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017b6:	9302      	str	r3, [sp, #8]
 80017b8:	2301      	movs	r3, #1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	f107 030f 	add.w	r3, r7, #15
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2301      	movs	r3, #1
 80017c4:	f003 f982 	bl	8004acc <HAL_I2C_Mem_Read>
	return result;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002fc 	.word	0x200002fc

080017d8 <mag_write_data>:
void mag_write_data(uint8_t type,uint8_t reg, uint8_t cmd){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af04      	add	r7, sp, #16
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
 80017e2:	460b      	mov	r3, r1
 80017e4:	71bb      	strb	r3, [r7, #6]
 80017e6:	4613      	mov	r3, r2
 80017e8:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(_mag_i2c, ((type)?LSM303DLHC_ACCEL_ADDR:LSM303DLHC_MAG_ADDR)<<1, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 1000);
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <mag_write_data+0x44>)
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <mag_write_data+0x20>
 80017f4:	2132      	movs	r1, #50	; 0x32
 80017f6:	e000      	b.n	80017fa <mag_write_data+0x22>
 80017f8:	213c      	movs	r1, #60	; 0x3c
 80017fa:	79bb      	ldrb	r3, [r7, #6]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	2301      	movs	r3, #1
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	1d7b      	adds	r3, r7, #5
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	f003 f863 	bl	80048d8 <HAL_I2C_Mem_Write>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200002fc 	.word	0x200002fc

08001820 <lsm303dlhc_get_acc>:

void lsm303dlhc_get_acc(){
 8001820:	b598      	push	{r3, r4, r7, lr}
 8001822:	af00      	add	r7, sp, #0
	//uint32_t tm=HAL_GetTick();
	_mag_data->lsm303dlhc.ax=((mag_read_data(1,LSM303DLHC_REG_OUT_X_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_X_L_A));
 8001824:	2129      	movs	r1, #41	; 0x29
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff ffa8 	bl	800177c <mag_read_data>
 800182c:	4603      	mov	r3, r0
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21c      	sxth	r4, r3
 8001832:	2128      	movs	r1, #40	; 0x28
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff ffa1 	bl	800177c <mag_read_data>
 800183a:	4603      	mov	r3, r0
 800183c:	b21a      	sxth	r2, r3
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <lsm303dlhc_get_acc+0x74>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4322      	orrs	r2, r4
 8001844:	b212      	sxth	r2, r2
 8001846:	821a      	strh	r2, [r3, #16]
	_mag_data->lsm303dlhc.ay=((mag_read_data(1,LSM303DLHC_REG_OUT_Y_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Y_L_A));
 8001848:	212b      	movs	r1, #43	; 0x2b
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff ff96 	bl	800177c <mag_read_data>
 8001850:	4603      	mov	r3, r0
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	b21c      	sxth	r4, r3
 8001856:	212a      	movs	r1, #42	; 0x2a
 8001858:	2001      	movs	r0, #1
 800185a:	f7ff ff8f 	bl	800177c <mag_read_data>
 800185e:	4603      	mov	r3, r0
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <lsm303dlhc_get_acc+0x74>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4322      	orrs	r2, r4
 8001868:	b212      	sxth	r2, r2
 800186a:	825a      	strh	r2, [r3, #18]
	_mag_data->lsm303dlhc.az=((mag_read_data(1,LSM303DLHC_REG_OUT_Z_H_A)<<8)|mag_read_data(1,LSM303DLHC_REG_OUT_Z_L_A));
 800186c:	212d      	movs	r1, #45	; 0x2d
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff ff84 	bl	800177c <mag_read_data>
 8001874:	4603      	mov	r3, r0
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	b21c      	sxth	r4, r3
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff ff7d 	bl	800177c <mag_read_data>
 8001882:	4603      	mov	r3, r0
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b03      	ldr	r3, [pc, #12]	; (8001894 <lsm303dlhc_get_acc+0x74>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4322      	orrs	r2, r4
 800188c:	b212      	sxth	r2, r2
 800188e:	829a      	strh	r2, [r3, #20]
	//log_s_int("ACCEL",HAL_GetTick()-tm);
}
 8001890:	bf00      	nop
 8001892:	bd98      	pop	{r3, r4, r7, pc}
 8001894:	20000300 	.word	0x20000300

08001898 <lsm303dlhc_get_mag>:
void lsm303dlhc_get_mag(){
 8001898:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800189c:	af00      	add	r7, sp, #0
		for(i=0;i<3;i++)
		{
			log_s_int("v",((uint16_t)((uint16_t)buffer[2*i]<<8)+buffer[2*i+1]));
		}*/
	//uint32_t tb=HAL_GetTick();
	_mag_data->lsm303dlhc_mag.mx_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_X_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_X_L_M));
 800189e:	2103      	movs	r1, #3
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff6b 	bl	800177c <mag_read_data>
 80018a6:	4603      	mov	r3, r0
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b29c      	uxth	r4, r3
 80018ae:	2104      	movs	r1, #4
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff ff63 	bl	800177c <mag_read_data>
 80018b6:	4603      	mov	r3, r0
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4323      	orrs	r3, r4
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4bb2      	ldr	r3, [pc, #712]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	b212      	sxth	r2, r2
 80018c4:	841a      	strh	r2, [r3, #32]
	_mag_data->lsm303dlhc_mag.my_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Y_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Y_L_M));
 80018c6:	2107      	movs	r1, #7
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff ff57 	bl	800177c <mag_read_data>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	021b      	lsls	r3, r3, #8
 80018d4:	b29c      	uxth	r4, r3
 80018d6:	2108      	movs	r1, #8
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ff4f 	bl	800177c <mag_read_data>
 80018de:	4603      	mov	r3, r0
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4323      	orrs	r3, r4
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	4ba8      	ldr	r3, [pc, #672]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b212      	sxth	r2, r2
 80018ec:	845a      	strh	r2, [r3, #34]	; 0x22
	_mag_data->lsm303dlhc_mag.mz_raw=(uint16_t)((uint16_t)(mag_read_data(0,LSM303DLHC_REG_OUT_Z_H_M)<<8)|mag_read_data(0,LSM303DLHC_REG_OUT_Z_L_M));
 80018ee:	2105      	movs	r1, #5
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff ff43 	bl	800177c <mag_read_data>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b29c      	uxth	r4, r3
 80018fe:	2106      	movs	r1, #6
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff ff3b 	bl	800177c <mag_read_data>
 8001906:	4603      	mov	r3, r0
 8001908:	b29b      	uxth	r3, r3
 800190a:	4323      	orrs	r3, r4
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b212      	sxth	r2, r2
 8001914:	849a      	strh	r2, [r3, #36]	; 0x24
	_mag_data->lsm303dlhc_mag.mx=4.383713*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.021545*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+-0.077899*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8001916:	4b9c      	ldr	r3, [pc, #624]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe08 	bl	8000534 <__aeabi_i2d>
 8001924:	a384      	add	r3, pc, #528	; (adr r3, 8001b38 <lsm303dlhc_get_mag+0x2a0>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fcb7 	bl	800029c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	a382      	add	r3, pc, #520	; (adr r3, 8001b40 <lsm303dlhc_get_mag+0x2a8>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fe64 	bl	8000608 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4614      	mov	r4, r2
 8001946:	461d      	mov	r5, r3
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fdef 	bl	8000534 <__aeabi_i2d>
 8001956:	a37c      	add	r3, pc, #496	; (adr r3, 8001b48 <lsm303dlhc_get_mag+0x2b0>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe fc9c 	bl	8000298 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	a379      	add	r3, pc, #484	; (adr r3, 8001b50 <lsm303dlhc_get_mag+0x2b8>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fe4b 	bl	8000608 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fc8f 	bl	800029c <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4690      	mov	r8, r2
 8001984:	4699      	mov	r9, r3
 8001986:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdd0 	bl	8000534 <__aeabi_i2d>
 8001994:	a370      	add	r3, pc, #448	; (adr r3, 8001b58 <lsm303dlhc_get_mag+0x2c0>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fc7d 	bl	8000298 <__aeabi_dsub>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	a36e      	add	r3, pc, #440	; (adr r3, 8001b60 <lsm303dlhc_get_mag+0x2c8>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe2c 	bl	8000608 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4974      	ldr	r1, [pc, #464]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 80019b6:	680c      	ldr	r4, [r1, #0]
 80019b8:	4640      	mov	r0, r8
 80019ba:	4649      	mov	r1, r9
 80019bc:	f7fe fc6e 	bl	800029c <__adddf3>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
	_mag_data->lsm303dlhc_mag.my=0.021545*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+4.431516*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+0.225705*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 80019c8:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fdaf 	bl	8000534 <__aeabi_i2d>
 80019d6:	a358      	add	r3, pc, #352	; (adr r3, 8001b38 <lsm303dlhc_get_mag+0x2a0>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fc5e 	bl	800029c <__adddf3>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	a359      	add	r3, pc, #356	; (adr r3, 8001b50 <lsm303dlhc_get_mag+0x2b8>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fe0b 	bl	8000608 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	461d      	mov	r5, r3
 80019fa:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe fd96 	bl	8000534 <__aeabi_i2d>
 8001a08:	a34f      	add	r3, pc, #316	; (adr r3, 8001b48 <lsm303dlhc_get_mag+0x2b0>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fc43 	bl	8000298 <__aeabi_dsub>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	a353      	add	r3, pc, #332	; (adr r3, 8001b68 <lsm303dlhc_get_mag+0x2d0>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fdf2 	bl	8000608 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fc36 	bl	800029c <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4690      	mov	r8, r2
 8001a36:	4699      	mov	r9, r3
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fd77 	bl	8000534 <__aeabi_i2d>
 8001a46:	a344      	add	r3, pc, #272	; (adr r3, 8001b58 <lsm303dlhc_get_mag+0x2c0>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fc24 	bl	8000298 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	a345      	add	r3, pc, #276	; (adr r3, 8001b70 <lsm303dlhc_get_mag+0x2d8>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fdd3 	bl	8000608 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4948      	ldr	r1, [pc, #288]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001a68:	680c      	ldr	r4, [r1, #0]
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	f7fe fc15 	bl	800029c <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
	_mag_data->lsm303dlhc_mag.mz=-0.077899*(_mag_data->lsm303dlhc_mag.mx_raw+43.206892)+0.066753*(_mag_data->lsm303dlhc_mag.my_raw+-25.655564)+5.335236*(_mag_data->lsm303dlhc_mag.mz_raw+-0.569458);
 8001a7a:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd56 	bl	8000534 <__aeabi_i2d>
 8001a88:	a32b      	add	r3, pc, #172	; (adr r3, 8001b38 <lsm303dlhc_get_mag+0x2a0>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fc05 	bl	800029c <__adddf3>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	a331      	add	r3, pc, #196	; (adr r3, 8001b60 <lsm303dlhc_get_mag+0x2c8>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fdb2 	bl	8000608 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4614      	mov	r4, r2
 8001aaa:	461d      	mov	r5, r3
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd3d 	bl	8000534 <__aeabi_i2d>
 8001aba:	a323      	add	r3, pc, #140	; (adr r3, 8001b48 <lsm303dlhc_get_mag+0x2b0>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fbea 	bl	8000298 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	a32a      	add	r3, pc, #168	; (adr r3, 8001b78 <lsm303dlhc_get_mag+0x2e0>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fd99 	bl	8000608 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbdd 	bl	800029c <__adddf3>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4690      	mov	r8, r2
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4b27      	ldr	r3, [pc, #156]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd1e 	bl	8000534 <__aeabi_i2d>
 8001af8:	a317      	add	r3, pc, #92	; (adr r3, 8001b58 <lsm303dlhc_get_mag+0x2c0>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fbcb 	bl	8000298 <__aeabi_dsub>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	a31d      	add	r3, pc, #116	; (adr r3, 8001b80 <lsm303dlhc_get_mag+0x2e8>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	f7fe fd7a 	bl	8000608 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	491b      	ldr	r1, [pc, #108]	; (8001b88 <lsm303dlhc_get_mag+0x2f0>)
 8001b1a:	680c      	ldr	r4, [r1, #0]
 8001b1c:	4640      	mov	r0, r8
 8001b1e:	4649      	mov	r1, r9
 8001b20:	f7fe fbbc 	bl	800029c <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	//log_s_int("MAG",HAL_GetTick()-tb);
}
 8001b2c:	bf00      	nop
 8001b2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b32:	bf00      	nop
 8001b34:	f3af 8000 	nop.w
 8001b38:	6fe2e6eb 	.word	0x6fe2e6eb
 8001b3c:	40459a7b 	.word	0x40459a7b
 8001b40:	0f883340 	.word	0x0f883340
 8001b44:	401188ec 	.word	0x401188ec
 8001b48:	0ad46f58 	.word	0x0ad46f58
 8001b4c:	4039a7d3 	.word	0x4039a7d3
 8001b50:	7991bc56 	.word	0x7991bc56
 8001b54:	3f960fe4 	.word	0x3f960fe4
 8001b58:	fbce4218 	.word	0xfbce4218
 8001b5c:	3fe238ff 	.word	0x3fe238ff
 8001b60:	59641f64 	.word	0x59641f64
 8001b64:	bfb3f130 	.word	0xbfb3f130
 8001b68:	548ecd8e 	.word	0x548ecd8e
 8001b6c:	4011b9df 	.word	0x4011b9df
 8001b70:	c4c5974e 	.word	0xc4c5974e
 8001b74:	3fcce3e6 	.word	0x3fcce3e6
 8001b78:	7fe8ee6c 	.word	0x7fe8ee6c
 8001b7c:	3fb116b9 	.word	0x3fb116b9
 8001b80:	1b21c476 	.word	0x1b21c476
 8001b84:	40155748 	.word	0x40155748
 8001b88:	20000300 	.word	0x20000300

08001b8c <mahony_init>:

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

void mahony_init()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
	twoKp = twoKpDef;	// 2 * proportional gain (Kp)
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <mahony_init+0x6c>)
 8001b92:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <mahony_init+0x70>)
 8001b94:	601a      	str	r2, [r3, #0]
	twoKi = twoKiDef;	// 2 * integral gain (Ki)
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <mahony_init+0x74>)
 8001b98:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <mahony_init+0x78>)
 8001b9a:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <mahony_init+0x7c>)
 8001b9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ba2:	601a      	str	r2, [r3, #0]
	q1 = 0.0f;
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <mahony_init+0x80>)
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
	q2 = 0.0f;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <mahony_init+0x84>)
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
	q3 = 0.0f;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <mahony_init+0x88>)
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
	integralFBx = 0.0f;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <mahony_init+0x8c>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
	integralFBy = 0.0f;
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <mahony_init+0x90>)
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
	integralFBz = 0.0f;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <mahony_init+0x94>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
	anglesComputed = 0;
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <mahony_init+0x98>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
	log_s("mahony");
 8001bda:	4813      	ldr	r0, [pc, #76]	; (8001c28 <mahony_init+0x9c>)
 8001bdc:	f7ff fc0c 	bl	80013f8 <log_s>
	log_p(&roll);
 8001be0:	4812      	ldr	r0, [pc, #72]	; (8001c2c <mahony_init+0xa0>)
 8001be2:	f7ff fc59 	bl	8001498 <log_p>
	log_p(&pitch);
 8001be6:	4812      	ldr	r0, [pc, #72]	; (8001c30 <mahony_init+0xa4>)
 8001be8:	f7ff fc56 	bl	8001498 <log_p>
	log_p(&yaw);
 8001bec:	4811      	ldr	r0, [pc, #68]	; (8001c34 <mahony_init+0xa8>)
 8001bee:	f7ff fc53 	bl	8001498 <log_p>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000304 	.word	0x20000304
 8001bfc:	41500000 	.word	0x41500000
 8001c00:	20000308 	.word	0x20000308
 8001c04:	40400000 	.word	0x40400000
 8001c08:	2000030c 	.word	0x2000030c
 8001c0c:	20000310 	.word	0x20000310
 8001c10:	20000314 	.word	0x20000314
 8001c14:	20000318 	.word	0x20000318
 8001c18:	2000031c 	.word	0x2000031c
 8001c1c:	20000320 	.word	0x20000320
 8001c20:	20000324 	.word	0x20000324
 8001c24:	20000338 	.word	0x20000338
 8001c28:	0800aa54 	.word	0x0800aa54
 8001c2c:	2000032c 	.word	0x2000032c
 8001c30:	20000330 	.word	0x20000330
 8001c34:	20000334 	.word	0x20000334

08001c38 <mahony_update>:

void mahony_update(float invSampleFreq,float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0a6      	sub	sp, #152	; 0x98
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8001c42:	edc7 0a08 	vstr	s1, [r7, #32]
 8001c46:	ed87 1a07 	vstr	s2, [r7, #28]
 8001c4a:	edc7 1a06 	vstr	s3, [r7, #24]
 8001c4e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001c52:	edc7 2a04 	vstr	s5, [r7, #16]
 8001c56:	ed87 3a03 	vstr	s6, [r7, #12]
 8001c5a:	edc7 3a02 	vstr	s7, [r7, #8]
 8001c5e:	ed87 4a01 	vstr	s8, [r7, #4]
 8001c62:	edc7 4a00 	vstr	s9, [r7]
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid
	// (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d11c      	bne.n	8001cae <mahony_update+0x76>
 8001c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	d115      	bne.n	8001cae <mahony_update+0x76>
 8001c82:	edd7 7a00 	vldr	s15, [r7]
 8001c86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	d10e      	bne.n	8001cae <mahony_update+0x76>
		mahony_updateIMU(gx, gy, gz, ax, ay, az);
 8001c90:	edd7 2a03 	vldr	s5, [r7, #12]
 8001c94:	ed97 2a04 	vldr	s4, [r7, #16]
 8001c98:	edd7 1a05 	vldr	s3, [r7, #20]
 8001c9c:	ed97 1a06 	vldr	s2, [r7, #24]
 8001ca0:	edd7 0a07 	vldr	s1, [r7, #28]
 8001ca4:	ed97 0a08 	vldr	s0, [r7, #32]
 8001ca8:	f000 fbe8 	bl	800247c <mahony_updateIMU>
		return;
 8001cac:	e3cf      	b.n	800244e <mahony_update+0x816>
	gy *= 0.0174533f;
	gz *= 0.0174533f;*/

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001cae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	d10e      	bne.n	8001cda <mahony_update+0xa2>
 8001cbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc8:	d107      	bne.n	8001cda <mahony_update+0xa2>
 8001cca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	f000 82b7 	beq.w	8002248 <mahony_update+0x610>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 8001cda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cde:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	f000 fe43 	bl	8002988 <mahony_invSqrt>
 8001d02:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		ax *= recipNorm;
 8001d06:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d0a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d12:	edc7 7a05 	vstr	s15, [r7, #20]
		ay *= recipNorm;
 8001d16:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d1a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	edc7 7a04 	vstr	s15, [r7, #16]
		az *= recipNorm;
 8001d26:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d2a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d32:	edc7 7a03 	vstr	s15, [r7, #12]

		// Normalise magnetometer measurement
		recipNorm = mahony_invSqrt(mx * mx + my * my + mz * mz);
 8001d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d3a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001d3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d4a:	edd7 7a00 	vldr	s15, [r7]
 8001d4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d56:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5a:	f000 fe15 	bl	8002988 <mahony_invSqrt>
 8001d5e:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
		mx *= recipNorm;
 8001d62:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d66:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d6e:	edc7 7a02 	vstr	s15, [r7, #8]
		my *= recipNorm;
 8001d72:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d76:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7e:	edc7 7a01 	vstr	s15, [r7, #4]
		mz *= recipNorm;
 8001d82:	ed97 7a00 	vldr	s14, [r7]
 8001d86:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		q0q0 = q0 * q0;
 8001d92:	4bf0      	ldr	r3, [pc, #960]	; (8002154 <mahony_update+0x51c>)
 8001d94:	ed93 7a00 	vldr	s14, [r3]
 8001d98:	4bee      	ldr	r3, [pc, #952]	; (8002154 <mahony_update+0x51c>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
		q0q1 = q0 * q1;
 8001da6:	4beb      	ldr	r3, [pc, #940]	; (8002154 <mahony_update+0x51c>)
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	4bea      	ldr	r3, [pc, #936]	; (8002158 <mahony_update+0x520>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
		q0q2 = q0 * q2;
 8001dba:	4be6      	ldr	r3, [pc, #920]	; (8002154 <mahony_update+0x51c>)
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	4be6      	ldr	r3, [pc, #920]	; (800215c <mahony_update+0x524>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		q0q3 = q0 * q3;
 8001dce:	4be1      	ldr	r3, [pc, #900]	; (8002154 <mahony_update+0x51c>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	4be2      	ldr	r3, [pc, #904]	; (8002160 <mahony_update+0x528>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dde:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		q1q1 = q1 * q1;
 8001de2:	4bdd      	ldr	r3, [pc, #884]	; (8002158 <mahony_update+0x520>)
 8001de4:	ed93 7a00 	vldr	s14, [r3]
 8001de8:	4bdb      	ldr	r3, [pc, #876]	; (8002158 <mahony_update+0x520>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		q1q2 = q1 * q2;
 8001df6:	4bd8      	ldr	r3, [pc, #864]	; (8002158 <mahony_update+0x520>)
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	4bd7      	ldr	r3, [pc, #860]	; (800215c <mahony_update+0x524>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		q1q3 = q1 * q3;
 8001e0a:	4bd3      	ldr	r3, [pc, #844]	; (8002158 <mahony_update+0x520>)
 8001e0c:	ed93 7a00 	vldr	s14, [r3]
 8001e10:	4bd3      	ldr	r3, [pc, #844]	; (8002160 <mahony_update+0x528>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1a:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
		q2q2 = q2 * q2;
 8001e1e:	4bcf      	ldr	r3, [pc, #828]	; (800215c <mahony_update+0x524>)
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	4bcd      	ldr	r3, [pc, #820]	; (800215c <mahony_update+0x524>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		q2q3 = q2 * q3;
 8001e32:	4bca      	ldr	r3, [pc, #808]	; (800215c <mahony_update+0x524>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	4bc9      	ldr	r3, [pc, #804]	; (8002160 <mahony_update+0x528>)
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e42:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		q3q3 = q3 * q3;
 8001e46:	4bc6      	ldr	r3, [pc, #792]	; (8002160 <mahony_update+0x528>)
 8001e48:	ed93 7a00 	vldr	s14, [r3]
 8001e4c:	4bc4      	ldr	r3, [pc, #784]	; (8002160 <mahony_update+0x528>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		// Reference direction of Earth's magnetic field
		hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 8001e5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e5e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001e62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e66:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001e6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001e7a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e82:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e8e:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001e92:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001e96:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e9a:	edd7 7a00 	vldr	s15, [r7]
 8001e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eaa:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 8001eae:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001eb2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001eb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ec2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001ec6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001eca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ece:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001ed2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee2:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001ee6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001eea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001eee:	edd7 7a00 	vldr	s15, [r7]
 8001ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001efe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
		bx = sqrtf(hx * hx + hy * hy);
 8001f02:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001f06:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001f0a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001f0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f16:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1a:	f008 fa8f 	bl	800a43c <sqrtf>
 8001f1e:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 8001f22:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001f26:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001f2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f36:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8001f3a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001f3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001f52:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001f56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f5a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f62:	edd7 7a00 	vldr	s15, [r7]
 8001f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f72:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 8001f76:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001f7a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f82:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		halfvy = q0q1 + q2q3;
 8001f86:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001f8a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		halfvz = q0q0 - 0.5f + q3q3;
 8001f96:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001f9a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001f9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fa2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 8001fae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fb2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001fb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fba:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001fbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fc2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001fc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fca:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 8001fce:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001fd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fd6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 8001fe6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001fea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001fee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ff2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001ff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ffa:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8001ffe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8002002:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002006:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800200a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);
 8002016:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800201a:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800201e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002022:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002026:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800202e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002032:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002036:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800203a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800203e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		// Error is sum of cross product between estimated direction
		// and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 800204e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002052:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800205a:	edd7 6a03 	vldr	s13, [r7, #12]
 800205e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002066:	ee37 7a67 	vsub.f32	s14, s14, s15
 800206a:	edd7 6a01 	vldr	s13, [r7, #4]
 800206e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002072:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002076:	ed97 6a00 	vldr	s12, [r7]
 800207a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800207e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002082:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 800208e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002092:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209a:	edd7 6a05 	vldr	s13, [r7, #20]
 800209e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80020a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020aa:	edd7 6a00 	vldr	s13, [r7]
 80020ae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 80020ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80020d2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	edd7 6a04 	vldr	s13, [r7, #16]
 80020de:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ea:	edd7 6a02 	vldr	s13, [r7, #8]
 80020ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80020f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020f6:	ed97 6a01 	vldr	s12, [r7, #4]
 80020fa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80020fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002102:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <mahony_update+0x52c>)
 8002110:	edd3 7a00 	vldr	s15, [r3]
 8002114:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	dd61      	ble.n	80021e2 <mahony_update+0x5aa>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 800211e:	4b11      	ldr	r3, [pc, #68]	; (8002164 <mahony_update+0x52c>)
 8002120:	ed93 7a00 	vldr	s14, [r3]
 8002124:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <mahony_update+0x530>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <mahony_update+0x530>)
 8002140:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <mahony_update+0x52c>)
 8002146:	ed93 7a00 	vldr	s14, [r3]
 800214a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	e00b      	b.n	800216c <mahony_update+0x534>
 8002154:	2000030c 	.word	0x2000030c
 8002158:	20000310 	.word	0x20000310
 800215c:	20000314 	.word	0x20000314
 8002160:	20000318 	.word	0x20000318
 8002164:	20000308 	.word	0x20000308
 8002168:	2000031c 	.word	0x2000031c
 800216c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002174:	4bb7      	ldr	r3, [pc, #732]	; (8002454 <mahony_update+0x81c>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217e:	4bb5      	ldr	r3, [pc, #724]	; (8002454 <mahony_update+0x81c>)
 8002180:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 8002184:	4bb4      	ldr	r3, [pc, #720]	; (8002458 <mahony_update+0x820>)
 8002186:	ed93 7a00 	vldr	s14, [r3]
 800218a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800218e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002192:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800219a:	4bb0      	ldr	r3, [pc, #704]	; (800245c <mahony_update+0x824>)
 800219c:	edd3 7a00 	vldr	s15, [r3]
 80021a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a4:	4bad      	ldr	r3, [pc, #692]	; (800245c <mahony_update+0x824>)
 80021a6:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 80021aa:	4bad      	ldr	r3, [pc, #692]	; (8002460 <mahony_update+0x828>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	edc7 7a08 	vstr	s15, [r7, #32]
			gy += integralFBy;
 80021bc:	4ba5      	ldr	r3, [pc, #660]	; (8002454 <mahony_update+0x81c>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80021c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ca:	edc7 7a07 	vstr	s15, [r7, #28]
			gz += integralFBz;
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <mahony_update+0x824>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	edc7 7a06 	vstr	s15, [r7, #24]
 80021e0:	e00b      	b.n	80021fa <mahony_update+0x5c2>
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 80021e2:	4b9f      	ldr	r3, [pc, #636]	; (8002460 <mahony_update+0x828>)
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80021ea:	4b9a      	ldr	r3, [pc, #616]	; (8002454 <mahony_update+0x81c>)
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80021f2:	4b9a      	ldr	r3, [pc, #616]	; (800245c <mahony_update+0x824>)
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 80021fa:	4b9a      	ldr	r3, [pc, #616]	; (8002464 <mahony_update+0x82c>)
 80021fc:	ed93 7a00 	vldr	s14, [r3]
 8002200:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002208:	ed97 7a08 	vldr	s14, [r7, #32]
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	edc7 7a08 	vstr	s15, [r7, #32]
		gy += twoKp * halfey;
 8002214:	4b93      	ldr	r3, [pc, #588]	; (8002464 <mahony_update+0x82c>)
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	ed97 7a07 	vldr	s14, [r7, #28]
 8002226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222a:	edc7 7a07 	vstr	s15, [r7, #28]
		gz += twoKp * halfez;
 800222e:	4b8d      	ldr	r3, [pc, #564]	; (8002464 <mahony_update+0x82c>)
 8002230:	ed93 7a00 	vldr	s14, [r3]
 8002234:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002244:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 8002248:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800224c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	ed97 7a08 	vldr	s14, [r7, #32]
 8002258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225c:	edc7 7a08 	vstr	s15, [r7, #32]
	gy *= (0.5f * invSampleFreq);
 8002260:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002264:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002274:	edc7 7a07 	vstr	s15, [r7, #28]
	gz *= (0.5f * invSampleFreq);
 8002278:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800227c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002284:	ed97 7a06 	vldr	s14, [r7, #24]
 8002288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228c:	edc7 7a06 	vstr	s15, [r7, #24]
	qa = q0;
 8002290:	4b75      	ldr	r3, [pc, #468]	; (8002468 <mahony_update+0x830>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	637b      	str	r3, [r7, #52]	; 0x34
	qb = q1;
 8002296:	4b75      	ldr	r3, [pc, #468]	; (800246c <mahony_update+0x834>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	633b      	str	r3, [r7, #48]	; 0x30
	qc = q2;
 800229c:	4b74      	ldr	r3, [pc, #464]	; (8002470 <mahony_update+0x838>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	q0 += (-qb * gx - qc * gy - q3 * gz);
 80022a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80022a6:	eeb1 7a67 	vneg.f32	s14, s15
 80022aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80022ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80022b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022c2:	4b6c      	ldr	r3, [pc, #432]	; (8002474 <mahony_update+0x83c>)
 80022c4:	edd3 6a00 	vldr	s13, [r3]
 80022c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80022cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022d4:	4b64      	ldr	r3, [pc, #400]	; (8002468 <mahony_update+0x830>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	4b62      	ldr	r3, [pc, #392]	; (8002468 <mahony_update+0x830>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 80022e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80022e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80022ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022f0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80022f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80022f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002300:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <mahony_update+0x83c>)
 8002302:	edd3 6a00 	vldr	s13, [r3]
 8002306:	edd7 7a07 	vldr	s15, [r7, #28]
 800230a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002312:	4b56      	ldr	r3, [pc, #344]	; (800246c <mahony_update+0x834>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231c:	4b53      	ldr	r3, [pc, #332]	; (800246c <mahony_update+0x834>)
 800231e:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8002322:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002326:	edd7 7a07 	vldr	s15, [r7, #28]
 800232a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800232e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002332:	edd7 7a06 	vldr	s15, [r7, #24]
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800233e:	4b4d      	ldr	r3, [pc, #308]	; (8002474 <mahony_update+0x83c>)
 8002340:	edd3 6a00 	vldr	s13, [r3]
 8002344:	edd7 7a08 	vldr	s15, [r7, #32]
 8002348:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <mahony_update+0x838>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <mahony_update+0x838>)
 800235c:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 8002360:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002364:	edd7 7a06 	vldr	s15, [r7, #24]
 8002368:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002370:	edd7 7a07 	vldr	s15, [r7, #28]
 8002374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800237c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002380:	edd7 7a08 	vldr	s15, [r7, #32]
 8002384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002388:	ee37 7a67 	vsub.f32	s14, s14, s15
 800238c:	4b39      	ldr	r3, [pc, #228]	; (8002474 <mahony_update+0x83c>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <mahony_update+0x83c>)
 8002398:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800239c:	4b32      	ldr	r3, [pc, #200]	; (8002468 <mahony_update+0x830>)
 800239e:	ed93 7a00 	vldr	s14, [r3]
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <mahony_update+0x830>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	4b2f      	ldr	r3, [pc, #188]	; (800246c <mahony_update+0x834>)
 80023ae:	edd3 6a00 	vldr	s13, [r3]
 80023b2:	4b2e      	ldr	r3, [pc, #184]	; (800246c <mahony_update+0x834>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <mahony_update+0x838>)
 80023c2:	edd3 6a00 	vldr	s13, [r3]
 80023c6:	4b2a      	ldr	r3, [pc, #168]	; (8002470 <mahony_update+0x838>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <mahony_update+0x83c>)
 80023d6:	edd3 6a00 	vldr	s13, [r3]
 80023da:	4b26      	ldr	r3, [pc, #152]	; (8002474 <mahony_update+0x83c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	f000 facc 	bl	8002988 <mahony_invSqrt>
 80023f0:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	q0 *= recipNorm;
 80023f4:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <mahony_update+0x830>)
 80023f6:	ed93 7a00 	vldr	s14, [r3]
 80023fa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <mahony_update+0x830>)
 8002404:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <mahony_update+0x834>)
 800240a:	ed93 7a00 	vldr	s14, [r3]
 800240e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <mahony_update+0x834>)
 8002418:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <mahony_update+0x838>)
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <mahony_update+0x838>)
 800242c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <mahony_update+0x83c>)
 8002432:	ed93 7a00 	vldr	s14, [r3]
 8002436:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <mahony_update+0x83c>)
 8002440:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <mahony_update+0x840>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
	mahony_computeAngles();
 800244a:	f000 fae9 	bl	8002a20 <mahony_computeAngles>
}
 800244e:	3798      	adds	r7, #152	; 0x98
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000320 	.word	0x20000320
 8002458:	20000308 	.word	0x20000308
 800245c:	20000324 	.word	0x20000324
 8002460:	2000031c 	.word	0x2000031c
 8002464:	20000304 	.word	0x20000304
 8002468:	2000030c 	.word	0x2000030c
 800246c:	20000310 	.word	0x20000310
 8002470:	20000314 	.word	0x20000314
 8002474:	20000318 	.word	0x20000318
 8002478:	20000338 	.word	0x20000338

0800247c <mahony_updateIMU>:

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void mahony_updateIMU(float gx, float gy, float gz, float ax, float ay, float az)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b090      	sub	sp, #64	; 0x40
 8002480:	af00      	add	r7, sp, #0
 8002482:	ed87 0a05 	vstr	s0, [r7, #20]
 8002486:	edc7 0a04 	vstr	s1, [r7, #16]
 800248a:	ed87 1a03 	vstr	s2, [r7, #12]
 800248e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002492:	ed87 2a01 	vstr	s4, [r7, #4]
 8002496:	edc7 2a00 	vstr	s5, [r7]
	gy *= 0.0174533f;
	gz *= 0.0174533f;*/

	// Compute feedback only if accelerometer measurement valid
	// (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800249a:	edd7 7a02 	vldr	s15, [r7, #8]
 800249e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a6:	d10e      	bne.n	80024c6 <mahony_updateIMU+0x4a>
 80024a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d107      	bne.n	80024c6 <mahony_updateIMU+0x4a>
 80024b6:	edd7 7a00 	vldr	s15, [r7]
 80024ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	f000 8144 	beq.w	800274e <mahony_updateIMU+0x2d2>

		// Normalise accelerometer measurement
		recipNorm = mahony_invSqrt(ax * ax + ay * ay + az * az);
 80024c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024da:	edd7 7a00 	vldr	s15, [r7]
 80024de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ea:	f000 fa4d 	bl	8002988 <mahony_invSqrt>
 80024ee:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		ax *= recipNorm;
 80024f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80024f6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 8002502:	ed97 7a01 	vldr	s14, [r7, #4]
 8002506:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250e:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;
 8002512:	ed97 7a00 	vldr	s14, [r7]
 8002516:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800251a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800251e:	edc7 7a00 	vstr	s15, [r7]

		// Estimated direction of gravity
		halfvx = q1 * q3 - q0 * q2;
 8002522:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <mahony_updateIMU+0x248>)
 8002524:	ed93 7a00 	vldr	s14, [r3]
 8002528:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <mahony_updateIMU+0x24c>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002532:	4b66      	ldr	r3, [pc, #408]	; (80026cc <mahony_updateIMU+0x250>)
 8002534:	edd3 6a00 	vldr	s13, [r3]
 8002538:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <mahony_updateIMU+0x254>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002546:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		halfvy = q0 * q1 + q2 * q3;
 800254a:	4b60      	ldr	r3, [pc, #384]	; (80026cc <mahony_updateIMU+0x250>)
 800254c:	ed93 7a00 	vldr	s14, [r3]
 8002550:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <mahony_updateIMU+0x248>)
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee27 7a27 	vmul.f32	s14, s14, s15
 800255a:	4b5d      	ldr	r3, [pc, #372]	; (80026d0 <mahony_updateIMU+0x254>)
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <mahony_updateIMU+0x24c>)
 8002562:	edd3 7a00 	vldr	s15, [r3]
 8002566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800256a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <mahony_updateIMU+0x250>)
 8002574:	ed93 7a00 	vldr	s14, [r3]
 8002578:	4b54      	ldr	r3, [pc, #336]	; (80026cc <mahony_updateIMU+0x250>)
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002582:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002586:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800258a:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <mahony_updateIMU+0x24c>)
 800258c:	edd3 6a00 	vldr	s13, [r3]
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <mahony_updateIMU+0x24c>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Error is sum of cross product between estimated
		// and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 80025a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80025a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ae:	edd7 6a00 	vldr	s13, [r7]
 80025b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		halfey = (az * halfvx - ax * halfvz);
 80025c2:	ed97 7a00 	vldr	s14, [r7]
 80025c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ce:	edd7 6a02 	vldr	s13, [r7, #8]
 80025d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80025d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025de:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		halfez = (ax * halfvy - ay * halfvx);
 80025e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80025e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80025ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80025f2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8002602:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <mahony_updateIMU+0x258>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	dd6a      	ble.n	80026e8 <mahony_updateIMU+0x26c>
			// integral error scaled by Ki
			integralFBx += twoKi * halfex * invSampleFreq;
 8002612:	4b30      	ldr	r3, [pc, #192]	; (80026d4 <mahony_updateIMU+0x258>)
 8002614:	ed93 7a00 	vldr	s14, [r3]
 8002618:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800261c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <mahony_updateIMU+0x25c>)
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800262a:	4b2c      	ldr	r3, [pc, #176]	; (80026dc <mahony_updateIMU+0x260>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <mahony_updateIMU+0x260>)
 8002636:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * invSampleFreq;
 800263a:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <mahony_updateIMU+0x258>)
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002648:	4b23      	ldr	r3, [pc, #140]	; (80026d8 <mahony_updateIMU+0x25c>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <mahony_updateIMU+0x264>)
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265c:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <mahony_updateIMU+0x264>)
 800265e:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * invSampleFreq;
 8002662:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <mahony_updateIMU+0x258>)
 8002664:	ed93 7a00 	vldr	s14, [r3]
 8002668:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800266c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <mahony_updateIMU+0x25c>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee27 7a27 	vmul.f32	s14, s14, s15
 800267a:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <mahony_updateIMU+0x268>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <mahony_updateIMU+0x268>)
 8002686:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <mahony_updateIMU+0x260>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	ed97 7a05 	vldr	s14, [r7, #20]
 8002694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002698:	edc7 7a05 	vstr	s15, [r7, #20]
			gy += integralFBy;
 800269c:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <mahony_updateIMU+0x264>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	edc7 7a04 	vstr	s15, [r7, #16]
			gz += integralFBz;
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <mahony_updateIMU+0x268>)
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80026b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026bc:	edc7 7a03 	vstr	s15, [r7, #12]
 80026c0:	e01e      	b.n	8002700 <mahony_updateIMU+0x284>
 80026c2:	bf00      	nop
 80026c4:	20000310 	.word	0x20000310
 80026c8:	20000318 	.word	0x20000318
 80026cc:	2000030c 	.word	0x2000030c
 80026d0:	20000314 	.word	0x20000314
 80026d4:	20000308 	.word	0x20000308
 80026d8:	20000328 	.word	0x20000328
 80026dc:	2000031c 	.word	0x2000031c
 80026e0:	20000320 	.word	0x20000320
 80026e4:	20000324 	.word	0x20000324
		} else {
			integralFBx = 0.0f;	// prevent integral windup
 80026e8:	4b9d      	ldr	r3, [pc, #628]	; (8002960 <mahony_updateIMU+0x4e4>)
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 80026f0:	4b9c      	ldr	r3, [pc, #624]	; (8002964 <mahony_updateIMU+0x4e8>)
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 80026f8:	4b9b      	ldr	r3, [pc, #620]	; (8002968 <mahony_updateIMU+0x4ec>)
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8002700:	4b9a      	ldr	r3, [pc, #616]	; (800296c <mahony_updateIMU+0x4f0>)
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800270a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002716:	edc7 7a05 	vstr	s15, [r7, #20]
		gy += twoKp * halfey;
 800271a:	4b94      	ldr	r3, [pc, #592]	; (800296c <mahony_updateIMU+0x4f0>)
 800271c:	ed93 7a00 	vldr	s14, [r3]
 8002720:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002728:	ed97 7a04 	vldr	s14, [r7, #16]
 800272c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002730:	edc7 7a04 	vstr	s15, [r7, #16]
		gz += twoKp * halfez;
 8002734:	4b8d      	ldr	r3, [pc, #564]	; (800296c <mahony_updateIMU+0x4f0>)
 8002736:	ed93 7a00 	vldr	s14, [r3]
 800273a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800273e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002742:	ed97 7a03 	vldr	s14, [r7, #12]
 8002746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * invSampleFreq);		// pre-multiply common factors
 800274e:	4b88      	ldr	r3, [pc, #544]	; (8002970 <mahony_updateIMU+0x4f4>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002764:	edc7 7a05 	vstr	s15, [r7, #20]
	gy *= (0.5f * invSampleFreq);
 8002768:	4b81      	ldr	r3, [pc, #516]	; (8002970 <mahony_updateIMU+0x4f4>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002776:	ed97 7a04 	vldr	s14, [r7, #16]
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	edc7 7a04 	vstr	s15, [r7, #16]
	gz *= (0.5f * invSampleFreq);
 8002782:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <mahony_updateIMU+0x4f4>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800278c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002790:	ed97 7a03 	vldr	s14, [r7, #12]
 8002794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002798:	edc7 7a03 	vstr	s15, [r7, #12]
	qa = q0;
 800279c:	4b75      	ldr	r3, [pc, #468]	; (8002974 <mahony_updateIMU+0x4f8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	623b      	str	r3, [r7, #32]
	qb = q1;
 80027a2:	4b75      	ldr	r3, [pc, #468]	; (8002978 <mahony_updateIMU+0x4fc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	61fb      	str	r3, [r7, #28]
	qc = q2;
 80027a8:	4b74      	ldr	r3, [pc, #464]	; (800297c <mahony_updateIMU+0x500>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 80027ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80027b2:	eeb1 7a67 	vneg.f32	s14, s15
 80027b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80027ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027be:	edd7 6a06 	vldr	s13, [r7, #24]
 80027c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ce:	4b6c      	ldr	r3, [pc, #432]	; (8002980 <mahony_updateIMU+0x504>)
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <mahony_updateIMU+0x4f8>)
 80027e2:	edd3 7a00 	vldr	s15, [r3]
 80027e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ea:	4b62      	ldr	r3, [pc, #392]	; (8002974 <mahony_updateIMU+0x4f8>)
 80027ec:	edc3 7a00 	vstr	s15, [r3]
	q1 += (qa * gx + qc * gz - q3 * gy);
 80027f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80027f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80027f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027fc:	edd7 6a06 	vldr	s13, [r7, #24]
 8002800:	edd7 7a03 	vldr	s15, [r7, #12]
 8002804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280c:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <mahony_updateIMU+0x504>)
 800280e:	edd3 6a00 	vldr	s13, [r3]
 8002812:	edd7 7a04 	vldr	s15, [r7, #16]
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800281e:	4b56      	ldr	r3, [pc, #344]	; (8002978 <mahony_updateIMU+0x4fc>)
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002828:	4b53      	ldr	r3, [pc, #332]	; (8002978 <mahony_updateIMU+0x4fc>)
 800282a:	edc3 7a00 	vstr	s15, [r3]
	q2 += (qa * gy - qb * gz + q3 * gx);
 800282e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002832:	edd7 7a04 	vldr	s15, [r7, #16]
 8002836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800283a:	edd7 6a07 	vldr	s13, [r7, #28]
 800283e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002842:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002846:	ee37 7a67 	vsub.f32	s14, s14, s15
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <mahony_updateIMU+0x504>)
 800284c:	edd3 6a00 	vldr	s13, [r3]
 8002850:	edd7 7a05 	vldr	s15, [r7, #20]
 8002854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002858:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285c:	4b47      	ldr	r3, [pc, #284]	; (800297c <mahony_updateIMU+0x500>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002866:	4b45      	ldr	r3, [pc, #276]	; (800297c <mahony_updateIMU+0x500>)
 8002868:	edc3 7a00 	vstr	s15, [r3]
	q3 += (qa * gz + qb * gy - qc * gx);
 800286c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002870:	edd7 7a03 	vldr	s15, [r7, #12]
 8002874:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002878:	edd7 6a07 	vldr	s13, [r7, #28]
 800287c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002880:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002884:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002888:	edd7 6a06 	vldr	s13, [r7, #24]
 800288c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002898:	4b39      	ldr	r3, [pc, #228]	; (8002980 <mahony_updateIMU+0x504>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a2:	4b37      	ldr	r3, [pc, #220]	; (8002980 <mahony_updateIMU+0x504>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = mahony_invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <mahony_updateIMU+0x4f8>)
 80028aa:	ed93 7a00 	vldr	s14, [r3]
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <mahony_updateIMU+0x4f8>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <mahony_updateIMU+0x4fc>)
 80028ba:	edd3 6a00 	vldr	s13, [r3]
 80028be:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <mahony_updateIMU+0x4fc>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <mahony_updateIMU+0x500>)
 80028ce:	edd3 6a00 	vldr	s13, [r3]
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <mahony_updateIMU+0x500>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <mahony_updateIMU+0x504>)
 80028e2:	edd3 6a00 	vldr	s13, [r3]
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <mahony_updateIMU+0x504>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	eeb0 0a67 	vmov.f32	s0, s15
 80028f8:	f000 f846 	bl	8002988 <mahony_invSqrt>
 80028fc:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
	q0 *= recipNorm;
 8002900:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <mahony_updateIMU+0x4f8>)
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	4b19      	ldr	r3, [pc, #100]	; (8002974 <mahony_updateIMU+0x4f8>)
 8002910:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <mahony_updateIMU+0x4fc>)
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800291e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <mahony_updateIMU+0x4fc>)
 8002924:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <mahony_updateIMU+0x500>)
 800292a:	ed93 7a00 	vldr	s14, [r3]
 800292e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <mahony_updateIMU+0x500>)
 8002938:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800293c:	4b10      	ldr	r3, [pc, #64]	; (8002980 <mahony_updateIMU+0x504>)
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <mahony_updateIMU+0x504>)
 800294c:	edc3 7a00 	vstr	s15, [r3]
	anglesComputed = 0;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <mahony_updateIMU+0x508>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
}
 8002956:	bf00      	nop
 8002958:	3740      	adds	r7, #64	; 0x40
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	2000031c 	.word	0x2000031c
 8002964:	20000320 	.word	0x20000320
 8002968:	20000324 	.word	0x20000324
 800296c:	20000304 	.word	0x20000304
 8002970:	20000328 	.word	0x20000328
 8002974:	2000030c 	.word	0x2000030c
 8002978:	20000310 	.word	0x20000310
 800297c:	20000314 	.word	0x20000314
 8002980:	20000318 	.word	0x20000318
 8002984:	20000338 	.word	0x20000338

08002988 <mahony_invSqrt>:
//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float mahony_invSqrt(float x)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8002992:	edd7 7a01 	vldr	s15, [r7, #4]
 8002996:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800299a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299e:	edc7 7a05 	vstr	s15, [r7, #20]
	union { float f; long l; } i;
	i.f = x;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]
	i.l = 0x5f3759df - (i.l >> 1);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	105a      	asrs	r2, r3, #1
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <mahony_invSqrt+0x90>)
 80029ac:	1a9b      	subs	r3, r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
	float y = i.f;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80029b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80029b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029c8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80029cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d0:	ed97 7a04 	vldr	s14, [r7, #16]
 80029d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029d8:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80029dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80029e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80029ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80029f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a00:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	ee07 3a90 	vmov	s15, r3
}
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	5f3759df 	.word	0x5f3759df
 8002a1c:	00000000 	.word	0x00000000

08002a20 <mahony_computeAngles>:

//-------------------------------------------------------------------------------------------

void mahony_computeAngles()
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2)*180/M_PI;
 8002a24:	4b64      	ldr	r3, [pc, #400]	; (8002bb8 <mahony_computeAngles+0x198>)
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	4b64      	ldr	r3, [pc, #400]	; (8002bbc <mahony_computeAngles+0x19c>)
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a34:	4b62      	ldr	r3, [pc, #392]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002a36:	edd3 6a00 	vldr	s13, [r3]
 8002a3a:	4b62      	ldr	r3, [pc, #392]	; (8002bc4 <mahony_computeAngles+0x1a4>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a44:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002a48:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <mahony_computeAngles+0x19c>)
 8002a4a:	ed93 7a00 	vldr	s14, [r3]
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	; (8002bbc <mahony_computeAngles+0x19c>)
 8002a50:	edd3 7a00 	vldr	s15, [r3]
 8002a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a58:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a60:	4b57      	ldr	r3, [pc, #348]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002a62:	edd3 6a00 	vldr	s13, [r3]
 8002a66:	4b56      	ldr	r3, [pc, #344]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a74:	eef0 0a67 	vmov.f32	s1, s15
 8002a78:	eeb0 0a46 	vmov.f32	s0, s12
 8002a7c:	f007 fcdc 	bl	800a438 <atan2f>
 8002a80:	eef0 7a40 	vmov.f32	s15, s0
 8002a84:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002bc8 <mahony_computeAngles+0x1a8>
 8002a88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8c:	ee17 0a90 	vmov	r0, s15
 8002a90:	f7fd fd62 	bl	8000558 <__aeabi_f2d>
 8002a94:	a346      	add	r3, pc, #280	; (adr r3, 8002bb0 <mahony_computeAngles+0x190>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fedf 	bl	800085c <__aeabi_ddiv>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fe f887 	bl	8000bb8 <__aeabi_d2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a47      	ldr	r2, [pc, #284]	; (8002bcc <mahony_computeAngles+0x1ac>)
 8002aae:	6013      	str	r3, [r2, #0]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2))*180/M_PI;
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <mahony_computeAngles+0x19c>)
 8002ab2:	ed93 7a00 	vldr	s14, [r3]
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <mahony_computeAngles+0x1a4>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <mahony_computeAngles+0x198>)
 8002ac2:	edd3 6a00 	vldr	s13, [r3]
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad4:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002adc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae0:	f007 fc7e 	bl	800a3e0 <asinf>
 8002ae4:	eef0 7a40 	vmov.f32	s15, s0
 8002ae8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002bc8 <mahony_computeAngles+0x1a8>
 8002aec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af0:	ee17 0a90 	vmov	r0, s15
 8002af4:	f7fd fd30 	bl	8000558 <__aeabi_f2d>
 8002af8:	a32d      	add	r3, pc, #180	; (adr r3, 8002bb0 <mahony_computeAngles+0x190>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	f7fd fead 	bl	800085c <__aeabi_ddiv>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f7fe f855 	bl	8000bb8 <__aeabi_d2f>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4a2f      	ldr	r2, [pc, #188]	; (8002bd0 <mahony_computeAngles+0x1b0>)
 8002b12:	6013      	str	r3, [r2, #0]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)*180/M_PI;
 8002b14:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <mahony_computeAngles+0x19c>)
 8002b16:	ed93 7a00 	vldr	s14, [r3]
 8002b1a:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002b1c:	edd3 7a00 	vldr	s15, [r3]
 8002b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <mahony_computeAngles+0x198>)
 8002b26:	edd3 6a00 	vldr	s13, [r3]
 8002b2a:	4b26      	ldr	r3, [pc, #152]	; (8002bc4 <mahony_computeAngles+0x1a4>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b34:	ee37 6a27 	vadd.f32	s12, s14, s15
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002b3a:	ed93 7a00 	vldr	s14, [r3]
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <mahony_computeAngles+0x1a0>)
 8002b40:	edd3 7a00 	vldr	s15, [r3]
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <mahony_computeAngles+0x1a4>)
 8002b52:	edd3 6a00 	vldr	s13, [r3]
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <mahony_computeAngles+0x1a4>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b64:	eef0 0a67 	vmov.f32	s1, s15
 8002b68:	eeb0 0a46 	vmov.f32	s0, s12
 8002b6c:	f007 fc64 	bl	800a438 <atan2f>
 8002b70:	eef0 7a40 	vmov.f32	s15, s0
 8002b74:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002bc8 <mahony_computeAngles+0x1a8>
 8002b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7c:	ee17 0a90 	vmov	r0, s15
 8002b80:	f7fd fcea 	bl	8000558 <__aeabi_f2d>
 8002b84:	a30a      	add	r3, pc, #40	; (adr r3, 8002bb0 <mahony_computeAngles+0x190>)
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fe67 	bl	800085c <__aeabi_ddiv>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7fe f80f 	bl	8000bb8 <__aeabi_d2f>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <mahony_computeAngles+0x1b4>)
 8002b9e:	6013      	str	r3, [r2, #0]
	anglesComputed = 1;
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <mahony_computeAngles+0x1b8>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w
 8002bb0:	54442d18 	.word	0x54442d18
 8002bb4:	400921fb 	.word	0x400921fb
 8002bb8:	2000030c 	.word	0x2000030c
 8002bbc:	20000310 	.word	0x20000310
 8002bc0:	20000314 	.word	0x20000314
 8002bc4:	20000318 	.word	0x20000318
 8002bc8:	43340000 	.word	0x43340000
 8002bcc:	2000032c 	.word	0x2000032c
 8002bd0:	20000330 	.word	0x20000330
 8002bd4:	20000334 	.word	0x20000334
 8002bd8:	20000338 	.word	0x20000338

08002bdc <mahony_getPitchRadians>:
}
float mahony_getRollRadians() {
	if (!anglesComputed) mahony_computeAngles();
	return roll;
}
float mahony_getPitchRadians() {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
	if (!anglesComputed) mahony_computeAngles();
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <mahony_getPitchRadians+0x20>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <mahony_getPitchRadians+0x10>
 8002be8:	f7ff ff1a 	bl	8002a20 <mahony_computeAngles>
	return pitch;
 8002bec:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <mahony_getPitchRadians+0x24>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	ee07 3a90 	vmov	s15, r3
}
 8002bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000338 	.word	0x20000338
 8002c00:	20000330 	.word	0x20000330

08002c04 <I2C_Scan>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void I2C_Scan ()
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b098      	sub	sp, #96	; 0x60
 8002c08:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res;
	char info[] = "Scanning I2C bus...\r\n";
 8002c0a:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <I2C_Scan+0xc0>)
 8002c0c:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8002c10:	461d      	mov	r5, r3
 8002c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c1a:	6020      	str	r0, [r4, #0]
 8002c1c:	3404      	adds	r4, #4
 8002c1e:	8021      	strh	r1, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8002c20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fadb 	bl	80001e0 <strlen>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c36:	4824      	ldr	r0, [pc, #144]	; (8002cc8 <I2C_Scan+0xc4>)
 8002c38:	f004 f915 	bl	8006e66 <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c42:	e02f      	b.n	8002ca4 <I2C_Scan+0xa0>
	{
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, HAL_MAX_DELAY);
 8002c44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	b299      	uxth	r1, r3
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c50:	2201      	movs	r2, #1
 8002c52:	481e      	ldr	r0, [pc, #120]	; (8002ccc <I2C_Scan+0xc8>)
 8002c54:	f002 f960 	bl	8004f18 <HAL_I2C_IsDeviceReady>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        if(res == HAL_OK){
 8002c5e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d119      	bne.n	8002c9a <I2C_Scan+0x96>
	    	char msg[64];
	    	snprintf(msg, sizeof(msg), "0x%02X", i);
 8002c66:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c6a:	1d38      	adds	r0, r7, #4
 8002c6c:	4a18      	ldr	r2, [pc, #96]	; (8002cd0 <I2C_Scan+0xcc>)
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	f005 f90a 	bl	8007e88 <sniprintf>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fab2 	bl	80001e0 <strlen>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	1d39      	adds	r1, r7, #4
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c86:	4810      	ldr	r0, [pc, #64]	; (8002cc8 <I2C_Scan+0xc4>)
 8002c88:	f004 f8ed 	bl	8006e66 <HAL_UART_Transmit>
	    	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c90:	2202      	movs	r2, #2
 8002c92:	4910      	ldr	r1, [pc, #64]	; (8002cd4 <I2C_Scan+0xd0>)
 8002c94:	480c      	ldr	r0, [pc, #48]	; (8002cc8 <I2C_Scan+0xc4>)
 8002c96:	f004 f8e6 	bl	8006e66 <HAL_UART_Transmit>
	for(uint16_t i = 0; i < 128; i++)
 8002c9a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002ca4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8002caa:	d9cb      	bls.n	8002c44 <I2C_Scan+0x40>
	    }
	    //else HAL_UART_Transmit(&huart1, (uint8_t*)".", 1, HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\nend\r\n", 7, HAL_MAX_DELAY);
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <I2C_Scan+0xd4>)
 8002cb4:	4804      	ldr	r0, [pc, #16]	; (8002cc8 <I2C_Scan+0xc4>)
 8002cb6:	f004 f8d6 	bl	8006e66 <HAL_UART_Transmit>
}
 8002cba:	bf00      	nop
 8002cbc:	3760      	adds	r7, #96	; 0x60
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	0800aa70 	.word	0x0800aa70
 8002cc8:	20000430 	.word	0x20000430
 8002ccc:	2000033c 	.word	0x2000033c
 8002cd0:	0800aa5c 	.word	0x0800aa5c
 8002cd4:	0800aa64 	.word	0x0800aa64
 8002cd8:	0800aa68 	.word	0x0800aa68

08002cdc <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int16_t map(float x, int16_t in_min, int16_t in_max, int16_t out_min, int16_t out_max)
{
 8002cdc:	b490      	push	{r4, r7}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	ed87 0a03 	vstr	s0, [r7, #12]
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	4608      	mov	r0, r1
 8002cea:	4611      	mov	r1, r2
 8002cec:	461a      	mov	r2, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	817b      	strh	r3, [r7, #10]
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	813b      	strh	r3, [r7, #8]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	80fb      	strh	r3, [r7, #6]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80bb      	strh	r3, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002cfe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d12:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002d2c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	ee07 3a90 	vmov	s15, r3
 8002d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d52:	ee17 3a90 	vmov	r3, s15
 8002d56:	b21b      	sxth	r3, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc90      	pop	{r4, r7}
 8002d60:	4770      	bx	lr
 8002d62:	0000      	movs	r0, r0
 8002d64:	0000      	movs	r0, r0
	...

08002d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6c:	ed2d 8b06 	vpush	{d8-d10}
 8002d70:	b08c      	sub	sp, #48	; 0x30
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d74:	f000 fe14 	bl	80039a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d78:	f000 f9a2 	bl	80030c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d7c:	f000 faf2 	bl	8003364 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d80:	f000 fa08 	bl	8003194 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002d84:	f000 fac4 	bl	8003310 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002d88:	f000 fa32 	bl	80031f0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002d8c:	f000 fa66 	bl	800325c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002d90:	2100      	movs	r1, #0
 8002d92:	48b7      	ldr	r0, [pc, #732]	; (8003070 <main+0x308>)
 8002d94:	f003 fc08 	bl	80065a8 <HAL_TIM_PWM_Start>
  blink_stmled();
 8002d98:	f000 fb66 	bl	8003468 <blink_stmled>
  I2C_Scan();
 8002d9c:	f7ff ff32 	bl	8002c04 <I2C_Scan>
  debug_init(&huart1);
 8002da0:	48b4      	ldr	r0, [pc, #720]	; (8003074 <main+0x30c>)
 8002da2:	f7fe fb19 	bl	80013d8 <debug_init>
  log_s("Start");
 8002da6:	48b4      	ldr	r0, [pc, #720]	; (8003078 <main+0x310>)
 8002da8:	f7fe fb26 	bl	80013f8 <log_s>
  GY801_init(&hi2c1,&data);
 8002dac:	49b3      	ldr	r1, [pc, #716]	; (800307c <main+0x314>)
 8002dae:	48b4      	ldr	r0, [pc, #720]	; (8003080 <main+0x318>)
 8002db0:	f7fe fba0 	bl	80014f4 <GY801_init>
  //NRF_init(&hspi1,&data);
  uint8_t cc=0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  HAL_Delay(500);
 8002dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002dbe:	f000 fe61 	bl	8003a84 <HAL_Delay>
  uint32_t last_t, time_t;

  // madgwick
  uint32_t ahrs_t;
  float imu[3];
  log_p_imu(&imu[0]);
 8002dc2:	f107 0318 	add.w	r3, r7, #24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe fb7a 	bl	80014c0 <log_p_imu>
  log_p(&data.lsm303dlhc.ax);
 8002dcc:	48ad      	ldr	r0, [pc, #692]	; (8003084 <main+0x31c>)
 8002dce:	f7fe fb63 	bl	8001498 <log_p>
  log_p(&data.lsm303dlhc.ay);
 8002dd2:	48ad      	ldr	r0, [pc, #692]	; (8003088 <main+0x320>)
 8002dd4:	f7fe fb60 	bl	8001498 <log_p>
  log_p(&data.lsm303dlhc.az);
 8002dd8:	48ac      	ldr	r0, [pc, #688]	; (800308c <main+0x324>)
 8002dda:	f7fe fb5d 	bl	8001498 <log_p>
  log_p(&data.l3g4200d.gx);
 8002dde:	48ac      	ldr	r0, [pc, #688]	; (8003090 <main+0x328>)
 8002de0:	f7fe fb5a 	bl	8001498 <log_p>
  log_p(&data.l3g4200d.gy);
 8002de4:	48ab      	ldr	r0, [pc, #684]	; (8003094 <main+0x32c>)
 8002de6:	f7fe fb57 	bl	8001498 <log_p>
  log_p(&data.l3g4200d.gz);
 8002dea:	48ab      	ldr	r0, [pc, #684]	; (8003098 <main+0x330>)
 8002dec:	f7fe fb54 	bl	8001498 <log_p>
  log_p(&data.lsm303dlhc_mag.mx);
 8002df0:	48aa      	ldr	r0, [pc, #680]	; (800309c <main+0x334>)
 8002df2:	f7fe fb51 	bl	8001498 <log_p>
  log_p(&data.lsm303dlhc_mag.my);
 8002df6:	48aa      	ldr	r0, [pc, #680]	; (80030a0 <main+0x338>)
 8002df8:	f7fe fb4e 	bl	8001498 <log_p>
  log_p(&data.lsm303dlhc_mag.mz);
 8002dfc:	48a9      	ldr	r0, [pc, #676]	; (80030a4 <main+0x33c>)
 8002dfe:	f7fe fb4b 	bl	8001498 <log_p>
  float quat[4];
  ahrs_t=HAL_GetTick();
 8002e02:	f000 fe33 	bl	8003a6c <HAL_GetTick>
 8002e06:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint16_t hz;
  uint32_t hz_t=HAL_GetTick();
 8002e08:	f000 fe30 	bl	8003a6c <HAL_GetTick>
 8002e0c:	62b8      	str	r0, [r7, #40]	; 0x28
  log_p(&hz);
 8002e0e:	1dbb      	adds	r3, r7, #6
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fb41 	bl	8001498 <log_p>
  mahony_init();
 8002e16:	f7fe feb9 	bl	8001b8c <mahony_init>
	  sprintf(ms_data,"data:%d %d",BMP180_UT(),BMP180_UT());
	  log_s(ms_data);*/
	  //nrf_send_data[0]=cc;
	  //nrf24l01p_write_tx_fifo(&nrf_send_data);
	  //cc+=1;
	  GY801_update_data();
 8002e1a:	f7fe fb9d 	bl	8001558 <GY801_update_data>
	  //log_s_int("AHRS",HAL_GetTick()-ahrs_t);
	  hz+=1;
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	80fb      	strh	r3, [r7, #6]
	  //MadgwickAHRSupdate((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625,(float)data.lsm303dlhc_mag.mx/450,(float)data.lsm303dlhc_mag.my/450,(float)data.lsm303dlhc_mag.mz/400);
	  //MadgwickAHRSupdateIMU((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625);
	  mahony_update((float)(HAL_GetTick()-ahrs_t)/1000.0,(float)data.l3g4200d.gx*M_PI/180/131,(float)data.l3g4200d.gy*M_PI/180/131,(float)data.l3g4200d.gz*M_PI/180/131,(float)data.lsm303dlhc.ax*21.5625,(float)data.lsm303dlhc.ay*21.5625,(float)data.lsm303dlhc.az*21.5625,(float)data.lsm303dlhc_mag.mx/450,(float)data.lsm303dlhc_mag.my/450,(float)data.lsm303dlhc_mag.mz/400);
 8002e26:	f000 fe21 	bl	8003a6c <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e38:	ee17 0a90 	vmov	r0, s15
 8002e3c:	f7fd fb8c 	bl	8000558 <__aeabi_f2d>
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	4b98      	ldr	r3, [pc, #608]	; (80030a8 <main+0x340>)
 8002e46:	f7fd fd09 	bl	800085c <__aeabi_ddiv>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7fd feb1 	bl	8000bb8 <__aeabi_d2f>
 8002e56:	4604      	mov	r4, r0
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <main+0x314>)
 8002e5a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e66:	ee17 0a90 	vmov	r0, s15
 8002e6a:	f7fd fb75 	bl	8000558 <__aeabi_f2d>
 8002e6e:	a37c      	add	r3, pc, #496	; (adr r3, 8003060 <main+0x2f8>)
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	f7fd fbc8 	bl	8000608 <__aeabi_dmul>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4610      	mov	r0, r2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	4b89      	ldr	r3, [pc, #548]	; (80030ac <main+0x344>)
 8002e86:	f7fd fce9 	bl	800085c <__aeabi_ddiv>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4610      	mov	r0, r2
 8002e90:	4619      	mov	r1, r3
 8002e92:	a375      	add	r3, pc, #468	; (adr r3, 8003068 <main+0x300>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fce0 	bl	800085c <__aeabi_ddiv>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f7fd fe88 	bl	8000bb8 <__aeabi_d2f>
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	4b74      	ldr	r3, [pc, #464]	; (800307c <main+0x314>)
 8002eac:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002eb0:	ee07 3a90 	vmov	s15, r3
 8002eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eb8:	ee17 0a90 	vmov	r0, s15
 8002ebc:	f7fd fb4c 	bl	8000558 <__aeabi_f2d>
 8002ec0:	a367      	add	r3, pc, #412	; (adr r3, 8003060 <main+0x2f8>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f7fd fb9f 	bl	8000608 <__aeabi_dmul>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	4b75      	ldr	r3, [pc, #468]	; (80030ac <main+0x344>)
 8002ed8:	f7fd fcc0 	bl	800085c <__aeabi_ddiv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	a360      	add	r3, pc, #384	; (adr r3, 8003068 <main+0x300>)
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f7fd fcb7 	bl	800085c <__aeabi_ddiv>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f7fd fe5f 	bl	8000bb8 <__aeabi_d2f>
 8002efa:	4606      	mov	r6, r0
 8002efc:	4b5f      	ldr	r3, [pc, #380]	; (800307c <main+0x314>)
 8002efe:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0a:	ee17 0a90 	vmov	r0, s15
 8002f0e:	f7fd fb23 	bl	8000558 <__aeabi_f2d>
 8002f12:	a353      	add	r3, pc, #332	; (adr r3, 8003060 <main+0x2f8>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fb76 	bl	8000608 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	4b60      	ldr	r3, [pc, #384]	; (80030ac <main+0x344>)
 8002f2a:	f7fd fc97 	bl	800085c <__aeabi_ddiv>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4610      	mov	r0, r2
 8002f34:	4619      	mov	r1, r3
 8002f36:	a34c      	add	r3, pc, #304	; (adr r3, 8003068 <main+0x300>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd fc8e 	bl	800085c <__aeabi_ddiv>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	f7fd fe36 	bl	8000bb8 <__aeabi_d2f>
 8002f4c:	4680      	mov	r8, r0
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <main+0x314>)
 8002f50:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f5c:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80030b0 <main+0x348>
 8002f60:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002f64:	4b45      	ldr	r3, [pc, #276]	; (800307c <main+0x314>)
 8002f66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f72:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80030b0 <main+0x348>
 8002f76:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002f7a:	4b40      	ldr	r3, [pc, #256]	; (800307c <main+0x314>)
 8002f7c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f88:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80030b0 <main+0x348>
 8002f8c:	ee27 9a87 	vmul.f32	s18, s15, s14
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <main+0x314>)
 8002f92:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7fd fe0d 	bl	8000bb8 <__aeabi_d2f>
 8002f9e:	ee07 0a10 	vmov	s14, r0
 8002fa2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80030b4 <main+0x34c>
 8002fa6:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <main+0x314>)
 8002fac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f7fd fe00 	bl	8000bb8 <__aeabi_d2f>
 8002fb8:	ee07 0a10 	vmov	s14, r0
 8002fbc:	eddf 7a3d 	vldr	s15, [pc, #244]	; 80030b4 <main+0x34c>
 8002fc0:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <main+0x314>)
 8002fc6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fdf3 	bl	8000bb8 <__aeabi_d2f>
 8002fd2:	ee06 0a90 	vmov	s13, r0
 8002fd6:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80030b8 <main+0x350>
 8002fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fde:	eef0 4a67 	vmov.f32	s9, s15
 8002fe2:	eeb0 4a4a 	vmov.f32	s8, s20
 8002fe6:	eef0 3a69 	vmov.f32	s7, s19
 8002fea:	eeb0 3a49 	vmov.f32	s6, s18
 8002fee:	eef0 2a68 	vmov.f32	s5, s17
 8002ff2:	eeb0 2a48 	vmov.f32	s4, s16
 8002ff6:	ee01 8a90 	vmov	s3, r8
 8002ffa:	ee01 6a10 	vmov	s2, r6
 8002ffe:	ee00 5a90 	vmov	s1, r5
 8003002:	ee00 4a10 	vmov	s0, r4
 8003006:	f7fe fe17 	bl	8001c38 <mahony_update>
	  ahrs_t=HAL_GetTick();
 800300a:	f000 fd2f 	bl	8003a6c <HAL_GetTick>
 800300e:	62f8      	str	r0, [r7, #44]	; 0x2c
	  quat2Euler(&quat[0], &imu[0]);*/
	  /*for(uint8_t i=0;i<3;i++){
		  imu[i]/=0.01745329252;
	  }*/
	  //htim2.Instance->CCR1=map(imu[1],-90,70,25,125);
	  htim2.Instance->CCR1=map(mahony_getPitchRadians(),-90,70,25,125);
 8003010:	f7ff fde4 	bl	8002bdc <mahony_getPitchRadians>
 8003014:	eef0 7a40 	vmov.f32	s15, s0
 8003018:	237d      	movs	r3, #125	; 0x7d
 800301a:	2219      	movs	r2, #25
 800301c:	2146      	movs	r1, #70	; 0x46
 800301e:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8003022:	eeb0 0a67 	vmov.f32	s0, s15
 8003026:	f7ff fe59 	bl	8002cdc <map>
 800302a:	4603      	mov	r3, r0
 800302c:	461a      	mov	r2, r3
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <main+0x308>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_GetTick()-hz_t>1000){
 8003034:	f000 fd1a 	bl	8003a6c <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003042:	f67f aeea 	bls.w	8002e1a <main+0xb2>
		  hz_t=HAL_GetTick();
 8003046:	f000 fd11 	bl	8003a6c <HAL_GetTick>
 800304a:	62b8      	str	r0, [r7, #40]	; 0x28
		  log_s_int("HZ",hz);
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	4619      	mov	r1, r3
 8003050:	481a      	ldr	r0, [pc, #104]	; (80030bc <main+0x354>)
 8003052:	f7fe fa0b 	bl	800146c <log_s_int>
		  hz=0;
 8003056:	2300      	movs	r3, #0
 8003058:	80fb      	strh	r3, [r7, #6]
	  GY801_update_data();
 800305a:	e6de      	b.n	8002e1a <main+0xb2>
 800305c:	f3af 8000 	nop.w
 8003060:	54442d18 	.word	0x54442d18
 8003064:	400921fb 	.word	0x400921fb
 8003068:	00000000 	.word	0x00000000
 800306c:	40606000 	.word	0x40606000
 8003070:	200003e8 	.word	0x200003e8
 8003074:	20000430 	.word	0x20000430
 8003078:	0800aa88 	.word	0x0800aa88
 800307c:	20000478 	.word	0x20000478
 8003080:	2000033c 	.word	0x2000033c
 8003084:	20000488 	.word	0x20000488
 8003088:	2000048a 	.word	0x2000048a
 800308c:	2000048c 	.word	0x2000048c
 8003090:	20000490 	.word	0x20000490
 8003094:	20000492 	.word	0x20000492
 8003098:	20000494 	.word	0x20000494
 800309c:	200004a0 	.word	0x200004a0
 80030a0:	200004a8 	.word	0x200004a8
 80030a4:	200004b0 	.word	0x200004b0
 80030a8:	408f4000 	.word	0x408f4000
 80030ac:	40668000 	.word	0x40668000
 80030b0:	41ac8000 	.word	0x41ac8000
 80030b4:	43e10000 	.word	0x43e10000
 80030b8:	43c80000 	.word	0x43c80000
 80030bc:	0800aa90 	.word	0x0800aa90

080030c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b094      	sub	sp, #80	; 0x50
 80030c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c6:	f107 0320 	add.w	r3, r7, #32
 80030ca:	2230      	movs	r2, #48	; 0x30
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fa68 	bl	80075a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	4b28      	ldr	r3, [pc, #160]	; (800318c <SystemClock_Config+0xcc>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	4a27      	ldr	r2, [pc, #156]	; (800318c <SystemClock_Config+0xcc>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <SystemClock_Config+0xcc>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003100:	2300      	movs	r3, #0
 8003102:	607b      	str	r3, [r7, #4]
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <SystemClock_Config+0xd0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800310c:	4a20      	ldr	r2, [pc, #128]	; (8003190 <SystemClock_Config+0xd0>)
 800310e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <SystemClock_Config+0xd0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800311c:	607b      	str	r3, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003120:	2302      	movs	r3, #2
 8003122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003124:	2301      	movs	r3, #1
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003128:	2310      	movs	r3, #16
 800312a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800312c:	2302      	movs	r3, #2
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003134:	2308      	movs	r3, #8
 8003136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003138:	2354      	movs	r3, #84	; 0x54
 800313a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800313c:	2302      	movs	r3, #2
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003140:	2304      	movs	r3, #4
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003144:	f107 0320 	add.w	r3, r7, #32
 8003148:	4618      	mov	r0, r3
 800314a:	f002 fcbf 	bl	8005acc <HAL_RCC_OscConfig>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003154:	f000 f99a 	bl	800348c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003158:	230f      	movs	r3, #15
 800315a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800315c:	2302      	movs	r3, #2
 800315e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800316e:	f107 030c 	add.w	r3, r7, #12
 8003172:	2102      	movs	r1, #2
 8003174:	4618      	mov	r0, r3
 8003176:	f002 ff21 	bl	8005fbc <HAL_RCC_ClockConfig>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003180:	f000 f984 	bl	800348c <Error_Handler>
  }
}
 8003184:	bf00      	nop
 8003186:	3750      	adds	r7, #80	; 0x50
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	40007000 	.word	0x40007000

08003194 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <MX_I2C1_Init+0x50>)
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <MX_I2C1_Init+0x54>)
 800319c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800319e:	4b11      	ldr	r3, [pc, #68]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <MX_I2C1_Init+0x58>)
 80031a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031aa:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031b8:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031d0:	4804      	ldr	r0, [pc, #16]	; (80031e4 <MX_I2C1_Init+0x50>)
 80031d2:	f000 ff19 	bl	8004008 <HAL_I2C_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031dc:	f000 f956 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031e0:	bf00      	nop
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	2000033c 	.word	0x2000033c
 80031e8:	40005400 	.word	0x40005400
 80031ec:	00061a80 	.word	0x00061a80

080031f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031f4:	4b17      	ldr	r3, [pc, #92]	; (8003254 <MX_SPI1_Init+0x64>)
 80031f6:	4a18      	ldr	r2, [pc, #96]	; (8003258 <MX_SPI1_Init+0x68>)
 80031f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <MX_SPI1_Init+0x64>)
 80031fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003200:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <MX_SPI1_Init+0x64>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <MX_SPI1_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800320e:	4b11      	ldr	r3, [pc, #68]	; (8003254 <MX_SPI1_Init+0x64>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_SPI1_Init+0x64>)
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <MX_SPI1_Init+0x64>)
 800321c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003220:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <MX_SPI1_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <MX_SPI1_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <MX_SPI1_Init+0x64>)
 8003230:	2200      	movs	r2, #0
 8003232:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003234:	4b07      	ldr	r3, [pc, #28]	; (8003254 <MX_SPI1_Init+0x64>)
 8003236:	2200      	movs	r2, #0
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <MX_SPI1_Init+0x64>)
 800323c:	220a      	movs	r2, #10
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003240:	4804      	ldr	r0, [pc, #16]	; (8003254 <MX_SPI1_Init+0x64>)
 8003242:	f003 f8d9 	bl	80063f8 <HAL_SPI_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800324c:	f000 f91e 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003250:	bf00      	nop
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20000390 	.word	0x20000390
 8003258:	40013000 	.word	0x40013000

0800325c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003262:	f107 0320 	add.w	r3, r7, #32
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800326c:	1d3b      	adds	r3, r7, #4
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <MX_TIM2_Init+0xb0>)
 8003280:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003284:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8003286:	4b21      	ldr	r3, [pc, #132]	; (800330c <MX_TIM2_Init+0xb0>)
 8003288:	f240 628f 	movw	r2, #1679	; 0x68f
 800328c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <MX_TIM2_Init+0xb0>)
 8003290:	2200      	movs	r2, #0
 8003292:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <MX_TIM2_Init+0xb0>)
 8003296:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800329a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <MX_TIM2_Init+0xb0>)
 800329e:	2200      	movs	r2, #0
 80032a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032a2:	4b1a      	ldr	r3, [pc, #104]	; (800330c <MX_TIM2_Init+0xb0>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032a8:	4818      	ldr	r0, [pc, #96]	; (800330c <MX_TIM2_Init+0xb0>)
 80032aa:	f003 f92e 	bl	800650a <HAL_TIM_PWM_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80032b4:	f000 f8ea 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c0:	f107 0320 	add.w	r3, r7, #32
 80032c4:	4619      	mov	r1, r3
 80032c6:	4811      	ldr	r0, [pc, #68]	; (800330c <MX_TIM2_Init+0xb0>)
 80032c8:	f003 fd12 	bl	8006cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80032d2:	f000 f8db 	bl	800348c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032d6:	2360      	movs	r3, #96	; 0x60
 80032d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2200      	movs	r2, #0
 80032ea:	4619      	mov	r1, r3
 80032ec:	4807      	ldr	r0, [pc, #28]	; (800330c <MX_TIM2_Init+0xb0>)
 80032ee:	f003 fa0b 	bl	8006708 <HAL_TIM_PWM_ConfigChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80032f8:	f000 f8c8 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032fc:	4803      	ldr	r0, [pc, #12]	; (800330c <MX_TIM2_Init+0xb0>)
 80032fe:	f000 f9a3 	bl	8003648 <HAL_TIM_MspPostInit>

}
 8003302:	bf00      	nop
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	200003e8 	.word	0x200003e8

08003310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <MX_USART1_UART_Init+0x4c>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <MX_USART1_UART_Init+0x50>)
 8003318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <MX_USART1_UART_Init+0x4c>)
 800331c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <MX_USART1_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <MX_USART1_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <MX_USART1_UART_Init+0x4c>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <MX_USART1_UART_Init+0x4c>)
 8003336:	220c      	movs	r2, #12
 8003338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <MX_USART1_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_USART1_UART_Init+0x4c>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <MX_USART1_UART_Init+0x4c>)
 8003348:	f003 fd40 	bl	8006dcc <HAL_UART_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003352:	f000 f89b 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000430 	.word	0x20000430
 8003360:	40011000 	.word	0x40011000

08003364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	60da      	str	r2, [r3, #12]
 8003378:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <MX_GPIO_Init+0xf4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a35      	ldr	r2, [pc, #212]	; (8003458 <MX_GPIO_Init+0xf4>)
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b33      	ldr	r3, [pc, #204]	; (8003458 <MX_GPIO_Init+0xf4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <MX_GPIO_Init+0xf4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a2e      	ldr	r2, [pc, #184]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a27      	ldr	r2, [pc, #156]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033d8:	f043 0302 	orr.w	r3, r3, #2
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <MX_GPIO_Init+0xf4>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 80033ea:	2200      	movs	r2, #0
 80033ec:	2111      	movs	r1, #17
 80033ee:	481b      	ldr	r0, [pc, #108]	; (800345c <MX_GPIO_Init+0xf8>)
 80033f0:	f000 fdd6 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80033f4:	2200      	movs	r2, #0
 80033f6:	2110      	movs	r1, #16
 80033f8:	4819      	ldr	r0, [pc, #100]	; (8003460 <MX_GPIO_Init+0xfc>)
 80033fa:	f000 fdd1 	bl	8003fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80033fe:	2311      	movs	r3, #17
 8003400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003402:	2301      	movs	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800340e:	f107 0314 	add.w	r3, r7, #20
 8003412:	4619      	mov	r1, r3
 8003414:	4811      	ldr	r0, [pc, #68]	; (800345c <MX_GPIO_Init+0xf8>)
 8003416:	f000 fc3f 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800341a:	2310      	movs	r3, #16
 800341c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003426:	2300      	movs	r3, #0
 8003428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800342a:	f107 0314 	add.w	r3, r7, #20
 800342e:	4619      	mov	r1, r3
 8003430:	480b      	ldr	r0, [pc, #44]	; (8003460 <MX_GPIO_Init+0xfc>)
 8003432:	f000 fc31 	bl	8003c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	; (8003464 <MX_GPIO_Init+0x100>)
 800344c:	f000 fc24 	bl	8003c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003450:	bf00      	nop
 8003452:	3728      	adds	r7, #40	; 0x28
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	40020800 	.word	0x40020800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400

08003468 <blink_stmled>:

/* USER CODE BEGIN 4 */
void blink_stmled(){
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800346c:	2101      	movs	r1, #1
 800346e:	4806      	ldr	r0, [pc, #24]	; (8003488 <blink_stmled+0x20>)
 8003470:	f000 fdaf 	bl	8003fd2 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8003474:	2064      	movs	r0, #100	; 0x64
 8003476:	f000 fb05 	bl	8003a84 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 800347a:	2101      	movs	r1, #1
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <blink_stmled+0x20>)
 800347e:	f000 fda8 	bl	8003fd2 <HAL_GPIO_TogglePin>
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40020800 	.word	0x40020800

0800348c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003494:	e7fe      	b.n	8003494 <Error_Handler+0x8>
	...

08003498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <HAL_MspInit+0x4c>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a0f      	ldr	r2, [pc, #60]	; (80034e4 <HAL_MspInit+0x4c>)
 80034a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HAL_MspInit+0x4c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_MspInit+0x4c>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a08      	ldr	r2, [pc, #32]	; (80034e4 <HAL_MspInit+0x4c>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_MspInit+0x4c>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800

080034e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a19      	ldr	r2, [pc, #100]	; (800356c <HAL_I2C_MspInit+0x84>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d12b      	bne.n	8003562 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	4b18      	ldr	r3, [pc, #96]	; (8003570 <HAL_I2C_MspInit+0x88>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a17      	ldr	r2, [pc, #92]	; (8003570 <HAL_I2C_MspInit+0x88>)
 8003514:	f043 0302 	orr.w	r3, r3, #2
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_I2C_MspInit+0x88>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003526:	23c0      	movs	r3, #192	; 0xc0
 8003528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800352a:	2312      	movs	r3, #18
 800352c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003536:	2304      	movs	r3, #4
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800353a:	f107 0314 	add.w	r3, r7, #20
 800353e:	4619      	mov	r1, r3
 8003540:	480c      	ldr	r0, [pc, #48]	; (8003574 <HAL_I2C_MspInit+0x8c>)
 8003542:	f000 fba9 	bl	8003c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_I2C_MspInit+0x88>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_I2C_MspInit+0x88>)
 8003550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b06      	ldr	r3, [pc, #24]	; (8003570 <HAL_I2C_MspInit+0x88>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003562:	bf00      	nop
 8003564:	3728      	adds	r7, #40	; 0x28
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40005400 	.word	0x40005400
 8003570:	40023800 	.word	0x40023800
 8003574:	40020400 	.word	0x40020400

08003578 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <HAL_SPI_MspInit+0x84>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12b      	bne.n	80035f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <HAL_SPI_MspInit+0x88>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_SPI_MspInit+0x88>)
 80035a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <HAL_SPI_MspInit+0x88>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_SPI_MspInit+0x88>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_SPI_MspInit+0x88>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	; 0x30
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <HAL_SPI_MspInit+0x88>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80035d2:	23e0      	movs	r3, #224	; 0xe0
 80035d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035e2:	2305      	movs	r3, #5
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	4619      	mov	r1, r3
 80035ec:	4805      	ldr	r0, [pc, #20]	; (8003604 <HAL_SPI_MspInit+0x8c>)
 80035ee:	f000 fb53 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80035f2:	bf00      	nop
 80035f4:	3728      	adds	r7, #40	; 0x28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40013000 	.word	0x40013000
 8003600:	40023800 	.word	0x40023800
 8003604:	40020000 	.word	0x40020000

08003608 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d10d      	bne.n	8003636 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_TIM_PWM_MspInit+0x3c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_TIM_PWM_MspInit+0x3c>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_TIM_PWM_MspInit+0x3c>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 030c 	add.w	r3, r7, #12
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d11e      	bne.n	80036a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <HAL_TIM_MspPostInit+0x68>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <HAL_TIM_MspPostInit+0x68>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <HAL_TIM_MspPostInit+0x68>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800368c:	2302      	movs	r3, #2
 800368e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	4619      	mov	r1, r3
 80036a2:	4804      	ldr	r0, [pc, #16]	; (80036b4 <HAL_TIM_MspPostInit+0x6c>)
 80036a4:	f000 faf8 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036a8:	bf00      	nop
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40020000 	.word	0x40020000

080036b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_UART_MspInit+0x84>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d12c      	bne.n	8003734 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <HAL_UART_MspInit+0x88>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	4a17      	ldr	r2, [pc, #92]	; (8003740 <HAL_UART_MspInit+0x88>)
 80036e4:	f043 0310 	orr.w	r3, r3, #16
 80036e8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_UART_MspInit+0x88>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_UART_MspInit+0x88>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <HAL_UART_MspInit+0x88>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_UART_MspInit+0x88>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003712:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003720:	2303      	movs	r3, #3
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003724:	2307      	movs	r3, #7
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4619      	mov	r1, r3
 800372e:	4805      	ldr	r0, [pc, #20]	; (8003744 <HAL_UART_MspInit+0x8c>)
 8003730:	f000 fab2 	bl	8003c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40011000 	.word	0x40011000
 8003740:	40023800 	.word	0x40023800
 8003744:	40020000 	.word	0x40020000

08003748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800374c:	e7fe      	b.n	800374c <NMI_Handler+0x4>

0800374e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003752:	e7fe      	b.n	8003752 <HardFault_Handler+0x4>

08003754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003758:	e7fe      	b.n	8003758 <MemManage_Handler+0x4>

0800375a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <BusFault_Handler+0x4>

08003760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <UsageFault_Handler+0x4>

08003766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003794:	f000 f956 	bl	8003a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}

0800379c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
	return 1;
 80037a0:	2301      	movs	r3, #1
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_kill>:

int _kill(int pid, int sig)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037b6:	f003 fecb 	bl	8007550 <__errno>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2216      	movs	r2, #22
 80037be:	601a      	str	r2, [r3, #0]
	return -1;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_exit>:

void _exit (int status)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffe7 	bl	80037ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80037de:	e7fe      	b.n	80037de <_exit+0x12>

080037e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e00a      	b.n	8003808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037f2:	f3af 8000 	nop.w
 80037f6:	4601      	mov	r1, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	60ba      	str	r2, [r7, #8]
 80037fe:	b2ca      	uxtb	r2, r1
 8003800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	3301      	adds	r3, #1
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	dbf0      	blt.n	80037f2 <_read+0x12>
	}

return len;
 8003810:	687b      	ldr	r3, [r7, #4]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e009      	b.n	8003840 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	60ba      	str	r2, [r7, #8]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	429a      	cmp	r2, r3
 8003846:	dbf1      	blt.n	800382c <_write+0x12>
	}
	return len;
 8003848:	687b      	ldr	r3, [r7, #4]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <_close>:

int _close(int file)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
	return -1;
 800385a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800387a:	605a      	str	r2, [r3, #4]
	return 0;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <_isatty>:

int _isatty(int file)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	return 1;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
	return 0;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
	...

080038bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038c4:	4a14      	ldr	r2, [pc, #80]	; (8003918 <_sbrk+0x5c>)
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <_sbrk+0x60>)
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <_sbrk+0x64>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <_sbrk+0x64>)
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <_sbrk+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <_sbrk+0x64>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d207      	bcs.n	80038fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038ec:	f003 fe30 	bl	8007550 <__errno>
 80038f0:	4603      	mov	r3, r0
 80038f2:	220c      	movs	r2, #12
 80038f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038fa:	e009      	b.n	8003910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003902:	4b07      	ldr	r3, [pc, #28]	; (8003920 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	4a05      	ldr	r2, [pc, #20]	; (8003920 <_sbrk+0x64>)
 800390c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800390e:	68fb      	ldr	r3, [r7, #12]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20018000 	.word	0x20018000
 800391c:	00000400 	.word	0x00000400
 8003920:	200004b8 	.word	0x200004b8
 8003924:	200004d0 	.word	0x200004d0

08003928 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <SystemInit+0x20>)
 800392e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003932:	4a05      	ldr	r2, [pc, #20]	; (8003948 <SystemInit+0x20>)
 8003934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	e000ed00 	.word	0xe000ed00

0800394c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800394c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003950:	480d      	ldr	r0, [pc, #52]	; (8003988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003952:	490e      	ldr	r1, [pc, #56]	; (800398c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003954:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003958:	e002      	b.n	8003960 <LoopCopyDataInit>

0800395a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800395a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800395c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800395e:	3304      	adds	r3, #4

08003960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003964:	d3f9      	bcc.n	800395a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003966:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003968:	4c0b      	ldr	r4, [pc, #44]	; (8003998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800396a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800396c:	e001      	b.n	8003972 <LoopFillZerobss>

0800396e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800396e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003970:	3204      	adds	r2, #4

08003972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003974:	d3fb      	bcc.n	800396e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003976:	f7ff ffd7 	bl	8003928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800397a:	f003 fdef 	bl	800755c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800397e:	f7ff f9f3 	bl	8002d68 <main>
  bx  lr    
 8003982:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003984:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800398c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003990:	0800aecc 	.word	0x0800aecc
  ldr r2, =_sbss
 8003994:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003998:	200004d0 	.word	0x200004d0

0800399c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800399c:	e7fe      	b.n	800399c <ADC_IRQHandler>
	...

080039a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <HAL_Init+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0d      	ldr	r2, [pc, #52]	; (80039e0 <HAL_Init+0x40>)
 80039aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_Init+0x40>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <HAL_Init+0x40>)
 80039b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <HAL_Init+0x40>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a07      	ldr	r2, [pc, #28]	; (80039e0 <HAL_Init+0x40>)
 80039c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039c8:	2003      	movs	r0, #3
 80039ca:	f000 f931 	bl	8003c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ce:	200f      	movs	r0, #15
 80039d0:	f000 f808 	bl	80039e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039d4:	f7ff fd60 	bl	8003498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023c00 	.word	0x40023c00

080039e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039ec:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <HAL_InitTick+0x54>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <HAL_InitTick+0x58>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80039fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f93b 	bl	8003c7e <HAL_SYSTICK_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00e      	b.n	8003a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b0f      	cmp	r3, #15
 8003a16:	d80a      	bhi.n	8003a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a20:	f000 f911 	bl	8003c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a24:	4a06      	ldr	r2, [pc, #24]	; (8003a40 <HAL_InitTick+0x5c>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	e000      	b.n	8003a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	20000008 	.word	0x20000008
 8003a40:	20000004 	.word	0x20000004

08003a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a48:	4b06      	ldr	r3, [pc, #24]	; (8003a64 <HAL_IncTick+0x20>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_IncTick+0x24>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4413      	add	r3, r2
 8003a54:	4a04      	ldr	r2, [pc, #16]	; (8003a68 <HAL_IncTick+0x24>)
 8003a56:	6013      	str	r3, [r2, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000008 	.word	0x20000008
 8003a68:	200004bc 	.word	0x200004bc

08003a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <HAL_GetTick+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	200004bc 	.word	0x200004bc

08003a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a8c:	f7ff ffee 	bl	8003a6c <HAL_GetTick>
 8003a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a9c:	d005      	beq.n	8003aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <HAL_Delay+0x44>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aaa:	bf00      	nop
 8003aac:	f7ff ffde 	bl	8003a6c <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d8f7      	bhi.n	8003aac <HAL_Delay+0x28>
  {
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000008 	.word	0x20000008

08003acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae8:	4013      	ands	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afe:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <__NVIC_SetPriorityGrouping+0x44>)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	60d3      	str	r3, [r2, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <__NVIC_GetPriorityGrouping+0x18>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	f003 0307 	and.w	r3, r3, #7
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	e000ed00 	.word	0xe000ed00

08003b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	6039      	str	r1, [r7, #0]
 8003b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	db0a      	blt.n	8003b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	490c      	ldr	r1, [pc, #48]	; (8003b7c <__NVIC_SetPriority+0x4c>)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	440b      	add	r3, r1
 8003b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b58:	e00a      	b.n	8003b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4908      	ldr	r1, [pc, #32]	; (8003b80 <__NVIC_SetPriority+0x50>)
 8003b60:	79fb      	ldrb	r3, [r7, #7]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	3b04      	subs	r3, #4
 8003b68:	0112      	lsls	r2, r2, #4
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	761a      	strb	r2, [r3, #24]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000e100 	.word	0xe000e100
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b089      	sub	sp, #36	; 0x24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f1c3 0307 	rsb	r3, r3, #7
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	bf28      	it	cs
 8003ba2:	2304      	movcs	r3, #4
 8003ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	2b06      	cmp	r3, #6
 8003bac:	d902      	bls.n	8003bb4 <NVIC_EncodePriority+0x30>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3b03      	subs	r3, #3
 8003bb2:	e000      	b.n	8003bb6 <NVIC_EncodePriority+0x32>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	401a      	ands	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd6:	43d9      	mvns	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bdc:	4313      	orrs	r3, r2
         );
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3724      	adds	r7, #36	; 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
	...

08003bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bfc:	d301      	bcc.n	8003c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e00f      	b.n	8003c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c02:	4a0a      	ldr	r2, [pc, #40]	; (8003c2c <SysTick_Config+0x40>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c0a:	210f      	movs	r1, #15
 8003c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c10:	f7ff ff8e 	bl	8003b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c14:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <SysTick_Config+0x40>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1a:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <SysTick_Config+0x40>)
 8003c1c:	2207      	movs	r2, #7
 8003c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	e000e010 	.word	0xe000e010

08003c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff ff47 	bl	8003acc <__NVIC_SetPriorityGrouping>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b086      	sub	sp, #24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c58:	f7ff ff5c 	bl	8003b14 <__NVIC_GetPriorityGrouping>
 8003c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff8e 	bl	8003b84 <NVIC_EncodePriority>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff5d 	bl	8003b30 <__NVIC_SetPriority>
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff ffb0 	bl	8003bec <SysTick_Config>
 8003c8c:	4603      	mov	r3, r0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e159      	b.n	8003f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	f040 8148 	bne.w	8003f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d005      	beq.n	8003cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d130      	bne.n	8003d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	091b      	lsrs	r3, r3, #4
 8003d36:	f003 0201 	and.w	r2, r3, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d017      	beq.n	8003d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 0303 	and.w	r3, r3, #3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d123      	bne.n	8003ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	08da      	lsrs	r2, r3, #3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3208      	adds	r2, #8
 8003d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	220f      	movs	r2, #15
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	08da      	lsrs	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3208      	adds	r2, #8
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	2203      	movs	r2, #3
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	4013      	ands	r3, r2
 8003df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80a2 	beq.w	8003f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	4b57      	ldr	r3, [pc, #348]	; (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	4a56      	ldr	r2, [pc, #344]	; (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e2e:	4b54      	ldr	r3, [pc, #336]	; (8003f80 <HAL_GPIO_Init+0x2e8>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3a:	4a52      	ldr	r2, [pc, #328]	; (8003f84 <HAL_GPIO_Init+0x2ec>)
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	3302      	adds	r3, #2
 8003e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	220f      	movs	r2, #15
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a49      	ldr	r2, [pc, #292]	; (8003f88 <HAL_GPIO_Init+0x2f0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d019      	beq.n	8003e9a <HAL_GPIO_Init+0x202>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a48      	ldr	r2, [pc, #288]	; (8003f8c <HAL_GPIO_Init+0x2f4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_GPIO_Init+0x1fe>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a47      	ldr	r2, [pc, #284]	; (8003f90 <HAL_GPIO_Init+0x2f8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00d      	beq.n	8003e92 <HAL_GPIO_Init+0x1fa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a46      	ldr	r2, [pc, #280]	; (8003f94 <HAL_GPIO_Init+0x2fc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <HAL_GPIO_Init+0x1f6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a45      	ldr	r2, [pc, #276]	; (8003f98 <HAL_GPIO_Init+0x300>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <HAL_GPIO_Init+0x1f2>
 8003e86:	2304      	movs	r3, #4
 8003e88:	e008      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e8a:	2307      	movs	r3, #7
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_Init+0x204>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eac:	4935      	ldr	r1, [pc, #212]	; (8003f84 <HAL_GPIO_Init+0x2ec>)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ede:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f08:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f0e:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f5c:	4a0f      	ldr	r2, [pc, #60]	; (8003f9c <HAL_GPIO_Init+0x304>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	f67f aea2 	bls.w	8003cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3724      	adds	r7, #36	; 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40013c00 	.word	0x40013c00

08003fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	807b      	strh	r3, [r7, #2]
 8003fac:	4613      	mov	r3, r2
 8003fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb0:	787b      	ldrb	r3, [r7, #1]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fb6:	887a      	ldrh	r2, [r7, #2]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fbc:	e003      	b.n	8003fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fbe:	887b      	ldrh	r3, [r7, #2]
 8003fc0:	041a      	lsls	r2, r3, #16
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	619a      	str	r2, [r3, #24]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b085      	sub	sp, #20
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	460b      	mov	r3, r1
 8003fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	041a      	lsls	r2, r3, #16
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	43d9      	mvns	r1, r3
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e12b      	b.n	8004272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fa5a 	bl	80034e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800405a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800406c:	f002 f99c 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8004070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a81      	ldr	r2, [pc, #516]	; (800427c <HAL_I2C_Init+0x274>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d807      	bhi.n	800408c <HAL_I2C_Init+0x84>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a80      	ldr	r2, [pc, #512]	; (8004280 <HAL_I2C_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e006      	b.n	800409a <HAL_I2C_Init+0x92>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a7d      	ldr	r2, [pc, #500]	; (8004284 <HAL_I2C_Init+0x27c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e7      	b.n	8004272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a78      	ldr	r2, [pc, #480]	; (8004288 <HAL_I2C_Init+0x280>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a6a      	ldr	r2, [pc, #424]	; (800427c <HAL_I2C_Init+0x274>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d802      	bhi.n	80040dc <HAL_I2C_Init+0xd4>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	e009      	b.n	80040f0 <HAL_I2C_Init+0xe8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a69      	ldr	r2, [pc, #420]	; (800428c <HAL_I2C_Init+0x284>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	3301      	adds	r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004102:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	495c      	ldr	r1, [pc, #368]	; (800427c <HAL_I2C_Init+0x274>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d819      	bhi.n	8004144 <HAL_I2C_Init+0x13c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e59      	subs	r1, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fbb1 f3f3 	udiv	r3, r1, r3
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004124:	400b      	ands	r3, r1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_I2C_Init+0x138>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e59      	subs	r1, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb1 f3f3 	udiv	r3, r1, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	e051      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004140:	2304      	movs	r3, #4
 8004142:	e04f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <HAL_I2C_Init+0x168>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e012      	b.n	8004196 <HAL_I2C_Init+0x18e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	0099      	lsls	r1, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x196>
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10e      	bne.n	80041c4 <HAL_I2C_Init+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e58      	subs	r0, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	440b      	add	r3, r1
 80041b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6809      	ldr	r1, [r1, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004212:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6911      	ldr	r1, [r2, #16]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	000186a0 	.word	0x000186a0
 8004280:	001e847f 	.word	0x001e847f
 8004284:	003d08ff 	.word	0x003d08ff
 8004288:	431bde83 	.word	0x431bde83
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b088      	sub	sp, #32
 8004294:	af02      	add	r7, sp, #8
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	817b      	strh	r3, [r7, #10]
 80042a0:	4613      	mov	r3, r2
 80042a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042a4:	f7ff fbe2 	bl	8003a6c <HAL_GetTick>
 80042a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	f040 80e0 	bne.w	8004478 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	2319      	movs	r3, #25
 80042be:	2201      	movs	r2, #1
 80042c0:	4970      	ldr	r1, [pc, #448]	; (8004484 <HAL_I2C_Master_Transmit+0x1f4>)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f001 fa24 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0d3      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_I2C_Master_Transmit+0x50>
 80042dc:	2302      	movs	r3, #2
 80042de:	e0cc      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d007      	beq.n	8004306 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004314:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2210      	movs	r2, #16
 8004322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433c:	b29a      	uxth	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a50      	ldr	r2, [pc, #320]	; (8004488 <HAL_I2C_Master_Transmit+0x1f8>)
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004348:	8979      	ldrh	r1, [r7, #10]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 ff10 	bl	8005174 <I2C_MasterRequestWrite>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e08d      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435e:	2300      	movs	r3, #0
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	613b      	str	r3, [r7, #16]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004374:	e066      	b.n	8004444 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	6a39      	ldr	r1, [r7, #32]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 fa9e 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00d      	beq.n	80043a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2b04      	cmp	r3, #4
 800438c:	d107      	bne.n	800439e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e06b      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d11b      	bne.n	8004418 <HAL_I2C_Master_Transmit+0x188>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d017      	beq.n	8004418 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	6a39      	ldr	r1, [r7, #32]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f001 fa8e 	bl	800593e <I2C_WaitOnBTFFlagUntilTimeout>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00d      	beq.n	8004444 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	2b04      	cmp	r3, #4
 800442e:	d107      	bne.n	8004440 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e01a      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	2b00      	cmp	r3, #0
 800444a:	d194      	bne.n	8004376 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	e000      	b.n	800447a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004478:	2302      	movs	r3, #2
  }
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	00100002 	.word	0x00100002
 8004488:	ffff0000 	.word	0xffff0000

0800448c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	461a      	mov	r2, r3
 8004498:	460b      	mov	r3, r1
 800449a:	817b      	strh	r3, [r7, #10]
 800449c:	4613      	mov	r3, r2
 800449e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a0:	f7ff fae4 	bl	8003a6c <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	f040 820b 	bne.w	80048ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	2319      	movs	r3, #25
 80044ba:	2201      	movs	r2, #1
 80044bc:	497c      	ldr	r1, [pc, #496]	; (80046b0 <HAL_I2C_Master_Receive+0x224>)
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f001 f926 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80044ca:	2302      	movs	r3, #2
 80044cc:	e1fe      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_I2C_Master_Receive+0x50>
 80044d8:	2302      	movs	r3, #2
 80044da:	e1f7      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d007      	beq.n	8004502 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2222      	movs	r2, #34	; 0x22
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2210      	movs	r2, #16
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	893a      	ldrh	r2, [r7, #8]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a5c      	ldr	r2, [pc, #368]	; (80046b4 <HAL_I2C_Master_Receive+0x228>)
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004544:	8979      	ldrh	r1, [r7, #10]
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fe94 	bl	8005278 <I2C_MasterRequestRead>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1b8      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d113      	bne.n	800458a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	623b      	str	r3, [r7, #32]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	623b      	str	r3, [r7, #32]
 8004576:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e18c      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	2b01      	cmp	r3, #1
 8004590:	d11b      	bne.n	80045ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e16c      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d11b      	bne.n	800460a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	e14c      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004630:	e138      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004636:	2b03      	cmp	r3, #3
 8004638:	f200 80f1 	bhi.w	800481e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b01      	cmp	r3, #1
 8004642:	d123      	bne.n	800468c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004646:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f001 f9b9 	bl	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e139      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b29a      	uxth	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	855a      	strh	r2, [r3, #42]	; 0x2a
 800468a:	e10b      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	2b02      	cmp	r3, #2
 8004692:	d14e      	bne.n	8004732 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	2200      	movs	r2, #0
 800469c:	4906      	ldr	r1, [pc, #24]	; (80046b8 <HAL_I2C_Master_Receive+0x22c>)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f001 f836 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d008      	beq.n	80046bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e10e      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
 80046ae:	bf00      	nop
 80046b0:	00100002 	.word	0x00100002
 80046b4:	ffff0000 	.word	0xffff0000
 80046b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691a      	ldr	r2, [r3, #16]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	3b01      	subs	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	3b01      	subs	r3, #1
 800471c:	b29a      	uxth	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004730:	e0b8      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2200      	movs	r2, #0
 800473a:	4966      	ldr	r1, [pc, #408]	; (80048d4 <HAL_I2C_Master_Receive+0x448>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 ffe7 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0bf      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2200      	movs	r2, #0
 8004796:	494f      	ldr	r1, [pc, #316]	; (80048d4 <HAL_I2C_Master_Receive+0x448>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 ffb9 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e091      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004812:	b29b      	uxth	r3, r3
 8004814:	3b01      	subs	r3, #1
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800481c:	e042      	b.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f001 f8cc 	bl	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e04c      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483c:	b2d2      	uxtb	r2, r2
 800483e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d118      	bne.n	80048a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489a:	b29b      	uxth	r3, r3
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f47f aec2 	bne.w	8004632 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3728      	adds	r7, #40	; 0x28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00010004 	.word	0x00010004

080048d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	460b      	mov	r3, r1
 80048ec:	813b      	strh	r3, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048f2:	f7ff f8bb 	bl	8003a6c <HAL_GetTick>
 80048f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	f040 80d9 	bne.w	8004ab8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2319      	movs	r3, #25
 800490c:	2201      	movs	r2, #1
 800490e:	496d      	ldr	r1, [pc, #436]	; (8004ac4 <HAL_I2C_Mem_Write+0x1ec>)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 fefd 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800491c:	2302      	movs	r3, #2
 800491e:	e0cc      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_I2C_Mem_Write+0x56>
 800492a:	2302      	movs	r3, #2
 800492c:	e0c5      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d007      	beq.n	8004954 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004962:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2221      	movs	r2, #33	; 0x21
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2240      	movs	r2, #64	; 0x40
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	4a4d      	ldr	r2, [pc, #308]	; (8004ac8 <HAL_I2C_Mem_Write+0x1f0>)
 8004994:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004996:	88f8      	ldrh	r0, [r7, #6]
 8004998:	893a      	ldrh	r2, [r7, #8]
 800499a:	8979      	ldrh	r1, [r7, #10]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4603      	mov	r3, r0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 fd34 	bl	8005414 <I2C_RequestMemoryWrite>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d052      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e081      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 ff7e 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00d      	beq.n	80049e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d107      	bne.n	80049de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e06b      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	1c5a      	adds	r2, r3, #1
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d11b      	bne.n	8004a58 <HAL_I2C_Mem_Write+0x180>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d017      	beq.n	8004a58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	781a      	ldrb	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1aa      	bne.n	80049b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f000 ff6a 	bl	800593e <I2C_WaitOnBTFFlagUntilTimeout>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00d      	beq.n	8004a8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d107      	bne.n	8004a88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e016      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e000      	b.n	8004aba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ab8:	2302      	movs	r3, #2
  }
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	00100002 	.word	0x00100002
 8004ac8:	ffff0000 	.word	0xffff0000

08004acc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	; 0x30
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4603      	mov	r3, r0
 8004adc:	817b      	strh	r3, [r7, #10]
 8004ade:	460b      	mov	r3, r1
 8004ae0:	813b      	strh	r3, [r7, #8]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ae6:	f7fe ffc1 	bl	8003a6c <HAL_GetTick>
 8004aea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b20      	cmp	r3, #32
 8004af6:	f040 8208 	bne.w	8004f0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	2319      	movs	r3, #25
 8004b00:	2201      	movs	r2, #1
 8004b02:	497b      	ldr	r1, [pc, #492]	; (8004cf0 <HAL_I2C_Mem_Read+0x224>)
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fe03 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
 8004b12:	e1fb      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2C_Mem_Read+0x56>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e1f4      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d007      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2222      	movs	r2, #34	; 0x22
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2240      	movs	r2, #64	; 0x40
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a5b      	ldr	r2, [pc, #364]	; (8004cf4 <HAL_I2C_Mem_Read+0x228>)
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b8a:	88f8      	ldrh	r0, [r7, #6]
 8004b8c:	893a      	ldrh	r2, [r7, #8]
 8004b8e:	8979      	ldrh	r1, [r7, #10]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fcd0 	bl	8005540 <I2C_RequestMemoryRead>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e1b0      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d113      	bne.n	8004bda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	623b      	str	r3, [r7, #32]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	623b      	str	r3, [r7, #32]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	623b      	str	r3, [r7, #32]
 8004bc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e184      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d11b      	bne.n	8004c1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e164      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d11b      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c42:	2300      	movs	r3, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	e144      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c70:	e138      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	f200 80f1 	bhi.w	8004e5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d123      	bne.n	8004ccc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fe99 	bl	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e139      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cca:	e10b      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d14e      	bne.n	8004d72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4906      	ldr	r1, [pc, #24]	; (8004cf8 <HAL_I2C_Mem_Read+0x22c>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fd16 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e10e      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
 8004cee:	bf00      	nop
 8004cf0:	00100002 	.word	0x00100002
 8004cf4:	ffff0000 	.word	0xffff0000
 8004cf8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d70:	e0b8      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	9300      	str	r3, [sp, #0]
 8004d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	4966      	ldr	r1, [pc, #408]	; (8004f14 <HAL_I2C_Mem_Read+0x448>)
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fcc7 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0bf      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	494f      	ldr	r1, [pc, #316]	; (8004f14 <HAL_I2C_Mem_Read+0x448>)
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fc99 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e091      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e5c:	e042      	b.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fdac 	bl	80059c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e04c      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d118      	bne.n	8004ee4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	b2d2      	uxtb	r2, r2
 8004ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f47f aec2 	bne.w	8004c72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
  }
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3728      	adds	r7, #40	; 0x28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	00010004 	.word	0x00010004

08004f18 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	; 0x28
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	460b      	mov	r3, r1
 8004f26:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004f28:	f7fe fda0 	bl	8003a6c <HAL_GetTick>
 8004f2c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	f040 8111 	bne.w	8005162 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2319      	movs	r3, #25
 8004f46:	2201      	movs	r2, #1
 8004f48:	4988      	ldr	r1, [pc, #544]	; (800516c <HAL_I2C_IsDeviceReady+0x254>)
 8004f4a:	68f8      	ldr	r0, [r7, #12]
 8004f4c:	f000 fbe0 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004f56:	2302      	movs	r3, #2
 8004f58:	e104      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_I2C_IsDeviceReady+0x50>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0fd      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d007      	beq.n	8004f8e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a70      	ldr	r2, [pc, #448]	; (8005170 <HAL_I2C_IsDeviceReady+0x258>)
 8004fb0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fb9e 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00d      	beq.n	8004ff6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe8:	d103      	bne.n	8004ff2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0b6      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005004:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005006:	f7fe fd31 	bl	8003a6c <HAL_GetTick>
 800500a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b02      	cmp	r3, #2
 8005018:	bf0c      	ite	eq
 800501a:	2301      	moveq	r3, #1
 800501c:	2300      	movne	r3, #0
 800501e:	b2db      	uxtb	r3, r3
 8005020:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800503a:	e025      	b.n	8005088 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800503c:	f7fe fd16 	bl	8003a6c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d302      	bcc.n	8005052 <HAL_I2C_IsDeviceReady+0x13a>
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	22a0      	movs	r2, #160	; 0xa0
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b02      	cmp	r3, #2
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	bf0c      	ite	eq
 8005080:	2301      	moveq	r3, #1
 8005082:	2300      	movne	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2ba0      	cmp	r3, #160	; 0xa0
 8005092:	d005      	beq.n	80050a0 <HAL_I2C_IsDeviceReady+0x188>
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_I2C_IsDeviceReady+0x188>
 800509a:	7dbb      	ldrb	r3, [r7, #22]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0cd      	beq.n	800503c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d129      	bne.n	800510a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]
 80050da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	2319      	movs	r3, #25
 80050e2:	2201      	movs	r2, #1
 80050e4:	4921      	ldr	r1, [pc, #132]	; (800516c <HAL_I2C_IsDeviceReady+0x254>)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fb12 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e036      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	e02c      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005118:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005122:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2319      	movs	r3, #25
 800512a:	2201      	movs	r2, #1
 800512c:	490f      	ldr	r1, [pc, #60]	; (800516c <HAL_I2C_IsDeviceReady+0x254>)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 faee 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e012      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	3301      	adds	r3, #1
 8005142:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	429a      	cmp	r2, r3
 800514a:	f4ff af32 	bcc.w	8004fb2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	00100002 	.word	0x00100002
 8005170:	ffff0000 	.word	0xffff0000

08005174 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af02      	add	r7, sp, #8
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	607a      	str	r2, [r7, #4]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	460b      	mov	r3, r1
 8005182:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005188:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d006      	beq.n	800519e <I2C_MasterRequestWrite+0x2a>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d003      	beq.n	800519e <I2C_MasterRequestWrite+0x2a>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800519c:	d108      	bne.n	80051b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e00b      	b.n	80051c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	2b12      	cmp	r3, #18
 80051b6:	d107      	bne.n	80051c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fa9b 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ee:	d103      	bne.n	80051f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e035      	b.n	8005268 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005204:	d108      	bne.n	8005218 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005214:	611a      	str	r2, [r3, #16]
 8005216:	e01b      	b.n	8005250 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005218:	897b      	ldrh	r3, [r7, #10]
 800521a:	11db      	asrs	r3, r3, #7
 800521c:	b2db      	uxtb	r3, r3
 800521e:	f003 0306 	and.w	r3, r3, #6
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f063 030f 	orn	r3, r3, #15
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	490e      	ldr	r1, [pc, #56]	; (8005270 <I2C_MasterRequestWrite+0xfc>)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fac1 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e010      	b.n	8005268 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005246:	897b      	ldrh	r3, [r7, #10]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	4907      	ldr	r1, [pc, #28]	; (8005274 <I2C_MasterRequestWrite+0x100>)
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fab1 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	00010008 	.word	0x00010008
 8005274:	00010002 	.word	0x00010002

08005278 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	460b      	mov	r3, r1
 8005286:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800529c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d006      	beq.n	80052b2 <I2C_MasterRequestRead+0x3a>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d003      	beq.n	80052b2 <I2C_MasterRequestRead+0x3a>
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052b0:	d108      	bne.n	80052c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e00b      	b.n	80052dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	2b11      	cmp	r3, #17
 80052ca:	d107      	bne.n	80052dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e8:	68f8      	ldr	r0, [r7, #12]
 80052ea:	f000 fa11 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	d103      	bne.n	800530c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e079      	b.n	8005404 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005318:	d108      	bne.n	800532c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	b2da      	uxtb	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	611a      	str	r2, [r3, #16]
 800532a:	e05f      	b.n	80053ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800532c:	897b      	ldrh	r3, [r7, #10]
 800532e:	11db      	asrs	r3, r3, #7
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0306 	and.w	r3, r3, #6
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f063 030f 	orn	r3, r3, #15
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4930      	ldr	r1, [pc, #192]	; (800540c <I2C_MasterRequestRead+0x194>)
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa37 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e054      	b.n	8005404 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4929      	ldr	r1, [pc, #164]	; (8005410 <I2C_MasterRequestRead+0x198>)
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 fa27 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e044      	b.n	8005404 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537a:	2300      	movs	r3, #0
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 f9af 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00d      	beq.n	80053d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c6:	d103      	bne.n	80053d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ce:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e017      	b.n	8005404 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80053d4:	897b      	ldrh	r3, [r7, #10]
 80053d6:	11db      	asrs	r3, r3, #7
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	f003 0306 	and.w	r3, r3, #6
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f063 030e 	orn	r3, r3, #14
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4907      	ldr	r1, [pc, #28]	; (8005410 <I2C_MasterRequestRead+0x198>)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f9e3 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	00010008 	.word	0x00010008
 8005410:	00010002 	.word	0x00010002

08005414 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	461a      	mov	r2, r3
 8005422:	4603      	mov	r3, r0
 8005424:	817b      	strh	r3, [r7, #10]
 8005426:	460b      	mov	r3, r1
 8005428:	813b      	strh	r3, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800543c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	2200      	movs	r2, #0
 8005446:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f960 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005464:	d103      	bne.n	800546e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f44f 7200 	mov.w	r2, #512	; 0x200
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e05f      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005480:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	6a3a      	ldr	r2, [r7, #32]
 8005486:	492d      	ldr	r1, [pc, #180]	; (800553c <I2C_RequestMemoryWrite+0x128>)
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f998 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e04c      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054b0:	6a39      	ldr	r1, [r7, #32]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 fa02 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d107      	bne.n	80054d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e02b      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e0:	893b      	ldrh	r3, [r7, #8]
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	611a      	str	r2, [r3, #16]
 80054ea:	e021      	b.n	8005530 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054ec:	893b      	ldrh	r3, [r7, #8]
 80054ee:	0a1b      	lsrs	r3, r3, #8
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fc:	6a39      	ldr	r1, [r7, #32]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f9dc 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	2b04      	cmp	r3, #4
 8005510:	d107      	bne.n	8005522 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005520:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e005      	b.n	8005532 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005526:	893b      	ldrh	r3, [r7, #8]
 8005528:	b2da      	uxtb	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	00010002 	.word	0x00010002

08005540 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	4608      	mov	r0, r1
 800554a:	4611      	mov	r1, r2
 800554c:	461a      	mov	r2, r3
 800554e:	4603      	mov	r3, r0
 8005550:	817b      	strh	r3, [r7, #10]
 8005552:	460b      	mov	r3, r1
 8005554:	813b      	strh	r3, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005568:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005578:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	2200      	movs	r2, #0
 8005582:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f8c2 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800559c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a0:	d103      	bne.n	80055aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0aa      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055ae:	897b      	ldrh	r3, [r7, #10]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	4952      	ldr	r1, [pc, #328]	; (800570c <I2C_RequestMemoryRead+0x1cc>)
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 f8fa 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e097      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	6a39      	ldr	r1, [r7, #32]
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 f964 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00d      	beq.n	8005616 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d107      	bne.n	8005612 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005610:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e076      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d105      	bne.n	8005628 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	611a      	str	r2, [r3, #16]
 8005626:	e021      	b.n	800566c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005628:	893b      	ldrh	r3, [r7, #8]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b29b      	uxth	r3, r3
 800562e:	b2da      	uxtb	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	6a39      	ldr	r1, [r7, #32]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 f93e 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00d      	beq.n	8005662 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b04      	cmp	r3, #4
 800564c:	d107      	bne.n	800565e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800565c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e050      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005662:	893b      	ldrh	r3, [r7, #8]
 8005664:	b2da      	uxtb	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566e:	6a39      	ldr	r1, [r7, #32]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f923 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	2b04      	cmp	r3, #4
 8005682:	d107      	bne.n	8005694 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005692:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e035      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 f82b 	bl	8005710 <I2C_WaitOnFlagUntilTimeout>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00d      	beq.n	80056dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ce:	d103      	bne.n	80056d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e013      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056dc:	897b      	ldrh	r3, [r7, #10]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f043 0301 	orr.w	r3, r3, #1
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ee:	6a3a      	ldr	r2, [r7, #32]
 80056f0:	4906      	ldr	r1, [pc, #24]	; (800570c <I2C_RequestMemoryRead+0x1cc>)
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f863 	bl	80057be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	00010002 	.word	0x00010002

08005710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	4613      	mov	r3, r2
 800571e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005720:	e025      	b.n	800576e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005728:	d021      	beq.n	800576e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fe f99f 	bl	8003a6c <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d116      	bne.n	800576e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f043 0220 	orr.w	r2, r3, #32
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e023      	b.n	80057b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10d      	bne.n	8005794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	43da      	mvns	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	e00c      	b.n	80057ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	699b      	ldr	r3, [r3, #24]
 800579a:	43da      	mvns	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d0b6      	beq.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
 80057ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057cc:	e051      	b.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057dc:	d123      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f043 0204 	orr.w	r2, r3, #4
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e046      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800582c:	d021      	beq.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582e:	f7fe f91d 	bl	8003a6c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d302      	bcc.n	8005844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d116      	bne.n	8005872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	f043 0220 	orr.w	r2, r3, #32
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e020      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b01      	cmp	r3, #1
 800587a:	d10c      	bne.n	8005896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	43da      	mvns	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4013      	ands	r3, r2
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	bf14      	ite	ne
 800588e:	2301      	movne	r3, #1
 8005890:	2300      	moveq	r3, #0
 8005892:	b2db      	uxtb	r3, r3
 8005894:	e00b      	b.n	80058ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	43da      	mvns	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4013      	ands	r3, r2
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d18d      	bne.n	80057ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	e02d      	b.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f8ce 	bl	8005a6c <I2C_IsAcknowledgeFailed>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e02d      	b.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e0:	d021      	beq.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fe f8c3 	bl	8003a6c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d116      	bne.n	8005926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2220      	movs	r2, #32
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e007      	b.n	8005936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d1ca      	bne.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800594a:	e02d      	b.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f88d 	bl	8005a6c <I2C_IsAcknowledgeFailed>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e02d      	b.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005962:	d021      	beq.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005964:	f7fe f882 	bl	8003a6c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d116      	bne.n	80059a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f043 0220 	orr.w	r2, r3, #32
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e007      	b.n	80059b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d1ca      	bne.n	800594c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059cc:	e042      	b.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d119      	bne.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0210 	mvn.w	r2, #16
 80059e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e029      	b.n	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a10:	f7fe f82c 	bl	8003a6c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d302      	bcc.n	8005a26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	f043 0220 	orr.w	r2, r3, #32
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e007      	b.n	8005a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d1b5      	bne.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d11b      	bne.n	8005abc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa8:	f043 0204 	orr.w	r2, r3, #4
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e267      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d075      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aea:	4b88      	ldr	r3, [pc, #544]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d00c      	beq.n	8005b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005af6:	4b85      	ldr	r3, [pc, #532]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d112      	bne.n	8005b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b02:	4b82      	ldr	r3, [pc, #520]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b0e:	d10b      	bne.n	8005b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b10:	4b7e      	ldr	r3, [pc, #504]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05b      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x108>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d157      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e242      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b30:	d106      	bne.n	8005b40 <HAL_RCC_OscConfig+0x74>
 8005b32:	4b76      	ldr	r3, [pc, #472]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a75      	ldr	r2, [pc, #468]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e01d      	b.n	8005b7c <HAL_RCC_OscConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x98>
 8005b4a:	4b70      	ldr	r3, [pc, #448]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6f      	ldr	r2, [pc, #444]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	4b6d      	ldr	r3, [pc, #436]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6c      	ldr	r2, [pc, #432]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e00b      	b.n	8005b7c <HAL_RCC_OscConfig+0xb0>
 8005b64:	4b69      	ldr	r3, [pc, #420]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a68      	ldr	r2, [pc, #416]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b66      	ldr	r3, [pc, #408]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a65      	ldr	r2, [pc, #404]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d013      	beq.n	8005bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fd ff72 	bl	8003a6c <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7fd ff6e 	bl	8003a6c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	; 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e207      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9e:	4b5b      	ldr	r3, [pc, #364]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0xc0>
 8005baa:	e014      	b.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fd ff5e 	bl	8003a6c <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bb4:	f7fd ff5a 	bl	8003a6c <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	; 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e1f3      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc6:	4b51      	ldr	r3, [pc, #324]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0xe8>
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d063      	beq.n	8005caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005be2:	4b4a      	ldr	r3, [pc, #296]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bee:	4b47      	ldr	r3, [pc, #284]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d11c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bfa:	4b44      	ldr	r3, [pc, #272]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d116      	bne.n	8005c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c06:	4b41      	ldr	r3, [pc, #260]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_RCC_OscConfig+0x152>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e1c7      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1e:	4b3b      	ldr	r3, [pc, #236]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4937      	ldr	r1, [pc, #220]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c32:	e03a      	b.n	8005caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d020      	beq.n	8005c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c3c:	4b34      	ldr	r3, [pc, #208]	; (8005d10 <HAL_RCC_OscConfig+0x244>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c42:	f7fd ff13 	bl	8003a6c <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c4a:	f7fd ff0f 	bl	8003a6c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e1a8      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5c:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c68:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4925      	ldr	r1, [pc, #148]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	e015      	b.n	8005caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <HAL_RCC_OscConfig+0x244>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fd fef2 	bl	8003a6c <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7fd feee 	bl	8003a6c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e187      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d036      	beq.n	8005d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cbe:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <HAL_RCC_OscConfig+0x248>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fd fed2 	bl	8003a6c <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ccc:	f7fd fece 	bl	8003a6c <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e167      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cde:	4b0b      	ldr	r3, [pc, #44]	; (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x200>
 8005cea:	e01b      	b.n	8005d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <HAL_RCC_OscConfig+0x248>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf2:	f7fd febb 	bl	8003a6c <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf8:	e00e      	b.n	8005d18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cfa:	f7fd feb7 	bl	8003a6c <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d907      	bls.n	8005d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e150      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	42470000 	.word	0x42470000
 8005d14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d18:	4b88      	ldr	r3, [pc, #544]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ea      	bne.n	8005cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8097 	beq.w	8005e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d36:	4b81      	ldr	r3, [pc, #516]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	4b7d      	ldr	r3, [pc, #500]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	4a7c      	ldr	r2, [pc, #496]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d50:	6413      	str	r3, [r2, #64]	; 0x40
 8005d52:	4b7a      	ldr	r3, [pc, #488]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d62:	4b77      	ldr	r3, [pc, #476]	; (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d118      	bne.n	8005da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d6e:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a73      	ldr	r2, [pc, #460]	; (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d7a:	f7fd fe77 	bl	8003a6c <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d82:	f7fd fe73 	bl	8003a6c <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e10c      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d94:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d106      	bne.n	8005db6 <HAL_RCC_OscConfig+0x2ea>
 8005da8:	4b64      	ldr	r3, [pc, #400]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	4a63      	ldr	r2, [pc, #396]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	6713      	str	r3, [r2, #112]	; 0x70
 8005db4:	e01c      	b.n	8005df0 <HAL_RCC_OscConfig+0x324>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x30c>
 8005dbe:	4b5f      	ldr	r3, [pc, #380]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc2:	4a5e      	ldr	r2, [pc, #376]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dca:	4b5c      	ldr	r3, [pc, #368]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	4a5b      	ldr	r2, [pc, #364]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0x324>
 8005dd8:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ddc:	4a57      	ldr	r2, [pc, #348]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	6713      	str	r3, [r2, #112]	; 0x70
 8005de4:	4b55      	ldr	r3, [pc, #340]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de8:	4a54      	ldr	r2, [pc, #336]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dea:	f023 0304 	bic.w	r3, r3, #4
 8005dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fd fe38 	bl	8003a6c <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fd fe34 	bl	8003a6c <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0cb      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e16:	4b49      	ldr	r3, [pc, #292]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0ee      	beq.n	8005e00 <HAL_RCC_OscConfig+0x334>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e24:	f7fd fe22 	bl	8003a6c <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2c:	f7fd fe1e 	bl	8003a6c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0b5      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e42:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1ee      	bne.n	8005e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d105      	bne.n	8005e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e54:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	4a38      	ldr	r2, [pc, #224]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80a1 	beq.w	8005fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e6a:	4b34      	ldr	r3, [pc, #208]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d05c      	beq.n	8005f30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d141      	bne.n	8005f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b31      	ldr	r3, [pc, #196]	; (8005f44 <HAL_RCC_OscConfig+0x478>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fd fdf2 	bl	8003a6c <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fd fdee 	bl	8003a6c <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e087      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69da      	ldr	r2, [r3, #28]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ecc:	061b      	lsls	r3, r3, #24
 8005ece:	491b      	ldr	r1, [pc, #108]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <HAL_RCC_OscConfig+0x478>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eda:	f7fd fdc7 	bl	8003a6c <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fd fdc3 	bl	8003a6c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e05c      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x416>
 8005f00:	e054      	b.n	8005fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f02:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <HAL_RCC_OscConfig+0x478>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fd fdb0 	bl	8003a6c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fd fdac 	bl	8003a6c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e045      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x444>
 8005f2e:	e03d      	b.n	8005fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e038      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40007000 	.word	0x40007000
 8005f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <HAL_RCC_OscConfig+0x4ec>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d028      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d121      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d11a      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f78:	4013      	ands	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d111      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	3b01      	subs	r3, #1
 8005f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800

08005fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0cc      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b68      	ldr	r3, [pc, #416]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d90c      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b65      	ldr	r3, [pc, #404]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b63      	ldr	r3, [pc, #396]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0b8      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a58      	ldr	r2, [pc, #352]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800601a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a52      	ldr	r2, [pc, #328]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	494d      	ldr	r1, [pc, #308]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d044      	beq.n	80060dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b47      	ldr	r3, [pc, #284]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d119      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d003      	beq.n	800607a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006076:	2b03      	cmp	r3, #3
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	4b3f      	ldr	r3, [pc, #252]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e06f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608a:	4b3b      	ldr	r3, [pc, #236]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e067      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b37      	ldr	r3, [pc, #220]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4934      	ldr	r1, [pc, #208]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ac:	f7fd fcde 	bl	8003a6c <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fd fcda 	bl	8003a6c <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e04f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b2b      	ldr	r3, [pc, #172]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060dc:	4b25      	ldr	r3, [pc, #148]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d20c      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e032      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4916      	ldr	r1, [pc, #88]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006142:	f000 f821 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490a      	ldr	r1, [pc, #40]	; (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_RCC_ClockConfig+0x1c8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fc3e 	bl	80039e4 <HAL_InitTick>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00
 8006178:	40023800 	.word	0x40023800
 800617c:	0800aa94 	.word	0x0800aa94
 8006180:	20000000 	.word	0x20000000
 8006184:	20000004 	.word	0x20000004

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800618c:	b094      	sub	sp, #80	; 0x50
 800618e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	647b      	str	r3, [r7, #68]	; 0x44
 8006194:	2300      	movs	r3, #0
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006198:	2300      	movs	r3, #0
 800619a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a0:	4b79      	ldr	r3, [pc, #484]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d00d      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x40>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	f200 80e1 	bhi.w	8006374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x34>
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ba:	e0db      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b73      	ldr	r3, [pc, #460]	; (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80061c0:	e0db      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061c2:	4b72      	ldr	r3, [pc, #456]	; (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 80061c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061c6:	e0d8      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c8:	4b6f      	ldr	r3, [pc, #444]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061d2:	4b6d      	ldr	r3, [pc, #436]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d063      	beq.n	80062a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061de:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	2200      	movs	r2, #0
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
 80061f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061fa:	4622      	mov	r2, r4
 80061fc:	462b      	mov	r3, r5
 80061fe:	f04f 0000 	mov.w	r0, #0
 8006202:	f04f 0100 	mov.w	r1, #0
 8006206:	0159      	lsls	r1, r3, #5
 8006208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800620c:	0150      	lsls	r0, r2, #5
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4621      	mov	r1, r4
 8006214:	1a51      	subs	r1, r2, r1
 8006216:	6139      	str	r1, [r7, #16]
 8006218:	4629      	mov	r1, r5
 800621a:	eb63 0301 	sbc.w	r3, r3, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800622c:	4659      	mov	r1, fp
 800622e:	018b      	lsls	r3, r1, #6
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006236:	4651      	mov	r1, sl
 8006238:	018a      	lsls	r2, r1, #6
 800623a:	4651      	mov	r1, sl
 800623c:	ebb2 0801 	subs.w	r8, r2, r1
 8006240:	4659      	mov	r1, fp
 8006242:	eb63 0901 	sbc.w	r9, r3, r1
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800625a:	4690      	mov	r8, r2
 800625c:	4699      	mov	r9, r3
 800625e:	4623      	mov	r3, r4
 8006260:	eb18 0303 	adds.w	r3, r8, r3
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	462b      	mov	r3, r5
 8006268:	eb49 0303 	adc.w	r3, r9, r3
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800627a:	4629      	mov	r1, r5
 800627c:	028b      	lsls	r3, r1, #10
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006284:	4621      	mov	r1, r4
 8006286:	028a      	lsls	r2, r1, #10
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628e:	2200      	movs	r2, #0
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006298:	f7fa fcde 	bl	8000c58 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4613      	mov	r3, r2
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a4:	e058      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a6:	4b38      	ldr	r3, [pc, #224]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	099b      	lsrs	r3, r3, #6
 80062ac:	2200      	movs	r2, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	4611      	mov	r1, r2
 80062b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
 80062bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	0159      	lsls	r1, r3, #5
 80062ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d2:	0150      	lsls	r0, r2, #5
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4641      	mov	r1, r8
 80062da:	ebb2 0a01 	subs.w	sl, r2, r1
 80062de:	4649      	mov	r1, r9
 80062e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f8:	ebb2 040a 	subs.w	r4, r2, sl
 80062fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	464b      	mov	r3, r9
 800631c:	eb45 0303 	adc.w	r3, r5, r3
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632e:	4629      	mov	r1, r5
 8006330:	028b      	lsls	r3, r1, #10
 8006332:	4621      	mov	r1, r4
 8006334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006338:	4621      	mov	r1, r4
 800633a:	028a      	lsls	r2, r1, #10
 800633c:	4610      	mov	r0, r2
 800633e:	4619      	mov	r1, r3
 8006340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006342:	2200      	movs	r2, #0
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	61fa      	str	r2, [r7, #28]
 8006348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634c:	f7fa fc84 	bl	8000c58 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4613      	mov	r3, r2
 8006356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	3301      	adds	r3, #1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800636a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006372:	e002      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 8006376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800637c:	4618      	mov	r0, r3
 800637e:	3750      	adds	r7, #80	; 0x50
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006386:	bf00      	nop
 8006388:	40023800 	.word	0x40023800
 800638c:	00f42400 	.word	0x00f42400

08006390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000000 	.word	0x20000000

080063a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063ac:	f7ff fff0 	bl	8006390 <HAL_RCC_GetHCLKFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	0a9b      	lsrs	r3, r3, #10
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	4903      	ldr	r1, [pc, #12]	; (80063cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40023800 	.word	0x40023800
 80063cc:	0800aaa4 	.word	0x0800aaa4

080063d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063d4:	f7ff ffdc 	bl	8006390 <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	0b5b      	lsrs	r3, r3, #13
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4903      	ldr	r1, [pc, #12]	; (80063f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40023800 	.word	0x40023800
 80063f4:	0800aaa4 	.word	0x0800aaa4

080063f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e07b      	b.n	8006502 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d108      	bne.n	8006424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800641a:	d009      	beq.n	8006430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	61da      	str	r2, [r3, #28]
 8006422:	e005      	b.n	8006430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7fd f894 	bl	8003578 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006466:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b4:	ea42 0103 	orr.w	r1, r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	f003 0104 	and.w	r1, r3, #4
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	f003 0210 	and.w	r2, r3, #16
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e041      	b.n	80065a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d106      	bne.n	8006536 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fd f869 	bl	8003608 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2202      	movs	r2, #2
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f000 f99f 	bl	800688c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <HAL_TIM_PWM_Start+0x24>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	bf14      	ite	ne
 80065c4:	2301      	movne	r3, #1
 80065c6:	2300      	moveq	r3, #0
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	e022      	b.n	8006612 <HAL_TIM_PWM_Start+0x6a>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b04      	cmp	r3, #4
 80065d0:	d109      	bne.n	80065e6 <HAL_TIM_PWM_Start+0x3e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	bf14      	ite	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	2300      	moveq	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	e015      	b.n	8006612 <HAL_TIM_PWM_Start+0x6a>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d109      	bne.n	8006600 <HAL_TIM_PWM_Start+0x58>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	bf14      	ite	ne
 80065f8:	2301      	movne	r3, #1
 80065fa:	2300      	moveq	r3, #0
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	e008      	b.n	8006612 <HAL_TIM_PWM_Start+0x6a>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b01      	cmp	r3, #1
 800660a:	bf14      	ite	ne
 800660c:	2301      	movne	r3, #1
 800660e:	2300      	moveq	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e068      	b.n	80066ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <HAL_TIM_PWM_Start+0x82>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006628:	e013      	b.n	8006652 <HAL_TIM_PWM_Start+0xaa>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b04      	cmp	r3, #4
 800662e:	d104      	bne.n	800663a <HAL_TIM_PWM_Start+0x92>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006638:	e00b      	b.n	8006652 <HAL_TIM_PWM_Start+0xaa>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d104      	bne.n	800664a <HAL_TIM_PWM_Start+0xa2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006648:	e003      	b.n	8006652 <HAL_TIM_PWM_Start+0xaa>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2201      	movs	r2, #1
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fb22 	bl	8006ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a23      	ldr	r2, [pc, #140]	; (80066f4 <HAL_TIM_PWM_Start+0x14c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d107      	bne.n	800667a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006678:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <HAL_TIM_PWM_Start+0x14c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_TIM_PWM_Start+0x10e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668c:	d013      	beq.n	80066b6 <HAL_TIM_PWM_Start+0x10e>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <HAL_TIM_PWM_Start+0x150>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIM_PWM_Start+0x10e>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a17      	ldr	r2, [pc, #92]	; (80066fc <HAL_TIM_PWM_Start+0x154>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIM_PWM_Start+0x10e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a16      	ldr	r2, [pc, #88]	; (8006700 <HAL_TIM_PWM_Start+0x158>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIM_PWM_Start+0x10e>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a14      	ldr	r2, [pc, #80]	; (8006704 <HAL_TIM_PWM_Start+0x15c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d111      	bne.n	80066da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b06      	cmp	r3, #6
 80066c6:	d010      	beq.n	80066ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	e007      	b.n	80066ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40010000 	.word	0x40010000
 80066f8:	40000400 	.word	0x40000400
 80066fc:	40000800 	.word	0x40000800
 8006700:	40000c00 	.word	0x40000c00
 8006704:	40014000 	.word	0x40014000

08006708 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671e:	2b01      	cmp	r3, #1
 8006720:	d101      	bne.n	8006726 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006722:	2302      	movs	r3, #2
 8006724:	e0ae      	b.n	8006884 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	f200 809f 	bhi.w	8006874 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	08006771 	.word	0x08006771
 8006740:	08006875 	.word	0x08006875
 8006744:	08006875 	.word	0x08006875
 8006748:	08006875 	.word	0x08006875
 800674c:	080067b1 	.word	0x080067b1
 8006750:	08006875 	.word	0x08006875
 8006754:	08006875 	.word	0x08006875
 8006758:	08006875 	.word	0x08006875
 800675c:	080067f3 	.word	0x080067f3
 8006760:	08006875 	.word	0x08006875
 8006764:	08006875 	.word	0x08006875
 8006768:	08006875 	.word	0x08006875
 800676c:	08006833 	.word	0x08006833
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f908 	bl	800698c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0208 	orr.w	r2, r2, #8
 800678a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	699a      	ldr	r2, [r3, #24]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0204 	bic.w	r2, r2, #4
 800679a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6999      	ldr	r1, [r3, #24]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	691a      	ldr	r2, [r3, #16]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	619a      	str	r2, [r3, #24]
      break;
 80067ae:	e064      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f94e 	bl	8006a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6999      	ldr	r1, [r3, #24]
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	021a      	lsls	r2, r3, #8
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	619a      	str	r2, [r3, #24]
      break;
 80067f0:	e043      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 f999 	bl	8006b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0208 	orr.w	r2, r2, #8
 800680c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69da      	ldr	r2, [r3, #28]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0204 	bic.w	r2, r2, #4
 800681c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69d9      	ldr	r1, [r3, #28]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	691a      	ldr	r2, [r3, #16]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	61da      	str	r2, [r3, #28]
      break;
 8006830:	e023      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f9e3 	bl	8006c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69da      	ldr	r2, [r3, #28]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69d9      	ldr	r1, [r3, #28]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	021a      	lsls	r2, r3, #8
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	430a      	orrs	r2, r1
 8006870:	61da      	str	r2, [r3, #28]
      break;
 8006872:	e002      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	75fb      	strb	r3, [r7, #23]
      break;
 8006878:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006882:	7dfb      	ldrb	r3, [r7, #23]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a34      	ldr	r2, [pc, #208]	; (8006970 <TIM_Base_SetConfig+0xe4>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a31      	ldr	r2, [pc, #196]	; (8006974 <TIM_Base_SetConfig+0xe8>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a30      	ldr	r2, [pc, #192]	; (8006978 <TIM_Base_SetConfig+0xec>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x38>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a2f      	ldr	r2, [pc, #188]	; (800697c <TIM_Base_SetConfig+0xf0>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a25      	ldr	r2, [pc, #148]	; (8006970 <TIM_Base_SetConfig+0xe4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01b      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e4:	d017      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a22      	ldr	r2, [pc, #136]	; (8006974 <TIM_Base_SetConfig+0xe8>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d013      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a21      	ldr	r2, [pc, #132]	; (8006978 <TIM_Base_SetConfig+0xec>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00f      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a20      	ldr	r2, [pc, #128]	; (800697c <TIM_Base_SetConfig+0xf0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00b      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a1f      	ldr	r2, [pc, #124]	; (8006980 <TIM_Base_SetConfig+0xf4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d007      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a1e      	ldr	r2, [pc, #120]	; (8006984 <TIM_Base_SetConfig+0xf8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d003      	beq.n	8006916 <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <TIM_Base_SetConfig+0xfc>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d108      	bne.n	8006928 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a08      	ldr	r2, [pc, #32]	; (8006970 <TIM_Base_SetConfig+0xe4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d103      	bne.n	800695c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	691a      	ldr	r2, [r3, #16]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	615a      	str	r2, [r3, #20]
}
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40010000 	.word	0x40010000
 8006974:	40000400 	.word	0x40000400
 8006978:	40000800 	.word	0x40000800
 800697c:	40000c00 	.word	0x40000c00
 8006980:	40014000 	.word	0x40014000
 8006984:	40014400 	.word	0x40014400
 8006988:	40014800 	.word	0x40014800

0800698c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 0302 	bic.w	r3, r3, #2
 80069d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <TIM_OC1_SetConfig+0xc8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d10c      	bne.n	8006a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f023 0308 	bic.w	r3, r3, #8
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 0304 	bic.w	r3, r3, #4
 8006a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <TIM_OC1_SetConfig+0xc8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d111      	bne.n	8006a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40010000 	.word	0x40010000

08006a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f023 0210 	bic.w	r2, r3, #16
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0320 	bic.w	r3, r3, #32
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a1e      	ldr	r2, [pc, #120]	; (8006b2c <TIM_OC2_SetConfig+0xd4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10d      	bne.n	8006ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	011b      	lsls	r3, r3, #4
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a15      	ldr	r2, [pc, #84]	; (8006b2c <TIM_OC2_SetConfig+0xd4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d113      	bne.n	8006b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	693a      	ldr	r2, [r7, #16]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	bf00      	nop
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	40010000 	.word	0x40010000

08006b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1d      	ldr	r2, [pc, #116]	; (8006c00 <TIM_OC3_SetConfig+0xd0>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d10d      	bne.n	8006baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a14      	ldr	r2, [pc, #80]	; (8006c00 <TIM_OC3_SetConfig+0xd0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d113      	bne.n	8006bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	011b      	lsls	r3, r3, #4
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	621a      	str	r2, [r3, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	371c      	adds	r7, #28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr
 8006c00:	40010000 	.word	0x40010000

08006c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	031b      	lsls	r3, r3, #12
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a10      	ldr	r2, [pc, #64]	; (8006ca0 <TIM_OC4_SetConfig+0x9c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d109      	bne.n	8006c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	019b      	lsls	r3, r3, #6
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000

08006ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e050      	b.n	8006daa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1c      	ldr	r2, [pc, #112]	; (8006db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d018      	beq.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d013      	beq.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a18      	ldr	r2, [pc, #96]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00e      	beq.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a16      	ldr	r2, [pc, #88]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a15      	ldr	r2, [pc, #84]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d10c      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	40014000 	.word	0x40014000

08006dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e03f      	b.n	8006e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fc fc60 	bl	80036b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2224      	movs	r2, #36	; 0x24
 8006dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f929 	bl	8007068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b08a      	sub	sp, #40	; 0x28
 8006e6a:	af02      	add	r7, sp, #8
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	603b      	str	r3, [r7, #0]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d17c      	bne.n	8006f80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <HAL_UART_Transmit+0x2c>
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e075      	b.n	8006f82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d101      	bne.n	8006ea4 <HAL_UART_Transmit+0x3e>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	e06e      	b.n	8006f82 <HAL_UART_Transmit+0x11c>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2221      	movs	r2, #33	; 0x21
 8006eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eba:	f7fc fdd7 	bl	8003a6c <HAL_GetTick>
 8006ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed4:	d108      	bne.n	8006ee8 <HAL_UART_Transmit+0x82>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e003      	b.n	8006ef0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006eec:	2300      	movs	r3, #0
 8006eee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006ef8:	e02a      	b.n	8006f50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2200      	movs	r2, #0
 8006f02:	2180      	movs	r1, #128	; 0x80
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f840 	bl	8006f8a <UART_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e036      	b.n	8006f82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10b      	bne.n	8006f32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	3302      	adds	r3, #2
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	e007      	b.n	8006f42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	781a      	ldrb	r2, [r3, #0]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1cf      	bne.n	8006efa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2140      	movs	r1, #64	; 0x40
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 f810 	bl	8006f8a <UART_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e006      	b.n	8006f82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3720      	adds	r7, #32
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b090      	sub	sp, #64	; 0x40
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9a:	e050      	b.n	800703e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa2:	d04c      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x30>
 8006faa:	f7fc fd5f 	bl	8003a6c <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d241      	bcs.n	800703e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006fda:	637a      	str	r2, [r7, #52]	; 0x34
 8006fdc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e5      	bne.n	8006fba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3314      	adds	r3, #20
 8006ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	63bb      	str	r3, [r7, #56]	; 0x38
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3314      	adds	r3, #20
 800700c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700e:	623a      	str	r2, [r7, #32]
 8007010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	69f9      	ldr	r1, [r7, #28]
 8007014:	6a3a      	ldr	r2, [r7, #32]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	61bb      	str	r3, [r7, #24]
   return(result);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e5      	bne.n	8006fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2220      	movs	r2, #32
 8007026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2220      	movs	r2, #32
 800702e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e00f      	b.n	800705e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4013      	ands	r3, r2
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	bf0c      	ite	eq
 800704e:	2301      	moveq	r3, #1
 8007050:	2300      	movne	r3, #0
 8007052:	b2db      	uxtb	r3, r3
 8007054:	461a      	mov	r2, r3
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	429a      	cmp	r2, r3
 800705a:	d09f      	beq.n	8006f9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3740      	adds	r7, #64	; 0x40
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800706c:	b0c0      	sub	sp, #256	; 0x100
 800706e:	af00      	add	r7, sp, #0
 8007070:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	68d9      	ldr	r1, [r3, #12]
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	ea40 0301 	orr.w	r3, r0, r1
 8007090:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007096:	689a      	ldr	r2, [r3, #8]
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	431a      	orrs	r2, r3
 80070a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ac:	69db      	ldr	r3, [r3, #28]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80070c0:	f021 010c 	bic.w	r1, r1, #12
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070ce:	430b      	orrs	r3, r1
 80070d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e2:	6999      	ldr	r1, [r3, #24]
 80070e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	ea40 0301 	orr.w	r3, r0, r1
 80070ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	4b8f      	ldr	r3, [pc, #572]	; (8007334 <UART_SetConfig+0x2cc>)
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d005      	beq.n	8007108 <UART_SetConfig+0xa0>
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	4b8d      	ldr	r3, [pc, #564]	; (8007338 <UART_SetConfig+0x2d0>)
 8007104:	429a      	cmp	r2, r3
 8007106:	d104      	bne.n	8007112 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007108:	f7ff f962 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 800710c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007110:	e003      	b.n	800711a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007112:	f7ff f949 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8007116:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800711a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007124:	f040 810c 	bne.w	8007340 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007128:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800712c:	2200      	movs	r2, #0
 800712e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007132:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007136:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800713a:	4622      	mov	r2, r4
 800713c:	462b      	mov	r3, r5
 800713e:	1891      	adds	r1, r2, r2
 8007140:	65b9      	str	r1, [r7, #88]	; 0x58
 8007142:	415b      	adcs	r3, r3
 8007144:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007146:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800714a:	4621      	mov	r1, r4
 800714c:	eb12 0801 	adds.w	r8, r2, r1
 8007150:	4629      	mov	r1, r5
 8007152:	eb43 0901 	adc.w	r9, r3, r1
 8007156:	f04f 0200 	mov.w	r2, #0
 800715a:	f04f 0300 	mov.w	r3, #0
 800715e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800716a:	4690      	mov	r8, r2
 800716c:	4699      	mov	r9, r3
 800716e:	4623      	mov	r3, r4
 8007170:	eb18 0303 	adds.w	r3, r8, r3
 8007174:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007178:	462b      	mov	r3, r5
 800717a:	eb49 0303 	adc.w	r3, r9, r3
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800718e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007192:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007196:	460b      	mov	r3, r1
 8007198:	18db      	adds	r3, r3, r3
 800719a:	653b      	str	r3, [r7, #80]	; 0x50
 800719c:	4613      	mov	r3, r2
 800719e:	eb42 0303 	adc.w	r3, r2, r3
 80071a2:	657b      	str	r3, [r7, #84]	; 0x54
 80071a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80071a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80071ac:	f7f9 fd54 	bl	8000c58 <__aeabi_uldivmod>
 80071b0:	4602      	mov	r2, r0
 80071b2:	460b      	mov	r3, r1
 80071b4:	4b61      	ldr	r3, [pc, #388]	; (800733c <UART_SetConfig+0x2d4>)
 80071b6:	fba3 2302 	umull	r2, r3, r3, r2
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	011c      	lsls	r4, r3, #4
 80071be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c2:	2200      	movs	r2, #0
 80071c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80071cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	1891      	adds	r1, r2, r2
 80071d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80071d8:	415b      	adcs	r3, r3
 80071da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071e0:	4641      	mov	r1, r8
 80071e2:	eb12 0a01 	adds.w	sl, r2, r1
 80071e6:	4649      	mov	r1, r9
 80071e8:	eb43 0b01 	adc.w	fp, r3, r1
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007200:	4692      	mov	sl, r2
 8007202:	469b      	mov	fp, r3
 8007204:	4643      	mov	r3, r8
 8007206:	eb1a 0303 	adds.w	r3, sl, r3
 800720a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800720e:	464b      	mov	r3, r9
 8007210:	eb4b 0303 	adc.w	r3, fp, r3
 8007214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007224:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007228:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800722c:	460b      	mov	r3, r1
 800722e:	18db      	adds	r3, r3, r3
 8007230:	643b      	str	r3, [r7, #64]	; 0x40
 8007232:	4613      	mov	r3, r2
 8007234:	eb42 0303 	adc.w	r3, r2, r3
 8007238:	647b      	str	r3, [r7, #68]	; 0x44
 800723a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800723e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007242:	f7f9 fd09 	bl	8000c58 <__aeabi_uldivmod>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4611      	mov	r1, r2
 800724c:	4b3b      	ldr	r3, [pc, #236]	; (800733c <UART_SetConfig+0x2d4>)
 800724e:	fba3 2301 	umull	r2, r3, r3, r1
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	2264      	movs	r2, #100	; 0x64
 8007256:	fb02 f303 	mul.w	r3, r2, r3
 800725a:	1acb      	subs	r3, r1, r3
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007262:	4b36      	ldr	r3, [pc, #216]	; (800733c <UART_SetConfig+0x2d4>)
 8007264:	fba3 2302 	umull	r2, r3, r3, r2
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007270:	441c      	add	r4, r3
 8007272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007276:	2200      	movs	r2, #0
 8007278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800727c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007280:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007284:	4642      	mov	r2, r8
 8007286:	464b      	mov	r3, r9
 8007288:	1891      	adds	r1, r2, r2
 800728a:	63b9      	str	r1, [r7, #56]	; 0x38
 800728c:	415b      	adcs	r3, r3
 800728e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007290:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007294:	4641      	mov	r1, r8
 8007296:	1851      	adds	r1, r2, r1
 8007298:	6339      	str	r1, [r7, #48]	; 0x30
 800729a:	4649      	mov	r1, r9
 800729c:	414b      	adcs	r3, r1
 800729e:	637b      	str	r3, [r7, #52]	; 0x34
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80072ac:	4659      	mov	r1, fp
 80072ae:	00cb      	lsls	r3, r1, #3
 80072b0:	4651      	mov	r1, sl
 80072b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072b6:	4651      	mov	r1, sl
 80072b8:	00ca      	lsls	r2, r1, #3
 80072ba:	4610      	mov	r0, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	4642      	mov	r2, r8
 80072c2:	189b      	adds	r3, r3, r2
 80072c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80072c8:	464b      	mov	r3, r9
 80072ca:	460a      	mov	r2, r1
 80072cc:	eb42 0303 	adc.w	r3, r2, r3
 80072d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072e8:	460b      	mov	r3, r1
 80072ea:	18db      	adds	r3, r3, r3
 80072ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ee:	4613      	mov	r3, r2
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072fe:	f7f9 fcab 	bl	8000c58 <__aeabi_uldivmod>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4b0d      	ldr	r3, [pc, #52]	; (800733c <UART_SetConfig+0x2d4>)
 8007308:	fba3 1302 	umull	r1, r3, r3, r2
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	2164      	movs	r1, #100	; 0x64
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	3332      	adds	r3, #50	; 0x32
 800731a:	4a08      	ldr	r2, [pc, #32]	; (800733c <UART_SetConfig+0x2d4>)
 800731c:	fba2 2303 	umull	r2, r3, r2, r3
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	f003 0207 	and.w	r2, r3, #7
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4422      	add	r2, r4
 800732e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007330:	e105      	b.n	800753e <UART_SetConfig+0x4d6>
 8007332:	bf00      	nop
 8007334:	40011000 	.word	0x40011000
 8007338:	40011400 	.word	0x40011400
 800733c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007340:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007344:	2200      	movs	r2, #0
 8007346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800734a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800734e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007352:	4642      	mov	r2, r8
 8007354:	464b      	mov	r3, r9
 8007356:	1891      	adds	r1, r2, r2
 8007358:	6239      	str	r1, [r7, #32]
 800735a:	415b      	adcs	r3, r3
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
 800735e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007362:	4641      	mov	r1, r8
 8007364:	1854      	adds	r4, r2, r1
 8007366:	4649      	mov	r1, r9
 8007368:	eb43 0501 	adc.w	r5, r3, r1
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	00eb      	lsls	r3, r5, #3
 8007376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800737a:	00e2      	lsls	r2, r4, #3
 800737c:	4614      	mov	r4, r2
 800737e:	461d      	mov	r5, r3
 8007380:	4643      	mov	r3, r8
 8007382:	18e3      	adds	r3, r4, r3
 8007384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007388:	464b      	mov	r3, r9
 800738a:	eb45 0303 	adc.w	r3, r5, r3
 800738e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800739e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80073ae:	4629      	mov	r1, r5
 80073b0:	008b      	lsls	r3, r1, #2
 80073b2:	4621      	mov	r1, r4
 80073b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073b8:	4621      	mov	r1, r4
 80073ba:	008a      	lsls	r2, r1, #2
 80073bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80073c0:	f7f9 fc4a 	bl	8000c58 <__aeabi_uldivmod>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4b60      	ldr	r3, [pc, #384]	; (800754c <UART_SetConfig+0x4e4>)
 80073ca:	fba3 2302 	umull	r2, r3, r3, r2
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	011c      	lsls	r4, r3, #4
 80073d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073e4:	4642      	mov	r2, r8
 80073e6:	464b      	mov	r3, r9
 80073e8:	1891      	adds	r1, r2, r2
 80073ea:	61b9      	str	r1, [r7, #24]
 80073ec:	415b      	adcs	r3, r3
 80073ee:	61fb      	str	r3, [r7, #28]
 80073f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073f4:	4641      	mov	r1, r8
 80073f6:	1851      	adds	r1, r2, r1
 80073f8:	6139      	str	r1, [r7, #16]
 80073fa:	4649      	mov	r1, r9
 80073fc:	414b      	adcs	r3, r1
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	f04f 0200 	mov.w	r2, #0
 8007404:	f04f 0300 	mov.w	r3, #0
 8007408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800740c:	4659      	mov	r1, fp
 800740e:	00cb      	lsls	r3, r1, #3
 8007410:	4651      	mov	r1, sl
 8007412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007416:	4651      	mov	r1, sl
 8007418:	00ca      	lsls	r2, r1, #3
 800741a:	4610      	mov	r0, r2
 800741c:	4619      	mov	r1, r3
 800741e:	4603      	mov	r3, r0
 8007420:	4642      	mov	r2, r8
 8007422:	189b      	adds	r3, r3, r2
 8007424:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007428:	464b      	mov	r3, r9
 800742a:	460a      	mov	r2, r1
 800742c:	eb42 0303 	adc.w	r3, r2, r3
 8007430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	67bb      	str	r3, [r7, #120]	; 0x78
 800743e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800744c:	4649      	mov	r1, r9
 800744e:	008b      	lsls	r3, r1, #2
 8007450:	4641      	mov	r1, r8
 8007452:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007456:	4641      	mov	r1, r8
 8007458:	008a      	lsls	r2, r1, #2
 800745a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800745e:	f7f9 fbfb 	bl	8000c58 <__aeabi_uldivmod>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4b39      	ldr	r3, [pc, #228]	; (800754c <UART_SetConfig+0x4e4>)
 8007468:	fba3 1302 	umull	r1, r3, r3, r2
 800746c:	095b      	lsrs	r3, r3, #5
 800746e:	2164      	movs	r1, #100	; 0x64
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	3332      	adds	r3, #50	; 0x32
 800747a:	4a34      	ldr	r2, [pc, #208]	; (800754c <UART_SetConfig+0x4e4>)
 800747c:	fba2 2303 	umull	r2, r3, r2, r3
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007486:	441c      	add	r4, r3
 8007488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800748c:	2200      	movs	r2, #0
 800748e:	673b      	str	r3, [r7, #112]	; 0x70
 8007490:	677a      	str	r2, [r7, #116]	; 0x74
 8007492:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007496:	4642      	mov	r2, r8
 8007498:	464b      	mov	r3, r9
 800749a:	1891      	adds	r1, r2, r2
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	415b      	adcs	r3, r3
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074a6:	4641      	mov	r1, r8
 80074a8:	1851      	adds	r1, r2, r1
 80074aa:	6039      	str	r1, [r7, #0]
 80074ac:	4649      	mov	r1, r9
 80074ae:	414b      	adcs	r3, r1
 80074b0:	607b      	str	r3, [r7, #4]
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	f04f 0300 	mov.w	r3, #0
 80074ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074be:	4659      	mov	r1, fp
 80074c0:	00cb      	lsls	r3, r1, #3
 80074c2:	4651      	mov	r1, sl
 80074c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074c8:	4651      	mov	r1, sl
 80074ca:	00ca      	lsls	r2, r1, #3
 80074cc:	4610      	mov	r0, r2
 80074ce:	4619      	mov	r1, r3
 80074d0:	4603      	mov	r3, r0
 80074d2:	4642      	mov	r2, r8
 80074d4:	189b      	adds	r3, r3, r2
 80074d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074d8:	464b      	mov	r3, r9
 80074da:	460a      	mov	r2, r1
 80074dc:	eb42 0303 	adc.w	r3, r2, r3
 80074e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	663b      	str	r3, [r7, #96]	; 0x60
 80074ec:	667a      	str	r2, [r7, #100]	; 0x64
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	f04f 0300 	mov.w	r3, #0
 80074f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074fa:	4649      	mov	r1, r9
 80074fc:	008b      	lsls	r3, r1, #2
 80074fe:	4641      	mov	r1, r8
 8007500:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007504:	4641      	mov	r1, r8
 8007506:	008a      	lsls	r2, r1, #2
 8007508:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800750c:	f7f9 fba4 	bl	8000c58 <__aeabi_uldivmod>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4b0d      	ldr	r3, [pc, #52]	; (800754c <UART_SetConfig+0x4e4>)
 8007516:	fba3 1302 	umull	r1, r3, r3, r2
 800751a:	095b      	lsrs	r3, r3, #5
 800751c:	2164      	movs	r1, #100	; 0x64
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	3332      	adds	r3, #50	; 0x32
 8007528:	4a08      	ldr	r2, [pc, #32]	; (800754c <UART_SetConfig+0x4e4>)
 800752a:	fba2 2303 	umull	r2, r3, r2, r3
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4422      	add	r2, r4
 800753c:	609a      	str	r2, [r3, #8]
}
 800753e:	bf00      	nop
 8007540:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007544:	46bd      	mov	sp, r7
 8007546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800754a:	bf00      	nop
 800754c:	51eb851f 	.word	0x51eb851f

08007550 <__errno>:
 8007550:	4b01      	ldr	r3, [pc, #4]	; (8007558 <__errno+0x8>)
 8007552:	6818      	ldr	r0, [r3, #0]
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	2000000c 	.word	0x2000000c

0800755c <__libc_init_array>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4d0d      	ldr	r5, [pc, #52]	; (8007594 <__libc_init_array+0x38>)
 8007560:	4c0d      	ldr	r4, [pc, #52]	; (8007598 <__libc_init_array+0x3c>)
 8007562:	1b64      	subs	r4, r4, r5
 8007564:	10a4      	asrs	r4, r4, #2
 8007566:	2600      	movs	r6, #0
 8007568:	42a6      	cmp	r6, r4
 800756a:	d109      	bne.n	8007580 <__libc_init_array+0x24>
 800756c:	4d0b      	ldr	r5, [pc, #44]	; (800759c <__libc_init_array+0x40>)
 800756e:	4c0c      	ldr	r4, [pc, #48]	; (80075a0 <__libc_init_array+0x44>)
 8007570:	f003 f9ee 	bl	800a950 <_init>
 8007574:	1b64      	subs	r4, r4, r5
 8007576:	10a4      	asrs	r4, r4, #2
 8007578:	2600      	movs	r6, #0
 800757a:	42a6      	cmp	r6, r4
 800757c:	d105      	bne.n	800758a <__libc_init_array+0x2e>
 800757e:	bd70      	pop	{r4, r5, r6, pc}
 8007580:	f855 3b04 	ldr.w	r3, [r5], #4
 8007584:	4798      	blx	r3
 8007586:	3601      	adds	r6, #1
 8007588:	e7ee      	b.n	8007568 <__libc_init_array+0xc>
 800758a:	f855 3b04 	ldr.w	r3, [r5], #4
 800758e:	4798      	blx	r3
 8007590:	3601      	adds	r6, #1
 8007592:	e7f2      	b.n	800757a <__libc_init_array+0x1e>
 8007594:	0800aec4 	.word	0x0800aec4
 8007598:	0800aec4 	.word	0x0800aec4
 800759c:	0800aec4 	.word	0x0800aec4
 80075a0:	0800aec8 	.word	0x0800aec8

080075a4 <memset>:
 80075a4:	4402      	add	r2, r0
 80075a6:	4603      	mov	r3, r0
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d100      	bne.n	80075ae <memset+0xa>
 80075ac:	4770      	bx	lr
 80075ae:	f803 1b01 	strb.w	r1, [r3], #1
 80075b2:	e7f9      	b.n	80075a8 <memset+0x4>

080075b4 <__cvt>:
 80075b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	ec55 4b10 	vmov	r4, r5, d0
 80075bc:	2d00      	cmp	r5, #0
 80075be:	460e      	mov	r6, r1
 80075c0:	4619      	mov	r1, r3
 80075c2:	462b      	mov	r3, r5
 80075c4:	bfbb      	ittet	lt
 80075c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80075ca:	461d      	movlt	r5, r3
 80075cc:	2300      	movge	r3, #0
 80075ce:	232d      	movlt	r3, #45	; 0x2d
 80075d0:	700b      	strb	r3, [r1, #0]
 80075d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80075d8:	4691      	mov	r9, r2
 80075da:	f023 0820 	bic.w	r8, r3, #32
 80075de:	bfbc      	itt	lt
 80075e0:	4622      	movlt	r2, r4
 80075e2:	4614      	movlt	r4, r2
 80075e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075e8:	d005      	beq.n	80075f6 <__cvt+0x42>
 80075ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075ee:	d100      	bne.n	80075f2 <__cvt+0x3e>
 80075f0:	3601      	adds	r6, #1
 80075f2:	2102      	movs	r1, #2
 80075f4:	e000      	b.n	80075f8 <__cvt+0x44>
 80075f6:	2103      	movs	r1, #3
 80075f8:	ab03      	add	r3, sp, #12
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	ab02      	add	r3, sp, #8
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	ec45 4b10 	vmov	d0, r4, r5
 8007604:	4653      	mov	r3, sl
 8007606:	4632      	mov	r2, r6
 8007608:	f000 fd1e 	bl	8008048 <_dtoa_r>
 800760c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007610:	4607      	mov	r7, r0
 8007612:	d102      	bne.n	800761a <__cvt+0x66>
 8007614:	f019 0f01 	tst.w	r9, #1
 8007618:	d022      	beq.n	8007660 <__cvt+0xac>
 800761a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800761e:	eb07 0906 	add.w	r9, r7, r6
 8007622:	d110      	bne.n	8007646 <__cvt+0x92>
 8007624:	783b      	ldrb	r3, [r7, #0]
 8007626:	2b30      	cmp	r3, #48	; 0x30
 8007628:	d10a      	bne.n	8007640 <__cvt+0x8c>
 800762a:	2200      	movs	r2, #0
 800762c:	2300      	movs	r3, #0
 800762e:	4620      	mov	r0, r4
 8007630:	4629      	mov	r1, r5
 8007632:	f7f9 fa51 	bl	8000ad8 <__aeabi_dcmpeq>
 8007636:	b918      	cbnz	r0, 8007640 <__cvt+0x8c>
 8007638:	f1c6 0601 	rsb	r6, r6, #1
 800763c:	f8ca 6000 	str.w	r6, [sl]
 8007640:	f8da 3000 	ldr.w	r3, [sl]
 8007644:	4499      	add	r9, r3
 8007646:	2200      	movs	r2, #0
 8007648:	2300      	movs	r3, #0
 800764a:	4620      	mov	r0, r4
 800764c:	4629      	mov	r1, r5
 800764e:	f7f9 fa43 	bl	8000ad8 <__aeabi_dcmpeq>
 8007652:	b108      	cbz	r0, 8007658 <__cvt+0xa4>
 8007654:	f8cd 900c 	str.w	r9, [sp, #12]
 8007658:	2230      	movs	r2, #48	; 0x30
 800765a:	9b03      	ldr	r3, [sp, #12]
 800765c:	454b      	cmp	r3, r9
 800765e:	d307      	bcc.n	8007670 <__cvt+0xbc>
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007664:	1bdb      	subs	r3, r3, r7
 8007666:	4638      	mov	r0, r7
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	b004      	add	sp, #16
 800766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	9103      	str	r1, [sp, #12]
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	e7f0      	b.n	800765a <__cvt+0xa6>

08007678 <__exponent>:
 8007678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800767a:	4603      	mov	r3, r0
 800767c:	2900      	cmp	r1, #0
 800767e:	bfb8      	it	lt
 8007680:	4249      	neglt	r1, r1
 8007682:	f803 2b02 	strb.w	r2, [r3], #2
 8007686:	bfb4      	ite	lt
 8007688:	222d      	movlt	r2, #45	; 0x2d
 800768a:	222b      	movge	r2, #43	; 0x2b
 800768c:	2909      	cmp	r1, #9
 800768e:	7042      	strb	r2, [r0, #1]
 8007690:	dd2a      	ble.n	80076e8 <__exponent+0x70>
 8007692:	f10d 0407 	add.w	r4, sp, #7
 8007696:	46a4      	mov	ip, r4
 8007698:	270a      	movs	r7, #10
 800769a:	46a6      	mov	lr, r4
 800769c:	460a      	mov	r2, r1
 800769e:	fb91 f6f7 	sdiv	r6, r1, r7
 80076a2:	fb07 1516 	mls	r5, r7, r6, r1
 80076a6:	3530      	adds	r5, #48	; 0x30
 80076a8:	2a63      	cmp	r2, #99	; 0x63
 80076aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80076ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80076b2:	4631      	mov	r1, r6
 80076b4:	dcf1      	bgt.n	800769a <__exponent+0x22>
 80076b6:	3130      	adds	r1, #48	; 0x30
 80076b8:	f1ae 0502 	sub.w	r5, lr, #2
 80076bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80076c0:	1c44      	adds	r4, r0, #1
 80076c2:	4629      	mov	r1, r5
 80076c4:	4561      	cmp	r1, ip
 80076c6:	d30a      	bcc.n	80076de <__exponent+0x66>
 80076c8:	f10d 0209 	add.w	r2, sp, #9
 80076cc:	eba2 020e 	sub.w	r2, r2, lr
 80076d0:	4565      	cmp	r5, ip
 80076d2:	bf88      	it	hi
 80076d4:	2200      	movhi	r2, #0
 80076d6:	4413      	add	r3, r2
 80076d8:	1a18      	subs	r0, r3, r0
 80076da:	b003      	add	sp, #12
 80076dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80076e6:	e7ed      	b.n	80076c4 <__exponent+0x4c>
 80076e8:	2330      	movs	r3, #48	; 0x30
 80076ea:	3130      	adds	r1, #48	; 0x30
 80076ec:	7083      	strb	r3, [r0, #2]
 80076ee:	70c1      	strb	r1, [r0, #3]
 80076f0:	1d03      	adds	r3, r0, #4
 80076f2:	e7f1      	b.n	80076d8 <__exponent+0x60>

080076f4 <_printf_float>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	ed2d 8b02 	vpush	{d8}
 80076fc:	b08d      	sub	sp, #52	; 0x34
 80076fe:	460c      	mov	r4, r1
 8007700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007704:	4616      	mov	r6, r2
 8007706:	461f      	mov	r7, r3
 8007708:	4605      	mov	r5, r0
 800770a:	f001 fa8b 	bl	8008c24 <_localeconv_r>
 800770e:	f8d0 a000 	ldr.w	sl, [r0]
 8007712:	4650      	mov	r0, sl
 8007714:	f7f8 fd64 	bl	80001e0 <strlen>
 8007718:	2300      	movs	r3, #0
 800771a:	930a      	str	r3, [sp, #40]	; 0x28
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	9305      	str	r3, [sp, #20]
 8007720:	f8d8 3000 	ldr.w	r3, [r8]
 8007724:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007728:	3307      	adds	r3, #7
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	f103 0208 	add.w	r2, r3, #8
 8007732:	f8c8 2000 	str.w	r2, [r8]
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800773e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007742:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007746:	9307      	str	r3, [sp, #28]
 8007748:	f8cd 8018 	str.w	r8, [sp, #24]
 800774c:	ee08 0a10 	vmov	s16, r0
 8007750:	4b9f      	ldr	r3, [pc, #636]	; (80079d0 <_printf_float+0x2dc>)
 8007752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800775a:	f7f9 f9ef 	bl	8000b3c <__aeabi_dcmpun>
 800775e:	bb88      	cbnz	r0, 80077c4 <_printf_float+0xd0>
 8007760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007764:	4b9a      	ldr	r3, [pc, #616]	; (80079d0 <_printf_float+0x2dc>)
 8007766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800776a:	f7f9 f9c9 	bl	8000b00 <__aeabi_dcmple>
 800776e:	bb48      	cbnz	r0, 80077c4 <_printf_float+0xd0>
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	4640      	mov	r0, r8
 8007776:	4649      	mov	r1, r9
 8007778:	f7f9 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800777c:	b110      	cbz	r0, 8007784 <_printf_float+0x90>
 800777e:	232d      	movs	r3, #45	; 0x2d
 8007780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007784:	4b93      	ldr	r3, [pc, #588]	; (80079d4 <_printf_float+0x2e0>)
 8007786:	4894      	ldr	r0, [pc, #592]	; (80079d8 <_printf_float+0x2e4>)
 8007788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800778c:	bf94      	ite	ls
 800778e:	4698      	movls	r8, r3
 8007790:	4680      	movhi	r8, r0
 8007792:	2303      	movs	r3, #3
 8007794:	6123      	str	r3, [r4, #16]
 8007796:	9b05      	ldr	r3, [sp, #20]
 8007798:	f023 0204 	bic.w	r2, r3, #4
 800779c:	6022      	str	r2, [r4, #0]
 800779e:	f04f 0900 	mov.w	r9, #0
 80077a2:	9700      	str	r7, [sp, #0]
 80077a4:	4633      	mov	r3, r6
 80077a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80077a8:	4621      	mov	r1, r4
 80077aa:	4628      	mov	r0, r5
 80077ac:	f000 f9d8 	bl	8007b60 <_printf_common>
 80077b0:	3001      	adds	r0, #1
 80077b2:	f040 8090 	bne.w	80078d6 <_printf_float+0x1e2>
 80077b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077ba:	b00d      	add	sp, #52	; 0x34
 80077bc:	ecbd 8b02 	vpop	{d8}
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077c4:	4642      	mov	r2, r8
 80077c6:	464b      	mov	r3, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f9 f9b6 	bl	8000b3c <__aeabi_dcmpun>
 80077d0:	b140      	cbz	r0, 80077e4 <_printf_float+0xf0>
 80077d2:	464b      	mov	r3, r9
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	bfbc      	itt	lt
 80077d8:	232d      	movlt	r3, #45	; 0x2d
 80077da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077de:	487f      	ldr	r0, [pc, #508]	; (80079dc <_printf_float+0x2e8>)
 80077e0:	4b7f      	ldr	r3, [pc, #508]	; (80079e0 <_printf_float+0x2ec>)
 80077e2:	e7d1      	b.n	8007788 <_printf_float+0x94>
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80077ea:	9206      	str	r2, [sp, #24]
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	d13f      	bne.n	8007870 <_printf_float+0x17c>
 80077f0:	2306      	movs	r3, #6
 80077f2:	6063      	str	r3, [r4, #4]
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	6861      	ldr	r1, [r4, #4]
 80077f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077fc:	2300      	movs	r3, #0
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	ab0a      	add	r3, sp, #40	; 0x28
 8007802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007806:	ab09      	add	r3, sp, #36	; 0x24
 8007808:	ec49 8b10 	vmov	d0, r8, r9
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	6022      	str	r2, [r4, #0]
 8007810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007814:	4628      	mov	r0, r5
 8007816:	f7ff fecd 	bl	80075b4 <__cvt>
 800781a:	9b06      	ldr	r3, [sp, #24]
 800781c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800781e:	2b47      	cmp	r3, #71	; 0x47
 8007820:	4680      	mov	r8, r0
 8007822:	d108      	bne.n	8007836 <_printf_float+0x142>
 8007824:	1cc8      	adds	r0, r1, #3
 8007826:	db02      	blt.n	800782e <_printf_float+0x13a>
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	4299      	cmp	r1, r3
 800782c:	dd41      	ble.n	80078b2 <_printf_float+0x1be>
 800782e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007832:	fa5f fb8b 	uxtb.w	fp, fp
 8007836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800783a:	d820      	bhi.n	800787e <_printf_float+0x18a>
 800783c:	3901      	subs	r1, #1
 800783e:	465a      	mov	r2, fp
 8007840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007844:	9109      	str	r1, [sp, #36]	; 0x24
 8007846:	f7ff ff17 	bl	8007678 <__exponent>
 800784a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800784c:	1813      	adds	r3, r2, r0
 800784e:	2a01      	cmp	r2, #1
 8007850:	4681      	mov	r9, r0
 8007852:	6123      	str	r3, [r4, #16]
 8007854:	dc02      	bgt.n	800785c <_printf_float+0x168>
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	07d2      	lsls	r2, r2, #31
 800785a:	d501      	bpl.n	8007860 <_printf_float+0x16c>
 800785c:	3301      	adds	r3, #1
 800785e:	6123      	str	r3, [r4, #16]
 8007860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007864:	2b00      	cmp	r3, #0
 8007866:	d09c      	beq.n	80077a2 <_printf_float+0xae>
 8007868:	232d      	movs	r3, #45	; 0x2d
 800786a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800786e:	e798      	b.n	80077a2 <_printf_float+0xae>
 8007870:	9a06      	ldr	r2, [sp, #24]
 8007872:	2a47      	cmp	r2, #71	; 0x47
 8007874:	d1be      	bne.n	80077f4 <_printf_float+0x100>
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1bc      	bne.n	80077f4 <_printf_float+0x100>
 800787a:	2301      	movs	r3, #1
 800787c:	e7b9      	b.n	80077f2 <_printf_float+0xfe>
 800787e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007882:	d118      	bne.n	80078b6 <_printf_float+0x1c2>
 8007884:	2900      	cmp	r1, #0
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	dd0b      	ble.n	80078a2 <_printf_float+0x1ae>
 800788a:	6121      	str	r1, [r4, #16]
 800788c:	b913      	cbnz	r3, 8007894 <_printf_float+0x1a0>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	07d0      	lsls	r0, r2, #31
 8007892:	d502      	bpl.n	800789a <_printf_float+0x1a6>
 8007894:	3301      	adds	r3, #1
 8007896:	440b      	add	r3, r1
 8007898:	6123      	str	r3, [r4, #16]
 800789a:	65a1      	str	r1, [r4, #88]	; 0x58
 800789c:	f04f 0900 	mov.w	r9, #0
 80078a0:	e7de      	b.n	8007860 <_printf_float+0x16c>
 80078a2:	b913      	cbnz	r3, 80078aa <_printf_float+0x1b6>
 80078a4:	6822      	ldr	r2, [r4, #0]
 80078a6:	07d2      	lsls	r2, r2, #31
 80078a8:	d501      	bpl.n	80078ae <_printf_float+0x1ba>
 80078aa:	3302      	adds	r3, #2
 80078ac:	e7f4      	b.n	8007898 <_printf_float+0x1a4>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e7f2      	b.n	8007898 <_printf_float+0x1a4>
 80078b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b8:	4299      	cmp	r1, r3
 80078ba:	db05      	blt.n	80078c8 <_printf_float+0x1d4>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	6121      	str	r1, [r4, #16]
 80078c0:	07d8      	lsls	r0, r3, #31
 80078c2:	d5ea      	bpl.n	800789a <_printf_float+0x1a6>
 80078c4:	1c4b      	adds	r3, r1, #1
 80078c6:	e7e7      	b.n	8007898 <_printf_float+0x1a4>
 80078c8:	2900      	cmp	r1, #0
 80078ca:	bfd4      	ite	le
 80078cc:	f1c1 0202 	rsble	r2, r1, #2
 80078d0:	2201      	movgt	r2, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	e7e0      	b.n	8007898 <_printf_float+0x1a4>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	055a      	lsls	r2, r3, #21
 80078da:	d407      	bmi.n	80078ec <_printf_float+0x1f8>
 80078dc:	6923      	ldr	r3, [r4, #16]
 80078de:	4642      	mov	r2, r8
 80078e0:	4631      	mov	r1, r6
 80078e2:	4628      	mov	r0, r5
 80078e4:	47b8      	blx	r7
 80078e6:	3001      	adds	r0, #1
 80078e8:	d12c      	bne.n	8007944 <_printf_float+0x250>
 80078ea:	e764      	b.n	80077b6 <_printf_float+0xc2>
 80078ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078f0:	f240 80e0 	bls.w	8007ab4 <_printf_float+0x3c0>
 80078f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	f7f9 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8007900:	2800      	cmp	r0, #0
 8007902:	d034      	beq.n	800796e <_printf_float+0x27a>
 8007904:	4a37      	ldr	r2, [pc, #220]	; (80079e4 <_printf_float+0x2f0>)
 8007906:	2301      	movs	r3, #1
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f af51 	beq.w	80077b6 <_printf_float+0xc2>
 8007914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007918:	429a      	cmp	r2, r3
 800791a:	db02      	blt.n	8007922 <_printf_float+0x22e>
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	07d8      	lsls	r0, r3, #31
 8007920:	d510      	bpl.n	8007944 <_printf_float+0x250>
 8007922:	ee18 3a10 	vmov	r3, s16
 8007926:	4652      	mov	r2, sl
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	47b8      	blx	r7
 800792e:	3001      	adds	r0, #1
 8007930:	f43f af41 	beq.w	80077b6 <_printf_float+0xc2>
 8007934:	f04f 0800 	mov.w	r8, #0
 8007938:	f104 091a 	add.w	r9, r4, #26
 800793c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800793e:	3b01      	subs	r3, #1
 8007940:	4543      	cmp	r3, r8
 8007942:	dc09      	bgt.n	8007958 <_printf_float+0x264>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	079b      	lsls	r3, r3, #30
 8007948:	f100 8105 	bmi.w	8007b56 <_printf_float+0x462>
 800794c:	68e0      	ldr	r0, [r4, #12]
 800794e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007950:	4298      	cmp	r0, r3
 8007952:	bfb8      	it	lt
 8007954:	4618      	movlt	r0, r3
 8007956:	e730      	b.n	80077ba <_printf_float+0xc6>
 8007958:	2301      	movs	r3, #1
 800795a:	464a      	mov	r2, r9
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	f43f af27 	beq.w	80077b6 <_printf_float+0xc2>
 8007968:	f108 0801 	add.w	r8, r8, #1
 800796c:	e7e6      	b.n	800793c <_printf_float+0x248>
 800796e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007970:	2b00      	cmp	r3, #0
 8007972:	dc39      	bgt.n	80079e8 <_printf_float+0x2f4>
 8007974:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <_printf_float+0x2f0>)
 8007976:	2301      	movs	r3, #1
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	f43f af19 	beq.w	80077b6 <_printf_float+0xc2>
 8007984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007988:	4313      	orrs	r3, r2
 800798a:	d102      	bne.n	8007992 <_printf_float+0x29e>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	07d9      	lsls	r1, r3, #31
 8007990:	d5d8      	bpl.n	8007944 <_printf_float+0x250>
 8007992:	ee18 3a10 	vmov	r3, s16
 8007996:	4652      	mov	r2, sl
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af09 	beq.w	80077b6 <_printf_float+0xc2>
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	f104 0a1a 	add.w	sl, r4, #26
 80079ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ae:	425b      	negs	r3, r3
 80079b0:	454b      	cmp	r3, r9
 80079b2:	dc01      	bgt.n	80079b8 <_printf_float+0x2c4>
 80079b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b6:	e792      	b.n	80078de <_printf_float+0x1ea>
 80079b8:	2301      	movs	r3, #1
 80079ba:	4652      	mov	r2, sl
 80079bc:	4631      	mov	r1, r6
 80079be:	4628      	mov	r0, r5
 80079c0:	47b8      	blx	r7
 80079c2:	3001      	adds	r0, #1
 80079c4:	f43f aef7 	beq.w	80077b6 <_printf_float+0xc2>
 80079c8:	f109 0901 	add.w	r9, r9, #1
 80079cc:	e7ee      	b.n	80079ac <_printf_float+0x2b8>
 80079ce:	bf00      	nop
 80079d0:	7fefffff 	.word	0x7fefffff
 80079d4:	0800aab0 	.word	0x0800aab0
 80079d8:	0800aab4 	.word	0x0800aab4
 80079dc:	0800aabc 	.word	0x0800aabc
 80079e0:	0800aab8 	.word	0x0800aab8
 80079e4:	0800aac0 	.word	0x0800aac0
 80079e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079ec:	429a      	cmp	r2, r3
 80079ee:	bfa8      	it	ge
 80079f0:	461a      	movge	r2, r3
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	4691      	mov	r9, r2
 80079f6:	dc37      	bgt.n	8007a68 <_printf_float+0x374>
 80079f8:	f04f 0b00 	mov.w	fp, #0
 80079fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a00:	f104 021a 	add.w	r2, r4, #26
 8007a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a06:	9305      	str	r3, [sp, #20]
 8007a08:	eba3 0309 	sub.w	r3, r3, r9
 8007a0c:	455b      	cmp	r3, fp
 8007a0e:	dc33      	bgt.n	8007a78 <_printf_float+0x384>
 8007a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a14:	429a      	cmp	r2, r3
 8007a16:	db3b      	blt.n	8007a90 <_printf_float+0x39c>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	07da      	lsls	r2, r3, #31
 8007a1c:	d438      	bmi.n	8007a90 <_printf_float+0x39c>
 8007a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a20:	9a05      	ldr	r2, [sp, #20]
 8007a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a24:	1a9a      	subs	r2, r3, r2
 8007a26:	eba3 0901 	sub.w	r9, r3, r1
 8007a2a:	4591      	cmp	r9, r2
 8007a2c:	bfa8      	it	ge
 8007a2e:	4691      	movge	r9, r2
 8007a30:	f1b9 0f00 	cmp.w	r9, #0
 8007a34:	dc35      	bgt.n	8007aa2 <_printf_float+0x3ae>
 8007a36:	f04f 0800 	mov.w	r8, #0
 8007a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a3e:	f104 0a1a 	add.w	sl, r4, #26
 8007a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	eba3 0309 	sub.w	r3, r3, r9
 8007a4c:	4543      	cmp	r3, r8
 8007a4e:	f77f af79 	ble.w	8007944 <_printf_float+0x250>
 8007a52:	2301      	movs	r3, #1
 8007a54:	4652      	mov	r2, sl
 8007a56:	4631      	mov	r1, r6
 8007a58:	4628      	mov	r0, r5
 8007a5a:	47b8      	blx	r7
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f43f aeaa 	beq.w	80077b6 <_printf_float+0xc2>
 8007a62:	f108 0801 	add.w	r8, r8, #1
 8007a66:	e7ec      	b.n	8007a42 <_printf_float+0x34e>
 8007a68:	4613      	mov	r3, r2
 8007a6a:	4631      	mov	r1, r6
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	4628      	mov	r0, r5
 8007a70:	47b8      	blx	r7
 8007a72:	3001      	adds	r0, #1
 8007a74:	d1c0      	bne.n	80079f8 <_printf_float+0x304>
 8007a76:	e69e      	b.n	80077b6 <_printf_float+0xc2>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	9205      	str	r2, [sp, #20]
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f ae97 	beq.w	80077b6 <_printf_float+0xc2>
 8007a88:	9a05      	ldr	r2, [sp, #20]
 8007a8a:	f10b 0b01 	add.w	fp, fp, #1
 8007a8e:	e7b9      	b.n	8007a04 <_printf_float+0x310>
 8007a90:	ee18 3a10 	vmov	r3, s16
 8007a94:	4652      	mov	r2, sl
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d1be      	bne.n	8007a1e <_printf_float+0x32a>
 8007aa0:	e689      	b.n	80077b6 <_printf_float+0xc2>
 8007aa2:	9a05      	ldr	r2, [sp, #20]
 8007aa4:	464b      	mov	r3, r9
 8007aa6:	4442      	add	r2, r8
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b8      	blx	r7
 8007aae:	3001      	adds	r0, #1
 8007ab0:	d1c1      	bne.n	8007a36 <_printf_float+0x342>
 8007ab2:	e680      	b.n	80077b6 <_printf_float+0xc2>
 8007ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab6:	2a01      	cmp	r2, #1
 8007ab8:	dc01      	bgt.n	8007abe <_printf_float+0x3ca>
 8007aba:	07db      	lsls	r3, r3, #31
 8007abc:	d538      	bpl.n	8007b30 <_printf_float+0x43c>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	47b8      	blx	r7
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f43f ae74 	beq.w	80077b6 <_printf_float+0xc2>
 8007ace:	ee18 3a10 	vmov	r3, s16
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f ae6b 	beq.w	80077b6 <_printf_float+0xc2>
 8007ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f7f8 fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aec:	b9d8      	cbnz	r0, 8007b26 <_printf_float+0x432>
 8007aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007af0:	f108 0201 	add.w	r2, r8, #1
 8007af4:	3b01      	subs	r3, #1
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	d10e      	bne.n	8007b1e <_printf_float+0x42a>
 8007b00:	e659      	b.n	80077b6 <_printf_float+0xc2>
 8007b02:	2301      	movs	r3, #1
 8007b04:	4652      	mov	r2, sl
 8007b06:	4631      	mov	r1, r6
 8007b08:	4628      	mov	r0, r5
 8007b0a:	47b8      	blx	r7
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	f43f ae52 	beq.w	80077b6 <_printf_float+0xc2>
 8007b12:	f108 0801 	add.w	r8, r8, #1
 8007b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	4543      	cmp	r3, r8
 8007b1c:	dcf1      	bgt.n	8007b02 <_printf_float+0x40e>
 8007b1e:	464b      	mov	r3, r9
 8007b20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b24:	e6dc      	b.n	80078e0 <_printf_float+0x1ec>
 8007b26:	f04f 0800 	mov.w	r8, #0
 8007b2a:	f104 0a1a 	add.w	sl, r4, #26
 8007b2e:	e7f2      	b.n	8007b16 <_printf_float+0x422>
 8007b30:	2301      	movs	r3, #1
 8007b32:	4642      	mov	r2, r8
 8007b34:	e7df      	b.n	8007af6 <_printf_float+0x402>
 8007b36:	2301      	movs	r3, #1
 8007b38:	464a      	mov	r2, r9
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f ae38 	beq.w	80077b6 <_printf_float+0xc2>
 8007b46:	f108 0801 	add.w	r8, r8, #1
 8007b4a:	68e3      	ldr	r3, [r4, #12]
 8007b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b4e:	1a5b      	subs	r3, r3, r1
 8007b50:	4543      	cmp	r3, r8
 8007b52:	dcf0      	bgt.n	8007b36 <_printf_float+0x442>
 8007b54:	e6fa      	b.n	800794c <_printf_float+0x258>
 8007b56:	f04f 0800 	mov.w	r8, #0
 8007b5a:	f104 0919 	add.w	r9, r4, #25
 8007b5e:	e7f4      	b.n	8007b4a <_printf_float+0x456>

08007b60 <_printf_common>:
 8007b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b64:	4616      	mov	r6, r2
 8007b66:	4699      	mov	r9, r3
 8007b68:	688a      	ldr	r2, [r1, #8]
 8007b6a:	690b      	ldr	r3, [r1, #16]
 8007b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	bfb8      	it	lt
 8007b74:	4613      	movlt	r3, r2
 8007b76:	6033      	str	r3, [r6, #0]
 8007b78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	460c      	mov	r4, r1
 8007b80:	b10a      	cbz	r2, 8007b86 <_printf_common+0x26>
 8007b82:	3301      	adds	r3, #1
 8007b84:	6033      	str	r3, [r6, #0]
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	0699      	lsls	r1, r3, #26
 8007b8a:	bf42      	ittt	mi
 8007b8c:	6833      	ldrmi	r3, [r6, #0]
 8007b8e:	3302      	addmi	r3, #2
 8007b90:	6033      	strmi	r3, [r6, #0]
 8007b92:	6825      	ldr	r5, [r4, #0]
 8007b94:	f015 0506 	ands.w	r5, r5, #6
 8007b98:	d106      	bne.n	8007ba8 <_printf_common+0x48>
 8007b9a:	f104 0a19 	add.w	sl, r4, #25
 8007b9e:	68e3      	ldr	r3, [r4, #12]
 8007ba0:	6832      	ldr	r2, [r6, #0]
 8007ba2:	1a9b      	subs	r3, r3, r2
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dc26      	bgt.n	8007bf6 <_printf_common+0x96>
 8007ba8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bac:	1e13      	subs	r3, r2, #0
 8007bae:	6822      	ldr	r2, [r4, #0]
 8007bb0:	bf18      	it	ne
 8007bb2:	2301      	movne	r3, #1
 8007bb4:	0692      	lsls	r2, r2, #26
 8007bb6:	d42b      	bmi.n	8007c10 <_printf_common+0xb0>
 8007bb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	47c0      	blx	r8
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d01e      	beq.n	8007c04 <_printf_common+0xa4>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	68e5      	ldr	r5, [r4, #12]
 8007bca:	6832      	ldr	r2, [r6, #0]
 8007bcc:	f003 0306 	and.w	r3, r3, #6
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	bf08      	it	eq
 8007bd4:	1aad      	subeq	r5, r5, r2
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	6922      	ldr	r2, [r4, #16]
 8007bda:	bf0c      	ite	eq
 8007bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007be0:	2500      	movne	r5, #0
 8007be2:	4293      	cmp	r3, r2
 8007be4:	bfc4      	itt	gt
 8007be6:	1a9b      	subgt	r3, r3, r2
 8007be8:	18ed      	addgt	r5, r5, r3
 8007bea:	2600      	movs	r6, #0
 8007bec:	341a      	adds	r4, #26
 8007bee:	42b5      	cmp	r5, r6
 8007bf0:	d11a      	bne.n	8007c28 <_printf_common+0xc8>
 8007bf2:	2000      	movs	r0, #0
 8007bf4:	e008      	b.n	8007c08 <_printf_common+0xa8>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	47c0      	blx	r8
 8007c00:	3001      	adds	r0, #1
 8007c02:	d103      	bne.n	8007c0c <_printf_common+0xac>
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	e7c6      	b.n	8007b9e <_printf_common+0x3e>
 8007c10:	18e1      	adds	r1, r4, r3
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	2030      	movs	r0, #48	; 0x30
 8007c16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c1a:	4422      	add	r2, r4
 8007c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c24:	3302      	adds	r3, #2
 8007c26:	e7c7      	b.n	8007bb8 <_printf_common+0x58>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	4649      	mov	r1, r9
 8007c2e:	4638      	mov	r0, r7
 8007c30:	47c0      	blx	r8
 8007c32:	3001      	adds	r0, #1
 8007c34:	d0e6      	beq.n	8007c04 <_printf_common+0xa4>
 8007c36:	3601      	adds	r6, #1
 8007c38:	e7d9      	b.n	8007bee <_printf_common+0x8e>
	...

08007c3c <_printf_i>:
 8007c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	7e0f      	ldrb	r7, [r1, #24]
 8007c42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c44:	2f78      	cmp	r7, #120	; 0x78
 8007c46:	4691      	mov	r9, r2
 8007c48:	4680      	mov	r8, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	469a      	mov	sl, r3
 8007c4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c52:	d807      	bhi.n	8007c64 <_printf_i+0x28>
 8007c54:	2f62      	cmp	r7, #98	; 0x62
 8007c56:	d80a      	bhi.n	8007c6e <_printf_i+0x32>
 8007c58:	2f00      	cmp	r7, #0
 8007c5a:	f000 80d8 	beq.w	8007e0e <_printf_i+0x1d2>
 8007c5e:	2f58      	cmp	r7, #88	; 0x58
 8007c60:	f000 80a3 	beq.w	8007daa <_printf_i+0x16e>
 8007c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c6c:	e03a      	b.n	8007ce4 <_printf_i+0xa8>
 8007c6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c72:	2b15      	cmp	r3, #21
 8007c74:	d8f6      	bhi.n	8007c64 <_printf_i+0x28>
 8007c76:	a101      	add	r1, pc, #4	; (adr r1, 8007c7c <_printf_i+0x40>)
 8007c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c7c:	08007cd5 	.word	0x08007cd5
 8007c80:	08007ce9 	.word	0x08007ce9
 8007c84:	08007c65 	.word	0x08007c65
 8007c88:	08007c65 	.word	0x08007c65
 8007c8c:	08007c65 	.word	0x08007c65
 8007c90:	08007c65 	.word	0x08007c65
 8007c94:	08007ce9 	.word	0x08007ce9
 8007c98:	08007c65 	.word	0x08007c65
 8007c9c:	08007c65 	.word	0x08007c65
 8007ca0:	08007c65 	.word	0x08007c65
 8007ca4:	08007c65 	.word	0x08007c65
 8007ca8:	08007df5 	.word	0x08007df5
 8007cac:	08007d19 	.word	0x08007d19
 8007cb0:	08007dd7 	.word	0x08007dd7
 8007cb4:	08007c65 	.word	0x08007c65
 8007cb8:	08007c65 	.word	0x08007c65
 8007cbc:	08007e17 	.word	0x08007e17
 8007cc0:	08007c65 	.word	0x08007c65
 8007cc4:	08007d19 	.word	0x08007d19
 8007cc8:	08007c65 	.word	0x08007c65
 8007ccc:	08007c65 	.word	0x08007c65
 8007cd0:	08007ddf 	.word	0x08007ddf
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	1d1a      	adds	r2, r3, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	602a      	str	r2, [r5, #0]
 8007cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e0a3      	b.n	8007e30 <_printf_i+0x1f4>
 8007ce8:	6820      	ldr	r0, [r4, #0]
 8007cea:	6829      	ldr	r1, [r5, #0]
 8007cec:	0606      	lsls	r6, r0, #24
 8007cee:	f101 0304 	add.w	r3, r1, #4
 8007cf2:	d50a      	bpl.n	8007d0a <_printf_i+0xce>
 8007cf4:	680e      	ldr	r6, [r1, #0]
 8007cf6:	602b      	str	r3, [r5, #0]
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	da03      	bge.n	8007d04 <_printf_i+0xc8>
 8007cfc:	232d      	movs	r3, #45	; 0x2d
 8007cfe:	4276      	negs	r6, r6
 8007d00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d04:	485e      	ldr	r0, [pc, #376]	; (8007e80 <_printf_i+0x244>)
 8007d06:	230a      	movs	r3, #10
 8007d08:	e019      	b.n	8007d3e <_printf_i+0x102>
 8007d0a:	680e      	ldr	r6, [r1, #0]
 8007d0c:	602b      	str	r3, [r5, #0]
 8007d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d12:	bf18      	it	ne
 8007d14:	b236      	sxthne	r6, r6
 8007d16:	e7ef      	b.n	8007cf8 <_printf_i+0xbc>
 8007d18:	682b      	ldr	r3, [r5, #0]
 8007d1a:	6820      	ldr	r0, [r4, #0]
 8007d1c:	1d19      	adds	r1, r3, #4
 8007d1e:	6029      	str	r1, [r5, #0]
 8007d20:	0601      	lsls	r1, r0, #24
 8007d22:	d501      	bpl.n	8007d28 <_printf_i+0xec>
 8007d24:	681e      	ldr	r6, [r3, #0]
 8007d26:	e002      	b.n	8007d2e <_printf_i+0xf2>
 8007d28:	0646      	lsls	r6, r0, #25
 8007d2a:	d5fb      	bpl.n	8007d24 <_printf_i+0xe8>
 8007d2c:	881e      	ldrh	r6, [r3, #0]
 8007d2e:	4854      	ldr	r0, [pc, #336]	; (8007e80 <_printf_i+0x244>)
 8007d30:	2f6f      	cmp	r7, #111	; 0x6f
 8007d32:	bf0c      	ite	eq
 8007d34:	2308      	moveq	r3, #8
 8007d36:	230a      	movne	r3, #10
 8007d38:	2100      	movs	r1, #0
 8007d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d3e:	6865      	ldr	r5, [r4, #4]
 8007d40:	60a5      	str	r5, [r4, #8]
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	bfa2      	ittt	ge
 8007d46:	6821      	ldrge	r1, [r4, #0]
 8007d48:	f021 0104 	bicge.w	r1, r1, #4
 8007d4c:	6021      	strge	r1, [r4, #0]
 8007d4e:	b90e      	cbnz	r6, 8007d54 <_printf_i+0x118>
 8007d50:	2d00      	cmp	r5, #0
 8007d52:	d04d      	beq.n	8007df0 <_printf_i+0x1b4>
 8007d54:	4615      	mov	r5, r2
 8007d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007d5e:	5dc7      	ldrb	r7, [r0, r7]
 8007d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d64:	4637      	mov	r7, r6
 8007d66:	42bb      	cmp	r3, r7
 8007d68:	460e      	mov	r6, r1
 8007d6a:	d9f4      	bls.n	8007d56 <_printf_i+0x11a>
 8007d6c:	2b08      	cmp	r3, #8
 8007d6e:	d10b      	bne.n	8007d88 <_printf_i+0x14c>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	07de      	lsls	r6, r3, #31
 8007d74:	d508      	bpl.n	8007d88 <_printf_i+0x14c>
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	6861      	ldr	r1, [r4, #4]
 8007d7a:	4299      	cmp	r1, r3
 8007d7c:	bfde      	ittt	le
 8007d7e:	2330      	movle	r3, #48	; 0x30
 8007d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d88:	1b52      	subs	r2, r2, r5
 8007d8a:	6122      	str	r2, [r4, #16]
 8007d8c:	f8cd a000 	str.w	sl, [sp]
 8007d90:	464b      	mov	r3, r9
 8007d92:	aa03      	add	r2, sp, #12
 8007d94:	4621      	mov	r1, r4
 8007d96:	4640      	mov	r0, r8
 8007d98:	f7ff fee2 	bl	8007b60 <_printf_common>
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d14c      	bne.n	8007e3a <_printf_i+0x1fe>
 8007da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007da4:	b004      	add	sp, #16
 8007da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007daa:	4835      	ldr	r0, [pc, #212]	; (8007e80 <_printf_i+0x244>)
 8007dac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007db0:	6829      	ldr	r1, [r5, #0]
 8007db2:	6823      	ldr	r3, [r4, #0]
 8007db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007db8:	6029      	str	r1, [r5, #0]
 8007dba:	061d      	lsls	r5, r3, #24
 8007dbc:	d514      	bpl.n	8007de8 <_printf_i+0x1ac>
 8007dbe:	07df      	lsls	r7, r3, #31
 8007dc0:	bf44      	itt	mi
 8007dc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007dc6:	6023      	strmi	r3, [r4, #0]
 8007dc8:	b91e      	cbnz	r6, 8007dd2 <_printf_i+0x196>
 8007dca:	6823      	ldr	r3, [r4, #0]
 8007dcc:	f023 0320 	bic.w	r3, r3, #32
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	e7b0      	b.n	8007d38 <_printf_i+0xfc>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	f043 0320 	orr.w	r3, r3, #32
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	2378      	movs	r3, #120	; 0x78
 8007de0:	4828      	ldr	r0, [pc, #160]	; (8007e84 <_printf_i+0x248>)
 8007de2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007de6:	e7e3      	b.n	8007db0 <_printf_i+0x174>
 8007de8:	0659      	lsls	r1, r3, #25
 8007dea:	bf48      	it	mi
 8007dec:	b2b6      	uxthmi	r6, r6
 8007dee:	e7e6      	b.n	8007dbe <_printf_i+0x182>
 8007df0:	4615      	mov	r5, r2
 8007df2:	e7bb      	b.n	8007d6c <_printf_i+0x130>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	6826      	ldr	r6, [r4, #0]
 8007df8:	6961      	ldr	r1, [r4, #20]
 8007dfa:	1d18      	adds	r0, r3, #4
 8007dfc:	6028      	str	r0, [r5, #0]
 8007dfe:	0635      	lsls	r5, r6, #24
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	d501      	bpl.n	8007e08 <_printf_i+0x1cc>
 8007e04:	6019      	str	r1, [r3, #0]
 8007e06:	e002      	b.n	8007e0e <_printf_i+0x1d2>
 8007e08:	0670      	lsls	r0, r6, #25
 8007e0a:	d5fb      	bpl.n	8007e04 <_printf_i+0x1c8>
 8007e0c:	8019      	strh	r1, [r3, #0]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	6123      	str	r3, [r4, #16]
 8007e12:	4615      	mov	r5, r2
 8007e14:	e7ba      	b.n	8007d8c <_printf_i+0x150>
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	1d1a      	adds	r2, r3, #4
 8007e1a:	602a      	str	r2, [r5, #0]
 8007e1c:	681d      	ldr	r5, [r3, #0]
 8007e1e:	6862      	ldr	r2, [r4, #4]
 8007e20:	2100      	movs	r1, #0
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7f8 f9e4 	bl	80001f0 <memchr>
 8007e28:	b108      	cbz	r0, 8007e2e <_printf_i+0x1f2>
 8007e2a:	1b40      	subs	r0, r0, r5
 8007e2c:	6060      	str	r0, [r4, #4]
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	2300      	movs	r3, #0
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	e7a8      	b.n	8007d8c <_printf_i+0x150>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4649      	mov	r1, r9
 8007e40:	4640      	mov	r0, r8
 8007e42:	47d0      	blx	sl
 8007e44:	3001      	adds	r0, #1
 8007e46:	d0ab      	beq.n	8007da0 <_printf_i+0x164>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	079b      	lsls	r3, r3, #30
 8007e4c:	d413      	bmi.n	8007e76 <_printf_i+0x23a>
 8007e4e:	68e0      	ldr	r0, [r4, #12]
 8007e50:	9b03      	ldr	r3, [sp, #12]
 8007e52:	4298      	cmp	r0, r3
 8007e54:	bfb8      	it	lt
 8007e56:	4618      	movlt	r0, r3
 8007e58:	e7a4      	b.n	8007da4 <_printf_i+0x168>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4632      	mov	r2, r6
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4640      	mov	r0, r8
 8007e62:	47d0      	blx	sl
 8007e64:	3001      	adds	r0, #1
 8007e66:	d09b      	beq.n	8007da0 <_printf_i+0x164>
 8007e68:	3501      	adds	r5, #1
 8007e6a:	68e3      	ldr	r3, [r4, #12]
 8007e6c:	9903      	ldr	r1, [sp, #12]
 8007e6e:	1a5b      	subs	r3, r3, r1
 8007e70:	42ab      	cmp	r3, r5
 8007e72:	dcf2      	bgt.n	8007e5a <_printf_i+0x21e>
 8007e74:	e7eb      	b.n	8007e4e <_printf_i+0x212>
 8007e76:	2500      	movs	r5, #0
 8007e78:	f104 0619 	add.w	r6, r4, #25
 8007e7c:	e7f5      	b.n	8007e6a <_printf_i+0x22e>
 8007e7e:	bf00      	nop
 8007e80:	0800aac2 	.word	0x0800aac2
 8007e84:	0800aad3 	.word	0x0800aad3

08007e88 <sniprintf>:
 8007e88:	b40c      	push	{r2, r3}
 8007e8a:	b530      	push	{r4, r5, lr}
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <sniprintf+0x64>)
 8007e8e:	1e0c      	subs	r4, r1, #0
 8007e90:	681d      	ldr	r5, [r3, #0]
 8007e92:	b09d      	sub	sp, #116	; 0x74
 8007e94:	da08      	bge.n	8007ea8 <sniprintf+0x20>
 8007e96:	238b      	movs	r3, #139	; 0x8b
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e9e:	b01d      	add	sp, #116	; 0x74
 8007ea0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ea4:	b002      	add	sp, #8
 8007ea6:	4770      	bx	lr
 8007ea8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007eac:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007eb0:	bf14      	ite	ne
 8007eb2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007eb6:	4623      	moveq	r3, r4
 8007eb8:	9304      	str	r3, [sp, #16]
 8007eba:	9307      	str	r3, [sp, #28]
 8007ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007ec0:	9002      	str	r0, [sp, #8]
 8007ec2:	9006      	str	r0, [sp, #24]
 8007ec4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ec8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007eca:	ab21      	add	r3, sp, #132	; 0x84
 8007ecc:	a902      	add	r1, sp, #8
 8007ece:	4628      	mov	r0, r5
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	f001 fb97 	bl	8009604 <_svfiprintf_r>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	bfbc      	itt	lt
 8007eda:	238b      	movlt	r3, #139	; 0x8b
 8007edc:	602b      	strlt	r3, [r5, #0]
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	d0dd      	beq.n	8007e9e <sniprintf+0x16>
 8007ee2:	9b02      	ldr	r3, [sp, #8]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e7d9      	b.n	8007e9e <sniprintf+0x16>
 8007eea:	bf00      	nop
 8007eec:	2000000c 	.word	0x2000000c

08007ef0 <siprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	b500      	push	{lr}
 8007ef4:	b09c      	sub	sp, #112	; 0x70
 8007ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ef8:	9002      	str	r0, [sp, #8]
 8007efa:	9006      	str	r0, [sp, #24]
 8007efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f00:	4809      	ldr	r0, [pc, #36]	; (8007f28 <siprintf+0x38>)
 8007f02:	9107      	str	r1, [sp, #28]
 8007f04:	9104      	str	r1, [sp, #16]
 8007f06:	4909      	ldr	r1, [pc, #36]	; (8007f2c <siprintf+0x3c>)
 8007f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	6800      	ldr	r0, [r0, #0]
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	a902      	add	r1, sp, #8
 8007f14:	f001 fb76 	bl	8009604 <_svfiprintf_r>
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	b01c      	add	sp, #112	; 0x70
 8007f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f24:	b003      	add	sp, #12
 8007f26:	4770      	bx	lr
 8007f28:	2000000c 	.word	0x2000000c
 8007f2c:	ffff0208 	.word	0xffff0208

08007f30 <quorem>:
 8007f30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f34:	6903      	ldr	r3, [r0, #16]
 8007f36:	690c      	ldr	r4, [r1, #16]
 8007f38:	42a3      	cmp	r3, r4
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	f2c0 8081 	blt.w	8008042 <quorem+0x112>
 8007f40:	3c01      	subs	r4, #1
 8007f42:	f101 0814 	add.w	r8, r1, #20
 8007f46:	f100 0514 	add.w	r5, r0, #20
 8007f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f54:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f58:	3301      	adds	r3, #1
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007f60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f68:	d331      	bcc.n	8007fce <quorem+0x9e>
 8007f6a:	f04f 0e00 	mov.w	lr, #0
 8007f6e:	4640      	mov	r0, r8
 8007f70:	46ac      	mov	ip, r5
 8007f72:	46f2      	mov	sl, lr
 8007f74:	f850 2b04 	ldr.w	r2, [r0], #4
 8007f78:	b293      	uxth	r3, r2
 8007f7a:	fb06 e303 	mla	r3, r6, r3, lr
 8007f7e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	ebaa 0303 	sub.w	r3, sl, r3
 8007f88:	f8dc a000 	ldr.w	sl, [ip]
 8007f8c:	0c12      	lsrs	r2, r2, #16
 8007f8e:	fa13 f38a 	uxtah	r3, r3, sl
 8007f92:	fb06 e202 	mla	r2, r6, r2, lr
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007f9e:	b292      	uxth	r2, r2
 8007fa0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007fa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007fa8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007fac:	4581      	cmp	r9, r0
 8007fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fb2:	f84c 3b04 	str.w	r3, [ip], #4
 8007fb6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007fba:	d2db      	bcs.n	8007f74 <quorem+0x44>
 8007fbc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007fc0:	b92b      	cbnz	r3, 8007fce <quorem+0x9e>
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	3b04      	subs	r3, #4
 8007fc6:	429d      	cmp	r5, r3
 8007fc8:	461a      	mov	r2, r3
 8007fca:	d32e      	bcc.n	800802a <quorem+0xfa>
 8007fcc:	613c      	str	r4, [r7, #16]
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f001 f8c4 	bl	800915c <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	db24      	blt.n	8008022 <quorem+0xf2>
 8007fd8:	3601      	adds	r6, #1
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f04f 0c00 	mov.w	ip, #0
 8007fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fe4:	f8d0 e000 	ldr.w	lr, [r0]
 8007fe8:	b293      	uxth	r3, r2
 8007fea:	ebac 0303 	sub.w	r3, ip, r3
 8007fee:	0c12      	lsrs	r2, r2, #16
 8007ff0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ff4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ff8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008002:	45c1      	cmp	r9, r8
 8008004:	f840 3b04 	str.w	r3, [r0], #4
 8008008:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800800c:	d2e8      	bcs.n	8007fe0 <quorem+0xb0>
 800800e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008012:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008016:	b922      	cbnz	r2, 8008022 <quorem+0xf2>
 8008018:	3b04      	subs	r3, #4
 800801a:	429d      	cmp	r5, r3
 800801c:	461a      	mov	r2, r3
 800801e:	d30a      	bcc.n	8008036 <quorem+0x106>
 8008020:	613c      	str	r4, [r7, #16]
 8008022:	4630      	mov	r0, r6
 8008024:	b003      	add	sp, #12
 8008026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	3b04      	subs	r3, #4
 800802e:	2a00      	cmp	r2, #0
 8008030:	d1cc      	bne.n	8007fcc <quorem+0x9c>
 8008032:	3c01      	subs	r4, #1
 8008034:	e7c7      	b.n	8007fc6 <quorem+0x96>
 8008036:	6812      	ldr	r2, [r2, #0]
 8008038:	3b04      	subs	r3, #4
 800803a:	2a00      	cmp	r2, #0
 800803c:	d1f0      	bne.n	8008020 <quorem+0xf0>
 800803e:	3c01      	subs	r4, #1
 8008040:	e7eb      	b.n	800801a <quorem+0xea>
 8008042:	2000      	movs	r0, #0
 8008044:	e7ee      	b.n	8008024 <quorem+0xf4>
	...

08008048 <_dtoa_r>:
 8008048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	ed2d 8b04 	vpush	{d8-d9}
 8008050:	ec57 6b10 	vmov	r6, r7, d0
 8008054:	b093      	sub	sp, #76	; 0x4c
 8008056:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008058:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800805c:	9106      	str	r1, [sp, #24]
 800805e:	ee10 aa10 	vmov	sl, s0
 8008062:	4604      	mov	r4, r0
 8008064:	9209      	str	r2, [sp, #36]	; 0x24
 8008066:	930c      	str	r3, [sp, #48]	; 0x30
 8008068:	46bb      	mov	fp, r7
 800806a:	b975      	cbnz	r5, 800808a <_dtoa_r+0x42>
 800806c:	2010      	movs	r0, #16
 800806e:	f000 fddd 	bl	8008c2c <malloc>
 8008072:	4602      	mov	r2, r0
 8008074:	6260      	str	r0, [r4, #36]	; 0x24
 8008076:	b920      	cbnz	r0, 8008082 <_dtoa_r+0x3a>
 8008078:	4ba7      	ldr	r3, [pc, #668]	; (8008318 <_dtoa_r+0x2d0>)
 800807a:	21ea      	movs	r1, #234	; 0xea
 800807c:	48a7      	ldr	r0, [pc, #668]	; (800831c <_dtoa_r+0x2d4>)
 800807e:	f001 fbd1 	bl	8009824 <__assert_func>
 8008082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008086:	6005      	str	r5, [r0, #0]
 8008088:	60c5      	str	r5, [r0, #12]
 800808a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	b151      	cbz	r1, 80080a6 <_dtoa_r+0x5e>
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	604a      	str	r2, [r1, #4]
 8008094:	2301      	movs	r3, #1
 8008096:	4093      	lsls	r3, r2
 8008098:	608b      	str	r3, [r1, #8]
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fe1c 	bl	8008cd8 <_Bfree>
 80080a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080a2:	2200      	movs	r2, #0
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	1e3b      	subs	r3, r7, #0
 80080a8:	bfaa      	itet	ge
 80080aa:	2300      	movge	r3, #0
 80080ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80080b0:	f8c8 3000 	strge.w	r3, [r8]
 80080b4:	4b9a      	ldr	r3, [pc, #616]	; (8008320 <_dtoa_r+0x2d8>)
 80080b6:	bfbc      	itt	lt
 80080b8:	2201      	movlt	r2, #1
 80080ba:	f8c8 2000 	strlt.w	r2, [r8]
 80080be:	ea33 030b 	bics.w	r3, r3, fp
 80080c2:	d11b      	bne.n	80080fc <_dtoa_r+0xb4>
 80080c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80080c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80080ca:	6013      	str	r3, [r2, #0]
 80080cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080d0:	4333      	orrs	r3, r6
 80080d2:	f000 8592 	beq.w	8008bfa <_dtoa_r+0xbb2>
 80080d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080d8:	b963      	cbnz	r3, 80080f4 <_dtoa_r+0xac>
 80080da:	4b92      	ldr	r3, [pc, #584]	; (8008324 <_dtoa_r+0x2dc>)
 80080dc:	e022      	b.n	8008124 <_dtoa_r+0xdc>
 80080de:	4b92      	ldr	r3, [pc, #584]	; (8008328 <_dtoa_r+0x2e0>)
 80080e0:	9301      	str	r3, [sp, #4]
 80080e2:	3308      	adds	r3, #8
 80080e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80080e6:	6013      	str	r3, [r2, #0]
 80080e8:	9801      	ldr	r0, [sp, #4]
 80080ea:	b013      	add	sp, #76	; 0x4c
 80080ec:	ecbd 8b04 	vpop	{d8-d9}
 80080f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f4:	4b8b      	ldr	r3, [pc, #556]	; (8008324 <_dtoa_r+0x2dc>)
 80080f6:	9301      	str	r3, [sp, #4]
 80080f8:	3303      	adds	r3, #3
 80080fa:	e7f3      	b.n	80080e4 <_dtoa_r+0x9c>
 80080fc:	2200      	movs	r2, #0
 80080fe:	2300      	movs	r3, #0
 8008100:	4650      	mov	r0, sl
 8008102:	4659      	mov	r1, fp
 8008104:	f7f8 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 8008108:	ec4b ab19 	vmov	d9, sl, fp
 800810c:	4680      	mov	r8, r0
 800810e:	b158      	cbz	r0, 8008128 <_dtoa_r+0xe0>
 8008110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008112:	2301      	movs	r3, #1
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 856b 	beq.w	8008bf4 <_dtoa_r+0xbac>
 800811e:	4883      	ldr	r0, [pc, #524]	; (800832c <_dtoa_r+0x2e4>)
 8008120:	6018      	str	r0, [r3, #0]
 8008122:	1e43      	subs	r3, r0, #1
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	e7df      	b.n	80080e8 <_dtoa_r+0xa0>
 8008128:	ec4b ab10 	vmov	d0, sl, fp
 800812c:	aa10      	add	r2, sp, #64	; 0x40
 800812e:	a911      	add	r1, sp, #68	; 0x44
 8008130:	4620      	mov	r0, r4
 8008132:	f001 f8b9 	bl	80092a8 <__d2b>
 8008136:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800813a:	ee08 0a10 	vmov	s16, r0
 800813e:	2d00      	cmp	r5, #0
 8008140:	f000 8084 	beq.w	800824c <_dtoa_r+0x204>
 8008144:	ee19 3a90 	vmov	r3, s19
 8008148:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800814c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008150:	4656      	mov	r6, sl
 8008152:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008156:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800815a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800815e:	4b74      	ldr	r3, [pc, #464]	; (8008330 <_dtoa_r+0x2e8>)
 8008160:	2200      	movs	r2, #0
 8008162:	4630      	mov	r0, r6
 8008164:	4639      	mov	r1, r7
 8008166:	f7f8 f897 	bl	8000298 <__aeabi_dsub>
 800816a:	a365      	add	r3, pc, #404	; (adr r3, 8008300 <_dtoa_r+0x2b8>)
 800816c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008170:	f7f8 fa4a 	bl	8000608 <__aeabi_dmul>
 8008174:	a364      	add	r3, pc, #400	; (adr r3, 8008308 <_dtoa_r+0x2c0>)
 8008176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817a:	f7f8 f88f 	bl	800029c <__adddf3>
 800817e:	4606      	mov	r6, r0
 8008180:	4628      	mov	r0, r5
 8008182:	460f      	mov	r7, r1
 8008184:	f7f8 f9d6 	bl	8000534 <__aeabi_i2d>
 8008188:	a361      	add	r3, pc, #388	; (adr r3, 8008310 <_dtoa_r+0x2c8>)
 800818a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818e:	f7f8 fa3b 	bl	8000608 <__aeabi_dmul>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4630      	mov	r0, r6
 8008198:	4639      	mov	r1, r7
 800819a:	f7f8 f87f 	bl	800029c <__adddf3>
 800819e:	4606      	mov	r6, r0
 80081a0:	460f      	mov	r7, r1
 80081a2:	f7f8 fce1 	bl	8000b68 <__aeabi_d2iz>
 80081a6:	2200      	movs	r2, #0
 80081a8:	9000      	str	r0, [sp, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	4630      	mov	r0, r6
 80081ae:	4639      	mov	r1, r7
 80081b0:	f7f8 fc9c 	bl	8000aec <__aeabi_dcmplt>
 80081b4:	b150      	cbz	r0, 80081cc <_dtoa_r+0x184>
 80081b6:	9800      	ldr	r0, [sp, #0]
 80081b8:	f7f8 f9bc 	bl	8000534 <__aeabi_i2d>
 80081bc:	4632      	mov	r2, r6
 80081be:	463b      	mov	r3, r7
 80081c0:	f7f8 fc8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081c4:	b910      	cbnz	r0, 80081cc <_dtoa_r+0x184>
 80081c6:	9b00      	ldr	r3, [sp, #0]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	2b16      	cmp	r3, #22
 80081d0:	d85a      	bhi.n	8008288 <_dtoa_r+0x240>
 80081d2:	9a00      	ldr	r2, [sp, #0]
 80081d4:	4b57      	ldr	r3, [pc, #348]	; (8008334 <_dtoa_r+0x2ec>)
 80081d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	ec51 0b19 	vmov	r0, r1, d9
 80081e2:	f7f8 fc83 	bl	8000aec <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d050      	beq.n	800828c <_dtoa_r+0x244>
 80081ea:	9b00      	ldr	r3, [sp, #0]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	2300      	movs	r3, #0
 80081f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80081f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081f6:	1b5d      	subs	r5, r3, r5
 80081f8:	1e6b      	subs	r3, r5, #1
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	bf45      	ittet	mi
 80081fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008202:	9304      	strmi	r3, [sp, #16]
 8008204:	2300      	movpl	r3, #0
 8008206:	2300      	movmi	r3, #0
 8008208:	bf4c      	ite	mi
 800820a:	9305      	strmi	r3, [sp, #20]
 800820c:	9304      	strpl	r3, [sp, #16]
 800820e:	9b00      	ldr	r3, [sp, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	db3d      	blt.n	8008290 <_dtoa_r+0x248>
 8008214:	9b05      	ldr	r3, [sp, #20]
 8008216:	9a00      	ldr	r2, [sp, #0]
 8008218:	920a      	str	r2, [sp, #40]	; 0x28
 800821a:	4413      	add	r3, r2
 800821c:	9305      	str	r3, [sp, #20]
 800821e:	2300      	movs	r3, #0
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	2b09      	cmp	r3, #9
 8008226:	f200 8089 	bhi.w	800833c <_dtoa_r+0x2f4>
 800822a:	2b05      	cmp	r3, #5
 800822c:	bfc4      	itt	gt
 800822e:	3b04      	subgt	r3, #4
 8008230:	9306      	strgt	r3, [sp, #24]
 8008232:	9b06      	ldr	r3, [sp, #24]
 8008234:	f1a3 0302 	sub.w	r3, r3, #2
 8008238:	bfcc      	ite	gt
 800823a:	2500      	movgt	r5, #0
 800823c:	2501      	movle	r5, #1
 800823e:	2b03      	cmp	r3, #3
 8008240:	f200 8087 	bhi.w	8008352 <_dtoa_r+0x30a>
 8008244:	e8df f003 	tbb	[pc, r3]
 8008248:	59383a2d 	.word	0x59383a2d
 800824c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008250:	441d      	add	r5, r3
 8008252:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008256:	2b20      	cmp	r3, #32
 8008258:	bfc1      	itttt	gt
 800825a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800825e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008262:	fa0b f303 	lslgt.w	r3, fp, r3
 8008266:	fa26 f000 	lsrgt.w	r0, r6, r0
 800826a:	bfda      	itte	le
 800826c:	f1c3 0320 	rsble	r3, r3, #32
 8008270:	fa06 f003 	lslle.w	r0, r6, r3
 8008274:	4318      	orrgt	r0, r3
 8008276:	f7f8 f94d 	bl	8000514 <__aeabi_ui2d>
 800827a:	2301      	movs	r3, #1
 800827c:	4606      	mov	r6, r0
 800827e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008282:	3d01      	subs	r5, #1
 8008284:	930e      	str	r3, [sp, #56]	; 0x38
 8008286:	e76a      	b.n	800815e <_dtoa_r+0x116>
 8008288:	2301      	movs	r3, #1
 800828a:	e7b2      	b.n	80081f2 <_dtoa_r+0x1aa>
 800828c:	900b      	str	r0, [sp, #44]	; 0x2c
 800828e:	e7b1      	b.n	80081f4 <_dtoa_r+0x1ac>
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	9a00      	ldr	r2, [sp, #0]
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	9304      	str	r3, [sp, #16]
 8008298:	4253      	negs	r3, r2
 800829a:	9307      	str	r3, [sp, #28]
 800829c:	2300      	movs	r3, #0
 800829e:	930a      	str	r3, [sp, #40]	; 0x28
 80082a0:	e7bf      	b.n	8008222 <_dtoa_r+0x1da>
 80082a2:	2300      	movs	r3, #0
 80082a4:	9308      	str	r3, [sp, #32]
 80082a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dc55      	bgt.n	8008358 <_dtoa_r+0x310>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80082b2:	461a      	mov	r2, r3
 80082b4:	9209      	str	r2, [sp, #36]	; 0x24
 80082b6:	e00c      	b.n	80082d2 <_dtoa_r+0x28a>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e7f3      	b.n	80082a4 <_dtoa_r+0x25c>
 80082bc:	2300      	movs	r3, #0
 80082be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c0:	9308      	str	r3, [sp, #32]
 80082c2:	9b00      	ldr	r3, [sp, #0]
 80082c4:	4413      	add	r3, r2
 80082c6:	9302      	str	r3, [sp, #8]
 80082c8:	3301      	adds	r3, #1
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	9303      	str	r3, [sp, #12]
 80082ce:	bfb8      	it	lt
 80082d0:	2301      	movlt	r3, #1
 80082d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80082d4:	2200      	movs	r2, #0
 80082d6:	6042      	str	r2, [r0, #4]
 80082d8:	2204      	movs	r2, #4
 80082da:	f102 0614 	add.w	r6, r2, #20
 80082de:	429e      	cmp	r6, r3
 80082e0:	6841      	ldr	r1, [r0, #4]
 80082e2:	d93d      	bls.n	8008360 <_dtoa_r+0x318>
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fcb7 	bl	8008c58 <_Balloc>
 80082ea:	9001      	str	r0, [sp, #4]
 80082ec:	2800      	cmp	r0, #0
 80082ee:	d13b      	bne.n	8008368 <_dtoa_r+0x320>
 80082f0:	4b11      	ldr	r3, [pc, #68]	; (8008338 <_dtoa_r+0x2f0>)
 80082f2:	4602      	mov	r2, r0
 80082f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80082f8:	e6c0      	b.n	800807c <_dtoa_r+0x34>
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7df      	b.n	80082be <_dtoa_r+0x276>
 80082fe:	bf00      	nop
 8008300:	636f4361 	.word	0x636f4361
 8008304:	3fd287a7 	.word	0x3fd287a7
 8008308:	8b60c8b3 	.word	0x8b60c8b3
 800830c:	3fc68a28 	.word	0x3fc68a28
 8008310:	509f79fb 	.word	0x509f79fb
 8008314:	3fd34413 	.word	0x3fd34413
 8008318:	0800aaf1 	.word	0x0800aaf1
 800831c:	0800ab08 	.word	0x0800ab08
 8008320:	7ff00000 	.word	0x7ff00000
 8008324:	0800aaed 	.word	0x0800aaed
 8008328:	0800aae4 	.word	0x0800aae4
 800832c:	0800aac1 	.word	0x0800aac1
 8008330:	3ff80000 	.word	0x3ff80000
 8008334:	0800abf8 	.word	0x0800abf8
 8008338:	0800ab63 	.word	0x0800ab63
 800833c:	2501      	movs	r5, #1
 800833e:	2300      	movs	r3, #0
 8008340:	9306      	str	r3, [sp, #24]
 8008342:	9508      	str	r5, [sp, #32]
 8008344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008348:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800834c:	2200      	movs	r2, #0
 800834e:	2312      	movs	r3, #18
 8008350:	e7b0      	b.n	80082b4 <_dtoa_r+0x26c>
 8008352:	2301      	movs	r3, #1
 8008354:	9308      	str	r3, [sp, #32]
 8008356:	e7f5      	b.n	8008344 <_dtoa_r+0x2fc>
 8008358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800835a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800835e:	e7b8      	b.n	80082d2 <_dtoa_r+0x28a>
 8008360:	3101      	adds	r1, #1
 8008362:	6041      	str	r1, [r0, #4]
 8008364:	0052      	lsls	r2, r2, #1
 8008366:	e7b8      	b.n	80082da <_dtoa_r+0x292>
 8008368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	601a      	str	r2, [r3, #0]
 800836e:	9b03      	ldr	r3, [sp, #12]
 8008370:	2b0e      	cmp	r3, #14
 8008372:	f200 809d 	bhi.w	80084b0 <_dtoa_r+0x468>
 8008376:	2d00      	cmp	r5, #0
 8008378:	f000 809a 	beq.w	80084b0 <_dtoa_r+0x468>
 800837c:	9b00      	ldr	r3, [sp, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dd32      	ble.n	80083e8 <_dtoa_r+0x3a0>
 8008382:	4ab7      	ldr	r2, [pc, #732]	; (8008660 <_dtoa_r+0x618>)
 8008384:	f003 030f 	and.w	r3, r3, #15
 8008388:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800838c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008390:	9b00      	ldr	r3, [sp, #0]
 8008392:	05d8      	lsls	r0, r3, #23
 8008394:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008398:	d516      	bpl.n	80083c8 <_dtoa_r+0x380>
 800839a:	4bb2      	ldr	r3, [pc, #712]	; (8008664 <_dtoa_r+0x61c>)
 800839c:	ec51 0b19 	vmov	r0, r1, d9
 80083a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80083a4:	f7f8 fa5a 	bl	800085c <__aeabi_ddiv>
 80083a8:	f007 070f 	and.w	r7, r7, #15
 80083ac:	4682      	mov	sl, r0
 80083ae:	468b      	mov	fp, r1
 80083b0:	2503      	movs	r5, #3
 80083b2:	4eac      	ldr	r6, [pc, #688]	; (8008664 <_dtoa_r+0x61c>)
 80083b4:	b957      	cbnz	r7, 80083cc <_dtoa_r+0x384>
 80083b6:	4642      	mov	r2, r8
 80083b8:	464b      	mov	r3, r9
 80083ba:	4650      	mov	r0, sl
 80083bc:	4659      	mov	r1, fp
 80083be:	f7f8 fa4d 	bl	800085c <__aeabi_ddiv>
 80083c2:	4682      	mov	sl, r0
 80083c4:	468b      	mov	fp, r1
 80083c6:	e028      	b.n	800841a <_dtoa_r+0x3d2>
 80083c8:	2502      	movs	r5, #2
 80083ca:	e7f2      	b.n	80083b2 <_dtoa_r+0x36a>
 80083cc:	07f9      	lsls	r1, r7, #31
 80083ce:	d508      	bpl.n	80083e2 <_dtoa_r+0x39a>
 80083d0:	4640      	mov	r0, r8
 80083d2:	4649      	mov	r1, r9
 80083d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083d8:	f7f8 f916 	bl	8000608 <__aeabi_dmul>
 80083dc:	3501      	adds	r5, #1
 80083de:	4680      	mov	r8, r0
 80083e0:	4689      	mov	r9, r1
 80083e2:	107f      	asrs	r7, r7, #1
 80083e4:	3608      	adds	r6, #8
 80083e6:	e7e5      	b.n	80083b4 <_dtoa_r+0x36c>
 80083e8:	f000 809b 	beq.w	8008522 <_dtoa_r+0x4da>
 80083ec:	9b00      	ldr	r3, [sp, #0]
 80083ee:	4f9d      	ldr	r7, [pc, #628]	; (8008664 <_dtoa_r+0x61c>)
 80083f0:	425e      	negs	r6, r3
 80083f2:	4b9b      	ldr	r3, [pc, #620]	; (8008660 <_dtoa_r+0x618>)
 80083f4:	f006 020f 	and.w	r2, r6, #15
 80083f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	ec51 0b19 	vmov	r0, r1, d9
 8008404:	f7f8 f900 	bl	8000608 <__aeabi_dmul>
 8008408:	1136      	asrs	r6, r6, #4
 800840a:	4682      	mov	sl, r0
 800840c:	468b      	mov	fp, r1
 800840e:	2300      	movs	r3, #0
 8008410:	2502      	movs	r5, #2
 8008412:	2e00      	cmp	r6, #0
 8008414:	d17a      	bne.n	800850c <_dtoa_r+0x4c4>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1d3      	bne.n	80083c2 <_dtoa_r+0x37a>
 800841a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8082 	beq.w	8008526 <_dtoa_r+0x4de>
 8008422:	4b91      	ldr	r3, [pc, #580]	; (8008668 <_dtoa_r+0x620>)
 8008424:	2200      	movs	r2, #0
 8008426:	4650      	mov	r0, sl
 8008428:	4659      	mov	r1, fp
 800842a:	f7f8 fb5f 	bl	8000aec <__aeabi_dcmplt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d079      	beq.n	8008526 <_dtoa_r+0x4de>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d076      	beq.n	8008526 <_dtoa_r+0x4de>
 8008438:	9b02      	ldr	r3, [sp, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	dd36      	ble.n	80084ac <_dtoa_r+0x464>
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	4650      	mov	r0, sl
 8008442:	4659      	mov	r1, fp
 8008444:	1e5f      	subs	r7, r3, #1
 8008446:	2200      	movs	r2, #0
 8008448:	4b88      	ldr	r3, [pc, #544]	; (800866c <_dtoa_r+0x624>)
 800844a:	f7f8 f8dd 	bl	8000608 <__aeabi_dmul>
 800844e:	9e02      	ldr	r6, [sp, #8]
 8008450:	4682      	mov	sl, r0
 8008452:	468b      	mov	fp, r1
 8008454:	3501      	adds	r5, #1
 8008456:	4628      	mov	r0, r5
 8008458:	f7f8 f86c 	bl	8000534 <__aeabi_i2d>
 800845c:	4652      	mov	r2, sl
 800845e:	465b      	mov	r3, fp
 8008460:	f7f8 f8d2 	bl	8000608 <__aeabi_dmul>
 8008464:	4b82      	ldr	r3, [pc, #520]	; (8008670 <_dtoa_r+0x628>)
 8008466:	2200      	movs	r2, #0
 8008468:	f7f7 ff18 	bl	800029c <__adddf3>
 800846c:	46d0      	mov	r8, sl
 800846e:	46d9      	mov	r9, fp
 8008470:	4682      	mov	sl, r0
 8008472:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008476:	2e00      	cmp	r6, #0
 8008478:	d158      	bne.n	800852c <_dtoa_r+0x4e4>
 800847a:	4b7e      	ldr	r3, [pc, #504]	; (8008674 <_dtoa_r+0x62c>)
 800847c:	2200      	movs	r2, #0
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f7 ff09 	bl	8000298 <__aeabi_dsub>
 8008486:	4652      	mov	r2, sl
 8008488:	465b      	mov	r3, fp
 800848a:	4680      	mov	r8, r0
 800848c:	4689      	mov	r9, r1
 800848e:	f7f8 fb4b 	bl	8000b28 <__aeabi_dcmpgt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f040 8295 	bne.w	80089c2 <_dtoa_r+0x97a>
 8008498:	4652      	mov	r2, sl
 800849a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800849e:	4640      	mov	r0, r8
 80084a0:	4649      	mov	r1, r9
 80084a2:	f7f8 fb23 	bl	8000aec <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f040 8289 	bne.w	80089be <_dtoa_r+0x976>
 80084ac:	ec5b ab19 	vmov	sl, fp, d9
 80084b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f2c0 8148 	blt.w	8008748 <_dtoa_r+0x700>
 80084b8:	9a00      	ldr	r2, [sp, #0]
 80084ba:	2a0e      	cmp	r2, #14
 80084bc:	f300 8144 	bgt.w	8008748 <_dtoa_r+0x700>
 80084c0:	4b67      	ldr	r3, [pc, #412]	; (8008660 <_dtoa_r+0x618>)
 80084c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f280 80d5 	bge.w	800867c <_dtoa_r+0x634>
 80084d2:	9b03      	ldr	r3, [sp, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f300 80d1 	bgt.w	800867c <_dtoa_r+0x634>
 80084da:	f040 826f 	bne.w	80089bc <_dtoa_r+0x974>
 80084de:	4b65      	ldr	r3, [pc, #404]	; (8008674 <_dtoa_r+0x62c>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	4640      	mov	r0, r8
 80084e4:	4649      	mov	r1, r9
 80084e6:	f7f8 f88f 	bl	8000608 <__aeabi_dmul>
 80084ea:	4652      	mov	r2, sl
 80084ec:	465b      	mov	r3, fp
 80084ee:	f7f8 fb11 	bl	8000b14 <__aeabi_dcmpge>
 80084f2:	9e03      	ldr	r6, [sp, #12]
 80084f4:	4637      	mov	r7, r6
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f040 8245 	bne.w	8008986 <_dtoa_r+0x93e>
 80084fc:	9d01      	ldr	r5, [sp, #4]
 80084fe:	2331      	movs	r3, #49	; 0x31
 8008500:	f805 3b01 	strb.w	r3, [r5], #1
 8008504:	9b00      	ldr	r3, [sp, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	e240      	b.n	800898e <_dtoa_r+0x946>
 800850c:	07f2      	lsls	r2, r6, #31
 800850e:	d505      	bpl.n	800851c <_dtoa_r+0x4d4>
 8008510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008514:	f7f8 f878 	bl	8000608 <__aeabi_dmul>
 8008518:	3501      	adds	r5, #1
 800851a:	2301      	movs	r3, #1
 800851c:	1076      	asrs	r6, r6, #1
 800851e:	3708      	adds	r7, #8
 8008520:	e777      	b.n	8008412 <_dtoa_r+0x3ca>
 8008522:	2502      	movs	r5, #2
 8008524:	e779      	b.n	800841a <_dtoa_r+0x3d2>
 8008526:	9f00      	ldr	r7, [sp, #0]
 8008528:	9e03      	ldr	r6, [sp, #12]
 800852a:	e794      	b.n	8008456 <_dtoa_r+0x40e>
 800852c:	9901      	ldr	r1, [sp, #4]
 800852e:	4b4c      	ldr	r3, [pc, #304]	; (8008660 <_dtoa_r+0x618>)
 8008530:	4431      	add	r1, r6
 8008532:	910d      	str	r1, [sp, #52]	; 0x34
 8008534:	9908      	ldr	r1, [sp, #32]
 8008536:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800853a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800853e:	2900      	cmp	r1, #0
 8008540:	d043      	beq.n	80085ca <_dtoa_r+0x582>
 8008542:	494d      	ldr	r1, [pc, #308]	; (8008678 <_dtoa_r+0x630>)
 8008544:	2000      	movs	r0, #0
 8008546:	f7f8 f989 	bl	800085c <__aeabi_ddiv>
 800854a:	4652      	mov	r2, sl
 800854c:	465b      	mov	r3, fp
 800854e:	f7f7 fea3 	bl	8000298 <__aeabi_dsub>
 8008552:	9d01      	ldr	r5, [sp, #4]
 8008554:	4682      	mov	sl, r0
 8008556:	468b      	mov	fp, r1
 8008558:	4649      	mov	r1, r9
 800855a:	4640      	mov	r0, r8
 800855c:	f7f8 fb04 	bl	8000b68 <__aeabi_d2iz>
 8008560:	4606      	mov	r6, r0
 8008562:	f7f7 ffe7 	bl	8000534 <__aeabi_i2d>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	4640      	mov	r0, r8
 800856c:	4649      	mov	r1, r9
 800856e:	f7f7 fe93 	bl	8000298 <__aeabi_dsub>
 8008572:	3630      	adds	r6, #48	; 0x30
 8008574:	f805 6b01 	strb.w	r6, [r5], #1
 8008578:	4652      	mov	r2, sl
 800857a:	465b      	mov	r3, fp
 800857c:	4680      	mov	r8, r0
 800857e:	4689      	mov	r9, r1
 8008580:	f7f8 fab4 	bl	8000aec <__aeabi_dcmplt>
 8008584:	2800      	cmp	r0, #0
 8008586:	d163      	bne.n	8008650 <_dtoa_r+0x608>
 8008588:	4642      	mov	r2, r8
 800858a:	464b      	mov	r3, r9
 800858c:	4936      	ldr	r1, [pc, #216]	; (8008668 <_dtoa_r+0x620>)
 800858e:	2000      	movs	r0, #0
 8008590:	f7f7 fe82 	bl	8000298 <__aeabi_dsub>
 8008594:	4652      	mov	r2, sl
 8008596:	465b      	mov	r3, fp
 8008598:	f7f8 faa8 	bl	8000aec <__aeabi_dcmplt>
 800859c:	2800      	cmp	r0, #0
 800859e:	f040 80b5 	bne.w	800870c <_dtoa_r+0x6c4>
 80085a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085a4:	429d      	cmp	r5, r3
 80085a6:	d081      	beq.n	80084ac <_dtoa_r+0x464>
 80085a8:	4b30      	ldr	r3, [pc, #192]	; (800866c <_dtoa_r+0x624>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	4650      	mov	r0, sl
 80085ae:	4659      	mov	r1, fp
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	4b2d      	ldr	r3, [pc, #180]	; (800866c <_dtoa_r+0x624>)
 80085b6:	4682      	mov	sl, r0
 80085b8:	468b      	mov	fp, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	2200      	movs	r2, #0
 80085c0:	f7f8 f822 	bl	8000608 <__aeabi_dmul>
 80085c4:	4680      	mov	r8, r0
 80085c6:	4689      	mov	r9, r1
 80085c8:	e7c6      	b.n	8008558 <_dtoa_r+0x510>
 80085ca:	4650      	mov	r0, sl
 80085cc:	4659      	mov	r1, fp
 80085ce:	f7f8 f81b 	bl	8000608 <__aeabi_dmul>
 80085d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d4:	9d01      	ldr	r5, [sp, #4]
 80085d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80085d8:	4682      	mov	sl, r0
 80085da:	468b      	mov	fp, r1
 80085dc:	4649      	mov	r1, r9
 80085de:	4640      	mov	r0, r8
 80085e0:	f7f8 fac2 	bl	8000b68 <__aeabi_d2iz>
 80085e4:	4606      	mov	r6, r0
 80085e6:	f7f7 ffa5 	bl	8000534 <__aeabi_i2d>
 80085ea:	3630      	adds	r6, #48	; 0x30
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f7 fe50 	bl	8000298 <__aeabi_dsub>
 80085f8:	f805 6b01 	strb.w	r6, [r5], #1
 80085fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085fe:	429d      	cmp	r5, r3
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	d124      	bne.n	8008654 <_dtoa_r+0x60c>
 800860a:	4b1b      	ldr	r3, [pc, #108]	; (8008678 <_dtoa_r+0x630>)
 800860c:	4650      	mov	r0, sl
 800860e:	4659      	mov	r1, fp
 8008610:	f7f7 fe44 	bl	800029c <__adddf3>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	f7f8 fa84 	bl	8000b28 <__aeabi_dcmpgt>
 8008620:	2800      	cmp	r0, #0
 8008622:	d173      	bne.n	800870c <_dtoa_r+0x6c4>
 8008624:	4652      	mov	r2, sl
 8008626:	465b      	mov	r3, fp
 8008628:	4913      	ldr	r1, [pc, #76]	; (8008678 <_dtoa_r+0x630>)
 800862a:	2000      	movs	r0, #0
 800862c:	f7f7 fe34 	bl	8000298 <__aeabi_dsub>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f8 fa58 	bl	8000aec <__aeabi_dcmplt>
 800863c:	2800      	cmp	r0, #0
 800863e:	f43f af35 	beq.w	80084ac <_dtoa_r+0x464>
 8008642:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008644:	1e6b      	subs	r3, r5, #1
 8008646:	930f      	str	r3, [sp, #60]	; 0x3c
 8008648:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800864c:	2b30      	cmp	r3, #48	; 0x30
 800864e:	d0f8      	beq.n	8008642 <_dtoa_r+0x5fa>
 8008650:	9700      	str	r7, [sp, #0]
 8008652:	e049      	b.n	80086e8 <_dtoa_r+0x6a0>
 8008654:	4b05      	ldr	r3, [pc, #20]	; (800866c <_dtoa_r+0x624>)
 8008656:	f7f7 ffd7 	bl	8000608 <__aeabi_dmul>
 800865a:	4680      	mov	r8, r0
 800865c:	4689      	mov	r9, r1
 800865e:	e7bd      	b.n	80085dc <_dtoa_r+0x594>
 8008660:	0800abf8 	.word	0x0800abf8
 8008664:	0800abd0 	.word	0x0800abd0
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	40240000 	.word	0x40240000
 8008670:	401c0000 	.word	0x401c0000
 8008674:	40140000 	.word	0x40140000
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	9d01      	ldr	r5, [sp, #4]
 800867e:	4656      	mov	r6, sl
 8008680:	465f      	mov	r7, fp
 8008682:	4642      	mov	r2, r8
 8008684:	464b      	mov	r3, r9
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f8 f8e7 	bl	800085c <__aeabi_ddiv>
 800868e:	f7f8 fa6b 	bl	8000b68 <__aeabi_d2iz>
 8008692:	4682      	mov	sl, r0
 8008694:	f7f7 ff4e 	bl	8000534 <__aeabi_i2d>
 8008698:	4642      	mov	r2, r8
 800869a:	464b      	mov	r3, r9
 800869c:	f7f7 ffb4 	bl	8000608 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80086ac:	f7f7 fdf4 	bl	8000298 <__aeabi_dsub>
 80086b0:	f805 6b01 	strb.w	r6, [r5], #1
 80086b4:	9e01      	ldr	r6, [sp, #4]
 80086b6:	9f03      	ldr	r7, [sp, #12]
 80086b8:	1bae      	subs	r6, r5, r6
 80086ba:	42b7      	cmp	r7, r6
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	d135      	bne.n	800872e <_dtoa_r+0x6e6>
 80086c2:	f7f7 fdeb 	bl	800029c <__adddf3>
 80086c6:	4642      	mov	r2, r8
 80086c8:	464b      	mov	r3, r9
 80086ca:	4606      	mov	r6, r0
 80086cc:	460f      	mov	r7, r1
 80086ce:	f7f8 fa2b 	bl	8000b28 <__aeabi_dcmpgt>
 80086d2:	b9d0      	cbnz	r0, 800870a <_dtoa_r+0x6c2>
 80086d4:	4642      	mov	r2, r8
 80086d6:	464b      	mov	r3, r9
 80086d8:	4630      	mov	r0, r6
 80086da:	4639      	mov	r1, r7
 80086dc:	f7f8 f9fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80086e0:	b110      	cbz	r0, 80086e8 <_dtoa_r+0x6a0>
 80086e2:	f01a 0f01 	tst.w	sl, #1
 80086e6:	d110      	bne.n	800870a <_dtoa_r+0x6c2>
 80086e8:	4620      	mov	r0, r4
 80086ea:	ee18 1a10 	vmov	r1, s16
 80086ee:	f000 faf3 	bl	8008cd8 <_Bfree>
 80086f2:	2300      	movs	r3, #0
 80086f4:	9800      	ldr	r0, [sp, #0]
 80086f6:	702b      	strb	r3, [r5, #0]
 80086f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086fa:	3001      	adds	r0, #1
 80086fc:	6018      	str	r0, [r3, #0]
 80086fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008700:	2b00      	cmp	r3, #0
 8008702:	f43f acf1 	beq.w	80080e8 <_dtoa_r+0xa0>
 8008706:	601d      	str	r5, [r3, #0]
 8008708:	e4ee      	b.n	80080e8 <_dtoa_r+0xa0>
 800870a:	9f00      	ldr	r7, [sp, #0]
 800870c:	462b      	mov	r3, r5
 800870e:	461d      	mov	r5, r3
 8008710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008714:	2a39      	cmp	r2, #57	; 0x39
 8008716:	d106      	bne.n	8008726 <_dtoa_r+0x6de>
 8008718:	9a01      	ldr	r2, [sp, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d1f7      	bne.n	800870e <_dtoa_r+0x6c6>
 800871e:	9901      	ldr	r1, [sp, #4]
 8008720:	2230      	movs	r2, #48	; 0x30
 8008722:	3701      	adds	r7, #1
 8008724:	700a      	strb	r2, [r1, #0]
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	3201      	adds	r2, #1
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	e790      	b.n	8008650 <_dtoa_r+0x608>
 800872e:	4ba6      	ldr	r3, [pc, #664]	; (80089c8 <_dtoa_r+0x980>)
 8008730:	2200      	movs	r2, #0
 8008732:	f7f7 ff69 	bl	8000608 <__aeabi_dmul>
 8008736:	2200      	movs	r2, #0
 8008738:	2300      	movs	r3, #0
 800873a:	4606      	mov	r6, r0
 800873c:	460f      	mov	r7, r1
 800873e:	f7f8 f9cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008742:	2800      	cmp	r0, #0
 8008744:	d09d      	beq.n	8008682 <_dtoa_r+0x63a>
 8008746:	e7cf      	b.n	80086e8 <_dtoa_r+0x6a0>
 8008748:	9a08      	ldr	r2, [sp, #32]
 800874a:	2a00      	cmp	r2, #0
 800874c:	f000 80d7 	beq.w	80088fe <_dtoa_r+0x8b6>
 8008750:	9a06      	ldr	r2, [sp, #24]
 8008752:	2a01      	cmp	r2, #1
 8008754:	f300 80ba 	bgt.w	80088cc <_dtoa_r+0x884>
 8008758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800875a:	2a00      	cmp	r2, #0
 800875c:	f000 80b2 	beq.w	80088c4 <_dtoa_r+0x87c>
 8008760:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008764:	9e07      	ldr	r6, [sp, #28]
 8008766:	9d04      	ldr	r5, [sp, #16]
 8008768:	9a04      	ldr	r2, [sp, #16]
 800876a:	441a      	add	r2, r3
 800876c:	9204      	str	r2, [sp, #16]
 800876e:	9a05      	ldr	r2, [sp, #20]
 8008770:	2101      	movs	r1, #1
 8008772:	441a      	add	r2, r3
 8008774:	4620      	mov	r0, r4
 8008776:	9205      	str	r2, [sp, #20]
 8008778:	f000 fb66 	bl	8008e48 <__i2b>
 800877c:	4607      	mov	r7, r0
 800877e:	2d00      	cmp	r5, #0
 8008780:	dd0c      	ble.n	800879c <_dtoa_r+0x754>
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd09      	ble.n	800879c <_dtoa_r+0x754>
 8008788:	42ab      	cmp	r3, r5
 800878a:	9a04      	ldr	r2, [sp, #16]
 800878c:	bfa8      	it	ge
 800878e:	462b      	movge	r3, r5
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	9204      	str	r2, [sp, #16]
 8008794:	9a05      	ldr	r2, [sp, #20]
 8008796:	1aed      	subs	r5, r5, r3
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	9305      	str	r3, [sp, #20]
 800879c:	9b07      	ldr	r3, [sp, #28]
 800879e:	b31b      	cbz	r3, 80087e8 <_dtoa_r+0x7a0>
 80087a0:	9b08      	ldr	r3, [sp, #32]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80af 	beq.w	8008906 <_dtoa_r+0x8be>
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	dd13      	ble.n	80087d4 <_dtoa_r+0x78c>
 80087ac:	4639      	mov	r1, r7
 80087ae:	4632      	mov	r2, r6
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fc09 	bl	8008fc8 <__pow5mult>
 80087b6:	ee18 2a10 	vmov	r2, s16
 80087ba:	4601      	mov	r1, r0
 80087bc:	4607      	mov	r7, r0
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 fb58 	bl	8008e74 <__multiply>
 80087c4:	ee18 1a10 	vmov	r1, s16
 80087c8:	4680      	mov	r8, r0
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fa84 	bl	8008cd8 <_Bfree>
 80087d0:	ee08 8a10 	vmov	s16, r8
 80087d4:	9b07      	ldr	r3, [sp, #28]
 80087d6:	1b9a      	subs	r2, r3, r6
 80087d8:	d006      	beq.n	80087e8 <_dtoa_r+0x7a0>
 80087da:	ee18 1a10 	vmov	r1, s16
 80087de:	4620      	mov	r0, r4
 80087e0:	f000 fbf2 	bl	8008fc8 <__pow5mult>
 80087e4:	ee08 0a10 	vmov	s16, r0
 80087e8:	2101      	movs	r1, #1
 80087ea:	4620      	mov	r0, r4
 80087ec:	f000 fb2c 	bl	8008e48 <__i2b>
 80087f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	4606      	mov	r6, r0
 80087f6:	f340 8088 	ble.w	800890a <_dtoa_r+0x8c2>
 80087fa:	461a      	mov	r2, r3
 80087fc:	4601      	mov	r1, r0
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 fbe2 	bl	8008fc8 <__pow5mult>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	2b01      	cmp	r3, #1
 8008808:	4606      	mov	r6, r0
 800880a:	f340 8081 	ble.w	8008910 <_dtoa_r+0x8c8>
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	6933      	ldr	r3, [r6, #16]
 8008814:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008818:	6918      	ldr	r0, [r3, #16]
 800881a:	f000 fac5 	bl	8008da8 <__hi0bits>
 800881e:	f1c0 0020 	rsb	r0, r0, #32
 8008822:	9b05      	ldr	r3, [sp, #20]
 8008824:	4418      	add	r0, r3
 8008826:	f010 001f 	ands.w	r0, r0, #31
 800882a:	f000 8092 	beq.w	8008952 <_dtoa_r+0x90a>
 800882e:	f1c0 0320 	rsb	r3, r0, #32
 8008832:	2b04      	cmp	r3, #4
 8008834:	f340 808a 	ble.w	800894c <_dtoa_r+0x904>
 8008838:	f1c0 001c 	rsb	r0, r0, #28
 800883c:	9b04      	ldr	r3, [sp, #16]
 800883e:	4403      	add	r3, r0
 8008840:	9304      	str	r3, [sp, #16]
 8008842:	9b05      	ldr	r3, [sp, #20]
 8008844:	4403      	add	r3, r0
 8008846:	4405      	add	r5, r0
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	9b04      	ldr	r3, [sp, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	dd07      	ble.n	8008860 <_dtoa_r+0x818>
 8008850:	ee18 1a10 	vmov	r1, s16
 8008854:	461a      	mov	r2, r3
 8008856:	4620      	mov	r0, r4
 8008858:	f000 fc10 	bl	800907c <__lshift>
 800885c:	ee08 0a10 	vmov	s16, r0
 8008860:	9b05      	ldr	r3, [sp, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	dd05      	ble.n	8008872 <_dtoa_r+0x82a>
 8008866:	4631      	mov	r1, r6
 8008868:	461a      	mov	r2, r3
 800886a:	4620      	mov	r0, r4
 800886c:	f000 fc06 	bl	800907c <__lshift>
 8008870:	4606      	mov	r6, r0
 8008872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008874:	2b00      	cmp	r3, #0
 8008876:	d06e      	beq.n	8008956 <_dtoa_r+0x90e>
 8008878:	ee18 0a10 	vmov	r0, s16
 800887c:	4631      	mov	r1, r6
 800887e:	f000 fc6d 	bl	800915c <__mcmp>
 8008882:	2800      	cmp	r0, #0
 8008884:	da67      	bge.n	8008956 <_dtoa_r+0x90e>
 8008886:	9b00      	ldr	r3, [sp, #0]
 8008888:	3b01      	subs	r3, #1
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	220a      	movs	r2, #10
 8008892:	2300      	movs	r3, #0
 8008894:	4620      	mov	r0, r4
 8008896:	f000 fa41 	bl	8008d1c <__multadd>
 800889a:	9b08      	ldr	r3, [sp, #32]
 800889c:	ee08 0a10 	vmov	s16, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 81b1 	beq.w	8008c08 <_dtoa_r+0xbc0>
 80088a6:	2300      	movs	r3, #0
 80088a8:	4639      	mov	r1, r7
 80088aa:	220a      	movs	r2, #10
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fa35 	bl	8008d1c <__multadd>
 80088b2:	9b02      	ldr	r3, [sp, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	4607      	mov	r7, r0
 80088b8:	f300 808e 	bgt.w	80089d8 <_dtoa_r+0x990>
 80088bc:	9b06      	ldr	r3, [sp, #24]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	dc51      	bgt.n	8008966 <_dtoa_r+0x91e>
 80088c2:	e089      	b.n	80089d8 <_dtoa_r+0x990>
 80088c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80088ca:	e74b      	b.n	8008764 <_dtoa_r+0x71c>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	1e5e      	subs	r6, r3, #1
 80088d0:	9b07      	ldr	r3, [sp, #28]
 80088d2:	42b3      	cmp	r3, r6
 80088d4:	bfbf      	itttt	lt
 80088d6:	9b07      	ldrlt	r3, [sp, #28]
 80088d8:	9607      	strlt	r6, [sp, #28]
 80088da:	1af2      	sublt	r2, r6, r3
 80088dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80088de:	bfb6      	itet	lt
 80088e0:	189b      	addlt	r3, r3, r2
 80088e2:	1b9e      	subge	r6, r3, r6
 80088e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	bfb8      	it	lt
 80088ea:	2600      	movlt	r6, #0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	bfb7      	itett	lt
 80088f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80088f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80088f8:	1a9d      	sublt	r5, r3, r2
 80088fa:	2300      	movlt	r3, #0
 80088fc:	e734      	b.n	8008768 <_dtoa_r+0x720>
 80088fe:	9e07      	ldr	r6, [sp, #28]
 8008900:	9d04      	ldr	r5, [sp, #16]
 8008902:	9f08      	ldr	r7, [sp, #32]
 8008904:	e73b      	b.n	800877e <_dtoa_r+0x736>
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	e767      	b.n	80087da <_dtoa_r+0x792>
 800890a:	9b06      	ldr	r3, [sp, #24]
 800890c:	2b01      	cmp	r3, #1
 800890e:	dc18      	bgt.n	8008942 <_dtoa_r+0x8fa>
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	d115      	bne.n	8008942 <_dtoa_r+0x8fa>
 8008916:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800891a:	b993      	cbnz	r3, 8008942 <_dtoa_r+0x8fa>
 800891c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008920:	0d1b      	lsrs	r3, r3, #20
 8008922:	051b      	lsls	r3, r3, #20
 8008924:	b183      	cbz	r3, 8008948 <_dtoa_r+0x900>
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	3301      	adds	r3, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	9b05      	ldr	r3, [sp, #20]
 800892e:	3301      	adds	r3, #1
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	f04f 0801 	mov.w	r8, #1
 8008936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008938:	2b00      	cmp	r3, #0
 800893a:	f47f af6a 	bne.w	8008812 <_dtoa_r+0x7ca>
 800893e:	2001      	movs	r0, #1
 8008940:	e76f      	b.n	8008822 <_dtoa_r+0x7da>
 8008942:	f04f 0800 	mov.w	r8, #0
 8008946:	e7f6      	b.n	8008936 <_dtoa_r+0x8ee>
 8008948:	4698      	mov	r8, r3
 800894a:	e7f4      	b.n	8008936 <_dtoa_r+0x8ee>
 800894c:	f43f af7d 	beq.w	800884a <_dtoa_r+0x802>
 8008950:	4618      	mov	r0, r3
 8008952:	301c      	adds	r0, #28
 8008954:	e772      	b.n	800883c <_dtoa_r+0x7f4>
 8008956:	9b03      	ldr	r3, [sp, #12]
 8008958:	2b00      	cmp	r3, #0
 800895a:	dc37      	bgt.n	80089cc <_dtoa_r+0x984>
 800895c:	9b06      	ldr	r3, [sp, #24]
 800895e:	2b02      	cmp	r3, #2
 8008960:	dd34      	ble.n	80089cc <_dtoa_r+0x984>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	9302      	str	r3, [sp, #8]
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	b96b      	cbnz	r3, 8008986 <_dtoa_r+0x93e>
 800896a:	4631      	mov	r1, r6
 800896c:	2205      	movs	r2, #5
 800896e:	4620      	mov	r0, r4
 8008970:	f000 f9d4 	bl	8008d1c <__multadd>
 8008974:	4601      	mov	r1, r0
 8008976:	4606      	mov	r6, r0
 8008978:	ee18 0a10 	vmov	r0, s16
 800897c:	f000 fbee 	bl	800915c <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	f73f adbb 	bgt.w	80084fc <_dtoa_r+0x4b4>
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	9d01      	ldr	r5, [sp, #4]
 800898a:	43db      	mvns	r3, r3
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	4631      	mov	r1, r6
 8008994:	4620      	mov	r0, r4
 8008996:	f000 f99f 	bl	8008cd8 <_Bfree>
 800899a:	2f00      	cmp	r7, #0
 800899c:	f43f aea4 	beq.w	80086e8 <_dtoa_r+0x6a0>
 80089a0:	f1b8 0f00 	cmp.w	r8, #0
 80089a4:	d005      	beq.n	80089b2 <_dtoa_r+0x96a>
 80089a6:	45b8      	cmp	r8, r7
 80089a8:	d003      	beq.n	80089b2 <_dtoa_r+0x96a>
 80089aa:	4641      	mov	r1, r8
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 f993 	bl	8008cd8 <_Bfree>
 80089b2:	4639      	mov	r1, r7
 80089b4:	4620      	mov	r0, r4
 80089b6:	f000 f98f 	bl	8008cd8 <_Bfree>
 80089ba:	e695      	b.n	80086e8 <_dtoa_r+0x6a0>
 80089bc:	2600      	movs	r6, #0
 80089be:	4637      	mov	r7, r6
 80089c0:	e7e1      	b.n	8008986 <_dtoa_r+0x93e>
 80089c2:	9700      	str	r7, [sp, #0]
 80089c4:	4637      	mov	r7, r6
 80089c6:	e599      	b.n	80084fc <_dtoa_r+0x4b4>
 80089c8:	40240000 	.word	0x40240000
 80089cc:	9b08      	ldr	r3, [sp, #32]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 80ca 	beq.w	8008b68 <_dtoa_r+0xb20>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	9302      	str	r3, [sp, #8]
 80089d8:	2d00      	cmp	r5, #0
 80089da:	dd05      	ble.n	80089e8 <_dtoa_r+0x9a0>
 80089dc:	4639      	mov	r1, r7
 80089de:	462a      	mov	r2, r5
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fb4b 	bl	800907c <__lshift>
 80089e6:	4607      	mov	r7, r0
 80089e8:	f1b8 0f00 	cmp.w	r8, #0
 80089ec:	d05b      	beq.n	8008aa6 <_dtoa_r+0xa5e>
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 f931 	bl	8008c58 <_Balloc>
 80089f6:	4605      	mov	r5, r0
 80089f8:	b928      	cbnz	r0, 8008a06 <_dtoa_r+0x9be>
 80089fa:	4b87      	ldr	r3, [pc, #540]	; (8008c18 <_dtoa_r+0xbd0>)
 80089fc:	4602      	mov	r2, r0
 80089fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a02:	f7ff bb3b 	b.w	800807c <_dtoa_r+0x34>
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	3202      	adds	r2, #2
 8008a0a:	0092      	lsls	r2, r2, #2
 8008a0c:	f107 010c 	add.w	r1, r7, #12
 8008a10:	300c      	adds	r0, #12
 8008a12:	f000 f913 	bl	8008c3c <memcpy>
 8008a16:	2201      	movs	r2, #1
 8008a18:	4629      	mov	r1, r5
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f000 fb2e 	bl	800907c <__lshift>
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	f103 0901 	add.w	r9, r3, #1
 8008a26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	f00a 0301 	and.w	r3, sl, #1
 8008a32:	46b8      	mov	r8, r7
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	4607      	mov	r7, r0
 8008a38:	4631      	mov	r1, r6
 8008a3a:	ee18 0a10 	vmov	r0, s16
 8008a3e:	f7ff fa77 	bl	8007f30 <quorem>
 8008a42:	4641      	mov	r1, r8
 8008a44:	9002      	str	r0, [sp, #8]
 8008a46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008a4a:	ee18 0a10 	vmov	r0, s16
 8008a4e:	f000 fb85 	bl	800915c <__mcmp>
 8008a52:	463a      	mov	r2, r7
 8008a54:	9003      	str	r0, [sp, #12]
 8008a56:	4631      	mov	r1, r6
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 fb9b 	bl	8009194 <__mdiff>
 8008a5e:	68c2      	ldr	r2, [r0, #12]
 8008a60:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008a64:	4605      	mov	r5, r0
 8008a66:	bb02      	cbnz	r2, 8008aaa <_dtoa_r+0xa62>
 8008a68:	4601      	mov	r1, r0
 8008a6a:	ee18 0a10 	vmov	r0, s16
 8008a6e:	f000 fb75 	bl	800915c <__mcmp>
 8008a72:	4602      	mov	r2, r0
 8008a74:	4629      	mov	r1, r5
 8008a76:	4620      	mov	r0, r4
 8008a78:	9207      	str	r2, [sp, #28]
 8008a7a:	f000 f92d 	bl	8008cd8 <_Bfree>
 8008a7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008a82:	ea43 0102 	orr.w	r1, r3, r2
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	464d      	mov	r5, r9
 8008a8c:	d10f      	bne.n	8008aae <_dtoa_r+0xa66>
 8008a8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a92:	d02a      	beq.n	8008aea <_dtoa_r+0xaa2>
 8008a94:	9b03      	ldr	r3, [sp, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dd02      	ble.n	8008aa0 <_dtoa_r+0xa58>
 8008a9a:	9b02      	ldr	r3, [sp, #8]
 8008a9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008aa0:	f88b a000 	strb.w	sl, [fp]
 8008aa4:	e775      	b.n	8008992 <_dtoa_r+0x94a>
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	e7ba      	b.n	8008a20 <_dtoa_r+0x9d8>
 8008aaa:	2201      	movs	r2, #1
 8008aac:	e7e2      	b.n	8008a74 <_dtoa_r+0xa2c>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	db04      	blt.n	8008abe <_dtoa_r+0xa76>
 8008ab4:	9906      	ldr	r1, [sp, #24]
 8008ab6:	430b      	orrs	r3, r1
 8008ab8:	9904      	ldr	r1, [sp, #16]
 8008aba:	430b      	orrs	r3, r1
 8008abc:	d122      	bne.n	8008b04 <_dtoa_r+0xabc>
 8008abe:	2a00      	cmp	r2, #0
 8008ac0:	ddee      	ble.n	8008aa0 <_dtoa_r+0xa58>
 8008ac2:	ee18 1a10 	vmov	r1, s16
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fad7 	bl	800907c <__lshift>
 8008ace:	4631      	mov	r1, r6
 8008ad0:	ee08 0a10 	vmov	s16, r0
 8008ad4:	f000 fb42 	bl	800915c <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dc03      	bgt.n	8008ae4 <_dtoa_r+0xa9c>
 8008adc:	d1e0      	bne.n	8008aa0 <_dtoa_r+0xa58>
 8008ade:	f01a 0f01 	tst.w	sl, #1
 8008ae2:	d0dd      	beq.n	8008aa0 <_dtoa_r+0xa58>
 8008ae4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ae8:	d1d7      	bne.n	8008a9a <_dtoa_r+0xa52>
 8008aea:	2339      	movs	r3, #57	; 0x39
 8008aec:	f88b 3000 	strb.w	r3, [fp]
 8008af0:	462b      	mov	r3, r5
 8008af2:	461d      	mov	r5, r3
 8008af4:	3b01      	subs	r3, #1
 8008af6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008afa:	2a39      	cmp	r2, #57	; 0x39
 8008afc:	d071      	beq.n	8008be2 <_dtoa_r+0xb9a>
 8008afe:	3201      	adds	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]
 8008b02:	e746      	b.n	8008992 <_dtoa_r+0x94a>
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	dd07      	ble.n	8008b18 <_dtoa_r+0xad0>
 8008b08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b0c:	d0ed      	beq.n	8008aea <_dtoa_r+0xaa2>
 8008b0e:	f10a 0301 	add.w	r3, sl, #1
 8008b12:	f88b 3000 	strb.w	r3, [fp]
 8008b16:	e73c      	b.n	8008992 <_dtoa_r+0x94a>
 8008b18:	9b05      	ldr	r3, [sp, #20]
 8008b1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b1e:	4599      	cmp	r9, r3
 8008b20:	d047      	beq.n	8008bb2 <_dtoa_r+0xb6a>
 8008b22:	ee18 1a10 	vmov	r1, s16
 8008b26:	2300      	movs	r3, #0
 8008b28:	220a      	movs	r2, #10
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f000 f8f6 	bl	8008d1c <__multadd>
 8008b30:	45b8      	cmp	r8, r7
 8008b32:	ee08 0a10 	vmov	s16, r0
 8008b36:	f04f 0300 	mov.w	r3, #0
 8008b3a:	f04f 020a 	mov.w	r2, #10
 8008b3e:	4641      	mov	r1, r8
 8008b40:	4620      	mov	r0, r4
 8008b42:	d106      	bne.n	8008b52 <_dtoa_r+0xb0a>
 8008b44:	f000 f8ea 	bl	8008d1c <__multadd>
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4607      	mov	r7, r0
 8008b4c:	f109 0901 	add.w	r9, r9, #1
 8008b50:	e772      	b.n	8008a38 <_dtoa_r+0x9f0>
 8008b52:	f000 f8e3 	bl	8008d1c <__multadd>
 8008b56:	4639      	mov	r1, r7
 8008b58:	4680      	mov	r8, r0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	220a      	movs	r2, #10
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 f8dc 	bl	8008d1c <__multadd>
 8008b64:	4607      	mov	r7, r0
 8008b66:	e7f1      	b.n	8008b4c <_dtoa_r+0xb04>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	9d01      	ldr	r5, [sp, #4]
 8008b6e:	ee18 0a10 	vmov	r0, s16
 8008b72:	4631      	mov	r1, r6
 8008b74:	f7ff f9dc 	bl	8007f30 <quorem>
 8008b78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	f805 ab01 	strb.w	sl, [r5], #1
 8008b82:	1aea      	subs	r2, r5, r3
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	4293      	cmp	r3, r2
 8008b88:	dd09      	ble.n	8008b9e <_dtoa_r+0xb56>
 8008b8a:	ee18 1a10 	vmov	r1, s16
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f8c2 	bl	8008d1c <__multadd>
 8008b98:	ee08 0a10 	vmov	s16, r0
 8008b9c:	e7e7      	b.n	8008b6e <_dtoa_r+0xb26>
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfc8      	it	gt
 8008ba4:	461d      	movgt	r5, r3
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	bfd8      	it	le
 8008baa:	2501      	movle	r5, #1
 8008bac:	441d      	add	r5, r3
 8008bae:	f04f 0800 	mov.w	r8, #0
 8008bb2:	ee18 1a10 	vmov	r1, s16
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f000 fa5f 	bl	800907c <__lshift>
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	ee08 0a10 	vmov	s16, r0
 8008bc4:	f000 faca 	bl	800915c <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	dc91      	bgt.n	8008af0 <_dtoa_r+0xaa8>
 8008bcc:	d102      	bne.n	8008bd4 <_dtoa_r+0xb8c>
 8008bce:	f01a 0f01 	tst.w	sl, #1
 8008bd2:	d18d      	bne.n	8008af0 <_dtoa_r+0xaa8>
 8008bd4:	462b      	mov	r3, r5
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bdc:	2a30      	cmp	r2, #48	; 0x30
 8008bde:	d0fa      	beq.n	8008bd6 <_dtoa_r+0xb8e>
 8008be0:	e6d7      	b.n	8008992 <_dtoa_r+0x94a>
 8008be2:	9a01      	ldr	r2, [sp, #4]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d184      	bne.n	8008af2 <_dtoa_r+0xaaa>
 8008be8:	9b00      	ldr	r3, [sp, #0]
 8008bea:	3301      	adds	r3, #1
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	2331      	movs	r3, #49	; 0x31
 8008bf0:	7013      	strb	r3, [r2, #0]
 8008bf2:	e6ce      	b.n	8008992 <_dtoa_r+0x94a>
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <_dtoa_r+0xbd4>)
 8008bf6:	f7ff ba95 	b.w	8008124 <_dtoa_r+0xdc>
 8008bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f47f aa6e 	bne.w	80080de <_dtoa_r+0x96>
 8008c02:	4b07      	ldr	r3, [pc, #28]	; (8008c20 <_dtoa_r+0xbd8>)
 8008c04:	f7ff ba8e 	b.w	8008124 <_dtoa_r+0xdc>
 8008c08:	9b02      	ldr	r3, [sp, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dcae      	bgt.n	8008b6c <_dtoa_r+0xb24>
 8008c0e:	9b06      	ldr	r3, [sp, #24]
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	f73f aea8 	bgt.w	8008966 <_dtoa_r+0x91e>
 8008c16:	e7a9      	b.n	8008b6c <_dtoa_r+0xb24>
 8008c18:	0800ab63 	.word	0x0800ab63
 8008c1c:	0800aac0 	.word	0x0800aac0
 8008c20:	0800aae4 	.word	0x0800aae4

08008c24 <_localeconv_r>:
 8008c24:	4800      	ldr	r0, [pc, #0]	; (8008c28 <_localeconv_r+0x4>)
 8008c26:	4770      	bx	lr
 8008c28:	20000160 	.word	0x20000160

08008c2c <malloc>:
 8008c2c:	4b02      	ldr	r3, [pc, #8]	; (8008c38 <malloc+0xc>)
 8008c2e:	4601      	mov	r1, r0
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	f000 bc17 	b.w	8009464 <_malloc_r>
 8008c36:	bf00      	nop
 8008c38:	2000000c 	.word	0x2000000c

08008c3c <memcpy>:
 8008c3c:	440a      	add	r2, r1
 8008c3e:	4291      	cmp	r1, r2
 8008c40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c44:	d100      	bne.n	8008c48 <memcpy+0xc>
 8008c46:	4770      	bx	lr
 8008c48:	b510      	push	{r4, lr}
 8008c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c52:	4291      	cmp	r1, r2
 8008c54:	d1f9      	bne.n	8008c4a <memcpy+0xe>
 8008c56:	bd10      	pop	{r4, pc}

08008c58 <_Balloc>:
 8008c58:	b570      	push	{r4, r5, r6, lr}
 8008c5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	b976      	cbnz	r6, 8008c80 <_Balloc+0x28>
 8008c62:	2010      	movs	r0, #16
 8008c64:	f7ff ffe2 	bl	8008c2c <malloc>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c6c:	b920      	cbnz	r0, 8008c78 <_Balloc+0x20>
 8008c6e:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <_Balloc+0x78>)
 8008c70:	4818      	ldr	r0, [pc, #96]	; (8008cd4 <_Balloc+0x7c>)
 8008c72:	2166      	movs	r1, #102	; 0x66
 8008c74:	f000 fdd6 	bl	8009824 <__assert_func>
 8008c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c7c:	6006      	str	r6, [r0, #0]
 8008c7e:	60c6      	str	r6, [r0, #12]
 8008c80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c82:	68f3      	ldr	r3, [r6, #12]
 8008c84:	b183      	cbz	r3, 8008ca8 <_Balloc+0x50>
 8008c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c8e:	b9b8      	cbnz	r0, 8008cc0 <_Balloc+0x68>
 8008c90:	2101      	movs	r1, #1
 8008c92:	fa01 f605 	lsl.w	r6, r1, r5
 8008c96:	1d72      	adds	r2, r6, #5
 8008c98:	0092      	lsls	r2, r2, #2
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f000 fb60 	bl	8009360 <_calloc_r>
 8008ca0:	b160      	cbz	r0, 8008cbc <_Balloc+0x64>
 8008ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ca6:	e00e      	b.n	8008cc6 <_Balloc+0x6e>
 8008ca8:	2221      	movs	r2, #33	; 0x21
 8008caa:	2104      	movs	r1, #4
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 fb57 	bl	8009360 <_calloc_r>
 8008cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb4:	60f0      	str	r0, [r6, #12]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e4      	bne.n	8008c86 <_Balloc+0x2e>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	6802      	ldr	r2, [r0, #0]
 8008cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ccc:	e7f7      	b.n	8008cbe <_Balloc+0x66>
 8008cce:	bf00      	nop
 8008cd0:	0800aaf1 	.word	0x0800aaf1
 8008cd4:	0800ab74 	.word	0x0800ab74

08008cd8 <_Bfree>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cdc:	4605      	mov	r5, r0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	b976      	cbnz	r6, 8008d00 <_Bfree+0x28>
 8008ce2:	2010      	movs	r0, #16
 8008ce4:	f7ff ffa2 	bl	8008c2c <malloc>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	6268      	str	r0, [r5, #36]	; 0x24
 8008cec:	b920      	cbnz	r0, 8008cf8 <_Bfree+0x20>
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <_Bfree+0x3c>)
 8008cf0:	4809      	ldr	r0, [pc, #36]	; (8008d18 <_Bfree+0x40>)
 8008cf2:	218a      	movs	r1, #138	; 0x8a
 8008cf4:	f000 fd96 	bl	8009824 <__assert_func>
 8008cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cfc:	6006      	str	r6, [r0, #0]
 8008cfe:	60c6      	str	r6, [r0, #12]
 8008d00:	b13c      	cbz	r4, 8008d12 <_Bfree+0x3a>
 8008d02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d04:	6862      	ldr	r2, [r4, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d0c:	6021      	str	r1, [r4, #0]
 8008d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	0800aaf1 	.word	0x0800aaf1
 8008d18:	0800ab74 	.word	0x0800ab74

08008d1c <__multadd>:
 8008d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d20:	690d      	ldr	r5, [r1, #16]
 8008d22:	4607      	mov	r7, r0
 8008d24:	460c      	mov	r4, r1
 8008d26:	461e      	mov	r6, r3
 8008d28:	f101 0c14 	add.w	ip, r1, #20
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d32:	b299      	uxth	r1, r3
 8008d34:	fb02 6101 	mla	r1, r2, r1, r6
 8008d38:	0c1e      	lsrs	r6, r3, #16
 8008d3a:	0c0b      	lsrs	r3, r1, #16
 8008d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d40:	b289      	uxth	r1, r1
 8008d42:	3001      	adds	r0, #1
 8008d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d48:	4285      	cmp	r5, r0
 8008d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d52:	dcec      	bgt.n	8008d2e <__multadd+0x12>
 8008d54:	b30e      	cbz	r6, 8008d9a <__multadd+0x7e>
 8008d56:	68a3      	ldr	r3, [r4, #8]
 8008d58:	42ab      	cmp	r3, r5
 8008d5a:	dc19      	bgt.n	8008d90 <__multadd+0x74>
 8008d5c:	6861      	ldr	r1, [r4, #4]
 8008d5e:	4638      	mov	r0, r7
 8008d60:	3101      	adds	r1, #1
 8008d62:	f7ff ff79 	bl	8008c58 <_Balloc>
 8008d66:	4680      	mov	r8, r0
 8008d68:	b928      	cbnz	r0, 8008d76 <__multadd+0x5a>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <__multadd+0x84>)
 8008d6e:	480d      	ldr	r0, [pc, #52]	; (8008da4 <__multadd+0x88>)
 8008d70:	21b5      	movs	r1, #181	; 0xb5
 8008d72:	f000 fd57 	bl	8009824 <__assert_func>
 8008d76:	6922      	ldr	r2, [r4, #16]
 8008d78:	3202      	adds	r2, #2
 8008d7a:	f104 010c 	add.w	r1, r4, #12
 8008d7e:	0092      	lsls	r2, r2, #2
 8008d80:	300c      	adds	r0, #12
 8008d82:	f7ff ff5b 	bl	8008c3c <memcpy>
 8008d86:	4621      	mov	r1, r4
 8008d88:	4638      	mov	r0, r7
 8008d8a:	f7ff ffa5 	bl	8008cd8 <_Bfree>
 8008d8e:	4644      	mov	r4, r8
 8008d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d94:	3501      	adds	r5, #1
 8008d96:	615e      	str	r6, [r3, #20]
 8008d98:	6125      	str	r5, [r4, #16]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	0800ab63 	.word	0x0800ab63
 8008da4:	0800ab74 	.word	0x0800ab74

08008da8 <__hi0bits>:
 8008da8:	0c03      	lsrs	r3, r0, #16
 8008daa:	041b      	lsls	r3, r3, #16
 8008dac:	b9d3      	cbnz	r3, 8008de4 <__hi0bits+0x3c>
 8008dae:	0400      	lsls	r0, r0, #16
 8008db0:	2310      	movs	r3, #16
 8008db2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008db6:	bf04      	itt	eq
 8008db8:	0200      	lsleq	r0, r0, #8
 8008dba:	3308      	addeq	r3, #8
 8008dbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008dc0:	bf04      	itt	eq
 8008dc2:	0100      	lsleq	r0, r0, #4
 8008dc4:	3304      	addeq	r3, #4
 8008dc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008dca:	bf04      	itt	eq
 8008dcc:	0080      	lsleq	r0, r0, #2
 8008dce:	3302      	addeq	r3, #2
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	db05      	blt.n	8008de0 <__hi0bits+0x38>
 8008dd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008dd8:	f103 0301 	add.w	r3, r3, #1
 8008ddc:	bf08      	it	eq
 8008dde:	2320      	moveq	r3, #32
 8008de0:	4618      	mov	r0, r3
 8008de2:	4770      	bx	lr
 8008de4:	2300      	movs	r3, #0
 8008de6:	e7e4      	b.n	8008db2 <__hi0bits+0xa>

08008de8 <__lo0bits>:
 8008de8:	6803      	ldr	r3, [r0, #0]
 8008dea:	f013 0207 	ands.w	r2, r3, #7
 8008dee:	4601      	mov	r1, r0
 8008df0:	d00b      	beq.n	8008e0a <__lo0bits+0x22>
 8008df2:	07da      	lsls	r2, r3, #31
 8008df4:	d423      	bmi.n	8008e3e <__lo0bits+0x56>
 8008df6:	0798      	lsls	r0, r3, #30
 8008df8:	bf49      	itett	mi
 8008dfa:	085b      	lsrmi	r3, r3, #1
 8008dfc:	089b      	lsrpl	r3, r3, #2
 8008dfe:	2001      	movmi	r0, #1
 8008e00:	600b      	strmi	r3, [r1, #0]
 8008e02:	bf5c      	itt	pl
 8008e04:	600b      	strpl	r3, [r1, #0]
 8008e06:	2002      	movpl	r0, #2
 8008e08:	4770      	bx	lr
 8008e0a:	b298      	uxth	r0, r3
 8008e0c:	b9a8      	cbnz	r0, 8008e3a <__lo0bits+0x52>
 8008e0e:	0c1b      	lsrs	r3, r3, #16
 8008e10:	2010      	movs	r0, #16
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	b90a      	cbnz	r2, 8008e1a <__lo0bits+0x32>
 8008e16:	3008      	adds	r0, #8
 8008e18:	0a1b      	lsrs	r3, r3, #8
 8008e1a:	071a      	lsls	r2, r3, #28
 8008e1c:	bf04      	itt	eq
 8008e1e:	091b      	lsreq	r3, r3, #4
 8008e20:	3004      	addeq	r0, #4
 8008e22:	079a      	lsls	r2, r3, #30
 8008e24:	bf04      	itt	eq
 8008e26:	089b      	lsreq	r3, r3, #2
 8008e28:	3002      	addeq	r0, #2
 8008e2a:	07da      	lsls	r2, r3, #31
 8008e2c:	d403      	bmi.n	8008e36 <__lo0bits+0x4e>
 8008e2e:	085b      	lsrs	r3, r3, #1
 8008e30:	f100 0001 	add.w	r0, r0, #1
 8008e34:	d005      	beq.n	8008e42 <__lo0bits+0x5a>
 8008e36:	600b      	str	r3, [r1, #0]
 8008e38:	4770      	bx	lr
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	e7e9      	b.n	8008e12 <__lo0bits+0x2a>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	4770      	bx	lr
 8008e42:	2020      	movs	r0, #32
 8008e44:	4770      	bx	lr
	...

08008e48 <__i2b>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	f7ff ff03 	bl	8008c58 <_Balloc>
 8008e52:	4602      	mov	r2, r0
 8008e54:	b928      	cbnz	r0, 8008e62 <__i2b+0x1a>
 8008e56:	4b05      	ldr	r3, [pc, #20]	; (8008e6c <__i2b+0x24>)
 8008e58:	4805      	ldr	r0, [pc, #20]	; (8008e70 <__i2b+0x28>)
 8008e5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e5e:	f000 fce1 	bl	8009824 <__assert_func>
 8008e62:	2301      	movs	r3, #1
 8008e64:	6144      	str	r4, [r0, #20]
 8008e66:	6103      	str	r3, [r0, #16]
 8008e68:	bd10      	pop	{r4, pc}
 8008e6a:	bf00      	nop
 8008e6c:	0800ab63 	.word	0x0800ab63
 8008e70:	0800ab74 	.word	0x0800ab74

08008e74 <__multiply>:
 8008e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e78:	4691      	mov	r9, r2
 8008e7a:	690a      	ldr	r2, [r1, #16]
 8008e7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	bfb8      	it	lt
 8008e84:	460b      	movlt	r3, r1
 8008e86:	460c      	mov	r4, r1
 8008e88:	bfbc      	itt	lt
 8008e8a:	464c      	movlt	r4, r9
 8008e8c:	4699      	movlt	r9, r3
 8008e8e:	6927      	ldr	r7, [r4, #16]
 8008e90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e94:	68a3      	ldr	r3, [r4, #8]
 8008e96:	6861      	ldr	r1, [r4, #4]
 8008e98:	eb07 060a 	add.w	r6, r7, sl
 8008e9c:	42b3      	cmp	r3, r6
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	bfb8      	it	lt
 8008ea2:	3101      	addlt	r1, #1
 8008ea4:	f7ff fed8 	bl	8008c58 <_Balloc>
 8008ea8:	b930      	cbnz	r0, 8008eb8 <__multiply+0x44>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b44      	ldr	r3, [pc, #272]	; (8008fc0 <__multiply+0x14c>)
 8008eae:	4845      	ldr	r0, [pc, #276]	; (8008fc4 <__multiply+0x150>)
 8008eb0:	f240 115d 	movw	r1, #349	; 0x15d
 8008eb4:	f000 fcb6 	bl	8009824 <__assert_func>
 8008eb8:	f100 0514 	add.w	r5, r0, #20
 8008ebc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4543      	cmp	r3, r8
 8008ec6:	d321      	bcc.n	8008f0c <__multiply+0x98>
 8008ec8:	f104 0314 	add.w	r3, r4, #20
 8008ecc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008ed0:	f109 0314 	add.w	r3, r9, #20
 8008ed4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ed8:	9202      	str	r2, [sp, #8]
 8008eda:	1b3a      	subs	r2, r7, r4
 8008edc:	3a15      	subs	r2, #21
 8008ede:	f022 0203 	bic.w	r2, r2, #3
 8008ee2:	3204      	adds	r2, #4
 8008ee4:	f104 0115 	add.w	r1, r4, #21
 8008ee8:	428f      	cmp	r7, r1
 8008eea:	bf38      	it	cc
 8008eec:	2204      	movcc	r2, #4
 8008eee:	9201      	str	r2, [sp, #4]
 8008ef0:	9a02      	ldr	r2, [sp, #8]
 8008ef2:	9303      	str	r3, [sp, #12]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d80c      	bhi.n	8008f12 <__multiply+0x9e>
 8008ef8:	2e00      	cmp	r6, #0
 8008efa:	dd03      	ble.n	8008f04 <__multiply+0x90>
 8008efc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d05a      	beq.n	8008fba <__multiply+0x146>
 8008f04:	6106      	str	r6, [r0, #16]
 8008f06:	b005      	add	sp, #20
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f0c:	f843 2b04 	str.w	r2, [r3], #4
 8008f10:	e7d8      	b.n	8008ec4 <__multiply+0x50>
 8008f12:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f16:	f1ba 0f00 	cmp.w	sl, #0
 8008f1a:	d024      	beq.n	8008f66 <__multiply+0xf2>
 8008f1c:	f104 0e14 	add.w	lr, r4, #20
 8008f20:	46a9      	mov	r9, r5
 8008f22:	f04f 0c00 	mov.w	ip, #0
 8008f26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f2a:	f8d9 1000 	ldr.w	r1, [r9]
 8008f2e:	fa1f fb82 	uxth.w	fp, r2
 8008f32:	b289      	uxth	r1, r1
 8008f34:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8008f40:	4461      	add	r1, ip
 8008f42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f46:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f4e:	b289      	uxth	r1, r1
 8008f50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f54:	4577      	cmp	r7, lr
 8008f56:	f849 1b04 	str.w	r1, [r9], #4
 8008f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f5e:	d8e2      	bhi.n	8008f26 <__multiply+0xb2>
 8008f60:	9a01      	ldr	r2, [sp, #4]
 8008f62:	f845 c002 	str.w	ip, [r5, r2]
 8008f66:	9a03      	ldr	r2, [sp, #12]
 8008f68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	f1b9 0f00 	cmp.w	r9, #0
 8008f72:	d020      	beq.n	8008fb6 <__multiply+0x142>
 8008f74:	6829      	ldr	r1, [r5, #0]
 8008f76:	f104 0c14 	add.w	ip, r4, #20
 8008f7a:	46ae      	mov	lr, r5
 8008f7c:	f04f 0a00 	mov.w	sl, #0
 8008f80:	f8bc b000 	ldrh.w	fp, [ip]
 8008f84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f88:	fb09 220b 	mla	r2, r9, fp, r2
 8008f8c:	4492      	add	sl, r2
 8008f8e:	b289      	uxth	r1, r1
 8008f90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f94:	f84e 1b04 	str.w	r1, [lr], #4
 8008f98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f9c:	f8be 1000 	ldrh.w	r1, [lr]
 8008fa0:	0c12      	lsrs	r2, r2, #16
 8008fa2:	fb09 1102 	mla	r1, r9, r2, r1
 8008fa6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008faa:	4567      	cmp	r7, ip
 8008fac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008fb0:	d8e6      	bhi.n	8008f80 <__multiply+0x10c>
 8008fb2:	9a01      	ldr	r2, [sp, #4]
 8008fb4:	50a9      	str	r1, [r5, r2]
 8008fb6:	3504      	adds	r5, #4
 8008fb8:	e79a      	b.n	8008ef0 <__multiply+0x7c>
 8008fba:	3e01      	subs	r6, #1
 8008fbc:	e79c      	b.n	8008ef8 <__multiply+0x84>
 8008fbe:	bf00      	nop
 8008fc0:	0800ab63 	.word	0x0800ab63
 8008fc4:	0800ab74 	.word	0x0800ab74

08008fc8 <__pow5mult>:
 8008fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	4615      	mov	r5, r2
 8008fce:	f012 0203 	ands.w	r2, r2, #3
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	460f      	mov	r7, r1
 8008fd6:	d007      	beq.n	8008fe8 <__pow5mult+0x20>
 8008fd8:	4c25      	ldr	r4, [pc, #148]	; (8009070 <__pow5mult+0xa8>)
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fe2:	f7ff fe9b 	bl	8008d1c <__multadd>
 8008fe6:	4607      	mov	r7, r0
 8008fe8:	10ad      	asrs	r5, r5, #2
 8008fea:	d03d      	beq.n	8009068 <__pow5mult+0xa0>
 8008fec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fee:	b97c      	cbnz	r4, 8009010 <__pow5mult+0x48>
 8008ff0:	2010      	movs	r0, #16
 8008ff2:	f7ff fe1b 	bl	8008c2c <malloc>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6270      	str	r0, [r6, #36]	; 0x24
 8008ffa:	b928      	cbnz	r0, 8009008 <__pow5mult+0x40>
 8008ffc:	4b1d      	ldr	r3, [pc, #116]	; (8009074 <__pow5mult+0xac>)
 8008ffe:	481e      	ldr	r0, [pc, #120]	; (8009078 <__pow5mult+0xb0>)
 8009000:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009004:	f000 fc0e 	bl	8009824 <__assert_func>
 8009008:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800900c:	6004      	str	r4, [r0, #0]
 800900e:	60c4      	str	r4, [r0, #12]
 8009010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009018:	b94c      	cbnz	r4, 800902e <__pow5mult+0x66>
 800901a:	f240 2171 	movw	r1, #625	; 0x271
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ff12 	bl	8008e48 <__i2b>
 8009024:	2300      	movs	r3, #0
 8009026:	f8c8 0008 	str.w	r0, [r8, #8]
 800902a:	4604      	mov	r4, r0
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	07eb      	lsls	r3, r5, #31
 8009034:	d50a      	bpl.n	800904c <__pow5mult+0x84>
 8009036:	4639      	mov	r1, r7
 8009038:	4622      	mov	r2, r4
 800903a:	4630      	mov	r0, r6
 800903c:	f7ff ff1a 	bl	8008e74 <__multiply>
 8009040:	4639      	mov	r1, r7
 8009042:	4680      	mov	r8, r0
 8009044:	4630      	mov	r0, r6
 8009046:	f7ff fe47 	bl	8008cd8 <_Bfree>
 800904a:	4647      	mov	r7, r8
 800904c:	106d      	asrs	r5, r5, #1
 800904e:	d00b      	beq.n	8009068 <__pow5mult+0xa0>
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	b938      	cbnz	r0, 8009064 <__pow5mult+0x9c>
 8009054:	4622      	mov	r2, r4
 8009056:	4621      	mov	r1, r4
 8009058:	4630      	mov	r0, r6
 800905a:	f7ff ff0b 	bl	8008e74 <__multiply>
 800905e:	6020      	str	r0, [r4, #0]
 8009060:	f8c0 9000 	str.w	r9, [r0]
 8009064:	4604      	mov	r4, r0
 8009066:	e7e4      	b.n	8009032 <__pow5mult+0x6a>
 8009068:	4638      	mov	r0, r7
 800906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906e:	bf00      	nop
 8009070:	0800acc0 	.word	0x0800acc0
 8009074:	0800aaf1 	.word	0x0800aaf1
 8009078:	0800ab74 	.word	0x0800ab74

0800907c <__lshift>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	6849      	ldr	r1, [r1, #4]
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800908a:	68a3      	ldr	r3, [r4, #8]
 800908c:	4607      	mov	r7, r0
 800908e:	4691      	mov	r9, r2
 8009090:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009094:	f108 0601 	add.w	r6, r8, #1
 8009098:	42b3      	cmp	r3, r6
 800909a:	db0b      	blt.n	80090b4 <__lshift+0x38>
 800909c:	4638      	mov	r0, r7
 800909e:	f7ff fddb 	bl	8008c58 <_Balloc>
 80090a2:	4605      	mov	r5, r0
 80090a4:	b948      	cbnz	r0, 80090ba <__lshift+0x3e>
 80090a6:	4602      	mov	r2, r0
 80090a8:	4b2a      	ldr	r3, [pc, #168]	; (8009154 <__lshift+0xd8>)
 80090aa:	482b      	ldr	r0, [pc, #172]	; (8009158 <__lshift+0xdc>)
 80090ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090b0:	f000 fbb8 	bl	8009824 <__assert_func>
 80090b4:	3101      	adds	r1, #1
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	e7ee      	b.n	8009098 <__lshift+0x1c>
 80090ba:	2300      	movs	r3, #0
 80090bc:	f100 0114 	add.w	r1, r0, #20
 80090c0:	f100 0210 	add.w	r2, r0, #16
 80090c4:	4618      	mov	r0, r3
 80090c6:	4553      	cmp	r3, sl
 80090c8:	db37      	blt.n	800913a <__lshift+0xbe>
 80090ca:	6920      	ldr	r0, [r4, #16]
 80090cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090d0:	f104 0314 	add.w	r3, r4, #20
 80090d4:	f019 091f 	ands.w	r9, r9, #31
 80090d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090e0:	d02f      	beq.n	8009142 <__lshift+0xc6>
 80090e2:	f1c9 0e20 	rsb	lr, r9, #32
 80090e6:	468a      	mov	sl, r1
 80090e8:	f04f 0c00 	mov.w	ip, #0
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	fa02 f209 	lsl.w	r2, r2, r9
 80090f2:	ea42 020c 	orr.w	r2, r2, ip
 80090f6:	f84a 2b04 	str.w	r2, [sl], #4
 80090fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80090fe:	4298      	cmp	r0, r3
 8009100:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009104:	d8f2      	bhi.n	80090ec <__lshift+0x70>
 8009106:	1b03      	subs	r3, r0, r4
 8009108:	3b15      	subs	r3, #21
 800910a:	f023 0303 	bic.w	r3, r3, #3
 800910e:	3304      	adds	r3, #4
 8009110:	f104 0215 	add.w	r2, r4, #21
 8009114:	4290      	cmp	r0, r2
 8009116:	bf38      	it	cc
 8009118:	2304      	movcc	r3, #4
 800911a:	f841 c003 	str.w	ip, [r1, r3]
 800911e:	f1bc 0f00 	cmp.w	ip, #0
 8009122:	d001      	beq.n	8009128 <__lshift+0xac>
 8009124:	f108 0602 	add.w	r6, r8, #2
 8009128:	3e01      	subs	r6, #1
 800912a:	4638      	mov	r0, r7
 800912c:	612e      	str	r6, [r5, #16]
 800912e:	4621      	mov	r1, r4
 8009130:	f7ff fdd2 	bl	8008cd8 <_Bfree>
 8009134:	4628      	mov	r0, r5
 8009136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913a:	f842 0f04 	str.w	r0, [r2, #4]!
 800913e:	3301      	adds	r3, #1
 8009140:	e7c1      	b.n	80090c6 <__lshift+0x4a>
 8009142:	3904      	subs	r1, #4
 8009144:	f853 2b04 	ldr.w	r2, [r3], #4
 8009148:	f841 2f04 	str.w	r2, [r1, #4]!
 800914c:	4298      	cmp	r0, r3
 800914e:	d8f9      	bhi.n	8009144 <__lshift+0xc8>
 8009150:	e7ea      	b.n	8009128 <__lshift+0xac>
 8009152:	bf00      	nop
 8009154:	0800ab63 	.word	0x0800ab63
 8009158:	0800ab74 	.word	0x0800ab74

0800915c <__mcmp>:
 800915c:	b530      	push	{r4, r5, lr}
 800915e:	6902      	ldr	r2, [r0, #16]
 8009160:	690c      	ldr	r4, [r1, #16]
 8009162:	1b12      	subs	r2, r2, r4
 8009164:	d10e      	bne.n	8009184 <__mcmp+0x28>
 8009166:	f100 0314 	add.w	r3, r0, #20
 800916a:	3114      	adds	r1, #20
 800916c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800917c:	42a5      	cmp	r5, r4
 800917e:	d003      	beq.n	8009188 <__mcmp+0x2c>
 8009180:	d305      	bcc.n	800918e <__mcmp+0x32>
 8009182:	2201      	movs	r2, #1
 8009184:	4610      	mov	r0, r2
 8009186:	bd30      	pop	{r4, r5, pc}
 8009188:	4283      	cmp	r3, r0
 800918a:	d3f3      	bcc.n	8009174 <__mcmp+0x18>
 800918c:	e7fa      	b.n	8009184 <__mcmp+0x28>
 800918e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009192:	e7f7      	b.n	8009184 <__mcmp+0x28>

08009194 <__mdiff>:
 8009194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	460c      	mov	r4, r1
 800919a:	4606      	mov	r6, r0
 800919c:	4611      	mov	r1, r2
 800919e:	4620      	mov	r0, r4
 80091a0:	4690      	mov	r8, r2
 80091a2:	f7ff ffdb 	bl	800915c <__mcmp>
 80091a6:	1e05      	subs	r5, r0, #0
 80091a8:	d110      	bne.n	80091cc <__mdiff+0x38>
 80091aa:	4629      	mov	r1, r5
 80091ac:	4630      	mov	r0, r6
 80091ae:	f7ff fd53 	bl	8008c58 <_Balloc>
 80091b2:	b930      	cbnz	r0, 80091c2 <__mdiff+0x2e>
 80091b4:	4b3a      	ldr	r3, [pc, #232]	; (80092a0 <__mdiff+0x10c>)
 80091b6:	4602      	mov	r2, r0
 80091b8:	f240 2132 	movw	r1, #562	; 0x232
 80091bc:	4839      	ldr	r0, [pc, #228]	; (80092a4 <__mdiff+0x110>)
 80091be:	f000 fb31 	bl	8009824 <__assert_func>
 80091c2:	2301      	movs	r3, #1
 80091c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	bfa4      	itt	ge
 80091ce:	4643      	movge	r3, r8
 80091d0:	46a0      	movge	r8, r4
 80091d2:	4630      	mov	r0, r6
 80091d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091d8:	bfa6      	itte	ge
 80091da:	461c      	movge	r4, r3
 80091dc:	2500      	movge	r5, #0
 80091de:	2501      	movlt	r5, #1
 80091e0:	f7ff fd3a 	bl	8008c58 <_Balloc>
 80091e4:	b920      	cbnz	r0, 80091f0 <__mdiff+0x5c>
 80091e6:	4b2e      	ldr	r3, [pc, #184]	; (80092a0 <__mdiff+0x10c>)
 80091e8:	4602      	mov	r2, r0
 80091ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091ee:	e7e5      	b.n	80091bc <__mdiff+0x28>
 80091f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091f4:	6926      	ldr	r6, [r4, #16]
 80091f6:	60c5      	str	r5, [r0, #12]
 80091f8:	f104 0914 	add.w	r9, r4, #20
 80091fc:	f108 0514 	add.w	r5, r8, #20
 8009200:	f100 0e14 	add.w	lr, r0, #20
 8009204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800920c:	f108 0210 	add.w	r2, r8, #16
 8009210:	46f2      	mov	sl, lr
 8009212:	2100      	movs	r1, #0
 8009214:	f859 3b04 	ldr.w	r3, [r9], #4
 8009218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800921c:	fa1f f883 	uxth.w	r8, r3
 8009220:	fa11 f18b 	uxtah	r1, r1, fp
 8009224:	0c1b      	lsrs	r3, r3, #16
 8009226:	eba1 0808 	sub.w	r8, r1, r8
 800922a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800922e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009232:	fa1f f888 	uxth.w	r8, r8
 8009236:	1419      	asrs	r1, r3, #16
 8009238:	454e      	cmp	r6, r9
 800923a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800923e:	f84a 3b04 	str.w	r3, [sl], #4
 8009242:	d8e7      	bhi.n	8009214 <__mdiff+0x80>
 8009244:	1b33      	subs	r3, r6, r4
 8009246:	3b15      	subs	r3, #21
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	3304      	adds	r3, #4
 800924e:	3415      	adds	r4, #21
 8009250:	42a6      	cmp	r6, r4
 8009252:	bf38      	it	cc
 8009254:	2304      	movcc	r3, #4
 8009256:	441d      	add	r5, r3
 8009258:	4473      	add	r3, lr
 800925a:	469e      	mov	lr, r3
 800925c:	462e      	mov	r6, r5
 800925e:	4566      	cmp	r6, ip
 8009260:	d30e      	bcc.n	8009280 <__mdiff+0xec>
 8009262:	f10c 0203 	add.w	r2, ip, #3
 8009266:	1b52      	subs	r2, r2, r5
 8009268:	f022 0203 	bic.w	r2, r2, #3
 800926c:	3d03      	subs	r5, #3
 800926e:	45ac      	cmp	ip, r5
 8009270:	bf38      	it	cc
 8009272:	2200      	movcc	r2, #0
 8009274:	441a      	add	r2, r3
 8009276:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800927a:	b17b      	cbz	r3, 800929c <__mdiff+0x108>
 800927c:	6107      	str	r7, [r0, #16]
 800927e:	e7a3      	b.n	80091c8 <__mdiff+0x34>
 8009280:	f856 8b04 	ldr.w	r8, [r6], #4
 8009284:	fa11 f288 	uxtah	r2, r1, r8
 8009288:	1414      	asrs	r4, r2, #16
 800928a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800928e:	b292      	uxth	r2, r2
 8009290:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009294:	f84e 2b04 	str.w	r2, [lr], #4
 8009298:	1421      	asrs	r1, r4, #16
 800929a:	e7e0      	b.n	800925e <__mdiff+0xca>
 800929c:	3f01      	subs	r7, #1
 800929e:	e7ea      	b.n	8009276 <__mdiff+0xe2>
 80092a0:	0800ab63 	.word	0x0800ab63
 80092a4:	0800ab74 	.word	0x0800ab74

080092a8 <__d2b>:
 80092a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092ac:	4689      	mov	r9, r1
 80092ae:	2101      	movs	r1, #1
 80092b0:	ec57 6b10 	vmov	r6, r7, d0
 80092b4:	4690      	mov	r8, r2
 80092b6:	f7ff fccf 	bl	8008c58 <_Balloc>
 80092ba:	4604      	mov	r4, r0
 80092bc:	b930      	cbnz	r0, 80092cc <__d2b+0x24>
 80092be:	4602      	mov	r2, r0
 80092c0:	4b25      	ldr	r3, [pc, #148]	; (8009358 <__d2b+0xb0>)
 80092c2:	4826      	ldr	r0, [pc, #152]	; (800935c <__d2b+0xb4>)
 80092c4:	f240 310a 	movw	r1, #778	; 0x30a
 80092c8:	f000 faac 	bl	8009824 <__assert_func>
 80092cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80092d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092d4:	bb35      	cbnz	r5, 8009324 <__d2b+0x7c>
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	d028      	beq.n	800932e <__d2b+0x86>
 80092dc:	4668      	mov	r0, sp
 80092de:	9600      	str	r6, [sp, #0]
 80092e0:	f7ff fd82 	bl	8008de8 <__lo0bits>
 80092e4:	9900      	ldr	r1, [sp, #0]
 80092e6:	b300      	cbz	r0, 800932a <__d2b+0x82>
 80092e8:	9a01      	ldr	r2, [sp, #4]
 80092ea:	f1c0 0320 	rsb	r3, r0, #32
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	430b      	orrs	r3, r1
 80092f4:	40c2      	lsrs	r2, r0
 80092f6:	6163      	str	r3, [r4, #20]
 80092f8:	9201      	str	r2, [sp, #4]
 80092fa:	9b01      	ldr	r3, [sp, #4]
 80092fc:	61a3      	str	r3, [r4, #24]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	bf14      	ite	ne
 8009302:	2202      	movne	r2, #2
 8009304:	2201      	moveq	r2, #1
 8009306:	6122      	str	r2, [r4, #16]
 8009308:	b1d5      	cbz	r5, 8009340 <__d2b+0x98>
 800930a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800930e:	4405      	add	r5, r0
 8009310:	f8c9 5000 	str.w	r5, [r9]
 8009314:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009318:	f8c8 0000 	str.w	r0, [r8]
 800931c:	4620      	mov	r0, r4
 800931e:	b003      	add	sp, #12
 8009320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009328:	e7d5      	b.n	80092d6 <__d2b+0x2e>
 800932a:	6161      	str	r1, [r4, #20]
 800932c:	e7e5      	b.n	80092fa <__d2b+0x52>
 800932e:	a801      	add	r0, sp, #4
 8009330:	f7ff fd5a 	bl	8008de8 <__lo0bits>
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	6163      	str	r3, [r4, #20]
 8009338:	2201      	movs	r2, #1
 800933a:	6122      	str	r2, [r4, #16]
 800933c:	3020      	adds	r0, #32
 800933e:	e7e3      	b.n	8009308 <__d2b+0x60>
 8009340:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009344:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009348:	f8c9 0000 	str.w	r0, [r9]
 800934c:	6918      	ldr	r0, [r3, #16]
 800934e:	f7ff fd2b 	bl	8008da8 <__hi0bits>
 8009352:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009356:	e7df      	b.n	8009318 <__d2b+0x70>
 8009358:	0800ab63 	.word	0x0800ab63
 800935c:	0800ab74 	.word	0x0800ab74

08009360 <_calloc_r>:
 8009360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009362:	fba1 2402 	umull	r2, r4, r1, r2
 8009366:	b94c      	cbnz	r4, 800937c <_calloc_r+0x1c>
 8009368:	4611      	mov	r1, r2
 800936a:	9201      	str	r2, [sp, #4]
 800936c:	f000 f87a 	bl	8009464 <_malloc_r>
 8009370:	9a01      	ldr	r2, [sp, #4]
 8009372:	4605      	mov	r5, r0
 8009374:	b930      	cbnz	r0, 8009384 <_calloc_r+0x24>
 8009376:	4628      	mov	r0, r5
 8009378:	b003      	add	sp, #12
 800937a:	bd30      	pop	{r4, r5, pc}
 800937c:	220c      	movs	r2, #12
 800937e:	6002      	str	r2, [r0, #0]
 8009380:	2500      	movs	r5, #0
 8009382:	e7f8      	b.n	8009376 <_calloc_r+0x16>
 8009384:	4621      	mov	r1, r4
 8009386:	f7fe f90d 	bl	80075a4 <memset>
 800938a:	e7f4      	b.n	8009376 <_calloc_r+0x16>

0800938c <_free_r>:
 800938c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800938e:	2900      	cmp	r1, #0
 8009390:	d044      	beq.n	800941c <_free_r+0x90>
 8009392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009396:	9001      	str	r0, [sp, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	f1a1 0404 	sub.w	r4, r1, #4
 800939e:	bfb8      	it	lt
 80093a0:	18e4      	addlt	r4, r4, r3
 80093a2:	f000 fa9b 	bl	80098dc <__malloc_lock>
 80093a6:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <_free_r+0x94>)
 80093a8:	9801      	ldr	r0, [sp, #4]
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	b933      	cbnz	r3, 80093bc <_free_r+0x30>
 80093ae:	6063      	str	r3, [r4, #4]
 80093b0:	6014      	str	r4, [r2, #0]
 80093b2:	b003      	add	sp, #12
 80093b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093b8:	f000 ba96 	b.w	80098e8 <__malloc_unlock>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d908      	bls.n	80093d2 <_free_r+0x46>
 80093c0:	6825      	ldr	r5, [r4, #0]
 80093c2:	1961      	adds	r1, r4, r5
 80093c4:	428b      	cmp	r3, r1
 80093c6:	bf01      	itttt	eq
 80093c8:	6819      	ldreq	r1, [r3, #0]
 80093ca:	685b      	ldreq	r3, [r3, #4]
 80093cc:	1949      	addeq	r1, r1, r5
 80093ce:	6021      	streq	r1, [r4, #0]
 80093d0:	e7ed      	b.n	80093ae <_free_r+0x22>
 80093d2:	461a      	mov	r2, r3
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	b10b      	cbz	r3, 80093dc <_free_r+0x50>
 80093d8:	42a3      	cmp	r3, r4
 80093da:	d9fa      	bls.n	80093d2 <_free_r+0x46>
 80093dc:	6811      	ldr	r1, [r2, #0]
 80093de:	1855      	adds	r5, r2, r1
 80093e0:	42a5      	cmp	r5, r4
 80093e2:	d10b      	bne.n	80093fc <_free_r+0x70>
 80093e4:	6824      	ldr	r4, [r4, #0]
 80093e6:	4421      	add	r1, r4
 80093e8:	1854      	adds	r4, r2, r1
 80093ea:	42a3      	cmp	r3, r4
 80093ec:	6011      	str	r1, [r2, #0]
 80093ee:	d1e0      	bne.n	80093b2 <_free_r+0x26>
 80093f0:	681c      	ldr	r4, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	6053      	str	r3, [r2, #4]
 80093f6:	4421      	add	r1, r4
 80093f8:	6011      	str	r1, [r2, #0]
 80093fa:	e7da      	b.n	80093b2 <_free_r+0x26>
 80093fc:	d902      	bls.n	8009404 <_free_r+0x78>
 80093fe:	230c      	movs	r3, #12
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	e7d6      	b.n	80093b2 <_free_r+0x26>
 8009404:	6825      	ldr	r5, [r4, #0]
 8009406:	1961      	adds	r1, r4, r5
 8009408:	428b      	cmp	r3, r1
 800940a:	bf04      	itt	eq
 800940c:	6819      	ldreq	r1, [r3, #0]
 800940e:	685b      	ldreq	r3, [r3, #4]
 8009410:	6063      	str	r3, [r4, #4]
 8009412:	bf04      	itt	eq
 8009414:	1949      	addeq	r1, r1, r5
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	6054      	str	r4, [r2, #4]
 800941a:	e7ca      	b.n	80093b2 <_free_r+0x26>
 800941c:	b003      	add	sp, #12
 800941e:	bd30      	pop	{r4, r5, pc}
 8009420:	200004c0 	.word	0x200004c0

08009424 <sbrk_aligned>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	4e0e      	ldr	r6, [pc, #56]	; (8009460 <sbrk_aligned+0x3c>)
 8009428:	460c      	mov	r4, r1
 800942a:	6831      	ldr	r1, [r6, #0]
 800942c:	4605      	mov	r5, r0
 800942e:	b911      	cbnz	r1, 8009436 <sbrk_aligned+0x12>
 8009430:	f000 f9e8 	bl	8009804 <_sbrk_r>
 8009434:	6030      	str	r0, [r6, #0]
 8009436:	4621      	mov	r1, r4
 8009438:	4628      	mov	r0, r5
 800943a:	f000 f9e3 	bl	8009804 <_sbrk_r>
 800943e:	1c43      	adds	r3, r0, #1
 8009440:	d00a      	beq.n	8009458 <sbrk_aligned+0x34>
 8009442:	1cc4      	adds	r4, r0, #3
 8009444:	f024 0403 	bic.w	r4, r4, #3
 8009448:	42a0      	cmp	r0, r4
 800944a:	d007      	beq.n	800945c <sbrk_aligned+0x38>
 800944c:	1a21      	subs	r1, r4, r0
 800944e:	4628      	mov	r0, r5
 8009450:	f000 f9d8 	bl	8009804 <_sbrk_r>
 8009454:	3001      	adds	r0, #1
 8009456:	d101      	bne.n	800945c <sbrk_aligned+0x38>
 8009458:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800945c:	4620      	mov	r0, r4
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	200004c4 	.word	0x200004c4

08009464 <_malloc_r>:
 8009464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009468:	1ccd      	adds	r5, r1, #3
 800946a:	f025 0503 	bic.w	r5, r5, #3
 800946e:	3508      	adds	r5, #8
 8009470:	2d0c      	cmp	r5, #12
 8009472:	bf38      	it	cc
 8009474:	250c      	movcc	r5, #12
 8009476:	2d00      	cmp	r5, #0
 8009478:	4607      	mov	r7, r0
 800947a:	db01      	blt.n	8009480 <_malloc_r+0x1c>
 800947c:	42a9      	cmp	r1, r5
 800947e:	d905      	bls.n	800948c <_malloc_r+0x28>
 8009480:	230c      	movs	r3, #12
 8009482:	603b      	str	r3, [r7, #0]
 8009484:	2600      	movs	r6, #0
 8009486:	4630      	mov	r0, r6
 8009488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948c:	4e2e      	ldr	r6, [pc, #184]	; (8009548 <_malloc_r+0xe4>)
 800948e:	f000 fa25 	bl	80098dc <__malloc_lock>
 8009492:	6833      	ldr	r3, [r6, #0]
 8009494:	461c      	mov	r4, r3
 8009496:	bb34      	cbnz	r4, 80094e6 <_malloc_r+0x82>
 8009498:	4629      	mov	r1, r5
 800949a:	4638      	mov	r0, r7
 800949c:	f7ff ffc2 	bl	8009424 <sbrk_aligned>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	4604      	mov	r4, r0
 80094a4:	d14d      	bne.n	8009542 <_malloc_r+0xde>
 80094a6:	6834      	ldr	r4, [r6, #0]
 80094a8:	4626      	mov	r6, r4
 80094aa:	2e00      	cmp	r6, #0
 80094ac:	d140      	bne.n	8009530 <_malloc_r+0xcc>
 80094ae:	6823      	ldr	r3, [r4, #0]
 80094b0:	4631      	mov	r1, r6
 80094b2:	4638      	mov	r0, r7
 80094b4:	eb04 0803 	add.w	r8, r4, r3
 80094b8:	f000 f9a4 	bl	8009804 <_sbrk_r>
 80094bc:	4580      	cmp	r8, r0
 80094be:	d13a      	bne.n	8009536 <_malloc_r+0xd2>
 80094c0:	6821      	ldr	r1, [r4, #0]
 80094c2:	3503      	adds	r5, #3
 80094c4:	1a6d      	subs	r5, r5, r1
 80094c6:	f025 0503 	bic.w	r5, r5, #3
 80094ca:	3508      	adds	r5, #8
 80094cc:	2d0c      	cmp	r5, #12
 80094ce:	bf38      	it	cc
 80094d0:	250c      	movcc	r5, #12
 80094d2:	4629      	mov	r1, r5
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff ffa5 	bl	8009424 <sbrk_aligned>
 80094da:	3001      	adds	r0, #1
 80094dc:	d02b      	beq.n	8009536 <_malloc_r+0xd2>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	442b      	add	r3, r5
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	e00e      	b.n	8009504 <_malloc_r+0xa0>
 80094e6:	6822      	ldr	r2, [r4, #0]
 80094e8:	1b52      	subs	r2, r2, r5
 80094ea:	d41e      	bmi.n	800952a <_malloc_r+0xc6>
 80094ec:	2a0b      	cmp	r2, #11
 80094ee:	d916      	bls.n	800951e <_malloc_r+0xba>
 80094f0:	1961      	adds	r1, r4, r5
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	6025      	str	r5, [r4, #0]
 80094f6:	bf18      	it	ne
 80094f8:	6059      	strne	r1, [r3, #4]
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	bf08      	it	eq
 80094fe:	6031      	streq	r1, [r6, #0]
 8009500:	5162      	str	r2, [r4, r5]
 8009502:	604b      	str	r3, [r1, #4]
 8009504:	4638      	mov	r0, r7
 8009506:	f104 060b 	add.w	r6, r4, #11
 800950a:	f000 f9ed 	bl	80098e8 <__malloc_unlock>
 800950e:	f026 0607 	bic.w	r6, r6, #7
 8009512:	1d23      	adds	r3, r4, #4
 8009514:	1af2      	subs	r2, r6, r3
 8009516:	d0b6      	beq.n	8009486 <_malloc_r+0x22>
 8009518:	1b9b      	subs	r3, r3, r6
 800951a:	50a3      	str	r3, [r4, r2]
 800951c:	e7b3      	b.n	8009486 <_malloc_r+0x22>
 800951e:	6862      	ldr	r2, [r4, #4]
 8009520:	42a3      	cmp	r3, r4
 8009522:	bf0c      	ite	eq
 8009524:	6032      	streq	r2, [r6, #0]
 8009526:	605a      	strne	r2, [r3, #4]
 8009528:	e7ec      	b.n	8009504 <_malloc_r+0xa0>
 800952a:	4623      	mov	r3, r4
 800952c:	6864      	ldr	r4, [r4, #4]
 800952e:	e7b2      	b.n	8009496 <_malloc_r+0x32>
 8009530:	4634      	mov	r4, r6
 8009532:	6876      	ldr	r6, [r6, #4]
 8009534:	e7b9      	b.n	80094aa <_malloc_r+0x46>
 8009536:	230c      	movs	r3, #12
 8009538:	603b      	str	r3, [r7, #0]
 800953a:	4638      	mov	r0, r7
 800953c:	f000 f9d4 	bl	80098e8 <__malloc_unlock>
 8009540:	e7a1      	b.n	8009486 <_malloc_r+0x22>
 8009542:	6025      	str	r5, [r4, #0]
 8009544:	e7de      	b.n	8009504 <_malloc_r+0xa0>
 8009546:	bf00      	nop
 8009548:	200004c0 	.word	0x200004c0

0800954c <__ssputs_r>:
 800954c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	688e      	ldr	r6, [r1, #8]
 8009552:	429e      	cmp	r6, r3
 8009554:	4682      	mov	sl, r0
 8009556:	460c      	mov	r4, r1
 8009558:	4690      	mov	r8, r2
 800955a:	461f      	mov	r7, r3
 800955c:	d838      	bhi.n	80095d0 <__ssputs_r+0x84>
 800955e:	898a      	ldrh	r2, [r1, #12]
 8009560:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009564:	d032      	beq.n	80095cc <__ssputs_r+0x80>
 8009566:	6825      	ldr	r5, [r4, #0]
 8009568:	6909      	ldr	r1, [r1, #16]
 800956a:	eba5 0901 	sub.w	r9, r5, r1
 800956e:	6965      	ldr	r5, [r4, #20]
 8009570:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009578:	3301      	adds	r3, #1
 800957a:	444b      	add	r3, r9
 800957c:	106d      	asrs	r5, r5, #1
 800957e:	429d      	cmp	r5, r3
 8009580:	bf38      	it	cc
 8009582:	461d      	movcc	r5, r3
 8009584:	0553      	lsls	r3, r2, #21
 8009586:	d531      	bpl.n	80095ec <__ssputs_r+0xa0>
 8009588:	4629      	mov	r1, r5
 800958a:	f7ff ff6b 	bl	8009464 <_malloc_r>
 800958e:	4606      	mov	r6, r0
 8009590:	b950      	cbnz	r0, 80095a8 <__ssputs_r+0x5c>
 8009592:	230c      	movs	r3, #12
 8009594:	f8ca 3000 	str.w	r3, [sl]
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a8:	6921      	ldr	r1, [r4, #16]
 80095aa:	464a      	mov	r2, r9
 80095ac:	f7ff fb46 	bl	8008c3c <memcpy>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	6126      	str	r6, [r4, #16]
 80095be:	6165      	str	r5, [r4, #20]
 80095c0:	444e      	add	r6, r9
 80095c2:	eba5 0509 	sub.w	r5, r5, r9
 80095c6:	6026      	str	r6, [r4, #0]
 80095c8:	60a5      	str	r5, [r4, #8]
 80095ca:	463e      	mov	r6, r7
 80095cc:	42be      	cmp	r6, r7
 80095ce:	d900      	bls.n	80095d2 <__ssputs_r+0x86>
 80095d0:	463e      	mov	r6, r7
 80095d2:	6820      	ldr	r0, [r4, #0]
 80095d4:	4632      	mov	r2, r6
 80095d6:	4641      	mov	r1, r8
 80095d8:	f000 f966 	bl	80098a8 <memmove>
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	1b9b      	subs	r3, r3, r6
 80095e0:	60a3      	str	r3, [r4, #8]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	4433      	add	r3, r6
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7db      	b.n	80095a4 <__ssputs_r+0x58>
 80095ec:	462a      	mov	r2, r5
 80095ee:	f000 f981 	bl	80098f4 <_realloc_r>
 80095f2:	4606      	mov	r6, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1e1      	bne.n	80095bc <__ssputs_r+0x70>
 80095f8:	6921      	ldr	r1, [r4, #16]
 80095fa:	4650      	mov	r0, sl
 80095fc:	f7ff fec6 	bl	800938c <_free_r>
 8009600:	e7c7      	b.n	8009592 <__ssputs_r+0x46>
	...

08009604 <_svfiprintf_r>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	4698      	mov	r8, r3
 800960a:	898b      	ldrh	r3, [r1, #12]
 800960c:	061b      	lsls	r3, r3, #24
 800960e:	b09d      	sub	sp, #116	; 0x74
 8009610:	4607      	mov	r7, r0
 8009612:	460d      	mov	r5, r1
 8009614:	4614      	mov	r4, r2
 8009616:	d50e      	bpl.n	8009636 <_svfiprintf_r+0x32>
 8009618:	690b      	ldr	r3, [r1, #16]
 800961a:	b963      	cbnz	r3, 8009636 <_svfiprintf_r+0x32>
 800961c:	2140      	movs	r1, #64	; 0x40
 800961e:	f7ff ff21 	bl	8009464 <_malloc_r>
 8009622:	6028      	str	r0, [r5, #0]
 8009624:	6128      	str	r0, [r5, #16]
 8009626:	b920      	cbnz	r0, 8009632 <_svfiprintf_r+0x2e>
 8009628:	230c      	movs	r3, #12
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009630:	e0d1      	b.n	80097d6 <_svfiprintf_r+0x1d2>
 8009632:	2340      	movs	r3, #64	; 0x40
 8009634:	616b      	str	r3, [r5, #20]
 8009636:	2300      	movs	r3, #0
 8009638:	9309      	str	r3, [sp, #36]	; 0x24
 800963a:	2320      	movs	r3, #32
 800963c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009640:	f8cd 800c 	str.w	r8, [sp, #12]
 8009644:	2330      	movs	r3, #48	; 0x30
 8009646:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80097f0 <_svfiprintf_r+0x1ec>
 800964a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800964e:	f04f 0901 	mov.w	r9, #1
 8009652:	4623      	mov	r3, r4
 8009654:	469a      	mov	sl, r3
 8009656:	f813 2b01 	ldrb.w	r2, [r3], #1
 800965a:	b10a      	cbz	r2, 8009660 <_svfiprintf_r+0x5c>
 800965c:	2a25      	cmp	r2, #37	; 0x25
 800965e:	d1f9      	bne.n	8009654 <_svfiprintf_r+0x50>
 8009660:	ebba 0b04 	subs.w	fp, sl, r4
 8009664:	d00b      	beq.n	800967e <_svfiprintf_r+0x7a>
 8009666:	465b      	mov	r3, fp
 8009668:	4622      	mov	r2, r4
 800966a:	4629      	mov	r1, r5
 800966c:	4638      	mov	r0, r7
 800966e:	f7ff ff6d 	bl	800954c <__ssputs_r>
 8009672:	3001      	adds	r0, #1
 8009674:	f000 80aa 	beq.w	80097cc <_svfiprintf_r+0x1c8>
 8009678:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800967a:	445a      	add	r2, fp
 800967c:	9209      	str	r2, [sp, #36]	; 0x24
 800967e:	f89a 3000 	ldrb.w	r3, [sl]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80a2 	beq.w	80097cc <_svfiprintf_r+0x1c8>
 8009688:	2300      	movs	r3, #0
 800968a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800968e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009692:	f10a 0a01 	add.w	sl, sl, #1
 8009696:	9304      	str	r3, [sp, #16]
 8009698:	9307      	str	r3, [sp, #28]
 800969a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800969e:	931a      	str	r3, [sp, #104]	; 0x68
 80096a0:	4654      	mov	r4, sl
 80096a2:	2205      	movs	r2, #5
 80096a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a8:	4851      	ldr	r0, [pc, #324]	; (80097f0 <_svfiprintf_r+0x1ec>)
 80096aa:	f7f6 fda1 	bl	80001f0 <memchr>
 80096ae:	9a04      	ldr	r2, [sp, #16]
 80096b0:	b9d8      	cbnz	r0, 80096ea <_svfiprintf_r+0xe6>
 80096b2:	06d0      	lsls	r0, r2, #27
 80096b4:	bf44      	itt	mi
 80096b6:	2320      	movmi	r3, #32
 80096b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096bc:	0711      	lsls	r1, r2, #28
 80096be:	bf44      	itt	mi
 80096c0:	232b      	movmi	r3, #43	; 0x2b
 80096c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c6:	f89a 3000 	ldrb.w	r3, [sl]
 80096ca:	2b2a      	cmp	r3, #42	; 0x2a
 80096cc:	d015      	beq.n	80096fa <_svfiprintf_r+0xf6>
 80096ce:	9a07      	ldr	r2, [sp, #28]
 80096d0:	4654      	mov	r4, sl
 80096d2:	2000      	movs	r0, #0
 80096d4:	f04f 0c0a 	mov.w	ip, #10
 80096d8:	4621      	mov	r1, r4
 80096da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096de:	3b30      	subs	r3, #48	; 0x30
 80096e0:	2b09      	cmp	r3, #9
 80096e2:	d94e      	bls.n	8009782 <_svfiprintf_r+0x17e>
 80096e4:	b1b0      	cbz	r0, 8009714 <_svfiprintf_r+0x110>
 80096e6:	9207      	str	r2, [sp, #28]
 80096e8:	e014      	b.n	8009714 <_svfiprintf_r+0x110>
 80096ea:	eba0 0308 	sub.w	r3, r0, r8
 80096ee:	fa09 f303 	lsl.w	r3, r9, r3
 80096f2:	4313      	orrs	r3, r2
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	46a2      	mov	sl, r4
 80096f8:	e7d2      	b.n	80096a0 <_svfiprintf_r+0x9c>
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	1d19      	adds	r1, r3, #4
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	9103      	str	r1, [sp, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	bfbb      	ittet	lt
 8009706:	425b      	neglt	r3, r3
 8009708:	f042 0202 	orrlt.w	r2, r2, #2
 800970c:	9307      	strge	r3, [sp, #28]
 800970e:	9307      	strlt	r3, [sp, #28]
 8009710:	bfb8      	it	lt
 8009712:	9204      	strlt	r2, [sp, #16]
 8009714:	7823      	ldrb	r3, [r4, #0]
 8009716:	2b2e      	cmp	r3, #46	; 0x2e
 8009718:	d10c      	bne.n	8009734 <_svfiprintf_r+0x130>
 800971a:	7863      	ldrb	r3, [r4, #1]
 800971c:	2b2a      	cmp	r3, #42	; 0x2a
 800971e:	d135      	bne.n	800978c <_svfiprintf_r+0x188>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	1d1a      	adds	r2, r3, #4
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	9203      	str	r2, [sp, #12]
 8009728:	2b00      	cmp	r3, #0
 800972a:	bfb8      	it	lt
 800972c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009730:	3402      	adds	r4, #2
 8009732:	9305      	str	r3, [sp, #20]
 8009734:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009800 <_svfiprintf_r+0x1fc>
 8009738:	7821      	ldrb	r1, [r4, #0]
 800973a:	2203      	movs	r2, #3
 800973c:	4650      	mov	r0, sl
 800973e:	f7f6 fd57 	bl	80001f0 <memchr>
 8009742:	b140      	cbz	r0, 8009756 <_svfiprintf_r+0x152>
 8009744:	2340      	movs	r3, #64	; 0x40
 8009746:	eba0 000a 	sub.w	r0, r0, sl
 800974a:	fa03 f000 	lsl.w	r0, r3, r0
 800974e:	9b04      	ldr	r3, [sp, #16]
 8009750:	4303      	orrs	r3, r0
 8009752:	3401      	adds	r4, #1
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975a:	4826      	ldr	r0, [pc, #152]	; (80097f4 <_svfiprintf_r+0x1f0>)
 800975c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009760:	2206      	movs	r2, #6
 8009762:	f7f6 fd45 	bl	80001f0 <memchr>
 8009766:	2800      	cmp	r0, #0
 8009768:	d038      	beq.n	80097dc <_svfiprintf_r+0x1d8>
 800976a:	4b23      	ldr	r3, [pc, #140]	; (80097f8 <_svfiprintf_r+0x1f4>)
 800976c:	bb1b      	cbnz	r3, 80097b6 <_svfiprintf_r+0x1b2>
 800976e:	9b03      	ldr	r3, [sp, #12]
 8009770:	3307      	adds	r3, #7
 8009772:	f023 0307 	bic.w	r3, r3, #7
 8009776:	3308      	adds	r3, #8
 8009778:	9303      	str	r3, [sp, #12]
 800977a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977c:	4433      	add	r3, r6
 800977e:	9309      	str	r3, [sp, #36]	; 0x24
 8009780:	e767      	b.n	8009652 <_svfiprintf_r+0x4e>
 8009782:	fb0c 3202 	mla	r2, ip, r2, r3
 8009786:	460c      	mov	r4, r1
 8009788:	2001      	movs	r0, #1
 800978a:	e7a5      	b.n	80096d8 <_svfiprintf_r+0xd4>
 800978c:	2300      	movs	r3, #0
 800978e:	3401      	adds	r4, #1
 8009790:	9305      	str	r3, [sp, #20]
 8009792:	4619      	mov	r1, r3
 8009794:	f04f 0c0a 	mov.w	ip, #10
 8009798:	4620      	mov	r0, r4
 800979a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979e:	3a30      	subs	r2, #48	; 0x30
 80097a0:	2a09      	cmp	r2, #9
 80097a2:	d903      	bls.n	80097ac <_svfiprintf_r+0x1a8>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0c5      	beq.n	8009734 <_svfiprintf_r+0x130>
 80097a8:	9105      	str	r1, [sp, #20]
 80097aa:	e7c3      	b.n	8009734 <_svfiprintf_r+0x130>
 80097ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80097b0:	4604      	mov	r4, r0
 80097b2:	2301      	movs	r3, #1
 80097b4:	e7f0      	b.n	8009798 <_svfiprintf_r+0x194>
 80097b6:	ab03      	add	r3, sp, #12
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	462a      	mov	r2, r5
 80097bc:	4b0f      	ldr	r3, [pc, #60]	; (80097fc <_svfiprintf_r+0x1f8>)
 80097be:	a904      	add	r1, sp, #16
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7fd ff97 	bl	80076f4 <_printf_float>
 80097c6:	1c42      	adds	r2, r0, #1
 80097c8:	4606      	mov	r6, r0
 80097ca:	d1d6      	bne.n	800977a <_svfiprintf_r+0x176>
 80097cc:	89ab      	ldrh	r3, [r5, #12]
 80097ce:	065b      	lsls	r3, r3, #25
 80097d0:	f53f af2c 	bmi.w	800962c <_svfiprintf_r+0x28>
 80097d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097d6:	b01d      	add	sp, #116	; 0x74
 80097d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097dc:	ab03      	add	r3, sp, #12
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	462a      	mov	r2, r5
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <_svfiprintf_r+0x1f8>)
 80097e4:	a904      	add	r1, sp, #16
 80097e6:	4638      	mov	r0, r7
 80097e8:	f7fe fa28 	bl	8007c3c <_printf_i>
 80097ec:	e7eb      	b.n	80097c6 <_svfiprintf_r+0x1c2>
 80097ee:	bf00      	nop
 80097f0:	0800accc 	.word	0x0800accc
 80097f4:	0800acd6 	.word	0x0800acd6
 80097f8:	080076f5 	.word	0x080076f5
 80097fc:	0800954d 	.word	0x0800954d
 8009800:	0800acd2 	.word	0x0800acd2

08009804 <_sbrk_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d06      	ldr	r5, [pc, #24]	; (8009820 <_sbrk_r+0x1c>)
 8009808:	2300      	movs	r3, #0
 800980a:	4604      	mov	r4, r0
 800980c:	4608      	mov	r0, r1
 800980e:	602b      	str	r3, [r5, #0]
 8009810:	f7fa f854 	bl	80038bc <_sbrk>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_sbrk_r+0x1a>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_sbrk_r+0x1a>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	200004c8 	.word	0x200004c8

08009824 <__assert_func>:
 8009824:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009826:	4614      	mov	r4, r2
 8009828:	461a      	mov	r2, r3
 800982a:	4b09      	ldr	r3, [pc, #36]	; (8009850 <__assert_func+0x2c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4605      	mov	r5, r0
 8009830:	68d8      	ldr	r0, [r3, #12]
 8009832:	b14c      	cbz	r4, 8009848 <__assert_func+0x24>
 8009834:	4b07      	ldr	r3, [pc, #28]	; (8009854 <__assert_func+0x30>)
 8009836:	9100      	str	r1, [sp, #0]
 8009838:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800983c:	4906      	ldr	r1, [pc, #24]	; (8009858 <__assert_func+0x34>)
 800983e:	462b      	mov	r3, r5
 8009840:	f000 f80e 	bl	8009860 <fiprintf>
 8009844:	f000 faac 	bl	8009da0 <abort>
 8009848:	4b04      	ldr	r3, [pc, #16]	; (800985c <__assert_func+0x38>)
 800984a:	461c      	mov	r4, r3
 800984c:	e7f3      	b.n	8009836 <__assert_func+0x12>
 800984e:	bf00      	nop
 8009850:	2000000c 	.word	0x2000000c
 8009854:	0800acdd 	.word	0x0800acdd
 8009858:	0800acea 	.word	0x0800acea
 800985c:	0800ad18 	.word	0x0800ad18

08009860 <fiprintf>:
 8009860:	b40e      	push	{r1, r2, r3}
 8009862:	b503      	push	{r0, r1, lr}
 8009864:	4601      	mov	r1, r0
 8009866:	ab03      	add	r3, sp, #12
 8009868:	4805      	ldr	r0, [pc, #20]	; (8009880 <fiprintf+0x20>)
 800986a:	f853 2b04 	ldr.w	r2, [r3], #4
 800986e:	6800      	ldr	r0, [r0, #0]
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	f000 f897 	bl	80099a4 <_vfiprintf_r>
 8009876:	b002      	add	sp, #8
 8009878:	f85d eb04 	ldr.w	lr, [sp], #4
 800987c:	b003      	add	sp, #12
 800987e:	4770      	bx	lr
 8009880:	2000000c 	.word	0x2000000c

08009884 <__ascii_mbtowc>:
 8009884:	b082      	sub	sp, #8
 8009886:	b901      	cbnz	r1, 800988a <__ascii_mbtowc+0x6>
 8009888:	a901      	add	r1, sp, #4
 800988a:	b142      	cbz	r2, 800989e <__ascii_mbtowc+0x1a>
 800988c:	b14b      	cbz	r3, 80098a2 <__ascii_mbtowc+0x1e>
 800988e:	7813      	ldrb	r3, [r2, #0]
 8009890:	600b      	str	r3, [r1, #0]
 8009892:	7812      	ldrb	r2, [r2, #0]
 8009894:	1e10      	subs	r0, r2, #0
 8009896:	bf18      	it	ne
 8009898:	2001      	movne	r0, #1
 800989a:	b002      	add	sp, #8
 800989c:	4770      	bx	lr
 800989e:	4610      	mov	r0, r2
 80098a0:	e7fb      	b.n	800989a <__ascii_mbtowc+0x16>
 80098a2:	f06f 0001 	mvn.w	r0, #1
 80098a6:	e7f8      	b.n	800989a <__ascii_mbtowc+0x16>

080098a8 <memmove>:
 80098a8:	4288      	cmp	r0, r1
 80098aa:	b510      	push	{r4, lr}
 80098ac:	eb01 0402 	add.w	r4, r1, r2
 80098b0:	d902      	bls.n	80098b8 <memmove+0x10>
 80098b2:	4284      	cmp	r4, r0
 80098b4:	4623      	mov	r3, r4
 80098b6:	d807      	bhi.n	80098c8 <memmove+0x20>
 80098b8:	1e43      	subs	r3, r0, #1
 80098ba:	42a1      	cmp	r1, r4
 80098bc:	d008      	beq.n	80098d0 <memmove+0x28>
 80098be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80098c6:	e7f8      	b.n	80098ba <memmove+0x12>
 80098c8:	4402      	add	r2, r0
 80098ca:	4601      	mov	r1, r0
 80098cc:	428a      	cmp	r2, r1
 80098ce:	d100      	bne.n	80098d2 <memmove+0x2a>
 80098d0:	bd10      	pop	{r4, pc}
 80098d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80098d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80098da:	e7f7      	b.n	80098cc <memmove+0x24>

080098dc <__malloc_lock>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__malloc_lock+0x8>)
 80098de:	f000 bc1f 	b.w	800a120 <__retarget_lock_acquire_recursive>
 80098e2:	bf00      	nop
 80098e4:	200004cc 	.word	0x200004cc

080098e8 <__malloc_unlock>:
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <__malloc_unlock+0x8>)
 80098ea:	f000 bc1a 	b.w	800a122 <__retarget_lock_release_recursive>
 80098ee:	bf00      	nop
 80098f0:	200004cc 	.word	0x200004cc

080098f4 <_realloc_r>:
 80098f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	4680      	mov	r8, r0
 80098fa:	4614      	mov	r4, r2
 80098fc:	460e      	mov	r6, r1
 80098fe:	b921      	cbnz	r1, 800990a <_realloc_r+0x16>
 8009900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009904:	4611      	mov	r1, r2
 8009906:	f7ff bdad 	b.w	8009464 <_malloc_r>
 800990a:	b92a      	cbnz	r2, 8009918 <_realloc_r+0x24>
 800990c:	f7ff fd3e 	bl	800938c <_free_r>
 8009910:	4625      	mov	r5, r4
 8009912:	4628      	mov	r0, r5
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	f000 fc6a 	bl	800a1f0 <_malloc_usable_size_r>
 800991c:	4284      	cmp	r4, r0
 800991e:	4607      	mov	r7, r0
 8009920:	d802      	bhi.n	8009928 <_realloc_r+0x34>
 8009922:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009926:	d812      	bhi.n	800994e <_realloc_r+0x5a>
 8009928:	4621      	mov	r1, r4
 800992a:	4640      	mov	r0, r8
 800992c:	f7ff fd9a 	bl	8009464 <_malloc_r>
 8009930:	4605      	mov	r5, r0
 8009932:	2800      	cmp	r0, #0
 8009934:	d0ed      	beq.n	8009912 <_realloc_r+0x1e>
 8009936:	42bc      	cmp	r4, r7
 8009938:	4622      	mov	r2, r4
 800993a:	4631      	mov	r1, r6
 800993c:	bf28      	it	cs
 800993e:	463a      	movcs	r2, r7
 8009940:	f7ff f97c 	bl	8008c3c <memcpy>
 8009944:	4631      	mov	r1, r6
 8009946:	4640      	mov	r0, r8
 8009948:	f7ff fd20 	bl	800938c <_free_r>
 800994c:	e7e1      	b.n	8009912 <_realloc_r+0x1e>
 800994e:	4635      	mov	r5, r6
 8009950:	e7df      	b.n	8009912 <_realloc_r+0x1e>

08009952 <__sfputc_r>:
 8009952:	6893      	ldr	r3, [r2, #8]
 8009954:	3b01      	subs	r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	b410      	push	{r4}
 800995a:	6093      	str	r3, [r2, #8]
 800995c:	da08      	bge.n	8009970 <__sfputc_r+0x1e>
 800995e:	6994      	ldr	r4, [r2, #24]
 8009960:	42a3      	cmp	r3, r4
 8009962:	db01      	blt.n	8009968 <__sfputc_r+0x16>
 8009964:	290a      	cmp	r1, #10
 8009966:	d103      	bne.n	8009970 <__sfputc_r+0x1e>
 8009968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800996c:	f000 b94a 	b.w	8009c04 <__swbuf_r>
 8009970:	6813      	ldr	r3, [r2, #0]
 8009972:	1c58      	adds	r0, r3, #1
 8009974:	6010      	str	r0, [r2, #0]
 8009976:	7019      	strb	r1, [r3, #0]
 8009978:	4608      	mov	r0, r1
 800997a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800997e:	4770      	bx	lr

08009980 <__sfputs_r>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	4606      	mov	r6, r0
 8009984:	460f      	mov	r7, r1
 8009986:	4614      	mov	r4, r2
 8009988:	18d5      	adds	r5, r2, r3
 800998a:	42ac      	cmp	r4, r5
 800998c:	d101      	bne.n	8009992 <__sfputs_r+0x12>
 800998e:	2000      	movs	r0, #0
 8009990:	e007      	b.n	80099a2 <__sfputs_r+0x22>
 8009992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009996:	463a      	mov	r2, r7
 8009998:	4630      	mov	r0, r6
 800999a:	f7ff ffda 	bl	8009952 <__sfputc_r>
 800999e:	1c43      	adds	r3, r0, #1
 80099a0:	d1f3      	bne.n	800998a <__sfputs_r+0xa>
 80099a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099a4 <_vfiprintf_r>:
 80099a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	460d      	mov	r5, r1
 80099aa:	b09d      	sub	sp, #116	; 0x74
 80099ac:	4614      	mov	r4, r2
 80099ae:	4698      	mov	r8, r3
 80099b0:	4606      	mov	r6, r0
 80099b2:	b118      	cbz	r0, 80099bc <_vfiprintf_r+0x18>
 80099b4:	6983      	ldr	r3, [r0, #24]
 80099b6:	b90b      	cbnz	r3, 80099bc <_vfiprintf_r+0x18>
 80099b8:	f000 fb14 	bl	8009fe4 <__sinit>
 80099bc:	4b89      	ldr	r3, [pc, #548]	; (8009be4 <_vfiprintf_r+0x240>)
 80099be:	429d      	cmp	r5, r3
 80099c0:	d11b      	bne.n	80099fa <_vfiprintf_r+0x56>
 80099c2:	6875      	ldr	r5, [r6, #4]
 80099c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c6:	07d9      	lsls	r1, r3, #31
 80099c8:	d405      	bmi.n	80099d6 <_vfiprintf_r+0x32>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	059a      	lsls	r2, r3, #22
 80099ce:	d402      	bmi.n	80099d6 <_vfiprintf_r+0x32>
 80099d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099d2:	f000 fba5 	bl	800a120 <__retarget_lock_acquire_recursive>
 80099d6:	89ab      	ldrh	r3, [r5, #12]
 80099d8:	071b      	lsls	r3, r3, #28
 80099da:	d501      	bpl.n	80099e0 <_vfiprintf_r+0x3c>
 80099dc:	692b      	ldr	r3, [r5, #16]
 80099de:	b9eb      	cbnz	r3, 8009a1c <_vfiprintf_r+0x78>
 80099e0:	4629      	mov	r1, r5
 80099e2:	4630      	mov	r0, r6
 80099e4:	f000 f96e 	bl	8009cc4 <__swsetup_r>
 80099e8:	b1c0      	cbz	r0, 8009a1c <_vfiprintf_r+0x78>
 80099ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099ec:	07dc      	lsls	r4, r3, #31
 80099ee:	d50e      	bpl.n	8009a0e <_vfiprintf_r+0x6a>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099f4:	b01d      	add	sp, #116	; 0x74
 80099f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fa:	4b7b      	ldr	r3, [pc, #492]	; (8009be8 <_vfiprintf_r+0x244>)
 80099fc:	429d      	cmp	r5, r3
 80099fe:	d101      	bne.n	8009a04 <_vfiprintf_r+0x60>
 8009a00:	68b5      	ldr	r5, [r6, #8]
 8009a02:	e7df      	b.n	80099c4 <_vfiprintf_r+0x20>
 8009a04:	4b79      	ldr	r3, [pc, #484]	; (8009bec <_vfiprintf_r+0x248>)
 8009a06:	429d      	cmp	r5, r3
 8009a08:	bf08      	it	eq
 8009a0a:	68f5      	ldreq	r5, [r6, #12]
 8009a0c:	e7da      	b.n	80099c4 <_vfiprintf_r+0x20>
 8009a0e:	89ab      	ldrh	r3, [r5, #12]
 8009a10:	0598      	lsls	r0, r3, #22
 8009a12:	d4ed      	bmi.n	80099f0 <_vfiprintf_r+0x4c>
 8009a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a16:	f000 fb84 	bl	800a122 <__retarget_lock_release_recursive>
 8009a1a:	e7e9      	b.n	80099f0 <_vfiprintf_r+0x4c>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a20:	2320      	movs	r3, #32
 8009a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a2a:	2330      	movs	r3, #48	; 0x30
 8009a2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009bf0 <_vfiprintf_r+0x24c>
 8009a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a34:	f04f 0901 	mov.w	r9, #1
 8009a38:	4623      	mov	r3, r4
 8009a3a:	469a      	mov	sl, r3
 8009a3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a40:	b10a      	cbz	r2, 8009a46 <_vfiprintf_r+0xa2>
 8009a42:	2a25      	cmp	r2, #37	; 0x25
 8009a44:	d1f9      	bne.n	8009a3a <_vfiprintf_r+0x96>
 8009a46:	ebba 0b04 	subs.w	fp, sl, r4
 8009a4a:	d00b      	beq.n	8009a64 <_vfiprintf_r+0xc0>
 8009a4c:	465b      	mov	r3, fp
 8009a4e:	4622      	mov	r2, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	4630      	mov	r0, r6
 8009a54:	f7ff ff94 	bl	8009980 <__sfputs_r>
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f000 80aa 	beq.w	8009bb2 <_vfiprintf_r+0x20e>
 8009a5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a60:	445a      	add	r2, fp
 8009a62:	9209      	str	r2, [sp, #36]	; 0x24
 8009a64:	f89a 3000 	ldrb.w	r3, [sl]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 80a2 	beq.w	8009bb2 <_vfiprintf_r+0x20e>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a78:	f10a 0a01 	add.w	sl, sl, #1
 8009a7c:	9304      	str	r3, [sp, #16]
 8009a7e:	9307      	str	r3, [sp, #28]
 8009a80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a84:	931a      	str	r3, [sp, #104]	; 0x68
 8009a86:	4654      	mov	r4, sl
 8009a88:	2205      	movs	r2, #5
 8009a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8e:	4858      	ldr	r0, [pc, #352]	; (8009bf0 <_vfiprintf_r+0x24c>)
 8009a90:	f7f6 fbae 	bl	80001f0 <memchr>
 8009a94:	9a04      	ldr	r2, [sp, #16]
 8009a96:	b9d8      	cbnz	r0, 8009ad0 <_vfiprintf_r+0x12c>
 8009a98:	06d1      	lsls	r1, r2, #27
 8009a9a:	bf44      	itt	mi
 8009a9c:	2320      	movmi	r3, #32
 8009a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa2:	0713      	lsls	r3, r2, #28
 8009aa4:	bf44      	itt	mi
 8009aa6:	232b      	movmi	r3, #43	; 0x2b
 8009aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aac:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ab2:	d015      	beq.n	8009ae0 <_vfiprintf_r+0x13c>
 8009ab4:	9a07      	ldr	r2, [sp, #28]
 8009ab6:	4654      	mov	r4, sl
 8009ab8:	2000      	movs	r0, #0
 8009aba:	f04f 0c0a 	mov.w	ip, #10
 8009abe:	4621      	mov	r1, r4
 8009ac0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ac4:	3b30      	subs	r3, #48	; 0x30
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	d94e      	bls.n	8009b68 <_vfiprintf_r+0x1c4>
 8009aca:	b1b0      	cbz	r0, 8009afa <_vfiprintf_r+0x156>
 8009acc:	9207      	str	r2, [sp, #28]
 8009ace:	e014      	b.n	8009afa <_vfiprintf_r+0x156>
 8009ad0:	eba0 0308 	sub.w	r3, r0, r8
 8009ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	46a2      	mov	sl, r4
 8009ade:	e7d2      	b.n	8009a86 <_vfiprintf_r+0xe2>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	1d19      	adds	r1, r3, #4
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	9103      	str	r1, [sp, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bfbb      	ittet	lt
 8009aec:	425b      	neglt	r3, r3
 8009aee:	f042 0202 	orrlt.w	r2, r2, #2
 8009af2:	9307      	strge	r3, [sp, #28]
 8009af4:	9307      	strlt	r3, [sp, #28]
 8009af6:	bfb8      	it	lt
 8009af8:	9204      	strlt	r2, [sp, #16]
 8009afa:	7823      	ldrb	r3, [r4, #0]
 8009afc:	2b2e      	cmp	r3, #46	; 0x2e
 8009afe:	d10c      	bne.n	8009b1a <_vfiprintf_r+0x176>
 8009b00:	7863      	ldrb	r3, [r4, #1]
 8009b02:	2b2a      	cmp	r3, #42	; 0x2a
 8009b04:	d135      	bne.n	8009b72 <_vfiprintf_r+0x1ce>
 8009b06:	9b03      	ldr	r3, [sp, #12]
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	9203      	str	r2, [sp, #12]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	bfb8      	it	lt
 8009b12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b16:	3402      	adds	r4, #2
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c00 <_vfiprintf_r+0x25c>
 8009b1e:	7821      	ldrb	r1, [r4, #0]
 8009b20:	2203      	movs	r2, #3
 8009b22:	4650      	mov	r0, sl
 8009b24:	f7f6 fb64 	bl	80001f0 <memchr>
 8009b28:	b140      	cbz	r0, 8009b3c <_vfiprintf_r+0x198>
 8009b2a:	2340      	movs	r3, #64	; 0x40
 8009b2c:	eba0 000a 	sub.w	r0, r0, sl
 8009b30:	fa03 f000 	lsl.w	r0, r3, r0
 8009b34:	9b04      	ldr	r3, [sp, #16]
 8009b36:	4303      	orrs	r3, r0
 8009b38:	3401      	adds	r4, #1
 8009b3a:	9304      	str	r3, [sp, #16]
 8009b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b40:	482c      	ldr	r0, [pc, #176]	; (8009bf4 <_vfiprintf_r+0x250>)
 8009b42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b46:	2206      	movs	r2, #6
 8009b48:	f7f6 fb52 	bl	80001f0 <memchr>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d03f      	beq.n	8009bd0 <_vfiprintf_r+0x22c>
 8009b50:	4b29      	ldr	r3, [pc, #164]	; (8009bf8 <_vfiprintf_r+0x254>)
 8009b52:	bb1b      	cbnz	r3, 8009b9c <_vfiprintf_r+0x1f8>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	3307      	adds	r3, #7
 8009b58:	f023 0307 	bic.w	r3, r3, #7
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	9303      	str	r3, [sp, #12]
 8009b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b62:	443b      	add	r3, r7
 8009b64:	9309      	str	r3, [sp, #36]	; 0x24
 8009b66:	e767      	b.n	8009a38 <_vfiprintf_r+0x94>
 8009b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b6c:	460c      	mov	r4, r1
 8009b6e:	2001      	movs	r0, #1
 8009b70:	e7a5      	b.n	8009abe <_vfiprintf_r+0x11a>
 8009b72:	2300      	movs	r3, #0
 8009b74:	3401      	adds	r4, #1
 8009b76:	9305      	str	r3, [sp, #20]
 8009b78:	4619      	mov	r1, r3
 8009b7a:	f04f 0c0a 	mov.w	ip, #10
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b84:	3a30      	subs	r2, #48	; 0x30
 8009b86:	2a09      	cmp	r2, #9
 8009b88:	d903      	bls.n	8009b92 <_vfiprintf_r+0x1ee>
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0c5      	beq.n	8009b1a <_vfiprintf_r+0x176>
 8009b8e:	9105      	str	r1, [sp, #20]
 8009b90:	e7c3      	b.n	8009b1a <_vfiprintf_r+0x176>
 8009b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b96:	4604      	mov	r4, r0
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e7f0      	b.n	8009b7e <_vfiprintf_r+0x1da>
 8009b9c:	ab03      	add	r3, sp, #12
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	462a      	mov	r2, r5
 8009ba2:	4b16      	ldr	r3, [pc, #88]	; (8009bfc <_vfiprintf_r+0x258>)
 8009ba4:	a904      	add	r1, sp, #16
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7fd fda4 	bl	80076f4 <_printf_float>
 8009bac:	4607      	mov	r7, r0
 8009bae:	1c78      	adds	r0, r7, #1
 8009bb0:	d1d6      	bne.n	8009b60 <_vfiprintf_r+0x1bc>
 8009bb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bb4:	07d9      	lsls	r1, r3, #31
 8009bb6:	d405      	bmi.n	8009bc4 <_vfiprintf_r+0x220>
 8009bb8:	89ab      	ldrh	r3, [r5, #12]
 8009bba:	059a      	lsls	r2, r3, #22
 8009bbc:	d402      	bmi.n	8009bc4 <_vfiprintf_r+0x220>
 8009bbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bc0:	f000 faaf 	bl	800a122 <__retarget_lock_release_recursive>
 8009bc4:	89ab      	ldrh	r3, [r5, #12]
 8009bc6:	065b      	lsls	r3, r3, #25
 8009bc8:	f53f af12 	bmi.w	80099f0 <_vfiprintf_r+0x4c>
 8009bcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bce:	e711      	b.n	80099f4 <_vfiprintf_r+0x50>
 8009bd0:	ab03      	add	r3, sp, #12
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <_vfiprintf_r+0x258>)
 8009bd8:	a904      	add	r1, sp, #16
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7fe f82e 	bl	8007c3c <_printf_i>
 8009be0:	e7e4      	b.n	8009bac <_vfiprintf_r+0x208>
 8009be2:	bf00      	nop
 8009be4:	0800ae44 	.word	0x0800ae44
 8009be8:	0800ae64 	.word	0x0800ae64
 8009bec:	0800ae24 	.word	0x0800ae24
 8009bf0:	0800accc 	.word	0x0800accc
 8009bf4:	0800acd6 	.word	0x0800acd6
 8009bf8:	080076f5 	.word	0x080076f5
 8009bfc:	08009981 	.word	0x08009981
 8009c00:	0800acd2 	.word	0x0800acd2

08009c04 <__swbuf_r>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	460e      	mov	r6, r1
 8009c08:	4614      	mov	r4, r2
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	b118      	cbz	r0, 8009c16 <__swbuf_r+0x12>
 8009c0e:	6983      	ldr	r3, [r0, #24]
 8009c10:	b90b      	cbnz	r3, 8009c16 <__swbuf_r+0x12>
 8009c12:	f000 f9e7 	bl	8009fe4 <__sinit>
 8009c16:	4b21      	ldr	r3, [pc, #132]	; (8009c9c <__swbuf_r+0x98>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	d12b      	bne.n	8009c74 <__swbuf_r+0x70>
 8009c1c:	686c      	ldr	r4, [r5, #4]
 8009c1e:	69a3      	ldr	r3, [r4, #24]
 8009c20:	60a3      	str	r3, [r4, #8]
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	071a      	lsls	r2, r3, #28
 8009c26:	d52f      	bpl.n	8009c88 <__swbuf_r+0x84>
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	b36b      	cbz	r3, 8009c88 <__swbuf_r+0x84>
 8009c2c:	6923      	ldr	r3, [r4, #16]
 8009c2e:	6820      	ldr	r0, [r4, #0]
 8009c30:	1ac0      	subs	r0, r0, r3
 8009c32:	6963      	ldr	r3, [r4, #20]
 8009c34:	b2f6      	uxtb	r6, r6
 8009c36:	4283      	cmp	r3, r0
 8009c38:	4637      	mov	r7, r6
 8009c3a:	dc04      	bgt.n	8009c46 <__swbuf_r+0x42>
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	f000 f93c 	bl	8009ebc <_fflush_r>
 8009c44:	bb30      	cbnz	r0, 8009c94 <__swbuf_r+0x90>
 8009c46:	68a3      	ldr	r3, [r4, #8]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	60a3      	str	r3, [r4, #8]
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	6022      	str	r2, [r4, #0]
 8009c52:	701e      	strb	r6, [r3, #0]
 8009c54:	6963      	ldr	r3, [r4, #20]
 8009c56:	3001      	adds	r0, #1
 8009c58:	4283      	cmp	r3, r0
 8009c5a:	d004      	beq.n	8009c66 <__swbuf_r+0x62>
 8009c5c:	89a3      	ldrh	r3, [r4, #12]
 8009c5e:	07db      	lsls	r3, r3, #31
 8009c60:	d506      	bpl.n	8009c70 <__swbuf_r+0x6c>
 8009c62:	2e0a      	cmp	r6, #10
 8009c64:	d104      	bne.n	8009c70 <__swbuf_r+0x6c>
 8009c66:	4621      	mov	r1, r4
 8009c68:	4628      	mov	r0, r5
 8009c6a:	f000 f927 	bl	8009ebc <_fflush_r>
 8009c6e:	b988      	cbnz	r0, 8009c94 <__swbuf_r+0x90>
 8009c70:	4638      	mov	r0, r7
 8009c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c74:	4b0a      	ldr	r3, [pc, #40]	; (8009ca0 <__swbuf_r+0x9c>)
 8009c76:	429c      	cmp	r4, r3
 8009c78:	d101      	bne.n	8009c7e <__swbuf_r+0x7a>
 8009c7a:	68ac      	ldr	r4, [r5, #8]
 8009c7c:	e7cf      	b.n	8009c1e <__swbuf_r+0x1a>
 8009c7e:	4b09      	ldr	r3, [pc, #36]	; (8009ca4 <__swbuf_r+0xa0>)
 8009c80:	429c      	cmp	r4, r3
 8009c82:	bf08      	it	eq
 8009c84:	68ec      	ldreq	r4, [r5, #12]
 8009c86:	e7ca      	b.n	8009c1e <__swbuf_r+0x1a>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f81a 	bl	8009cc4 <__swsetup_r>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d0cb      	beq.n	8009c2c <__swbuf_r+0x28>
 8009c94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c98:	e7ea      	b.n	8009c70 <__swbuf_r+0x6c>
 8009c9a:	bf00      	nop
 8009c9c:	0800ae44 	.word	0x0800ae44
 8009ca0:	0800ae64 	.word	0x0800ae64
 8009ca4:	0800ae24 	.word	0x0800ae24

08009ca8 <__ascii_wctomb>:
 8009ca8:	b149      	cbz	r1, 8009cbe <__ascii_wctomb+0x16>
 8009caa:	2aff      	cmp	r2, #255	; 0xff
 8009cac:	bf85      	ittet	hi
 8009cae:	238a      	movhi	r3, #138	; 0x8a
 8009cb0:	6003      	strhi	r3, [r0, #0]
 8009cb2:	700a      	strbls	r2, [r1, #0]
 8009cb4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009cb8:	bf98      	it	ls
 8009cba:	2001      	movls	r0, #1
 8009cbc:	4770      	bx	lr
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	4770      	bx	lr
	...

08009cc4 <__swsetup_r>:
 8009cc4:	4b32      	ldr	r3, [pc, #200]	; (8009d90 <__swsetup_r+0xcc>)
 8009cc6:	b570      	push	{r4, r5, r6, lr}
 8009cc8:	681d      	ldr	r5, [r3, #0]
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460c      	mov	r4, r1
 8009cce:	b125      	cbz	r5, 8009cda <__swsetup_r+0x16>
 8009cd0:	69ab      	ldr	r3, [r5, #24]
 8009cd2:	b913      	cbnz	r3, 8009cda <__swsetup_r+0x16>
 8009cd4:	4628      	mov	r0, r5
 8009cd6:	f000 f985 	bl	8009fe4 <__sinit>
 8009cda:	4b2e      	ldr	r3, [pc, #184]	; (8009d94 <__swsetup_r+0xd0>)
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	d10f      	bne.n	8009d00 <__swsetup_r+0x3c>
 8009ce0:	686c      	ldr	r4, [r5, #4]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ce8:	0719      	lsls	r1, r3, #28
 8009cea:	d42c      	bmi.n	8009d46 <__swsetup_r+0x82>
 8009cec:	06dd      	lsls	r5, r3, #27
 8009cee:	d411      	bmi.n	8009d14 <__swsetup_r+0x50>
 8009cf0:	2309      	movs	r3, #9
 8009cf2:	6033      	str	r3, [r6, #0]
 8009cf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cfe:	e03e      	b.n	8009d7e <__swsetup_r+0xba>
 8009d00:	4b25      	ldr	r3, [pc, #148]	; (8009d98 <__swsetup_r+0xd4>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swsetup_r+0x46>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7eb      	b.n	8009ce2 <__swsetup_r+0x1e>
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <__swsetup_r+0xd8>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7e6      	b.n	8009ce2 <__swsetup_r+0x1e>
 8009d14:	0758      	lsls	r0, r3, #29
 8009d16:	d512      	bpl.n	8009d3e <__swsetup_r+0x7a>
 8009d18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d1a:	b141      	cbz	r1, 8009d2e <__swsetup_r+0x6a>
 8009d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d20:	4299      	cmp	r1, r3
 8009d22:	d002      	beq.n	8009d2a <__swsetup_r+0x66>
 8009d24:	4630      	mov	r0, r6
 8009d26:	f7ff fb31 	bl	800938c <_free_r>
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	2300      	movs	r3, #0
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	6923      	ldr	r3, [r4, #16]
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	f043 0308 	orr.w	r3, r3, #8
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	6923      	ldr	r3, [r4, #16]
 8009d48:	b94b      	cbnz	r3, 8009d5e <__swsetup_r+0x9a>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d54:	d003      	beq.n	8009d5e <__swsetup_r+0x9a>
 8009d56:	4621      	mov	r1, r4
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f000 fa09 	bl	800a170 <__smakebuf_r>
 8009d5e:	89a0      	ldrh	r0, [r4, #12]
 8009d60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d64:	f010 0301 	ands.w	r3, r0, #1
 8009d68:	d00a      	beq.n	8009d80 <__swsetup_r+0xbc>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	6963      	ldr	r3, [r4, #20]
 8009d70:	425b      	negs	r3, r3
 8009d72:	61a3      	str	r3, [r4, #24]
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	b943      	cbnz	r3, 8009d8a <__swsetup_r+0xc6>
 8009d78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d7c:	d1ba      	bne.n	8009cf4 <__swsetup_r+0x30>
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
 8009d80:	0781      	lsls	r1, r0, #30
 8009d82:	bf58      	it	pl
 8009d84:	6963      	ldrpl	r3, [r4, #20]
 8009d86:	60a3      	str	r3, [r4, #8]
 8009d88:	e7f4      	b.n	8009d74 <__swsetup_r+0xb0>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e7f7      	b.n	8009d7e <__swsetup_r+0xba>
 8009d8e:	bf00      	nop
 8009d90:	2000000c 	.word	0x2000000c
 8009d94:	0800ae44 	.word	0x0800ae44
 8009d98:	0800ae64 	.word	0x0800ae64
 8009d9c:	0800ae24 	.word	0x0800ae24

08009da0 <abort>:
 8009da0:	b508      	push	{r3, lr}
 8009da2:	2006      	movs	r0, #6
 8009da4:	f000 fa54 	bl	800a250 <raise>
 8009da8:	2001      	movs	r0, #1
 8009daa:	f7f9 fd0f 	bl	80037cc <_exit>
	...

08009db0 <__sflush_r>:
 8009db0:	898a      	ldrh	r2, [r1, #12]
 8009db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db6:	4605      	mov	r5, r0
 8009db8:	0710      	lsls	r0, r2, #28
 8009dba:	460c      	mov	r4, r1
 8009dbc:	d458      	bmi.n	8009e70 <__sflush_r+0xc0>
 8009dbe:	684b      	ldr	r3, [r1, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dc05      	bgt.n	8009dd0 <__sflush_r+0x20>
 8009dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	dc02      	bgt.n	8009dd0 <__sflush_r+0x20>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dd2:	2e00      	cmp	r6, #0
 8009dd4:	d0f9      	beq.n	8009dca <__sflush_r+0x1a>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ddc:	682f      	ldr	r7, [r5, #0]
 8009dde:	602b      	str	r3, [r5, #0]
 8009de0:	d032      	beq.n	8009e48 <__sflush_r+0x98>
 8009de2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	075a      	lsls	r2, r3, #29
 8009de8:	d505      	bpl.n	8009df6 <__sflush_r+0x46>
 8009dea:	6863      	ldr	r3, [r4, #4]
 8009dec:	1ac0      	subs	r0, r0, r3
 8009dee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009df0:	b10b      	cbz	r3, 8009df6 <__sflush_r+0x46>
 8009df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009df4:	1ac0      	subs	r0, r0, r3
 8009df6:	2300      	movs	r3, #0
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dfc:	6a21      	ldr	r1, [r4, #32]
 8009dfe:	4628      	mov	r0, r5
 8009e00:	47b0      	blx	r6
 8009e02:	1c43      	adds	r3, r0, #1
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	d106      	bne.n	8009e16 <__sflush_r+0x66>
 8009e08:	6829      	ldr	r1, [r5, #0]
 8009e0a:	291d      	cmp	r1, #29
 8009e0c:	d82c      	bhi.n	8009e68 <__sflush_r+0xb8>
 8009e0e:	4a2a      	ldr	r2, [pc, #168]	; (8009eb8 <__sflush_r+0x108>)
 8009e10:	40ca      	lsrs	r2, r1
 8009e12:	07d6      	lsls	r6, r2, #31
 8009e14:	d528      	bpl.n	8009e68 <__sflush_r+0xb8>
 8009e16:	2200      	movs	r2, #0
 8009e18:	6062      	str	r2, [r4, #4]
 8009e1a:	04d9      	lsls	r1, r3, #19
 8009e1c:	6922      	ldr	r2, [r4, #16]
 8009e1e:	6022      	str	r2, [r4, #0]
 8009e20:	d504      	bpl.n	8009e2c <__sflush_r+0x7c>
 8009e22:	1c42      	adds	r2, r0, #1
 8009e24:	d101      	bne.n	8009e2a <__sflush_r+0x7a>
 8009e26:	682b      	ldr	r3, [r5, #0]
 8009e28:	b903      	cbnz	r3, 8009e2c <__sflush_r+0x7c>
 8009e2a:	6560      	str	r0, [r4, #84]	; 0x54
 8009e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e2e:	602f      	str	r7, [r5, #0]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d0ca      	beq.n	8009dca <__sflush_r+0x1a>
 8009e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e38:	4299      	cmp	r1, r3
 8009e3a:	d002      	beq.n	8009e42 <__sflush_r+0x92>
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f7ff faa5 	bl	800938c <_free_r>
 8009e42:	2000      	movs	r0, #0
 8009e44:	6360      	str	r0, [r4, #52]	; 0x34
 8009e46:	e7c1      	b.n	8009dcc <__sflush_r+0x1c>
 8009e48:	6a21      	ldr	r1, [r4, #32]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	47b0      	blx	r6
 8009e50:	1c41      	adds	r1, r0, #1
 8009e52:	d1c7      	bne.n	8009de4 <__sflush_r+0x34>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0c4      	beq.n	8009de4 <__sflush_r+0x34>
 8009e5a:	2b1d      	cmp	r3, #29
 8009e5c:	d001      	beq.n	8009e62 <__sflush_r+0xb2>
 8009e5e:	2b16      	cmp	r3, #22
 8009e60:	d101      	bne.n	8009e66 <__sflush_r+0xb6>
 8009e62:	602f      	str	r7, [r5, #0]
 8009e64:	e7b1      	b.n	8009dca <__sflush_r+0x1a>
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	e7ad      	b.n	8009dcc <__sflush_r+0x1c>
 8009e70:	690f      	ldr	r7, [r1, #16]
 8009e72:	2f00      	cmp	r7, #0
 8009e74:	d0a9      	beq.n	8009dca <__sflush_r+0x1a>
 8009e76:	0793      	lsls	r3, r2, #30
 8009e78:	680e      	ldr	r6, [r1, #0]
 8009e7a:	bf08      	it	eq
 8009e7c:	694b      	ldreq	r3, [r1, #20]
 8009e7e:	600f      	str	r7, [r1, #0]
 8009e80:	bf18      	it	ne
 8009e82:	2300      	movne	r3, #0
 8009e84:	eba6 0807 	sub.w	r8, r6, r7
 8009e88:	608b      	str	r3, [r1, #8]
 8009e8a:	f1b8 0f00 	cmp.w	r8, #0
 8009e8e:	dd9c      	ble.n	8009dca <__sflush_r+0x1a>
 8009e90:	6a21      	ldr	r1, [r4, #32]
 8009e92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e94:	4643      	mov	r3, r8
 8009e96:	463a      	mov	r2, r7
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b0      	blx	r6
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	dc06      	bgt.n	8009eae <__sflush_r+0xfe>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eac:	e78e      	b.n	8009dcc <__sflush_r+0x1c>
 8009eae:	4407      	add	r7, r0
 8009eb0:	eba8 0800 	sub.w	r8, r8, r0
 8009eb4:	e7e9      	b.n	8009e8a <__sflush_r+0xda>
 8009eb6:	bf00      	nop
 8009eb8:	20400001 	.word	0x20400001

08009ebc <_fflush_r>:
 8009ebc:	b538      	push	{r3, r4, r5, lr}
 8009ebe:	690b      	ldr	r3, [r1, #16]
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	b913      	cbnz	r3, 8009ecc <_fflush_r+0x10>
 8009ec6:	2500      	movs	r5, #0
 8009ec8:	4628      	mov	r0, r5
 8009eca:	bd38      	pop	{r3, r4, r5, pc}
 8009ecc:	b118      	cbz	r0, 8009ed6 <_fflush_r+0x1a>
 8009ece:	6983      	ldr	r3, [r0, #24]
 8009ed0:	b90b      	cbnz	r3, 8009ed6 <_fflush_r+0x1a>
 8009ed2:	f000 f887 	bl	8009fe4 <__sinit>
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <_fflush_r+0x6c>)
 8009ed8:	429c      	cmp	r4, r3
 8009eda:	d11b      	bne.n	8009f14 <_fflush_r+0x58>
 8009edc:	686c      	ldr	r4, [r5, #4]
 8009ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d0ef      	beq.n	8009ec6 <_fflush_r+0xa>
 8009ee6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ee8:	07d0      	lsls	r0, r2, #31
 8009eea:	d404      	bmi.n	8009ef6 <_fflush_r+0x3a>
 8009eec:	0599      	lsls	r1, r3, #22
 8009eee:	d402      	bmi.n	8009ef6 <_fflush_r+0x3a>
 8009ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ef2:	f000 f915 	bl	800a120 <__retarget_lock_acquire_recursive>
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	4621      	mov	r1, r4
 8009efa:	f7ff ff59 	bl	8009db0 <__sflush_r>
 8009efe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f00:	07da      	lsls	r2, r3, #31
 8009f02:	4605      	mov	r5, r0
 8009f04:	d4e0      	bmi.n	8009ec8 <_fflush_r+0xc>
 8009f06:	89a3      	ldrh	r3, [r4, #12]
 8009f08:	059b      	lsls	r3, r3, #22
 8009f0a:	d4dd      	bmi.n	8009ec8 <_fflush_r+0xc>
 8009f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f0e:	f000 f908 	bl	800a122 <__retarget_lock_release_recursive>
 8009f12:	e7d9      	b.n	8009ec8 <_fflush_r+0xc>
 8009f14:	4b05      	ldr	r3, [pc, #20]	; (8009f2c <_fflush_r+0x70>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d101      	bne.n	8009f1e <_fflush_r+0x62>
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	e7df      	b.n	8009ede <_fflush_r+0x22>
 8009f1e:	4b04      	ldr	r3, [pc, #16]	; (8009f30 <_fflush_r+0x74>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	bf08      	it	eq
 8009f24:	68ec      	ldreq	r4, [r5, #12]
 8009f26:	e7da      	b.n	8009ede <_fflush_r+0x22>
 8009f28:	0800ae44 	.word	0x0800ae44
 8009f2c:	0800ae64 	.word	0x0800ae64
 8009f30:	0800ae24 	.word	0x0800ae24

08009f34 <std>:
 8009f34:	2300      	movs	r3, #0
 8009f36:	b510      	push	{r4, lr}
 8009f38:	4604      	mov	r4, r0
 8009f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f42:	6083      	str	r3, [r0, #8]
 8009f44:	8181      	strh	r1, [r0, #12]
 8009f46:	6643      	str	r3, [r0, #100]	; 0x64
 8009f48:	81c2      	strh	r2, [r0, #14]
 8009f4a:	6183      	str	r3, [r0, #24]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	2208      	movs	r2, #8
 8009f50:	305c      	adds	r0, #92	; 0x5c
 8009f52:	f7fd fb27 	bl	80075a4 <memset>
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <std+0x38>)
 8009f58:	6263      	str	r3, [r4, #36]	; 0x24
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <std+0x3c>)
 8009f5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f5e:	4b05      	ldr	r3, [pc, #20]	; (8009f74 <std+0x40>)
 8009f60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f62:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <std+0x44>)
 8009f64:	6224      	str	r4, [r4, #32]
 8009f66:	6323      	str	r3, [r4, #48]	; 0x30
 8009f68:	bd10      	pop	{r4, pc}
 8009f6a:	bf00      	nop
 8009f6c:	0800a289 	.word	0x0800a289
 8009f70:	0800a2ab 	.word	0x0800a2ab
 8009f74:	0800a2e3 	.word	0x0800a2e3
 8009f78:	0800a307 	.word	0x0800a307

08009f7c <_cleanup_r>:
 8009f7c:	4901      	ldr	r1, [pc, #4]	; (8009f84 <_cleanup_r+0x8>)
 8009f7e:	f000 b8af 	b.w	800a0e0 <_fwalk_reent>
 8009f82:	bf00      	nop
 8009f84:	08009ebd 	.word	0x08009ebd

08009f88 <__sfmoreglue>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	2268      	movs	r2, #104	; 0x68
 8009f8c:	1e4d      	subs	r5, r1, #1
 8009f8e:	4355      	muls	r5, r2
 8009f90:	460e      	mov	r6, r1
 8009f92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f96:	f7ff fa65 	bl	8009464 <_malloc_r>
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	b140      	cbz	r0, 8009fb0 <__sfmoreglue+0x28>
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8009fa4:	300c      	adds	r0, #12
 8009fa6:	60a0      	str	r0, [r4, #8]
 8009fa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fac:	f7fd fafa 	bl	80075a4 <memset>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}

08009fb4 <__sfp_lock_acquire>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__sfp_lock_acquire+0x8>)
 8009fb6:	f000 b8b3 	b.w	800a120 <__retarget_lock_acquire_recursive>
 8009fba:	bf00      	nop
 8009fbc:	200004cd 	.word	0x200004cd

08009fc0 <__sfp_lock_release>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__sfp_lock_release+0x8>)
 8009fc2:	f000 b8ae 	b.w	800a122 <__retarget_lock_release_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	200004cd 	.word	0x200004cd

08009fcc <__sinit_lock_acquire>:
 8009fcc:	4801      	ldr	r0, [pc, #4]	; (8009fd4 <__sinit_lock_acquire+0x8>)
 8009fce:	f000 b8a7 	b.w	800a120 <__retarget_lock_acquire_recursive>
 8009fd2:	bf00      	nop
 8009fd4:	200004ce 	.word	0x200004ce

08009fd8 <__sinit_lock_release>:
 8009fd8:	4801      	ldr	r0, [pc, #4]	; (8009fe0 <__sinit_lock_release+0x8>)
 8009fda:	f000 b8a2 	b.w	800a122 <__retarget_lock_release_recursive>
 8009fde:	bf00      	nop
 8009fe0:	200004ce 	.word	0x200004ce

08009fe4 <__sinit>:
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	f7ff fff0 	bl	8009fcc <__sinit_lock_acquire>
 8009fec:	69a3      	ldr	r3, [r4, #24]
 8009fee:	b11b      	cbz	r3, 8009ff8 <__sinit+0x14>
 8009ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ff4:	f7ff bff0 	b.w	8009fd8 <__sinit_lock_release>
 8009ff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <__sinit+0x68>)
 800a000:	4a13      	ldr	r2, [pc, #76]	; (800a050 <__sinit+0x6c>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	62a2      	str	r2, [r4, #40]	; 0x28
 800a006:	42a3      	cmp	r3, r4
 800a008:	bf04      	itt	eq
 800a00a:	2301      	moveq	r3, #1
 800a00c:	61a3      	streq	r3, [r4, #24]
 800a00e:	4620      	mov	r0, r4
 800a010:	f000 f820 	bl	800a054 <__sfp>
 800a014:	6060      	str	r0, [r4, #4]
 800a016:	4620      	mov	r0, r4
 800a018:	f000 f81c 	bl	800a054 <__sfp>
 800a01c:	60a0      	str	r0, [r4, #8]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f818 	bl	800a054 <__sfp>
 800a024:	2200      	movs	r2, #0
 800a026:	60e0      	str	r0, [r4, #12]
 800a028:	2104      	movs	r1, #4
 800a02a:	6860      	ldr	r0, [r4, #4]
 800a02c:	f7ff ff82 	bl	8009f34 <std>
 800a030:	68a0      	ldr	r0, [r4, #8]
 800a032:	2201      	movs	r2, #1
 800a034:	2109      	movs	r1, #9
 800a036:	f7ff ff7d 	bl	8009f34 <std>
 800a03a:	68e0      	ldr	r0, [r4, #12]
 800a03c:	2202      	movs	r2, #2
 800a03e:	2112      	movs	r1, #18
 800a040:	f7ff ff78 	bl	8009f34 <std>
 800a044:	2301      	movs	r3, #1
 800a046:	61a3      	str	r3, [r4, #24]
 800a048:	e7d2      	b.n	8009ff0 <__sinit+0xc>
 800a04a:	bf00      	nop
 800a04c:	0800aaac 	.word	0x0800aaac
 800a050:	08009f7d 	.word	0x08009f7d

0800a054 <__sfp>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	4607      	mov	r7, r0
 800a058:	f7ff ffac 	bl	8009fb4 <__sfp_lock_acquire>
 800a05c:	4b1e      	ldr	r3, [pc, #120]	; (800a0d8 <__sfp+0x84>)
 800a05e:	681e      	ldr	r6, [r3, #0]
 800a060:	69b3      	ldr	r3, [r6, #24]
 800a062:	b913      	cbnz	r3, 800a06a <__sfp+0x16>
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff ffbd 	bl	8009fe4 <__sinit>
 800a06a:	3648      	adds	r6, #72	; 0x48
 800a06c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a070:	3b01      	subs	r3, #1
 800a072:	d503      	bpl.n	800a07c <__sfp+0x28>
 800a074:	6833      	ldr	r3, [r6, #0]
 800a076:	b30b      	cbz	r3, 800a0bc <__sfp+0x68>
 800a078:	6836      	ldr	r6, [r6, #0]
 800a07a:	e7f7      	b.n	800a06c <__sfp+0x18>
 800a07c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a080:	b9d5      	cbnz	r5, 800a0b8 <__sfp+0x64>
 800a082:	4b16      	ldr	r3, [pc, #88]	; (800a0dc <__sfp+0x88>)
 800a084:	60e3      	str	r3, [r4, #12]
 800a086:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a08a:	6665      	str	r5, [r4, #100]	; 0x64
 800a08c:	f000 f847 	bl	800a11e <__retarget_lock_init_recursive>
 800a090:	f7ff ff96 	bl	8009fc0 <__sfp_lock_release>
 800a094:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a098:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a09c:	6025      	str	r5, [r4, #0]
 800a09e:	61a5      	str	r5, [r4, #24]
 800a0a0:	2208      	movs	r2, #8
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0a8:	f7fd fa7c 	bl	80075a4 <memset>
 800a0ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0b8:	3468      	adds	r4, #104	; 0x68
 800a0ba:	e7d9      	b.n	800a070 <__sfp+0x1c>
 800a0bc:	2104      	movs	r1, #4
 800a0be:	4638      	mov	r0, r7
 800a0c0:	f7ff ff62 	bl	8009f88 <__sfmoreglue>
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	6030      	str	r0, [r6, #0]
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d1d5      	bne.n	800a078 <__sfp+0x24>
 800a0cc:	f7ff ff78 	bl	8009fc0 <__sfp_lock_release>
 800a0d0:	230c      	movs	r3, #12
 800a0d2:	603b      	str	r3, [r7, #0]
 800a0d4:	e7ee      	b.n	800a0b4 <__sfp+0x60>
 800a0d6:	bf00      	nop
 800a0d8:	0800aaac 	.word	0x0800aaac
 800a0dc:	ffff0001 	.word	0xffff0001

0800a0e0 <_fwalk_reent>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	4606      	mov	r6, r0
 800a0e6:	4688      	mov	r8, r1
 800a0e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a0ec:	2700      	movs	r7, #0
 800a0ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a0f2:	f1b9 0901 	subs.w	r9, r9, #1
 800a0f6:	d505      	bpl.n	800a104 <_fwalk_reent+0x24>
 800a0f8:	6824      	ldr	r4, [r4, #0]
 800a0fa:	2c00      	cmp	r4, #0
 800a0fc:	d1f7      	bne.n	800a0ee <_fwalk_reent+0xe>
 800a0fe:	4638      	mov	r0, r7
 800a100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a104:	89ab      	ldrh	r3, [r5, #12]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d907      	bls.n	800a11a <_fwalk_reent+0x3a>
 800a10a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a10e:	3301      	adds	r3, #1
 800a110:	d003      	beq.n	800a11a <_fwalk_reent+0x3a>
 800a112:	4629      	mov	r1, r5
 800a114:	4630      	mov	r0, r6
 800a116:	47c0      	blx	r8
 800a118:	4307      	orrs	r7, r0
 800a11a:	3568      	adds	r5, #104	; 0x68
 800a11c:	e7e9      	b.n	800a0f2 <_fwalk_reent+0x12>

0800a11e <__retarget_lock_init_recursive>:
 800a11e:	4770      	bx	lr

0800a120 <__retarget_lock_acquire_recursive>:
 800a120:	4770      	bx	lr

0800a122 <__retarget_lock_release_recursive>:
 800a122:	4770      	bx	lr

0800a124 <__swhatbuf_r>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	460e      	mov	r6, r1
 800a128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a12c:	2900      	cmp	r1, #0
 800a12e:	b096      	sub	sp, #88	; 0x58
 800a130:	4614      	mov	r4, r2
 800a132:	461d      	mov	r5, r3
 800a134:	da08      	bge.n	800a148 <__swhatbuf_r+0x24>
 800a136:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	602a      	str	r2, [r5, #0]
 800a13e:	061a      	lsls	r2, r3, #24
 800a140:	d410      	bmi.n	800a164 <__swhatbuf_r+0x40>
 800a142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a146:	e00e      	b.n	800a166 <__swhatbuf_r+0x42>
 800a148:	466a      	mov	r2, sp
 800a14a:	f000 f903 	bl	800a354 <_fstat_r>
 800a14e:	2800      	cmp	r0, #0
 800a150:	dbf1      	blt.n	800a136 <__swhatbuf_r+0x12>
 800a152:	9a01      	ldr	r2, [sp, #4]
 800a154:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a158:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a15c:	425a      	negs	r2, r3
 800a15e:	415a      	adcs	r2, r3
 800a160:	602a      	str	r2, [r5, #0]
 800a162:	e7ee      	b.n	800a142 <__swhatbuf_r+0x1e>
 800a164:	2340      	movs	r3, #64	; 0x40
 800a166:	2000      	movs	r0, #0
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	b016      	add	sp, #88	; 0x58
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a170 <__smakebuf_r>:
 800a170:	898b      	ldrh	r3, [r1, #12]
 800a172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a174:	079d      	lsls	r5, r3, #30
 800a176:	4606      	mov	r6, r0
 800a178:	460c      	mov	r4, r1
 800a17a:	d507      	bpl.n	800a18c <__smakebuf_r+0x1c>
 800a17c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a180:	6023      	str	r3, [r4, #0]
 800a182:	6123      	str	r3, [r4, #16]
 800a184:	2301      	movs	r3, #1
 800a186:	6163      	str	r3, [r4, #20]
 800a188:	b002      	add	sp, #8
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	ab01      	add	r3, sp, #4
 800a18e:	466a      	mov	r2, sp
 800a190:	f7ff ffc8 	bl	800a124 <__swhatbuf_r>
 800a194:	9900      	ldr	r1, [sp, #0]
 800a196:	4605      	mov	r5, r0
 800a198:	4630      	mov	r0, r6
 800a19a:	f7ff f963 	bl	8009464 <_malloc_r>
 800a19e:	b948      	cbnz	r0, 800a1b4 <__smakebuf_r+0x44>
 800a1a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a4:	059a      	lsls	r2, r3, #22
 800a1a6:	d4ef      	bmi.n	800a188 <__smakebuf_r+0x18>
 800a1a8:	f023 0303 	bic.w	r3, r3, #3
 800a1ac:	f043 0302 	orr.w	r3, r3, #2
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	e7e3      	b.n	800a17c <__smakebuf_r+0xc>
 800a1b4:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <__smakebuf_r+0x7c>)
 800a1b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	6020      	str	r0, [r4, #0]
 800a1bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c0:	81a3      	strh	r3, [r4, #12]
 800a1c2:	9b00      	ldr	r3, [sp, #0]
 800a1c4:	6163      	str	r3, [r4, #20]
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	6120      	str	r0, [r4, #16]
 800a1ca:	b15b      	cbz	r3, 800a1e4 <__smakebuf_r+0x74>
 800a1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 f8d1 	bl	800a378 <_isatty_r>
 800a1d6:	b128      	cbz	r0, 800a1e4 <__smakebuf_r+0x74>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	f023 0303 	bic.w	r3, r3, #3
 800a1de:	f043 0301 	orr.w	r3, r3, #1
 800a1e2:	81a3      	strh	r3, [r4, #12]
 800a1e4:	89a0      	ldrh	r0, [r4, #12]
 800a1e6:	4305      	orrs	r5, r0
 800a1e8:	81a5      	strh	r5, [r4, #12]
 800a1ea:	e7cd      	b.n	800a188 <__smakebuf_r+0x18>
 800a1ec:	08009f7d 	.word	0x08009f7d

0800a1f0 <_malloc_usable_size_r>:
 800a1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1f4:	1f18      	subs	r0, r3, #4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	bfbc      	itt	lt
 800a1fa:	580b      	ldrlt	r3, [r1, r0]
 800a1fc:	18c0      	addlt	r0, r0, r3
 800a1fe:	4770      	bx	lr

0800a200 <_raise_r>:
 800a200:	291f      	cmp	r1, #31
 800a202:	b538      	push	{r3, r4, r5, lr}
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	d904      	bls.n	800a214 <_raise_r+0x14>
 800a20a:	2316      	movs	r3, #22
 800a20c:	6003      	str	r3, [r0, #0]
 800a20e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a212:	bd38      	pop	{r3, r4, r5, pc}
 800a214:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a216:	b112      	cbz	r2, 800a21e <_raise_r+0x1e>
 800a218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a21c:	b94b      	cbnz	r3, 800a232 <_raise_r+0x32>
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 f830 	bl	800a284 <_getpid_r>
 800a224:	462a      	mov	r2, r5
 800a226:	4601      	mov	r1, r0
 800a228:	4620      	mov	r0, r4
 800a22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a22e:	f000 b817 	b.w	800a260 <_kill_r>
 800a232:	2b01      	cmp	r3, #1
 800a234:	d00a      	beq.n	800a24c <_raise_r+0x4c>
 800a236:	1c59      	adds	r1, r3, #1
 800a238:	d103      	bne.n	800a242 <_raise_r+0x42>
 800a23a:	2316      	movs	r3, #22
 800a23c:	6003      	str	r3, [r0, #0]
 800a23e:	2001      	movs	r0, #1
 800a240:	e7e7      	b.n	800a212 <_raise_r+0x12>
 800a242:	2400      	movs	r4, #0
 800a244:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a248:	4628      	mov	r0, r5
 800a24a:	4798      	blx	r3
 800a24c:	2000      	movs	r0, #0
 800a24e:	e7e0      	b.n	800a212 <_raise_r+0x12>

0800a250 <raise>:
 800a250:	4b02      	ldr	r3, [pc, #8]	; (800a25c <raise+0xc>)
 800a252:	4601      	mov	r1, r0
 800a254:	6818      	ldr	r0, [r3, #0]
 800a256:	f7ff bfd3 	b.w	800a200 <_raise_r>
 800a25a:	bf00      	nop
 800a25c:	2000000c 	.word	0x2000000c

0800a260 <_kill_r>:
 800a260:	b538      	push	{r3, r4, r5, lr}
 800a262:	4d07      	ldr	r5, [pc, #28]	; (800a280 <_kill_r+0x20>)
 800a264:	2300      	movs	r3, #0
 800a266:	4604      	mov	r4, r0
 800a268:	4608      	mov	r0, r1
 800a26a:	4611      	mov	r1, r2
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	f7f9 fa9d 	bl	80037ac <_kill>
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	d102      	bne.n	800a27c <_kill_r+0x1c>
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	b103      	cbz	r3, 800a27c <_kill_r+0x1c>
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	bd38      	pop	{r3, r4, r5, pc}
 800a27e:	bf00      	nop
 800a280:	200004c8 	.word	0x200004c8

0800a284 <_getpid_r>:
 800a284:	f7f9 ba8a 	b.w	800379c <_getpid>

0800a288 <__sread>:
 800a288:	b510      	push	{r4, lr}
 800a28a:	460c      	mov	r4, r1
 800a28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a290:	f000 f894 	bl	800a3bc <_read_r>
 800a294:	2800      	cmp	r0, #0
 800a296:	bfab      	itete	ge
 800a298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a29a:	89a3      	ldrhlt	r3, [r4, #12]
 800a29c:	181b      	addge	r3, r3, r0
 800a29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2a2:	bfac      	ite	ge
 800a2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2a6:	81a3      	strhlt	r3, [r4, #12]
 800a2a8:	bd10      	pop	{r4, pc}

0800a2aa <__swrite>:
 800a2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ae:	461f      	mov	r7, r3
 800a2b0:	898b      	ldrh	r3, [r1, #12]
 800a2b2:	05db      	lsls	r3, r3, #23
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	4616      	mov	r6, r2
 800a2ba:	d505      	bpl.n	800a2c8 <__swrite+0x1e>
 800a2bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f000 f868 	bl	800a398 <_lseek_r>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	4632      	mov	r2, r6
 800a2d6:	463b      	mov	r3, r7
 800a2d8:	4628      	mov	r0, r5
 800a2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2de:	f000 b817 	b.w	800a310 <_write_r>

0800a2e2 <__sseek>:
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ea:	f000 f855 	bl	800a398 <_lseek_r>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	bf15      	itete	ne
 800a2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2fe:	81a3      	strheq	r3, [r4, #12]
 800a300:	bf18      	it	ne
 800a302:	81a3      	strhne	r3, [r4, #12]
 800a304:	bd10      	pop	{r4, pc}

0800a306 <__sclose>:
 800a306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30a:	f000 b813 	b.w	800a334 <_close_r>
	...

0800a310 <_write_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d07      	ldr	r5, [pc, #28]	; (800a330 <_write_r+0x20>)
 800a314:	4604      	mov	r4, r0
 800a316:	4608      	mov	r0, r1
 800a318:	4611      	mov	r1, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	602a      	str	r2, [r5, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	f7f9 fa7b 	bl	800381a <_write>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_write_r+0x1e>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_write_r+0x1e>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	200004c8 	.word	0x200004c8

0800a334 <_close_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4d06      	ldr	r5, [pc, #24]	; (800a350 <_close_r+0x1c>)
 800a338:	2300      	movs	r3, #0
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f9 fa87 	bl	8003852 <_close>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_close_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_close_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	200004c8 	.word	0x200004c8

0800a354 <_fstat_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d07      	ldr	r5, [pc, #28]	; (800a374 <_fstat_r+0x20>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f7f9 fa82 	bl	800386a <_fstat>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d102      	bne.n	800a370 <_fstat_r+0x1c>
 800a36a:	682b      	ldr	r3, [r5, #0]
 800a36c:	b103      	cbz	r3, 800a370 <_fstat_r+0x1c>
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	bf00      	nop
 800a374:	200004c8 	.word	0x200004c8

0800a378 <_isatty_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d06      	ldr	r5, [pc, #24]	; (800a394 <_isatty_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7f9 fa81 	bl	800388a <_isatty>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_isatty_r+0x1a>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_isatty_r+0x1a>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	200004c8 	.word	0x200004c8

0800a398 <_lseek_r>:
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4d07      	ldr	r5, [pc, #28]	; (800a3b8 <_lseek_r+0x20>)
 800a39c:	4604      	mov	r4, r0
 800a39e:	4608      	mov	r0, r1
 800a3a0:	4611      	mov	r1, r2
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	602a      	str	r2, [r5, #0]
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	f7f9 fa7a 	bl	80038a0 <_lseek>
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d102      	bne.n	800a3b6 <_lseek_r+0x1e>
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	b103      	cbz	r3, 800a3b6 <_lseek_r+0x1e>
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	200004c8 	.word	0x200004c8

0800a3bc <_read_r>:
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4d07      	ldr	r5, [pc, #28]	; (800a3dc <_read_r+0x20>)
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	602a      	str	r2, [r5, #0]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f7f9 fa08 	bl	80037e0 <_read>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d102      	bne.n	800a3da <_read_r+0x1e>
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	b103      	cbz	r3, 800a3da <_read_r+0x1e>
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	200004c8 	.word	0x200004c8

0800a3e0 <asinf>:
 800a3e0:	b508      	push	{r3, lr}
 800a3e2:	ed2d 8b02 	vpush	{d8}
 800a3e6:	eeb0 8a40 	vmov.f32	s16, s0
 800a3ea:	f000 f845 	bl	800a478 <__ieee754_asinf>
 800a3ee:	eeb4 8a48 	vcmp.f32	s16, s16
 800a3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f6:	eef0 8a40 	vmov.f32	s17, s0
 800a3fa:	d615      	bvs.n	800a428 <asinf+0x48>
 800a3fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a400:	f000 fa98 	bl	800a934 <fabsf>
 800a404:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a408:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a410:	dd0a      	ble.n	800a428 <asinf+0x48>
 800a412:	f7fd f89d 	bl	8007550 <__errno>
 800a416:	ecbd 8b02 	vpop	{d8}
 800a41a:	2321      	movs	r3, #33	; 0x21
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a422:	4804      	ldr	r0, [pc, #16]	; (800a434 <asinf+0x54>)
 800a424:	f000 ba8e 	b.w	800a944 <nanf>
 800a428:	eeb0 0a68 	vmov.f32	s0, s17
 800a42c:	ecbd 8b02 	vpop	{d8}
 800a430:	bd08      	pop	{r3, pc}
 800a432:	bf00      	nop
 800a434:	0800ad18 	.word	0x0800ad18

0800a438 <atan2f>:
 800a438:	f000 b904 	b.w	800a644 <__ieee754_atan2f>

0800a43c <sqrtf>:
 800a43c:	b508      	push	{r3, lr}
 800a43e:	ed2d 8b02 	vpush	{d8}
 800a442:	eeb0 8a40 	vmov.f32	s16, s0
 800a446:	f000 f99d 	bl	800a784 <__ieee754_sqrtf>
 800a44a:	eeb4 8a48 	vcmp.f32	s16, s16
 800a44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a452:	d60c      	bvs.n	800a46e <sqrtf+0x32>
 800a454:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a474 <sqrtf+0x38>
 800a458:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a460:	d505      	bpl.n	800a46e <sqrtf+0x32>
 800a462:	f7fd f875 	bl	8007550 <__errno>
 800a466:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a46a:	2321      	movs	r3, #33	; 0x21
 800a46c:	6003      	str	r3, [r0, #0]
 800a46e:	ecbd 8b02 	vpop	{d8}
 800a472:	bd08      	pop	{r3, pc}
 800a474:	00000000 	.word	0x00000000

0800a478 <__ieee754_asinf>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	ee10 5a10 	vmov	r5, s0
 800a47e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a482:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a486:	ed2d 8b04 	vpush	{d8-d9}
 800a48a:	d10c      	bne.n	800a4a6 <__ieee754_asinf+0x2e>
 800a48c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a604 <__ieee754_asinf+0x18c>
 800a490:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a608 <__ieee754_asinf+0x190>
 800a494:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a498:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a49c:	eeb0 0a67 	vmov.f32	s0, s15
 800a4a0:	ecbd 8b04 	vpop	{d8-d9}
 800a4a4:	bd38      	pop	{r3, r4, r5, pc}
 800a4a6:	dd04      	ble.n	800a4b2 <__ieee754_asinf+0x3a>
 800a4a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a4ac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a4b0:	e7f6      	b.n	800a4a0 <__ieee754_asinf+0x28>
 800a4b2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a4b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a4ba:	da0b      	bge.n	800a4d4 <__ieee754_asinf+0x5c>
 800a4bc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a4c0:	da52      	bge.n	800a568 <__ieee754_asinf+0xf0>
 800a4c2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a60c <__ieee754_asinf+0x194>
 800a4c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a4ca:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d2:	dce5      	bgt.n	800a4a0 <__ieee754_asinf+0x28>
 800a4d4:	f000 fa2e 	bl	800a934 <fabsf>
 800a4d8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a4dc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a4e0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a4e4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a610 <__ieee754_asinf+0x198>
 800a4e8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a614 <__ieee754_asinf+0x19c>
 800a4ec:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a618 <__ieee754_asinf+0x1a0>
 800a4f0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a4f4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a61c <__ieee754_asinf+0x1a4>
 800a4f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a4fc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a620 <__ieee754_asinf+0x1a8>
 800a500:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a504:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a624 <__ieee754_asinf+0x1ac>
 800a508:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a50c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a628 <__ieee754_asinf+0x1b0>
 800a510:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a514:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a62c <__ieee754_asinf+0x1b4>
 800a518:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a51c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a630 <__ieee754_asinf+0x1b8>
 800a520:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a524:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a634 <__ieee754_asinf+0x1bc>
 800a528:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a52c:	eeb0 0a48 	vmov.f32	s0, s16
 800a530:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a534:	f000 f926 	bl	800a784 <__ieee754_sqrtf>
 800a538:	4b3f      	ldr	r3, [pc, #252]	; (800a638 <__ieee754_asinf+0x1c0>)
 800a53a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a53e:	429c      	cmp	r4, r3
 800a540:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a544:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a548:	dd3d      	ble.n	800a5c6 <__ieee754_asinf+0x14e>
 800a54a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a54e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a63c <__ieee754_asinf+0x1c4>
 800a552:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a556:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a608 <__ieee754_asinf+0x190>
 800a55a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a55e:	2d00      	cmp	r5, #0
 800a560:	bfd8      	it	le
 800a562:	eeb1 0a40 	vnegle.f32	s0, s0
 800a566:	e79b      	b.n	800a4a0 <__ieee754_asinf+0x28>
 800a568:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a56c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a610 <__ieee754_asinf+0x198>
 800a570:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a614 <__ieee754_asinf+0x19c>
 800a574:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a628 <__ieee754_asinf+0x1b0>
 800a578:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a57c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a61c <__ieee754_asinf+0x1a4>
 800a580:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a584:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a620 <__ieee754_asinf+0x1a8>
 800a588:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a58c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a624 <__ieee754_asinf+0x1ac>
 800a590:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a594:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a618 <__ieee754_asinf+0x1a0>
 800a598:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a59c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a62c <__ieee754_asinf+0x1b4>
 800a5a0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a5a4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a630 <__ieee754_asinf+0x1b8>
 800a5a8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a5ac:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a634 <__ieee754_asinf+0x1bc>
 800a5b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a5b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5b8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a5bc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a5c0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a5c4:	e76c      	b.n	800a4a0 <__ieee754_asinf+0x28>
 800a5c6:	ee10 3a10 	vmov	r3, s0
 800a5ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a5ce:	f023 030f 	bic.w	r3, r3, #15
 800a5d2:	ee07 3a10 	vmov	s14, r3
 800a5d6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a5da:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a5de:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a5e2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a5e6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a604 <__ieee754_asinf+0x18c>
 800a5ea:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a5ee:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a5f2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a640 <__ieee754_asinf+0x1c8>
 800a5f6:	eeb0 6a40 	vmov.f32	s12, s0
 800a5fa:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a5fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a602:	e7aa      	b.n	800a55a <__ieee754_asinf+0xe2>
 800a604:	b33bbd2e 	.word	0xb33bbd2e
 800a608:	3fc90fdb 	.word	0x3fc90fdb
 800a60c:	7149f2ca 	.word	0x7149f2ca
 800a610:	3811ef08 	.word	0x3811ef08
 800a614:	3a4f7f04 	.word	0x3a4f7f04
 800a618:	3e2aaaab 	.word	0x3e2aaaab
 800a61c:	bd241146 	.word	0xbd241146
 800a620:	3e4e0aa8 	.word	0x3e4e0aa8
 800a624:	bea6b090 	.word	0xbea6b090
 800a628:	3d9dc62e 	.word	0x3d9dc62e
 800a62c:	bf303361 	.word	0xbf303361
 800a630:	4001572d 	.word	0x4001572d
 800a634:	c019d139 	.word	0xc019d139
 800a638:	3f799999 	.word	0x3f799999
 800a63c:	333bbd2e 	.word	0x333bbd2e
 800a640:	3f490fdb 	.word	0x3f490fdb

0800a644 <__ieee754_atan2f>:
 800a644:	ee10 2a90 	vmov	r2, s1
 800a648:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a64c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a650:	b510      	push	{r4, lr}
 800a652:	eef0 7a40 	vmov.f32	s15, s0
 800a656:	dc06      	bgt.n	800a666 <__ieee754_atan2f+0x22>
 800a658:	ee10 0a10 	vmov	r0, s0
 800a65c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a660:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a664:	dd04      	ble.n	800a670 <__ieee754_atan2f+0x2c>
 800a666:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a66a:	eeb0 0a67 	vmov.f32	s0, s15
 800a66e:	bd10      	pop	{r4, pc}
 800a670:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a674:	d103      	bne.n	800a67e <__ieee754_atan2f+0x3a>
 800a676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67a:	f000 b887 	b.w	800a78c <atanf>
 800a67e:	1794      	asrs	r4, r2, #30
 800a680:	f004 0402 	and.w	r4, r4, #2
 800a684:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a688:	b943      	cbnz	r3, 800a69c <__ieee754_atan2f+0x58>
 800a68a:	2c02      	cmp	r4, #2
 800a68c:	d05e      	beq.n	800a74c <__ieee754_atan2f+0x108>
 800a68e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a760 <__ieee754_atan2f+0x11c>
 800a692:	2c03      	cmp	r4, #3
 800a694:	bf08      	it	eq
 800a696:	eef0 7a47 	vmoveq.f32	s15, s14
 800a69a:	e7e6      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a69c:	b941      	cbnz	r1, 800a6b0 <__ieee754_atan2f+0x6c>
 800a69e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a764 <__ieee754_atan2f+0x120>
 800a6a2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a768 <__ieee754_atan2f+0x124>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	bfb8      	it	lt
 800a6aa:	eef0 7a40 	vmovlt.f32	s15, s0
 800a6ae:	e7dc      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a6b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a6b4:	d110      	bne.n	800a6d8 <__ieee754_atan2f+0x94>
 800a6b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a6be:	d107      	bne.n	800a6d0 <__ieee754_atan2f+0x8c>
 800a6c0:	2c02      	cmp	r4, #2
 800a6c2:	d846      	bhi.n	800a752 <__ieee754_atan2f+0x10e>
 800a6c4:	4b29      	ldr	r3, [pc, #164]	; (800a76c <__ieee754_atan2f+0x128>)
 800a6c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6ca:	edd4 7a00 	vldr	s15, [r4]
 800a6ce:	e7cc      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a6d0:	2c02      	cmp	r4, #2
 800a6d2:	d841      	bhi.n	800a758 <__ieee754_atan2f+0x114>
 800a6d4:	4b26      	ldr	r3, [pc, #152]	; (800a770 <__ieee754_atan2f+0x12c>)
 800a6d6:	e7f6      	b.n	800a6c6 <__ieee754_atan2f+0x82>
 800a6d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a6dc:	d0df      	beq.n	800a69e <__ieee754_atan2f+0x5a>
 800a6de:	1a5b      	subs	r3, r3, r1
 800a6e0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a6e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a6e8:	da1a      	bge.n	800a720 <__ieee754_atan2f+0xdc>
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	da01      	bge.n	800a6f2 <__ieee754_atan2f+0xae>
 800a6ee:	313c      	adds	r1, #60	; 0x3c
 800a6f0:	db19      	blt.n	800a726 <__ieee754_atan2f+0xe2>
 800a6f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a6f6:	f000 f91d 	bl	800a934 <fabsf>
 800a6fa:	f000 f847 	bl	800a78c <atanf>
 800a6fe:	eef0 7a40 	vmov.f32	s15, s0
 800a702:	2c01      	cmp	r4, #1
 800a704:	d012      	beq.n	800a72c <__ieee754_atan2f+0xe8>
 800a706:	2c02      	cmp	r4, #2
 800a708:	d017      	beq.n	800a73a <__ieee754_atan2f+0xf6>
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	d0ad      	beq.n	800a66a <__ieee754_atan2f+0x26>
 800a70e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a774 <__ieee754_atan2f+0x130>
 800a712:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a716:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a778 <__ieee754_atan2f+0x134>
 800a71a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a71e:	e7a4      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a720:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a764 <__ieee754_atan2f+0x120>
 800a724:	e7ed      	b.n	800a702 <__ieee754_atan2f+0xbe>
 800a726:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a77c <__ieee754_atan2f+0x138>
 800a72a:	e7ea      	b.n	800a702 <__ieee754_atan2f+0xbe>
 800a72c:	ee17 3a90 	vmov	r3, s15
 800a730:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a734:	ee07 3a90 	vmov	s15, r3
 800a738:	e797      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a73a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a774 <__ieee754_atan2f+0x130>
 800a73e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a742:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a778 <__ieee754_atan2f+0x134>
 800a746:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a74a:	e78e      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a74c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a778 <__ieee754_atan2f+0x134>
 800a750:	e78b      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a752:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a780 <__ieee754_atan2f+0x13c>
 800a756:	e788      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a758:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a77c <__ieee754_atan2f+0x138>
 800a75c:	e785      	b.n	800a66a <__ieee754_atan2f+0x26>
 800a75e:	bf00      	nop
 800a760:	c0490fdb 	.word	0xc0490fdb
 800a764:	3fc90fdb 	.word	0x3fc90fdb
 800a768:	bfc90fdb 	.word	0xbfc90fdb
 800a76c:	0800ae84 	.word	0x0800ae84
 800a770:	0800ae90 	.word	0x0800ae90
 800a774:	33bbbd2e 	.word	0x33bbbd2e
 800a778:	40490fdb 	.word	0x40490fdb
 800a77c:	00000000 	.word	0x00000000
 800a780:	3f490fdb 	.word	0x3f490fdb

0800a784 <__ieee754_sqrtf>:
 800a784:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a788:	4770      	bx	lr
	...

0800a78c <atanf>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	ee10 5a10 	vmov	r5, s0
 800a792:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a796:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a79a:	eef0 7a40 	vmov.f32	s15, s0
 800a79e:	db10      	blt.n	800a7c2 <atanf+0x36>
 800a7a0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a7a4:	dd04      	ble.n	800a7b0 <atanf+0x24>
 800a7a6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a7aa:	eeb0 0a67 	vmov.f32	s0, s15
 800a7ae:	bd38      	pop	{r3, r4, r5, pc}
 800a7b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a8e8 <atanf+0x15c>
 800a7b4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a8ec <atanf+0x160>
 800a7b8:	2d00      	cmp	r5, #0
 800a7ba:	bfd8      	it	le
 800a7bc:	eef0 7a40 	vmovle.f32	s15, s0
 800a7c0:	e7f3      	b.n	800a7aa <atanf+0x1e>
 800a7c2:	4b4b      	ldr	r3, [pc, #300]	; (800a8f0 <atanf+0x164>)
 800a7c4:	429c      	cmp	r4, r3
 800a7c6:	dc10      	bgt.n	800a7ea <atanf+0x5e>
 800a7c8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a7cc:	da0a      	bge.n	800a7e4 <atanf+0x58>
 800a7ce:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a8f4 <atanf+0x168>
 800a7d2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a7d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e2:	dce2      	bgt.n	800a7aa <atanf+0x1e>
 800a7e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7e8:	e013      	b.n	800a812 <atanf+0x86>
 800a7ea:	f000 f8a3 	bl	800a934 <fabsf>
 800a7ee:	4b42      	ldr	r3, [pc, #264]	; (800a8f8 <atanf+0x16c>)
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	dc4f      	bgt.n	800a894 <atanf+0x108>
 800a7f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	dc41      	bgt.n	800a880 <atanf+0xf4>
 800a7fc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a800:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a804:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a808:	2300      	movs	r3, #0
 800a80a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a80e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a818:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a8fc <atanf+0x170>
 800a81c:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a900 <atanf+0x174>
 800a820:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a904 <atanf+0x178>
 800a824:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a828:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a82c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a908 <atanf+0x17c>
 800a830:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a834:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a90c <atanf+0x180>
 800a838:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a83c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a910 <atanf+0x184>
 800a840:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a844:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a914 <atanf+0x188>
 800a848:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a84c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a918 <atanf+0x18c>
 800a850:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a854:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a91c <atanf+0x190>
 800a858:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a85c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a920 <atanf+0x194>
 800a860:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a864:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a924 <atanf+0x198>
 800a868:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a86c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a870:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a874:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a878:	d121      	bne.n	800a8be <atanf+0x132>
 800a87a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a87e:	e794      	b.n	800a7aa <atanf+0x1e>
 800a880:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a884:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a888:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a88c:	2301      	movs	r3, #1
 800a88e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a892:	e7be      	b.n	800a812 <atanf+0x86>
 800a894:	4b24      	ldr	r3, [pc, #144]	; (800a928 <atanf+0x19c>)
 800a896:	429c      	cmp	r4, r3
 800a898:	dc0b      	bgt.n	800a8b2 <atanf+0x126>
 800a89a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a89e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8a2:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a8ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8b0:	e7af      	b.n	800a812 <atanf+0x86>
 800a8b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a8b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e7a9      	b.n	800a812 <atanf+0x86>
 800a8be:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <atanf+0x1a0>)
 800a8c0:	491b      	ldr	r1, [pc, #108]	; (800a930 <atanf+0x1a4>)
 800a8c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a8c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a8ca:	ed93 0a00 	vldr	s0, [r3]
 800a8ce:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a8d2:	ed92 0a00 	vldr	s0, [r2]
 800a8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a8e0:	bfb8      	it	lt
 800a8e2:	eef1 7a67 	vneglt.f32	s15, s15
 800a8e6:	e760      	b.n	800a7aa <atanf+0x1e>
 800a8e8:	3fc90fdb 	.word	0x3fc90fdb
 800a8ec:	bfc90fdb 	.word	0xbfc90fdb
 800a8f0:	3edfffff 	.word	0x3edfffff
 800a8f4:	7149f2ca 	.word	0x7149f2ca
 800a8f8:	3f97ffff 	.word	0x3f97ffff
 800a8fc:	3c8569d7 	.word	0x3c8569d7
 800a900:	3d4bda59 	.word	0x3d4bda59
 800a904:	bd6ef16b 	.word	0xbd6ef16b
 800a908:	3d886b35 	.word	0x3d886b35
 800a90c:	3dba2e6e 	.word	0x3dba2e6e
 800a910:	3e124925 	.word	0x3e124925
 800a914:	3eaaaaab 	.word	0x3eaaaaab
 800a918:	bd15a221 	.word	0xbd15a221
 800a91c:	bd9d8795 	.word	0xbd9d8795
 800a920:	bde38e38 	.word	0xbde38e38
 800a924:	be4ccccd 	.word	0xbe4ccccd
 800a928:	401bffff 	.word	0x401bffff
 800a92c:	0800ae9c 	.word	0x0800ae9c
 800a930:	0800aeac 	.word	0x0800aeac

0800a934 <fabsf>:
 800a934:	ee10 3a10 	vmov	r3, s0
 800a938:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a93c:	ee00 3a10 	vmov	s0, r3
 800a940:	4770      	bx	lr
	...

0800a944 <nanf>:
 800a944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a94c <nanf+0x8>
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	7fc00000 	.word	0x7fc00000

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
